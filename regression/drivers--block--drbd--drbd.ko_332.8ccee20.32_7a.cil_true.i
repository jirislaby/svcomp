/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 154 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 178 "include/linux/types.h"
typedef __u16 __be16;
#line 180 "include/linux/types.h"
typedef __u32 __be32;
#line 185 "include/linux/types.h"
typedef __u32 __wsum;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 202 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 50 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 70 "include/asm-generic/bug.h"
struct completion;
#line 71
struct pt_regs;
#line 289 "include/linux/kernel.h"
struct pid;
#line 639
struct task_struct;
#line 640
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2004_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2004_8 ldv_2004 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 280
struct page;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 288
struct file;
#line 301
struct seq_file;
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2215_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2230_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2231_14 {
   struct __anonstruct_ldv_2215_15 ldv_2215 ;
   struct __anonstruct_ldv_2230_16 ldv_2230 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2231_14 ldv_2231 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 320 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 145 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4863_20 {
   u64 rip ;
   u64 rdp ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4869_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4870_19 {
   struct __anonstruct_ldv_4863_20 ldv_4863 ;
   struct __anonstruct_ldv_4869_21 ldv_4869 ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4879_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4870_19 ldv_4870 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4879_22 ldv_4879 ;
};
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 421
struct kmem_cache;
#line 422
struct perf_event;
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 663 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 549 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5801_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5802_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5801_27 ldv_5801 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5802_26 ldv_5802 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 69
struct compat_timespec;
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_30 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_31 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 70
struct pollfd;
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_32 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6027_29 {
   struct __anonstruct_futex_30 futex ;
   struct __anonstruct_nanosleep_31 nanosleep ;
   struct __anonstruct_poll_32 poll ;
};
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6027_29 ldv_6027 ;
};
#line 51 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 397 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_33 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_33 seqlock_t;
#line 112 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 123 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 235 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 443
struct hlist_nulls_node;
#line 443 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 645 "include/linux/mmzone.h"
struct rw_semaphore;
#line 646 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 761
struct ctl_table;
#line 175 "include/linux/ioport.h"
struct device;
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mpspec.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 288 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   unsigned char in_suspend : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 467 "include/linux/pm.h"
struct dev_power_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
   unsigned short ia32_compat ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 109 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 117 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 124 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 141 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 219
struct kernel_param;
#line 220 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 44 "include/linux/moduleparam.h"
struct kparam_string;
#line 44
struct kparam_array;
#line 44 "include/linux/moduleparam.h"
union __anonunion_ldv_11957_124 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 44 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11957_124 ldv_11957 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 398 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 798 "include/linux/rcupdate.h"
struct tracepoint;
#line 799 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 84 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 127 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 66
struct module_param_attrs;
#line 66 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 78
struct exception_table_entry;
#line 217
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 223 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 416
struct module_sect_attrs;
#line 416
struct module_notes_attrs;
#line 416
struct ftrace_event_call;
#line 416 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 38 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 39 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 53 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_125 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_125 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_126 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_126 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_127 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_127 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_128 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_128 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_129 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_129 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_130 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_130 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_131 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_131 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 142 "include/linux/if.h"
union __anonunion_ifs_ifsu_132 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 142 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_132 ifs_ifsu ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifrn_133 {
   char ifrn_name[16U] ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifru_134 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 160 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_133 ifr_ifrn ;
   union __anonunion_ifr_ifru_134 ifr_ifru ;
};
#line 224 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 124 "include/linux/if_ether.h"
struct prio_tree_node;
#line 124 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_13127_137 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13128_136 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13127_137 ldv_13127 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_13133_139 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13136_138 {
   struct __anonstruct_ldv_13133_139 ldv_13133 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13140_140 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_13128_136 ldv_13128 ;
   union __anonunion_ldv_13136_138 ldv_13136 ;
   union __anonunion_ldv_13140_140 ldv_13140 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_142 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_141 {
   struct __anonstruct_vm_set_142 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_141 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   atomic_t oom_disable_count ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_13516 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_13516 socket_state;
#line 179 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 180
struct pipe_inode_info;
#line 181
struct inode;
#line 182
struct net;
#line 199
struct fasync_struct;
#line 199 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 126 "include/linux/net.h"
struct proto_ops;
#line 126 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 152
struct kiocb;
#line 153 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 947
struct ctl_table_header;
#line 965 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 985 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1035 "include/linux/sysctl.h"
struct __anonstruct_ldv_14463_144 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1035 "include/linux/sysctl.h"
union __anonunion_ldv_14465_143 {
   struct __anonstruct_ldv_14463_144 ldv_14463 ;
   struct rcu_head rcu ;
};
#line 1035 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_14465_143 ldv_14465 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1074 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 118 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   int node ;
   unsigned int stat[19U] ;
};
#line 48 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 59 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 69 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 49 "include/linux/device.h"
struct device_attribute;
#line 49
struct driver_attribute;
#line 49 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 121
struct of_device_id;
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 155 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 216
struct device_type;
#line 255 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 306 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 333 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 394 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 403
struct dma_coherent_mem;
#line 403 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_power_domain *pwr_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct of_device_id  const  *of_match ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 458 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct file_ra_state;
#line 93
struct user_struct;
#line 94
struct writeback_control;
#line 173 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 190 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 874 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 161 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[3U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 452
struct net_device;
#line 453 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 259 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 260
struct sec_path;
#line 260 "include/linux/skbuff.h"
struct __anonstruct_ldv_19534_147 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 260 "include/linux/skbuff.h"
union __anonunion_ldv_19535_146 {
   __wsum csum ;
   struct __anonstruct_ldv_19534_147 ldv_19534 ;
};
#line 260 "include/linux/skbuff.h"
union __anonunion_ldv_19565_148 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 260 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19535_146 ldv_19535 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19565_148 ldv_19565 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 450
struct dst_entry;
#line 485
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 301 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 381 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 303
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_150 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_150 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_153 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_154 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_155 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_156 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_157 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_151 {
   int _pad[28U] ;
   struct __anonstruct__kill_152 _kill ;
   struct __anonstruct__timer_153 _timer ;
   struct __anonstruct__rt_154 _rt ;
   struct __anonstruct__sigchld_155 _sigchld ;
   struct __anonstruct__sigfault_156 _sigfault ;
   struct __anonstruct__sigpoll_157 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_151 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_160 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_160 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_21899_161 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_162 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_163 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_21899_161 ldv_21899 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_162 type_data ;
   union __anonunion_payload_163 payload ;
};
#line 297
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 361
struct futex_pi_state;
#line 362
struct robust_list_head;
#line 363
struct bio_list;
#line 364
struct fs_struct;
#line 365
struct perf_event_context;
#line 366
struct blk_plug;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_164 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_164 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 405 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct autogroup;
#line 517
struct tty_struct;
#line 517
struct taskstats;
#line 517
struct tty_audit_buf;
#line 517 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 674 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 719
struct backing_dev_info;
#line 720
struct reclaim_state;
#line 721 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 738 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1014
struct io_context;
#line 1037
struct rq;
#line 1038 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1100 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1105 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1140 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1166
struct rt_rq;
#line 1166 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1190
struct mem_cgroup;
#line 1190 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1539
struct files_struct;
#line 1539
struct irqaction;
#line 1539
struct css_set;
#line 1539
struct compat_robust_list_head;
#line 1539 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 201 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 205 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 365 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 55 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 81 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 96 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 104 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 113 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 209 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 231 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 280 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 292 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 313 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 362 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_h_u_170 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_m_u_171 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_170 h_u ;
   union __anonunion_m_u_171 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 407 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 483 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_h_u_174 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_m_u_175 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_174 h_u ;
   union __anonunion_m_u_175 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 536 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 552 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 658 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 684 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 818
struct prot_inuse;
#line 819 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 78 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 83 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 90 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 96 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[80U] ;
};
#line 102 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 108
struct proc_dir_entry;
#line 108 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*default_mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 66 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 334 "include/linux/in.h"
union __anonunion_in6_u_176 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 334 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_176 in6_u ;
};
#line 341 "include/linux/netfilter.h"
struct bio;
#line 342
struct bio_integrity_payload;
#line 343
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 35 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 100 "include/linux/dcache.h"
struct dentry_operations;
#line 100
struct super_block;
#line 100 "include/linux/dcache.h"
union __anonunion_d_u_182 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 100 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_182 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 151 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 422 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 51 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 51 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 229 "include/linux/radix-tree.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 423 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 340 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 386 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 573 "include/linux/fs.h"
union __anonunion_arg_184 {
   char *buf ;
   void *data ;
};
#line 573 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_183 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_184 arg ;
   int error ;
};
#line 573 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_183 read_descriptor_t;
#line 576 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 627 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
   struct mutex unmap_mutex ;
};
#line 650
struct hd_struct;
#line 650
struct gendisk;
#line 650 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 721
struct posix_acl;
#line 722
struct inode_operations;
#line 722 "include/linux/fs.h"
union __anonunion_ldv_26724_185 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 722
struct file_lock;
#line 722
struct cdev;
#line 722 "include/linux/fs.h"
union __anonunion_ldv_26750_186 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 722 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   uid_t i_uid ;
   gid_t i_gid ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   spinlock_t i_lock ;
   unsigned int i_flags ;
   struct mutex i_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_26724_185 ldv_26724 ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   struct rw_semaphore i_alloc_sem ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_26750_186 ldv_26750 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 899 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 907 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 930 "include/linux/fs.h"
union __anonunion_f_u_187 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 930 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_187 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1061 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1062 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1067 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_189 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_188 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_189 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_188 fl_u ;
};
#line 1168 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1360
struct file_system_type;
#line 1360
struct super_operations;
#line 1360
struct xattr_handler;
#line 1360
struct mtd_info;
#line 1360 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
};
#line 1487 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1525
struct block_device_operations;
#line 1526 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1566 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  , unsigned int  ) ;
   int (*check_acl)(struct inode * , int  , unsigned int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1612 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_devname)(struct seq_file * , struct vfsmount * ) ;
   int (*show_path)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1793 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned int namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 375 "include/linux/netfilter.h"
struct ebt_table;
#line 376 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 100 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 33 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 91
struct vlan_group;
#line 92
struct netpoll_info;
#line 93
struct phy_device;
#line 94
struct wireless_dev;
#line 95
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 211
struct neighbour;
#line 212
struct neigh_parms;
#line 239 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 244 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 292 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 392
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 440 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 441 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 548
struct Qdisc;
#line 548 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   u32 (*ndo_fix_features)(struct net_device * , u32  ) ;
   int (*ndo_set_features)(struct net_device * , u32  ) ;
};
#line 995
struct iw_handler_def;
#line 995
struct iw_public_data;
#line 995
struct in_device;
#line 995
struct dn_dev;
#line 995
struct inet6_dev;
#line 995
struct cpu_rmap;
#line 995
struct pcpu_lstats;
#line 995
struct pcpu_tstats;
#line 995
struct pcpu_dstats;
#line 995 "include/linux/netdevice.h"
union __anonunion_ldv_30426_191 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 995
struct garp_port;
#line 995
struct rtnl_link_ops;
#line 995 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   u32 features ;
   u32 hw_features ;
   u32 wanted_features ;
   u32 vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned int priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_group *vlgrp ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_30426_191 ldv_30426 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
   int group ;
};
#line 1551
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 339 "include/linux/irq.h"
struct timer_rand_state;
#line 91 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char const   *name ;
   struct proc_dir_entry *dir ;
};
#line 327 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   unsigned long vma_pages ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 65 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 84 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
};
#line 83 "include/linux/security.h"
struct xfrm_policy;
#line 84
struct xfrm_state;
#line 105
struct request_sock;
#line 3041 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 815 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 127
struct neigh_table;
#line 127 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   int (*output)(struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 118 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 128 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 138 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct rcu_head rcu ;
};
#line 149 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32  ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 394
struct dn_route;
#line 394 "include/net/neighbour.h"
union __anonunion_ldv_36273_200 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 394 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   int flags ;
   union __anonunion_ldv_36273_200 ldv_36273 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_201 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_201 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_36470_202 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36478_203 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36485_204 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_36470_202 ldv_36470 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_36478_203 ldv_36478 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_36485_204 ldv_36485 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 167 "include/net/sock.h"
struct __anonstruct_sk_backlog_205 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 167 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_205 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 716
struct request_sock_ops;
#line 717
struct timewait_sock_ops;
#line 718
struct inet_hashinfo;
#line 719
struct raw_hashinfo;
#line 720
struct udp_table;
#line 720 "include/net/sock.h"
union __anonunion_h_206 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 720 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_206 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_37644_207 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_37644_207 ldv_37644 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_208 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_208 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_209 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_209 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 236 "include/net/inet_sock.h"
struct inet_peer;
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 145 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 152
struct disk_events;
#line 153
struct request_queue;
#line 153
struct blk_integrity;
#line 153 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 13 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 18 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 54
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 373 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41263_216 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct __anonstruct_flush_218 {
   unsigned int seq ;
   struct list_head list ;
};
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41270_217 {
   void *elevator_private[3U] ;
   struct __anonstruct_flush_218 flush ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_41263_216 ldv_41263 ;
   union __anonunion_ldv_41270_217 ldv_41270 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 24 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 27 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 28 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 29 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 32 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 33 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 34 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 62 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 70 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 82 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 195 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 196 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 197 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 198 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 199 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 207 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 209 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 210 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 211 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 212
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 219 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 225 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 234 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   signed char discard_zeroes_data ;
};
#line 262 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 856 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1181 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1201 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1202 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1203 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1204 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1205 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1264 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 98 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 107 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 139 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 151 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[2U] ;
   struct icmpv6_mib *icmpv6[2U] ;
   struct icmpv6msg_mib *icmpv6msg[2U] ;
};
#line 162 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 668 "include/net/ipv6.h"
union __anonunion_ldv_43414_224 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 668 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_43414_224 ldv_43414 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_43438_226 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_43440_225 {
   struct __anonstruct_ldv_43438_226 ldv_43438 ;
   struct rcu_head rcu ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_43440_225 ldv_43440 ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 318 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1531 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_45843_229 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_45843_229 ldv_45843 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 7,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_LOCKED_TEST_ALLOWED = 3,
    BM_LOCKED_SET_ALLOWED = 1
} ;
#line 834 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 895 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 78 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 149 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 953
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 965 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   int peer_max_bio_size ;
   int local_max_bio_size ;
};
#line 1173
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2463 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 942 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   struct completion done ;
   unsigned int flags ;
   int error ;
};
#line 1737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 523 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 368 "include/linux/drbd.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 57 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    completed_ok = 22,
    resend = 23,
    fail_frozen_disk_io = 24,
    restart_frozen_disk_io = 25,
    nothing = 26
} ;
#line 310 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 747
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1181
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1520
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 186 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_230 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_230 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 193 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 3682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 177 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef __u32 __le32;
#line 181 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 731 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 64 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 142 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 40 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 74 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 108 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 136 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 145 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 112 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 45 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 47
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 47
  return (tmp);
}
}
#line 70 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 72
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 72
  return (tmp);
}
}
#line 75 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 77
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 77
  return (tmp);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 99 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 125 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2080: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 162
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 166
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 168
extern void mutex_unlock(struct mutex * ) ;
#line 171
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 23
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 24
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 27
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 47
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 48
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 51
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 59
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6048;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6048;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6048;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6048;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6048: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5802.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5802.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5802.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5802.rlock, flags);
#line 341
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 65
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 91
extern void complete(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 332 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 334
  tmp = alloc_pages_current(gfp_mask, order);
#line 334
  return (tmp);
}
}
#line 363
extern void __free_pages(struct page * , unsigned int  ) ;
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 141 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 221 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 255 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 270
  tmp___2 = __kmalloc(size, flags);
#line 270
  return (tmp___2);
}
}
#line 318 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 320
  tmp = kmalloc(size, flags | 32768U);
#line 320
  return (tmp);
}
}
#line 649 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 654
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 658
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 660
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 664
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 431 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 720 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 722
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 362 "include/linux/sched.h"
extern void schedule(void) ;
#line 2428
extern int _cond_resched(void) ;
#line 2285 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable();
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 67
  pagefault_enable();
#line 68
  return;
}
}
#line 214 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 217
extern void bio_put(struct bio * ) ;
#line 220
extern void bio_endio(struct bio * , int  ) ;
#line 229
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 919 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1204
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1299
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1300
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1443
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1444
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1445
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1446
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1447
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1449
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1451
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1453
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1457
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1460
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1461
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1462
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1463
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1464
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1466
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1467
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1468
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1471
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1473
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1474
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1475
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1476
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1479
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1482
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1485
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1486
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1501
rwlock_t global_state_lock ;
#line 1518
char *ppsize(char *buf , unsigned long long size ) ;
#line 1794 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1799
  _raw_read_lock(& global_state_lock);
#line 1800
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1801
  _raw_read_unlock(& global_state_lock);
#line 1803
  return (rv);
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_37644.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_46856;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_37644.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_37644.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_46856;
  }
  ldv_46856: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1892 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1894
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1897
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1900
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2157
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2157
  i = tmp;
#line 2163
  if (i < 0) {
#line 2163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2163);
  } else {

  }
#line 2164
  if (i == 0) {
#line 2165
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2167
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2168
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2170
      drbd_go_diskless(mdev);
    } else {

    }
#line 2171
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2173
  return;
}
}
#line 2176 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2181
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2182
    return (0);
  } else {

  }
#line 2184
  atomic_inc(& mdev->local_cnt);
#line 2185
  io_allowed = (unsigned int )mdev->state.ldv_37644.disk >= (unsigned int )mins;
#line 2186
  if (io_allowed == 0) {
#line 2187
    put_ldev(mdev);
  } else {

  }
#line 2188
  return (io_allowed);
}
}
#line 2450 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2454
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2454
  if (tmp != 0) {
#line 2455
    return;
  } else {

  }
#line 2457
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2458
  if (r != 0) {
#line 2459
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2462
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 174
  b = mdev->bitmap;
#line 175
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 175
  if (tmp == 0) {
#line 176
    return;
  } else {

  }
#line 177
  tmp___9 = get_current();
#line 177
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 177
    tmp___7 = get_current();
#line 177
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 177
      tmp___5 = get_current();
#line 177
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 177
        tmp___3 = get_current();
#line 177
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 177
        tmp___4 = (char *)"worker";
      }
#line 177
      tmp___6 = tmp___4;
    } else {
#line 177
      tmp___6 = (char *)"asender";
    }
#line 177
    tmp___8 = tmp___6;
  } else {
#line 177
    tmp___8 = (char *)"receiver";
  }
#line 177
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 183
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 189
  b = mdev->bitmap;
#line 192
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 193
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 194
    return;
  } else {

  }
#line 197
  tmp = ldv_mutex_trylock_7(& b->bm_change);
#line 197
  trylock_failed = tmp == 0;
#line 199
  if (trylock_failed != 0) {
#line 200
    tmp___9 = get_current();
#line 200
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 200
      tmp___7 = get_current();
#line 200
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 200
        tmp___5 = get_current();
#line 200
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 200
          tmp___3 = get_current();
#line 200
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 200
          tmp___4 = (char *)"worker";
        }
#line 200
        tmp___6 = tmp___4;
      } else {
#line 200
        tmp___6 = (char *)"asender";
      }
#line 200
      tmp___8 = tmp___6;
    } else {
#line 200
      tmp___8 = (char *)"receiver";
    }
#line 200
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 208
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 210
  if (((unsigned int )b->bm_flags & 7U) != 0U) {
#line 211
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 212
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 7U));
#line 214
  b->bm_why = why;
#line 215
  b->bm_task = get_current();
#line 216
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 220
  b = mdev->bitmap;
#line 221
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 223
    return;
  } else {

  }
#line 226
  if (((unsigned int )(mdev->bitmap)->bm_flags & 7U) == 0U) {
#line 227
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 229
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967288U);
#line 230
  b->bm_why = 0;
#line 231
  b->bm_task = 0;
#line 232
  ldv_mutex_unlock_9(& b->bm_change);
#line 233
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 263
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 263
  if (tmp != 0L) {
#line 263
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (263), "i" (12UL));
    ldv_47127: ;
#line 263
    goto ldv_47127;
  } else {

  }
#line 264
  page->ldv_13136.ldv_13133.private = page->ldv_13136.ldv_13133.private | idx;
#line 265
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 269
  return (page->ldv_13136.ldv_13133.private & 16777215UL);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 277
  b = mdev->bitmap;
#line 278
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13136.ldv_13133.private);
#line 279
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 279
  if (tmp == 0) {
#line 279
    goto ldv_47137;
  } else {

  }
#line 279
  tmp___0 = get_current();
#line 279
  __wait.flags = 0U;
#line 279
  __wait.private = (void *)tmp___0;
#line 279
  __wait.func = & autoremove_wake_function;
#line 279
  __wait.task_list.next = & __wait.task_list;
#line 279
  __wait.task_list.prev = & __wait.task_list;
  ldv_47140: 
#line 279
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 279
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 279
  if (tmp___1 == 0) {
#line 279
    goto ldv_47139;
  } else {

  }
#line 279
  schedule();
#line 279
  goto ldv_47140;
  ldv_47139: 
#line 279
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_47137: ;
#line 282
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 284
  b = mdev->bitmap;
#line 285
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13136.ldv_13133.private);
#line 286
  clear_bit(31, (unsigned long volatile   *)addr);
#line 287
  __asm__  volatile   ("": : : "memory");
#line 288
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 289
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 296
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 297
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 298
  return;
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 302
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 303
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 307
  addr = (unsigned long const volatile   *)(& page->ldv_13136.ldv_13133.private);
#line 308
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 313
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 314
  return;
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 318
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 319
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 323
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 324
  return;
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 328
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13136.ldv_13133.private));
#line 328
  return (tmp);
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 335
  page_nr = (unsigned int )(long_nr >> 9);
#line 336
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 336
  if (tmp != 0L) {
#line 336
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (336), "i" (12UL));
    ldv_47174: ;
#line 336
    goto ldv_47174;
  } else {

  }
#line 337
  return (page_nr);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 343
  page_nr = (unsigned int )(bitnr >> 15);
#line 344
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 344
  if (tmp != 0L) {
#line 344
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (344), "i" (12UL));
    ldv_47180: ;
#line 344
    goto ldv_47180;
  } else {

  }
#line 345
  return (page_nr);
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx , enum km_type  const  km ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 350
  page = *(b->bm_pages + (unsigned long )idx);
#line 351
  tmp = __kmap_atomic(page);
#line 351
  return ((unsigned long *)tmp);
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 356
  tmp = __bm_map_pidx(b, idx, KM_IRQ1);
#line 356
  return (tmp);
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 361
  __kunmap_atomic((void *)p_addr);
#line 362
  return;
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 366
  return;
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 392
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 393
    return;
  } else {

  }
#line 395
  i = 0UL;
#line 395
  goto ldv_47205;
  ldv_47204: ;
#line 396
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 397
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 400
    goto ldv_47203;
  } else {

  }
#line 402
  __free_pages(*(pages + i), 0U);
#line 403
  *(pages + i) = 0;
  ldv_47203: 
#line 395
  i = i + 1UL;
  ldv_47205: ;
#line 395
  if (i < number) {
#line 396
    goto ldv_47204;
  } else {

  }

#line 400
  return;
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 409
  if (v != 0) {
#line 410
    vfree((void const   *)ptr);
  } else {
#line 412
    kfree((void const   *)ptr);
  }
#line 413
  return;
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 420
  old_pages = b->bm_pages;
#line 422
  vmalloced = 0U;
#line 423
  have = b->bm_number_of_pages;
#line 425
  tmp = __builtin_expect(have == 0UL, 0L);
#line 425
  if (tmp != 0L) {
#line 425
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 425
    if (tmp___0 != 0L) {
#line 425
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (425), "i" (12UL));
      ldv_47222: ;
#line 425
      goto ldv_47222;
    } else {

    }
  } else {

  }
#line 426
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 426
  if (tmp___1 != 0L) {
#line 426
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 426
    if (tmp___2 != 0L) {
#line 426
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (426), "i" (12UL));
      ldv_47223: ;
#line 426
      goto ldv_47223;
    } else {

    }
  } else {

  }
#line 428
  if (have == want) {
#line 429
    return (old_pages);
  } else {

  }
#line 436
  bytes = (unsigned int )want * 8U;
#line 437
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 437
  new_pages = (struct page **)tmp___3;
#line 438
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 439
    tmp___4 = vmalloc((unsigned long )bytes);
#line 439
    new_pages = (struct page **)tmp___4;
#line 440
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 441
      return (0);
    } else {

    }
#line 442
    vmalloced = 1U;
  } else {

  }
#line 445
  memset((void *)new_pages, 0, (size_t )bytes);
#line 446
  if (want >= have) {
#line 447
    i = 0U;
#line 447
    goto ldv_47225;
    ldv_47224: 
#line 448
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 447
    i = i + 1U;
    ldv_47225: ;
#line 447
    if ((unsigned long )i < have) {
#line 448
      goto ldv_47224;
    } else {

    }

#line 449
    goto ldv_47228;
    ldv_47227: 
#line 450
    page = alloc_pages(131282U, 0U);
#line 451
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 452
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 453
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 454
      return (0);
    } else {

    }
#line 458
    bm_store_page_idx(page, (unsigned long )i);
#line 459
    *(new_pages + (unsigned long )i) = page;
#line 449
    i = i + 1U;
    ldv_47228: ;
#line 449
    if ((unsigned long )i < want) {
#line 450
      goto ldv_47227;
    } else {

    }

  } else {
#line 462
    i = 0U;
#line 462
    goto ldv_47231;
    ldv_47230: 
#line 463
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 462
    i = i + 1U;
    ldv_47231: ;
#line 462
    if ((unsigned long )i < want) {
#line 463
      goto ldv_47230;
    } else {

    }

  }
#line 469
  if (vmalloced != 0U) {
#line 470
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 472
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 474
  return (new_pages);
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 483
  b = mdev->bitmap;
#line 484
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 484
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 484
  if (tmp != 0L) {
#line 484
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       484);
  } else {

  }
#line 484
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 485
  tmp___0 = kzalloc(400UL, 208U);
#line 485
  b = (struct drbd_bitmap *)tmp___0;
#line 486
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 487
    return (-12);
  } else {

  }
#line 488
  spinlock_check(& b->bm_lock);
#line 488
  __raw_spin_lock_init(& b->bm_lock.ldv_5802.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 489
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 490
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 492
  mdev->bitmap = b;
#line 494
  return (0);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 499
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 499
  if (_b != 0) {
#line 499
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            499);
  } else {

  }
#line 499
  if (_b != 0) {
#line 499
    return (0UL);
  } else {

  }
#line 500
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 507
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 507
  if (_b != 0) {
#line 507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            507);
  } else {

  }
#line 507
  if (_b != 0) {
#line 507
    return;
  } else {

  }
#line 508
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 509
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 510
  kfree((void const   *)mdev->bitmap);
#line 511
  mdev->bitmap = 0;
#line 512
  return;
}
}
#line 522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 527
  cleared = 0;
#line 530
  tmp = (int )b->bm_bits & 32767;
#line 532
  mask = (1UL << (tmp & 63)) - 1UL;
#line 535
  mask = mask;
#line 537
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 538
  bm = p_addr + (unsigned long )(tmp / 64);
#line 539
  if (mask != 0UL) {
#line 544
    tmp___0 = hweight_long(*bm & ~ mask);
#line 544
    cleared = (int )tmp___0;
#line 545
    *bm = *bm & mask;
#line 546
    bm = bm + 1;
  } else {

  }
#line 555
  bm_unmap(p_addr);
#line 556
  return (cleared);
}
}
#line 559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 566
  tmp = (int )b->bm_bits & 32767;
#line 568
  mask = (1UL << (tmp & 63)) - 1UL;
#line 571
  mask = mask;
#line 573
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 574
  bm = p_addr + (unsigned long )(tmp / 64);
#line 575
  if (mask != 0UL) {
#line 580
    *bm = *bm | ~ mask;
#line 581
    bm = bm + 1;
  } else {

  }
#line 589
  bm_unmap(p_addr);
#line 590
  return;
}
}
#line 594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 597
  bits = 0UL;
#line 598
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 602
  idx = 0;
#line 602
  goto ldv_47283;
  ldv_47282: 
#line 603
  p_addr = __bm_map_pidx(b, (unsigned int )idx, KM_USER0);
#line 604
  i = 0;
#line 604
  goto ldv_47279;
  ldv_47278: 
#line 605
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 605
  bits = tmp + bits;
#line 604
  i = i + 1;
  ldv_47279: ;
#line 604
  if ((unsigned int )i <= 511U) {
#line 605
    goto ldv_47278;
  } else {

  }
#line 606
  __bm_unmap(p_addr, KM_USER0);
#line 607
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                607, 0);
#line 607
  _cond_resched();
#line 602
  idx = idx + 1;
  ldv_47283: ;
#line 602
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 603
    goto ldv_47282;
  } else {

  }
#line 610
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 611
  p_addr = __bm_map_pidx(b, (unsigned int )idx, KM_USER0);
#line 612
  i = 0;
#line 612
  goto ldv_47286;
  ldv_47285: 
#line 613
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 613
  bits = tmp___0 + bits;
#line 612
  i = i + 1;
  ldv_47286: ;
#line 612
  if (i < last_word) {
#line 613
    goto ldv_47285;
  } else {

  }
#line 614
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 615
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 615
  bits = tmp___1 + bits;
#line 619
  __bm_unmap(p_addr, KM_USER0);
#line 620
  return (bits);
}
}
#line 624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 630
  end = offset + len;
#line 632
  if (b->bm_words < end) {
#line 633
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 634
    return;
  } else {

  }
#line 637
  goto ldv_47303;
  ldv_47302: 
#line 638
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 638
  __min2 = end;
#line 638
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 639
  idx = bm_word_to_page_idx(b, offset);
#line 640
  p_addr = bm_map_pidx(b, idx);
#line 641
  bm = p_addr + (offset & 511UL);
#line 642
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 643
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 646
    memset((void *)bm, c, do_now * 8UL);
  }
#line 647
  bm_unmap(p_addr);
#line 648
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 649
  offset = offset + do_now;
  ldv_47303: ;
#line 637
  if (offset < end) {
#line 638
    goto ldv_47302;
  } else {

  }

#line 642
  return;
}
}
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 663
  b = mdev->bitmap;
#line 666
  opages = 0;
#line 667
  err = 0;
#line 670
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 670
  if (_b != 0) {
#line 670
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            670);
  } else {

  }
#line 670
  if (_b != 0) {
#line 670
    return (-12);
  } else {

  }
#line 672
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 674
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 677
  if (b->bm_dev_capacity == capacity) {
#line 678
    goto out;
  } else {

  }
#line 680
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 682
  if (capacity == 0UL) {
#line 683
    spin_lock_irq(& b->bm_lock);
#line 684
    opages = b->bm_pages;
#line 685
    onpages = b->bm_number_of_pages;
#line 686
    owords = b->bm_words;
#line 687
    b->bm_pages = 0;
#line 688
    tmp___2 = 0UL;
#line 688
    b->bm_dev_capacity = tmp___2;
#line 688
    tmp___1 = tmp___2;
#line 688
    b->bm_words = tmp___1;
#line 688
    tmp___0 = tmp___1;
#line 688
    b->bm_bits = tmp___0;
#line 688
    tmp = tmp___0;
#line 688
    b->bm_set = tmp;
#line 688
    b->bm_number_of_pages = tmp;
#line 693
    spin_unlock_irq(& b->bm_lock);
#line 694
    bm_free_pages(opages, onpages);
#line 695
    bm_vk_free((void *)opages, opages_vmalloced);
#line 696
    goto out;
  } else {

  }
#line 698
  bits = (capacity + 7UL) >> 3;
#line 705
  words = (bits + 63UL) >> 6;
#line 707
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 707
  if (tmp___3 != 0) {
#line 708
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 709
    put_ldev(mdev);
#line 710
    if ((unsigned long long )bits > bits_on_disk) {
#line 711
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 712
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 713
      err = -28;
#line 714
      goto out;
    } else {

    }
  } else {

  }
#line 718
  want = (words * 8UL + 4095UL) >> 12;
#line 719
  have = b->bm_number_of_pages;
#line 720
  if (want == have) {
#line 721
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 721
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              721);
    } else {

    }
#line 722
    npages = b->bm_pages;
  } else {
#line 724
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 724
    if (tmp___4 != 0) {
#line 725
      npages = 0;
    } else {
#line 727
      npages = bm_realloc_pages(b, want);
    }
  }
#line 730
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 731
    err = -12;
#line 732
    goto out;
  } else {

  }
#line 735
  spin_lock_irq(& b->bm_lock);
#line 736
  opages = b->bm_pages;
#line 737
  owords = b->bm_words;
#line 738
  obits = b->bm_bits;
#line 740
  growing = bits > obits;
#line 741
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 742
    bm_set_surplus(b);
  } else {

  }
#line 744
  b->bm_pages = npages;
#line 745
  b->bm_number_of_pages = want;
#line 746
  b->bm_bits = bits;
#line 747
  b->bm_words = words;
#line 748
  b->bm_dev_capacity = capacity;
#line 750
  if (growing != 0) {
#line 751
    if (set_new_bits != 0) {
#line 752
      bm_memset(b, owords, 255, words - owords);
#line 753
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 755
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 759
  if (want < have) {
#line 761
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 764
  bm_clear_surplus(b);
#line 766
  spin_unlock_irq(& b->bm_lock);
#line 767
  if ((unsigned long )opages != (unsigned long )npages) {
#line 768
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 769
  if (growing == 0) {
#line 770
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 771
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 774
  drbd_bm_unlock(mdev);
#line 775
  return (err);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 788
  b = mdev->bitmap;
#line 792
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 792
  if (_b != 0) {
#line 792
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            792);
  } else {

  }
#line 792
  if (_b != 0) {
#line 792
    return (0UL);
  } else {

  }
#line 793
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 793
  if (_b___0 != 0) {
#line 793
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            793);
  } else {

  }
#line 793
  if (_b___0 != 0) {
#line 793
    return (0UL);
  } else {

  }
#line 795
  tmp = spinlock_check(& b->bm_lock);
#line 795
  flags = _raw_spin_lock_irqsave(tmp);
#line 796
  s = b->bm_set;
#line 797
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 799
  return (s);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 806
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 806
  if (tmp == 0) {
#line 807
    return (0UL);
  } else {

  }
#line 808
  s = _drbd_bm_total_weight(mdev);
#line 809
  put_ldev(mdev);
#line 810
  return (s);
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 815
  b = mdev->bitmap;
#line 816
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 816
  if (_b != 0) {
#line 816
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            816);
  } else {

  }
#line 816
  if (_b != 0) {
#line 816
    return (0UL);
  } else {

  }
#line 817
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 817
  if (_b___0 != 0) {
#line 817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            817);
  } else {

  }
#line 817
  if (_b___0 != 0) {
#line 817
    return (0UL);
  } else {

  }
#line 819
  return (b->bm_words);
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 824
  b = mdev->bitmap;
#line 825
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 825
  if (_b != 0) {
#line 825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            825);
  } else {

  }
#line 825
  if (_b != 0) {
#line 825
    return (0UL);
  } else {

  }
#line 827
  return (b->bm_bits);
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 838
  b = mdev->bitmap;
#line 844
  end = offset + number;
#line 846
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 846
  if (_b != 0) {
#line 846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            846);
  } else {

  }
#line 846
  if (_b != 0) {
#line 846
    return;
  } else {

  }
#line 847
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 847
  if (_b___0 != 0) {
#line 847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            847);
  } else {

  }
#line 847
  if (_b___0 != 0) {
#line 847
    return;
  } else {

  }
#line 848
  if (number == 0UL) {
#line 849
    return;
  } else {

  }
#line 850
  __ret_warn_on = b->bm_words <= offset;
#line 850
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 850
  if (tmp != 0L) {
#line 850
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       850);
  } else {

  }
#line 850
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 851
  __ret_warn_on___0 = b->bm_words < end;
#line 851
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 851
  if (tmp___0 != 0L) {
#line 851
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       851);
  } else {

  }
#line 851
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 853
  spin_lock_irq(& b->bm_lock);
#line 854
  goto ldv_47392;
  ldv_47391: 
#line 855
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 855
  __min2 = end;
#line 855
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 856
  idx = bm_word_to_page_idx(b, offset);
#line 857
  p_addr = bm_map_pidx(b, idx);
#line 858
  bm = p_addr + (offset & 511UL);
#line 859
  offset = offset + do_now;
#line 860
  goto ldv_47389;
  ldv_47388: 
#line 861
  bits = hweight_long(*bm);
#line 862
  tmp___1 = buffer;
#line 862
  buffer = buffer + 1;
#line 862
  word = *bm | *tmp___1;
#line 863
  tmp___2 = bm;
#line 863
  bm = bm + 1;
#line 863
  *tmp___2 = word;
#line 864
  tmp___3 = hweight_long(word);
#line 864
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_47389: 
#line 860
  tmp___4 = do_now;
#line 860
  do_now = do_now - (size_t )1;
#line 860
  if (tmp___4 != 0UL) {
#line 861
    goto ldv_47388;
  } else {

  }
#line 866
  bm_unmap(p_addr);
#line 867
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_47392: ;
#line 854
  if (offset < end) {
#line 855
    goto ldv_47391;
  } else {

  }

#line 874
  if (b->bm_words == end) {
#line 875
    tmp___5 = bm_clear_surplus(b);
#line 875
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 876
  spin_unlock_irq(& b->bm_lock);
#line 877
  return;
}
}
#line 882 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 885
  b = mdev->bitmap;
#line 889
  end = offset + number;
#line 891
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 891
  if (_b != 0) {
#line 891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            891);
  } else {

  }
#line 891
  if (_b != 0) {
#line 891
    return;
  } else {

  }
#line 892
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 892
  if (_b___0 != 0) {
#line 892
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            892);
  } else {

  }
#line 892
  if (_b___0 != 0) {
#line 892
    return;
  } else {

  }
#line 894
  spin_lock_irq(& b->bm_lock);
#line 895
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 903
    goto ldv_47417;
    ldv_47416: 
#line 904
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 904
    __min2 = end;
#line 904
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 905
    tmp = bm_word_to_page_idx(b, offset);
#line 905
    p_addr = bm_map_pidx(b, tmp);
#line 906
    bm = p_addr + (offset & 511UL);
#line 907
    offset = offset + do_now;
#line 908
    goto ldv_47414;
    ldv_47413: 
#line 909
    tmp___0 = buffer;
#line 909
    buffer = buffer + 1;
#line 909
    tmp___1 = bm;
#line 909
    bm = bm + 1;
#line 909
    *tmp___0 = *tmp___1;
    ldv_47414: 
#line 908
    tmp___2 = do_now;
#line 908
    do_now = do_now - (size_t )1;
#line 908
    if (tmp___2 != 0UL) {
#line 909
      goto ldv_47413;
    } else {

    }
#line 910
    bm_unmap(p_addr);
    ldv_47417: ;
#line 903
    if (offset < end) {
#line 904
      goto ldv_47416;
    } else {

    }

  }
#line 913
  spin_unlock_irq(& b->bm_lock);
#line 914
  return;
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 919
  b = mdev->bitmap;
#line 920
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 920
  if (_b != 0) {
#line 920
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            920);
  } else {

  }
#line 920
  if (_b != 0) {
#line 920
    return;
  } else {

  }
#line 921
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 921
  if (_b___0 != 0) {
#line 921
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            921);
  } else {

  }
#line 921
  if (_b___0 != 0) {
#line 921
    return;
  } else {

  }
#line 923
  spin_lock_irq(& b->bm_lock);
#line 924
  bm_memset(b, 0UL, 255, b->bm_words);
#line 925
  bm_clear_surplus(b);
#line 926
  b->bm_set = b->bm_bits;
#line 927
  spin_unlock_irq(& b->bm_lock);
#line 928
  return;
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 933
  b = mdev->bitmap;
#line 934
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 934
  if (_b != 0) {
#line 934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            934);
  } else {

  }
#line 934
  if (_b != 0) {
#line 934
    return;
  } else {

  }
#line 935
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 935
  if (_b___0 != 0) {
#line 935
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            935);
  } else {

  }
#line 935
  if (_b___0 != 0) {
#line 935
    return;
  } else {

  }
#line 937
  spin_lock_irq(& b->bm_lock);
#line 938
  bm_memset(b, 0UL, 0, b->bm_words);
#line 939
  b->bm_set = 0UL;
#line 940
  spin_unlock_irq(& b->bm_lock);
#line 941
  return;
}
}
#line 953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 955
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 956
  mdev = ctx->mdev;
#line 957
  b = mdev->bitmap;
#line 958
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 958
  idx = (unsigned int )tmp;
#line 959
  uptodate = (int )bio->bi_flags & 1;
#line 966
  if (error == 0 && uptodate == 0) {
#line 967
    error = -5;
  } else {

  }
#line 969
  if ((ctx->flags & 1U) == 0U) {
#line 969
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 969
    if (tmp___0 == 0) {
#line 971
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 973
  if (error != 0) {
#line 976
    ctx->error = error;
#line 977
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 980
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 980
    if (tmp___1 != 0) {
#line 981
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 984
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 985
    descriptor.modname = "drbd";
#line 985
    descriptor.function = "bm_async_io_complete";
#line 985
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 985
    descriptor.format = "bitmap page idx %u completed\n";
#line 985
    descriptor.lineno = 985U;
#line 985
    descriptor.flags = 0U;
#line 985
    descriptor.enabled = (char)0;
#line 985
    tmp___2 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 985
    if (tmp___2 != 0L) {
#line 985
      dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u completed\n",
                 idx);
    } else {

    }
  }
#line 988
  bm_page_unlock_io(mdev, (int )idx);
#line 991
  if ((int )ctx->flags & 1) {
#line 992
    put_page((bio->bi_io_vec)->bv_page);
  } else {

  }
#line 994
  bio_put(bio);
#line 996
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 996
  if (tmp___3 != 0) {
#line 997
    complete(& ctx->done);
  } else {

  }
#line 998
  return;
}
}
#line 1000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;

  {
#line 1003
  tmp = bio_alloc(208U, 1);
#line 1003
  bio = tmp;
#line 1004
  mdev = ctx->mdev;
#line 1005
  b = mdev->bitmap;
#line 1009
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1011
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1016
  __min1 = 4096U;
#line 1016
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1016
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1016
  len = __min1 < __min2 ? __min1 : __min2;
#line 1020
  bm_page_lock_io(mdev, page_nr);
#line 1023
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1025
  if ((int )ctx->flags & 1) {
#line 1029
    page = alloc_pages(18U, 0U);
#line 1030
    dest = __kmap_atomic(page);
#line 1031
    src = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1032
    __len = 4096UL;
#line 1032
    if (__len > 63UL) {
#line 1032
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1032
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1033
    __kunmap_atomic(src);
#line 1034
    __kunmap_atomic(dest);
#line 1035
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1037
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1039
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1040
  bio->bi_sector = on_disk_sector;
#line 1041
  bio_add_page(bio, page, len, 0U);
#line 1042
  bio->bi_private = (void *)ctx;
#line 1043
  bio->bi_end_io = & bm_async_io_complete;
#line 1045
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1045
  if (tmp___1 != 0) {
#line 1046
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1047
    bio_endio(bio, -5);
  } else {
#line 1049
    submit_bio(rw, bio);
  }
#line 1050
  return;
}
}
#line 1056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  long tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char *tmp___5 ;

  {
#line 1061
  init_completion(& ctx.done);
#line 1061
  ctx.mdev = mdev;
#line 1061
  ctx.in_flight.counter = 1;
#line 1061
  ctx.done = ctx.done;
#line 1061
  ctx.flags = lazy_writeout_upper_idx != 0U;
#line 1061
  ctx.error = 0;
#line 1064
  b = mdev->bitmap;
#line 1065
  count = 0;
#line 1068
  err = 0;
#line 1078
  if (ctx.flags == 0U) {
#line 1079
    __ret_warn_on = ((unsigned int )b->bm_flags & 7U) == 0U;
#line 1079
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1079
    if (tmp != 0L) {
#line 1079
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1079);
    } else {

    }
#line 1079
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1081
  num_pages = (int )b->bm_number_of_pages;
#line 1083
  now = jiffies;
#line 1086
  i = 0;
#line 1086
  goto ldv_47496;
  ldv_47495: ;
#line 1088
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1089
    goto ldv_47489;
  } else {

  }
#line 1090
  if (rw & 1) {
#line 1091
    tmp___1 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1091
    if (tmp___1 != 0) {
#line 1092
      descriptor.modname = "drbd";
#line 1092
      descriptor.function = "bm_rw";
#line 1092
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1092
      descriptor.format = "skipped bm write for idx %u\n";
#line 1092
      descriptor.lineno = 1092U;
#line 1092
      descriptor.flags = 0U;
#line 1092
      descriptor.enabled = (char)0;
#line 1092
      tmp___0 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1092
      if (tmp___0 != 0L) {
#line 1092
        dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                   "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1093
      goto ldv_47492;
    } else {

    }
#line 1097
    if (lazy_writeout_upper_idx != 0U) {
#line 1097
      tmp___3 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1097
      if (tmp___3 == 0) {
#line 1099
        descriptor___0.modname = "drbd";
#line 1099
        descriptor___0.function = "bm_rw";
#line 1099
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1099
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1099
        descriptor___0.lineno = 1099U;
#line 1099
        descriptor___0.flags = 0U;
#line 1099
        descriptor___0.enabled = (char)0;
#line 1099
        tmp___2 = __builtin_expect((int )((signed char )descriptor___0.enabled) != 0,
                                   0L);
#line 1099
        if (tmp___2 != 0L) {
#line 1099
          dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                     "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1100
        goto ldv_47492;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1103
  atomic_inc(& ctx.in_flight);
#line 1104
  bm_page_io_async(& ctx, i, rw);
#line 1105
  count = count + 1;
#line 1106
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1106, 0);
#line 1106
  _cond_resched();
  ldv_47492: 
#line 1086
  i = i + 1;
  ldv_47496: ;
#line 1086
  if (i < num_pages) {
#line 1087
    goto ldv_47495;
  } else {

  }
  ldv_47489: 
#line 1114
  tmp___4 = atomic_dec_and_test(& ctx.in_flight);
#line 1114
  if (tmp___4 == 0) {
#line 1115
    wait_for_completion(& ctx.done);
  } else {

  }
#line 1116
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1120
  if (ctx.error != 0) {
#line 1121
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1122
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 1123
    err = -5;
  } else {

  }
#line 1126
  now = jiffies;
#line 1127
  if (rw == 1) {
#line 1128
    drbd_md_flush(mdev);
  } else {
#line 1130
    b->bm_set = bm_count_bits(b);
#line 1131
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1134
  now = b->bm_set;
#line 1136
  tmp___5 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1136
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___5, now);
#line 1139
  return (err);
}
}
#line 1146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1148
  tmp = bm_rw(mdev, 0, 0U);
#line 1148
  return (tmp);
}
}
#line 1157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1159
  tmp = bm_rw(mdev, 1, 0U);
#line 1159
  return (tmp);
}
}
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1169
  tmp = bm_rw(mdev, 1, upper_idx);
#line 1169
  return (tmp);
}
}
#line 1185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 1190
  init_completion(& ctx.done);
#line 1190
  ctx.mdev = mdev;
#line 1190
  ctx.in_flight.counter = 1;
#line 1190
  ctx.done = ctx.done;
#line 1190
  ctx.flags = 1U;
#line 1190
  ctx.error = 0;
#line 1194
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1194
  if (tmp___0 != 0) {
#line 1195
    descriptor.modname = "drbd";
#line 1195
    descriptor.function = "drbd_bm_write_page";
#line 1195
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1195
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1195
    descriptor.lineno = 1195U;
#line 1195
    descriptor.flags = 0U;
#line 1195
    descriptor.enabled = (char)0;
#line 1195
    tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1195
    if (tmp != 0L) {
#line 1195
      dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipped bm page write for idx %u\n",
                 idx);
    } else {

    }
#line 1196
    return (0);
  } else {

  }
#line 1199
  bm_page_io_async(& ctx, (int )idx, 145);
#line 1200
  wait_for_completion(& ctx.done);
#line 1202
  if (ctx.error != 0) {
#line 1203
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_page");
  } else {

  }
#line 1207
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1208
  return (ctx.error);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1222
  b = mdev->bitmap;
#line 1228
  if (b->bm_bits < bm_fo) {
#line 1229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1230
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1232
    goto ldv_47528;
    ldv_47527: 
#line 1234
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1235
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1235
    p_addr = __bm_map_pidx(b, tmp, km);
#line 1237
    if ((int )find_zero_bit != 0) {
#line 1238
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1238
      i = (unsigned int )tmp___0;
    } else {
#line 1241
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1241
      i = (unsigned int )tmp___1;
    }
#line 1244
    __bm_unmap(p_addr, km);
#line 1245
    if (i <= 32767U) {
#line 1246
      bm_fo = (unsigned long )i + bit_offset;
#line 1247
      if (b->bm_bits <= bm_fo) {
#line 1248
        goto ldv_47525;
      } else {

      }
#line 1249
      goto found;
    } else {

    }
#line 1251
    bm_fo = bit_offset + 32768UL;
    ldv_47528: ;
#line 1232
    if (b->bm_bits > bm_fo) {
#line 1233
      goto ldv_47527;
    } else {

    }
    ldv_47525: 
#line 1253
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1256
  return (bm_fo);
}
}
#line 1259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1262
  b = mdev->bitmap;
#line 1263
  i = 0xffffffffffffffffUL;
#line 1265
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1265
  if (_b != 0) {
#line 1265
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1265);
  } else {

  }
#line 1265
  if (_b != 0) {
#line 1265
    return (i);
  } else {

  }
#line 1266
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1266
  if (_b___0 != 0) {
#line 1266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1266);
  } else {

  }
#line 1266
  if (_b___0 != 0) {
#line 1266
    return (i);
  } else {

  }
#line 1268
  spin_lock_irq(& b->bm_lock);
#line 1269
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1270
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1272
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1274
  spin_unlock_irq(& b->bm_lock);
#line 1275
  return (i);
}
}
#line 1278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1280
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1280
  return (tmp);
}
}
#line 1293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1296
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1296
  return (tmp);
}
}
#line 1299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1302
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1302
  return (tmp);
}
}
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1314
  b = mdev->bitmap;
#line 1315
  p_addr = 0;
#line 1317
  last_page_nr = 4294967295U;
#line 1318
  c = 0;
#line 1319
  changed_total = 0;
#line 1321
  if (b->bm_bits <= e) {
#line 1322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1324
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1326
  bitnr = s;
#line 1326
  goto ldv_47567;
  ldv_47566: 
#line 1327
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1327
  page_nr = tmp;
#line 1328
  if (page_nr != last_page_nr) {
#line 1329
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1330
      __bm_unmap(p_addr, KM_IRQ1);
    } else {

    }
#line 1331
    if (c < 0) {
#line 1332
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1333
    if (c > 0) {
#line 1334
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1335
    changed_total = changed_total + c;
#line 1336
    c = 0;
#line 1337
    p_addr = __bm_map_pidx(b, page_nr, KM_IRQ1);
#line 1338
    last_page_nr = page_nr;
  } else {

  }
#line 1340
  if (val != 0) {
#line 1341
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1341
    c = (tmp___0 == 0) + c;
  } else {
#line 1343
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1343
    c = c - (tmp___1 != 0);
  }
#line 1326
  bitnr = bitnr + 1UL;
  ldv_47567: ;
#line 1326
  if (bitnr <= e) {
#line 1327
    goto ldv_47566;
  } else {

  }

#line 1345
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1346
    __bm_unmap(p_addr, KM_IRQ1);
  } else {

  }
#line 1347
  if (c < 0) {
#line 1348
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1349
  if (c > 0) {
#line 1350
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1351
  changed_total = changed_total + c;
#line 1352
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1353
  return (changed_total);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1364
  b = mdev->bitmap;
#line 1365
  c = 0;
#line 1367
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1367
  if (_b != 0) {
#line 1367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1367);
  } else {

  }
#line 1367
  if (_b != 0) {
#line 1367
    return (1);
  } else {

  }
#line 1368
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1368
  if (_b___0 != 0) {
#line 1368
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1368);
  } else {

  }
#line 1368
  if (_b___0 != 0) {
#line 1368
    return (0);
  } else {

  }
#line 1370
  tmp = spinlock_check(& b->bm_lock);
#line 1370
  flags = _raw_spin_lock_irqsave(tmp);
#line 1371
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1372
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1374
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1376
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1377
  return (c);
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1383
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1383
  return (tmp);
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1389
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1389
  return (- tmp);
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1399
  tmp = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1399
  paddr = (unsigned long *)tmp;
#line 1400
  i = first_word;
#line 1400
  goto ldv_47606;
  ldv_47605: 
#line 1401
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1401
  bits = (int )tmp___0;
#line 1402
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1403
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1400
  i = i + 1;
  ldv_47606: ;
#line 1400
  if (i < last_word) {
#line 1401
    goto ldv_47605;
  } else {

  }
#line 1405
  __kunmap_atomic((void *)paddr);
#line 1406
  return;
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1423
  b = mdev->bitmap;
#line 1424
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1425
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1432
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1434
    spin_lock_irq(& b->bm_lock);
#line 1435
    __bm_change_bits_to(mdev, s, e, 1);
#line 1436
    spin_unlock_irq(& b->bm_lock);
#line 1437
    return;
  } else {

  }
#line 1442
  spin_lock_irq(& b->bm_lock);
#line 1445
  if (sl != 0UL) {
#line 1446
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1448
  first_page = (int )(sl >> 15);
#line 1449
  last_page = (int )(el >> 15);
#line 1453
  first_word = (int )(sl >> 6) & 511;
#line 1454
  last_word = 512;
#line 1457
  page_nr = first_page;
#line 1457
  goto ldv_47623;
  ldv_47622: 
#line 1458
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1459
  spin_unlock_irq(& b->bm_lock);
#line 1460
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1460, 0);
#line 1460
  _cond_resched();
#line 1461
  first_word = 0;
#line 1462
  spin_lock_irq(& b->bm_lock);
#line 1457
  page_nr = page_nr + 1;
  ldv_47623: ;
#line 1457
  if (page_nr < last_page) {
#line 1458
    goto ldv_47622;
  } else {

  }
#line 1466
  last_word = (int )(el >> 6) & 511;
#line 1467
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1474
  if (el <= (unsigned long )e) {
#line 1475
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1476
  spin_unlock_irq(& b->bm_lock);
#line 1477
  return;
}
}
#line 1486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1489
  b = mdev->bitmap;
#line 1493
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1493
  if (_b != 0) {
#line 1493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1493);
  } else {

  }
#line 1493
  if (_b != 0) {
#line 1493
    return (0);
  } else {

  }
#line 1494
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1494
  if (_b___0 != 0) {
#line 1494
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1494);
  } else {

  }
#line 1494
  if (_b___0 != 0) {
#line 1494
    return (0);
  } else {

  }
#line 1496
  tmp = spinlock_check(& b->bm_lock);
#line 1496
  flags = _raw_spin_lock_irqsave(tmp);
#line 1497
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1498
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1499
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1500
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1500
    p_addr = bm_map_pidx(b, tmp___0);
#line 1501
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1501
    i = tmp___1 != 0;
#line 1502
    bm_unmap(p_addr);
  } else
#line 1503
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1504
    i = -1;
  } else {
#line 1506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1507
    i = 0;
  }
#line 1510
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1511
  return (i);
}
}
#line 1515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1518
  b = mdev->bitmap;
#line 1519
  p_addr = 0;
#line 1521
  page_nr = 4294967295U;
#line 1522
  c = 0;
#line 1528
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1528
  if (_b != 0) {
#line 1528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1528);
  } else {

  }
#line 1528
  if (_b != 0) {
#line 1528
    return (1);
  } else {

  }
#line 1529
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1529
  if (_b___0 != 0) {
#line 1529
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1529);
  } else {

  }
#line 1529
  if (_b___0 != 0) {
#line 1529
    return (1);
  } else {

  }
#line 1531
  tmp = spinlock_check(& b->bm_lock);
#line 1531
  flags = _raw_spin_lock_irqsave(tmp);
#line 1532
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1533
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1534
  bitnr = s;
#line 1534
  goto ldv_47664;
  ldv_47663: 
#line 1535
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1535
  idx = tmp___0;
#line 1536
  if (page_nr != idx) {
#line 1537
    page_nr = idx;
#line 1538
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1539
      bm_unmap(p_addr);
    } else {

    }
#line 1540
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1542
  _b___1 = b->bm_bits <= bitnr;
#line 1542
  if (_b___1 != 0) {
#line 1542
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1542);
  } else {

  }
#line 1542
  if (_b___1 != 0) {
#line 1543
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1545
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1545
    c = (tmp___1 != 0) + c;
  }
#line 1534
  bitnr = bitnr + 1UL;
  ldv_47664: ;
#line 1534
  if (bitnr <= (unsigned long )e) {
#line 1535
    goto ldv_47663;
  } else {

  }

#line 1548
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1549
    bm_unmap(p_addr);
  } else {

  }
#line 1550
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1551
  return (c);
}
}
#line 1569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1571
  b = mdev->bitmap;
#line 1576
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1576
  if (_b != 0) {
#line 1576
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1576);
  } else {

  }
#line 1576
  if (_b != 0) {
#line 1576
    return (0);
  } else {

  }
#line 1577
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1577
  if (_b___0 != 0) {
#line 1577
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1577);
  } else {

  }
#line 1577
  if (_b___0 != 0) {
#line 1577
    return (0);
  } else {

  }
#line 1579
  tmp = spinlock_check(& b->bm_lock);
#line 1579
  flags = _raw_spin_lock_irqsave(tmp);
#line 1580
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1581
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1583
  s = (int )(enr << 6);
#line 1584
  _min1 = (enr + 1UL) << 6;
#line 1584
  _min2 = b->bm_words;
#line 1584
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1585
  count = 0;
#line 1586
  if ((size_t )s < b->bm_words) {
#line 1587
    n = e - s;
#line 1588
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1588
    p_addr = bm_map_pidx(b, tmp___0);
#line 1589
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1590
    goto ldv_47690;
    ldv_47689: 
#line 1591
    tmp___1 = bm;
#line 1591
    bm = bm + 1;
#line 1591
    tmp___2 = hweight_long(*tmp___1);
#line 1591
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_47690: 
#line 1590
    tmp___3 = n;
#line 1590
    n = n - 1;
#line 1590
    if (tmp___3 != 0) {
#line 1591
      goto ldv_47689;
    } else {

    }
#line 1592
    bm_unmap(p_addr);
  } else {
#line 1594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1596
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1597
  return (count);
}
}
#line 1602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1604
  b = mdev->bitmap;
#line 1609
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1609
  if (_b != 0) {
#line 1609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1609);
  } else {

  }
#line 1609
  if (_b != 0) {
#line 1609
    return (0UL);
  } else {

  }
#line 1610
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1610
  if (_b___0 != 0) {
#line 1610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1610);
  } else {

  }
#line 1610
  if (_b___0 != 0) {
#line 1610
    return (0UL);
  } else {

  }
#line 1612
  spin_lock_irq(& b->bm_lock);
#line 1613
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1614
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1615
  weight = b->bm_set;
#line 1617
  s = al_enr * 16UL;
#line 1618
  __min1 = s + 16UL;
#line 1618
  __min2 = b->bm_words;
#line 1618
  e = __min1 < __min2 ? __min1 : __min2;
#line 1620
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1621);
  } else {

  }
#line 1622
  count = 0;
#line 1623
  if (b->bm_words > s) {
#line 1624
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1624
    i = do_now;
#line 1625
    tmp = bm_word_to_page_idx(b, s);
#line 1625
    p_addr = bm_map_pidx(b, tmp);
#line 1626
    bm = p_addr + (s & 511UL);
#line 1627
    goto ldv_47714;
    ldv_47713: 
#line 1628
    tmp___0 = hweight_long(*bm);
#line 1628
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1629
    *bm = 0xffffffffffffffffUL;
#line 1630
    bm = bm + 1;
    ldv_47714: 
#line 1627
    tmp___1 = i;
#line 1627
    i = i - 1;
#line 1627
    if (tmp___1 != 0) {
#line 1628
      goto ldv_47713;
    } else {

    }
#line 1632
    bm_unmap(p_addr);
#line 1633
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1634
    if (b->bm_words == e) {
#line 1635
      tmp___2 = bm_clear_surplus(b);
#line 1635
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1637
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1639
  weight = b->bm_set - weight;
#line 1640
  spin_unlock_irq(& b->bm_lock);
#line 1641
  return (weight);
}
}
#line 1660
void ldv_check_final_state(void) ;
#line 1669
void ldv_initialize(void) ;
#line 1675
extern int nondet_int(void) ;
#line 1678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1693
  LDV_IN_INTERRUPT = 1;
#line 1702
  ldv_initialize();
#line 1704
  goto ldv_47735;
  ldv_47734: 
#line 1707
  tmp = nondet_int();
#line 1707
  switch (tmp) {
  default: ;
#line 1709
  goto ldv_47733;
  }
  ldv_47733: ;
  ldv_47735: 
#line 1704
  tmp___0 = nondet_int();
#line 1704
  if (tmp___0 != 0) {
#line 1705
    goto ldv_47734;
  } else {

  }


#line 1718
  ldv_check_final_state();
#line 1721
  return;
}
}
#line 1725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1730
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1732
  mutex_lock(ldv_func_arg1);
#line 1733
  return;
}
}
#line 1735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1740
  tmp = mutex_trylock(ldv_func_arg1);
#line 1740
  ldv_func_res = tmp;
#line 1742
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1742
  return (tmp___0);
#line 1744
  return (ldv_func_res);
}
}
#line 1747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1752
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1754
  mutex_unlock(ldv_func_arg1);
#line 1755
  return;
}
}
#line 1757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1762
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1764
  mutex_lock(ldv_func_arg1);
#line 1765
  return;
}
}
#line 1767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1772
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1774
  mutex_unlock(ldv_func_arg1);
#line 1775
  return;
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1782
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1784
  mutex_unlock(ldv_func_arg1);
#line 1785
  return;
}
}
#line 1787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1792
  tmp = mutex_trylock(ldv_func_arg1);
#line 1792
  ldv_func_res = tmp;
#line 1794
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1794
  return (tmp___0);
#line 1796
  return (ldv_func_res);
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1804
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1806
  mutex_lock(ldv_func_arg1);
#line 1807
  return;
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1814
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1816
  mutex_unlock(ldv_func_arg1);
#line 1817
  return;
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 548 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_20(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) ;
#line 227 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 189 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 243 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 245
  return (1);
}
}
#line 655 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 659
  return;
}
}
#line 94 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 89
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 89
  if (tmp != 0L) {
#line 89
    goto do_trace;
  } else {

  }
#line 89
  return;
  do_trace: 
#line 89
  rcu_read_lock_sched_notrace();
#line 89
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
  tmp___0 = debug_lockdep_rcu_enabled();
#line 89
  if (tmp___0 != 0 && ! __warned) {
#line 89
    tmp___1 = rcu_read_lock_sched_held();
#line 89
    if (tmp___1 == 0 && 1) {
#line 89
      __warned = 1;
#line 89
      lockdep_rcu_dereference("include/trace/events/module.h", 94);
    } else {

    }
  } else {

  }
#line 89
  it_func_ptr = _________p1;
#line 89
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_12304: 
#line 89
    it_func = it_func_ptr->func;
#line 89
    __data = it_func_ptr->data;
#line 89
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 89
    it_func_ptr = it_func_ptr + 1;
#line 89
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
      goto ldv_12304;
    } else {

    }

  } else {

  }
#line 89
  rcu_read_lock_sched_notrace();
#line 91
  return;
}
}
#line 96 "include/linux/module.h"
extern struct module __this_module ;
#line 433 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 435
  return ((unsigned int )mod->state != 2U);
}
}
#line 515 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 517
  ret = 1;
#line 519
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 522
    tmp = module_is_live(module);
#line 522
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 522
    if (tmp___0 != 0L) {
#line 523
      __vpp_verify = 0;
#line 523
      switch (4UL) {
      case 1UL: 
#line 523
      pao_ID__ = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12675;
      case 2UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12675;
      case 4UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12675;
      case 8UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12675;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12675: ;
#line 523
      goto ldv_12680;
      case 2UL: 
#line 523
      pao_ID_____0 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12686;
      case 2UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12686;
      case 4UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12686;
      case 8UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12686;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12686: ;
#line 523
      goto ldv_12680;
      case 4UL: 
#line 523
      pao_ID_____1 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12696;
      case 2UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12696;
      case 4UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12696;
      case 8UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12696;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12696: ;
#line 523
      goto ldv_12680;
      case 8UL: 
#line 523
      pao_ID_____2 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12706;
      case 2UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12706;
      case 4UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12706;
      case 8UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12706;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12706: ;
#line 523
      goto ldv_12680;
      default: 
#line 523
      __bad_size_call_parameter();
#line 523
      goto ldv_12680;
      }
      ldv_12680: ;
#line 524
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 526
      ret = 0;
    }
  } else {

  }
#line 530
  return (ret);
}
}
#line 533
extern void module_put(struct module * ) ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1139
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1141
  return (mdev);
}
}
#line 1506
int proc_details ;
#line 1649 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1650
struct file_operations  const  drbd_proc_fops ;
#line 2195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2206
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2207
    *bits_left = mdev->ov_left;
  } else {
#line 2209
    tmp = drbd_bm_total_weight(mdev);
#line 2209
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2212
  if (*bits_left > mdev->rs_total) {
#line 2218
    __asm__  volatile   ("": : : "memory");
#line 2219
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37644.conn);
#line 2219
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2222
    *per_mil_done = 0U;
  } else {
#line 2233
    shift = (unsigned long long )mdev->rs_total > 4294967295ULL ? 16U : 10U;
#line 2234
    left = *bits_left >> (int )shift;
#line 2235
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2236
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2237
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2239
  return;
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2327
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 93
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 97
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 108
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 108
  if (tmp___0 != 0L) {
#line 110
    seq_printf(seq, "%ld,", v / 1000000L);
#line 111
    v = v / 1000000L;
#line 112
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 113
    tmp = __builtin_expect(v > 999L, 1L);
#line 113
    if (tmp != 0L) {
#line 114
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 116
      seq_printf(seq, "%ld", v);
    }
  }
#line 117
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 130
  stalled = 0;
#line 132
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 134
  x = (int )(res / 50U);
#line 135
  y = 20 - x;
#line 136
  seq_printf(seq, "\t[");
#line 137
  i = 1;
#line 137
  goto ldv_47146;
  ldv_47145: 
#line 138
  seq_printf(seq, "=");
#line 137
  i = i + 1;
  ldv_47146: ;
#line 137
  if (i < x) {
#line 138
    goto ldv_47145;
  } else {

  }
#line 139
  seq_printf(seq, ">");
#line 140
  i = 0;
#line 140
  goto ldv_47149;
  ldv_47148: 
#line 141
  seq_printf(seq, ".");
#line 140
  i = i + 1;
  ldv_47149: ;
#line 140
  if (i < y) {
#line 141
    goto ldv_47148;
  } else {

  }
#line 142
  seq_printf(seq, "] ");
#line 144
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 145
    seq_printf(seq, "verified:");
  } else {
#line 147
    seq_printf(seq, "sync\'ed:");
  }
#line 148
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 151
  if (mdev->rs_total > 1048576UL) {
#line 152
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 156
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 173
  i = (mdev->rs_last_mark + 2) % 8;
#line 174
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 175
  if (dt > 6000UL) {
#line 176
    stalled = 1;
  } else {

  }
#line 178
  if (dt == 0UL) {
#line 179
    dt = dt + 1UL;
  } else {

  }
#line 180
  db = mdev->rs_mark_left[i] - rs_left;
#line 181
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 183
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 186
  dbdt = db / dt << 2;
#line 187
  seq_printf(seq, " speed: ");
#line 188
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 189
  seq_printf(seq, " (");
#line 191
  if (proc_details > 0) {
#line 193
    i = (mdev->rs_last_mark + 7) % 8;
#line 194
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 195
    if (dt == 0UL) {
#line 196
      dt = dt + 1UL;
    } else {

    }
#line 197
    db = mdev->rs_mark_left[i] - rs_left;
#line 198
    dbdt = db / dt << 2;
#line 199
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 200
    seq_printf(seq, " -- ");
  } else {

  }
#line 206
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 207
  if (dt == 0UL) {
#line 208
    dt = 1UL;
  } else {

  }
#line 209
  db = mdev->rs_total - rs_left;
#line 210
  dbdt = db / dt << 2;
#line 211
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 212
  seq_printf(seq, ")");
#line 214
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 216
    seq_printf(seq, " want: ");
#line 217
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 219
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 221
  if (proc_details > 0) {
#line 224
    tmp = drbd_bm_bits(mdev);
#line 224
    bm_bits = tmp;
#line 226
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 228
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 230
      bit_pos = mdev->bm_resync_fo;
    }
#line 233
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 243
  __mptr = (struct lc_element  const  *)e;
#line 243
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 245
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 248
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 253
  hole = 0;
#line 257
  write_ordering_chars[0] = 110;
#line 257
  write_ordering_chars[1] = 100;
#line 257
  write_ordering_chars[2] = 102;
#line 263
  tmp = drbd_buildtag();
#line 263
  seq_printf(seq, "version: 8.3.11 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 286
  i = 0;
#line 286
  goto ldv_47171;
  ldv_47170: 
#line 287
  mdev = minor_to_mdev((unsigned int )i);
#line 288
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 289
    hole = 1;
#line 290
    goto ldv_47169;
  } else {

  }
#line 292
  if (hole != 0) {
#line 293
    hole = 0;
#line 294
    seq_printf(seq, "\n");
  } else {

  }
#line 297
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37644.conn);
#line 299
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 302
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 304
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 304
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 304
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 304
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 304
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 304
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 304
    tmp___6 = is_susp(mdev->state);
#line 304
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.pdsk);
#line 304
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.disk);
#line 304
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_37644.peer);
#line 304
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_37644.role);
#line 304
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 335
    tmp___11 = drbd_bm_total_weight(mdev);
#line 335
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 339
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 343
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 345
  if (proc_details > 0) {
#line 345
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 345
    if (tmp___12 != 0) {
#line 346
      lc_seq_printf_stats(seq, mdev->resync);
#line 347
      lc_seq_printf_stats(seq, mdev->act_log);
#line 348
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 351
  if (proc_details > 1) {
#line 352
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 353
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_47169: 
#line 286
  i = i + 1;
  ldv_47171: ;
#line 286
  if ((unsigned int )i < minor_count) {
#line 287
    goto ldv_47170;
  } else {

  }

#line 359
  return (0);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 364
  tmp___1 = try_module_get(& __this_module);
#line 364
  if (tmp___1 != 0) {
#line 365
    tmp = PDE((struct inode  const  *)inode);
#line 365
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 365
    return (tmp___0);
  } else {

  }
#line 366
  return (-19);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 371
  module_put(& __this_module);
#line 372
  tmp = single_release(inode, file);
#line 372
  return (tmp);
}
}
#line 396
extern void ldv_check_return_value(int  ) ;
#line 405
extern void ldv_handler_precall(void) ;
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 448
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 438
  LDV_IN_INTERRUPT = 1;
#line 447
  ldv_initialize();
#line 451
  goto ldv_47207;
  ldv_47206: 
#line 455
  tmp = nondet_int();
#line 455
  switch (tmp) {
  case 0: ;
#line 460
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 465
    ldv_handler_precall();
#line 466
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 467
    ldv_check_return_value(res_drbd_proc_open_4);
#line 468
    if (res_drbd_proc_open_4 != 0) {
#line 469
      goto ldv_module_exit;
    } else {

    }
#line 470
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 476
  goto ldv_47203;
  case 1: ;
#line 480
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 485
    ldv_handler_precall();
#line 486
    drbd_proc_release(var_group1, var_group2);
#line 487
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 493
  goto ldv_47203;
  default: ;
#line 494
  goto ldv_47203;
  }
  ldv_47203: ;
  ldv_47207: 
#line 451
  tmp___0 = nondet_int();
#line 451
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 453
    goto ldv_47206;
  } else {

  }

  ldv_module_exit: ;
#line 503
  ldv_check_final_state();
#line 506
  return;
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 515
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 517
  mutex_lock(ldv_func_arg1);
#line 518
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_20(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 525
  tmp = mutex_trylock(ldv_func_arg1);
#line 525
  ldv_func_res = tmp;
#line 527
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 527
  return (tmp___0);
#line 529
  return (ldv_func_res);
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 537
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 539
  mutex_unlock(ldv_func_arg1);
#line 540
  return;
}
}
#line 542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 547
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 549
  mutex_lock(ldv_func_arg1);
#line 550
  return;
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 557
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 559
  mutex_unlock(ldv_func_arg1);
#line 560
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 567
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 569
  mutex_unlock(ldv_func_arg1);
#line 570
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 260 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5392;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5392: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_32(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_31(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5802.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5802.rlock);
#line 326
  return;
}
}
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 346 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 346
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 346
  return (tmp);
}
}
#line 349 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 351
  tmp = PageTail(page);
#line 351
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 351
  if (tmp___0 != 0L) {
#line 352
    return (page->ldv_13136.first_page);
  } else {

  }
#line 353
  return (page);
}
}
#line 356 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 358
  tmp = compound_head(page);
#line 358
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 358
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18199: ;
#line 63
    goto ldv_18199;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18200: ;
#line 65
    goto ldv_18200;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18201: ;
#line 66
    goto ldv_18201;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 359 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2074
extern void flush_signals(struct task_struct * ) ;
#line 2107
extern void force_sig(int  , struct task_struct * ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5802.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5802.ldv_5801.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 845 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 864
  return ((loff_t )inode->i_size);
}
}
#line 1093 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 225 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 650 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 967 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 969
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1146
  return (mdev->minor);
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  ldv_mutex_lock_34(& mdev->data.mutex);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    ldv_mutex_unlock_35(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  ldv_mutex_unlock_36(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1198
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1210
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1212
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1229
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1233
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1238
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1246
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1252
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1254
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1255
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1257
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1258
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1260
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1264
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1270
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1271
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1273
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1275
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1276
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1279
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1499
wait_queue_head_t drbd_pp_wait ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1529
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1532
int drbd_worker(struct drbd_thread *thi ) ;
#line 1533
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1534
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1535
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1536
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1537
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1541
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1542
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1544 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1546
  if (mdev->ov_last_oos_size != 0UL) {
#line 1547
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1551
  mdev->ov_last_oos_size = 0UL;
#line 1552
  return;
}
}
#line 1555
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1556
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1559
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1560
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1561
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1562
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1563
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1564
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1565
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1566
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1568
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1569
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1570
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1571
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1572
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1574
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1575
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1576
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1578
void resync_timer_fn(unsigned long data ) ;
#line 1579
void start_resync_timer_fn(unsigned long data ) ;
#line 1582
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1583
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1586
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1591
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1606 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1610
  if (level == 1) {
#line 1611
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1613
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1615
  return (err);
}
}
#line 1618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1620
  val = 1;
#line 1621
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1623
  return;
}
}
#line 1625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1627
  val = 0;
#line 1628
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1630
  return;
}
}
#line 1655
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1656
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1657
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1659
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1660
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1661
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1662
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1665
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1666
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1670
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1747 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1749
  return ((struct page *)page->ldv_13136.ldv_13133.private);
}
}
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_47448;
  ldv_47447: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_47448: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_47447;
    } else {
#line 1776
      goto ldv_47449;
    }
  } else {

  }
  ldv_47449: ;
#line 1777
  return (0);
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_47453;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_47456: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_47455;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_47456;
  ldv_47455: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47453: ;
#line 1786
  return;
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1789
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1790
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1791
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_37644.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_47481;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_37644.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_37644.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_47481;
  }
  ldv_47481: ;
#line 1847
  return;
}
}
#line 1905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1908
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1908
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1908
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1908
    tmp___0 = 0UL;
  }
#line 1908
  return (tmp___0);
}
}
#line 1987 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1990
  tmp = spinlock_check(& q->q_lock);
#line 1990
  flags = _raw_spin_lock_irqsave(tmp);
#line 1991
  list_add_tail(& w->list, & q->q);
#line 1992
  up(& q->s);
#line 1994
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1995
  return;
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1999
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1999
  if (tmp != 0) {
#line 2000
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2001
  return;
}
}
#line 2003 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2005
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2006
  wake_asender(mdev);
#line 2007
  return;
}
}
#line 2009 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2013
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2013
  return (tmp);
}
}
#line 2028 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2030
  _drbd_thread_stop(thi, 0, 1);
#line 2031
  return;
}
}
#line 2088 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2090
  atomic_inc(& mdev->rs_pending_cnt);
#line 2091
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 271
  bio = bio_clone(bio_src, 16U);
#line 273
  req->private_bio = bio;
#line 275
  bio->bi_private = (void *)req;
#line 276
  bio->bi_end_io = & drbd_endio_pri;
#line 277
  bio->bi_next = 0;
#line 278
  return;
}
}
#line 321
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 323
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 332
  mdev = req->mdev;
#line 337
  rv = __req_mod(req, what, & m);
#line 338
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 339
    complete_master_bio(mdev, & m);
  } else {

  }
#line 341
  return (rv);
}
}
#line 348 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 352
  mdev = req->mdev;
#line 356
  tmp = spinlock_check(& mdev->req_lock);
#line 356
  flags = _raw_spin_lock_irqsave(tmp);
#line 357
  rv = __req_mod(req, what, & m);
#line 358
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 360
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 361
    complete_master_bio(mdev, & m);
  } else {

  }
#line 363
  return (rv);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 97
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 129
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 130
  md_io->error = error;
#line 132
  complete(& md_io->event);
#line 133
  return;
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 140
  flags = 0UL;
#line 141
  mdev = e->mdev;
#line 143
  if (e->ldv_45843.block_id == 0ULL) {
#line 143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            143);
  } else {

  }
#line 145
  tmp = spinlock_check(& mdev->req_lock);
#line 145
  flags = _raw_spin_lock_irqsave(tmp);
#line 146
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 147
  list_del(& e->w.list);
#line 148
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 148
  if (tmp___0 != 0) {
#line 149
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 150
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 150
  if (tmp___1 != 0) {
#line 151
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 152
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 154
  drbd_queue_work(& mdev->data.work, & e->w);
#line 155
  put_ldev(mdev);
#line 156
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 162
  flags = 0UL;
#line 163
  mdev = e->mdev;
#line 169
  if (e->ldv_45843.block_id == 0ULL) {
#line 169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            169);
  } else {

  }
#line 175
  e_sector = e->sector;
#line 176
  do_al_complete_io = (int )e->flags & 1;
#line 177
  is_syncer_req = e->ldv_45843.block_id == 0xffffffffffffffffULL;
#line 179
  tmp = spinlock_check(& mdev->req_lock);
#line 179
  flags = _raw_spin_lock_irqsave(tmp);
#line 180
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 181
  list_del(& e->w.list);
#line 182
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 189
  if (is_syncer_req != 0) {
#line 189
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 189
    do_wake = tmp___0;
  } else {
#line 189
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 189
    do_wake = tmp___1;
  }
#line 193
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 193
  if (tmp___2 != 0) {
#line 194
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 195
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 197
  if (is_syncer_req != 0) {
#line 198
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 200
  if (do_wake != 0) {
#line 201
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 203
  if (do_al_complete_io != 0) {
#line 204
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 206
  wake_asender(mdev);
#line 207
  put_ldev(mdev);
#line 208
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 215
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 216
  mdev = e->mdev;
#line 217
  uptodate = (int )bio->bi_flags & 1;
#line 218
  is_write = (int )bio->bi_rw & 1;
#line 220
  if (error != 0) {
#line 220
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 220
    if (tmp != 0) {
#line 221
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 224
  if (error == 0 && uptodate == 0) {
#line 225
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 225
    if (tmp___0 != 0) {
#line 226
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 232
    error = -5;
  } else {

  }
#line 235
  if (error != 0) {
#line 236
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 238
  bio_put(bio);
#line 239
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 239
  if (tmp___1 != 0) {
#line 240
    if (is_write != 0) {
#line 241
      drbd_endio_write_sec_final(e);
    } else {
#line 243
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 244
  return;
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 252
  req = (struct drbd_request *)bio->bi_private;
#line 253
  mdev = req->mdev;
#line 256
  uptodate = (int )bio->bi_flags & 1;
#line 258
  if (error == 0 && uptodate == 0) {
#line 259
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 264
    error = -5;
  } else {

  }
#line 268
  tmp = __builtin_expect(error != 0, 0L);
#line 268
  if (tmp != 0L) {
#line 269
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 257UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 275
    what = completed_ok;
  }
#line 277
  bio_put(req->private_bio);
#line 278
  tmp___0 = ERR_PTR((long )error);
#line 278
  req->private_bio = (struct bio *)tmp___0;
#line 281
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 281
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 282
  __req_mod(req, what, & m);
#line 283
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 285
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 286
    complete_master_bio(mdev, & m);
  } else {

  }
#line 287
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 291
  __mptr = (struct drbd_work  const  *)w;
#line 291
  req = (struct drbd_request *)__mptr;
#line 297
  spin_lock_irq(& mdev->req_lock);
#line 298
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 299
    _req_mod(req, read_retry_remote_canceled);
#line 300
    spin_unlock_irq(& mdev->req_lock);
#line 301
    return (1);
  } else {

  }
#line 303
  spin_unlock_irq(& mdev->req_lock);
#line 305
  tmp = w_send_read_req(mdev, w, 0);
#line 305
  return (tmp);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 312
  page = e->pages;
#line 316
  desc.tfm = tfm;
#line 317
  desc.flags = 0U;
#line 319
  sg_init_table(& sg, 1U);
#line 320
  crypto_hash_init(& desc);
#line 322
  goto ldv_47957;
  ldv_47956: 
#line 324
  sg_set_page(& sg, page, 4096U, 0U);
#line 325
  crypto_hash_update(& desc, & sg, sg.length);
#line 326
  page = tmp;
  ldv_47957: 
#line 322
  tmp = page_chain_next(page);
#line 322
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 323
    goto ldv_47956;
  } else {

  }
#line 329
  len = e->size & 4095U;
#line 330
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 331
  crypto_hash_update(& desc, & sg, sg.length);
#line 332
  crypto_hash_final(& desc, (u8 *)digest);
#line 333
  return;
}
}
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 342
  desc.tfm = tfm;
#line 343
  desc.flags = 0U;
#line 345
  sg_init_table(& sg, 1U);
#line 346
  crypto_hash_init(& desc);
#line 348
  bvec = bio->bi_io_vec;
#line 348
  i = 0;
#line 348
  goto ldv_47970;
  ldv_47969: 
#line 349
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 350
  crypto_hash_update(& desc, & sg, sg.length);
#line 348
  bvec = bvec + 1;
#line 348
  i = i + 1;
  ldv_47970: ;
#line 348
  if ((int )bio->bi_vcnt > i) {
#line 349
    goto ldv_47969;
  } else {

  }
#line 352
  crypto_hash_final(& desc, (u8 *)digest);
#line 353
  return;
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 358
  __mptr = (struct drbd_work  const  *)w;
#line 358
  e = (struct drbd_epoch_entry *)__mptr;
#line 361
  ok = 1;
#line 363
  if (e->ldv_45843.block_id != 2205466966ULL) {
#line 363
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            363);
  } else {

  }
#line 365
  tmp = __builtin_expect(cancel != 0, 0L);
#line 365
  if (tmp != 0L) {
#line 366
    goto out;
  } else {

  }
#line 368
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 368
  if (tmp___0 != 0L) {
#line 369
    goto out;
  } else {

  }
#line 371
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 371
  digest_size = (int )tmp___1;
#line 372
  digest = kmalloc((size_t )digest_size, 16U);
#line 373
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 374
    sector = e->sector;
#line 375
    size = e->size;
#line 376
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 382
    drbd_free_some_ee(mdev, e, 0);
#line 383
    e = 0;
#line 384
    inc_rs_pending(mdev);
#line 385
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 388
    kfree((void const   *)digest);
  } else {
#line 390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 391
    ok = 0;
  }
  out: ;
#line 395
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 396
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 398
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 398
  if (tmp___2 != 0L) {
#line 399
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 400
  return (ok);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 409
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 409
  if (tmp == 0) {
#line 410
    return (-5);
  } else {

  }
#line 412
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 412
  if (tmp___0 != 0) {
#line 413
    goto defer;
  } else {

  }
#line 417
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 418
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 419
    goto defer;
  } else {

  }
#line 421
  e->w.cb = & w_e_send_csum;
#line 422
  spin_lock_irq(& mdev->req_lock);
#line 423
  list_add(& e->w.list, & mdev->read_ee);
#line 424
  spin_unlock_irq(& mdev->req_lock);
#line 426
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 427
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 427
  if (tmp___1 == 0) {
#line 428
    return (0);
  } else {

  }
#line 434
  spin_lock_irq(& mdev->req_lock);
#line 435
  list_del(& e->w.list);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 438
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 440
  put_ldev(mdev);
#line 441
  return (-11);
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 446
  switch ((int )mdev->state.ldv_37644.conn) {
  case 18: 
#line 448
  w_make_ov_request(mdev, w, cancel);
#line 449
  goto ldv_47999;
  case 17: 
#line 451
  w_make_resync_request(mdev, w, cancel);
#line 452
  goto ldv_47999;
  }
  ldv_47999: ;
#line 455
  return (1);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 460
  mdev = (struct drbd_conf *)data;
#line 462
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 462
  if (tmp != 0) {
#line 463
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 464
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 470
  i = 0;
#line 470
  goto ldv_48011;
  ldv_48010: 
#line 471
  *(fb->values + (unsigned long )i) = value;
#line 470
  i = i + 1;
  ldv_48011: ;
#line 470
  if ((unsigned int )i < fb->size) {
#line 471
    goto ldv_48010;
  } else {

  }

#line 475
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 478
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 479
  tmp = fb->head_index;
#line 479
  fb->head_index = fb->head_index + 1U;
#line 479
  *(fb->values + (unsigned long )tmp) = value;
#line 481
  if (fb->head_index >= fb->size) {
#line 482
    fb->head_index = 0U;
  } else {

  }
#line 484
  return (ov);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 491
  i = 0;
#line 491
  goto ldv_48024;
  ldv_48023: 
#line 492
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 491
  i = i + 1;
  ldv_48024: ;
#line 491
  if ((unsigned int )i < fb->size) {
#line 492
    goto ldv_48023;
  } else {

  }

#line 496
  return;
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 506
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 506
  sect_in = (unsigned int )tmp;
#line 507
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 509
  spin_lock(& mdev->peer_seq_lock);
#line 511
  steps = (int )mdev->rs_plan_s.size;
#line 513
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 514
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 516
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 520
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 523
  cps = correction / steps;
#line 524
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 525
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 528
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 529
  spin_unlock(& mdev->peer_seq_lock);
#line 530
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 532
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 533
  if (req_sect < 0) {
#line 534
    req_sect = 0;
  } else {

  }
#line 536
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 537
  if (req_sect > max_sect) {
#line 538
    req_sect = max_sect;
  } else {

  }
#line 546
  return (req_sect);
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 552
  if (mdev->rs_plan_s.size != 0U) {
#line 553
    tmp = drbd_rs_controller(mdev);
#line 553
    number = tmp >> 3;
#line 554
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 556
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 557
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 562
  return (number);
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 570
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 570
  capacity = tmp;
#line 574
  i = 0;
#line 576
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 576
  if (tmp___0 != 0L) {
#line 577
    return (1);
  } else {

  }
#line 579
  if (mdev->rs_total == 0UL) {
#line 581
    drbd_resync_finished(mdev);
#line 582
    return (1);
  } else {

  }
#line 585
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 585
  if (tmp___1 == 0) {
#line 590
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 591
    return (1);
  } else {

  }
#line 594
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 594
  max_bio_size = (int )(tmp___2 << 9);
#line 595
  number = drbd_rs_number_requests(mdev);
#line 596
  if (number == 0) {
#line 597
    goto requeue;
  } else {

  }
#line 599
  i = 0;
#line 599
  goto ldv_48072;
  ldv_48071: 
#line 601
  ldv_mutex_lock_37(& mdev->data.mutex);
#line 602
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 603
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 604
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 606
    queued = 1;
#line 607
    sndbuf = 0;
  }
#line 609
  ldv_mutex_unlock_38(& mdev->data.mutex);
#line 610
  if (sndbuf / 2 < queued) {
#line 611
    goto requeue;
  } else {

  }
  next_sector: 
#line 614
  size = 4096;
#line 615
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 617
  if (bit == 0xffffffffffffffffUL) {
#line 618
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 619
    put_ldev(mdev);
#line 620
    return (1);
  } else {

  }
#line 623
  sector = bit << 3;
#line 625
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 625
  if (tmp___3 != 0) {
#line 627
    mdev->bm_resync_fo = bit;
#line 628
    goto requeue;
  } else {
#line 625
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 625
    if (tmp___4 != 0) {
#line 627
      mdev->bm_resync_fo = bit;
#line 628
      goto requeue;
    } else {

    }
  }
#line 630
  mdev->bm_resync_fo = bit + 1UL;
#line 632
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 632
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 632
  if (tmp___6 != 0L) {
#line 633
    drbd_rs_complete_io(mdev, sector);
#line 634
    goto next_sector;
  } else {

  }
#line 644
  align = 1;
#line 645
  rollback_i = i;
  ldv_48060: ;
#line 647
  if (size + 4096 > max_bio_size) {
#line 648
    goto ldv_48059;
  } else {

  }
#line 651
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 652
    goto ldv_48059;
  } else {

  }
#line 655
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 656
    goto ldv_48059;
  } else {

  }
#line 662
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 662
  if (tmp___7 != 1) {
#line 663
    goto ldv_48059;
  } else {

  }
#line 664
  bit = bit + 1UL;
#line 665
  size = size + 4096;
#line 666
  if (4096 << align <= size) {
#line 667
    align = align + 1;
  } else {

  }
#line 668
  i = i + 1;
#line 669
  goto ldv_48060;
  ldv_48059: ;
#line 672
  if (size > 4096) {
#line 673
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 677
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 678
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 679
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 680
    tmp___8 = read_for_csum(mdev, sector, size);
#line 680
    switch (tmp___8) {
    case -5: 
#line 682
    put_ldev(mdev);
#line 683
    return (0);
    case -11: 
#line 685
    drbd_rs_complete_io(mdev, sector);
#line 686
    mdev->bm_resync_fo = sector >> 3;
#line 687
    i = rollback_i;
#line 688
    goto requeue;
    case 0: ;
#line 691
    goto ldv_48064;
    default: 
#line 693
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (693), "i" (12UL));
    ldv_48066: ;
#line 693
    goto ldv_48066;
    }
    ldv_48064: ;
  } else {
#line 696
    inc_rs_pending(mdev);
#line 697
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 697
    if (tmp___11 == 0) {
#line 699
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 700
      atomic_dec(& mdev->rs_pending_cnt);
#line 700
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 700
      if (tmp___10 < 0) {
#line 700
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 700
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 700, tmp___9);
      } else {

      }
#line 701
      put_ldev(mdev);
#line 702
      return (0);
    } else {

    }
  }
#line 599
  i = i + 1;
  ldv_48072: ;
#line 599
  if (i < number) {
#line 600
    goto ldv_48071;
  } else {

  }
#line 707
  tmp___12 = drbd_bm_bits(mdev);
#line 707
  if (mdev->bm_resync_fo >= tmp___12) {
#line 714
    put_ldev(mdev);
#line 715
    return (1);
  } else {

  }
  requeue: 
#line 719
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 720
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 721
  put_ldev(mdev);
#line 722
  return (1);
}
}
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 729
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 729
  capacity = tmp;
#line 731
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 731
  if (tmp___0 != 0L) {
#line 732
    return (1);
  } else {

  }
#line 734
  number = drbd_rs_number_requests(mdev);
#line 736
  sector = mdev->ov_position;
#line 737
  i = 0;
#line 737
  goto ldv_48090;
  ldv_48089: ;
#line 738
  if (sector >= capacity) {
#line 739
    return (1);
  } else {

  }
#line 742
  size = 4096;
#line 744
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 744
  if (tmp___1 != 0) {
#line 746
    mdev->ov_position = sector;
#line 747
    goto requeue;
  } else {
#line 744
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 744
    if (tmp___2 != 0) {
#line 746
      mdev->ov_position = sector;
#line 747
      goto requeue;
    } else {

    }
  }
#line 750
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 751
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 753
  inc_rs_pending(mdev);
#line 754
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 754
  if (tmp___5 == 0) {
#line 755
    atomic_dec(& mdev->rs_pending_cnt);
#line 755
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 755
    if (tmp___4 < 0) {
#line 755
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 755
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 755, tmp___3);
    } else {

    }
#line 756
    return (0);
  } else {

  }
#line 758
  sector = sector + 8UL;
#line 737
  i = i + 1;
  ldv_48090: ;
#line 737
  if (i < number) {
#line 738
    goto ldv_48089;
  } else {

  }
#line 760
  mdev->ov_position = sector;
  requeue: 
#line 763
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 764
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 765
  return (1);
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 771
  mdev = (struct drbd_conf *)data;
#line 773
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 774
  return;
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 778
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 778
  if (tmp != 0) {
#line 779
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 780
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 781
    add_timer(& mdev->start_resync_timer);
#line 782
    return (1);
  } else {
#line 778
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 778
    if (tmp___0 != 0) {
#line 779
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 780
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 781
      add_timer(& mdev->start_resync_timer);
#line 782
      return (1);
    } else {

    }
  }
#line 785
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 786
  clear_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 787
  return (1);
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 792
  kfree((void const   *)w);
#line 793
  ov_oos_print(mdev);
#line 794
  drbd_resync_finished(mdev);
#line 796
  return (1);
}
}
#line 799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 801
  kfree((void const   *)w);
#line 803
  drbd_resync_finished(mdev);
#line 805
  return (1);
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 810
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 811
  request_ping(mdev);
#line 812
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 812
  if (tmp != 0 || (int )mdev->state.ldv_37644.conn <= 9) {
#line 812
    goto ldv_48114;
  } else {

  }
#line 812
  tmp___0 = get_current();
#line 812
  __wait.flags = 0U;
#line 812
  __wait.private = (void *)tmp___0;
#line 812
  __wait.func = & autoremove_wake_function;
#line 812
  __wait.task_list.next = & __wait.task_list;
#line 812
  __wait.task_list.prev = & __wait.task_list;
  ldv_48117: 
#line 812
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 812
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 812
  if (tmp___1 != 0 || (int )mdev->state.ldv_37644.conn <= 9) {
#line 812
    goto ldv_48116;
  } else {

  }
#line 812
  schedule();
#line 812
  goto ldv_48117;
  ldv_48116: 
#line 812
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48114: ;
#line 815
  return;
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 822
  khelper_cmd = 0;
#line 823
  verify_done = 0;
#line 828
  tmp___0 = drbd_rs_del_all(mdev);
#line 828
  if (tmp___0 != 0) {
#line 834
    schedule_timeout_interruptible(25L);
#line 835
    tmp = kmalloc(24UL, 32U);
#line 835
    w = (struct drbd_work *)tmp;
#line 836
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 837
      w->cb = & w_resync_finished;
#line 838
      drbd_queue_work(& mdev->data.work, w);
#line 839
      return (1);
    } else {

    }
#line 841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 844
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 845
  if (dt == 0UL) {
#line 846
    dt = 1UL;
  } else {

  }
#line 847
  db = mdev->rs_total;
#line 848
  dbdt = db / dt << 2;
#line 849
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 851
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 851
  if (tmp___1 == 0) {
#line 852
    goto out;
  } else {

  }
#line 854
  ping_peer(mdev);
#line 856
  spin_lock_irq(& mdev->req_lock);
#line 857
  os = mdev->state;
#line 859
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 863
  if ((int )os.ldv_37644.conn <= 10) {
#line 864
    goto out_unlock;
  } else {

  }
#line 866
  ns = os;
#line 867
  ns.ldv_37644.conn = 10U;
#line 869
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 873
  n_oos = drbd_bm_total_weight(mdev);
#line 875
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 876
    if (n_oos != 0UL) {
#line 877
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 879
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 882
      if (mdev->rs_failed != n_oos) {
#line 882
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                882);
      } else {

      }
#line 884
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 885
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 887
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 888
        s = mdev->rs_same_csum;
#line 889
        t = mdev->rs_total;
#line 890
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 893
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 902
  if (mdev->rs_failed != 0UL) {
#line 903
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 905
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 906
      ns.ldv_37644.disk = 4U;
#line 907
      ns.ldv_37644.pdsk = 8U;
    } else {
#line 909
      ns.ldv_37644.disk = 8U;
#line 910
      ns.ldv_37644.pdsk = 4U;
    }
  } else {
#line 913
    ns.ldv_37644.disk = 8U;
#line 914
    ns.ldv_37644.pdsk = 8U;
#line 916
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 917
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 919
        i = 1;
#line 919
        goto ldv_48137;
        ldv_48136: 
#line 920
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 919
        i = i + 1;
        ldv_48137: ;
#line 919
        if (i <= 3) {
#line 920
          goto ldv_48136;
        } else {

        }
#line 921
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 922
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 924
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 928
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 931
      drbd_uuid_set_bm(mdev, 0ULL);
#line 932
      drbd_print_uuids(mdev, "updated UUIDs");
#line 933
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 937
        i___0 = 0;
#line 937
        goto ldv_48141;
        ldv_48140: 
#line 938
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 937
        i___0 = i___0 + 1;
        ldv_48141: ;
#line 937
        if (i___0 <= 3) {
#line 938
          goto ldv_48140;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 943
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 945
  spin_unlock_irq(& mdev->req_lock);
#line 946
  put_ldev(mdev);
  out: 
#line 948
  mdev->rs_total = 0UL;
#line 949
  mdev->rs_failed = 0UL;
#line 950
  mdev->rs_paused = 0UL;
#line 951
  if (verify_done != 0) {
#line 952
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 954
  drbd_md_sync(mdev);
#line 956
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 957
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 959
  return (1);
}
}
#line 963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 965
  tmp = drbd_ee_has_active_page(e);
#line 965
  if (tmp != 0) {
#line 967
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 968
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 969
    atomic_sub(i, & mdev->pp_in_use);
#line 970
    spin_lock_irq(& mdev->req_lock);
#line 971
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 972
    spin_unlock_irq(& mdev->req_lock);
#line 973
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 975
    drbd_free_some_ee(mdev, e, 0);
  }
#line 976
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 986
  __mptr = (struct drbd_work  const  *)w;
#line 986
  e = (struct drbd_epoch_entry *)__mptr;
#line 989
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 989
  if (tmp___1 != 0L) {
#line 990
    drbd_free_some_ee(mdev, e, 0);
#line 991
    atomic_dec(& mdev->unacked_cnt);
#line 991
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 991
    if (tmp___0 < 0) {
#line 991
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 991
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 991, tmp);
    } else {

    }
#line 992
    return (1);
  } else {

  }
#line 995
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 995
  if (tmp___3 != 0L) {
#line 996
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 998
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 998
    if (tmp___2 != 0) {
#line 999
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1002
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1005
  atomic_dec(& mdev->unacked_cnt);
#line 1005
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
  if (tmp___5 < 0) {
#line 1005
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1005, tmp___4);
  } else {

  }
#line 1007
  move_to_net_ee_or_free(mdev, e);
#line 1009
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1009
  if (tmp___6 != 0L) {
#line 1010
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1011
  return (ok);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1022
  __mptr = (struct drbd_work  const  *)w;
#line 1022
  e = (struct drbd_epoch_entry *)__mptr;
#line 1025
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1025
  if (tmp___1 != 0L) {
#line 1026
    drbd_free_some_ee(mdev, e, 0);
#line 1027
    atomic_dec(& mdev->unacked_cnt);
#line 1027
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1027
    if (tmp___0 < 0) {
#line 1027
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1027
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1027, tmp);
    } else {

    }
#line 1028
    return (1);
  } else {

  }
#line 1031
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1031
  if (tmp___2 != 0) {
#line 1032
    drbd_rs_complete_io(mdev, e->sector);
#line 1033
    put_ldev(mdev);
  } else {

  }
#line 1036
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1037
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1038
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1038
    if (tmp___6 != 0L) {
#line 1039
      tmp___4 = __builtin_expect((int )mdev->state.ldv_37644.pdsk > 3, 1L);
#line 1039
      if (tmp___4 != 0L) {
#line 1040
        inc_rs_pending(mdev);
#line 1041
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1043
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1043
        if (tmp___3 != 0) {
#line 1044
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1046
        ok = 1;
      }
    } else {
#line 1049
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1049
      if (tmp___5 != 0) {
#line 1050
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1053
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1056
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1059
  atomic_dec(& mdev->unacked_cnt);
#line 1059
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
  if (tmp___8 < 0) {
#line 1059
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1059, tmp___7);
  } else {

  }
#line 1061
  move_to_net_ee_or_free(mdev, e);
#line 1063
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1063
  if (tmp___9 != 0L) {
#line 1064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1065
  return (ok);
}
}
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1070
  __mptr = (struct drbd_work  const  *)w;
#line 1070
  e = (struct drbd_epoch_entry *)__mptr;
#line 1073
  digest = 0;
#line 1074
  eq = 0;
#line 1076
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1076
  if (tmp___1 != 0L) {
#line 1077
    drbd_free_some_ee(mdev, e, 0);
#line 1078
    atomic_dec(& mdev->unacked_cnt);
#line 1078
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
    if (tmp___0 < 0) {
#line 1078
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1078, tmp);
    } else {

    }
#line 1079
    return (1);
  } else {

  }
#line 1082
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1082
  if (tmp___2 != 0) {
#line 1083
    drbd_rs_complete_io(mdev, e->sector);
#line 1084
    put_ldev(mdev);
  } else {

  }
#line 1087
  di = e->ldv_45843.digest;
#line 1089
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1089
  if (tmp___6 != 0L) {
#line 1093
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1094
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1094
      digest_size = (int )tmp___3;
#line 1095
      if (di->digest_size != digest_size) {
#line 1095
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1095);
      } else {

      }
#line 1096
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1098
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1099
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1100
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1100
      eq = tmp___4 == 0;
#line 1101
      kfree((void const   *)digest);
    } else {

    }
#line 1104
    if (eq != 0) {
#line 1105
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1105U);
#line 1107
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1108
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1110
      inc_rs_pending(mdev);
#line 1111
      e->ldv_45843.block_id = 0xffffffffffffffffULL;
#line 1112
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1113
      kfree((void const   *)di);
#line 1114
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1117
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1118
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1118
    if (tmp___5 != 0) {
#line 1119
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1122
  atomic_dec(& mdev->unacked_cnt);
#line 1122
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1122
  if (tmp___8 < 0) {
#line 1122
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1122, tmp___7);
  } else {

  }
#line 1123
  move_to_net_ee_or_free(mdev, e);
#line 1125
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1125
  if (tmp___9 != 0L) {
#line 1126
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1127
  return (ok);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1133
  __mptr = (struct drbd_work  const  *)w;
#line 1133
  e = (struct drbd_epoch_entry *)__mptr;
#line 1134
  sector = e->sector;
#line 1135
  size = e->size;
#line 1138
  ok = 1;
#line 1140
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1140
  if (tmp != 0L) {
#line 1141
    goto out;
  } else {

  }
#line 1143
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1143
  digest_size = (int )tmp___0;
#line 1144
  digest = kmalloc((size_t )digest_size, 16U);
#line 1145
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1146
    ok = 0;
#line 1147
    goto out;
  } else {

  }
#line 1150
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1150
  if (tmp___1 != 0L) {
#line 1151
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1153
    memset(digest, 0, (size_t )digest_size);
  }
#line 1160
  drbd_free_some_ee(mdev, e, 0);
#line 1161
  e = 0;
#line 1162
  inc_rs_pending(mdev);
#line 1163
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1166
  if (ok == 0) {
#line 1167
    atomic_dec(& mdev->rs_pending_cnt);
#line 1167
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1167
    if (tmp___3 < 0) {
#line 1167
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1167
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1167, tmp___2);
    } else {

    }
  } else {

  }
#line 1168
  kfree((void const   *)digest);
  out: ;
#line 1171
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1172
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1173
  atomic_dec(& mdev->unacked_cnt);
#line 1173
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1173
  if (tmp___5 < 0) {
#line 1173
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1173, tmp___4);
  } else {

  }
#line 1174
  return (ok);
}
}
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1179
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1180
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1182
    mdev->ov_last_oos_start = sector;
#line 1183
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1185
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1185U);
#line 1186
  return;
}
}
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1190
  __mptr = (struct drbd_work  const  *)w;
#line 1190
  e = (struct drbd_epoch_entry *)__mptr;
#line 1193
  sector = e->sector;
#line 1194
  size = e->size;
#line 1196
  eq = 0;
#line 1198
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1198
  if (tmp___1 != 0L) {
#line 1199
    drbd_free_some_ee(mdev, e, 0);
#line 1200
    atomic_dec(& mdev->unacked_cnt);
#line 1200
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
    if (tmp___0 < 0) {
#line 1200
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1200, tmp);
    } else {

    }
#line 1201
    return (1);
  } else {

  }
#line 1206
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1206
  if (tmp___2 != 0) {
#line 1207
    drbd_rs_complete_io(mdev, e->sector);
#line 1208
    put_ldev(mdev);
  } else {

  }
#line 1211
  di = e->ldv_45843.digest;
#line 1213
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1213
  if (tmp___5 != 0L) {
#line 1214
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1214
    digest_size = (int )tmp___3;
#line 1215
    digest = kmalloc((size_t )digest_size, 16U);
#line 1216
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1217
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1219
      if (di->digest_size != digest_size) {
#line 1219
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1219);
      } else {

      }
#line 1220
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1220
      eq = tmp___4 == 0;
#line 1221
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1230
  drbd_free_some_ee(mdev, e, 0);
#line 1231
  if (eq == 0) {
#line 1232
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1234
    ov_oos_print(mdev);
  }
#line 1236
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1239
  atomic_dec(& mdev->unacked_cnt);
#line 1239
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1239
  if (tmp___7 < 0) {
#line 1239
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1239, tmp___6);
  } else {

  }
#line 1241
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1244
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1245
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1247
  if (mdev->ov_left == 0UL) {
#line 1248
    ov_oos_print(mdev);
#line 1249
    drbd_resync_finished(mdev);
  } else {

  }
#line 1252
  return (ok);
}
}
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1257
  __mptr = (struct drbd_work  const  *)w;
#line 1257
  b = (struct drbd_wq_barrier *)__mptr;
#line 1258
  complete(& b->done);
#line 1259
  return (1);
}
}
#line 1262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1264
  __mptr = (struct drbd_work  const  *)w;
#line 1264
  b = (struct drbd_tl_epoch *)__mptr;
#line 1265
  p = & mdev->data.sbuf.barrier;
#line 1266
  ok = 1;
#line 1273
  spin_lock_irq(& mdev->req_lock);
#line 1274
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_37644.conn <= 9) {
#line 1275
    cancel = 1;
  } else {

  }
#line 1276
  spin_unlock_irq(& mdev->req_lock);
#line 1277
  if (cancel != 0) {
#line 1278
    return (1);
  } else {

  }
#line 1280
  tmp = drbd_get_data_sock(mdev);
#line 1280
  if (tmp == 0) {
#line 1281
    return (0);
  } else {

  }
#line 1282
  p->barrier = b->br_number;
#line 1286
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1288
  drbd_put_data_sock(mdev);
#line 1290
  return (ok);
}
}
#line 1293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1295
  if (cancel != 0) {
#line 1296
    return (1);
  } else {

  }
#line 1297
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1297
  return (tmp);
}
}
#line 1300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1302
  __mptr = (struct drbd_work  const  *)w;
#line 1302
  req = (struct drbd_request *)__mptr;
#line 1305
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1305
  if (tmp != 0L) {
#line 1306
    req_mod(req, send_canceled);
#line 1307
    return (1);
  } else {

  }
#line 1310
  ok = drbd_send_oos(mdev, req);
#line 1311
  req_mod(req, oos_handed_to_network);
#line 1313
  return (ok);
}
}
#line 1322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1324
  __mptr = (struct drbd_work  const  *)w;
#line 1324
  req = (struct drbd_request *)__mptr;
#line 1327
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1327
  if (tmp != 0L) {
#line 1328
    req_mod(req, send_canceled);
#line 1329
    return (1);
  } else {

  }
#line 1332
  ok = drbd_send_dblock(mdev, req);
#line 1333
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1335
  return (ok);
}
}
#line 1344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1346
  __mptr = (struct drbd_work  const  *)w;
#line 1346
  req = (struct drbd_request *)__mptr;
#line 1349
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1349
  if (tmp != 0L) {
#line 1350
    req_mod(req, send_canceled);
#line 1351
    return (1);
  } else {

  }
#line 1354
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1357
  if (ok == 0) {
#line 1360
    if ((int )mdev->state.ldv_37644.conn > 9) {
#line 1361
      val.i = 0U;
#line 1361
      val.ldv_37644.conn = 5U;
#line 1361
      mask.i = 0U;
#line 1361
      mask.ldv_37644.conn = 31U;
#line 1361
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1363
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1365
  return (ok);
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1370
  __mptr = (struct drbd_work  const  *)w;
#line 1370
  req = (struct drbd_request *)__mptr;
#line 1372
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1373
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1379
  drbd_req_make_private_bio(req, req->master_bio);
#line 1380
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1381
  generic_make_request(req->private_bio);
#line 1383
  return (1);
}
}
#line 1386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1388
  odev = mdev;
  ldv_48317: ;
#line 1391
  if (odev->sync_conf.after == -1) {
#line 1392
    return (1);
  } else {

  }
#line 1393
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1394
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1394
  if (_b != 0) {
#line 1394
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1394);
  } else {

  }
#line 1394
  if (_b != 0) {
#line 1394
    return (1);
  } else {

  }
#line 1395
  if (((((int )odev->state.ldv_37644.conn > 15 && (int )odev->state.ldv_37644.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1399
    return (0);
  } else {

  }
#line 1400
  goto ldv_48317;
}
}
#line 1409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1412
  rv = 0;
#line 1414
  i = 0;
#line 1414
  goto ldv_48328;
  ldv_48327: 
#line 1415
  odev = minor_to_mdev((unsigned int )i);
#line 1416
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1417
    goto ldv_48324;
  } else {

  }
#line 1418
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1419
    goto ldv_48324;
  } else {

  }
#line 1420
  tmp___0 = _drbd_may_sync_now(odev);
#line 1420
  if (tmp___0 == 0) {
#line 1421
    __ns.i = odev->state.i;
#line 1421
    __ns.ldv_37644.aftr_isp = 1U;
#line 1421
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1421
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_48324: 
#line 1414
  i = i + 1;
  ldv_48328: ;
#line 1414
  if ((unsigned int )i < minor_count) {
#line 1415
    goto ldv_48327;
  } else {

  }

#line 1425
  return (rv);
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1437
  rv = 0;
#line 1439
  i = 0;
#line 1439
  goto ldv_48340;
  ldv_48339: 
#line 1440
  odev = minor_to_mdev((unsigned int )i);
#line 1441
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1442
    goto ldv_48336;
  } else {

  }
#line 1443
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1444
    goto ldv_48336;
  } else {

  }
#line 1445
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1446
    tmp___0 = _drbd_may_sync_now(odev);
#line 1446
    if (tmp___0 != 0) {
#line 1447
      __ns.i = odev->state.i;
#line 1447
      __ns.ldv_37644.aftr_isp = 0U;
#line 1447
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1447
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_48336: 
#line 1439
  i = i + 1;
  ldv_48340: ;
#line 1439
  if ((unsigned int )i < minor_count) {
#line 1440
    goto ldv_48339;
  } else {

  }

#line 1452
  return (rv);
}
}
#line 1455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1457
  _raw_write_lock_irq(& global_state_lock);
#line 1458
  _drbd_resume_next(mdev);
#line 1459
  _raw_write_unlock_irq(& global_state_lock);
#line 1460
  return;
}
}
#line 1462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1464
  _raw_write_lock_irq(& global_state_lock);
#line 1465
  _drbd_pause_after(mdev);
#line 1466
  _raw_write_unlock_irq(& global_state_lock);
#line 1467
  return;
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1473
  if (o_minor == -1) {
#line 1474
    return (101);
  } else {

  }
#line 1475
  if (o_minor < -1) {
#line 1476
    return (132);
  } else {
#line 1475
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1475
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1476
      return (132);
    } else {

    }
  }
#line 1479
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_48353: ;
#line 1481
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1482
    return (133);
  } else {

  }
#line 1485
  if (odev->sync_conf.after == -1) {
#line 1486
    return (101);
  } else {

  }
#line 1489
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1490
  goto ldv_48353;
}
}
#line 1493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1498
  _raw_write_lock_irq(& global_state_lock);
#line 1499
  retcode = sync_after_error(mdev, na);
#line 1500
  if (retcode == 101) {
#line 1501
    mdev->sync_conf.after = na;
    ldv_48360: 
#line 1503
    changes = _drbd_pause_after(mdev);
#line 1504
    tmp = _drbd_resume_next(mdev);
#line 1504
    changes = tmp | changes;
#line 1505
    if (changes != 0) {
#line 1506
      goto ldv_48360;
    } else {

    }

  } else {

  }
#line 1507
  _raw_write_unlock_irq(& global_state_lock);
#line 1508
  return (retcode);
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1513
  atomic_set(& mdev->rs_sect_in, 0);
#line 1514
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1515
  mdev->rs_in_flight = 0;
#line 1516
  mdev->rs_planed = 0;
#line 1517
  spin_lock(& mdev->peer_seq_lock);
#line 1518
  fifo_set(& mdev->rs_plan_s, 0);
#line 1519
  spin_unlock(& mdev->peer_seq_lock);
#line 1520
  return;
}
}
#line 1530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1535
  if ((int )mdev->state.ldv_37644.conn > 15 && (int )mdev->state.ldv_37644.conn <= 21) {
#line 1536
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1537
    return;
  } else {

  }
#line 1540
  if ((int )mdev->state.ldv_37644.conn <= 21) {
#line 1542
    drbd_rs_cancel_all(mdev);
  } else {

  }
#line 1548
  if ((unsigned int )side == 17U) {
#line 1552
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1553
    r = (r >> 8) & 255;
#line 1554
    if (r > 0) {
#line 1555
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1557
      val.i = 0U;
#line 1557
      val.ldv_37644.conn = 1U;
#line 1557
      mask.i = 0U;
#line 1557
      mask.ldv_37644.conn = 31U;
#line 1557
      drbd_force_state(mdev, mask, val);
#line 1558
      return;
    } else {

    }
  } else {
#line 1561
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1562
    r = (r >> 8) & 255;
#line 1563
    if (r > 0) {
#line 1564
      if (r == 3) {
#line 1565
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1568
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1570
        val___0.i = 0U;
#line 1570
        val___0.ldv_37644.conn = 1U;
#line 1570
        mask___0.i = 0U;
#line 1570
        mask___0.ldv_37644.conn = 31U;
#line 1570
        drbd_force_state(mdev, mask___0, val___0);
#line 1571
        return;
      }
    } else {

    }
  }
#line 1576
  drbd_state_lock(mdev);
#line 1578
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1578
  if (tmp == 0) {
#line 1579
    drbd_state_unlock(mdev);
#line 1580
    return;
  } else {

  }
#line 1583
  _raw_write_lock_irq(& global_state_lock);
#line 1584
  ns = mdev->state;
#line 1586
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1586
  ns.ldv_37644.aftr_isp = tmp___0 == 0;
#line 1588
  ns.ldv_37644.conn = (unsigned char )side;
#line 1590
  if ((unsigned int )side == 17U) {
#line 1591
    ns.ldv_37644.disk = 4U;
  } else {
#line 1593
    ns.ldv_37644.pdsk = 4U;
  }
#line 1595
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1595
  r = (int )tmp___1;
#line 1596
  ns = mdev->state;
#line 1598
  if ((int )ns.ldv_37644.conn <= 9) {
#line 1599
    r = 0;
  } else {

  }
#line 1601
  if (r == 1) {
#line 1602
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1602
    tw = tmp___2;
#line 1603
    now = jiffies;
#line 1606
    mdev->rs_failed = 0UL;
#line 1607
    mdev->rs_paused = 0UL;
#line 1608
    mdev->rs_same_csum = 0UL;
#line 1609
    mdev->rs_last_events = 0;
#line 1610
    mdev->rs_last_sect_ev = 0;
#line 1611
    mdev->rs_total = tw;
#line 1612
    mdev->rs_start = now;
#line 1613
    i = 0;
#line 1613
    goto ldv_48383;
    ldv_48382: 
#line 1614
    mdev->rs_mark_left[i] = tw;
#line 1615
    mdev->rs_mark_time[i] = now;
#line 1613
    i = i + 1;
    ldv_48383: ;
#line 1613
    if (i <= 7) {
#line 1614
      goto ldv_48382;
    } else {

    }
#line 1617
    _drbd_pause_after(mdev);
  } else {

  }
#line 1619
  _raw_write_unlock_irq(& global_state_lock);
#line 1621
  if (r == 1) {
#line 1622
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_37644.conn);
#line 1622
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1626
    if ((unsigned int )side == 17U) {
#line 1627
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1636
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1637
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1639
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1650
      if ((unsigned int )side == 16U) {
#line 1651
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1654
      drbd_resync_finished(mdev);
    } else {

    }
#line 1657
    drbd_rs_controller_reset(mdev);
#line 1662
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1663
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1665
    drbd_md_sync(mdev);
  } else {

  }
#line 1667
  put_ldev(mdev);
#line 1668
  drbd_state_unlock(mdev);
#line 1669
  return;
}
}
#line 1671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1673
  mdev = thi->mdev;
#line 1674
  w = 0;
#line 1675
  work_list.next = & work_list;
#line 1675
  work_list.prev = & work_list;
#line 1676
  intr = 0;
#line 1678
  tmp = mdev_to_minor(mdev);
#line 1678
  tmp___0 = get_current();
#line 1678
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1680
  goto ldv_48396;
  ldv_48406: 
#line 1681
  drbd_thread_current_set_cpu(mdev);
#line 1683
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1683
  if (tmp___1 != 0) {
#line 1684
    ldv_mutex_lock_39(& mdev->data.mutex);
#line 1685
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1686
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1687
    ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1689
    intr = down_interruptible(& mdev->data.work.s);
#line 1691
    ldv_mutex_lock_41(& mdev->data.mutex);
#line 1692
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1693
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1694
    ldv_mutex_unlock_42(& mdev->data.mutex);
  } else {

  }
#line 1697
  if (intr != 0) {
#line 1698
    if (intr != -4) {
#line 1698
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1698);
    } else {

    }
#line 1699
    tmp___2 = get_current();
#line 1699
    flush_signals(tmp___2);
#line 1700
    tmp___3 = get_t_state(thi);
#line 1700
    _b = (unsigned int )tmp___3 == 1U;
#line 1700
    if (_b != 0) {
#line 1700
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1700);
    } else {

    }
#line 1700
    if (_b != 0) {
#line 1701
      goto ldv_48396;
    } else {

    }
#line 1702
    goto ldv_48397;
  } else {

  }
#line 1705
  tmp___4 = get_t_state(thi);
#line 1705
  if ((unsigned int )tmp___4 != 1U) {
#line 1706
    goto ldv_48397;
  } else {

  }
#line 1711
  w = 0;
#line 1712
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1713
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1713
  _b___0 = tmp___5 != 0;
#line 1713
  if (_b___0 != 0) {
#line 1713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1713);
  } else {

  }
#line 1713
  if (_b___0 != 0) {
#line 1725
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1726
    goto ldv_48396;
  } else {

  }
#line 1728
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1728
  w = (struct drbd_work *)__mptr;
#line 1729
  list_del_init(& w->list);
#line 1730
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1732
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_37644.conn <= 9);
#line 1732
  if (tmp___6 == 0) {
#line 1734
    if ((int )mdev->state.ldv_37644.conn > 9) {
#line 1736
      val.i = 0U;
#line 1736
      val.ldv_37644.conn = 5U;
#line 1736
      mask.i = 0U;
#line 1736
      mask.ldv_37644.conn = 31U;
#line 1736
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_48396: 
#line 1680
  tmp___7 = get_t_state(thi);
#line 1680
  if ((unsigned int )tmp___7 == 1U) {
#line 1681
    goto ldv_48406;
  } else {

  }
  ldv_48397: 
#line 1739
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1739
  if (tmp___8 == 0) {
#line 1739
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1739);
  } else {

  }
#line 1740
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1740
  if (tmp___9 == 0) {
#line 1740
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1740);
  } else {

  }
#line 1742
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1743
  i = 0;
#line 1744
  goto ldv_48413;
  ldv_48412: 
#line 1745
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1746
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1748
  goto ldv_48410;
  ldv_48409: 
#line 1749
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1749
  w = (struct drbd_work *)__mptr___0;
#line 1750
  list_del_init(& w->list);
#line 1751
  (*(w->cb))(mdev, w, 1);
#line 1752
  i = i + 1;
  ldv_48410: 
#line 1748
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1748
  if (tmp___10 == 0) {
#line 1749
    goto ldv_48409;
  } else {

  }
#line 1755
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_48413: 
#line 1744
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1744
  if (tmp___11 == 0) {
#line 1745
    goto ldv_48412;
  } else {

  }
#line 1757
  sema_init(& mdev->data.work.s, 0);
#line 1763
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1765
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1765);
  } else {

  }
#line 1768
  drbd_thread_stop(& mdev->receiver);
#line 1769
  drbd_mdev_cleanup(mdev);
#line 1771
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1773
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1774
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1775
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1777
  return (0);
}
}
#line 1780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1785
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1787
  mutex_lock(ldv_func_arg1);
#line 1788
  return;
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_32(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1795
  tmp = mutex_trylock(ldv_func_arg1);
#line 1795
  ldv_func_res = tmp;
#line 1797
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1797
  return (tmp___0);
#line 1799
  return (ldv_func_res);
}
}
#line 1802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1807
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1809
  mutex_unlock(ldv_func_arg1);
#line 1810
  return;
}
}
#line 1812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1817
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1819
  mutex_lock(ldv_func_arg1);
#line 1820
  return;
}
}
#line 1822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1827
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1829
  mutex_unlock(ldv_func_arg1);
#line 1830
  return;
}
}
#line 1832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1837
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1839
  mutex_unlock(ldv_func_arg1);
#line 1840
  return;
}
}
#line 1842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1847
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1849
  mutex_lock(ldv_func_arg1);
#line 1850
  return;
}
}
#line 1852 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1857
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1859
  mutex_unlock(ldv_func_arg1);
#line 1860
  return;
}
}
#line 1862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1867
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1869
  mutex_lock(ldv_func_arg1);
#line 1870
  return;
}
}
#line 1872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1877
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1879
  mutex_unlock(ldv_func_arg1);
#line 1880
  return;
}
}
#line 1882 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1887
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1889
  mutex_lock(ldv_func_arg1);
#line 1890
  return;
}
}
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1897
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1899
  mutex_unlock(ldv_func_arg1);
#line 1900
  return;
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 142 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 574 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 576
  h->next = 0;
#line 577
  h->pprev = 0;
#line 578
  return;
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 590 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 592
  next = n->next;
#line 593
  pprev = n->pprev;
#line 594
  *pprev = next;
#line 595
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 596
    next->pprev = pprev;
  } else {

  }
#line 597
  return;
}
}
#line 606 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 608
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 608
  if (tmp == 0) {
#line 609
    __hlist_del(n);
#line 610
    INIT_HLIST_NODE(n);
  } else {

  }
#line 612
  return;
}
}
#line 614 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 616
  first = h->first;
#line 617
  n->next = first;
#line 618
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 619
    first->pprev = & n->next;
  } else {

  }
#line 620
  h->first = n;
#line 621
  n->pprev = & h->first;
#line 622
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_56(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_59(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_61(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_55(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_58(struct mutex *ldv_func_arg1 ) ;
#line 52
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6079;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6079: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 210 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 280
extern int del_timer_sync(struct timer_list * ) ;
#line 351 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 364
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 78
extern u32 random32(void) ;
#line 237 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 239
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 241
extern void sock_release(struct socket * ) ;
#line 244
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18177: ;
#line 63
    goto ldv_18177;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18178: ;
#line 65
    goto ldv_18178;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18179: ;
#line 66
    goto ldv_18179;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 300 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 358
extern long schedule_timeout(long  ) ;
#line 361
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2365 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2367
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2367
  return (tmp);
}
}
#line 2391 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2393
  tmp = test_tsk_thread_flag(p, 2);
#line 2393
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2393
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 438 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 440
  disk->part0.nr_sects = size;
#line 441
  return;
}
}
#line 48 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 50
  __might_sleep("include/linux/highmem.h", 50, 0);
#line 51
  tmp = lowmem_page_address(page);
#line 51
  return (tmp);
}
}
#line 54 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 56
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1194
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1200
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1209
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1219
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1221
void tl_clear(struct drbd_conf *mdev ) ;
#line 1223
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1226
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1227
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1230
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1232
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1241
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1243
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1244
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1248
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1250
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1266
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1268
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1277
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1294
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1297
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1298
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1494
mempool_t *drbd_ee_mempool ;
#line 1496
struct page *drbd_pp_pool ;
#line 1497
spinlock_t drbd_pp_lock ;
#line 1498
int drbd_pp_vacant ;
#line 1519
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1521
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1522
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1523
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1524
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1528
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1585
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1595
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1597
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1601
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1602
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1634
  val = 1;
#line 1635
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1637
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1641
  val = 2;
#line 1642
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1644
  return;
}
}
#line 1646
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1658
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1684
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_47782;
  ldv_47781: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_47782: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_47781;
    } else {
#line 1776
      goto ldv_47783;
    }
  } else {

  }
  ldv_47783: ;
#line 1777
  return (0);
}
}
#line 1816 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1820
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1820
  return ((int )tmp);
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1878
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1881
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1884
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_47856;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_47856;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47856: ;
#line 1942
  return (s);
}
}
#line 1976 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1979
  tmp = spinlock_check(& q->q_lock);
#line 1979
  flags = _raw_spin_lock_irqsave(tmp);
#line 1980
  list_add(& w->list, & q->q);
#line 1981
  up(& q->s);
#line 1983
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1984
  return;
}
}
#line 2016 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2019
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2019
  return (tmp);
}
}
#line 2022 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2025
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2025
  return (tmp);
}
}
#line 2107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2109
  atomic_inc(& mdev->unacked_cnt);
#line 2110
  return;
}
}
#line 2123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2125
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2125
  if (tmp != 0) {
#line 2126
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2127
  return;
}
}
#line 2135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2139
  atomic_inc(& mdev->net_cnt);
#line 2140
  have_net_conf = (int )mdev->state.ldv_37644.conn > 1;
#line 2141
  if (have_net_conf == 0) {
#line 2142
    put_net_conf(mdev);
  } else {

  }
#line 2143
  return (have_net_conf);
}
}
#line 2399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2401
  changed = mdev->ed_uuid != val;
#line 2402
  mdev->ed_uuid = val;
#line 2403
  return (changed);
}
}
#line 2406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2413
  return ((int )a - (int )b);
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2425
  spin_lock(& mdev->peer_seq_lock);
#line 2426
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2426
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2427
  mdev->peer_seq = m;
#line 2428
  spin_unlock(& mdev->peer_seq_lock);
#line 2429
  if (m == new_seq) {
#line 2430
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2431
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_48127: ;
#line 229
    goto ldv_48127;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_48132: ;
#line 238
    goto ldv_48132;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 255
  tmp = ar_hash_slot(mdev, sector);
#line 255
  slot = tmp;
#line 259
  n = slot->first;
#line 259
  goto ldv_48150;
  ldv_48149: ;
#line 260
  if ((unsigned long )req == (unsigned long )id) {
#line 261
    if (req->sector != sector) {
#line 261
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              261);
    } else {

    }
#line 262
    return (req);
  } else {

  }
#line 259
  n = n->next;
  ldv_48150: ;
#line 259
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 259
    __builtin_prefetch((void const   *)n->next);
#line 259
    if (1 != 0) {
#line 259
      __mptr = (struct hlist_node  const  *)n;
#line 259
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 259
      if (1 != 0) {
#line 260
        goto ldv_48149;
      } else {
#line 262
        goto ldv_48151;
      }
    } else {
#line 262
      goto ldv_48151;
    }
  } else {

  }
  ldv_48151: ;
#line 265
  return (0);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 308
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_48218: ;
#line 162
  goto ldv_48218;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 114
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 116
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 117
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 136
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 136
  if (tmp___0 != 0L) {
#line 136
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (136), "i" (12UL));
    ldv_48298: ;
#line 136
    goto ldv_48298;
  } else {

  }
#line 137
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 137
  if (tmp___1 != 0L) {
#line 137
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (137), "i" (12UL));
    ldv_48299: ;
#line 137
    goto ldv_48299;
  } else {

  }
#line 139
  page = *head;
#line 141
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 142
    return (0);
  } else {

  }
#line 144
  goto ldv_48302;
  ldv_48301: 
#line 145
  tmp = page_chain_next(page);
#line 146
  n = n - 1;
#line 146
  if (n == 0) {
#line 147
    goto ldv_48300;
  } else {

  }
#line 148
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 151
  page = tmp;
  ldv_48302: ;
#line 144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    goto ldv_48301;
  } else {

  }
  ldv_48300: 
#line 155
  page->ldv_13136.ldv_13133.private = 0UL;
#line 157
  page = *head;
#line 158
  *head = tmp;
#line 159
  return (page);
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 168
  i = 1;
#line 169
  goto ldv_48310;
  ldv_48309: 
#line 170
  i = i + 1;
#line 170
  page = tmp;
  ldv_48310: 
#line 169
  tmp = page_chain_next(page);
#line 169
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 170
    goto ldv_48309;
  } else {

  }

#line 171
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 172
    *len = i;
  } else {

  }
#line 173
  return (page);
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 179
  i = 0;
#line 180
  goto ldv_48319;
  ldv_48318: 
#line 181
  put_page(page);
#line 182
  i = i + 1;
#line 180
  page = tmp;
  ldv_48319: ;
#line 180
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 180
    tmp = page_chain_next(page);
#line 180
    if (1 != 0) {
#line 181
      goto ldv_48318;
    } else {
#line 183
      goto ldv_48320;
    }
  } else {

  }
  ldv_48320: ;
#line 184
  return (i);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 192
  tmp = page_chain_tail(chain_first, 0);
#line 193
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 193
  if (tmp___0 != 0L) {
#line 193
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (193), "i" (12UL));
    ldv_48327: ;
#line 193
    goto ldv_48327;
  } else {

  }
#line 197
  chain_last->ldv_13136.ldv_13133.private = (unsigned long )*head;
#line 198
  *head = chain_first;
#line 199
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 203
  page = 0;
#line 204
  tmp = 0;
#line 205
  i = 0;
#line 209
  if (drbd_pp_vacant >= number) {
#line 210
    spin_lock(& drbd_pp_lock);
#line 211
    page = page_chain_del(& drbd_pp_pool, number);
#line 212
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 213
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 214
    spin_unlock(& drbd_pp_lock);
#line 215
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 216
      return (page);
    } else {

    }
  } else {

  }
#line 222
  i = 0;
#line 222
  goto ldv_48337;
  ldv_48336: 
#line 223
  tmp = alloc_pages(514U, 0U);
#line 224
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 225
    goto ldv_48335;
  } else {

  }
#line 226
  tmp->ldv_13136.ldv_13133.private = (unsigned long )page;
#line 227
  page = tmp;
#line 222
  i = i + 1;
  ldv_48337: ;
#line 222
  if (i < number) {
#line 223
    goto ldv_48336;
  } else {

  }
  ldv_48335: ;
#line 230
  if (i == number) {
#line 231
    return (page);
  } else {

  }
#line 236
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 237
    tmp = page_chain_tail(page, 0);
#line 238
    spin_lock(& drbd_pp_lock);
#line 239
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 240
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 241
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 243
  return (0);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 256
  le = mdev->net_ee.next;
#line 256
  tle = le->next;
#line 256
  goto ldv_48349;
  ldv_48348: 
#line 257
  __mptr = (struct list_head  const  *)le;
#line 257
  e = (struct drbd_epoch_entry *)__mptr;
#line 258
  tmp = drbd_ee_has_active_page___0(e);
#line 258
  if (tmp != 0) {
#line 259
    goto ldv_48347;
  } else {

  }
#line 260
  list_move(le, to_be_freed);
#line 256
  le = tle;
#line 256
  tle = le->next;
  ldv_48349: ;
#line 256
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 257
    goto ldv_48348;
  } else {

  }
  ldv_48347: ;
#line 261
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 266
  reclaimed.next = & reclaimed;
#line 266
  reclaimed.prev = & reclaimed;
#line 269
  spin_lock_irq(& mdev->req_lock);
#line 270
  reclaim_net_ee(mdev, & reclaimed);
#line 271
  spin_unlock_irq(& mdev->req_lock);
#line 273
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 273
  e = (struct drbd_epoch_entry *)__mptr;
#line 273
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 273
  goto ldv_48363;
  ldv_48362: 
#line 274
  drbd_free_some_ee(mdev, e, 1);
#line 273
  e = t;
#line 273
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 273
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48363: ;
#line 273
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 274
    goto ldv_48362;
  } else {

  }

#line 278
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 291
  page = 0;
#line 292
  tmp = get_current();
#line 292
  wait.flags = 0U;
#line 292
  wait.private = (void *)tmp;
#line 292
  wait.func = & autoremove_wake_function;
#line 292
  wait.task_list.next = & wait.task_list;
#line 292
  wait.task_list.prev = & wait.task_list;
#line 296
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 296
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 297
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 299
  goto ldv_48374;
  ldv_48373: 
#line 300
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 302
  drbd_kick_lo_and_reclaim_net(mdev);
#line 304
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 306
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 307
      goto ldv_48372;
    } else {

    }
  } else {

  }
#line 310
  if (! retry) {
#line 311
    goto ldv_48372;
  } else {

  }
#line 313
  tmp___2 = get_current();
#line 313
  tmp___3 = signal_pending(tmp___2);
#line 313
  if (tmp___3 != 0) {
#line 314
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 315
    goto ldv_48372;
  } else {

  }
#line 318
  schedule();
  ldv_48374: ;
#line 299
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 300
    goto ldv_48373;
  } else {

  }
  ldv_48372: 
#line 320
  finish_wait(& drbd_pp_wait, & wait);
#line 322
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 323
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 324
  return (page);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 333
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 336
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 337
    i = page_chain_free(page);
  } else {
#line 340
    tmp = page_chain_tail(page, & i);
#line 341
    spin_lock(& drbd_pp_lock);
#line 342
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 343
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 344
    spin_unlock(& drbd_pp_lock);
  }
#line 346
  i = atomic_sub_return(i, a);
#line 347
  if (i < 0) {
#line 348
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 350
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 351
  return;
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 376
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 378
  tmp = drbd_insert_fault(mdev, 8U);
#line 378
  if (tmp != 0) {
#line 379
    return (0);
  } else {

  }
#line 381
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 381
  e = (struct drbd_epoch_entry *)tmp___0;
#line 382
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 383
    if ((gfp_mask & 512U) == 0U) {
#line 384
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 385
    return (0);
  } else {

  }
#line 388
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 389
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 390
    goto fail;
  } else {

  }
#line 392
  INIT_HLIST_NODE(& e->collision);
#line 393
  e->epoch = 0;
#line 394
  e->mdev = mdev;
#line 395
  e->pages = page;
#line 396
  atomic_set(& e->pending_bios, 0);
#line 397
  e->size = data_size;
#line 398
  e->flags = 0UL;
#line 399
  e->sector = sector;
#line 400
  e->ldv_45843.block_id = id;
#line 402
  return (e);
  fail: 
#line 405
  mempool_free((void *)e, drbd_ee_mempool);
#line 406
  return (0);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 411
  if ((e->flags & 16UL) != 0UL) {
#line 412
    kfree((void const   *)e->ldv_45843.digest);
  } else {

  }
#line 413
  drbd_pp_free(mdev, e->pages, is_net);
#line 414
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 414
  if (tmp != 0) {
#line 414
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            414);
  } else {

  }
#line 415
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 415
  if (tmp___0 == 0) {
#line 415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            415);
  } else {

  }
#line 416
  mempool_free((void *)e, drbd_ee_mempool);
#line 417
  return;
}
}
#line 419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 421
  work_list.next = & work_list;
#line 421
  work_list.prev = & work_list;
#line 423
  count = 0;
#line 424
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 426
  spin_lock_irq(& mdev->req_lock);
#line 427
  list_splice_init(list, & work_list);
#line 428
  spin_unlock_irq(& mdev->req_lock);
#line 430
  __mptr = (struct list_head  const  *)work_list.next;
#line 430
  e = (struct drbd_epoch_entry *)__mptr;
#line 430
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 430
  goto ldv_48415;
  ldv_48414: 
#line 431
  drbd_free_some_ee(mdev, e, is_net);
#line 432
  count = count + 1;
#line 430
  e = t;
#line 430
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48415: ;
#line 430
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 431
    goto ldv_48414;
  } else {

  }

#line 434
  return (count);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 449
  work_list.next = & work_list;
#line 449
  work_list.prev = & work_list;
#line 450
  reclaimed.next = & reclaimed;
#line 450
  reclaimed.prev = & reclaimed;
#line 452
  ok = (int )mdev->state.ldv_37644.conn > 8;
#line 454
  spin_lock_irq(& mdev->req_lock);
#line 455
  reclaim_net_ee(mdev, & reclaimed);
#line 456
  list_splice_init(& mdev->done_ee, & work_list);
#line 457
  spin_unlock_irq(& mdev->req_lock);
#line 459
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 459
  e = (struct drbd_epoch_entry *)__mptr;
#line 459
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 459
  goto ldv_48432;
  ldv_48431: 
#line 460
  drbd_free_some_ee(mdev, e, 1);
#line 459
  e = t;
#line 459
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 459
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48432: ;
#line 459
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 460
    goto ldv_48431;
  } else {

  }
#line 466
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 466
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 466
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 466
  goto ldv_48441;
  ldv_48440: 
#line 468
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 468
  ok = tmp != 0 && ok != 0;
#line 469
  drbd_free_some_ee(mdev, e, 0);
#line 466
  e = t;
#line 466
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 466
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_48441: ;
#line 466
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 467
    goto ldv_48440;
  } else {

  }
#line 471
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 473
  return (ok);
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 478
  tmp = get_current();
#line 478
  wait.flags = 0U;
#line 478
  wait.private = (void *)tmp;
#line 478
  wait.func = & autoremove_wake_function;
#line 478
  wait.task_list.next = & wait.task_list;
#line 478
  wait.task_list.prev = & wait.task_list;
#line 482
  goto ldv_48449;
  ldv_48448: 
#line 483
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 484
  spin_unlock_irq(& mdev->req_lock);
#line 485
  io_schedule();
#line 486
  finish_wait(& mdev->ee_wait, & wait);
#line 487
  spin_lock_irq(& mdev->req_lock);
  ldv_48449: 
#line 482
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 482
  if (tmp___0 == 0) {
#line 483
    goto ldv_48448;
  } else {

  }

#line 487
  return;
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 493
  spin_lock_irq(& mdev->req_lock);
#line 494
  _drbd_wait_ee_list_empty(mdev, head);
#line 495
  spin_unlock_irq(& mdev->req_lock);
#line 496
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 503
  sk = sock->sk;
#line 504
  err = 0;
#line 506
  *what = "listen";
#line 507
  err = (*((sock->ops)->listen))(sock, 5);
#line 508
  if (err < 0) {
#line 509
    goto out;
  } else {

  }
#line 511
  *what = "sock_create_lite";
#line 512
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 514
  if (err < 0) {
#line 515
    goto out;
  } else {

  }
#line 517
  *what = "accept";
#line 518
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 519
  if (err < 0) {
#line 520
    sock_release(*newsock);
#line 521
    *newsock = 0;
#line 522
    goto out;
  } else {

  }
#line 524
  (*newsock)->ops = sock->ops;
  out: ;
#line 527
  return (err);
}
}
#line 530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 534
  iov.iov_base = buf;
#line 534
  iov.iov_len = size;
#line 538
  msg.msg_name = 0;
#line 538
  msg.msg_namelen = 0;
#line 538
  msg.msg_iov = (struct iovec *)(& iov);
#line 538
  msg.msg_iovlen = 1UL;
#line 538
  msg.msg_control = 0;
#line 538
  msg.msg_controllen = 0UL;
#line 538
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 545
  tmp = current_thread_info___0();
#line 545
  oldfs = tmp->addr_limit;
#line 546
  tmp___0 = current_thread_info___0();
#line 546
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 546
  tmp___0->addr_limit = __constr_expr_0;
#line 547
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 548
  tmp___1 = current_thread_info___0();
#line 548
  tmp___1->addr_limit = oldfs;
#line 550
  return (rv);
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 556
  iov.iov_base = buf;
#line 556
  iov.iov_len = size;
#line 560
  msg.msg_name = 0;
#line 560
  msg.msg_namelen = 0;
#line 560
  msg.msg_iov = (struct iovec *)(& iov);
#line 560
  msg.msg_iovlen = 1UL;
#line 560
  msg.msg_control = 0;
#line 560
  msg.msg_controllen = 0UL;
#line 560
  msg.msg_flags = 16640U;
#line 567
  tmp = current_thread_info___0();
#line 567
  oldfs = tmp->addr_limit;
#line 568
  tmp___0 = current_thread_info___0();
#line 568
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 568
  tmp___0->addr_limit = __constr_expr_0;
  ldv_48487: 
#line 571
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 572
  if ((size_t )rv == size) {
#line 573
    goto ldv_48486;
  } else {

  }
#line 580
  if (rv < 0) {
#line 581
    if (rv == -104) {
#line 582
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 583
    if (rv != -512) {
#line 584
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 585
    goto ldv_48486;
  } else
#line 586
  if (rv == 0) {
#line 587
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 588
    goto ldv_48486;
  } else {
#line 594
    goto ldv_48486;
  }
#line 596
  goto ldv_48487;
  ldv_48486: 
#line 598
  tmp___1 = current_thread_info___0();
#line 598
  tmp___1->addr_limit = oldfs;
#line 600
  if ((size_t )rv != size) {
#line 601
    val.i = 0U;
#line 601
    val.ldv_37644.conn = 4U;
#line 601
    mask.i = 0U;
#line 601
    mask.ldv_37644.conn = 31U;
#line 601
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 603
  return (rv);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 615
  if (snd != 0U) {
#line 616
    (sock->sk)->sk_sndbuf = (int )snd;
#line 617
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 619
  if (rcv != 0U) {
#line 620
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 621
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 623
  return;
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 631
  disconnect_on_error = 1;
#line 633
  tmp = get_net_conf(mdev);
#line 633
  if (tmp == 0) {
#line 634
    return (0);
  } else {

  }
#line 636
  what = "sock_create_kern";
#line 637
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 639
  if (err < 0) {
#line 640
    sock = 0;
#line 641
    goto out;
  } else {

  }
#line 644
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 644
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 644
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 646
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 656
  __min1 = (mdev->net_conf)->my_addr_len;
#line 656
  __min2 = 28;
#line 656
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 656
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 658
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 659
    src_in6.sin6_port = 0U;
  } else {
#line 661
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 663
  what = "bind before connect";
#line 664
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 667
  if (err < 0) {
#line 668
    goto out;
  } else {

  }
#line 672
  disconnect_on_error = 0;
#line 673
  what = "connect";
#line 674
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 679
  if (err < 0) {
#line 680
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 681
      sock_release(sock);
#line 682
      sock = 0;
    } else {

    }
#line 684
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 691
    disconnect_on_error = 0;
#line 692
    goto ldv_48524;
    default: 
#line 694
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_48524: ;
#line 696
    if (disconnect_on_error != 0) {
#line 697
      val.i = 0U;
#line 697
      val.ldv_37644.conn = 1U;
#line 697
      mask.i = 0U;
#line 697
      mask.ldv_37644.conn = 31U;
#line 697
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 699
  put_net_conf(mdev);
#line 700
  return (sock);
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 706
  s_estab = 0;
#line 709
  tmp = get_net_conf(mdev);
#line 709
  if (tmp == 0) {
#line 710
    return (0);
  } else {

  }
#line 712
  what = "sock_create_kern";
#line 713
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 715
  if (err != 0) {
#line 716
    s_listen = 0;
#line 717
    goto out;
  } else {

  }
#line 720
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 721
  tmp___0 = random32();
#line 721
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 723
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 724
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 725
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 726
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 729
  what = "bind before listen";
#line 730
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 733
  if (err < 0) {
#line 734
    goto out;
  } else {

  }
#line 736
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 739
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 740
    sock_release(s_listen);
  } else {

  }
#line 741
  if (err < 0) {
#line 742
    if ((err != -11 && err != -4) && err != -512) {
#line 743
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 744
      val.i = 0U;
#line 744
      val.ldv_37644.conn = 1U;
#line 744
      mask.i = 0U;
#line 744
      mask.ldv_37644.conn = 31U;
#line 744
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 747
  put_net_conf(mdev);
#line 749
  return (s_estab);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 755
  h = & mdev->data.sbuf.header.h80;
#line 757
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 757
  return (tmp);
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 762
  h = & mdev->data.rbuf.header.h80;
#line 765
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 767
  if (rr == 8 && h->magic == 1728214147U) {
#line 768
    tmp = __fswab16((int )h->command);
#line 768
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 770
  return (65535);
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 783
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 784
    return (0);
  } else {

  }
#line 786
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 788
  if (rr > 0 || rr == -11) {
#line 789
    return (1);
  } else {
#line 791
    sock_release(*sock);
#line 792
    *sock = 0;
#line 793
    return (0);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 810
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            810);
  } else {

  }
#line 812
  val.i = 0U;
#line 812
  val.ldv_37644.conn = 8U;
#line 812
  mask.i = 0U;
#line 812
  mask.ldv_37644.conn = 31U;
#line 812
  tmp = drbd_request_state(mdev, mask, val);
#line 812
  if (tmp <= 0) {
#line 813
    return (-2);
  } else {

  }
#line 815
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 817
  sock = 0;
#line 818
  msock = 0;
  ldv_48583: 
#line 821
  try = 0;
  ldv_48575: 
#line 823
  s = drbd_try_connect(mdev);
#line 824
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 825
    goto ldv_48574;
  } else {
#line 824
    try = try + 1;
#line 824
    if (try > 2) {
#line 825
      goto ldv_48574;
    } else {

    }
  }
#line 827
  schedule_timeout_interruptible(25L);
#line 828
  goto ldv_48575;
  ldv_48574: ;
#line 830
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 831
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 832
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 833
      sock = s;
#line 834
      s = 0;
    } else
#line 835
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 836
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 837
      msock = s;
#line 838
      s = 0;
    } else {
#line 840
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 841
      goto out_release_sockets;
    }
  } else {

  }
#line 845
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 846
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 847
    ok = drbd_socket_okay(mdev, & sock);
#line 848
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 848
    ok = tmp___0 != 0 && ok != 0;
#line 849
    if (ok != 0) {
#line 850
      goto ldv_48577;
    } else {

    }
  } else {

  }
  retry: 
#line 854
  s = drbd_wait_for_connect(mdev);
#line 855
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 856
    tmp___1 = drbd_recv_fp(mdev, s);
#line 856
    try = (int )tmp___1;
#line 857
    drbd_socket_okay(mdev, & sock);
#line 858
    drbd_socket_okay(mdev, & msock);
#line 859
    switch (try) {
    case 65522: ;
#line 861
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 862
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 863
      sock_release(sock);
    } else {

    }
#line 865
    sock = s;
#line 866
    goto ldv_48580;
    case 65521: ;
#line 868
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 869
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 870
      sock_release(msock);
    } else {

    }
#line 872
    msock = s;
#line 873
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 874
    goto ldv_48580;
    default: 
#line 876
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 877
    sock_release(s);
#line 878
    tmp___2 = random32();
#line 878
    if ((int )tmp___2 & 1) {
#line 879
      goto retry;
    } else {

    }
    }
    ldv_48580: ;
  } else {

  }
#line 883
  if ((int )mdev->state.ldv_37644.conn <= 1) {
#line 884
    goto out_release_sockets;
  } else {

  }
#line 885
  tmp___5 = get_current();
#line 885
  tmp___6 = signal_pending(tmp___5);
#line 885
  if (tmp___6 != 0) {
#line 886
    tmp___3 = get_current();
#line 886
    flush_signals(tmp___3);
#line 887
    __asm__  volatile   ("": : : "memory");
#line 888
    tmp___4 = get_t_state(& mdev->receiver);
#line 888
    if ((unsigned int )tmp___4 == 2U) {
#line 889
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 892
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 893
    ok = drbd_socket_okay(mdev, & sock);
#line 894
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 894
    ok = tmp___7 != 0 && ok != 0;
#line 895
    if (ok != 0) {
#line 896
      goto ldv_48577;
    } else {

    }
  } else {

  }
#line 898
  goto ldv_48583;
  ldv_48577: 
#line 900
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 901
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 903
  (sock->sk)->sk_allocation = 16U;
#line 904
  (msock->sk)->sk_allocation = 16U;
#line 906
  (sock->sk)->sk_priority = 4U;
#line 907
  (msock->sk)->sk_priority = 6U;
#line 914
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 914
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 914
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 917
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 918
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 922
  drbd_tcp_nodelay(sock);
#line 923
  drbd_tcp_nodelay(msock);
#line 925
  mdev->data.socket = sock;
#line 926
  mdev->meta.socket = msock;
#line 927
  mdev->last_received = jiffies;
#line 929
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 929
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            929);
  } else {

  }
#line 931
  h = drbd_do_handshake(mdev);
#line 932
  if (h <= 0) {
#line 933
    return (h);
  } else {

  }
#line 935
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 937
    tmp___9 = drbd_do_auth(mdev);
#line 937
    switch (tmp___9) {
    case -1: 
#line 939
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 940
    return (-1);
    case 0: 
#line 942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 943
    return (0);
    }
  } else {

  }
#line 947
  val___0.i = 0U;
#line 947
  val___0.ldv_37644.conn = 9U;
#line 947
  mask___0.i = 0U;
#line 947
  mask___0.ldv_37644.conn = 31U;
#line 947
  tmp___10 = drbd_request_state(mdev, mask___0, val___0);
#line 947
  if (tmp___10 <= 0) {
#line 948
    return (0);
  } else {

  }
#line 950
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 951
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 953
  atomic_set(& mdev->packet_seq, 0);
#line 954
  mdev->peer_seq = 0U;
#line 956
  drbd_thread_start(& mdev->asender);
#line 958
  tmp___11 = drbd_send_protocol(mdev);
#line 958
  if (tmp___11 == -1) {
#line 959
    return (-1);
  } else {

  }
#line 960
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 961
  drbd_send_sizes(mdev, 0, 0);
#line 962
  drbd_send_uuids(mdev);
#line 963
  drbd_send_state(mdev);
#line 964
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 965
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 966
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 968
  return (1);
  out_release_sockets: ;
#line 971
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 972
    sock_release(sock);
  } else {

  }
#line 973
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 974
    sock_release(msock);
  } else {

  }
#line 975
  return (-1);
}
}
#line 978 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 980
  h = & mdev->data.rbuf.header;
#line 983
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 984
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 984
  if (tmp___1 != 0L) {
#line 985
    tmp = get_current();
#line 985
    tmp___0 = signal_pending(tmp);
#line 985
    if (tmp___0 == 0) {
#line 986
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 987
    return (0);
  } else {

  }
#line 990
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 990
  if (tmp___9 != 0L) {
#line 991
    tmp___2 = __fswab16((int )h->h80.command);
#line 991
    *cmd = (enum drbd_packets )tmp___2;
#line 992
    tmp___3 = __fswab16((int )h->h80.length);
#line 992
    *packet_size = (unsigned int )tmp___3;
  } else
#line 993
  if ((unsigned int )h->h95.magic == 23171U) {
#line 994
    tmp___4 = __fswab16((int )h->h95.command);
#line 994
    *cmd = (enum drbd_packets )tmp___4;
#line 995
    tmp___5 = __fswab32(h->h95.length);
#line 995
    *packet_size = tmp___5;
  } else {
#line 997
    tmp___6 = __fswab16((int )h->h80.length);
#line 997
    tmp___7 = __fswab16((int )h->h80.command);
#line 997
    tmp___8 = __fswab32(h->h80.magic);
#line 997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1001
    return (0);
  }
#line 1003
  mdev->last_received = jiffies;
#line 1005
  return (1);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1012
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1012
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1012
    if (tmp != 0) {
#line 1013
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1015
      if (rv != 0) {
#line 1016
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1020
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1022
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1024
  return;
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1038
  rv = FE_STILL_LIVE;
#line 1040
  spin_lock(& mdev->epoch_lock);
  ldv_48620: 
#line 1042
  next_epoch = 0;
#line 1044
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1046
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1048
  atomic_dec(& epoch->active);
#line 1049
  goto ldv_48610;
  case 1U: 
#line 1051
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1052
  goto ldv_48610;
  case 2U: ;
#line 1055
  goto ldv_48610;
  }
  ldv_48610: ;
#line 1058
  if (epoch_size != 0) {
#line 1058
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1058
    if (tmp___1 == 0) {
#line 1058
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1058
      if (tmp___2 != 0) {
#line 1061
        if (((unsigned int )ev & 32U) == 0U) {
#line 1062
          spin_unlock(& mdev->epoch_lock);
#line 1063
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1064
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1066
        atomic_dec(& mdev->unacked_cnt);
#line 1066
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1066
        if (tmp___0 < 0) {
#line 1066
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1066
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1066, tmp);
        } else {

        }
#line 1068
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1069
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1069
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1070
          list_del(& epoch->list);
#line 1071
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1072
          mdev->epochs = mdev->epochs - 1U;
#line 1073
          kfree((void const   *)epoch);
#line 1075
          if ((unsigned int )rv == 0U) {
#line 1076
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1078
          epoch->flags = 0UL;
#line 1079
          atomic_set(& epoch->epoch_size, 0);
#line 1081
          if ((unsigned int )rv == 0U) {
#line 1082
            rv = FE_RECYCLED;
          } else {

          }
#line 1083
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1087
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1088
    goto ldv_48619;
  } else {

  }
#line 1090
  epoch = next_epoch;
#line 1091
  goto ldv_48620;
  ldv_48619: 
#line 1093
  spin_unlock(& mdev->epoch_lock);
#line 1095
  return (rv);
}
}
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1106
  write_ordering_str[0] = (char *)"none";
#line 1106
  write_ordering_str[1] = (char *)"drain";
#line 1106
  write_ordering_str[2] = (char *)"flush";
#line 1112
  pwo = mdev->write_ordering;
#line 1113
  _min1 = pwo;
#line 1113
  _min2 = wo;
#line 1113
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1114
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1115
    wo = WO_drain_io;
  } else {

  }
#line 1116
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1117
    wo = WO_none;
  } else {

  }
#line 1118
  mdev->write_ordering = wo;
#line 1119
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1120
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1121
  return;
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1143
  bios = 0;
#line 1145
  page = e->pages;
#line 1146
  sector = e->sector;
#line 1147
  ds = e->size;
#line 1148
  n_bios = 0U;
#line 1149
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1150
  err = -12;
  next_bio: 
#line 1157
  bio = bio_alloc(16U, (int )nr_pages);
#line 1158
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1159
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1160
    goto fail;
  } else {

  }
#line 1163
  bio->bi_sector = sector;
#line 1164
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1165
  bio->bi_rw = (unsigned long )rw;
#line 1166
  bio->bi_private = (void *)e;
#line 1167
  bio->bi_end_io = & drbd_endio_sec;
#line 1169
  bio->bi_next = bios;
#line 1170
  bios = bio;
#line 1171
  n_bios = n_bios + 1U;
#line 1173
  goto ldv_48652;
  ldv_48651: 
#line 1174
  __min1 = ds;
#line 1174
  __min2 = 4096U;
#line 1174
  len = __min1 < __min2 ? __min1 : __min2;
#line 1175
  tmp = bio_add_page(bio, page, len, 0U);
#line 1175
  if (tmp == 0) {
#line 1179
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1180
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1184
      err = -28;
#line 1185
      goto fail;
    } else {

    }
#line 1187
    goto next_bio;
  } else {

  }
#line 1189
  ds = ds - len;
#line 1190
  sector = (sector_t )(len >> 9) + sector;
#line 1191
  nr_pages = nr_pages - 1U;
#line 1173
  page = page_chain_next(page);
  ldv_48652: ;
#line 1173
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1173
    tmp___0 = page_chain_next(page);
#line 1173
    __builtin_prefetch((void const   *)tmp___0);
#line 1173
    if (1 != 0) {
#line 1174
      goto ldv_48651;
    } else {
#line 1176
      goto ldv_48653;
    }
  } else {

  }
  ldv_48653: ;
#line 1193
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1193
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1193);
  } else {

  }
#line 1194
  if (ds != 0U) {
#line 1194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1194);
  } else {

  }
#line 1196
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_48654: 
#line 1198
  bio = bios;
#line 1199
  bios = bios->bi_next;
#line 1200
  bio->bi_next = 0;
#line 1202
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1203
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1204
    goto ldv_48654;
  } else {

  }

#line 1204
  return (0);
  fail: ;
#line 1207
  goto ldv_48657;
  ldv_48656: 
#line 1208
  bio = bios;
#line 1209
  bios = bios->bi_next;
#line 1210
  bio_put(bio);
  ldv_48657: ;
#line 1207
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1208
    goto ldv_48656;
  } else {

  }

#line 1212
  return (err);
}
}
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1218
  p = & mdev->data.rbuf.barrier;
#line 1221
  inc_unacked(mdev);
#line 1223
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1224
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1224
  rv = (int )tmp;
#line 1231
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1233
  if (rv == 2) {
#line 1234
    return (1);
  } else {

  }
#line 1238
  tmp___0 = kmalloc(40UL, 16U);
#line 1238
  epoch = (struct drbd_epoch *)tmp___0;
#line 1239
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1240
    goto ldv_48668;
  } else {
#line 1242
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1247
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1248
  drbd_flush(mdev);
#line 1250
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1250
  if (tmp___2 != 0) {
#line 1251
    tmp___1 = kmalloc(40UL, 16U);
#line 1251
    epoch = (struct drbd_epoch *)tmp___1;
#line 1252
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1253
      goto ldv_48668;
    } else {

    }
  } else {

  }
#line 1256
  epoch = mdev->current_epoch;
#line 1257
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1257
  if (tmp___3 == 0) {
#line 1257
    goto ldv_48671;
  } else {

  }
#line 1257
  tmp___4 = get_current();
#line 1257
  __wait.flags = 0U;
#line 1257
  __wait.private = (void *)tmp___4;
#line 1257
  __wait.func = & autoremove_wake_function;
#line 1257
  __wait.task_list.next = & __wait.task_list;
#line 1257
  __wait.task_list.prev = & __wait.task_list;
  ldv_48674: 
#line 1257
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1257
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1257
  if (tmp___5 == 0) {
#line 1257
    goto ldv_48673;
  } else {

  }
#line 1257
  schedule();
#line 1257
  goto ldv_48674;
  ldv_48673: 
#line 1257
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_48671: 
#line 1259
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1259
  if (tmp___6 != 0) {
#line 1259
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1259);
  } else {

  }
#line 1260
  if (epoch->flags != 0UL) {
#line 1260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1260);
  } else {

  }
#line 1262
  return (1);
  default: 
#line 1264
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1265
  return (0);
  }
  ldv_48668: 
#line 1268
  epoch->flags = 0UL;
#line 1269
  atomic_set(& epoch->epoch_size, 0);
#line 1270
  atomic_set(& epoch->active, 0);
#line 1272
  spin_lock(& mdev->epoch_lock);
#line 1273
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1273
  if (tmp___7 != 0) {
#line 1274
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1275
    mdev->current_epoch = epoch;
#line 1276
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1279
    kfree((void const   *)epoch);
  }
#line 1281
  spin_unlock(& mdev->epoch_lock);
#line 1283
  return (1);
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  int _b___1 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1291
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1291
  capacity = tmp;
#line 1295
  dig_in = mdev->int_dig_in;
#line 1296
  dig_vv = mdev->int_dig_vv;
#line 1299
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1299
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1299
    dgs = (int )tmp___0;
  } else {
#line 1299
    dgs = 0;
  }
#line 1302
  if (dgs != 0) {
#line 1303
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1304
    if (rr != dgs) {
#line 1305
      tmp___1 = get_current();
#line 1305
      tmp___2 = signal_pending(tmp___1);
#line 1305
      if (tmp___2 == 0) {
#line 1306
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1309
      return (0);
    } else {

    }
  } else {

  }
#line 1313
  data_size = data_size - dgs;
#line 1315
  _b = data_size == 0;
#line 1315
  if (_b != 0) {
#line 1315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1315);
  } else {

  }
#line 1315
  if (_b != 0) {
#line 1315
    return (0);
  } else {

  }
#line 1316
  _b___0 = (data_size & 511) != 0;
#line 1316
  if (_b___0 != 0) {
#line 1316
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1316);
  } else {

  }
#line 1316
  if (_b___0 != 0) {
#line 1316
    return (0);
  } else {

  }
#line 1317
  _b___1 = (unsigned int )data_size > 131072U;
#line 1317
  if (_b___1 != 0) {
#line 1317
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1317);
  } else {

  }
#line 1317
  if (_b___1 != 0) {
#line 1317
    return (0);
  } else {

  }
#line 1321
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1326
    return (0);
  } else {

  }
#line 1332
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1333
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1334
    return (0);
  } else {

  }
#line 1336
  ds = data_size;
#line 1337
  page = e->pages;
#line 1338
  goto ldv_48704;
  ldv_48703: 
#line 1339
  __min1 = ds;
#line 1339
  __min2 = 4096;
#line 1339
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1340
  tmp___3 = kmap(page);
#line 1340
  data = (unsigned long *)tmp___3;
#line 1341
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1342
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1342
  if (tmp___4 != 0) {
#line 1343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1344
    *data = ~ *data;
  } else {

  }
#line 1346
  kunmap(page);
#line 1347
  if ((unsigned int )rr != len) {
#line 1348
    drbd_free_some_ee(mdev, e, 0);
#line 1349
    tmp___5 = get_current();
#line 1349
    tmp___6 = signal_pending(tmp___5);
#line 1349
    if (tmp___6 == 0) {
#line 1350
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1352
    return (0);
  } else {

  }
#line 1354
  ds = ds - rr;
#line 1338
  page = page_chain_next(page);
  ldv_48704: ;
#line 1338
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1338
    tmp___7 = page_chain_next(page);
#line 1338
    __builtin_prefetch((void const   *)tmp___7);
#line 1338
    if (1 != 0) {
#line 1339
      goto ldv_48703;
    } else {
#line 1341
      goto ldv_48705;
    }
  } else {

  }
  ldv_48705: ;
#line 1357
  if (dgs != 0) {
#line 1358
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1359
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1359
    if (tmp___8 != 0) {
#line 1360
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1362
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1364
      drbd_free_some_ee(mdev, e, 0);
#line 1365
      return (0);
    } else {

    }
  } else {

  }
#line 1368
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1369
  return (e);
}
}
#line 1375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1378
  rv = 1;
#line 1381
  if (data_size == 0) {
#line 1382
    return (1);
  } else {

  }
#line 1384
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1386
  data = kmap(page);
#line 1387
  goto ldv_48725;
  ldv_48724: 
#line 1388
  __min1 = data_size;
#line 1388
  __min2 = 4096;
#line 1388
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1389
  __min1___1 = data_size;
#line 1389
  __min2___1 = 4096;
#line 1389
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1390
    rv = 0;
#line 1391
    tmp = get_current();
#line 1391
    tmp___0 = signal_pending(tmp);
#line 1391
    if (tmp___0 == 0) {
#line 1394
      __min1___0 = data_size;
#line 1394
      __min2___0 = 4096;
#line 1394
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1395
    goto ldv_48723;
  } else {

  }
#line 1397
  data_size = data_size - rr;
  ldv_48725: ;
#line 1387
  if (data_size != 0) {
#line 1388
    goto ldv_48724;
  } else {

  }
  ldv_48723: 
#line 1399
  kunmap(page);
#line 1400
  drbd_pp_free(mdev, page, 0);
#line 1401
  return (rv);
}
}
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1410
  dig_in = mdev->int_dig_in;
#line 1411
  dig_vv = mdev->int_dig_vv;
#line 1413
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1413
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1413
    dgs = (int )tmp;
  } else {
#line 1413
    dgs = 0;
  }
#line 1416
  if (dgs != 0) {
#line 1417
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1418
    if (rr != dgs) {
#line 1419
      tmp___0 = get_current();
#line 1419
      tmp___1 = signal_pending(tmp___0);
#line 1419
      if (tmp___1 == 0) {
#line 1420
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1423
      return (0);
    } else {

    }
  } else {

  }
#line 1427
  data_size = data_size - dgs;
#line 1431
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1433
  bio = req->master_bio;
#line 1434
  if (bio->bi_sector != sector) {
#line 1434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1434);
  } else {

  }
#line 1436
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1436
  i = (int )bio->bi_idx;
#line 1436
  goto ldv_48744;
  ldv_48743: 
#line 1437
  __min1 = data_size;
#line 1437
  __min2 = (int )bvec->bv_len;
#line 1437
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1438
  tmp___2 = kmap(bvec->bv_page);
#line 1438
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1441
  kunmap(bvec->bv_page);
#line 1442
  if (rr != expect) {
#line 1443
    tmp___3 = get_current();
#line 1443
    tmp___4 = signal_pending(tmp___3);
#line 1443
    if (tmp___4 == 0) {
#line 1444
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1447
    return (0);
  } else {

  }
#line 1449
  data_size = data_size - rr;
#line 1436
  bvec = bvec + 1;
#line 1436
  i = i + 1;
  ldv_48744: ;
#line 1436
  if ((int )bio->bi_vcnt > i) {
#line 1437
    goto ldv_48743;
  } else {

  }

#line 1452
  if (dgs != 0) {
#line 1453
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1454
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1454
    if (tmp___5 != 0) {
#line 1455
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1456
      return (0);
    } else {

    }
  } else {

  }
#line 1460
  if (data_size != 0) {
#line 1460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1460);
  } else {

  }
#line 1461
  return (1);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1468
  e = (struct drbd_epoch_entry *)w;
#line 1469
  sector = e->sector;
#line 1472
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1472
  if (tmp == 0) {
#line 1472
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1472);
  } else {

  }
#line 1474
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1474
  if (tmp___0 != 0L) {
#line 1475
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1475U);
#line 1476
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1479
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1481
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1483
  atomic_dec(& mdev->unacked_cnt);
#line 1483
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1483
  if (tmp___2 < 0) {
#line 1483
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1483
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1483, tmp___1);
  } else {

  }
#line 1485
  return (ok);
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1492
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1493
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1494
    goto fail;
  } else {

  }
#line 1496
  atomic_dec(& mdev->rs_pending_cnt);
#line 1496
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1496
  if (tmp___0 < 0) {
#line 1496
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1496
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1496, tmp);
  } else {

  }
#line 1498
  inc_unacked(mdev);
#line 1502
  e->w.cb = & e_end_resync_block;
#line 1504
  spin_lock_irq(& mdev->req_lock);
#line 1505
  list_add(& e->w.list, & mdev->sync_ee);
#line 1506
  spin_unlock_irq(& mdev->req_lock);
#line 1508
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1509
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1509
  if (tmp___1 == 0) {
#line 1510
    return (1);
  } else {

  }
#line 1513
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1514
  spin_lock_irq(& mdev->req_lock);
#line 1515
  list_del(& e->w.list);
#line 1516
  spin_unlock_irq(& mdev->req_lock);
#line 1518
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1520
  put_ldev(mdev);
#line 1521
  return (0);
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1529
  p = & mdev->data.rbuf.data;
#line 1531
  tmp = __fswab64(p->sector);
#line 1531
  sector = (sector_t )tmp;
#line 1533
  spin_lock_irq(& mdev->req_lock);
#line 1534
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1535
  spin_unlock_irq(& mdev->req_lock);
#line 1536
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1536
  if (tmp___0 != 0L) {
#line 1537
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1538
    return (0);
  } else {

  }
#line 1544
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1546
  if (ok != 0) {
#line 1547
    req_mod(req, data_received);
  } else {

  }
#line 1552
  return (ok);
}
}
#line 1555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1559
  p = & mdev->data.rbuf.data;
#line 1561
  tmp = __fswab64(p->sector);
#line 1561
  sector = (sector_t )tmp;
#line 1562
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1562
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1562);
  } else {

  }
#line 1564
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1564
  if (tmp___1 != 0) {
#line 1568
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1570
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1570
    if (tmp___0 != 0) {
#line 1571
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1573
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1575
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1578
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1580
  return (ok);
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1588
  e = (struct drbd_epoch_entry *)w;
#line 1589
  sector = e->sector;
#line 1590
  ok = 1;
#line 1592
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1593
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1593
    if (tmp___0 != 0L) {
#line 1594
      pcmd = ((int )mdev->state.ldv_37644.conn > 15 && (int )mdev->state.ldv_37644.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1598
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1598
      ok = tmp & ok;
#line 1599
      if (pcmd == 23) {
#line 1600
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1600U);
      } else {

      }
    } else {
#line 1602
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1606
    atomic_dec(& mdev->unacked_cnt);
#line 1606
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1606
    if (tmp___2 < 0) {
#line 1606
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1606
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1606, tmp___1);
    } else {

    }
  } else {

  }
#line 1610
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1611
    spin_lock_irq(& mdev->req_lock);
#line 1612
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1612
    if (tmp___3 != 0) {
#line 1612
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1612);
    } else {

    }
#line 1613
    hlist_del_init(& e->collision);
#line 1614
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1616
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1616
    if (tmp___4 == 0) {
#line 1616
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1616);
    } else {

    }
  }
#line 1619
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1621
  return (ok);
}
}
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1626
  e = (struct drbd_epoch_entry *)w;
#line 1627
  ok = 1;
#line 1629
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1629
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1629);
  } else {

  }
#line 1630
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1632
  spin_lock_irq(& mdev->req_lock);
#line 1633
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1633
  if (tmp != 0) {
#line 1633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1633);
  } else {

  }
#line 1634
  hlist_del_init(& e->collision);
#line 1635
  spin_unlock_irq(& mdev->req_lock);
#line 1637
  atomic_dec(& mdev->unacked_cnt);
#line 1637
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1637
  if (tmp___1 < 0) {
#line 1637
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1637
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1637, tmp___0);
  } else {

  }
#line 1639
  return (ok);
}
}
#line 1663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1665
  tmp = get_current();
#line 1665
  wait.flags = 0U;
#line 1665
  wait.private = (void *)tmp;
#line 1665
  wait.func = & autoremove_wake_function;
#line 1665
  wait.task_list.next = & wait.task_list;
#line 1665
  wait.task_list.prev = & wait.task_list;
#line 1668
  ret = 0;
#line 1669
  spin_lock(& mdev->peer_seq_lock);
  ldv_48820: 
#line 1671
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1672
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1672
  if (tmp___0 <= 0) {
#line 1673
    goto ldv_48819;
  } else {

  }
#line 1674
  tmp___1 = get_current();
#line 1674
  tmp___2 = signal_pending(tmp___1);
#line 1674
  if (tmp___2 != 0) {
#line 1675
    ret = -512;
#line 1676
    goto ldv_48819;
  } else {

  }
#line 1678
  p_seq = mdev->peer_seq;
#line 1679
  spin_unlock(& mdev->peer_seq_lock);
#line 1680
  timeout = schedule_timeout(7500L);
#line 1681
  spin_lock(& mdev->peer_seq_lock);
#line 1682
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1683
    ret = -110;
#line 1684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1685
    goto ldv_48819;
  } else {

  }
#line 1687
  goto ldv_48820;
  ldv_48819: 
#line 1688
  finish_wait(& mdev->seq_wait, & wait);
#line 1689
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1690
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1691
  spin_unlock(& mdev->peer_seq_lock);
#line 1692
  return (ret);
}
}
#line 1698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1700
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 4096 : 0)) | ((dpf & 32U) != 0U ? 8388608 : 0)) | ((int )dpf & 64)));
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1711
  p = & mdev->data.rbuf.data;
#line 1712
  rw = 1;
#line 1715
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1715
  if (tmp___1 == 0) {
#line 1716
    spin_lock(& mdev->peer_seq_lock);
#line 1717
    tmp = __fswab32(p->seq_num);
#line 1717
    if (mdev->peer_seq + 1U == tmp) {
#line 1718
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1719
    spin_unlock(& mdev->peer_seq_lock);
#line 1721
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1722
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1723
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1723
    return (tmp___0);
  } else {

  }
#line 1731
  tmp___2 = __fswab64(p->sector);
#line 1731
  sector = (sector_t )tmp___2;
#line 1732
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1733
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1734
    put_ldev(mdev);
#line 1735
    return (0);
  } else {

  }
#line 1738
  e->w.cb = & e_end_block;
#line 1740
  tmp___3 = __fswab32(p->dp_flags);
#line 1740
  dp_flags = tmp___3;
#line 1741
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1741
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1743
  if ((dp_flags & 4U) != 0U) {
#line 1744
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1746
  spin_lock(& mdev->epoch_lock);
#line 1747
  e->epoch = mdev->current_epoch;
#line 1748
  atomic_inc(& (e->epoch)->epoch_size);
#line 1749
  atomic_inc(& (e->epoch)->active);
#line 1750
  spin_unlock(& mdev->epoch_lock);
#line 1753
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1754
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1758
    size = (int const   )e->size;
#line 1759
    tmp___5 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1759
    discard = tmp___5;
#line 1760
    tmp___6 = get_current();
#line 1760
    wait.flags = 0U;
#line 1760
    wait.private = (void *)tmp___6;
#line 1760
    wait.func = & autoremove_wake_function;
#line 1760
    wait.task_list.next = & wait.task_list;
#line 1760
    wait.task_list.prev = & wait.task_list;
#line 1766
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1766
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1766);
    } else {

    }
#line 1767
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1767
    if (tmp___7 != 0L) {
#line 1767
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1767), "i" (12UL));
      ldv_48842: ;
#line 1767
      goto ldv_48842;
    } else {

    }
#line 1768
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1768
    if (tmp___8 != 0L) {
#line 1768
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1768), "i" (12UL));
      ldv_48843: ;
#line 1768
      goto ldv_48843;
    } else {

    }
#line 1804
    tmp___9 = __fswab32(p->seq_num);
#line 1804
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1804
    if (tmp___10 != 0) {
#line 1805
      goto out_interrupted;
    } else {

    }
#line 1807
    spin_lock_irq(& mdev->req_lock);
#line 1809
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1809
    hlist_add_head(& e->collision, tmp___11);
#line 1812
    slot = tl_hash_slot(mdev, sector);
#line 1813
    first = 1;
    ldv_48855: 
#line 1815
    have_unacked = 0;
#line 1816
    have_conflict = 0;
#line 1817
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1819
    n = slot->first;
#line 1819
    goto ldv_48852;
    ldv_48851: 
#line 1820
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1820
    if (tmp___14 != 0) {
#line 1823
      if (first != 0) {
#line 1824
        tmp___12 = get_current();
#line 1824
        tmp___13 = get_current();
#line 1824
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1829
      if ((i->rq_state & 8UL) != 0UL) {
#line 1830
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1831
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1819
    n = n->next;
    ldv_48852: ;
#line 1819
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1819
      __builtin_prefetch((void const   *)n->next);
#line 1819
      if (1 != 0) {
#line 1819
        __mptr = (struct hlist_node  const  *)n;
#line 1819
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1819
        if (1 != 0) {
#line 1820
          goto ldv_48851;
        } else {
#line 1822
          goto ldv_48853;
        }
      } else {
#line 1822
        goto ldv_48853;
      }
    } else {

    }
    ldv_48853: ;
#line 1835
    if (have_conflict == 0) {
#line 1836
      goto ldv_48854;
    } else {

    }
#line 1839
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1840
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1842
      inc_unacked(mdev);
#line 1843
      e->w.cb = & e_send_discard_ack;
#line 1844
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1846
      spin_unlock_irq(& mdev->req_lock);
#line 1851
      put_ldev(mdev);
#line 1852
      wake_asender(mdev);
#line 1853
      finish_wait(& mdev->misc_wait, & wait);
#line 1854
      return (1);
    } else {

    }
#line 1857
    tmp___15 = get_current();
#line 1857
    tmp___16 = signal_pending(tmp___15);
#line 1857
    if (tmp___16 != 0) {
#line 1858
      hlist_del_init(& e->collision);
#line 1860
      spin_unlock_irq(& mdev->req_lock);
#line 1862
      finish_wait(& mdev->misc_wait, & wait);
#line 1863
      goto out_interrupted;
    } else {

    }
#line 1866
    spin_unlock_irq(& mdev->req_lock);
#line 1867
    if (first != 0) {
#line 1868
      first = 0;
#line 1869
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1871
    if (discard != 0) {
#line 1874
      if (have_unacked != 0) {
#line 1874
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1874);
      } else {

      }
    } else {

    }
#line 1876
    schedule();
#line 1877
    spin_lock_irq(& mdev->req_lock);
#line 1878
    goto ldv_48855;
    ldv_48854: 
#line 1879
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1882
  list_add(& e->w.list, & mdev->active_ee);
#line 1883
  spin_unlock_irq(& mdev->req_lock);
#line 1885
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1887
  inc_unacked(mdev);
#line 1890
  goto ldv_48857;
  case 2: 
#line 1894
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1895
  goto ldv_48857;
  case 1: ;
#line 1898
  goto ldv_48857;
  }
  ldv_48857: ;
#line 1901
  if ((int )mdev->state.ldv_37644.pdsk <= 3) {
#line 1903
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1903U);
#line 1904
    e->flags = e->flags | 1UL;
#line 1905
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1906
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1909
  tmp___17 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1909
  if (tmp___17 == 0) {
#line 1910
    return (1);
  } else {

  }
#line 1913
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1914
  spin_lock_irq(& mdev->req_lock);
#line 1915
  list_del(& e->w.list);
#line 1916
  hlist_del_init(& e->collision);
#line 1917
  spin_unlock_irq(& mdev->req_lock);
#line 1918
  if ((int )e->flags & 1) {
#line 1919
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1922
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1923
  put_ldev(mdev);
#line 1924
  drbd_free_some_ee(mdev, e, 0);
#line 1925
  return (0);
}
}
#line 1939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1941
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1945
  throttle = 0;
#line 1948
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1949
    return (0);
  } else {

  }
#line 1951
  spin_lock_irq(& mdev->al_lock);
#line 1952
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1953
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1954
    __mptr = (struct lc_element  const  *)tmp;
#line 1954
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1955
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1955
    if (tmp___0 != 0) {
#line 1956
      spin_unlock_irq(& mdev->al_lock);
#line 1957
      return (0);
    } else {

    }
  } else {

  }
#line 1961
  spin_unlock_irq(& mdev->al_lock);
#line 1963
  res = 0UL;
#line 1963
  _cpu = 4294967295U;
#line 1963
  goto ldv_48881;
  ldv_48880: 
#line 1963
  __vpp_verify = 0;
#line 1963
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1963
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_48881: 
#line 1963
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1963
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1964
    goto ldv_48880;
  } else {

  }
#line 1964
  res___0 = 0UL;
#line 1964
  _cpu___0 = 4294967295U;
#line 1964
  goto ldv_48891;
  ldv_48890: 
#line 1964
  __vpp_verify___0 = 0;
#line 1964
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1964
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_48891: 
#line 1964
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1964
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1965
    goto ldv_48890;
  } else {

  }
#line 1964
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1964
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 1967
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1971
    mdev->rs_last_events = curr_events;
#line 1975
    i = (mdev->rs_last_mark + 7) % 8;
#line 1977
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 1978
      rs_left = mdev->ov_left;
    } else {
#line 1980
      tmp___2 = drbd_bm_total_weight(mdev);
#line 1980
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 1982
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1983
    if (dt == 0UL) {
#line 1984
      dt = dt + 1UL;
    } else {

    }
#line 1985
    db = mdev->rs_mark_left[i] - rs_left;
#line 1986
    dbdt = db / dt << 2;
#line 1988
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1989
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1991
  return (throttle);
}
}
#line 1995 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 1998
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1998
  capacity = tmp;
#line 2000
  di = 0;
#line 2003
  p = & mdev->data.rbuf.block_req;
#line 2005
  tmp___0 = __fswab64(p->sector);
#line 2005
  sector = (sector_t )tmp___0;
#line 2006
  tmp___1 = __fswab32(p->blksize);
#line 2006
  size = (int )tmp___1;
#line 2008
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2009
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2009, (unsigned long long )sector, size);
#line 2011
    return (0);
  } else {

  }
#line 2013
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2014, (unsigned long long )sector, size);
#line 2016
    return (0);
  } else {

  }
#line 2019
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2019
  if (tmp___7 == 0) {
#line 2020
    verb = 1;
#line 2021
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2023
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2024
    goto ldv_48910;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2028
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2029
    goto ldv_48910;
    case 31U: 
#line 2031
    verb = 0;
#line 2032
    atomic_dec(& mdev->rs_pending_cnt);
#line 2032
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2032
    if (tmp___3 < 0) {
#line 2032
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2032
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2032, tmp___2);
    } else {

    }
#line 2033
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2034
    goto ldv_48910;
    default: 
#line 2036
    tmp___4 = cmdname(cmd);
#line 2036
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_48910: ;
#line 2039
    if (verb != 0) {
#line 2039
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2039
      if (tmp___5 != 0) {
#line 2040
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2044
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2044
    return (tmp___6);
  } else {

  }
#line 2050
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2051
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2052
    put_ldev(mdev);
#line 2053
    return (0);
  } else {

  }
#line 2056
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2058
  e->w.cb = & w_e_end_data_req;
#line 2059
  fault_type = 5U;
#line 2061
  goto submit;
  case 9U: 
#line 2064
  e->w.cb = & w_e_end_rsdata_req;
#line 2065
  fault_type = 3U;
#line 2067
  mdev->bm_resync_fo = sector >> 3;
#line 2068
  goto ldv_48923;
  case 31U: ;
  case 33U: 
#line 2072
  fault_type = 3U;
#line 2073
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2073
  di = (struct digest_info *)tmp___8;
#line 2074
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2075
    goto out_free_e;
  } else {

  }
#line 2077
  di->digest_size = (int )digest_size;
#line 2078
  di->digest = (void *)di + 16U;
#line 2080
  e->ldv_45843.digest = di;
#line 2081
  e->flags = e->flags | 16UL;
#line 2083
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2083
  if ((unsigned int )tmp___9 != digest_size) {
#line 2084
    goto out_free_e;
  } else {

  }
#line 2086
  if ((unsigned int )cmd == 33U) {
#line 2087
    if (mdev->agreed_pro_version <= 88) {
#line 2087
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2087);
    } else {

    }
#line 2088
    e->w.cb = & w_e_end_csum_rs_req;
#line 2090
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2091
  if ((unsigned int )cmd == 31U) {
#line 2093
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2094
    e->w.cb = & w_e_end_ov_reply;
#line 2095
    atomic_dec(& mdev->rs_pending_cnt);
#line 2095
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2095
    if (tmp___11 < 0) {
#line 2095
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2095
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2095, tmp___10);
    } else {

    }
#line 2098
    goto submit_for_resync;
  } else {

  }
#line 2100
  goto ldv_48923;
  case 30U: ;
#line 2103
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2105
    now = jiffies;
#line 2107
    mdev->ov_start_sector = sector;
#line 2108
    mdev->ov_position = sector;
#line 2109
    tmp___12 = drbd_bm_bits(mdev);
#line 2109
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2110
    mdev->rs_total = mdev->ov_left;
#line 2111
    i = 0;
#line 2111
    goto ldv_48935;
    ldv_48934: 
#line 2112
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2113
    mdev->rs_mark_time[i] = now;
#line 2111
    i = i + 1;
    ldv_48935: ;
#line 2111
    if (i <= 7) {
#line 2112
      goto ldv_48934;
    } else {

    }
#line 2115
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2118
  e->w.cb = & w_e_end_ov_req;
#line 2119
  fault_type = 3U;
#line 2120
  goto ldv_48923;
  default: 
#line 2123
  tmp___13 = cmdname(cmd);
#line 2123
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2125
  fault_type = 10U;
#line 2126
  goto out_free_e;
  }
  ldv_48923: ;
#line 2151
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2151
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2151
    if (tmp___14 != 0) {
#line 2152
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2153
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2153
  if (tmp___15 != 0) {
#line 2154
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2157
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2160
  inc_unacked(mdev);
#line 2161
  spin_lock_irq(& mdev->req_lock);
#line 2162
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2163
  spin_unlock_irq(& mdev->req_lock);
#line 2165
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2165
  if (tmp___16 == 0) {
#line 2166
    return (1);
  } else {

  }
#line 2169
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2170
  spin_lock_irq(& mdev->req_lock);
#line 2171
  list_del(& e->w.list);
#line 2172
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2176
  put_ldev(mdev);
#line 2177
  drbd_free_some_ee(mdev, e, 0);
#line 2178
  return (0);
}
}
#line 2181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2183
  rv = -100;
#line 2186
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2187
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2189
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2190
  ch_self = mdev->comm_bm_set;
#line 2192
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2196
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2197
  goto ldv_48949;
  case 0: ;
#line 2199
  goto ldv_48949;
  case 1: ;
#line 2201
  if (self == 0 && peer == 1) {
#line 2202
    rv = -1;
#line 2203
    goto ldv_48949;
  } else {

  }
#line 2205
  if (self == 1 && peer == 0) {
#line 2206
    rv = 1;
#line 2207
    goto ldv_48949;
  } else {

  }
  case 2: ;
#line 2211
  if (self == 0 && peer == 1) {
#line 2212
    rv = 1;
#line 2213
    goto ldv_48949;
  } else {

  }
#line 2215
  if (self == 1 && peer == 0) {
#line 2216
    rv = -1;
#line 2217
    goto ldv_48949;
  } else {

  }
#line 2220
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2223
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2224
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2224
    rv = tmp != 0 ? -1 : 1;
#line 2226
    goto ldv_48949;
  } else {
#line 2228
    if (ch_peer == 0UL) {
#line 2228
      rv = 1;
#line 2228
      goto ldv_48949;
    } else {

    }
#line 2229
    if (ch_self == 0UL) {
#line 2229
      rv = -1;
#line 2229
      goto ldv_48949;
    } else {

    }
  }
#line 2231
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2232
    goto ldv_48949;
  } else {

  }
  case 4: ;
#line 2234
  if (ch_self < ch_peer) {
#line 2235
    rv = -1;
  } else
#line 2236
  if (ch_self > ch_peer) {
#line 2237
    rv = 1;
  } else {
#line 2240
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2240
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2242
  goto ldv_48949;
  case 5: 
#line 2244
  rv = -1;
#line 2245
  goto ldv_48949;
  case 6: 
#line 2247
  rv = 1;
  }
  ldv_48949: ;
#line 2250
  return (rv);
}
}
#line 2253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2255
  rv = -100;
#line 2257
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2263
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2264
  goto ldv_48967;
  case 0: ;
#line 2266
  goto ldv_48967;
  case 7: 
#line 2268
  hg = drbd_asb_recover_0p(mdev);
#line 2269
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2270
    rv = hg;
  } else {

  }
#line 2271
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2272
    rv = hg;
  } else {

  }
#line 2273
  goto ldv_48967;
  case 10: 
#line 2275
  rv = drbd_asb_recover_0p(mdev);
#line 2276
  goto ldv_48967;
  case 8: ;
#line 2278
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2280
  hg = drbd_asb_recover_0p(mdev);
#line 2281
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2284
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2288
    val.i = 0U;
#line 2288
    val.ldv_37644.role = 2U;
#line 2288
    mask.i = 0U;
#line 2288
    mask.ldv_37644.role = 3U;
#line 2288
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2289
    if ((int )rv2 != 1) {
#line 2290
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2292
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2293
      rv = hg;
    }
  } else {
#line 2296
    rv = hg;
  }
  }
  ldv_48967: ;
#line 2299
  return (rv);
}
}
#line 2302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2304
  rv = -100;
#line 2306
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2314
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2315
  goto ldv_48990;
  case 10: 
#line 2317
  rv = drbd_asb_recover_0p(mdev);
#line 2318
  goto ldv_48990;
  case 0: ;
#line 2320
  goto ldv_48990;
  case 9: 
#line 2322
  hg = drbd_asb_recover_0p(mdev);
#line 2323
  if (hg == -1) {
#line 2329
    val.i = 0U;
#line 2329
    val.ldv_37644.role = 2U;
#line 2329
    mask.i = 0U;
#line 2329
    mask.ldv_37644.role = 3U;
#line 2329
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2330
    if ((int )rv2 != 1) {
#line 2331
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2333
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2334
      rv = hg;
    }
  } else {
#line 2337
    rv = hg;
  }
  }
  ldv_48990: ;
#line 2340
  return (rv);
}
}
#line 2343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2346
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2347
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2348
    return;
  } else {

  }
#line 2350
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2351
  return;
}
}
#line 2372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2377
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2378
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2380
  *rule_nr = 10;
#line 2381
  if (self == 4ULL && peer == 4ULL) {
#line 2382
    return (0);
  } else {

  }
#line 2384
  *rule_nr = 20;
#line 2385
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2387
    return (-2);
  } else {

  }
#line 2389
  *rule_nr = 30;
#line 2390
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2392
    return (2);
  } else {

  }
#line 2394
  if (self == peer) {
#line 2397
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2399
      if (mdev->agreed_pro_version <= 90) {
#line 2400
        return (-1091);
      } else {

      }
#line 2402
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2404
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2405
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2407
        if ((int )mdev->state.ldv_37644.disk > 2) {
#line 2407
          tmp = drbd_bm_total_weight(mdev);
#line 2407
          tmp___0 = (u64 )tmp;
        } else {
#line 2407
          tmp___0 = 0ULL;
        }
#line 2407
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2409
        *rule_nr = 34;
      } else {
#line 2411
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2412
        *rule_nr = 36;
      }
#line 2415
      return (1);
    } else {

    }
#line 2418
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2420
      if (mdev->agreed_pro_version <= 90) {
#line 2421
        return (-1091);
      } else {

      }
#line 2423
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2425
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2427
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2428
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2429
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2431
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2432
        *rule_nr = 35;
      } else {
#line 2434
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2435
        *rule_nr = 37;
      }
#line 2438
      return (-1);
    } else {

    }
#line 2442
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2442
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2446
    *rule_nr = 40;
#line 2448
    switch (rct) {
    case 0: ;
#line 2449
    return (0);
    case 1: ;
#line 2450
    return (1);
    case 2: ;
#line 2451
    return (-1);
    case 3: 
#line 2453
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2454
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2458
  *rule_nr = 50;
#line 2459
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2460
  if (self == peer) {
#line 2461
    return (-1);
  } else {

  }
#line 2463
  *rule_nr = 51;
#line 2464
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2465
  if (self == peer) {
#line 2466
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2473
      if (mdev->agreed_pro_version <= 90) {
#line 2474
        return (-1091);
      } else {

      }
#line 2476
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2477
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2479
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Did not got last syncUUID packet, corrected:\n");
#line 2480
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2482
      return (-1);
    } else {

    }
  } else {

  }
#line 2486
  *rule_nr = 60;
#line 2487
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2488
  i = 2;
#line 2488
  goto ldv_49021;
  ldv_49020: 
#line 2489
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2490
  if (self == peer) {
#line 2491
    return (-2);
  } else {

  }
#line 2488
  i = i + 1;
  ldv_49021: ;
#line 2488
  if (i <= 3) {
#line 2489
    goto ldv_49020;
  } else {

  }
#line 2494
  *rule_nr = 70;
#line 2495
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2496
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2497
  if (self == peer) {
#line 2498
    return (1);
  } else {

  }
#line 2500
  *rule_nr = 71;
#line 2501
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2502
  if (self == peer) {
#line 2503
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2510
      if (mdev->agreed_pro_version <= 90) {
#line 2511
        return (-1091);
      } else {

      }
#line 2513
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2514
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2516
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2517
      if ((int )mdev->state.ldv_37644.disk > 2) {
#line 2517
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2517
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2517
        tmp___3 = 0ULL;
      }
#line 2517
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2520
      return (1);
    } else {

    }
  } else {

  }
#line 2525
  *rule_nr = 80;
#line 2526
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2527
  i = 2;
#line 2527
  goto ldv_49024;
  ldv_49023: 
#line 2528
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2529
  if (self == peer) {
#line 2530
    return (2);
  } else {

  }
#line 2527
  i = i + 1;
  ldv_49024: ;
#line 2527
  if (i <= 3) {
#line 2528
    goto ldv_49023;
  } else {

  }
#line 2533
  *rule_nr = 90;
#line 2534
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2535
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2536
  if (self == peer && self != 0ULL) {
#line 2537
    return (100);
  } else {

  }
#line 2539
  *rule_nr = 100;
#line 2540
  i = 2;
#line 2540
  goto ldv_49030;
  ldv_49029: 
#line 2541
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2542
  j = 2;
#line 2542
  goto ldv_49027;
  ldv_49026: 
#line 2543
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2544
  if (self == peer) {
#line 2545
    return (-100);
  } else {

  }
#line 2542
  j = j + 1;
  ldv_49027: ;
#line 2542
  if (j <= 3) {
#line 2543
    goto ldv_49026;
  } else {

  }
#line 2540
  i = i + 1;
  ldv_49030: ;
#line 2540
  if (i <= 3) {
#line 2541
    goto ldv_49029;
  } else {

  }

#line 2549
  return (-1000);
}
}
#line 2555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2559
  rv = C_MASK;
#line 2562
  mydisk = (enum drbd_disk_state )mdev->state.ldv_37644.disk;
#line 2563
  if ((unsigned int )mydisk == 3U) {
#line 2564
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_37644.disk;
  } else {

  }
#line 2566
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2567
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2568
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2571
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2573
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2575
  if (hg == -1000) {
#line 2576
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2577
    return (C_MASK);
  } else {

  }
#line 2579
  if (hg < -1000) {
#line 2580
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2581
    return (C_MASK);
  } else {

  }
#line 2584
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2586
    if (hg == -100) {
#line 2586
      tmp = 1;
    } else {
#line 2586
      __x___0 = hg;
#line 2586
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2586
      if (ret == 2L) {
#line 2586
        tmp = 1;
      } else {
#line 2586
        tmp = 0;
      }
    }
#line 2586
    f = tmp;
#line 2587
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2588
    if (f != 0) {
#line 2589
      hg = hg * 2;
    } else {

    }
#line 2590
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2594
  __x___2 = hg;
#line 2594
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2594
  if (ret___0 == 100L) {
#line 2595
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2597
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2598
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2600
    forced = hg == -100;
#line 2602
    switch (pcount) {
    case 0: 
#line 2604
    hg = drbd_asb_recover_0p(mdev);
#line 2605
    goto ldv_49053;
    case 1: 
#line 2607
    hg = drbd_asb_recover_1p(mdev);
#line 2608
    goto ldv_49053;
    case 2: 
#line 2610
    hg = drbd_asb_recover_2p(mdev);
#line 2611
    goto ldv_49053;
    }
    ldv_49053: 
#line 2613
    __x___4 = hg;
#line 2613
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2613
    if (ret___1 <= 99L) {
#line 2614
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2617
      if (forced != 0) {
#line 2618
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2620
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2625
  if (hg == -100) {
#line 2626
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2627
      hg = -1;
    } else {

    }
#line 2628
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2629
      hg = 1;
    } else {

    }
#line 2631
    __x___6 = hg;
#line 2631
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2631
    if (ret___2 <= 99L) {
#line 2632
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2637
  if (hg == -100) {
#line 2642
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2643
    drbd_khelper(mdev, (char *)"split-brain");
#line 2644
    return (C_MASK);
  } else {

  }
#line 2647
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2648
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2649
    return (C_MASK);
  } else {

  }
#line 2652
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_37644.disk > 6) {
#line 2654
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2656
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2659
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2660
    return (C_MASK);
    case 10: 
#line 2662
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2667
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2667
    goto _L;
  } else {
#line 2667
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2667
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2668
      if (hg == 0) {
#line 2669
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2671
        __x___8 = hg;
#line 2671
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2671
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2671
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2674
      return (C_MASK);
    } else {

    }
  }
#line 2677
  __x___10 = hg;
#line 2677
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2677
  if (ret___4 > 1L) {
#line 2678
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2679
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_DONT_CLEAR);
#line 2679
    if (tmp___2 != 0) {
#line 2681
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2684
  if (hg > 0) {
#line 2685
    rv = C_WF_BITMAP_S;
  } else
#line 2686
  if (hg < 0) {
#line 2687
    rv = C_WF_BITMAP_T;
  } else {
#line 2689
    rv = C_CONNECTED;
#line 2690
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2690
    if (tmp___4 != 0UL) {
#line 2691
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2691
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2696
  return (rv);
}
}
#line 2700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2703
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2705
    return (0);
  } else {

  }
#line 2708
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2710
    return (1);
  } else {

  }
#line 2713
  if ((unsigned int )peer == (unsigned int )self) {
#line 2714
    return (0);
  } else {

  }
#line 2717
  return (1);
}
}
#line 2720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2722
  p = & mdev->data.rbuf.protocol;
#line 2725
  p_integrity_alg[0] = '\000';
#line 2725
  tmp = 1U;
#line 2725
  while (1) {
#line 2725
    if (tmp >= 64U) {
#line 2725
      break;
    } else {

    }
#line 2725
    p_integrity_alg[tmp] = (char)0;
#line 2725
    tmp = tmp + 1U;
  }
#line 2727
  tmp___0 = __fswab32(p->protocol);
#line 2727
  p_proto = (int )tmp___0;
#line 2728
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2728
  p_after_sb_0p = (int )tmp___1;
#line 2729
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2729
  p_after_sb_1p = (int )tmp___2;
#line 2730
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2730
  p_after_sb_2p = (int )tmp___3;
#line 2731
  tmp___4 = __fswab32(p->two_primaries);
#line 2731
  p_two_primaries = (int )tmp___4;
#line 2732
  tmp___5 = __fswab32(p->conn_flags);
#line 2732
  cf = (int )tmp___5;
#line 2733
  p_want_lose = cf & 1;
#line 2735
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2737
  if ((cf & 2) != 0) {
#line 2738
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2740
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2741
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2742
    goto disconnect;
  } else {

  }
#line 2745
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2745
  if (tmp___6 != 0) {
#line 2746
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2747
    goto disconnect;
  } else {

  }
#line 2750
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2750
  if (tmp___7 != 0) {
#line 2751
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2752
    goto disconnect;
  } else {

  }
#line 2755
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2755
  if (tmp___8 != 0) {
#line 2756
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2757
    goto disconnect;
  } else {

  }
#line 2760
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2762
    goto disconnect;
  } else {

  }
#line 2765
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2767
    goto disconnect;
  } else {

  }
#line 2770
  if (mdev->agreed_pro_version > 86) {
#line 2771
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2773
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2773
    if ((unsigned int )tmp___9 != data_size) {
#line 2774
      return (0);
    } else {

    }
#line 2776
    p_integrity_alg[63] = 0;
#line 2777
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2777
    if (tmp___10 != 0) {
#line 2778
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2779
      goto disconnect;
    } else {

    }
#line 2781
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2785
  return (1);
  disconnect: 
#line 2788
  val.i = 0U;
#line 2788
  val.ldv_37644.conn = 1U;
#line 2788
  mask.i = 0U;
#line 2788
  mask.ldv_37644.conn = 31U;
#line 2788
  drbd_force_state(mdev, mask, val);
#line 2789
  return (0);
}
}
#line 2797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2802
  if ((int )((signed char )*alg) == 0) {
#line 2803
    return (0);
  } else {

  }
#line 2805
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2806
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2806
  if (tmp___0 != 0L) {
#line 2807
    tmp = PTR_ERR((void const   *)tfm);
#line 2807
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2809
    return (tfm);
  } else {

  }
#line 2811
  tmp___2 = crypto_hash_tfm(tfm);
#line 2811
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2811
  if (tmp___3 == 0) {
#line 2812
    crypto_free_hash(tfm);
#line 2813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2814
    tmp___1 = ERR_PTR(-22L);
#line 2814
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2816
  return (tfm);
}
}
#line 2819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2821
  ok = 1;
#line 2822
  p = & mdev->data.rbuf.rs_param_95;
#line 2824
  verify_tfm = 0;
#line 2825
  csums_tfm = 0;
#line 2826
  apv = mdev->agreed_pro_version;
#line 2827
  rs_plan_s = 0;
#line 2828
  fifo_size = 0;
#line 2830
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2836
  if (packet_size > exp_max_sz) {
#line 2837
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2839
    return (0);
  } else {

  }
#line 2842
  if (apv <= 88) {
#line 2843
    header_size = 4U;
#line 2844
    data_size = packet_size - header_size;
  } else
#line 2845
  if (apv <= 94) {
#line 2846
    header_size = 132U;
#line 2847
    data_size = packet_size - header_size;
#line 2848
    if (data_size != 0U) {
#line 2848
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2848);
    } else {

    }
  } else {
#line 2850
    header_size = 148U;
#line 2851
    data_size = packet_size - header_size;
#line 2852
    if (data_size != 0U) {
#line 2852
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2852);
    } else {

    }
  }
#line 2856
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2858
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2858
  if ((unsigned int )tmp != header_size) {
#line 2859
    return (0);
  } else {

  }
#line 2861
  tmp___0 = __fswab32(p->rate);
#line 2861
  mdev->sync_conf.rate = (int )tmp___0;
#line 2863
  if (apv > 87) {
#line 2864
    if (apv == 88) {
#line 2865
      if (data_size > 64U) {
#line 2866
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2869
        return (0);
      } else {

      }
#line 2872
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2872
      if ((unsigned int )tmp___1 != data_size) {
#line 2873
        return (0);
      } else {

      }
#line 2877
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2877
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2877);
      } else {

      }
#line 2878
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2883
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2883
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2883);
      } else {

      }
#line 2884
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2884
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2884);
      } else {

      }
#line 2885
      p->verify_alg[63] = 0;
#line 2886
      p->csums_alg[63] = 0;
    }
#line 2889
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2889
    if (tmp___3 != 0) {
#line 2890
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2891
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2893
        goto disconnect;
      } else {

      }
#line 2895
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2897
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2897
      if (tmp___2 != 0L) {
#line 2898
        verify_tfm = 0;
#line 2899
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2903
    if (apv > 88) {
#line 2903
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2903
      if (tmp___5 != 0) {
#line 2904
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2905
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2907
          goto disconnect;
        } else {

        }
#line 2909
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2911
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2911
        if (tmp___4 != 0L) {
#line 2912
          csums_tfm = 0;
#line 2913
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2917
    if (apv > 94) {
#line 2918
      tmp___6 = __fswab32(p->rate);
#line 2918
      mdev->sync_conf.rate = (int )tmp___6;
#line 2919
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2919
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2920
      tmp___8 = __fswab32(p->c_delay_target);
#line 2920
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2921
      tmp___9 = __fswab32(p->c_fill_target);
#line 2921
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2922
      tmp___10 = __fswab32(p->c_max_rate);
#line 2922
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2924
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2925
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2926
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2926
        rs_plan_s = (int *)tmp___11;
#line 2927
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2928
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2929
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2934
    spin_lock(& mdev->peer_seq_lock);
#line 2936
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2937
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2938
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2938
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2939
      crypto_free_hash(mdev->verify_tfm);
#line 2940
      mdev->verify_tfm = verify_tfm;
#line 2941
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2943
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2944
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2945
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2945
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2946
      crypto_free_hash(mdev->csums_tfm);
#line 2947
      mdev->csums_tfm = csums_tfm;
#line 2948
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2950
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2951
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2952
      mdev->rs_plan_s.values = rs_plan_s;
#line 2953
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2954
      mdev->rs_planed = 0;
    } else {

    }
#line 2956
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2959
  return (ok);
  disconnect: 
#line 2963
  crypto_free_hash(csums_tfm);
#line 2965
  crypto_free_hash(verify_tfm);
#line 2966
  val.i = 0U;
#line 2966
  val.ldv_37644.conn = 1U;
#line 2966
  mask.i = 0U;
#line 2966
  mask.ldv_37644.conn = 31U;
#line 2966
  drbd_force_state(mdev, mask, val);
#line 2967
  return (0);
}
}
#line 2971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2975
  if (a == 0UL || b == 0UL) {
#line 2976
    return;
  } else {

  }
#line 2977
  d = a > b ? a - b : b - a;
#line 2978
  if (a >> 3 < d || b >> 3 < d) {
#line 2979
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2981
  return;
}
}
#line 2983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 2985
  p = & mdev->data.rbuf.sizes;
#line 2986
  dd = 0;
#line 2988
  ldsc = 0;
#line 2991
  tmp = __fswab64(p->d_size);
#line 2991
  p_size = (sector_t )tmp;
#line 2992
  tmp___0 = __fswab64(p->u_size);
#line 2992
  p_usize = (sector_t )tmp___0;
#line 2994
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2995
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2996
    val.i = 0U;
#line 2996
    val.ldv_37644.conn = 1U;
#line 2996
    mask.i = 0U;
#line 2996
    mask.ldv_37644.conn = 31U;
#line 2996
    drbd_force_state(mdev, mask, val);
#line 2997
    return (0);
  } else {

  }
#line 3002
  mdev->p_size = p_size;
#line 3004
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3004
  if (tmp___6 != 0) {
#line 3005
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3005
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3007
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3012
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3013
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3013
      __y = p_usize;
#line 3013
      if (__x != 0UL) {
#line 3013
        if (__y != 0UL) {
#line 3013
          _min1 = __x;
#line 3013
          _min2 = __y;
#line 3013
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3013
          tmp___2 = __x;
        }
#line 3013
        tmp___3 = tmp___2;
      } else {
#line 3013
        tmp___3 = __y;
      }
#line 3013
      p_usize = tmp___3;
    } else {

    }
#line 3016
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3018
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3019
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3020
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3026
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3026
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3026
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_37644.disk > 4) && (int )mdev->state.ldv_37644.conn <= 9) {
#line 3030
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3031
      val___0.i = 0U;
#line 3031
      val___0.ldv_37644.conn = 1U;
#line 3031
      mask___0.i = 0U;
#line 3031
      mask___0.ldv_37644.conn = 31U;
#line 3031
      drbd_force_state(mdev, mask___0, val___0);
#line 3032
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3033
      put_ldev(mdev);
#line 3034
      return (0);
    } else {

    }
#line 3036
    put_ldev(mdev);
  } else {

  }
#line 3039
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3039
  ddsf = (enum dds_flags )tmp___7;
#line 3040
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3040
  if (tmp___8 != 0) {
#line 3041
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3042
    put_ldev(mdev);
#line 3043
    if ((int )dd == -1) {
#line 3044
      return (0);
    } else {

    }
#line 3045
    drbd_md_sync(mdev);
  } else {
#line 3048
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3051
  tmp___9 = __fswab32(p->max_bio_size);
#line 3051
  mdev->peer_max_bio_size = (int )tmp___9;
#line 3052
  drbd_reconsider_max_bio_size(mdev);
#line 3054
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3054
  if (tmp___11 != 0) {
#line 3055
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3055
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3056
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3057
      ldsc = 1;
    } else {

    }
#line 3060
    put_ldev(mdev);
  } else {

  }
#line 3063
  if ((int )mdev->state.ldv_37644.conn > 9) {
#line 3064
    tmp___12 = __fswab64(p->c_size);
#line 3064
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3064
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3068
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3070
    tmp___14 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3070
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3072
      if ((int )mdev->state.ldv_37644.pdsk > 3 && (int )mdev->state.ldv_37644.disk > 3) {
#line 3074
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3075
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3077
          resync_after_online_grow(mdev);
        }
      } else {
#line 3079
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3083
  return (1);
}
}
#line 3086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3088
  p = & mdev->data.rbuf.uuids;
#line 3090
  updated_uuids = 0;
#line 3092
  tmp = kmalloc(48UL, 16U);
#line 3092
  p_uuid = (u64 *)tmp;
#line 3094
  i = 0;
#line 3094
  goto ldv_49168;
  ldv_49167: 
#line 3095
  tmp___0 = __fswab64(p->uuid[i]);
#line 3095
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3094
  i = i + 1;
  ldv_49168: ;
#line 3094
  if (i <= 5) {
#line 3095
    goto ldv_49167;
  } else {

  }
#line 3097
  kfree((void const   *)mdev->p_uuid);
#line 3098
  mdev->p_uuid = p_uuid;
#line 3100
  if ((((int )mdev->state.ldv_37644.conn <= 9 && (int )mdev->state.ldv_37644.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3104
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3106
    val.i = 0U;
#line 3106
    val.ldv_37644.conn = 1U;
#line 3106
    mask.i = 0U;
#line 3106
    mask.ldv_37644.conn = 31U;
#line 3106
    drbd_force_state(mdev, mask, val);
#line 3107
    return (0);
  } else {

  }
#line 3110
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3110
  if (tmp___1 != 0) {
#line 3111
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3116
    if (skip_initial_sync != 0) {
#line 3117
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3118
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3121
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3122
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3123
      __ns.i = mdev->state.i;
#line 3123
      __ns.ldv_37644.disk = 8U;
#line 3123
      __ns.ldv_37644.pdsk = 8U;
#line 3123
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3125
      drbd_md_sync(mdev);
#line 3126
      updated_uuids = 1;
    } else {

    }
#line 3128
    put_ldev(mdev);
  } else
#line 3129
  if ((int )mdev->state.ldv_37644.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3133
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3140
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3140
  if (tmp___2 == 0) {
#line 3140
    goto ldv_49177;
  } else {

  }
#line 3140
  tmp___3 = get_current();
#line 3140
  __wait.flags = 0U;
#line 3140
  __wait.private = (void *)tmp___3;
#line 3140
  __wait.func = & autoremove_wake_function;
#line 3140
  __wait.task_list.next = & __wait.task_list;
#line 3140
  __wait.task_list.prev = & __wait.task_list;
  ldv_49180: 
#line 3140
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3140
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3140
  if (tmp___4 == 0) {
#line 3140
    goto ldv_49179;
  } else {

  }
#line 3140
  schedule();
#line 3140
  goto ldv_49180;
  ldv_49179: 
#line 3140
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49177: ;
#line 3141
  if ((int )mdev->state.ldv_37644.conn > 9 && (int )mdev->state.ldv_37644.disk <= 3) {
#line 3142
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3142
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3144
  if (updated_uuids != 0) {
#line 3145
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3147
  return (1);
}
}
#line 3154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3158
  c_tab[0] = 0;
#line 3158
  c_tab[1] = C_TEAR_DOWN;
#line 3158
  c_tab[2] = 0;
#line 3158
  c_tab[3] = 0;
#line 3158
  c_tab[4] = 0;
#line 3158
  c_tab[5] = 0;
#line 3158
  c_tab[6] = 0;
#line 3158
  c_tab[7] = 0;
#line 3158
  c_tab[8] = 0;
#line 3158
  c_tab[9] = 0;
#line 3158
  c_tab[10] = C_CONNECTED;
#line 3158
  c_tab[11] = C_STARTING_SYNC_T;
#line 3158
  c_tab[12] = C_STARTING_SYNC_S;
#line 3158
  c_tab[13] = 0;
#line 3158
  c_tab[14] = 0;
#line 3158
  c_tab[15] = 0;
#line 3158
  c_tab[16] = 0;
#line 3158
  c_tab[17] = 0;
#line 3158
  c_tab[18] = C_VERIFY_T;
#line 3158
  c_tab[19] = 0;
#line 3158
  c_tab[20] = 0;
#line 3158
  c_tab[21] = 0;
#line 3158
  c_tab[22] = 0;
#line 3158
  c_tab[23] = 0;
#line 3158
  c_tab[24] = 0;
#line 3158
  c_tab[25] = 0;
#line 3158
  c_tab[26] = 0;
#line 3158
  c_tab[27] = 0;
#line 3158
  c_tab[28] = 0;
#line 3158
  c_tab[29] = 0;
#line 3158
  c_tab[30] = 0;
#line 3158
  c_tab[31] = C_MASK;
#line 3168
  ms.i = ps.i;
#line 3170
  ms.ldv_37644.conn = (unsigned char )c_tab[(int )ps.ldv_37644.conn];
#line 3171
  ms.ldv_37644.peer = ps.ldv_37644.role;
#line 3172
  ms.ldv_37644.role = ps.ldv_37644.peer;
#line 3173
  ms.ldv_37644.pdsk = ps.ldv_37644.disk;
#line 3174
  ms.ldv_37644.disk = ps.ldv_37644.pdsk;
#line 3175
  ms.ldv_37644.peer_isp = (unsigned char )((int )ps.ldv_37644.aftr_isp | (int )ps.ldv_37644.user_isp);
#line 3177
  return (ms);
}
}
#line 3180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3182
  p = & mdev->data.rbuf.req_state;
#line 3186
  tmp = __fswab32(p->mask);
#line 3186
  mask.i = tmp;
#line 3187
  tmp___0 = __fswab32(p->val);
#line 3187
  val.i = tmp___0;
#line 3189
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3189
  if (tmp___1 != 0) {
#line 3189
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3189
    if (tmp___2 != 0) {
#line 3191
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3192
      return (1);
    } else {

    }
  } else {

  }
#line 3195
  mask = convert_state(mask);
#line 3196
  val = convert_state(val);
#line 3198
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3200
  drbd_send_sr_reply(mdev, rv);
#line 3201
  drbd_md_sync(mdev);
#line 3203
  return (1);
}
}
#line 3206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3208
  p = & mdev->data.rbuf.state;
#line 3214
  tmp = __fswab32(p->state);
#line 3214
  peer_state.i = tmp;
#line 3216
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_37644.disk;
#line 3217
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3218
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3219
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3219
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3222
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3224
  ns = mdev->state;
#line 3224
  os = ns;
#line 3225
  spin_unlock_irq(& mdev->req_lock);
#line 3229
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_37644.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3237
    if ((int )peer_state.ldv_37644.conn > 10 && (int )peer_state.ldv_37644.conn <= 15) {
#line 3239
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3244
    if ((int )os.ldv_37644.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3246
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3246
      if (tmp___1 <= mdev->rs_failed) {
#line 3247
        drbd_resync_finished(mdev);
      } else {

      }
#line 3248
      return (1);
    } else {

    }
  } else {

  }
#line 3257
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_37644.conn > 16) {
#line 3259
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3261
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3262
    ns.ldv_37644.conn = 10U;
  } else {

  }
#line 3264
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3265
    ns.ldv_37644.conn = 23U;
  } else {

  }
#line 3267
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_37644.disk > 2) {
#line 3267
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3267
    if (tmp___5 != 0) {
#line 3272
      cr = (int )os.ldv_37644.conn <= 9;
#line 3275
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3280
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3280
      cr = tmp___2 | cr;
#line 3283
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_37644.conn > 10 && (int )peer_state.ldv_37644.conn <= 14)) | cr;
#line 3287
      if (cr != 0) {
#line 3288
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_37644.role,
                                      real_peer_disk);
#line 3288
        ns.ldv_37644.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3290
      put_ldev(mdev);
#line 3291
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3292
        ns.ldv_37644.conn = 10U;
#line 3293
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3294
          val.i = 0U;
#line 3294
          val.ldv_37644.disk = 2U;
#line 3294
          mask.i = 0U;
#line 3294
          mask.ldv_37644.disk = 15U;
#line 3294
          drbd_force_state(mdev, mask, val);
        } else
#line 3295
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3296
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3297
          peer_state.ldv_37644.disk = 0U;
#line 3298
          real_peer_disk = D_DISKLESS;
        } else {
#line 3300
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3300
          if (tmp___4 != 0) {
#line 3301
            return (0);
          } else {

          }
#line 3302
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3302
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3302);
          } else {

          }
#line 3303
          val___0.i = 0U;
#line 3303
          val___0.ldv_37644.conn = 1U;
#line 3303
          mask___0.i = 0U;
#line 3303
          mask___0.ldv_37644.conn = 31U;
#line 3303
          drbd_force_state(mdev, mask___0, val___0);
#line 3304
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3309
  spin_lock_irq(& mdev->req_lock);
#line 3310
  if (mdev->state.i != os.i) {
#line 3311
    goto retry;
  } else {

  }
#line 3312
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3313
  ns.ldv_37644.peer = peer_state.ldv_37644.role;
#line 3314
  ns.ldv_37644.pdsk = (unsigned char )real_peer_disk;
#line 3315
  ns.ldv_37644.peer_isp = (unsigned char )((int )peer_state.ldv_37644.aftr_isp | (int )peer_state.ldv_37644.user_isp);
#line 3316
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3317
    ns.ldv_37644.disk = mdev->new_state_tmp.ldv_37644.disk;
  } else {

  }
#line 3318
  cs_flags = (enum chg_state_flags )(((int )os.ldv_37644.conn > 9 || (int )ns.ldv_37644.conn <= 9) + 2);
#line 3319
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3319
    tmp___6 = is_susp(ns);
#line 3319
    if (tmp___6 != 0) {
#line 3319
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3319
        if ((int )os.ldv_37644.conn <= 9) {
#line 3319
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3319
          if (tmp___7 != 0) {
#line 3323
            spin_unlock_irq(& mdev->req_lock);
#line 3324
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3325
            tl_clear(mdev);
#line 3326
            drbd_uuid_new_current(mdev);
#line 3327
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3328
            val___1.i = 0U;
#line 3328
            val___1.ldv_37644.conn = 6U;
#line 3328
            val___1.ldv_37644.susp = 0U;
#line 3328
            mask___1.i = 0U;
#line 3328
            mask___1.ldv_37644.conn = 31U;
#line 3328
            mask___1.ldv_37644.susp = 1U;
#line 3328
            drbd_force_state(mdev, mask___1, val___1);
#line 3329
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3331
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3331
  rv = (int )tmp___8;
#line 3332
  ns = mdev->state;
#line 3333
  spin_unlock_irq(& mdev->req_lock);
#line 3335
  if (rv <= 0) {
#line 3336
    val___2.i = 0U;
#line 3336
    val___2.ldv_37644.conn = 1U;
#line 3336
    mask___2.i = 0U;
#line 3336
    mask___2.ldv_37644.conn = 31U;
#line 3336
    drbd_force_state(mdev, mask___2, val___2);
#line 3337
    return (0);
  } else {

  }
#line 3340
  if ((int )os.ldv_37644.conn > 9) {
#line 3341
    if (((int )ns.ldv_37644.conn > 10 && (int )peer_state.ldv_37644.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3346
      drbd_send_uuids(mdev);
#line 3347
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3351
  (mdev->net_conf)->want_lose = 0U;
#line 3353
  drbd_md_sync(mdev);
#line 3355
  return (1);
}
}
#line 3358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3360
  p = & mdev->data.rbuf.rs_uuid;
#line 3362
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_37644.conn <= 9) || (int )mdev->state.ldv_37644.disk <= 2) {
#line 3362
    goto ldv_49231;
  } else {

  }
#line 3362
  tmp = get_current();
#line 3362
  __wait.flags = 0U;
#line 3362
  __wait.private = (void *)tmp;
#line 3362
  __wait.func = & autoremove_wake_function;
#line 3362
  __wait.task_list.next = & __wait.task_list;
#line 3362
  __wait.task_list.prev = & __wait.task_list;
  ldv_49234: 
#line 3362
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3362
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_37644.conn <= 9) || (int )mdev->state.ldv_37644.disk <= 2) {
#line 3362
    goto ldv_49233;
  } else {

  }
#line 3362
  schedule();
#line 3362
  goto ldv_49234;
  ldv_49233: 
#line 3362
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49231: 
#line 3372
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3372
  if (tmp___1 != 0) {
#line 3373
    tmp___0 = __fswab64(p->uuid);
#line 3373
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3374
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3376
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3377
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3379
    put_ldev(mdev);
  } else {
#line 3381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3383
  return (1);
}
}
#line 3393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3396
  __min1 = 511UL;
#line 3396
  __min2 = c->bm_words - c->word_offset;
#line 3396
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3397
  want = num_words * 8U;
#line 3400
  if (want != data_size) {
#line 3401
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3402
    return (-5);
  } else {

  }
#line 3404
  if (want == 0U) {
#line 3405
    return (0);
  } else {

  }
#line 3406
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3407
  if ((unsigned int )err != want) {
#line 3408
    if (err >= 0) {
#line 3409
      err = -5;
    } else {

    }
#line 3410
    return (err);
  } else {

  }
#line 3413
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3415
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3416
  c->bit_offset = c->word_offset * 64UL;
#line 3417
  if (c->bit_offset > c->bm_bits) {
#line 3418
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3420
  return (1);
}
}
#line 3430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3438
  s = c->bit_offset;
#line 3440
  tmp___0 = __fswab16((int )p->head.length);
#line 3440
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3441
  tmp___1 = DCBP_get_start(p);
#line 3441
  toggle = tmp___1;
#line 3445
  tmp___2 = DCBP_get_pad_bits(p);
#line 3445
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3447
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3448
  if (bits < 0) {
#line 3449
    return (-5);
  } else {

  }
#line 3451
  have = bits;
#line 3451
  goto ldv_49264;
  ldv_49263: 
#line 3452
  bits = vli_decode_bits(& rl, look_ahead);
#line 3453
  if (bits <= 0) {
#line 3454
    return (-5);
  } else {

  }
#line 3456
  if (toggle != 0) {
#line 3457
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3458
    if (c->bm_bits <= e) {
#line 3459
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3460
      return (-5);
    } else {

    }
#line 3462
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3465
  if (have < bits) {
#line 3466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3470
    return (-5);
  } else {

  }
#line 3472
  look_ahead = look_ahead >> bits;
#line 3473
  have = have - bits;
#line 3475
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3476
  if (bits < 0) {
#line 3477
    return (-5);
  } else {

  }
#line 3478
  look_ahead = (tmp << have) | look_ahead;
#line 3479
  have = have + bits;
#line 3451
  s = (unsigned long )((unsigned long long )s + rl);
#line 3451
  toggle = toggle == 0;
  ldv_49264: ;
#line 3451
  if (have > 0) {
#line 3452
    goto ldv_49263;
  } else {

  }
#line 3482
  c->bit_offset = s;
#line 3483
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3485
  return (c->bm_bits != s);
}
}
#line 3495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3499
  tmp___0 = DCBP_get_code(p);
#line 3499
  if ((unsigned int )tmp___0 == 2U) {
#line 3500
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3500
    return (tmp);
  } else {

  }
#line 3506
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3507
  val.i = 0U;
#line 3507
  val.ldv_37644.conn = 6U;
#line 3507
  mask.i = 0U;
#line 3507
  mask.ldv_37644.conn = 31U;
#line 3507
  drbd_force_state(mdev, mask, val);
#line 3508
  return (-5);
}
}
#line 3511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3515
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3518
  total = c->bytes[0] + c->bytes[1];
#line 3522
  if (total == 0U) {
#line 3523
    return;
  } else {

  }
#line 3526
  if (total >= plain) {
#line 3527
    return;
  } else {

  }
#line 3530
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3533
  if (r > 1000U) {
#line 3534
    r = 1000U;
  } else {

  }
#line 3536
  r = 1000U - r;
#line 3537
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3538
  return;
}
}
#line 3553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3558
  ok = 0;
#line 3559
  h = & mdev->data.rbuf.header.h80;
#line 3561
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_DONT_CLEAR);
#line 3567
  tmp = __get_free_pages(16U, 0U);
#line 3567
  buffer = (void *)tmp;
#line 3568
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3570
    goto out;
  } else {

  }
#line 3573
  tmp___0 = drbd_bm_bits(mdev);
#line 3573
  tmp___1 = drbd_bm_words(mdev);
#line 3573
  __constr_expr_0.bm_bits = tmp___0;
#line 3573
  __constr_expr_0.bm_words = tmp___1;
#line 3573
  __constr_expr_0.bit_offset = 0UL;
#line 3573
  __constr_expr_0.word_offset = 0UL;
#line 3573
  __constr_expr_0.packets[0] = 0U;
#line 3573
  __constr_expr_0.packets[1] = 0U;
#line 3573
  __constr_expr_0.bytes[0] = 0U;
#line 3573
  __constr_expr_0.bytes[1] = 0U;
#line 3573
  c = __constr_expr_0;
  ldv_49301: ;
#line 3579
  if ((unsigned int )cmd == 4U) {
#line 3580
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3581
  if ((unsigned int )cmd == 36U) {
#line 3586
    if (data_size > 4088U) {
#line 3587
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3588
      goto out;
    } else {

    }
#line 3591
    p = (struct p_compressed_bm *)buffer;
#line 3592
    __len = 8UL;
#line 3592
    if (__len > 63UL) {
#line 3592
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3592
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3593
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3593
    if ((unsigned int )tmp___2 != data_size) {
#line 3594
      goto out;
    } else {

    }
#line 3595
    if (data_size <= 1U) {
#line 3596
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3597
      goto out;
    } else {

    }
#line 3599
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3601
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3602
    goto out;
  }
#line 3605
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3606
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3608
  if (err <= 0) {
#line 3609
    if (err < 0) {
#line 3610
      goto out;
    } else {

    }
#line 3611
    goto ldv_49300;
  } else {

  }
#line 3613
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3613
  if (tmp___3 == 0) {
#line 3614
    goto out;
  } else {

  }
#line 3615
  goto ldv_49301;
  ldv_49300: 
#line 3617
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3619
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3622
    tmp___4 = drbd_send_bitmap(mdev);
#line 3622
    ok = tmp___4 == 0;
#line 3623
    if (ok == 0) {
#line 3624
      goto out;
    } else {

    }
#line 3626
    val.i = 0U;
#line 3626
    val.ldv_37644.conn = 15U;
#line 3626
    mask.i = 0U;
#line 3626
    mask.ldv_37644.conn = 31U;
#line 3626
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3627
    if ((int )rv != 1) {
#line 3627
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3627);
    } else {

    }
  } else
#line 3628
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3631
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37644.conn);
#line 3631
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3635
  ok = 1;
  out: 
#line 3637
  drbd_bm_unlock(mdev);
#line 3638
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3639
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3640
  free_pages((unsigned long )buffer, 0U);
#line 3641
  return (ok);
}
}
#line 3644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3650
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3653
  size = (int )data_size;
#line 3654
  goto ldv_49324;
  ldv_49323: 
#line 3655
  __min1 = size;
#line 3655
  __min2 = 128;
#line 3655
  want = __min1 < __min2 ? __min1 : __min2;
#line 3656
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3657
  _b = r <= 0;
#line 3657
  if (_b != 0) {
#line 3657
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3657);
  } else {

  }
#line 3657
  if (_b != 0) {
#line 3657
    goto ldv_49322;
  } else {

  }
#line 3658
  size = size - r;
  ldv_49324: ;
#line 3654
  if (size > 0) {
#line 3655
    goto ldv_49323;
  } else {

  }
  ldv_49322: ;
#line 3660
  return (size == 0);
}
}
#line 3663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3667
  drbd_tcp_quickack(mdev->data.socket);
#line 3669
  return (1);
}
}
#line 3672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3674
  p = & mdev->data.rbuf.block_desc;
#line 3676
  switch ((int )mdev->state.ldv_37644.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3680
  goto ldv_49339;
  default: 
#line 3682
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37644.conn);
#line 3682
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_49339: 
#line 3686
  tmp___0 = __fswab32(p->blksize);
#line 3686
  tmp___1 = __fswab64(p->sector);
#line 3686
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3686U);
#line 3688
  return (1);
}
}
#line 3699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3699
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3736
  header = & mdev->data.rbuf.header;
#line 3742
  goto ldv_49360;
  ldv_49359: 
#line 3743
  drbd_thread_current_set_cpu(mdev);
#line 3744
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3744
  if (tmp == 0) {
#line 3745
    goto err_out;
  } else {

  }
#line 3747
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3747
  if (tmp___0 != 0L) {
#line 3748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3749
    goto err_out;
  } else {
#line 3747
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3747
    if (tmp___1 != 0L) {
#line 3748
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3749
      goto err_out;
    } else {

    }
  }
#line 3752
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3753
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3754
    tmp___2 = cmdname(cmd);
#line 3754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3755
    goto err_out;
  } else {

  }
#line 3758
  if (shs != 0UL) {
#line 3759
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3760
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3760
    if (tmp___5 != 0L) {
#line 3761
      tmp___3 = get_current();
#line 3761
      tmp___4 = signal_pending(tmp___3);
#line 3761
      if (tmp___4 == 0) {
#line 3762
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3763
      goto err_out;
    } else {

    }
  } else {

  }
#line 3767
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3769
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3769
  if (tmp___7 != 0L) {
#line 3770
    tmp___6 = cmdname(cmd);
#line 3770
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3772
    goto err_out;
  } else {

  }
  ldv_49360: 
#line 3742
  tmp___8 = get_t_state(& mdev->receiver);
#line 3742
  if ((unsigned int )tmp___8 == 1U) {
#line 3743
    goto ldv_49359;
  } else {

  }

#line 3776
  if (0) {
    err_out: 
#line 3778
    val.i = 0U;
#line 3778
    val.ldv_37644.conn = 6U;
#line 3778
    mask.i = 0U;
#line 3778
    mask.ldv_37644.conn = 31U;
#line 3778
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3782
  drbd_md_sync(mdev);
#line 3783
  return;
}
}
#line 3785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3789
  barr.w.cb = & w_prev_work_done;
#line 3790
  init_completion(& barr.done);
#line 3791
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3792
  wait_for_completion(& barr.done);
#line 3793
  return;
}
}
#line 3795 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3799
  spin_lock_irq(& mdev->req_lock);
#line 3801
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3802
    spin_unlock_irq(& mdev->req_lock);
#line 3803
    return;
  } else {

  }
#line 3806
  h = mdev->ee_hash;
#line 3806
  goto ldv_49375;
  ldv_49374: ;
#line 3807
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3808
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3806
  h = h + 1;
  ldv_49375: ;
#line 3806
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3807
    goto ldv_49374;
  } else {

  }
#line 3810
  kfree((void const   *)mdev->ee_hash);
#line 3811
  mdev->ee_hash = 0;
#line 3812
  mdev->ee_hash_s = 0U;
#line 3815
  h = mdev->tl_hash;
#line 3815
  goto ldv_49378;
  ldv_49377: ;
#line 3816
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3815
  h = h + 1;
  ldv_49378: ;
#line 3815
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3816
    goto ldv_49377;
  } else {

  }
#line 3819
  kfree((void const   *)mdev->tl_hash);
#line 3820
  mdev->tl_hash = 0;
#line 3821
  mdev->tl_hash_s = 0U;
#line 3822
  spin_unlock_irq(& mdev->req_lock);
#line 3823
  return;
}
}
#line 3825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3829
  rv = 0;
#line 3832
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3833
    return;
  } else {

  }
#line 3836
  drbd_thread_stop(& mdev->asender);
#line 3837
  drbd_free_sock(mdev);
#line 3840
  spin_lock_irq(& mdev->req_lock);
#line 3841
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3842
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3843
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3844
  spin_unlock_irq(& mdev->req_lock);
#line 3856
  drbd_rs_cancel_all(mdev);
#line 3857
  mdev->rs_total = 0UL;
#line 3858
  mdev->rs_failed = 0UL;
#line 3859
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3860
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3862
  del_timer(& mdev->request_timer);
#line 3865
  del_timer_sync(& mdev->resync_timer);
#line 3866
  resync_timer_fn((unsigned long )mdev);
#line 3871
  drbd_flush_workqueue(mdev);
#line 3875
  drbd_process_done_ee(mdev);
#line 3877
  kfree((void const   *)mdev->p_uuid);
#line 3878
  mdev->p_uuid = 0;
#line 3880
  tmp = is_susp(mdev->state);
#line 3880
  if (tmp == 0) {
#line 3881
    tl_clear(mdev);
  } else {

  }
#line 3883
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3885
  drbd_md_sync(mdev);
#line 3887
  fp = FP_DONT_CARE;
#line 3888
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3888
  if (tmp___0 != 0) {
#line 3889
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3890
    put_ldev(mdev);
  } else {

  }
#line 3893
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_37644.pdsk > 5) {
#line 3894
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3896
  spin_lock_irq(& mdev->req_lock);
#line 3897
  os = mdev->state;
#line 3898
  if ((int )os.ldv_37644.conn > 1) {
#line 3900
    ns = os;
#line 3901
    ns.ldv_37644.conn = 2U;
#line 3902
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3902
    rv = (int )tmp___1;
  } else {

  }
#line 3904
  spin_unlock_irq(& mdev->req_lock);
#line 3906
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3907
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3907
    if (tmp___2 == 0) {
#line 3907
      goto ldv_49388;
    } else {

    }
#line 3907
    tmp___3 = get_current();
#line 3907
    __wait.flags = 0U;
#line 3907
    __wait.private = (void *)tmp___3;
#line 3907
    __wait.func = & autoremove_wake_function;
#line 3907
    __wait.task_list.next = & __wait.task_list;
#line 3907
    __wait.task_list.prev = & __wait.task_list;
    ldv_49391: 
#line 3907
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3907
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3907
    if (tmp___4 == 0) {
#line 3907
      goto ldv_49390;
    } else {

    }
#line 3907
    schedule();
#line 3907
    goto ldv_49391;
    ldv_49390: 
#line 3907
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_49388: 
#line 3909
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3910
    mdev->cram_hmac_tfm = 0;
#line 3912
    kfree((void const   *)mdev->net_conf);
#line 3913
    mdev->net_conf = 0;
#line 3914
    val.i = 0U;
#line 3914
    val.ldv_37644.conn = 0U;
#line 3914
    mask.i = 0U;
#line 3914
    mask.ldv_37644.conn = 31U;
#line 3914
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3919
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3919
  if (tmp___5 == 0) {
#line 3919
    goto ldv_49396;
  } else {

  }
#line 3919
  tmp___6 = get_current();
#line 3919
  __wait___0.flags = 0U;
#line 3919
  __wait___0.private = (void *)tmp___6;
#line 3919
  __wait___0.func = & autoremove_wake_function;
#line 3919
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3919
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49399: 
#line 3919
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3919
  tmp___7 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3919
  if (tmp___7 == 0) {
#line 3919
    goto ldv_49398;
  } else {

  }
#line 3919
  schedule();
#line 3919
  goto ldv_49399;
  ldv_49398: 
#line 3919
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_49396: 
#line 3928
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3928
  i = (unsigned int )tmp___8;
#line 3929
  if (i != 0U) {
#line 3930
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3931
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3931
  i = (unsigned int )tmp___9;
#line 3932
  if (i != 0U) {
#line 3933
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3934
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3934
  i = (unsigned int )tmp___10;
#line 3935
  if (i != 0U) {
#line 3936
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3938
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3938
  if (tmp___11 == 0) {
#line 3938
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3938);
  } else {

  }
#line 3939
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3939
  if (tmp___12 == 0) {
#line 3939
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3939);
  } else {

  }
#line 3940
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3940
  if (tmp___13 == 0) {
#line 3940
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3940);
  } else {

  }
#line 3941
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3941
  if (tmp___14 == 0) {
#line 3941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3941);
  } else {

  }
#line 3944
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3945
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3945
  if (tmp___15 == 0) {
#line 3945
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3945);
  } else {

  }
#line 3946
  return;
}
}
#line 3957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3960
  p = & mdev->data.sbuf.handshake;
#line 3963
  tmp = ldv_mutex_lock_interruptible_61(& mdev->data.mutex);
#line 3963
  if (tmp != 0) {
#line 3964
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3965
    return (0);
  } else {

  }
#line 3968
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3969
    ldv_mutex_unlock_62(& mdev->data.mutex);
#line 3970
    return (0);
  } else {

  }
#line 3973
  memset((void *)p, 0, 80UL);
#line 3974
  p->protocol_min = 1442840576U;
#line 3975
  p->protocol_max = 1610612736U;
#line 3976
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3978
  ldv_mutex_unlock_63(& mdev->data.mutex);
#line 3979
  return (ok);
}
}
#line 3989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 3992
  p = & mdev->data.rbuf.handshake;
#line 3993
  expect = 72;
#line 3998
  rv = drbd_send_handshake(mdev);
#line 3999
  if (rv == 0) {
#line 4000
    return (0);
  } else {

  }
#line 4002
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4003
  if (rv == 0) {
#line 4004
    return (0);
  } else {

  }
#line 4006
  if ((unsigned int )cmd != 65534U) {
#line 4007
    tmp = cmdname(cmd);
#line 4007
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4009
    return (-1);
  } else {

  }
#line 4012
  if ((unsigned int )expect != length) {
#line 4013
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4015
    return (-1);
  } else {

  }
#line 4018
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4020
  if (rv != expect) {
#line 4021
    tmp___0 = get_current();
#line 4021
    tmp___1 = signal_pending(tmp___0);
#line 4021
    if (tmp___1 == 0) {
#line 4022
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4023
    return (0);
  } else {

  }
#line 4026
  tmp___2 = __fswab32(p->protocol_min);
#line 4026
  p->protocol_min = tmp___2;
#line 4027
  tmp___3 = __fswab32(p->protocol_max);
#line 4027
  p->protocol_max = tmp___3;
#line 4028
  if (p->protocol_max == 0U) {
#line 4029
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4031
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 4033
    goto incompat;
  } else {

  }
#line 4035
  __min1 = 96;
#line 4035
  __min2 = (int )p->protocol_max;
#line 4035
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4037
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4040
  return (1);
  incompat: 
#line 4043
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4047
  return (-1);
}
}
#line 4066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4070
  response = 0;
#line 4071
  right_response = 0;
#line 4072
  peers_ch = 0;
#line 4073
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4073
  key_len = (unsigned int )tmp;
#line 4080
  desc.tfm = mdev->cram_hmac_tfm;
#line 4081
  desc.flags = 0U;
#line 4083
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4085
  if (rv != 0) {
#line 4086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4087
    rv = -1;
#line 4088
    goto fail;
  } else {

  }
#line 4091
  get_random_bytes((void *)(& my_challenge), 64);
#line 4093
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4094
  if (rv == 0) {
#line 4095
    goto fail;
  } else {

  }
#line 4097
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4098
  if (rv == 0) {
#line 4099
    goto fail;
  } else {

  }
#line 4101
  if ((unsigned int )cmd != 16U) {
#line 4102
    tmp___0 = cmdname(cmd);
#line 4102
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4104
    rv = 0;
#line 4105
    goto fail;
  } else {

  }
#line 4108
  if (length > 128U) {
#line 4109
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4110
    rv = -1;
#line 4111
    goto fail;
  } else {

  }
#line 4114
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4114
  peers_ch = (char *)tmp___1;
#line 4115
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4117
    rv = -1;
#line 4118
    goto fail;
  } else {

  }
#line 4121
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4123
  if ((unsigned int )rv != length) {
#line 4124
    tmp___2 = get_current();
#line 4124
    tmp___3 = signal_pending(tmp___2);
#line 4124
    if (tmp___3 == 0) {
#line 4125
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4126
    rv = 0;
#line 4127
    goto fail;
  } else {

  }
#line 4130
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4131
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4131
  response = (char *)tmp___4;
#line 4132
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4133
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4134
    rv = -1;
#line 4135
    goto fail;
  } else {

  }
#line 4138
  sg_init_table(& sg, 1U);
#line 4139
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4141
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4142
  if (rv != 0) {
#line 4143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4144
    rv = -1;
#line 4145
    goto fail;
  } else {

  }
#line 4148
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4149
  if (rv == 0) {
#line 4150
    goto fail;
  } else {

  }
#line 4152
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4153
  if (rv == 0) {
#line 4154
    goto fail;
  } else {

  }
#line 4156
  if ((unsigned int )cmd != 17U) {
#line 4157
    tmp___5 = cmdname(cmd);
#line 4157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4159
    rv = 0;
#line 4160
    goto fail;
  } else {

  }
#line 4163
  if (length != resp_size) {
#line 4164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4165
    rv = 0;
#line 4166
    goto fail;
  } else {

  }
#line 4169
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4171
  if ((unsigned int )rv != resp_size) {
#line 4172
    tmp___6 = get_current();
#line 4172
    tmp___7 = signal_pending(tmp___6);
#line 4172
    if (tmp___7 == 0) {
#line 4173
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4174
    rv = 0;
#line 4175
    goto fail;
  } else {

  }
#line 4178
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4178
  right_response = (char *)tmp___8;
#line 4179
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4180
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4181
    rv = -1;
#line 4182
    goto fail;
  } else {

  }
#line 4185
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4187
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4188
  if (rv != 0) {
#line 4189
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4190
    rv = -1;
#line 4191
    goto fail;
  } else {

  }
#line 4194
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4194
  rv = tmp___9 == 0;
#line 4196
  if (rv != 0) {
#line 4197
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4200
    rv = -1;
  }
  fail: 
#line 4203
  kfree((void const   *)peers_ch);
#line 4204
  kfree((void const   *)response);
#line 4205
  kfree((void const   *)right_response);
#line 4207
  return (rv);
}
}
#line 4211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4213
  mdev = thi->mdev;
#line 4214
  tmp = mdev_to_minor(mdev);
#line 4214
  minor = tmp;
#line 4217
  tmp___0 = get_current();
#line 4217
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4219
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_49442: 
#line 4222
  h = drbd_connect(mdev);
#line 4223
  if (h == 0) {
#line 4224
    drbd_disconnect(mdev);
#line 4225
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4227
  if (h == -1) {
#line 4228
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4229
    val.i = 0U;
#line 4229
    val.ldv_37644.conn = 1U;
#line 4229
    mask.i = 0U;
#line 4229
    mask.ldv_37644.conn = 31U;
#line 4229
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4231
  if (h == 0) {
#line 4232
    goto ldv_49442;
  } else {

  }

#line 4233
  if (h > 0) {
#line 4234
    tmp___1 = get_net_conf(mdev);
#line 4234
    if (tmp___1 != 0) {
#line 4235
      drbdd(mdev);
#line 4236
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4240
  drbd_disconnect(mdev);
#line 4242
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4243
  return (0);
}
}
#line 4248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4250
  p = (struct p_req_state_reply *)h;
#line 4252
  tmp = __fswab32(p->retcode);
#line 4252
  retcode = (int )tmp;
#line 4254
  if (retcode > 0) {
#line 4255
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4257
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4258
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4261
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4263
  return (1);
}
}
#line 4266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4268
  tmp = drbd_send_ping_ack(mdev);
#line 4268
  return (tmp);
}
}
#line 4272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4275
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4276
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4276
  if (tmp == 0) {
#line 4277
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4279
  return (1);
}
}
#line 4282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4284
  p = (struct p_block_ack *)h;
#line 4285
  tmp = __fswab64(p->sector);
#line 4285
  sector = (sector_t )tmp;
#line 4286
  tmp___0 = __fswab32(p->blksize);
#line 4286
  blksize = (int )tmp___0;
#line 4288
  if (mdev->agreed_pro_version <= 88) {
#line 4288
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4288);
  } else {

  }
#line 4290
  tmp___1 = __fswab32(p->seq_num);
#line 4290
  update_peer_seq(mdev, tmp___1);
#line 4292
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4292
  if (tmp___2 != 0) {
#line 4293
    drbd_rs_complete_io(mdev, sector);
#line 4294
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4294U);
#line 4296
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4297
    put_ldev(mdev);
  } else {

  }
#line 4299
  atomic_dec(& mdev->rs_pending_cnt);
#line 4299
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4299
  if (tmp___4 < 0) {
#line 4299
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4299, tmp___3);
  } else {

  }
#line 4300
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4302
  return (1);
}
}
#line 4307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4310
  tmp = tl_hash_slot(mdev, sector);
#line 4310
  slot = tmp;
#line 4314
  n = slot->first;
#line 4314
  goto ldv_49483;
  ldv_49482: ;
#line 4315
  if ((unsigned long )req == (unsigned long )id) {
#line 4316
    if (req->sector != sector) {
#line 4317
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4321
      goto ldv_49481;
    } else {

    }
#line 4323
    return (req);
  } else {

  }
#line 4314
  n = n->next;
  ldv_49483: ;
#line 4314
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4314
    __builtin_prefetch((void const   *)n->next);
#line 4314
    if (1 != 0) {
#line 4314
      __mptr = (struct hlist_node  const  *)n;
#line 4314
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4314
      if (1 != 0) {
#line 4315
        goto ldv_49482;
      } else {
#line 4317
        goto ldv_49481;
      }
    } else {
#line 4317
      goto ldv_49481;
    }
  } else {

  }
  ldv_49481: ;
#line 4326
  return (0);
}
}
#line 4332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4339
  spin_lock_irq(& mdev->req_lock);
#line 4340
  req = (*validator)(mdev, id, sector);
#line 4341
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4341
  if (tmp != 0L) {
#line 4342
    spin_unlock_irq(& mdev->req_lock);
#line 4344
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4346
    return (0);
  } else {

  }
#line 4348
  __req_mod(req, what, & m);
#line 4349
  spin_unlock_irq(& mdev->req_lock);
#line 4351
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4352
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4353
  return (1);
}
}
#line 4356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4358
  p = (struct p_block_ack *)h;
#line 4359
  tmp = __fswab64(p->sector);
#line 4359
  sector = (sector_t )tmp;
#line 4360
  tmp___0 = __fswab32(p->blksize);
#line 4360
  blksize = (int )tmp___0;
#line 4363
  tmp___1 = __fswab32(p->seq_num);
#line 4363
  update_peer_seq(mdev, tmp___1);
#line 4365
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4366
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4366U);
#line 4367
    atomic_dec(& mdev->rs_pending_cnt);
#line 4367
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4367
    if (tmp___3 < 0) {
#line 4367
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4367
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4367, tmp___2);
    } else {

    }
#line 4368
    return (1);
  } else {

  }
#line 4370
  tmp___4 = __fswab16((int )h->command);
#line 4370
  switch ((int )tmp___4) {
  case 23: ;
#line 4372
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4372);
  } else {

  }
#line 4373
  what = write_acked_by_peer_and_sis;
#line 4374
  goto ldv_49511;
  case 22: ;
#line 4376
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4376
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4376);
  } else {

  }
#line 4377
  what = write_acked_by_peer;
#line 4378
  goto ldv_49511;
  case 21: ;
#line 4380
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4380
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4380);
  } else {

  }
#line 4381
  what = recv_acked_by_peer;
#line 4382
  goto ldv_49511;
  case 24: ;
#line 4384
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4384);
  } else {

  }
#line 4385
  what = conflict_discarded_by_peer;
#line 4386
  goto ldv_49511;
  default: 
#line 4388
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4388);
#line 4389
  return (0);
  }
  ldv_49511: 
#line 4392
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4392
  return (tmp___5);
}
}
#line 4396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4398
  p = (struct p_block_ack *)h;
#line 4399
  tmp = __fswab64(p->sector);
#line 4399
  sector = (sector_t )tmp;
#line 4400
  tmp___0 = __fswab32(p->blksize);
#line 4400
  size = (int )tmp___0;
#line 4404
  tmp___1 = __fswab32(p->seq_num);
#line 4404
  update_peer_seq(mdev, tmp___1);
#line 4406
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4407
    atomic_dec(& mdev->rs_pending_cnt);
#line 4407
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4407
    if (tmp___3 < 0) {
#line 4407
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4407, tmp___2);
    } else {

    }
#line 4408
    drbd_rs_failed_io(mdev, sector, size);
#line 4409
    return (1);
  } else {

  }
#line 4412
  spin_lock_irq(& mdev->req_lock);
#line 4413
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4414
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4415
    spin_unlock_irq(& mdev->req_lock);
#line 4416
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4424
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4424U);
#line 4425
      return (1);
    } else {
#line 4427
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4429
      return (0);
    }
  } else {

  }
#line 4432
  __req_mod(req, neg_acked, & m);
#line 4433
  spin_unlock_irq(& mdev->req_lock);
#line 4435
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4436
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4437
  return (1);
}
}
#line 4440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4442
  p = (struct p_block_ack *)h;
#line 4443
  tmp = __fswab64(p->sector);
#line 4443
  sector = (sector_t )tmp;
#line 4445
  tmp___0 = __fswab32(p->seq_num);
#line 4445
  update_peer_seq(mdev, tmp___0);
#line 4446
  tmp___1 = __fswab32(p->blksize);
#line 4446
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4449
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4449
  return (tmp___2);
}
}
#line 4453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4457
  p = (struct p_block_ack *)h;
#line 4459
  tmp = __fswab64(p->sector);
#line 4459
  sector = (sector_t )tmp;
#line 4460
  tmp___0 = __fswab32(p->blksize);
#line 4460
  size = (int )tmp___0;
#line 4462
  tmp___1 = __fswab32(p->seq_num);
#line 4462
  update_peer_seq(mdev, tmp___1);
#line 4464
  atomic_dec(& mdev->rs_pending_cnt);
#line 4464
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4464
  if (tmp___3 < 0) {
#line 4464
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4464
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4464, tmp___2);
  } else {

  }
#line 4466
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4466
  if (tmp___5 != 0) {
#line 4467
    drbd_rs_complete_io(mdev, sector);
#line 4468
    tmp___4 = __fswab16((int )h->command);
#line 4468
    switch ((int )tmp___4) {
    case 27: 
#line 4470
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4472
    goto ldv_49549;
    default: 
#line 4474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4474);
#line 4475
    put_ldev(mdev);
#line 4476
    return (0);
    }
    ldv_49549: 
#line 4478
    put_ldev(mdev);
  } else {

  }
#line 4481
  return (1);
}
}
#line 4484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4486
  p = (struct p_barrier_ack *)h;
#line 4488
  tmp = __fswab32(p->set_size);
#line 4488
  tl_release(mdev, p->barrier, tmp);
#line 4490
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4490
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4490
    if (tmp___0 == 0) {
#line 4490
      tmp___1 = test_and_set_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 4490
      if (tmp___1 == 0) {
#line 4493
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4494
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4497
  return (1);
}
}
#line 4500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4502
  p = (struct p_block_ack *)h;
#line 4507
  tmp = __fswab64(p->sector);
#line 4507
  sector = (sector_t )tmp;
#line 4508
  tmp___0 = __fswab32(p->blksize);
#line 4508
  size = (int )tmp___0;
#line 4510
  tmp___1 = __fswab32(p->seq_num);
#line 4510
  update_peer_seq(mdev, tmp___1);
#line 4512
  tmp___2 = __fswab64(p->block_id);
#line 4512
  if (tmp___2 == 4712ULL) {
#line 4513
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4515
    ov_oos_print(mdev);
  }
#line 4517
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4517
  if (tmp___3 == 0) {
#line 4518
    return (1);
  } else {

  }
#line 4520
  drbd_rs_complete_io(mdev, sector);
#line 4521
  atomic_dec(& mdev->rs_pending_cnt);
#line 4521
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4521
  if (tmp___5 < 0) {
#line 4521
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4521
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4521, tmp___4);
  } else {

  }
#line 4523
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4526
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4527
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4529
  if (mdev->ov_left == 0UL) {
#line 4530
    tmp___6 = kmalloc(24UL, 16U);
#line 4530
    w = (struct drbd_work *)tmp___6;
#line 4531
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4532
      w->cb = & w_ov_finished;
#line 4533
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4535
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4536
      ov_oos_print(mdev);
#line 4537
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4540
  put_ldev(mdev);
#line 4541
  return (1);
}
}
#line 4544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4546
  return (1);
}
}
#line 4554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4556
  asender_tbl[0].pkt_size = 0UL;
#line 4556
  asender_tbl[0].process = 0;
#line 4556
  asender_tbl[1].pkt_size = 0UL;
#line 4556
  asender_tbl[1].process = 0;
#line 4556
  asender_tbl[2].pkt_size = 0UL;
#line 4556
  asender_tbl[2].process = 0;
#line 4556
  asender_tbl[3].pkt_size = 0UL;
#line 4556
  asender_tbl[3].process = 0;
#line 4556
  asender_tbl[4].pkt_size = 0UL;
#line 4556
  asender_tbl[4].process = 0;
#line 4556
  asender_tbl[5].pkt_size = 0UL;
#line 4556
  asender_tbl[5].process = 0;
#line 4556
  asender_tbl[6].pkt_size = 0UL;
#line 4556
  asender_tbl[6].process = 0;
#line 4556
  asender_tbl[7].pkt_size = 0UL;
#line 4556
  asender_tbl[7].process = 0;
#line 4556
  asender_tbl[8].pkt_size = 0UL;
#line 4556
  asender_tbl[8].process = 0;
#line 4556
  asender_tbl[9].pkt_size = 0UL;
#line 4556
  asender_tbl[9].process = 0;
#line 4556
  asender_tbl[10].pkt_size = 0UL;
#line 4556
  asender_tbl[10].process = 0;
#line 4556
  asender_tbl[11].pkt_size = 0UL;
#line 4556
  asender_tbl[11].process = 0;
#line 4556
  asender_tbl[12].pkt_size = 0UL;
#line 4556
  asender_tbl[12].process = 0;
#line 4556
  asender_tbl[13].pkt_size = 0UL;
#line 4556
  asender_tbl[13].process = 0;
#line 4556
  asender_tbl[14].pkt_size = 0UL;
#line 4556
  asender_tbl[14].process = 0;
#line 4556
  asender_tbl[15].pkt_size = 0UL;
#line 4556
  asender_tbl[15].process = 0;
#line 4556
  asender_tbl[16].pkt_size = 0UL;
#line 4556
  asender_tbl[16].process = 0;
#line 4556
  asender_tbl[17].pkt_size = 0UL;
#line 4556
  asender_tbl[17].process = 0;
#line 4556
  asender_tbl[18].pkt_size = 0UL;
#line 4556
  asender_tbl[18].process = 0;
#line 4556
  asender_tbl[19].pkt_size = 8UL;
#line 4556
  asender_tbl[19].process = & got_Ping;
#line 4556
  asender_tbl[20].pkt_size = 8UL;
#line 4556
  asender_tbl[20].process = & got_PingAck;
#line 4556
  asender_tbl[21].pkt_size = 32UL;
#line 4556
  asender_tbl[21].process = & got_BlockAck;
#line 4556
  asender_tbl[22].pkt_size = 32UL;
#line 4556
  asender_tbl[22].process = & got_BlockAck;
#line 4556
  asender_tbl[23].pkt_size = 32UL;
#line 4556
  asender_tbl[23].process = & got_BlockAck;
#line 4556
  asender_tbl[24].pkt_size = 32UL;
#line 4556
  asender_tbl[24].process = & got_BlockAck;
#line 4556
  asender_tbl[25].pkt_size = 32UL;
#line 4556
  asender_tbl[25].process = & got_NegAck;
#line 4556
  asender_tbl[26].pkt_size = 32UL;
#line 4556
  asender_tbl[26].process = & got_NegDReply;
#line 4556
  asender_tbl[27].pkt_size = 32UL;
#line 4556
  asender_tbl[27].process = & got_NegRSDReply;
#line 4556
  asender_tbl[28].pkt_size = 16UL;
#line 4556
  asender_tbl[28].process = & got_BarrierAck;
#line 4556
  asender_tbl[29].pkt_size = 12UL;
#line 4556
  asender_tbl[29].process = & got_RqSReply;
#line 4556
  asender_tbl[30].pkt_size = 0UL;
#line 4556
  asender_tbl[30].process = 0;
#line 4556
  asender_tbl[31].pkt_size = 0UL;
#line 4556
  asender_tbl[31].process = 0;
#line 4556
  asender_tbl[32].pkt_size = 32UL;
#line 4556
  asender_tbl[32].process = & got_OVResult;
#line 4556
  asender_tbl[33].pkt_size = 0UL;
#line 4556
  asender_tbl[33].process = 0;
#line 4556
  asender_tbl[34].pkt_size = 32UL;
#line 4556
  asender_tbl[34].process = & got_IsInSync;
#line 4556
  asender_tbl[35].pkt_size = 0UL;
#line 4556
  asender_tbl[35].process = 0;
#line 4556
  asender_tbl[36].pkt_size = 0UL;
#line 4556
  asender_tbl[36].process = 0;
#line 4556
  asender_tbl[37].pkt_size = 0UL;
#line 4556
  asender_tbl[37].process = 0;
#line 4556
  asender_tbl[38].pkt_size = 0UL;
#line 4556
  asender_tbl[38].process = 0;
#line 4556
  asender_tbl[39].pkt_size = 16UL;
#line 4556
  asender_tbl[39].process = & got_skip;
#line 4556
  asender_tbl[40].pkt_size = 0UL;
#line 4556
  asender_tbl[40].process = 0;
#line 4556
  asender_tbl[41].pkt_size = 32UL;
#line 4556
  asender_tbl[41].process = & got_NegRSDReply;
#line 4556
  asender_tbl[42].pkt_size = 0UL;
#line 4556
  asender_tbl[42].process = 0;
#line 4577
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4578
    return (0);
  } else {

  }
#line 4579
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4584
  mdev = thi->mdev;
#line 4585
  h = & mdev->meta.rbuf.header.h80;
#line 4586
  cmd = 0;
#line 4589
  buf = (void *)h;
#line 4590
  received = 0;
#line 4591
  expect = 8;
#line 4593
  ping_timeout_active = 0;
#line 4595
  tmp = mdev_to_minor(mdev);
#line 4595
  tmp___0 = get_current();
#line 4595
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4597
  tmp___1 = get_current();
#line 4597
  tmp___1->policy = 2U;
#line 4598
  tmp___2 = get_current();
#line 4598
  tmp___2->rt_priority = 2U;
#line 4600
  goto ldv_49600;
  ldv_49604: 
#line 4601
  drbd_thread_current_set_cpu(mdev);
#line 4602
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4602
  if (tmp___4 != 0) {
#line 4603
    tmp___3 = drbd_send_ping(mdev);
#line 4603
    _b = tmp___3 == 0;
#line 4603
    if (_b != 0) {
#line 4603
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4603);
    } else {

    }
#line 4603
    if (_b != 0) {
#line 4603
      goto reconnect;
    } else {

    }
#line 4604
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4606
    ping_timeout_active = 1;
  } else {

  }
#line 4611
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4611
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4611
    if (tmp___5 > 3) {
#line 4613
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_49599: 
#line 4615
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4616
  tmp___6 = get_current();
#line 4616
  flush_signals(tmp___6);
#line 4617
  tmp___7 = drbd_process_done_ee(mdev);
#line 4617
  if (tmp___7 == 0) {
#line 4618
    goto reconnect;
  } else {

  }
#line 4620
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4621
  spin_lock_irq(& mdev->req_lock);
#line 4622
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4623
  spin_unlock_irq(& mdev->req_lock);
#line 4627
  if (empty != 0) {
#line 4628
    goto ldv_49598;
  } else {

  }
#line 4629
  goto ldv_49599;
  ldv_49598: ;
#line 4631
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4632
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4635
  tmp___8 = get_current();
#line 4635
  tmp___9 = signal_pending(tmp___8);
#line 4635
  if (tmp___9 != 0) {
#line 4636
    goto ldv_49600;
  } else {

  }
#line 4638
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4640
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4642
  tmp___10 = get_current();
#line 4642
  flush_signals(tmp___10);
#line 4654
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4654
  if (tmp___11 != 0L) {
#line 4655
    received = received + rv;
#line 4656
    buf = buf + (unsigned long )rv;
  } else
#line 4657
  if (rv == 0) {
#line 4658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4659
    goto reconnect;
  } else
#line 4660
  if (rv == -11) {
#line 4661
    if (ping_timeout_active != 0) {
#line 4662
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4663
      goto reconnect;
    } else {

    }
#line 4665
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4666
    goto ldv_49600;
  } else
#line 4667
  if (rv == -4) {
#line 4668
    goto ldv_49600;
  } else {
#line 4670
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4671
    goto reconnect;
  }
#line 4674
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4675
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4675
    if (tmp___15 != 0L) {
#line 4676
      tmp___12 = __fswab16((int )h->length);
#line 4676
      tmp___13 = __fswab16((int )h->command);
#line 4676
      tmp___14 = __fswab32(h->magic);
#line 4676
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4680
      goto reconnect;
    } else {

    }
#line 4682
    tmp___16 = __fswab16((int )h->command);
#line 4682
    cmd = get_asender_cmd((int )tmp___16);
#line 4683
    tmp___17 = __fswab16((int )h->length);
#line 4683
    len = (int )tmp___17;
#line 4684
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4684
    if (tmp___21 != 0L) {
#line 4685
      tmp___18 = __fswab16((int )h->length);
#line 4685
      tmp___19 = __fswab16((int )h->command);
#line 4685
      tmp___20 = __fswab32(h->magic);
#line 4685
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4689
      goto disconnect;
    } else {

    }
#line 4691
    expect = (int )cmd->pkt_size;
#line 4692
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4692
    if (_b___0 != 0) {
#line 4692
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4692);
    } else {

    }
#line 4692
    if (_b___0 != 0) {
#line 4693
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4695
  if (received == expect) {
#line 4696
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4696
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4696);
    } else {

    }
#line 4697
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4697
    if (tmp___22 == 0) {
#line 4698
      goto reconnect;
    } else {

    }
#line 4702
    tmp___23 = get_asender_cmd(20);
#line 4702
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4703
      ping_timeout_active = 0;
    } else {

    }
#line 4705
    buf = (void *)h;
#line 4706
    received = 0;
#line 4707
    expect = 8;
#line 4708
    cmd = 0;
  } else {

  }
  ldv_49600: 
#line 4600
  tmp___24 = get_t_state(thi);
#line 4600
  if ((unsigned int )tmp___24 == 1U) {
#line 4601
    goto ldv_49604;
  } else {

  }

#line 4712
  if (0) {
    reconnect: 
#line 4714
    val.i = 0U;
#line 4714
    val.ldv_37644.conn = 5U;
#line 4714
    mask.i = 0U;
#line 4714
    mask.ldv_37644.conn = 31U;
#line 4714
    drbd_force_state(mdev, mask, val);
#line 4715
    drbd_md_sync(mdev);
  } else {

  }
#line 4717
  if (0) {
    disconnect: 
#line 4719
    val___0.i = 0U;
#line 4719
    val___0.ldv_37644.conn = 1U;
#line 4719
    mask___0.i = 0U;
#line 4719
    mask___0.ldv_37644.conn = 31U;
#line 4719
    drbd_force_state(mdev, mask___0, val___0);
#line 4720
    drbd_md_sync(mdev);
  } else {

  }
#line 4722
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4724
  if ((int )mdev->state.ldv_37644.conn > 9) {
#line 4724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4724);
  } else {

  }
#line 4725
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4727
  return (0);
}
}
#line 4767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4779
  LDV_IN_INTERRUPT = 1;
#line 4788
  ldv_initialize();
#line 4790
  goto ldv_49633;
  ldv_49632: 
#line 4793
  tmp = nondet_int();
#line 4793
  switch (tmp) {
  default: ;
#line 4795
  goto ldv_49631;
  }
  ldv_49631: ;
  ldv_49633: 
#line 4790
  tmp___0 = nondet_int();
#line 4790
  if (tmp___0 != 0) {
#line 4791
    goto ldv_49632;
  } else {

  }


#line 4804
  ldv_check_final_state();
#line 4807
  return;
}
}
#line 4811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_55(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4816
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4818
  mutex_lock(ldv_func_arg1);
#line 4819
  return;
}
}
#line 4821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_56(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4826
  tmp = mutex_trylock(ldv_func_arg1);
#line 4826
  ldv_func_res = tmp;
#line 4828
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4828
  return (tmp___0);
#line 4830
  return (ldv_func_res);
}
}
#line 4833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4838
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4840
  mutex_unlock(ldv_func_arg1);
#line 4841
  return;
}
}
#line 4843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_58(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4848
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4850
  mutex_lock(ldv_func_arg1);
#line 4851
  return;
}
}
#line 4853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_59(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4858
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4860
  mutex_unlock(ldv_func_arg1);
#line 4861
  return;
}
}
#line 4863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4868
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4870
  mutex_unlock(ldv_func_arg1);
#line 4871
  return;
}
}
#line 4873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_61(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4878
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4878
  ldv_func_res = tmp;
#line 4880
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4880
  return (tmp___0);
#line 4882
  return (ldv_func_res);
}
}
#line 4885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4890
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4892
  mutex_unlock(ldv_func_arg1);
#line 4893
  return;
}
}
#line 4895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4900
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4902
  mutex_unlock(ldv_func_arg1);
#line 4903
  return;
}
}
#line 599 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 601
  __hlist_del(n);
#line 602
  n->next = 0xdead000000100100UL;
#line 603
  n->pprev = 0xdead000000200200UL;
#line 604
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_74(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_73(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_76(struct mutex *ldv_func_arg1 ) ;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 579 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 581
  rcu_read_lock_sched_notrace();
#line 583
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 585
  return;
}
}
#line 601 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 603
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 605
  rcu_read_lock_sched_notrace();
#line 606
  return;
}
}
#line 195 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 197
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 197
  if (tmp != 0L) {
#line 198
    if (part->partno != 0) {
#line 199
      __mptr = (struct device  const  *)part->__dev.parent;
#line 199
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 201
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 201
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 203
  return (0);
}
}
#line 372 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 374
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 375
  if (part->partno != 0) {
#line 376
    tmp = part_to_disk(part);
#line 376
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 377
  return;
}
}
#line 379 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 381
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 382
  if (part->partno != 0) {
#line 383
    tmp = part_to_disk(part);
#line 383
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 384
  return;
}
}
#line 405
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 208 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 209
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1222
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1493
mempool_t *drbd_request_mempool ;
#line 1509
int drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1511
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_37644.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_46844;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_37644.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_37644.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_46844;
  }
  ldv_46844: ;
#line 1847
  return;
}
}
#line 2065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2067
  atomic_inc(& mdev->ap_pending_cnt);
#line 2068
  return;
}
}
#line 2245 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2247
  mxb = 1000000;
#line 2248
  tmp = get_net_conf(mdev);
#line 2248
  if (tmp != 0) {
#line 2249
    mxb = (mdev->net_conf)->max_buffers;
#line 2250
    put_net_conf(mdev);
  } else {

  }
#line 2252
  return (mxb);
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_37644.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_47016;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_47016;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_47016: ;
#line 2303
  switch ((unsigned int )s.ldv_37644.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_47026;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_47026: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2358
  rv = 0;
#line 2360
  spin_lock_irq(& mdev->req_lock);
#line 2361
  rv = may_inc_ap_bio(mdev);
#line 2362
  if ((int )rv) {
#line 2363
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2364
  spin_unlock_irq(& mdev->req_lock);
#line 2366
  return (rv);
}
}
#line 2369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2379
  tmp = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp) {
#line 2379
    goto ldv_47048;
  } else {

  }
#line 2379
  tmp___0 = get_current();
#line 2379
  __wait.flags = 0U;
#line 2379
  __wait.private = (void *)tmp___0;
#line 2379
  __wait.func = & autoremove_wake_function;
#line 2379
  __wait.task_list.next = & __wait.task_list;
#line 2379
  __wait.task_list.prev = & __wait.task_list;
  ldv_47051: 
#line 2379
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2379
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp___1) {
#line 2379
    goto ldv_47050;
  } else {

  }
#line 2379
  schedule();
#line 2379
  goto ldv_47051;
  ldv_47050: 
#line 2379
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47048: ;
#line 2382
  return;
}
}
#line 2382 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2384
  tmp = drbd_get_max_buffers(mdev);
#line 2384
  mxb = tmp;
#line 2385
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2385
  ap_bio = tmp___0;
#line 2387
  if (ap_bio < 0) {
#line 2387
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2387);
  } else {

  }
#line 2391
  if (ap_bio < mxb) {
#line 2392
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2393
  if (ap_bio == 0) {
#line 2393
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2393
    if (tmp___2 != 0) {
#line 2394
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2394
      if (tmp___1 == 0) {
#line 2395
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2396
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_47156: ;
#line 229
    goto ldv_47156;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_47161: ;
#line 238
    goto ldv_47161;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 283
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 283
  req = (struct drbd_request *)tmp;
#line 285
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 285
  if (tmp___0 != 0L) {
#line 286
    drbd_req_make_private_bio(req, bio_src);
#line 288
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 289
    req->mdev = mdev;
#line 290
    req->master_bio = bio_src;
#line 291
    req->epoch = 0U;
#line 292
    req->sector = bio_src->bi_sector;
#line 293
    req->size = bio_src->bi_size;
#line 294
    INIT_HLIST_NODE(& req->collision);
#line 295
    INIT_LIST_HEAD(& req->tl_requests);
#line 296
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 298
  return (req);
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 303
  mempool_free((void *)req, drbd_request_mempool);
#line 304
  return;
}
}
#line 319
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 325
void request_timer_fn(unsigned long data ) ;
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 368
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_37644.pdsk > 3 && (int )s.ldv_37644.conn > 13) && (int )s.ldv_37644.conn <= 21)));
}
}
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 378
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47251;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47251;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47251;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_47251;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_47251: 
#line 94
  cpu = pfo_ret__;
#line 95
  __vpp_verify = 0;
#line 95
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 95
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 95
  if ((mdev->vdisk)->part0.partno != 0) {
#line 95
    __vpp_verify___0 = 0;
#line 95
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 95
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 95
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 96
  __vpp_verify___1 = 0;
#line 96
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___2 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 97
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 98
  rcu_read_unlock();
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 104
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 105
  duration = (unsigned long )jiffies - req->start_time;
#line 107
  rcu_read_lock();
#line 107
  switch (4UL) {
  case 1UL: 
#line 107
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47284;
  case 2UL: 
#line 107
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47284;
  case 4UL: 
#line 107
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47284;
  case 8UL: 
#line 107
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_47284;
  default: 
#line 107
  __bad_percpu_size();
  }
  ldv_47284: 
#line 107
  cpu = pfo_ret__;
#line 108
  __vpp_verify = 0;
#line 108
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 108
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 108
  if ((mdev->vdisk)->part0.partno != 0) {
#line 108
    __vpp_verify___0 = 0;
#line 108
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 108
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 108
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 109
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 110
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 111
  rcu_read_unlock();
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 116
  s = req->rq_state;
#line 124
  list_del(& req->tl_requests);
#line 129
  if ((int )rw == 1) {
#line 134
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 135
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             135U);
    } else {

    }
#line 137
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 138
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         138U);
    } else {

    }
#line 150
    if ((s & 7UL) != 0UL) {
#line 151
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 151
      if (tmp___0 != 0) {
#line 152
        if ((s & 2048UL) != 0UL) {
#line 153
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 154
        put_ldev(mdev);
      } else {
#line 155
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 155
        if (tmp != 0) {
#line 156
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 163
  drbd_req_free(req);
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 175
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 175
  if (tmp != 0) {
#line 176
    return;
  } else {

  }
#line 178
  b = mdev->newest_tle;
#line 179
  b->w.cb = & w_send_barrier;
#line 184
  inc_ap_pending(mdev);
#line 185
  drbd_queue_work(& mdev->data.work, & b->w);
#line 186
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 187
  return;
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 192
  s = req->rq_state;
#line 204
  if (((int )mdev->state.ldv_37644.conn > 9 && (s & 32UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 207
    queue_barrier(mdev);
  } else {

  }
#line 212
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 213
    sector = req->sector;
#line 214
    size = (int const   )req->size;
#line 220
    slot = tl_hash_slot___0(mdev, sector);
#line 221
    n = slot->first;
#line 221
    goto ldv_47327;
    ldv_47326: 
#line 222
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 222
    if (tmp != 0) {
#line 223
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 221
    n = n->next;
    ldv_47327: ;
#line 221
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 221
      __builtin_prefetch((void const   *)n->next);
#line 221
      if (1 != 0) {
#line 221
        __mptr = (struct hlist_node  const  *)n;
#line 221
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 221
        if (1 != 0) {
#line 222
          goto ldv_47326;
        } else {
#line 224
          goto ldv_47328;
        }
      } else {
#line 224
        goto ldv_47328;
      }
    } else {

    }
    ldv_47328: 
#line 244
    slot = ee_hash_slot___0(mdev, req->sector);
#line 245
    n = slot->first;
#line 245
    goto ldv_47335;
    ldv_47334: 
#line 246
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 246
    if (tmp___0 != 0) {
#line 247
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 248
      goto ldv_47333;
    } else {

    }
#line 245
    n = n->next;
    ldv_47335: ;
#line 245
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 245
      __builtin_prefetch((void const   *)n->next);
#line 245
      if (1 != 0) {
#line 245
        __mptr___0 = (struct hlist_node  const  *)n;
#line 245
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 245
        if (1 != 0) {
#line 246
          goto ldv_47334;
        } else {
#line 248
          goto ldv_47333;
        }
      } else {
#line 248
        goto ldv_47333;
      }
    } else {

    }
    ldv_47333: ;
  } else {

  }
#line 251
  return;
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 258
  bio_endio(m->bio, m->error);
#line 259
  dec_ap_bio(mdev);
#line 260
  return;
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 270
  s = req->rq_state;
#line 271
  mdev = req->mdev;
#line 273
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 284
  if ((s & 16UL) != 0UL) {
#line 285
    return;
  } else {

  }
#line 286
  if ((s & 8UL) != 0UL) {
#line 287
    return;
  } else {

  }
#line 288
  if ((int )s & 1) {
#line 289
    return;
  } else {

  }
#line 291
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 313
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 314
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 314
    error = (int )tmp;
#line 318
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 318
    if (tmp___0 == 0) {
#line 319
      hlist_del(& req->collision);
    } else
#line 321
    if ((s & 440UL) != 0UL) {
#line 321
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              321);
    } else {

    }
#line 324
    if (rw == 1) {
#line 325
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 328
    _drbd_end_io_acct(mdev, req);
#line 330
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 331
    m->bio = req->master_bio;
#line 332
    req->master_bio = 0;
  } else {

  }
#line 335
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 340
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 341
  return;
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 348
  mdev = req->mdev;
#line 350
  tmp = is_susp(mdev->state);
#line 350
  if (tmp == 0) {
#line 351
    _req_may_be_done(req, m);
  } else {

  }
#line 352
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 379
  mdev = req->mdev;
#line 380
  sector = req->sector;
#line 381
  size = (int const   )req->size;
#line 387
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 387
  if (tmp == 0) {
#line 387
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            387);
  } else {

  }
#line 389
  tmp___0 = get_net_conf(mdev);
#line 389
  if (tmp___0 == 0) {
#line 390
    return (0);
  } else {

  }
#line 393
  _b = mdev->tl_hash_s == 0U;
#line 393
  if (_b != 0) {
#line 393
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            393);
  } else {

  }
#line 393
  if (_b != 0) {
#line 394
    goto out_no_conflict;
  } else {

  }
#line 395
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 395
  if (tmp___1 != 0L) {
#line 395
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (395), "i" (12UL));
    ldv_47368: ;
#line 395
    goto ldv_47368;
  } else {

  }
#line 398
  slot = tl_hash_slot___0(mdev, sector);
#line 399
  n = slot->first;
#line 399
  goto ldv_47375;
  ldv_47374: 
#line 400
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 400
  if (tmp___4 != 0) {
#line 401
    tmp___2 = get_current();
#line 401
    tmp___3 = get_current();
#line 401
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 407
    goto out_conflict;
  } else {

  }
#line 399
  n = n->next;
  ldv_47375: ;
#line 399
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 399
    __builtin_prefetch((void const   *)n->next);
#line 399
    if (1 != 0) {
#line 399
      __mptr = (struct hlist_node  const  *)n;
#line 399
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 399
      if (1 != 0) {
#line 400
        goto ldv_47374;
      } else {
#line 402
        goto ldv_47376;
      }
    } else {
#line 402
      goto ldv_47376;
    }
  } else {

  }
  ldv_47376: ;
#line 411
  if (mdev->ee_hash_s != 0U) {
#line 413
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 413
    if (tmp___5 != 0L) {
#line 413
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (413), "i" (12UL));
      ldv_47377: ;
#line 413
      goto ldv_47377;
    } else {

    }
#line 416
    slot = ee_hash_slot___0(mdev, sector);
#line 417
    n = slot->first;
#line 417
    goto ldv_47383;
    ldv_47382: 
#line 418
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 418
    if (tmp___8 != 0) {
#line 419
      tmp___6 = get_current();
#line 419
      tmp___7 = get_current();
#line 419
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 425
      goto out_conflict;
    } else {

    }
#line 417
    n = n->next;
    ldv_47383: ;
#line 417
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 417
      __builtin_prefetch((void const   *)n->next);
#line 417
      if (1 != 0) {
#line 417
        __mptr___0 = (struct hlist_node  const  *)n;
#line 417
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 417
        if (1 != 0) {
#line 418
          goto ldv_47382;
        } else {
#line 420
          goto ldv_47384;
        }
      } else {
#line 420
        goto ldv_47384;
      }
    } else {

    }
    ldv_47384: ;
  } else {

  }
  out_no_conflict: 
#line 434
  put_net_conf(mdev);
#line 435
  return (0);
  out_conflict: 
#line 438
  put_net_conf(mdev);
#line 439
  return (1);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 457
  mdev = req->mdev;
#line 458
  rv = 0;
#line 459
  m->bio = 0;
#line 461
  switch ((unsigned int )what) {
  default: 
#line 463
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          463);
#line 464
  goto ldv_47393;
  case 1U: ;
#line 475
  if ((req->rq_state & 504UL) != 0UL) {
#line 475
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            475);
  } else {

  }
#line 476
  req->rq_state = req->rq_state | 8UL;
#line 477
  inc_ap_pending(mdev);
#line 478
  goto ldv_47393;
  case 2U: ;
#line 482
  if ((req->rq_state & 7UL) != 0UL) {
#line 482
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            482);
  } else {

  }
#line 483
  req->rq_state = req->rq_state | 1UL;
#line 484
  goto ldv_47393;
  case 22U: ;
#line 487
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 488
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 490
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 492
  req->rq_state = req->rq_state | 6UL;
#line 493
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 495
  _req_may_be_done_not_susp(req, m);
#line 496
  put_ldev(mdev);
#line 497
  goto ldv_47393;
  case 21U: 
#line 500
  req->rq_state = req->rq_state | 2UL;
#line 501
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 503
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 504
  _req_may_be_done_not_susp(req, m);
#line 505
  put_ldev(mdev);
#line 506
  goto ldv_47393;
  case 20U: 
#line 510
  req->rq_state = req->rq_state | 2UL;
#line 511
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 512
  _req_may_be_done_not_susp(req, m);
#line 513
  put_ldev(mdev);
#line 514
  goto ldv_47393;
  case 19U: 
#line 517
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         517U);
#line 519
  req->rq_state = req->rq_state | 2UL;
#line 520
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 522
  if ((req->rq_state & 504UL) != 0UL) {
#line 522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            522);
  } else {

  }
#line 524
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 525
  put_ldev(mdev);
#line 529
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 530
    _req_may_be_done_not_susp(req, m);
#line 531
    goto ldv_47393;
  } else {

  }
#line 535
  req->rq_state = req->rq_state | 8UL;
#line 536
  inc_ap_pending(mdev);
  case 4U: 
#line 549
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 549
  hlist_add_head(& req->collision, tmp);
#line 551
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 553
  if ((req->rq_state & 8UL) == 0UL) {
#line 553
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            553);
  } else {

  }
#line 554
  req->rq_state = req->rq_state | 16UL;
#line 555
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 558
  drbd_queue_work(& mdev->data.work, & req->w);
#line 559
  goto ldv_47393;
  case 3U: 
#line 565
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 565
  hlist_add_head(& req->collision, tmp___0);
#line 585
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 589
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 589
  if (tmp___1 != 0) {
#line 589
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            589);
  } else {

  }
#line 591
  req->epoch = (mdev->newest_tle)->br_number;
#line 594
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 597
  if ((req->rq_state & 8UL) == 0UL) {
#line 597
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            597);
  } else {

  }
#line 598
  req->rq_state = req->rq_state | 16UL;
#line 599
  req->w.cb = & w_send_dblock;
#line 600
  drbd_queue_work(& mdev->data.work, & req->w);
#line 603
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 604
    queue_barrier(mdev);
  } else {

  }
#line 606
  goto ldv_47393;
  case 5U: 
#line 609
  req->rq_state = req->rq_state | 16UL;
#line 610
  req->w.cb = & w_send_oos;
#line 611
  drbd_queue_work(& mdev->data.work, & req->w);
#line 612
  goto ldv_47393;
  case 9U: ;
  case 6U: ;
  case 7U: 
#line 621
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 624
  _req_may_be_done_not_susp(req, m);
#line 625
  goto ldv_47393;
  case 8U: ;
#line 629
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 630
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 632
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 636
    if ((req->rq_state & 8UL) != 0UL) {
#line 637
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 637
      if (tmp___2 != 0) {
#line 637
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 637
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
      if (tmp___4 < 0) {
#line 637
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 637, tmp___3);
      } else {

      }
#line 638
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 639
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 645
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 646
  req->rq_state = req->rq_state | 32UL;
#line 652
  _req_may_be_done_not_susp(req, m);
#line 653
  goto ldv_47393;
  case 11U: 
#line 656
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 10U: ;
#line 661
  if ((req->rq_state & 8UL) != 0UL) {
#line 662
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 662
    if (tmp___5 != 0) {
#line 662
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 662
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 662
    if (tmp___7 < 0) {
#line 662
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 662
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 662, tmp___6);
    } else {

    }
  } else {

  }
#line 663
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 664
  req->rq_state = req->rq_state | 64UL;
#line 665
  if ((req->rq_state & 32UL) != 0UL && (req->rq_state & 1024UL) != 0UL) {
#line 666
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 670
  if ((req->rq_state & 16UL) == 0UL) {
#line 671
    _req_may_be_done(req, m);
  } else {

  }
#line 672
  goto ldv_47393;
  case 14U: 
#line 675
  req->rq_state = req->rq_state | 256UL;
  case 15U: ;
#line 680
  if ((unsigned int )what == 15U) {
#line 681
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 684
  req->rq_state = req->rq_state | 64UL;
  case 13U: ;
  case 12U: 
#line 702
  req->rq_state = req->rq_state | 128UL;
#line 703
  if ((req->rq_state & 8UL) == 0UL) {
#line 703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            703);
  } else {

  }
#line 704
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 704
  if (tmp___8 != 0) {
#line 704
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 704
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 704
  if (tmp___10 < 0) {
#line 704
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 704
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 704, tmp___9);
  } else {

  }
#line 705
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 706
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 707
  _req_may_be_done_not_susp(req, m);
#line 708
  goto ldv_47393;
  case 16U: ;
#line 712
  if ((req->rq_state & 8UL) != 0UL) {
#line 713
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 713
    if (tmp___11 != 0) {
#line 713
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 713
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 713
    if (tmp___13 < 0) {
#line 713
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 713
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 713, tmp___12);
    } else {

    }
#line 714
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 716
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 718
  req->rq_state = req->rq_state | 64UL;
#line 719
  _req_may_be_done_not_susp(req, m);
#line 721
  goto ldv_47393;
  case 24U: ;
#line 724
  if ((req->rq_state & 2UL) == 0UL) {
#line 725
    goto ldv_47393;
  } else {

  }
#line 727
  _req_may_be_done(req, m);
#line 728
  goto ldv_47393;
  case 25U: ;
#line 731
  if ((req->rq_state & 2UL) == 0UL) {
#line 732
    goto ldv_47393;
  } else {

  }
#line 734
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 736
  rv = 2;
#line 737
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 738
    rv = 1;
  } else {

  }
#line 740
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 741
  req->w.cb = & w_restart_disk_io;
#line 742
  drbd_queue_work(& mdev->data.work, & req->w);
#line 743
  goto ldv_47393;
  case 23U: ;
#line 750
  if ((req->rq_state & 128UL) == 0UL) {
#line 751
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 752
      drbd_queue_work(& mdev->data.work, & req->w);
#line 753
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 755
    goto ldv_47393;
  } else {

  }
  case 17U: ;
#line 760
  if ((req->rq_state & 1024UL) == 0UL) {
#line 761
    goto ldv_47393;
  } else {

  }
#line 763
  if ((req->rq_state & 8UL) != 0UL) {
#line 767
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 768
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 770
  if ((req->rq_state & 504UL) != 0UL) {
#line 771
    req->rq_state = req->rq_state | 64UL;
#line 772
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 773
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 775
  _req_may_be_done(req, m);
#line 776
  goto ldv_47393;
  case 18U: ;
#line 779
  if ((req->rq_state & 8UL) == 0UL) {
#line 779
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            779);
  } else {

  }
#line 780
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 780
  if (tmp___14 != 0) {
#line 780
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 780
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 780
  if (tmp___16 < 0) {
#line 780
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 780, tmp___15);
  } else {

  }
#line 781
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 782
  req->rq_state = req->rq_state | 192UL;
#line 783
  _req_may_be_done_not_susp(req, m);
#line 784
  goto ldv_47393;
  }
  ldv_47393: ;
#line 787
  return (rv);
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 802
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 803
    return (1);
  } else {

  }
#line 804
  if ((int )mdev->state.ldv_37644.disk > 4) {
#line 805
    return (0);
  } else {

  }
#line 806
  if ((int )mdev->state.ldv_37644.disk <= 3) {
#line 807
    return (0);
  } else {

  }
#line 809
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 810
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 812
  if (sector >= nr_sectors) {
#line 812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            812);
  } else {

  }
#line 813
  if (esector >= nr_sectors) {
#line 813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            813);
  } else {

  }
#line 815
  sbnr = sector >> 3;
#line 816
  ebnr = esector >> 3;
#line 818
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 818
  return (tmp == 0);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int congested ;
  int tmp___18 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 823
  rw = (int const   )bio->bi_rw & (int const   )257;
#line 824
  size = (int const   )bio->bi_size;
#line 825
  sector = bio->bi_sector;
#line 826
  b = 0;
#line 828
  send_oos = 0;
#line 829
  err = -5;
#line 830
  ret = 0;
#line 833
  req = drbd_req_new(mdev, bio);
#line 834
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 835
    dec_ap_bio(mdev);
#line 838
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 839
    bio_endio(bio, -12);
#line 840
    return (0);
  } else {

  }
#line 842
  req->start_time = start_time;
#line 844
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 845
  if (local == 0) {
#line 846
    bio_put(req->private_bio);
#line 847
    req->private_bio = 0;
  } else {

  }
#line 849
  if (rw == 1) {
#line 850
    remote = 1;
  } else {
#line 853
    if (local != 0) {
#line 854
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 854
      if (tmp == 0) {
#line 860
        local = 0;
#line 861
        bio_put(req->private_bio);
#line 862
        req->private_bio = 0;
#line 863
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 866
    remote = local == 0 && (int )mdev->state.ldv_37644.pdsk > 7;
  }
#line 877
  if ((rw == 256 && (int )mdev->state.ldv_37644.disk > 3) && local == 0) {
#line 878
    err = -11;
#line 879
    goto fail_and_free_req;
  } else {

  }
#line 887
  if (rw == 1 && local != 0) {
#line 887
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 887
    if (tmp___0 == 0) {
#line 888
      req->rq_state = req->rq_state | 2048UL;
#line 889
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 892
  if (remote != 0) {
#line 892
    tmp___1 = drbd_should_do_remote(mdev->state);
#line 892
    if ((int )tmp___1) {
#line 892
      tmp___2 = 1;
    } else {
#line 892
      tmp___2 = 0;
    }
  } else {
#line 892
    tmp___2 = 0;
  }
#line 892
  remote = tmp___2;
#line 893
  if (rw == 1) {
#line 893
    tmp___3 = drbd_should_send_oos(mdev->state);
#line 893
    if ((int )tmp___3) {
#line 893
      tmp___4 = 1;
    } else {
#line 893
      tmp___4 = 0;
    }
  } else {
#line 893
    tmp___4 = 0;
  }
#line 893
  send_oos = tmp___4;
#line 894
  if (remote != 0 && send_oos != 0) {
#line 894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            894);
  } else {

  }
#line 896
  if (local == 0 && remote == 0) {
#line 896
    tmp___6 = is_susp(mdev->state);
#line 896
    if (tmp___6 == 0) {
#line 897
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 897
      if (tmp___5 != 0) {
#line 898
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 899
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 908
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 908
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 908
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 912
      tmp___7 = kmalloc(56UL, 16U);
#line 912
      b = (struct drbd_tl_epoch *)tmp___7;
#line 913
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 914
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 915
        err = -12;
#line 916
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 921
  spin_lock_irq(& mdev->req_lock);
#line 923
  tmp___9 = is_susp(mdev->state);
#line 923
  if (tmp___9 != 0) {
#line 928
    ret = 1;
#line 929
    spin_unlock_irq(& mdev->req_lock);
#line 930
    goto fail_free_complete;
  } else {

  }
#line 933
  if (remote != 0 || send_oos != 0) {
#line 934
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 934
    remote = (int )tmp___10;
#line 935
    if (rw == 1) {
#line 935
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 935
      if ((int )tmp___11) {
#line 935
        tmp___12 = 1;
      } else {
#line 935
        tmp___12 = 0;
      }
    } else {
#line 935
      tmp___12 = 0;
    }
#line 935
    send_oos = tmp___12;
#line 936
    if (remote != 0 && send_oos != 0) {
#line 936
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              936);
    } else {

    }
#line 938
    if (remote == 0 && send_oos == 0) {
#line 939
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 940
    if (local == 0 && remote == 0) {
#line 941
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 942
      spin_unlock_irq(& mdev->req_lock);
#line 943
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 947
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 948
    mdev->unused_spare_tle = b;
#line 949
    b = 0;
  } else {

  }
#line 951
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 951
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 951
    if (tmp___13 != 0) {
#line 956
      spin_unlock_irq(& mdev->req_lock);
#line 957
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 962
  _drbd_start_io_acct(mdev, req, bio);
#line 974
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 974
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 974
    if (tmp___15 != 0) {
#line 976
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 977
      mdev->unused_spare_tle = 0;
    } else {
#line 974
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 979
  if (remote != 0 && rw == 1) {
#line 979
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 979
    if (tmp___14 != 0) {
#line 979
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              980);
    } else {

    }
  } else {

  }
#line 998
  if (remote != 0) {
#line 999
    _req_mod(req, to_be_send);
  } else {

  }
#line 1000
  if (local != 0) {
#line 1001
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1006
  if (rw == 1) {
#line 1006
    tmp___16 = _req_conflicts(req);
#line 1006
    if (tmp___16 != 0) {
#line 1007
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1009
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 1013
  if (remote != 0) {
#line 1018
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1022
  if (send_oos != 0) {
#line 1022
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1022U);
#line 1022
    if (tmp___17 != 0) {
#line 1023
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1025
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1027
    congested = 0;
#line 1029
    if ((mdev->net_conf)->cong_fill != 0) {
#line 1029
      tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 1029
      if (tmp___18 >= (mdev->net_conf)->cong_fill) {
#line 1031
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 1032
        congested = 1;
      } else {

      }
    } else {

    }
#line 1035
    if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 1036
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 1037
      congested = 1;
    } else {

    }
#line 1040
    if (congested != 0) {
#line 1041
      queue_barrier(mdev);
#line 1043
      if ((mdev->net_conf)->on_congestion == 1) {
#line 1044
        __ns.i = mdev->state.i;
#line 1044
        __ns.ldv_37644.conn = 22U;
#line 1044
        _drbd_set_state(mdev, __ns, 0, 0);
      } else {
#line 1046
        __ns___0.i = mdev->state.i;
#line 1046
        __ns___0.ldv_37644.conn = 1U;
#line 1046
        _drbd_set_state(mdev, __ns___0, 0, 0);
      }
    } else {

    }
  } else {

  }
#line 1050
  spin_unlock_irq(& mdev->req_lock);
#line 1051
  kfree((void const   *)b);
#line 1053
  if (local != 0) {
#line 1054
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1061
    tmp___20 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1061
    if (tmp___20 != 0) {
#line 1062
      tmp___19 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1062
      if (tmp___19 != 0) {
#line 1065
        bio_endio(req->private_bio, -5);
      } else {
#line 1067
        generic_make_request(req->private_bio);
      }
#line 1068
      put_ldev(mdev);
    } else {
#line 1070
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1073
  return (0);
  fail_conflicting: 
#line 1082
  _drbd_end_io_acct(mdev, req);
#line 1083
  spin_unlock_irq(& mdev->req_lock);
#line 1084
  if (remote != 0) {
#line 1085
    tmp___21 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1085
    if (tmp___21 != 0) {
#line 1085
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1085
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1085
    if (tmp___23 < 0) {
#line 1085
      tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1085
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1085, tmp___22);
    } else {

    }
  } else {

  }
#line 1088
  err = 0;
  fail_free_complete: ;
#line 1091
  if ((req->rq_state & 2048UL) != 0UL) {
#line 1092
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1094
  if (local != 0) {
#line 1095
    bio_put(req->private_bio);
#line 1096
    req->private_bio = 0;
#line 1097
    put_ldev(mdev);
  } else {

  }
#line 1099
  if (ret == 0) {
#line 1100
    bio_endio(bio, err);
  } else {

  }
#line 1102
  drbd_req_free(req);
#line 1103
  dec_ap_bio(mdev);
#line 1104
  kfree((void const   *)b);
#line 1106
  return (ret);
}
}
#line 1114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1116
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1118
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1118
    if (tmp___1 != 0) {
#line 1119
      tmp = get_current();
#line 1119
      tmp___0 = get_current();
#line 1119
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1125
    return (1);
  } else {

  }
#line 1128
  return (0);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1134
  mdev = (struct drbd_conf *)q->queuedata;
#line 1137
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1137
  if (tmp != 0) {
#line 1138
    bio_endio(bio, -1);
#line 1139
    return (0);
  } else {

  }
#line 1142
  start_time = jiffies;
#line 1147
  if (bio->bi_size == 0U) {
#line 1147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1147);
  } else {

  }
#line 1148
  if ((bio->bi_size & 511U) != 0U) {
#line 1148
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1148);
  } else {

  }
#line 1149
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1149);
  } else {

  }
#line 1153
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1154
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1156
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1156
  if (tmp___1 != 0L) {
#line 1157
    inc_ap_bio(mdev, 1);
#line 1158
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1158
    return (tmp___0);
  } else {

  }
#line 1163
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1165
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1169
    bio_endio(bio, -22);
  } else {
#line 1181
    sect = bio->bi_sector;
#line 1182
    sps = 256;
#line 1183
    mask = sps + -1;
#line 1184
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1185
    bp = bio_split(bio, (int )first_sectors);
#line 1192
    inc_ap_bio(mdev, 3);
#line 1194
    if (s_enr + 1U != e_enr) {
#line 1194
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1194);
    } else {

    }
#line 1196
    goto ldv_47491;
    ldv_47490: 
#line 1197
    inc_ap_bio(mdev, 1);
    ldv_47491: 
#line 1196
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1196
    if (tmp___2 != 0) {
#line 1197
      goto ldv_47490;
    } else {

    }

#line 1199
    goto ldv_47494;
    ldv_47493: 
#line 1200
    inc_ap_bio(mdev, 1);
    ldv_47494: 
#line 1199
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1199
    if (tmp___3 != 0) {
#line 1200
      goto ldv_47493;
    } else {

    }
#line 1202
    dec_ap_bio(mdev);
#line 1204
    bio_pair_release(bp);
  }
#line 1206
  return (0);
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1224
  mdev = (struct drbd_conf *)q->queuedata;
#line 1225
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1227
  bio_size = bvm->bi_size;
#line 1230
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1232
  if (limit < 0) {
#line 1233
    limit = 0;
  } else {

  }
#line 1234
  if (bio_size == 0U) {
#line 1235
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1236
      limit = (int )bvec->bv_len;
    } else
#line 1237
    if (limit != 0) {
#line 1237
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1237
      if (tmp != 0) {
#line 1238
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1240
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1241
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1242
          _min1 = limit;
#line 1242
          _min2 = backing_limit;
#line 1242
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1244
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1246
  return (limit);
}
}
#line 1249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long et ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1251
  mdev = (struct drbd_conf *)data;
#line 1254
  et = 0UL;
#line 1256
  tmp = get_net_conf(mdev);
#line 1256
  if (tmp != 0) {
#line 1257
    et = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
#line 1258
    put_net_conf(mdev);
  } else {

  }
#line 1260
  if (et == 0UL || (int )mdev->state.ldv_37644.conn <= 8) {
#line 1261
    return;
  } else {

  }
#line 1263
  spin_lock_irq(& mdev->req_lock);
#line 1264
  le = & (mdev->oldest_tle)->requests;
#line 1265
  tmp___0 = list_empty((struct list_head  const  *)le);
#line 1265
  if (tmp___0 != 0) {
#line 1266
    spin_unlock_irq(& mdev->req_lock);
#line 1267
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
#line 1268
    return;
  } else {

  }
#line 1271
  le = le->prev;
#line 1272
  __mptr = (struct list_head  const  *)le;
#line 1272
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1273
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )(req->start_time + et) >= 0L) {
#line 1274
    if ((req->rq_state & 8UL) != 0UL) {
#line 1275
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1276
      __ns.i = mdev->state.i;
#line 1276
      __ns.ldv_37644.conn = 3U;
#line 1276
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
    } else {
#line 1278
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing block device frozen?\n");
#line 1279
      mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
    }
  } else {
#line 1282
    mod_timer(& mdev->request_timer, req->start_time + et);
  }
#line 1285
  spin_unlock_irq(& mdev->req_lock);
#line 1286
  return;
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1293
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1295
  mutex_lock(ldv_func_arg1);
#line 1296
  return;
}
}
#line 1298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_74(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1303
  tmp = mutex_trylock(ldv_func_arg1);
#line 1303
  ldv_func_res = tmp;
#line 1305
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1305
  return (tmp___0);
#line 1307
  return (ldv_func_res);
}
}
#line 1310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1315
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1317
  mutex_unlock(ldv_func_arg1);
#line 1318
  return;
}
}
#line 1320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1325
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1327
  mutex_lock(ldv_func_arg1);
#line 1328
  return;
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1335
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1337
  mutex_unlock(ldv_func_arg1);
#line 1338
  return;
}
}
#line 1340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1345
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1347
  mutex_unlock(ldv_func_arg1);
#line 1348
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 130
__inline static int ldv_mutex_is_locked_91(struct mutex *lock ) ;
#line 162
int ldv_mutex_trylock_86(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 43
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 46
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 715 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 717
  return ((bdev->bd_disk)->queue);
}
}
#line 982 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 984
  retval = 512;
#line 986
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 987
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 989
  return ((unsigned short )retval);
}
}
#line 992 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 994
  tmp = bdev_get_queue(bdev);
#line 994
  tmp___0 = queue_logical_block_size(tmp);
#line 994
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1539 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1664
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1674
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1675
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1683
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_37644.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_46877;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_37644.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_37644.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_46877;
  }
  ldv_46877: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 132
  md_io.mdev = mdev;
#line 133
  init_completion(& md_io.event);
#line 134
  md_io.error = 0;
#line 136
  if (rw & 1) {
#line 136
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 136
    if (tmp == 0) {
#line 137
      rw = rw | 4096;
    } else {

    }
  } else {

  }
#line 138
  rw = rw | 16;
#line 140
  bio = bio_alloc(16U, 1);
#line 141
  bio->bi_bdev = bdev->md_bdev;
#line 142
  bio->bi_sector = sector;
#line 143
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 143
  ok = tmp___0 == size;
#line 144
  if (ok == 0) {
#line 145
    goto out;
  } else {

  }
#line 146
  bio->bi_private = (void *)(& md_io);
#line 147
  bio->bi_end_io = & drbd_md_io_complete;
#line 148
  bio->bi_rw = (unsigned long )rw;
#line 150
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 150
  if (tmp___1 != 0) {
#line 151
    bio_endio(bio, -5);
  } else {
#line 153
    submit_bio(rw, bio);
  }
#line 154
  wait_for_completion(& md_io.event);
#line 155
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 158
  bio_put(bio);
#line 159
  return (ok);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 166
  offset = 0;
#line 167
  iop = mdev->md_io_page;
#line 169
  tmp = ldv_mutex_is_locked_91(& mdev->md_io_mutex);
#line 169
  if (tmp == 0) {
#line 169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            169);
  } else {

  }
#line 171
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 171
  if (tmp___0 != 0L) {
#line 171
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (171), "i" (12UL));
    ldv_47193: ;
#line 171
    goto ldv_47193;
  } else {

  }
#line 173
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 173
  logical_block_size = (int )tmp___1;
#line 174
  if (logical_block_size == 0) {
#line 175
    logical_block_size = 512;
  } else {

  }
#line 178
  if (logical_block_size != 512) {
#line 179
    mask = logical_block_size / 512 + -1;
#line 180
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 180
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              180);
    } else {

    }
#line 181
    if ((mask + 1) * 512 != logical_block_size) {
#line 181
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              181);
    } else {

    }
#line 182
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 183
    sector = (sector_t )(~ mask) & sector;
#line 184
    iop = mdev->md_io_tmpp;
#line 186
    if (rw & 1) {
#line 189
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 189
      p = tmp___2;
#line 190
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 190
      hp = tmp___3;
#line 192
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 195
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 195
      if (tmp___4 != 0L) {
#line 196
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 199
        return (0);
      } else {

      }
#line 202
      __len = 512UL;
#line 202
      if (__len > 63UL) {
#line 202
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 202
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 206
  tmp___7 = drbd_md_first_sector(bdev);
#line 206
  if (tmp___7 > sector) {
#line 208
    tmp___5 = get_current();
#line 208
    tmp___6 = get_current();
#line 208
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 206
    tmp___8 = drbd_md_last_sector(bdev);
#line 206
    if (tmp___8 < sector) {
#line 208
      tmp___5 = get_current();
#line 208
      tmp___6 = get_current();
#line 208
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 212
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 213
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 213
  if (tmp___9 != 0L) {
#line 214
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 216
    return (0);
  } else {

  }
#line 219
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 220
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 220
    p___0 = tmp___10;
#line 221
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 221
    hp___0 = tmp___11;
#line 223
    __len___0 = 512UL;
#line 223
    if (__len___0 > 63UL) {
#line 223
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 223
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 226
  return (ok);
}
}
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 233
  al_flags = 0UL;
#line 236
  spin_lock_irq(& mdev->al_lock);
#line 237
  tmp = lc_find(mdev->resync, enr / 4U);
#line 238
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 238
  if (tmp___2 != 0L) {
#line 239
    __mptr = (struct lc_element  const  *)tmp;
#line 239
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 240
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 240
    if (tmp___1 != 0) {
#line 241
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 241
      wake = tmp___0 == 0;
#line 242
      spin_unlock_irq(& mdev->al_lock);
#line 243
      if (wake != 0) {
#line 244
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 245
      return (0);
    } else {

    }
  } else {

  }
#line 248
  al_ext = lc_get(mdev->act_log, enr);
#line 249
  al_flags = (mdev->act_log)->flags;
#line 250
  spin_unlock_irq(& mdev->al_lock);
#line 261
  return (al_ext);
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 266
  enr = (unsigned int )(sector >> 13);
#line 270
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 270
  if (tmp <= 0) {
#line 270
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            270);
  } else {

  }
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_47223;
  } else {

  }
#line 272
  tmp___0 = get_current();
#line 272
  __wait.flags = 0U;
#line 272
  __wait.private = (void *)tmp___0;
#line 272
  __wait.func = & autoremove_wake_function;
#line 272
  __wait.task_list.next = & __wait.task_list;
#line 272
  __wait.task_list.prev = & __wait.task_list;
  ldv_47226: 
#line 272
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_47225;
  } else {

  }
#line 272
  schedule();
#line 272
  goto ldv_47226;
  ldv_47225: 
#line 272
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47223: ;
#line 274
  if (al_ext->lc_number != enr) {
#line 281
    init_completion(& al_work.event);
#line 282
    al_work.al_ext = al_ext;
#line 283
    al_work.enr = enr;
#line 284
    al_work.old_enr = al_ext->lc_number;
#line 285
    al_work.w.cb = & w_al_write_transaction;
#line 286
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 287
    wait_for_completion(& al_work.event);
#line 289
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 291
    spin_lock_irq(& mdev->al_lock);
#line 292
    lc_changed(mdev->act_log, al_ext);
#line 293
    spin_unlock_irq(& mdev->al_lock);
#line 294
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 296
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 300
  enr = (unsigned int )(sector >> 13);
#line 304
  tmp = spinlock_check(& mdev->al_lock);
#line 304
  flags = _raw_spin_lock_irqsave(tmp);
#line 306
  extent = lc_find(mdev->act_log, enr);
#line 308
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 309
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 311
    return;
  } else {

  }
#line 314
  tmp___0 = lc_put(mdev->act_log, extent);
#line 314
  if (tmp___0 == 0U) {
#line 315
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 317
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 331
  return (al_enr >> 5);
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 340
  return (rs_enr >> 3);
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 350
  __mptr = (struct drbd_work  const  *)w;
#line 350
  aw = (struct update_al_work *)__mptr;
#line 351
  updated = aw->al_ext;
#line 352
  new_enr = aw->enr;
#line 353
  evicted = aw->old_enr;
#line 358
  xor_sum = 0U;
#line 360
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 360
  if (tmp___0 == 0) {
#line 361
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.disk);
#line 361
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 364
    complete(& ((struct update_al_work *)w)->event);
#line 365
    return (1);
  } else {

  }
#line 373
  if ((int )mdev->state.ldv_37644.conn <= 9 && evicted != 4294967295U) {
#line 374
    tmp___1 = al_extent_to_bm_page(evicted);
#line 374
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 377
  if ((int )mdev->state.ldv_37644.disk <= 3) {
#line 378
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.disk);
#line 378
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 381
    complete(& ((struct update_al_work *)w)->event);
#line 382
    put_ldev(mdev);
#line 383
    return (1);
  } else {

  }
#line 386
  ldv_mutex_lock_92(& mdev->md_io_mutex);
#line 387
  tmp___3 = lowmem_page_address(mdev->md_io_page);
#line 387
  buffer = (struct al_transaction *)tmp___3;
#line 389
  buffer->magic = 1728214147U;
#line 390
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 390
  buffer->tr_number = tmp___4;
#line 392
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 392
  n = (int )tmp___5;
#line 394
  tmp___6 = __fswab32((__u32 )n);
#line 394
  buffer->updates[0].pos = tmp___6;
#line 395
  tmp___7 = __fswab32(new_enr);
#line 395
  buffer->updates[0].extent = tmp___7;
#line 397
  xor_sum = xor_sum ^ new_enr;
#line 399
  __min1 = 61;
#line 399
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 399
  mx = __min1 < __min2 ? __min1 : __min2;
#line 401
  i = 0;
#line 401
  goto ldv_47266;
  ldv_47265: 
#line 402
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 403
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 403
  extent_nr = tmp___8->lc_number;
#line 404
  tmp___9 = __fswab32(idx);
#line 404
  buffer->updates[i + 1].pos = tmp___9;
#line 405
  tmp___10 = __fswab32(extent_nr);
#line 405
  buffer->updates[i + 1].extent = tmp___10;
#line 406
  xor_sum = xor_sum ^ extent_nr;
#line 401
  i = i + 1;
  ldv_47266: ;
#line 401
  if (i < mx) {
#line 402
    goto ldv_47265;
  } else {

  }

#line 408
  goto ldv_47269;
  ldv_47268: 
#line 409
  buffer->updates[i + 1].pos = 4294967295U;
#line 410
  buffer->updates[i + 1].extent = 4294967295U;
#line 411
  xor_sum = ~ xor_sum;
#line 408
  i = i + 1;
  ldv_47269: ;
#line 408
  if (i <= 60) {
#line 409
    goto ldv_47268;
  } else {

  }
#line 413
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 414
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 415
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 417
  tmp___11 = __fswab32(xor_sum);
#line 417
  buffer->xor_sum = tmp___11;
#line 419
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 422
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 422
  if (tmp___12 == 0) {
#line 423
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 425
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 425
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 427
    mdev->al_tr_pos = 0;
  } else {

  }
#line 429
  if (mdev->al_tr_pos > 63) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            429);
  } else {

  }
#line 430
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 432
  ldv_mutex_unlock_93(& mdev->md_io_mutex);
#line 434
  complete(& ((struct update_al_work *)w)->event);
#line 435
  put_ldev(mdev);
#line 437
  return (1);
}
}
#line 449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 456
  xor_sum = 0U;
#line 458
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 462
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 462
  if (tmp == 0) {
#line 463
    return (-1);
  } else {

  }
#line 465
  tmp___0 = __fswab32(b->magic);
#line 465
  rv = tmp___0 == 2205418087U;
#line 467
  i = 0;
#line 467
  goto ldv_47283;
  ldv_47282: 
#line 468
  tmp___1 = __fswab32(b->updates[i].extent);
#line 468
  xor_sum = tmp___1 ^ xor_sum;
#line 467
  i = i + 1;
  ldv_47283: ;
#line 467
  if (i <= 61) {
#line 468
    goto ldv_47282;
  } else {

  }
#line 469
  tmp___2 = __fswab32(b->xor_sum);
#line 469
  rv = (tmp___2 == xor_sum) & rv;
#line 471
  return (rv);
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 487
  active_extents = 0;
#line 488
  transactions = 0;
#line 489
  found_valid = 0;
#line 490
  from = 0;
#line 491
  to = 0;
#line 492
  from_tnr = 0U;
#line 493
  to_tnr = 0U;
#line 496
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 501
  ldv_mutex_lock_94(& mdev->md_io_mutex);
#line 502
  tmp = lowmem_page_address(mdev->md_io_page);
#line 502
  buffer = (struct al_transaction *)tmp;
#line 505
  i = 0;
#line 505
  goto ldv_47303;
  ldv_47302: 
#line 506
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 507
  if (rv == 0) {
#line 508
    goto ldv_47301;
  } else {

  }
#line 509
  if (rv == -1) {
#line 510
    ldv_mutex_unlock_95(& mdev->md_io_mutex);
#line 511
    return (0);
  } else {

  }
#line 513
  tmp___0 = __fswab32(buffer->tr_number);
#line 513
  cnr = tmp___0;
#line 515
  found_valid = found_valid + 1;
#line 515
  if (found_valid == 1) {
#line 516
    from = i;
#line 517
    to = i;
#line 518
    from_tnr = cnr;
#line 519
    to_tnr = cnr;
#line 520
    goto ldv_47301;
  } else {

  }
#line 522
  if ((int )cnr - (int )from_tnr < 0) {
#line 523
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 523
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              523);
    } else {

    }
#line 524
    from = i;
#line 525
    from_tnr = cnr;
  } else {

  }
#line 527
  if ((int )cnr - (int )to_tnr > 0) {
#line 528
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 528
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              528);
    } else {

    }
#line 529
    to = i;
#line 530
    to_tnr = cnr;
  } else {

  }
  ldv_47301: 
#line 505
  i = i + 1;
  ldv_47303: ;
#line 505
  if (i <= mx) {
#line 506
    goto ldv_47302;
  } else {

  }

#line 534
  if (found_valid == 0) {
#line 535
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 536
    ldv_mutex_unlock_96(& mdev->md_io_mutex);
#line 537
    return (1);
  } else {

  }
#line 542
  i = from;
  ldv_47318: 
#line 548
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 549
  _b = rv == 0;
#line 549
  if (_b != 0) {
#line 549
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            549);
  } else {

  }
#line 549
  if (_b != 0) {
#line 549
    goto cancel;
  } else {

  }
#line 550
  if (rv == -1) {
#line 551
    ldv_mutex_unlock_97(& mdev->md_io_mutex);
#line 552
    return (0);
  } else {

  }
#line 555
  tmp___1 = __fswab32(buffer->tr_number);
#line 555
  trn = tmp___1;
#line 557
  spin_lock_irq(& mdev->al_lock);
#line 563
  j = 61;
#line 563
  goto ldv_47315;
  ldv_47314: 
#line 564
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 564
  pos = (int )tmp___2;
#line 565
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 565
  extent_nr = tmp___3;
#line 567
  if (extent_nr == 4294967295U) {
#line 568
    goto ldv_47313;
  } else {

  }
#line 570
  lc_set(mdev->act_log, extent_nr, pos);
#line 571
  active_extents = active_extents + 1;
  ldv_47313: 
#line 563
  j = j - 1;
  ldv_47315: ;
#line 563
  if (j >= 0) {
#line 564
    goto ldv_47314;
  } else {

  }
#line 573
  spin_unlock_irq(& mdev->al_lock);
#line 575
  transactions = transactions + 1;
  cancel: ;
#line 578
  if (i == to) {
#line 579
    goto ldv_47317;
  } else {

  }
#line 580
  i = i + 1;
#line 581
  if (i > mx) {
#line 582
    i = 0;
  } else {

  }
#line 583
  goto ldv_47318;
  ldv_47317: 
#line 585
  mdev->al_tr_number = to_tnr + 1U;
#line 586
  mdev->al_tr_pos = to;
#line 587
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 587
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 589
    mdev->al_tr_pos = 0;
  } else {

  }
#line 592
  ldv_mutex_unlock_98(& mdev->md_io_mutex);
#line 594
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 597
  return (1);
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 607
  add = 0UL;
#line 611
  tmp___0 = lc_try_lock(mdev->act_log);
#line 611
  if (tmp___0 != 0) {
#line 611
    goto ldv_47327;
  } else {

  }
#line 611
  tmp___1 = get_current();
#line 611
  __wait.flags = 0U;
#line 611
  __wait.private = (void *)tmp___1;
#line 611
  __wait.func = & autoremove_wake_function;
#line 611
  __wait.task_list.next = & __wait.task_list;
#line 611
  __wait.task_list.prev = & __wait.task_list;
  ldv_47330: 
#line 611
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 611
  tmp___2 = lc_try_lock(mdev->act_log);
#line 611
  if (tmp___2 != 0) {
#line 611
    goto ldv_47329;
  } else {

  }
#line 611
  schedule();
#line 611
  goto ldv_47330;
  ldv_47329: 
#line 611
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47327: 
#line 613
  i = 0;
#line 613
  goto ldv_47335;
  ldv_47334: 
#line 614
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 614
  enr = tmp___3->lc_number;
#line 615
  if (enr == 4294967295U) {
#line 616
    goto ldv_47331;
  } else {

  }
#line 617
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 617
  tmp = (int )tmp___4;
#line 618
  descriptor.modname = "drbd";
#line 618
  descriptor.function = "drbd_al_apply_to_bm";
#line 618
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 618
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 618
  descriptor.lineno = 618U;
#line 618
  descriptor.flags = 0U;
#line 618
  descriptor.enabled = (char)0;
#line 618
  tmp___5 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 618
  if (tmp___5 != 0L) {
#line 618
    dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "AL: set %d bits in extent %u\n",
               tmp, enr);
  } else {

  }
#line 619
  add = (unsigned long )tmp + add;
  ldv_47331: 
#line 613
  i = i + 1;
  ldv_47335: ;
#line 613
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 614
    goto ldv_47334;
  } else {

  }
#line 622
  lc_unlock(mdev->act_log);
#line 623
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 625
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 625
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 626
  return;
}
}
#line 629 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 633
  spin_lock_irq(& mdev->al_lock);
#line 634
  rv = al_ext->refcnt == 0U;
#line 635
  tmp = __builtin_expect(rv != 0, 1L);
#line 635
  if (tmp != 0L) {
#line 636
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 637
  spin_unlock_irq(& mdev->al_lock);
#line 639
  return (rv);
}
}
#line 651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 656
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 656
  if (tmp == 0) {
#line 656
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            656);
  } else {

  }
#line 658
  i = 0;
#line 658
  goto ldv_47353;
  ldv_47352: 
#line 659
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 660
  if (al_ext->lc_number == 4294967295U) {
#line 661
    goto ldv_47347;
  } else {

  }
#line 662
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 662
  if (tmp___0 != 0) {
#line 662
    goto ldv_47348;
  } else {

  }
#line 662
  tmp___1 = get_current();
#line 662
  __wait.flags = 0U;
#line 662
  __wait.private = (void *)tmp___1;
#line 662
  __wait.func = & autoremove_wake_function;
#line 662
  __wait.task_list.next = & __wait.task_list;
#line 662
  __wait.task_list.prev = & __wait.task_list;
  ldv_47351: 
#line 662
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 662
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 662
  if (tmp___2 != 0) {
#line 662
    goto ldv_47350;
  } else {

  }
#line 662
  schedule();
#line 662
  goto ldv_47351;
  ldv_47350: 
#line 662
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47348: ;
  ldv_47347: 
#line 658
  i = i + 1;
  ldv_47353: ;
#line 658
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 659
    goto ldv_47352;
  } else {

  }
#line 665
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 666
  return;
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 670
  __mptr = (struct drbd_work  const  *)w;
#line 670
  udw = (struct update_odbm_work *)__mptr;
#line 672
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 672
  if (tmp___0 == 0) {
#line 673
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 673
    if (tmp != 0) {
#line 674
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 675
    kfree((void const   *)udw);
#line 676
    return (1);
  } else {

  }
#line 679
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 679
  drbd_bm_write_page(mdev, tmp___1);
#line 680
  put_ldev(mdev);
#line 682
  kfree((void const   *)udw);
#line 684
  tmp___2 = drbd_bm_total_weight(mdev);
#line 684
  if (tmp___2 <= mdev->rs_failed) {
#line 685
    switch ((int )mdev->state.ldv_37644.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 688
    drbd_resync_finished(mdev);
    default: ;
#line 691
    goto ldv_47369;
    }
    ldv_47369: ;
  } else {

  }
#line 694
  drbd_bcast_sync_progress(mdev);
#line 696
  return (1);
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 714
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 714
  if (tmp == 0) {
#line 714
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            714);
  } else {

  }
#line 718
  enr = (unsigned int )(sector >> 15);
#line 720
  e = lc_get(mdev->resync, enr);
#line 721
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 722
    __mptr = (struct lc_element  const  *)e;
#line 722
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 723
    if (ext->lce.lc_number == enr) {
#line 724
      if (success != 0) {
#line 725
        ext->rs_left = ext->rs_left - count;
      } else {
#line 727
        ext->rs_failed = ext->rs_failed + count;
      }
#line 728
      if (ext->rs_left < ext->rs_failed) {
#line 729
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 734
        dump_stack();
#line 736
        lc_put(mdev->resync, & ext->lce);
#line 737
        val.i = 0U;
#line 737
        val.ldv_37644.conn = 1U;
#line 737
        mask.i = 0U;
#line 737
        mask.ldv_37644.conn = 31U;
#line 737
        drbd_force_state(mdev, mask, val);
#line 738
        return;
      } else {

      }
    } else {
#line 747
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 747
      rs_left = tmp___0;
#line 748
      if (ext->flags != 0UL) {
#line 749
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 753
        ext->flags = 0UL;
      } else {

      }
#line 755
      if (ext->rs_failed != 0) {
#line 756
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 760
      ext->rs_left = rs_left;
#line 761
      ext->rs_failed = success == 0 ? count : 0;
#line 762
      lc_changed(mdev->resync, & ext->lce);
    }
#line 764
    lc_put(mdev->resync, & ext->lce);
#line 767
    if (ext->rs_left == ext->rs_failed) {
#line 768
      ext->rs_failed = 0;
#line 770
      tmp___1 = kmalloc(32UL, 32U);
#line 770
      udw = (struct update_odbm_work *)tmp___1;
#line 771
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 772
        udw->enr = ext->lce.lc_number;
#line 773
        udw->w.cb = & w_update_odbm;
#line 774
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 776
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 784
  return;
}
}
#line 787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 789
  now = jiffies;
#line 790
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 791
  next = (mdev->rs_last_mark + 1) % 8;
#line 792
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 793
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 796
      mdev->rs_mark_time[next] = now;
#line 797
      mdev->rs_mark_left[next] = still_to_go;
#line 798
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 800
  return;
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 815
  count = 0UL;
#line 817
  wake_up = 0;
#line 820
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 821
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 823
    return;
  } else {

  }
#line 825
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 826
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 828
  _b = sector >= nr_sectors;
#line 828
  if (_b != 0) {
#line 828
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            828);
  } else {

  }
#line 828
  if (_b != 0) {
#line 828
    return;
  } else {

  }
#line 829
  _b___0 = esector >= nr_sectors;
#line 829
  if (_b___0 != 0) {
#line 829
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            829);
  } else {

  }
#line 829
  if (_b___0 != 0) {
#line 829
    esector = nr_sectors - 1UL;
  } else {

  }
#line 831
  lbnr = (nr_sectors - 1UL) >> 3;
#line 836
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 836
  if (tmp != 0L) {
#line 837
    return;
  } else {

  }
#line 838
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 838
  if (tmp___0 != 0L) {
#line 839
    ebnr = lbnr;
  } else {
#line 841
    ebnr = (esector - 7UL) >> 3;
  }
#line 842
  sbnr = (sector + 7UL) >> 3;
#line 844
  if (sbnr > ebnr) {
#line 845
    return;
  } else {

  }
#line 851
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 851
  count = (unsigned long )tmp___1;
#line 852
  if (count != 0UL) {
#line 852
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 852
    if (tmp___4 != 0) {
#line 853
      tmp___2 = drbd_bm_total_weight(mdev);
#line 853
      drbd_advance_rs_marks(mdev, tmp___2);
#line 854
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 854
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 855
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 856
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 860
      wake_up = 1;
#line 861
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 863
  if (wake_up != 0) {
#line 864
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 865
  return;
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 880
  count = 0U;
#line 883
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 884
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 886
    return (0);
  } else {

  }
#line 889
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 889
  if (tmp == 0) {
#line 890
    return (0);
  } else {

  }
#line 892
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 893
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 895
  _b = sector >= nr_sectors;
#line 895
  if (_b != 0) {
#line 895
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            895);
  } else {

  }
#line 895
  if (_b != 0) {
#line 896
    goto out;
  } else {

  }
#line 897
  _b___0 = esector >= nr_sectors;
#line 897
  if (_b___0 != 0) {
#line 897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            897);
  } else {

  }
#line 897
  if (_b___0 != 0) {
#line 898
    esector = nr_sectors - 1UL;
  } else {

  }
#line 900
  lbnr = (nr_sectors - 1UL) >> 3;
#line 904
  sbnr = sector >> 3;
#line 905
  ebnr = esector >> 3;
#line 909
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 909
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 910
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 910
  count = (unsigned int )tmp___1;
#line 912
  enr = (unsigned int )(sector >> 15);
#line 913
  e = lc_find(mdev->resync, enr);
#line 914
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 915
    __mptr = (struct lc_element  const  *)e;
#line 915
    __mptr___0 = (struct lc_element  const  *)e;
#line 915
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 916
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 919
  put_ldev(mdev);
#line 921
  return ((int )count);
}
}
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 929
  wakeup = 0;
#line 932
  spin_lock_irq(& mdev->al_lock);
#line 933
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 934
    spin_unlock_irq(& mdev->al_lock);
#line 935
    return (0);
  } else {

  }
#line 937
  e = lc_get(mdev->resync, enr);
#line 938
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 938
    __mptr = (struct lc_element  const  *)e;
#line 938
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 938
    bm_ext = 0;
  }
#line 939
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 940
    if (bm_ext->lce.lc_number != enr) {
#line 941
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 942
      bm_ext->rs_failed = 0;
#line 943
      lc_changed(mdev->resync, & bm_ext->lce);
#line 944
      wakeup = 1;
    } else {

    }
#line 946
    if (bm_ext->lce.refcnt == 1U) {
#line 947
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 948
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 950
  rs_flags = (mdev->resync)->flags;
#line 951
  spin_unlock_irq(& mdev->al_lock);
#line 952
  if (wakeup != 0) {
#line 953
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 955
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 956
    if ((rs_flags & 4UL) != 0UL) {
#line 957
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 959
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 959
    if (tmp != 0L) {
#line 959
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (959), "i" (12UL));
      ldv_47460: ;
#line 959
      goto ldv_47460;
    } else {

    }
  } else {

  }
#line 962
  return (bm_ext);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 968
  rv = 0;
#line 970
  spin_lock_irq(& mdev->al_lock);
#line 971
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 971
  if (tmp != 0L) {
#line 972
    rv = 1;
  } else {
#line 974
    al_ext = lc_find(mdev->act_log, enr);
#line 975
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 976
      if (al_ext->refcnt != 0U) {
#line 977
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 980
  spin_unlock_irq(& mdev->al_lock);
#line 987
  return (rv);
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 999
  enr = (unsigned int )(sector >> 15);
#line 1002
  sa = 200;
  retry: 
#line 1006
  __ret = 0;
#line 1006
  bm_ext = _bme_get(mdev, enr);
#line 1006
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1006
    tmp = get_current();
#line 1006
    __wait.flags = 0U;
#line 1006
    __wait.private = (void *)tmp;
#line 1006
    __wait.func = & autoremove_wake_function;
#line 1006
    __wait.task_list.next = & __wait.task_list;
#line 1006
    __wait.task_list.prev = & __wait.task_list;
    ldv_47481: 
#line 1006
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1006
    bm_ext = _bme_get(mdev, enr);
#line 1006
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1006
      goto ldv_47479;
    } else {

    }
#line 1006
    tmp___0 = get_current();
#line 1006
    tmp___1 = signal_pending(tmp___0);
#line 1006
    if (tmp___1 == 0) {
#line 1006
      schedule();
#line 1006
      goto ldv_47480;
    } else {

    }
#line 1006
    __ret = -512;
#line 1006
    goto ldv_47479;
    ldv_47480: ;
#line 1006
    goto ldv_47481;
    ldv_47479: 
#line 1006
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1006
  sig = __ret;
#line 1008
  if (sig != 0) {
#line 1009
    return (-4);
  } else {

  }
#line 1011
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1011
  if (tmp___2 != 0) {
#line 1012
    return (0);
  } else {

  }
#line 1014
  i = 0;
#line 1014
  goto ldv_47490;
  ldv_47489: 
#line 1015
  __ret___0 = 0;
#line 1015
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1015
  if (tmp___8 != 0) {
#line 1015
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1015
    if (tmp___9 == 0) {
#line 1015
      tmp___3 = get_current();
#line 1015
      __wait___0.flags = 0U;
#line 1015
      __wait___0.private = (void *)tmp___3;
#line 1015
      __wait___0.func = & autoremove_wake_function;
#line 1015
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1015
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_47487: 
#line 1015
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1015
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1015
      if (tmp___4 == 0) {
#line 1015
        goto ldv_47485;
      } else {
#line 1015
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1015
        if (tmp___5 != 0) {
#line 1015
          goto ldv_47485;
        } else {

        }
      }
#line 1015
      tmp___6 = get_current();
#line 1015
      tmp___7 = signal_pending(tmp___6);
#line 1015
      if (tmp___7 == 0) {
#line 1015
        schedule();
#line 1015
        goto ldv_47486;
      } else {

      }
#line 1015
      __ret___0 = -512;
#line 1015
      goto ldv_47485;
      ldv_47486: ;
#line 1015
      goto ldv_47487;
      ldv_47485: 
#line 1015
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1015
  sig = __ret___0;
#line 1019
  if (sig != 0) {
#line 1019
    goto _L;
  } else {
#line 1019
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1019
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1020
      spin_lock_irq(& mdev->al_lock);
#line 1021
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1021
      if (tmp___10 == 0U) {
#line 1022
        bm_ext->flags = 0UL;
#line 1023
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1024
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1026
      spin_unlock_irq(& mdev->al_lock);
#line 1027
      if (sig != 0) {
#line 1028
        return (-4);
      } else {

      }
#line 1029
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1029
      if (tmp___11 != 0L) {
#line 1030
        return (-4);
      } else {

      }
#line 1031
      if (sa != 0) {
#line 1031
        sa = sa - 1;
#line 1031
        if (sa == 0) {
#line 1032
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1034
      goto retry;
    } else {

    }
  }
#line 1014
  i = i + 1;
  ldv_47490: ;
#line 1014
  if (i <= 3) {
#line 1015
    goto ldv_47489;
  } else {

  }
#line 1037
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1038
  return (0);
}
}
#line 1050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1052
  enr = (unsigned int )(sector >> 15);
#line 1053
  al_enr = enr * 4U;
#line 1058
  spin_lock_irq(& mdev->al_lock);
#line 1059
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1073
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1074
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1074
      __mptr = (struct lc_element  const  *)e;
#line 1074
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1074
      bm_ext = 0;
    }
#line 1075
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1076
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1076
      if (tmp != 0) {
#line 1076
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1076);
      } else {

      }
#line 1077
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1077
      if (tmp___0 == 0) {
#line 1077
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1077);
      } else {

      }
#line 1078
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1079
      mdev->resync_wenr = 4294967295U;
#line 1080
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1080
      if (tmp___1 == 0U) {
#line 1081
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1082
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1084
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1088
  e = lc_try_get(mdev->resync, enr);
#line 1089
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1089
    __mptr___0 = (struct lc_element  const  *)e;
#line 1089
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1089
    bm_ext = 0;
  }
#line 1090
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1091
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1091
    if (tmp___2 != 0) {
#line 1092
      goto proceed;
    } else {

    }
#line 1093
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1093
    if (tmp___3 == 0) {
#line 1094
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1100
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1101
      if (bm_ext->lce.refcnt == 0U) {
#line 1101
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1101);
      } else {

      }
    }
#line 1103
    goto check_al;
  } else {
#line 1106
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1107
      goto try_again;
    } else {

    }
#line 1109
    e = lc_get(mdev->resync, enr);
#line 1110
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1110
      __mptr___1 = (struct lc_element  const  *)e;
#line 1110
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1110
      bm_ext = 0;
    }
#line 1111
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1112
      rs_flags = (mdev->resync)->flags;
#line 1113
      if ((rs_flags & 4UL) != 0UL) {
#line 1114
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1116
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1116
      if (tmp___4 != 0L) {
#line 1116
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1116), "i" (12UL));
        ldv_47511: ;
#line 1116
        goto ldv_47511;
      } else {

      }
#line 1117
      goto try_again;
    } else {

    }
#line 1119
    if (bm_ext->lce.lc_number != enr) {
#line 1120
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1121
      bm_ext->rs_failed = 0;
#line 1122
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1123
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1124
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1124
      if (tmp___5 != 0) {
#line 1124
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1124);
      } else {

      }
    } else {

    }
#line 1126
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1127
    if (bm_ext->lce.refcnt != 1U) {
#line 1127
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1127);
    } else {

    }
#line 1128
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1129
    goto check_al;
  }
  check_al: 
#line 1132
  i = 0;
#line 1132
  goto ldv_47513;
  ldv_47512: 
#line 1133
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1133
  if (tmp___6 != 0L) {
#line 1134
    goto try_again;
  } else {

  }
#line 1135
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1135
  if (tmp___7 != 0) {
#line 1136
    goto try_again;
  } else {

  }
#line 1132
  i = i + 1;
  ldv_47513: ;
#line 1132
  if (i <= 3) {
#line 1133
    goto ldv_47512;
  } else {

  }
#line 1138
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1140
  mdev->resync_wenr = 4294967295U;
#line 1141
  spin_unlock_irq(& mdev->al_lock);
#line 1142
  return (0);
  try_again: ;
#line 1145
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1146
    mdev->resync_wenr = enr;
  } else {

  }
#line 1147
  spin_unlock_irq(& mdev->al_lock);
#line 1148
  return (-11);
}
}
#line 1151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1153
  enr = (unsigned int )(sector >> 15);
#line 1158
  tmp = spinlock_check(& mdev->al_lock);
#line 1158
  flags = _raw_spin_lock_irqsave(tmp);
#line 1159
  e = lc_find(mdev->resync, enr);
#line 1160
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1160
    __mptr = (struct lc_element  const  *)e;
#line 1160
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1160
    bm_ext = 0;
  }
#line 1161
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1162
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1163
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1163
    if (tmp___0 != 0) {
#line 1164
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1165
    return;
  } else {

  }
#line 1168
  if (bm_ext->lce.refcnt == 0U) {
#line 1169
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1170
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1173
    return;
  } else {

  }
#line 1176
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1176
  if (tmp___1 == 0U) {
#line 1177
    bm_ext->flags = 0UL;
#line 1178
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1179
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1182
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1183
  return;
}
}
#line 1189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1191
  spin_lock_irq(& mdev->al_lock);
#line 1193
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1193
  if (tmp != 0) {
#line 1194
    lc_reset(mdev->resync);
#line 1195
    put_ldev(mdev);
  } else {

  }
#line 1197
  mdev->resync_locked = 0U;
#line 1198
  mdev->resync_wenr = 4294967295U;
#line 1199
  spin_unlock_irq(& mdev->al_lock);
#line 1200
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1201
  return;
}
}
#line 1210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1216
  spin_lock_irq(& mdev->al_lock);
#line 1218
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1218
  if (tmp___3 != 0) {
#line 1220
    i = 0;
#line 1220
    goto ldv_47542;
    ldv_47541: 
#line 1221
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1222
    __mptr = (struct lc_element  const  *)e;
#line 1222
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1223
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1224
      goto ldv_47540;
    } else {

    }
#line 1225
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1226
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1229
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1229
      if (tmp != 0) {
#line 1229
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1229);
      } else {

      }
#line 1230
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1230
      if (tmp___0 == 0) {
#line 1230
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1230);
      } else {

      }
#line 1231
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1232
      mdev->resync_wenr = 4294967295U;
#line 1233
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1235
    if (bm_ext->lce.refcnt != 0U) {
#line 1236
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1238
      put_ldev(mdev);
#line 1239
      spin_unlock_irq(& mdev->al_lock);
#line 1240
      return (-11);
    } else {

    }
#line 1242
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1242
    if (tmp___1 != 0) {
#line 1242
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1242);
    } else {

    }
#line 1243
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1243
    if (tmp___2 != 0) {
#line 1243
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1243);
    } else {

    }
#line 1244
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_47540: 
#line 1220
    i = i + 1;
    ldv_47542: ;
#line 1220
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1221
      goto ldv_47541;
    } else {

    }

#line 1246
    if ((mdev->resync)->used != 0U) {
#line 1246
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1246);
    } else {

    }
#line 1247
    put_ldev(mdev);
  } else {

  }
#line 1249
  spin_unlock_irq(& mdev->al_lock);
#line 1251
  return (0);
}
}
#line 1260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1266
  wake_up = 0;
#line 1268
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1269
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1271
    return;
  } else {

  }
#line 1273
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1274
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1276
  _b = sector >= nr_sectors;
#line 1276
  if (_b != 0) {
#line 1276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1276);
  } else {

  }
#line 1276
  if (_b != 0) {
#line 1276
    return;
  } else {

  }
#line 1277
  _b___0 = esector >= nr_sectors;
#line 1277
  if (_b___0 != 0) {
#line 1277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1277);
  } else {

  }
#line 1277
  if (_b___0 != 0) {
#line 1277
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1279
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1284
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1284
  if (tmp != 0L) {
#line 1285
    return;
  } else {

  }
#line 1286
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1286
  if (tmp___0 != 0L) {
#line 1287
    ebnr = lbnr;
  } else {
#line 1289
    ebnr = (esector - 7UL) >> 3;
  }
#line 1290
  sbnr = (sector + 7UL) >> 3;
#line 1292
  if (sbnr > ebnr) {
#line 1293
    return;
  } else {

  }
#line 1299
  spin_lock_irq(& mdev->al_lock);
#line 1300
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1300
  count = (unsigned long )tmp___1;
#line 1301
  if (count != 0UL) {
#line 1302
    mdev->rs_failed = mdev->rs_failed + count;
#line 1304
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1304
    if (tmp___2 != 0) {
#line 1305
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1306
      put_ldev(mdev);
    } else {

    }
#line 1311
    wake_up = 1;
  } else {

  }
#line 1313
  spin_unlock_irq(& mdev->al_lock);
#line 1314
  if (wake_up != 0) {
#line 1315
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1316
  return;
}
}
#line 1318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1323
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1325
  mutex_lock(ldv_func_arg1);
#line 1326
  return;
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_86(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1333
  tmp = mutex_trylock(ldv_func_arg1);
#line 1333
  ldv_func_res = tmp;
#line 1335
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1335
  return (tmp___0);
#line 1337
  return (ldv_func_res);
}
}
#line 1340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1345
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1347
  mutex_unlock(ldv_func_arg1);
#line 1348
  return;
}
}
#line 1350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1355
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1357
  mutex_lock(ldv_func_arg1);
#line 1358
  return;
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1365
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1367
  mutex_unlock(ldv_func_arg1);
#line 1368
  return;
}
}
#line 1370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1375
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1377
  mutex_unlock(ldv_func_arg1);
#line 1378
  return;
}
}
#line 1380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_91(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1385
  tmp = mutex_is_locked(lock);
#line 1385
  ldv_func_res = tmp;
#line 1387
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1387
  return (tmp___0);
#line 1389
  return (ldv_func_res);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1399
  mutex_lock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1407
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1409
  mutex_unlock(ldv_func_arg1);
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1417
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1419
  mutex_lock(ldv_func_arg1);
#line 1420
  return;
}
}
#line 1422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1427
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1429
  mutex_unlock(ldv_func_arg1);
#line 1430
  return;
}
}
#line 1432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1437
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1439
  mutex_unlock(ldv_func_arg1);
#line 1440
  return;
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1447
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1449
  mutex_unlock(ldv_func_arg1);
#line 1450
  return;
}
}
#line 1452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1457
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1459
  mutex_unlock(ldv_func_arg1);
#line 1460
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_114(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_117(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_120(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_124(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 211
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 215
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 219
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 223
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_113(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_116(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_119(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_122(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 75
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 79
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6163;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6163: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 89
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 89
  if (tmp != 0L) {
#line 89
    goto do_trace;
  } else {

  }
#line 89
  return;
  do_trace: 
#line 89
  rcu_read_lock_sched_notrace();
#line 89
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
  tmp___0 = debug_lockdep_rcu_enabled();
#line 89
  if (tmp___0 != 0 && ! __warned) {
#line 89
    tmp___1 = rcu_read_lock_sched_held();
#line 89
    if (tmp___1 == 0 && 1) {
#line 89
      __warned = 1;
#line 89
      lockdep_rcu_dereference("include/trace/events/module.h", 94);
    } else {

    }
  } else {

  }
#line 89
  it_func_ptr = _________p1;
#line 89
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_12400: 
#line 89
    it_func = it_func_ptr->func;
#line 89
    __data = it_func_ptr->data;
#line 89
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 89
    it_func_ptr = it_func_ptr + 1;
#line 89
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
      goto ldv_12400;
    } else {

    }

  } else {

  }
#line 89
  rcu_read_lock_sched_notrace();
#line 91
  return;
}
}
#line 515 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 517
  ret = 1;
#line 519
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 522
    tmp = module_is_live(module);
#line 522
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 522
    if (tmp___0 != 0L) {
#line 523
      __vpp_verify = 0;
#line 523
      switch (4UL) {
      case 1UL: 
#line 523
      pao_ID__ = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12771;
      case 2UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12771;
      case 4UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12771;
      case 8UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12771;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12771: ;
#line 523
      goto ldv_12776;
      case 2UL: 
#line 523
      pao_ID_____0 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12782;
      case 2UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12782;
      case 4UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12782;
      case 8UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12782;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12782: ;
#line 523
      goto ldv_12776;
      case 4UL: 
#line 523
      pao_ID_____1 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12792;
      case 2UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12792;
      case 4UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12792;
      case 8UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12792;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12792: ;
#line 523
      goto ldv_12776;
      case 8UL: 
#line 523
      pao_ID_____2 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12802;
      case 2UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12802;
      case 4UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12802;
      case 8UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12802;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12802: ;
#line 523
      goto ldv_12776;
      default: 
#line 523
      __bad_size_call_parameter();
#line 523
      goto ldv_12776;
      }
      ldv_12776: ;
#line 524
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 526
      ret = 0;
    }
  } else {

  }
#line 530
  return (ret);
}
}
#line 254 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 278
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 206 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 206
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 206
  return (tmp);
}
}
#line 1811 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2062
extern int wake_up_process(struct task_struct * ) ;
#line 2017 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2018
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2019
extern struct block_device *bdget(dev_t  ) ;
#line 2023
extern void bdput(struct block_device * ) ;
#line 2059
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 409 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 414
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 607
extern struct gendisk *alloc_disk(int  ) ;
#line 609
extern void put_disk(struct gendisk * ) ;
#line 255 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 257
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 258
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 258
    return (tmp);
  } else {

  }
#line 259
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 805 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 806
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 807
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 809
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 839
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 853
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_46560: ;
#line 593
    goto ldv_46560;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_46575: ;
#line 618
    goto ldv_46575;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  ldv_mutex_lock_116(& mdev->data.mutex);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    ldv_mutex_unlock_117(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  ldv_mutex_unlock_118(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1193
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1207
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1213
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1218
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1224
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1228
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1267
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1269
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1274
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1280
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1281
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1282
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1284
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1290
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1490 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1496 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1503
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1504
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1506 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1516
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1517
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1680
void drbd_nl_cleanup(void) ;
#line 1681
int drbd_nl_init(void) ;
#line 1682
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_47655;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_47658: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_47657;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_47658;
  ldv_47657: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47655: ;
#line 1786
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_37644.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_47683;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_37644.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_37644.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_47683;
  }
  ldv_47683: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_47724;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_47724;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47724: ;
#line 1942
  return (s);
}
}
#line 1950 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1953
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1955
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1961
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1962
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1962
    if (tmp != 0) {
#line 1963
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1964
      dump_stack();
    } else {

    }
#line 1966
    return (0UL);
  } else {

  }
#line 1968
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1971
  return (0UL);
  }
}
}
#line 2033 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2035
  _drbd_thread_stop(thi, 0, 0);
#line 2036
  return;
}
}
#line 2038 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2040
  _drbd_thread_stop(thi, 1, 0);
#line 2041
  return;
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_37644.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_47855;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_47855;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_47855: ;
#line 2303
  switch ((unsigned int )s.ldv_37644.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_47865;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_47865: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2433 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2435
  sk = (mdev->data.socket)->sk;
#line 2436
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2437
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2438
  return;
}
}
#line 2440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2447
  return (0);
}
}
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_48119;
  ldv_48118: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_48119: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_48118;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 137
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 183
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 212
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 254
  tmp = kmalloc(56UL, 208U);
#line 254
  b = (struct drbd_tl_epoch *)tmp;
#line 255
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 256
    return (0);
  } else {

  }
#line 257
  INIT_LIST_HEAD(& b->requests);
#line 258
  INIT_LIST_HEAD(& b->w.list);
#line 259
  b->next = 0;
#line 260
  b->br_number = 4711U;
#line 261
  b->n_writes = 0;
#line 262
  b->w.cb = 0;
#line 264
  mdev->oldest_tle = b;
#line 265
  mdev->newest_tle = b;
#line 266
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 268
  mdev->tl_hash = 0;
#line 269
  mdev->tl_hash_s = 0U;
#line 271
  return (1);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 276
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            276);
  } else {

  }
#line 277
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 277
  if (tmp == 0) {
#line 277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            277);
  } else {

  }
#line 278
  kfree((void const   *)mdev->oldest_tle);
#line 279
  mdev->oldest_tle = 0;
#line 280
  kfree((void const   *)mdev->unused_spare_tle);
#line 281
  mdev->unused_spare_tle = 0;
#line 282
  kfree((void const   *)mdev->tl_hash);
#line 283
  mdev->tl_hash = 0;
#line 284
  mdev->tl_hash_s = 0U;
#line 285
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 298
  INIT_LIST_HEAD(& new->requests);
#line 299
  INIT_LIST_HEAD(& new->w.list);
#line 300
  new->w.cb = 0;
#line 301
  new->next = 0;
#line 302
  new->n_writes = 0;
#line 304
  newest_before = mdev->newest_tle;
#line 307
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 308
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 309
    (mdev->newest_tle)->next = new;
#line 310
    mdev->newest_tle = new;
  } else {

  }
#line 312
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 331
  spin_lock_irq(& mdev->req_lock);
#line 333
  b = mdev->oldest_tle;
#line 336
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 339
    goto bail;
  } else {

  }
#line 341
  if (b->br_number != barrier_nr) {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 344
    goto bail;
  } else {

  }
#line 346
  if ((unsigned int )b->n_writes != set_size) {
#line 347
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 349
    goto bail;
  } else {

  }
#line 353
  le = b->requests.next;
#line 353
  tle = le->next;
#line 353
  goto ldv_48347;
  ldv_48346: 
#line 354
  __mptr = (struct list_head  const  *)le;
#line 354
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 355
  _req_mod(r, barrier_acked);
#line 353
  le = tle;
#line 353
  tle = le->next;
  ldv_48347: ;
#line 353
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 354
    goto ldv_48346;
  } else {

  }
#line 370
  list_del_init(& b->requests);
#line 372
  nob = b->next;
#line 373
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 373
  if (tmp != 0) {
#line 374
    _tl_add_barrier(mdev, b);
#line 375
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 376
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 380
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 380
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              380);
    } else {

    }
#line 381
    mdev->oldest_tle = nob;
#line 382
    kfree((void const   *)b);
  }
#line 385
  spin_unlock_irq(& mdev->req_lock);
#line 386
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 386
  if (tmp___0 != 0) {
#line 386
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 386
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 386
  if (tmp___2 < 0) {
#line 386
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 386, tmp___1);
  } else {

  }
#line 388
  return;
  bail: 
#line 391
  spin_unlock_irq(& mdev->req_lock);
#line 392
  val.i = 0U;
#line 392
  val.ldv_37644.conn = 6U;
#line 392
  mask.i = 0U;
#line 392
  mask.ldv_37644.conn = 31U;
#line 392
  drbd_force_state(mdev, mask, val);
#line 394
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 411
  b = mdev->oldest_tle;
#line 412
  pn = & mdev->oldest_tle;
#line 413
  goto ldv_48382;
  ldv_48381: 
#line 414
  n_writes = 0;
#line 415
  n_reads = 0;
#line 416
  INIT_LIST_HEAD(& carry_reads);
#line 417
  le = b->requests.next;
#line 417
  tle = le->next;
#line 417
  goto ldv_48374;
  ldv_48373: 
#line 418
  __mptr = (struct list_head  const  *)le;
#line 418
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 419
  rv = _req_mod(req, what);
#line 421
  n_writes = (rv & 1) + n_writes;
#line 422
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 417
  le = tle;
#line 417
  tle = le->next;
  ldv_48374: ;
#line 417
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 418
    goto ldv_48373;
  } else {

  }
#line 424
  tmp = b->next;
#line 426
  if (n_writes != 0) {
#line 427
    if ((unsigned int )what == 23U) {
#line 428
      b->n_writes = n_writes;
#line 429
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 430
        b->w.cb = & w_send_barrier;
#line 431
        inc_ap_pending(mdev);
#line 432
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 435
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 437
    pn = & b->next;
  } else {
#line 439
    if (n_reads != 0) {
#line 440
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 443
    list_del(& b->requests);
#line 448
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 449
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 449
      if (tmp___0 != 0) {
#line 449
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 449
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 449
      if (tmp___2 < 0) {
#line 449
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 449
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 449, tmp___1);
      } else {

      }
    } else {

    }
#line 451
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 453
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 453
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                453);
      } else {

      }
#line 454
      INIT_LIST_HEAD(& b->requests);
#line 455
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 456
      INIT_LIST_HEAD(& b->w.list);
#line 457
      b->w.cb = 0;
#line 458
      b->br_number = random32();
#line 459
      b->n_writes = 0;
#line 461
      *pn = b;
#line 462
      goto ldv_48380;
    } else {

    }
#line 464
    *pn = tmp;
#line 465
    kfree((void const   *)b);
  }
#line 467
  b = tmp;
#line 468
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_48382: ;
#line 413
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 414
    goto ldv_48381;
  } else {

  }
  ldv_48380: ;
#line 418
  return;
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 486
  spin_lock_irq(& mdev->req_lock);
#line 488
  _tl_restart(mdev, connection_lost_while_pending);
#line 491
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 491
  if (tmp == 0) {
#line 491
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            491);
  } else {

  }
#line 494
  le = mdev->out_of_sequence_requests.next;
#line 494
  tle = le->next;
#line 494
  goto ldv_48392;
  ldv_48391: 
#line 495
  __mptr = (struct list_head  const  *)le;
#line 495
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 498
  _req_mod(r, connection_lost_while_pending);
#line 494
  le = tle;
#line 494
  tle = le->next;
  ldv_48392: ;
#line 494
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 495
    goto ldv_48391;
  } else {

  }
#line 502
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 504
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 506
  spin_unlock_irq(& mdev->req_lock);
#line 507
  return;
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 511
  spin_lock_irq(& mdev->req_lock);
#line 512
  _tl_restart(mdev, what);
#line 513
  spin_unlock_irq(& mdev->req_lock);
#line 514
  return;
}
}
#line 522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 525
  return (((((int )os.ldv_37644.conn > 9 && (int )ns.ldv_37644.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_37644.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 542
  tmp = spinlock_check(& mdev->req_lock);
#line 542
  flags = _raw_spin_lock_irqsave(tmp);
#line 543
  os = mdev->state;
#line 544
  ns.i = (os.i & ~ mask.i) | val.i;
#line 545
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 546
  ns = mdev->state;
#line 547
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 549
  return (rv);
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 561
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 562
  return;
}
}
#line 564
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 565
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 568
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 570
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 581
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 581
  if (tmp != 0) {
#line 582
    return (SS_CW_SUCCESS);
  } else {

  }
#line 584
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 584
  if (tmp___0 != 0) {
#line 585
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 587
  rv = SS_UNKNOWN_ERROR;
#line 588
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 588
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 589
  os = mdev->state;
#line 590
  ns.i = (os.i & ~ mask.i) | val.i;
#line 591
  ns = sanitize_state(mdev, os, ns, 0);
#line 593
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 593
  if (tmp___2 == 0) {
#line 594
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 595
  if ((int )rv == 0) {
#line 596
    rv = is_valid_state(mdev, ns);
#line 597
    if ((int )rv == 1) {
#line 598
      rv = is_valid_state_transition(mdev, ns, os);
#line 599
      if ((int )rv == 1) {
#line 600
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 603
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 605
  return (rv);
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 627
  init_completion(& done);
#line 629
  if (((unsigned int )f & 8U) != 0U) {
#line 630
    ldv_mutex_lock_119(& mdev->state_mutex);
  } else {

  }
#line 632
  tmp = spinlock_check(& mdev->req_lock);
#line 632
  flags = _raw_spin_lock_irqsave(tmp);
#line 633
  os = mdev->state;
#line 634
  ns.i = (os.i & ~ mask.i) | val.i;
#line 635
  ns = sanitize_state(mdev, os, ns, 0);
#line 637
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 637
  if (tmp___3 != 0) {
#line 638
    rv = is_valid_state(mdev, ns);
#line 639
    if ((int )rv == 1) {
#line 640
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 641
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 643
    if ((int )rv <= 0) {
#line 644
      if (((unsigned int )f & 2U) != 0U) {
#line 645
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 646
      goto abort;
    } else {

    }
#line 649
    drbd_state_lock___0(mdev);
#line 650
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 650
    if (tmp___0 == 0) {
#line 651
      drbd_state_unlock(mdev);
#line 652
      rv = SS_CW_FAILED_BY_PEER;
#line 653
      if (((unsigned int )f & 2U) != 0U) {
#line 654
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 655
      goto abort;
    } else {

    }
#line 658
    rv = _req_st_cond(mdev, mask, val);
#line 658
    if ((int )rv != 0) {
#line 658
      goto ldv_48464;
    } else {

    }
#line 658
    tmp___1 = get_current();
#line 658
    __wait.flags = 0U;
#line 658
    __wait.private = (void *)tmp___1;
#line 658
    __wait.func = & autoremove_wake_function;
#line 658
    __wait.task_list.next = & __wait.task_list;
#line 658
    __wait.task_list.prev = & __wait.task_list;
    ldv_48467: 
#line 658
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 658
    rv = _req_st_cond(mdev, mask, val);
#line 658
    if ((int )rv != 0) {
#line 658
      goto ldv_48466;
    } else {

    }
#line 658
    schedule();
#line 658
    goto ldv_48467;
    ldv_48466: 
#line 658
    finish_wait(& mdev->state_wait, & __wait);
    ldv_48464: ;
#line 661
    if ((int )rv <= 0) {
#line 662
      drbd_state_unlock(mdev);
#line 663
      if (((unsigned int )f & 2U) != 0U) {
#line 664
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 665
      goto abort;
    } else {

    }
#line 667
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 667
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 668
    os = mdev->state;
#line 669
    ns.i = (os.i & ~ mask.i) | val.i;
#line 670
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 671
    drbd_state_unlock(mdev);
  } else {
#line 673
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 676
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 678
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 679
    tmp___4 = get_current();
#line 679
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 679
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              679);
    } else {

    }
#line 680
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 684
  if (((unsigned int )f & 8U) != 0U) {
#line 685
    ldv_mutex_unlock_120(& mdev->state_mutex);
  } else {

  }
#line 687
  return (rv);
}
}
#line 701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 706
  rv = drbd_req_state(mdev, mask, val, f);
#line 706
  if ((int )rv != -18) {
#line 706
    goto ldv_48478;
  } else {

  }
#line 706
  tmp = get_current();
#line 706
  __wait.flags = 0U;
#line 706
  __wait.private = (void *)tmp;
#line 706
  __wait.func = & autoremove_wake_function;
#line 706
  __wait.task_list.next = & __wait.task_list;
#line 706
  __wait.task_list.prev = & __wait.task_list;
  ldv_48481: 
#line 706
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 706
  rv = drbd_req_state(mdev, mask, val, f);
#line 706
  if ((int )rv != -18) {
#line 706
    goto ldv_48480;
  } else {

  }
#line 706
  schedule();
#line 706
  goto ldv_48481;
  ldv_48480: 
#line 706
  finish_wait(& mdev->state_wait, & __wait);
  ldv_48478: ;
#line 709
  return (rv);
}
}
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 714
  tmp = is_susp(ns);
#line 714
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.pdsk);
#line 714
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.disk);
#line 714
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_37644.peer);
#line 714
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37644.role);
#line 714
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_37644.conn);
#line 714
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 725
  return;
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 731
  if ((int )err == -18) {
#line 732
    return;
  } else {

  }
#line 733
  tmp = drbd_set_st_err_str(err);
#line 733
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 734
  print_st(mdev, (char *)" state", os);
#line 735
  print_st(mdev, (char *)"wanted", ns);
#line 736
  return;
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 750
  rv = 1;
#line 752
  fp = FP_DONT_CARE;
#line 753
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 753
  if (tmp != 0) {
#line 754
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 755
    put_ldev(mdev);
  } else {

  }
#line 758
  tmp___0 = get_net_conf(mdev);
#line 758
  if (tmp___0 != 0) {
#line 759
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 761
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 762
    put_net_conf(mdev);
  } else {

  }
#line 765
  if ((int )rv <= 0) {

  } else
#line 767
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 768
    rv = SS_DEVICE_IN_USE;
  } else
#line 770
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37644.conn <= 9) && (int )ns.ldv_37644.disk <= 7) {
#line 771
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 773
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_37644.conn <= 9) && (int )ns.ldv_37644.pdsk > 5) {
#line 775
    rv = SS_PRIMARY_NOP;
  } else
#line 777
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37644.disk <= 4) && (int )ns.ldv_37644.pdsk <= 4) {
#line 778
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 780
  if ((int )ns.ldv_37644.conn > 10 && (int )ns.ldv_37644.disk <= 3) {
#line 781
    rv = SS_NO_LOCAL_DISK;
  } else
#line 783
  if ((int )ns.ldv_37644.conn > 10 && (int )ns.ldv_37644.pdsk <= 3) {
#line 784
    rv = SS_NO_REMOTE_DISK;
  } else
#line 786
  if (((int )ns.ldv_37644.conn > 10 && (int )ns.ldv_37644.disk <= 7) && (int )ns.ldv_37644.pdsk <= 7) {
#line 787
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 789
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 794
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 796
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 798
    rv = SS_NO_VERIFY_ALG;
  } else
#line 800
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 802
    rv = SS_NOT_SUPPORTED;
  } else
#line 804
  if ((int )ns.ldv_37644.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 805
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 807
  return (rv);
}
}
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 820
  rv = 1;
#line 822
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_37644.conn > 10) {
#line 824
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 826
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 827
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 829
  if ((int )ns.ldv_37644.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 830
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 832
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_37644.conn <= 1) {
#line 833
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 835
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_37644.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 836
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 838
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 839
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 841
  if ((int )ns.ldv_37644.conn == (int )os.ldv_37644.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 842
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 844
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_37644.conn <= 9) {
#line 845
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 847
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_37644.conn != (int )os.ldv_37644.conn) && (int )os.ldv_37644.conn > 10) {
#line 849
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 851
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_37644.conn <= 9) {
#line 853
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 855
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_37644.conn <= 8) {
#line 857
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 859
  return (rv);
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 878
  fp = FP_DONT_CARE;
#line 879
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 879
  if (tmp != 0) {
#line 880
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 881
    put_ldev(mdev);
  } else {

  }
#line 885
  if (((int )ns.ldv_37644.conn > 2 && (int )ns.ldv_37644.conn <= 7) && (int )os.ldv_37644.conn <= 1) {
#line 887
    ns.ldv_37644.conn = os.ldv_37644.conn;
  } else {

  }
#line 891
  if (((((int )os.ldv_37644.conn > 2 && (int )os.ldv_37644.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_37644.conn <= 7) {
#line 893
    ns.ldv_37644.conn = os.ldv_37644.conn;
  } else {

  }
#line 896
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 897
    ns.ldv_37644.disk = 0U;
  } else {

  }
#line 901
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 902
    ns.ldv_37644.disk = 0U;
  } else {

  }
#line 905
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 906
    ns.ldv_37644.conn = os.ldv_37644.conn;
  } else {

  }
#line 908
  if ((int )ns.ldv_37644.conn <= 9) {
#line 909
    ns.ldv_37644.peer_isp = 0U;
#line 910
    ns.ldv_37644.peer = 0U;
#line 911
    if ((int )ns.ldv_37644.pdsk > 6 || (int )ns.ldv_37644.pdsk <= 3) {
#line 912
      ns.ldv_37644.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 916
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 917
    ns.ldv_37644.aftr_isp = 0U;
  } else {

  }
#line 920
  if (((int )os.ldv_37644.conn > 10 && (int )ns.ldv_37644.conn > 10) && ((int )ns.ldv_37644.disk <= 2 || (int )ns.ldv_37644.pdsk <= 2)) {
#line 922
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 923
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 926
    ns.ldv_37644.conn = 10U;
  } else {

  }
#line 930
  if ((int )ns.ldv_37644.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 930
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 930
    if (tmp___0 != 0) {
#line 932
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 933
        ns.ldv_37644.disk = mdev->new_state_tmp.ldv_37644.disk;
#line 934
        ns.ldv_37644.pdsk = mdev->new_state_tmp.ldv_37644.pdsk;
      } else {
#line 936
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 937
        ns.ldv_37644.disk = 0U;
#line 938
        ns.ldv_37644.pdsk = 6U;
      }
#line 940
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 944
  if ((int )ns.ldv_37644.conn > 9 && (int )ns.ldv_37644.conn <= 21) {
#line 945
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 946
      ns.ldv_37644.disk = 8U;
    } else {

    }
#line 947
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 948
      ns.ldv_37644.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 952
  disk_min = D_DISKLESS;
#line 953
  disk_max = D_UP_TO_DATE;
#line 954
  pdsk_min = D_INCONSISTENT;
#line 955
  pdsk_max = D_UNKNOWN;
#line 956
  switch ((unsigned int )ns.ldv_37644.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 962
  disk_min = D_INCONSISTENT;
#line 963
  disk_max = D_OUTDATED;
#line 964
  pdsk_min = D_UP_TO_DATE;
#line 965
  pdsk_max = D_UP_TO_DATE;
#line 966
  goto ldv_48521;
  case 18U: ;
  case 19U: 
#line 969
  disk_min = D_UP_TO_DATE;
#line 970
  disk_max = D_UP_TO_DATE;
#line 971
  pdsk_min = D_UP_TO_DATE;
#line 972
  pdsk_max = D_UP_TO_DATE;
#line 973
  goto ldv_48521;
  case 10U: 
#line 975
  disk_min = D_DISKLESS;
#line 976
  disk_max = D_UP_TO_DATE;
#line 977
  pdsk_min = D_DISKLESS;
#line 978
  pdsk_max = D_UP_TO_DATE;
#line 979
  goto ldv_48521;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 984
  disk_min = D_UP_TO_DATE;
#line 985
  disk_max = D_UP_TO_DATE;
#line 986
  pdsk_min = D_INCONSISTENT;
#line 987
  pdsk_max = D_CONSISTENT;
#line 988
  goto ldv_48521;
  case 17U: 
#line 990
  disk_min = D_INCONSISTENT;
#line 991
  disk_max = D_INCONSISTENT;
#line 992
  pdsk_min = D_UP_TO_DATE;
#line 993
  pdsk_max = D_UP_TO_DATE;
#line 994
  goto ldv_48521;
  case 16U: 
#line 996
  disk_min = D_UP_TO_DATE;
#line 997
  disk_max = D_UP_TO_DATE;
#line 998
  pdsk_min = D_INCONSISTENT;
#line 999
  pdsk_max = D_INCONSISTENT;
#line 1000
  goto ldv_48521;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1012
  goto ldv_48521;
  }
  ldv_48521: ;
#line 1014
  if ((unsigned int )ns.ldv_37644.disk > (unsigned int )disk_max) {
#line 1015
    ns.ldv_37644.disk = (unsigned char )disk_max;
  } else {

  }
#line 1017
  if ((unsigned int )ns.ldv_37644.disk < (unsigned int )disk_min) {
#line 1018
    tmp___1 = drbd_disk_str(disk_min);
#line 1018
    tmp___2 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.disk);
#line 1018
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from %s to %s\n",
             tmp___2, tmp___1);
#line 1020
    ns.ldv_37644.disk = (unsigned char )disk_min;
  } else {

  }
#line 1022
  if ((unsigned int )ns.ldv_37644.pdsk > (unsigned int )pdsk_max) {
#line 1023
    ns.ldv_37644.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1025
  if ((unsigned int )ns.ldv_37644.pdsk < (unsigned int )pdsk_min) {
#line 1026
    tmp___3 = drbd_disk_str(pdsk_min);
#line 1026
    tmp___4 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.pdsk);
#line 1026
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from %s to %s\n",
             tmp___4, tmp___3);
#line 1028
    ns.ldv_37644.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1031
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37644.conn <= 9) && (int )ns.ldv_37644.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37644.conn > 9) || (int )os.ldv_37644.pdsk <= 5)) {
#line 1034
    ns.ldv_37644.susp_fen = 1U;
  } else {

  }
#line 1036
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37644.disk <= 7) && (int )ns.ldv_37644.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37644.disk > 7) || (int )os.ldv_37644.pdsk > 7)) {
#line 1039
    ns.ldv_37644.susp_nod = 1U;
  } else {

  }
#line 1041
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1042
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1043
      ns.ldv_37644.conn = 20U;
    } else {

    }
#line 1044
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1045
      ns.ldv_37644.conn = 21U;
    } else {

    }
  } else {
#line 1047
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1048
      ns.ldv_37644.conn = 16U;
    } else {

    }
#line 1049
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1050
      ns.ldv_37644.conn = 17U;
    } else {

    }
  }
#line 1053
  return (ns);
}
}
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1059
  if (mdev->agreed_pro_version <= 89) {
#line 1060
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1061
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1062
  mdev->ov_position = 0UL;
#line 1063
  if ((unsigned int )cs == 19U) {
#line 1069
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1071
    bit = mdev->ov_start_sector >> 3;
#line 1072
    if (mdev->rs_total <= bit) {
#line 1073
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1075
      mdev->rs_total = 1UL;
    } else {
#line 1077
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1078
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1080
  mdev->ov_left = mdev->rs_total;
#line 1081
  return;
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1085
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1085
  if (tmp != 0) {
#line 1086
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1087
  return;
}
}
#line 1099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1103
  rv = 1;
#line 1104
  warn_sync_abort = 0;
#line 1107
  os = mdev->state;
#line 1109
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1111
  if (ns.i == os.i) {
#line 1112
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1114
  if (((unsigned int )flags & 1U) == 0U) {
#line 1118
    rv = is_valid_state(mdev, ns);
#line 1119
    if ((int )rv <= 0) {
#line 1123
      tmp = is_valid_state(mdev, os);
#line 1123
      if ((int )tmp == (int )rv) {
#line 1124
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1126
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1129
  if ((int )rv <= 0) {
#line 1130
    if (((unsigned int )flags & 2U) != 0U) {
#line 1131
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1132
    return (rv);
  } else {

  }
#line 1135
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1136
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1140
  pbp = (char *)(& pb);
#line 1141
  *pbp = 0;
#line 1142
  if ((int )ns.ldv_37644.role != (int )os.ldv_37644.role) {
#line 1143
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_37644.role);
#line 1143
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_37644.role);
#line 1143
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1143
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1146
  if ((int )ns.ldv_37644.peer != (int )os.ldv_37644.peer) {
#line 1147
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37644.peer);
#line 1147
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_37644.peer);
#line 1147
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1147
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1150
  if ((int )ns.ldv_37644.conn != (int )os.ldv_37644.conn) {
#line 1151
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_37644.conn);
#line 1151
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_37644.conn);
#line 1151
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1151
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1154
  if ((int )ns.ldv_37644.disk != (int )os.ldv_37644.disk) {
#line 1155
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.disk);
#line 1155
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_37644.disk);
#line 1155
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1155
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1158
  if ((int )ns.ldv_37644.pdsk != (int )os.ldv_37644.pdsk) {
#line 1159
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37644.pdsk);
#line 1159
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_37644.pdsk);
#line 1159
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1159
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1162
  tmp___18 = is_susp(ns);
#line 1162
  tmp___19 = is_susp(os);
#line 1162
  if (tmp___18 != tmp___19) {
#line 1163
    tmp___15 = is_susp(ns);
#line 1163
    tmp___16 = is_susp(os);
#line 1163
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1163
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1166
  if ((int )ns.ldv_37644.aftr_isp != (int )os.ldv_37644.aftr_isp) {
#line 1167
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_37644.aftr_isp,
                       (int )ns.ldv_37644.aftr_isp);
#line 1167
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1170
  if ((int )ns.ldv_37644.peer_isp != (int )os.ldv_37644.peer_isp) {
#line 1171
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_37644.peer_isp,
                       (int )ns.ldv_37644.peer_isp);
#line 1171
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1174
  if ((int )ns.ldv_37644.user_isp != (int )os.ldv_37644.user_isp) {
#line 1175
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_37644.user_isp,
                       (int )ns.ldv_37644.user_isp);
#line 1175
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1178
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1189
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1189
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1189
    if (tmp___23 == 0) {
#line 1193
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1199
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1201
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1203
  mdev->state = ns;
#line 1205
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_37644.disk > 2) {
#line 1206
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1208
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1209
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1212
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_37644.conn <= 9) {
#line 1214
    tmp___24 = drbd_bm_bits(mdev);
#line 1214
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1216
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1220
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1222
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1223
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1225
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1226
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1229
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1231
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1232
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1235
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1237
    now = jiffies;
#line 1240
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_37644.conn);
#line 1241
    mdev->rs_start = now;
#line 1242
    mdev->rs_last_events = 0;
#line 1243
    mdev->rs_last_sect_ev = 0;
#line 1244
    mdev->ov_last_oos_size = 0UL;
#line 1245
    mdev->ov_last_oos_start = 0UL;
#line 1247
    i = 0;
#line 1247
    goto ldv_48565;
    ldv_48564: 
#line 1248
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1249
    mdev->rs_mark_time[i] = now;
#line 1247
    i = i + 1;
    ldv_48565: ;
#line 1247
    if (i <= 7) {
#line 1248
      goto ldv_48564;
    } else {

    }
#line 1252
    drbd_rs_controller_reset(mdev);
#line 1254
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1255
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1257
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1261
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1261
  if (tmp___26 != 0) {
#line 1262
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1266
    tmp___25 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1266
    if (tmp___25 != 0) {
#line 1267
      mdf = mdf | 64U;
    } else {

    }
#line 1268
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_37644.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1270
      mdf = mdf | 2U;
    } else {

    }
#line 1271
    if ((int )mdev->state.ldv_37644.conn > 9) {
#line 1272
      mdf = mdf | 4U;
    } else {

    }
#line 1273
    if ((int )mdev->state.ldv_37644.disk > 4) {
#line 1274
      mdf = mdf | 1U;
    } else {

    }
#line 1275
    if ((int )mdev->state.ldv_37644.disk > 5) {
#line 1276
      mdf = mdf | 16U;
    } else {

    }
#line 1277
    if ((int )mdev->state.ldv_37644.pdsk <= 5 && (int )mdev->state.ldv_37644.pdsk > 3) {
#line 1278
      mdf = mdf | 32U;
    } else {

    }
#line 1279
    if ((mdev->ldev)->md.flags != mdf) {
#line 1280
      (mdev->ldev)->md.flags = mdf;
#line 1281
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1283
    if ((int )os.ldv_37644.disk <= 6 && (int )ns.ldv_37644.disk > 6) {
#line 1284
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1285
    put_ldev(mdev);
  } else {

  }
#line 1289
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1291
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1294
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1295
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1298
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1299
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1302
  if (((int )os.ldv_37644.conn > 7 && (int )ns.ldv_37644.conn <= 7) && (int )ns.ldv_37644.conn > 2) {
#line 1304
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1307
  if ((int )os.ldv_37644.conn <= 9 && (int )ns.ldv_37644.conn > 9) {
#line 1308
    drbd_resume_al(mdev);
  } else {

  }
#line 1310
  tmp___27 = kmalloc(48UL, 32U);
#line 1310
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1311
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1312
    ascw->os = os;
#line 1313
    ascw->ns = ns;
#line 1314
    ascw->flags = flags;
#line 1315
    ascw->w.cb = & w_after_state_ch;
#line 1316
    ascw->done = done;
#line 1317
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1319
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1322
  return (rv);
}
}
#line 1325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1328
  __mptr = (struct drbd_work  const  *)w;
#line 1328
  ascw = (struct after_state_chg_work *)__mptr;
#line 1329
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1330
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1331
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1331
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1331);
    } else {

    }
#line 1332
    complete(ascw->done);
  } else {

  }
#line 1334
  kfree((void const   *)ascw);
#line 1336
  return (1);
}
}
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1341
  if (rv != 0) {
#line 1342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1343
    val.i = 0U;
#line 1343
    val.ldv_37644.conn = 10U;
#line 1343
    mask.i = 0U;
#line 1343
    mask.ldv_37644.conn = 31U;
#line 1343
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1344
    return;
  } else {

  }
#line 1347
  switch ((int )mdev->state.ldv_37644.conn) {
  case 12: 
#line 1349
  val___0.i = 0U;
#line 1349
  val___0.ldv_37644.conn = 15U;
#line 1349
  mask___0.i = 0U;
#line 1349
  mask___0.ldv_37644.conn = 31U;
#line 1349
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1350
  goto ldv_48589;
  case 11: 
#line 1352
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1353
  goto ldv_48589;
  }
  ldv_48589: ;
#line 1356
  return;
}
}
#line 1357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1363
  tmp = get_current();
#line 1363
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1363
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1363);
  } else {

  }
#line 1366
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 1368
  drbd_bm_lock(mdev, why, flags);
#line 1369
  rv = (*io_fn)(mdev);
#line 1370
  drbd_bm_unlock(mdev);
#line 1372
  drbd_resume_io(mdev);
#line 1374
  return (rv);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 1388
  what = nothing;
#line 1389
  nsm.i = 4294967295U;
#line 1391
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1392
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1393
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1394
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1397
  fp = FP_DONT_CARE;
#line 1398
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1398
  if (tmp != 0) {
#line 1399
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1400
    put_ldev(mdev);
  } else {

  }
#line 1404
  drbd_bcast_state(mdev, ns);
#line 1406
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37644.disk > 7) || (int )os.ldv_37644.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37644.disk <= 7) && (int )ns.ldv_37644.pdsk <= 7)) {
#line 1408
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1413
  nsm.i = 4294967295U;
#line 1414
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1415
    if ((int )os.ldv_37644.conn <= 9 && (int )ns.ldv_37644.conn > 9) {
#line 1416
      what = resend;
    } else {

    }
#line 1418
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_37644.disk > 1) {
#line 1419
      what = restart_frozen_disk_io;
    } else {

    }
#line 1421
    if ((unsigned int )what != 26U) {
#line 1422
      nsm.ldv_37644.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1425
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1427
    if ((int )os.ldv_37644.pdsk > 5 && (int )ns.ldv_37644.pdsk <= 5) {
#line 1428
      tl_clear(mdev);
#line 1429
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1429
      if (tmp___0 != 0) {
#line 1430
        drbd_uuid_new_current(mdev);
#line 1431
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1433
      spin_lock_irq(& mdev->req_lock);
#line 1434
      __ns.i = mdev->state.i;
#line 1434
      __ns.ldv_37644.susp_fen = 0U;
#line 1434
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1435
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1438
    if ((int )os.ldv_37644.conn <= 9 && (int )ns.ldv_37644.conn > 9) {
#line 1439
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1440
      what = resend;
#line 1441
      nsm.ldv_37644.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1445
  if ((unsigned int )what != 26U) {
#line 1446
    spin_lock_irq(& mdev->req_lock);
#line 1447
    _tl_restart(mdev, what);
#line 1448
    nsm.i = nsm.i & mdev->state.i;
#line 1449
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1450
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1457
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1457
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1457
    if (tmp___1 != 0) {
#line 1460
      drbd_gen_and_send_sync_uuid(mdev);
#line 1461
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1465
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_37644.pdsk > 0) {
#line 1466
    drbd_send_uuids(mdev);
#line 1467
    drbd_send_state(mdev);
  } else {

  }
#line 1472
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1474
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1479
  if ((((int )os.ldv_37644.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_37644.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1485
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1485
    if (tmp___3 != 0) {
#line 1486
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_37644.disk > 7) {
#line 1488
        tmp___2 = is_susp(mdev->state);
#line 1488
        if (tmp___2 != 0) {
#line 1489
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1491
          drbd_uuid_new_current(mdev);
#line 1492
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1495
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1499
  if ((int )ns.ldv_37644.pdsk <= 3) {
#line 1499
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1499
    if (tmp___4 != 0) {
#line 1500
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1501
        drbd_uuid_new_current(mdev);
#line 1502
        drbd_send_uuids(mdev);
      } else {

      }
#line 1506
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1510
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_DONT_CLEAR);
      } else {

      }
#line 1512
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1518
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_37644.conn <= 10) {
#line 1518
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1518
    if (tmp___5 != 0) {
#line 1522
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1524
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1528
  if (((int )ns.ldv_37644.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1530
    drbd_send_sizes(mdev, 0, 0);
#line 1531
    drbd_send_uuids(mdev);
#line 1532
    drbd_send_state(mdev);
  } else {

  }
#line 1536
  if ((int )ns.ldv_37644.conn > 9 && ((int )os.ldv_37644.aftr_isp != (int )ns.ldv_37644.aftr_isp || (int )os.ldv_37644.user_isp != (int )ns.ldv_37644.user_isp)) {
#line 1539
    drbd_send_state(mdev);
  } else {

  }
#line 1542
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1544
    suspend_other_sg(mdev);
  } else {

  }
#line 1548
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_37644.conn > 9) {
#line 1549
    drbd_send_state(mdev);
  } else {

  }
#line 1551
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1552
    drbd_send_state(mdev);
  } else {

  }
#line 1555
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1558
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1563
  if ((((int )os.ldv_37644.conn <= 9 && (int )ns.ldv_37644.conn <= 9) && (int )os.ldv_37644.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1566
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1571
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1577
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1578
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1583
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1584
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.disk);
#line 1584
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___6);
    } else {

    }
#line 1588
    tmp___7 = drbd_send_state(mdev);
#line 1588
    if (tmp___7 != 0) {
#line 1589
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1591
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1593
    drbd_rs_cancel_all(mdev);
#line 1598
    drbd_md_sync(mdev);
#line 1599
    put_ldev(mdev);
#line 1601
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1602
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1608
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1611
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1612
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37644.disk);
#line 1612
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1616
    mdev->rs_total = 0UL;
#line 1617
    mdev->rs_failed = 0UL;
#line 1618
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1620
    tmp___9 = drbd_send_state(mdev);
#line 1620
    if (tmp___9 != 0) {
#line 1621
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {

    }
#line 1624
    put_ldev(mdev);
  } else {

  }
#line 1628
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1629
    drbd_send_state(mdev);
  } else {

  }
#line 1632
  if ((int )ns.ldv_37644.disk > 3 && (int )ns.ldv_37644.pdsk > 3) {
#line 1632
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1632
    if (tmp___10 != 0) {
#line 1634
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1635
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1639
  if ((((int )os.ldv_37644.conn > 10 && (int )ns.ldv_37644.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1642
    resume_next_sg(mdev);
  } else {

  }
#line 1646
  if (((int )os.ldv_37644.disk <= 7 && (int )os.ldv_37644.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1647
    drbd_send_state(mdev);
  } else {

  }
#line 1656
  if ((int )os.ldv_37644.conn > 10 && (int )ns.ldv_37644.conn <= 10) {
#line 1656
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1656
    if (tmp___11 != 0) {
#line 1657
      drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished",
                           BM_DONT_CLEAR);
#line 1659
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1663
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1663
    tmp___12 = is_susp(ns);
#line 1663
    if (tmp___12 == 0) {
#line 1663
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1664
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1667
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1668
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1672
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1675
    if ((int )os.ldv_37644.aftr_isp != (int )ns.ldv_37644.aftr_isp) {
#line 1676
      resume_next_sg(mdev);
    } else {

    }
#line 1678
    tmp___13 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1678
    if (tmp___13 != 0) {
#line 1679
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1682
  drbd_md_sync(mdev);
#line 1683
  return;
}
}
#line 1686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1688
  thi = (struct drbd_thread *)arg;
#line 1689
  mdev = thi->mdev;
  restart: 
#line 1694
  retval = (*(thi->function))(thi);
#line 1696
  tmp = spinlock_check(& thi->t_lock);
#line 1696
  flags = _raw_spin_lock_irqsave(tmp);
#line 1708
  if ((unsigned int )thi->t_state == 3U) {
#line 1709
    tmp___0 = get_current();
#line 1709
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1710
    thi->t_state = Running;
#line 1711
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1712
    goto restart;
  } else {

  }
#line 1715
  thi->task = 0;
#line 1716
  thi->t_state = None;
#line 1717
  __asm__  volatile   ("mfence": : : "memory");
#line 1718
  complete(& thi->stop);
#line 1719
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1721
  tmp___1 = get_current();
#line 1721
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1724
  module_put(& __this_module);
#line 1725
  return (retval);
}
}
#line 1728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1731
  spinlock_check(& thi->t_lock);
#line 1731
  __raw_spin_lock_init(& thi->t_lock.ldv_5802.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1732
  thi->task = 0;
#line 1733
  thi->t_state = None;
#line 1734
  thi->function = func;
#line 1735
  thi->mdev = mdev;
#line 1736
  return;
}
}
#line 1738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1740
  mdev = thi->mdev;
#line 1744
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1751
  tmp = spinlock_check(& thi->t_lock);
#line 1751
  flags = _raw_spin_lock_irqsave(tmp);
#line 1753
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1755
  tmp___0 = get_current();
#line 1755
  tmp___1 = get_current();
#line 1755
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1759
  tmp___2 = try_module_get___0(& __this_module);
#line 1759
  if (tmp___2 == 0) {
#line 1760
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1761
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1762
    return (0);
  } else {

  }
#line 1765
  init_completion(& thi->stop);
#line 1766
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1766);
  } else {

  }
#line 1767
  thi->reset_cpu_mask = 1;
#line 1768
  thi->t_state = Running;
#line 1769
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1770
  tmp___3 = get_current();
#line 1770
  flush_signals(tmp___3);
#line 1772
  tmp___4 = mdev_to_minor(mdev);
#line 1772
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___4,
                              me);
#line 1775
  tmp___5 = IS_ERR((void const   *)nt);
#line 1775
  if (tmp___5 != 0L) {
#line 1776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1778
    module_put(& __this_module);
#line 1779
    return (0);
  } else {

  }
#line 1781
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1781
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1782
  thi->task = nt;
#line 1783
  thi->t_state = Running;
#line 1784
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1785
  wake_up_process(nt);
#line 1786
  goto ldv_48645;
  case 2U: 
#line 1788
  thi->t_state = Restarting;
#line 1789
  tmp___7 = get_current();
#line 1789
  tmp___8 = get_current();
#line 1789
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1795
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1796
  goto ldv_48645;
  }
  ldv_48645: ;
#line 1799
  return (1);
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1807
  ns = restart != 0 ? Restarting : Exiting;
#line 1810
  tmp = spinlock_check(& thi->t_lock);
#line 1810
  flags = _raw_spin_lock_irqsave(tmp);
#line 1812
  if ((unsigned int )thi->t_state == 0U) {
#line 1813
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1814
    if (restart != 0) {
#line 1815
      drbd_thread_start(thi);
    } else {

    }
#line 1816
    return;
  } else {

  }
#line 1819
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1820
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1821
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1822
      return;
    } else {

    }
#line 1825
    thi->t_state = ns;
#line 1826
    __asm__  volatile   ("mfence": : : "memory");
#line 1827
    init_completion(& thi->stop);
#line 1828
    tmp___0 = get_current();
#line 1828
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1829
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1833
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1835
  if (wait != 0) {
#line 1836
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1837
  return;
}
}
#line 1847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1852
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1852
  if (tmp != 0U) {
#line 1853
    return;
  } else {

  }
#line 1855
  tmp___0 = mdev_to_minor(mdev);
#line 1855
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1855
  ord = (int )(tmp___0 % tmp___1);
#line 1856
  cpu = -1;
#line 1856
  goto ldv_48666;
  ldv_48665: 
#line 1857
  tmp___2 = ord;
#line 1857
  ord = ord - 1;
#line 1857
  if (tmp___2 == 0) {
#line 1858
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1859
    return;
  } else {

  }
  ldv_48666: 
#line 1856
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1856
  cpu = (int )tmp___3;
#line 1856
  if (cpu < nr_cpu_ids) {
#line 1857
    goto ldv_48665;
  } else {

  }
#line 1863
  cpumask_setall(mdev->cpu_mask);
#line 1864
  return;
}
}
#line 1873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1875
  tmp = get_current();
#line 1875
  p = tmp;
#line 1876
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1881
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1881
  if (_b != 0) {
#line 1881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1881);
  } else {

  }
#line 1881
  if (_b != 0) {
#line 1882
    return;
  } else {

  }
#line 1883
  if (thi->reset_cpu_mask == 0) {
#line 1884
    return;
  } else {

  }
#line 1885
  thi->reset_cpu_mask = 0;
#line 1886
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1887
  return;
}
}
#line 1891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1897
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1897
  if (_b != 0) {
#line 1897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1897);
  } else {

  }
#line 1897
  if (_b != 0) {
#line 1897
    return (0);
  } else {

  }
#line 1898
  _b___0 = size == 0UL;
#line 1898
  if (_b___0 != 0) {
#line 1898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1898);
  } else {

  }
#line 1898
  if (_b___0 != 0) {
#line 1898
    return (0);
  } else {

  }
#line 1900
  h->magic = 1728214147U;
#line 1901
  tmp = __fswab16((int )((__u16 )cmd));
#line 1901
  h->command = tmp;
#line 1902
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1902
  h->length = tmp___0;
#line 1904
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1906
  ok = (size_t )sent == size;
#line 1907
  if (ok == 0) {
#line 1907
    tmp___2 = get_current();
#line 1907
    tmp___3 = signal_pending(tmp___2);
#line 1907
    if (tmp___3 == 0) {
#line 1908
      tmp___1 = cmdname(cmd);
#line 1908
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 1910
  return (ok);
}
}
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1919
  ok = 0;
#line 1922
  if (use_data_socket != 0) {
#line 1923
    ldv_mutex_lock_121(& mdev->data.mutex);
#line 1924
    sock = mdev->data.socket;
  } else {
#line 1926
    ldv_mutex_lock_122(& mdev->meta.mutex);
#line 1927
    sock = mdev->meta.socket;
  }
#line 1932
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1932
  if (tmp != 0L) {
#line 1933
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1935
  if (use_data_socket != 0) {
#line 1936
    ldv_mutex_unlock_123(& mdev->data.mutex);
  } else {
#line 1938
    ldv_mutex_unlock_124(& mdev->meta.mutex);
  }
#line 1939
  return (ok);
}
}
#line 1942 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1948
  h.magic = 1728214147U;
#line 1949
  tmp = __fswab16((int )((__u16 )cmd));
#line 1949
  h.command = tmp;
#line 1950
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1950
  h.length = tmp___0;
#line 1952
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1952
  if (tmp___1 == 0) {
#line 1953
    return (0);
  } else {

  }
#line 1955
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1955
  ok = tmp___2 == 8;
#line 1957
  if (ok != 0) {
#line 1957
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1957
    if ((size_t )tmp___3 == size) {
#line 1957
      tmp___4 = 1;
    } else {
#line 1957
      tmp___4 = 0;
    }
  } else {
#line 1957
    tmp___4 = 0;
  }
#line 1957
  ok = tmp___4;
#line 1960
  drbd_put_data_sock___0(mdev);
#line 1962
  return (ok);
}
}
#line 1965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1970
  apv = mdev->agreed_pro_version;
#line 1972
  if (apv > 87) {
#line 1972
    if (apv == 88) {
#line 1972
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1972
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1972
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1972
    size = tmp___0;
  } else {
#line 1972
    size = 12;
  }
#line 1981
  ldv_mutex_lock_125(& mdev->data.mutex);
#line 1982
  sock = mdev->data.socket;
#line 1984
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1984
  if (tmp___6 != 0L) {
#line 1985
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1987
    p = & mdev->data.sbuf.rs_param_95;
#line 1990
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1992
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1992
    p->rate = tmp___1;
#line 1993
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1993
    p->c_plan_ahead = tmp___2;
#line 1994
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1994
    p->c_delay_target = tmp___3;
#line 1995
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1995
    p->c_fill_target = tmp___4;
#line 1996
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1996
    p->c_max_rate = tmp___5;
#line 1998
    if (apv > 87) {
#line 1999
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2000
    if (apv > 88) {
#line 2001
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2003
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2005
    rv = 0;
  }
#line 2007
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 2009
  return (rv);
}
}
#line 2012 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2017
  size = 32;
#line 2019
  if (mdev->agreed_pro_version > 86) {
#line 2020
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2020
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2024
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2024
  p = (struct p_protocol *)tmp___0;
#line 2025
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2026
    return (0);
  } else {

  }
#line 2028
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2028
  p->protocol = tmp___1;
#line 2029
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2029
  p->after_sb_0p = tmp___2;
#line 2030
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2030
  p->after_sb_1p = tmp___3;
#line 2031
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2031
  p->after_sb_2p = tmp___4;
#line 2032
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2032
  p->two_primaries = tmp___5;
#line 2034
  cf = 0;
#line 2035
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2036
    cf = cf | 1;
  } else {

  }
#line 2037
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2038
    if (mdev->agreed_pro_version > 91) {
#line 2039
      cf = cf | 2;
    } else {
#line 2041
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2042
      kfree((void const   *)p);
#line 2043
      return (-1);
    }
  } else {

  }
#line 2046
  tmp___6 = __fswab32((__u32 )cf);
#line 2046
  p->conn_flags = tmp___6;
#line 2048
  if (mdev->agreed_pro_version > 86) {
#line 2049
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2051
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2053
  kfree((void const   *)p);
#line 2054
  return (rv);
}
}
#line 2057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2062
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2062
  if (tmp == 0) {
#line 2063
    return (1);
  } else {

  }
#line 2065
  i = 0;
#line 2065
  goto ldv_48732;
  ldv_48731: ;
#line 2066
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2066
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2066
    p.uuid[i] = tmp___0;
  } else {
#line 2066
    p.uuid[i] = 0ULL;
  }
#line 2065
  i = i + 1;
  ldv_48732: ;
#line 2065
  if (i <= 3) {
#line 2066
    goto ldv_48731;
  } else {

  }
#line 2068
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2069
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2069
  p.uuid[4] = tmp___1;
#line 2070
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2071
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2071
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2072
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2073
  tmp___3 = __fswab64(uuid_flags);
#line 2073
  p.uuid[5] = tmp___3;
#line 2075
  put_ldev(mdev);
#line 2077
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2077
  return (tmp___4);
}
}
#line 2081 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2083
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2083
  return (tmp);
}
}
#line 2086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2088
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2088
  return (tmp);
}
}
#line 2091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2093
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2093
  if (tmp != 0) {
#line 2094
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2095
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2101
    put_ldev(mdev);
  } else {
#line 2103
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2104
  return;
}
}
#line 2109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2114
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2114
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2114);
  } else {

  }
#line 2116
  uuid = (mdev->ldev)->md.uuid[1] + 281474976710656ULL;
#line 2117
  drbd_uuid_set(mdev, 1, uuid);
#line 2118
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2119
  drbd_md_sync(mdev);
#line 2120
  tmp = __fswab64(uuid);
#line 2120
  p.uuid = tmp;
#line 2122
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2122
  return (tmp___0);
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2133
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2133
  if (tmp___0 != 0) {
#line 2134
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2134
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2134);
    } else {

    }
#line 2135
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2136
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2137
    q_order_type = drbd_queue_order_type(mdev);
#line 2138
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2138
    max_bio_size = (int )(tmp << 9);
#line 2139
    __min1 = max_bio_size;
#line 2139
    __min2 = 131072;
#line 2139
    max_bio_size = __min1 < __min2 ? __min1 : __min2;
#line 2140
    put_ldev(mdev);
  } else {
#line 2142
    d_size = 0UL;
#line 2143
    u_size = 0UL;
#line 2144
    q_order_type = 0;
#line 2145
    max_bio_size = 131072;
  }
#line 2148
  tmp___1 = __fswab64((__u64 )d_size);
#line 2148
  p.d_size = tmp___1;
#line 2149
  tmp___2 = __fswab64((__u64 )u_size);
#line 2149
  p.u_size = tmp___2;
#line 2150
  if (trigger_reply == 0) {
#line 2150
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2150
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2150
    tmp___4 = 0ULL;
  }
#line 2150
  tmp___5 = __fswab64(tmp___4);
#line 2150
  p.c_size = tmp___5;
#line 2151
  tmp___6 = __fswab32((__u32 )max_bio_size);
#line 2151
  p.max_bio_size = tmp___6;
#line 2152
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2152
  p.queue_order_type = tmp___7;
#line 2153
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2153
  p.dds_flags = tmp___8;
#line 2155
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2157
  return (ok);
}
}
#line 2164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2168
  ok = 0;
#line 2172
  drbd_state_lock___0(mdev);
#line 2174
  ldv_mutex_lock_127(& mdev->data.mutex);
#line 2176
  tmp = __fswab32(mdev->state.i);
#line 2176
  p.state = tmp;
#line 2177
  sock = mdev->data.socket;
#line 2179
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2179
  if (tmp___0 != 0L) {
#line 2180
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2184
  ldv_mutex_unlock_128(& mdev->data.mutex);
#line 2186
  drbd_state_unlock(mdev);
#line 2187
  return (ok);
}
}
#line 2190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2195
  tmp = __fswab32(mask.i);
#line 2195
  p.mask = tmp;
#line 2196
  tmp___0 = __fswab32(val.i);
#line 2196
  p.val = tmp___0;
#line 2198
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2198
  return (tmp___1);
}
}
#line 2202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2206
  tmp = __fswab32((__u32 )retcode);
#line 2206
  p.retcode = tmp;
#line 2208
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2208
  return (tmp___0);
}
}
#line 2212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2225
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2227
    return (0);
  } else {

  }
#line 2229
  if (c->bit_offset >= c->bm_bits) {
#line 2230
    return (0);
  } else {

  }
#line 2233
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2234
  memset((void *)(& p->code), 0, 4087UL);
#line 2236
  plain_bits = 0UL;
#line 2241
  toggle = 2U;
  ldv_48795: ;
#line 2246
  if (toggle == 0U) {
#line 2246
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2246
    tmp = tmp___0;
  } else {
#line 2246
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2246
    tmp = tmp___1;
  }
#line 2248
  if (tmp == 0xffffffffffffffffUL) {
#line 2249
    tmp = c->bm_bits;
  } else {

  }
#line 2250
  rl = tmp - c->bit_offset;
#line 2252
  if (toggle == 2U) {
#line 2253
    if (rl == 0UL) {
#line 2256
      DCBP_set_start(p, 1);
#line 2258
      toggle = toggle == 0U;
#line 2259
      goto ldv_48793;
    } else {

    }
#line 2261
    DCBP_set_start(p, 0);
  } else {

  }
#line 2266
  if (rl == 0UL) {
#line 2267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2269
    return (-1);
  } else {

  }
#line 2272
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2273
  if (bits == -105) {
#line 2274
    goto ldv_48794;
  } else {

  }
#line 2275
  if (bits <= 0) {
#line 2276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2277
    return (0);
  } else {

  }
#line 2280
  toggle = toggle == 0U;
#line 2281
  plain_bits = plain_bits + rl;
#line 2282
  c->bit_offset = tmp;
  ldv_48793: ;
#line 2283
  if (c->bit_offset < c->bm_bits) {
#line 2284
    goto ldv_48795;
  } else {

  }
  ldv_48794: 
#line 2285
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2287
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2290
    c->bit_offset = c->bit_offset - plain_bits;
#line 2291
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2292
    c->bit_offset = c->word_offset * 64UL;
#line 2293
    return (0);
  } else {

  }
#line 2298
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2301
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2303
  return ((int )len);
}
}
#line 2313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2316
  p = (struct p_compressed_bm *)h;
#line 2321
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2323
  if (len < 0) {
#line 2324
    return (-5);
  } else {

  }
#line 2326
  if (len != 0) {
#line 2327
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2328
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2331
    c->packets[0] = c->packets[0] + 1U;
#line 2332
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2334
    if (c->bit_offset >= c->bm_bits) {
#line 2335
      len = 0;
    } else {

    }
  } else {
#line 2339
    __min1 = 511UL;
#line 2339
    __min2 = c->bm_words - c->word_offset;
#line 2339
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2340
    len = (int )((unsigned int )num_words * 8U);
#line 2341
    if (len != 0) {
#line 2342
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2343
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2345
    c->word_offset = c->word_offset + num_words;
#line 2346
    c->bit_offset = c->word_offset * 64UL;
#line 2348
    c->packets[1] = c->packets[1] + 1U;
#line 2349
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2351
    if (c->bit_offset > c->bm_bits) {
#line 2352
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2354
  if (ok != 0) {
#line 2355
    if (len == 0) {
#line 2356
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2357
      return (0);
    } else {
#line 2359
      return (1);
    }
  } else {

  }
#line 2361
  return (-5);
}
}
#line 2365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2371
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2371
  if (_b != 0) {
#line 2371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2371);
  } else {

  }
#line 2371
  if (_b != 0) {
#line 2371
    return (0);
  } else {

  }
#line 2375
  tmp = __get_free_pages(16U, 0U);
#line 2375
  p = (struct p_header80 *)tmp;
#line 2376
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2378
    return (0);
  } else {

  }
#line 2381
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2381
  if (tmp___2 != 0) {
#line 2382
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2382
    if (tmp___1 != 0) {
#line 2383
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2384
      drbd_bm_set_all(mdev);
#line 2385
      tmp___0 = drbd_bm_write(mdev);
#line 2385
      if (tmp___0 != 0) {
#line 2389
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2391
        drbd_md_clear_flag(mdev, 8);
#line 2392
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2395
    put_ldev(mdev);
  } else {

  }
#line 2398
  tmp___3 = drbd_bm_bits(mdev);
#line 2398
  tmp___4 = drbd_bm_words(mdev);
#line 2398
  __constr_expr_0.bm_bits = tmp___3;
#line 2398
  __constr_expr_0.bm_words = tmp___4;
#line 2398
  __constr_expr_0.bit_offset = 0UL;
#line 2398
  __constr_expr_0.word_offset = 0UL;
#line 2398
  __constr_expr_0.packets[0] = 0U;
#line 2398
  __constr_expr_0.packets[1] = 0U;
#line 2398
  __constr_expr_0.bytes[0] = 0U;
#line 2398
  __constr_expr_0.bytes[1] = 0U;
#line 2398
  c = __constr_expr_0;
  ldv_48818: 
#line 2404
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2405
  if (err > 0) {
#line 2406
    goto ldv_48818;
  } else {

  }
#line 2407
  free_pages((unsigned long )p, 0U);
#line 2408
  return (err == 0);
}
}
#line 2411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2415
  tmp = drbd_get_data_sock___0(mdev);
#line 2415
  if (tmp == 0) {
#line 2416
    return (-1);
  } else {

  }
#line 2417
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2417
  err = tmp___0 == 0;
#line 2418
  drbd_put_data_sock___0(mdev);
#line 2419
  return (err);
}
}
#line 2422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2427
  p.barrier = barrier_nr;
#line 2428
  tmp = __fswab32(set_size);
#line 2428
  p.set_size = tmp;
#line 2430
  if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 2431
    return (0);
  } else {

  }
#line 2432
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2434
  return (ok);
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2453
  p.sector = sector;
#line 2454
  p.block_id = block_id;
#line 2455
  p.blksize = blksize;
#line 2456
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2456
  tmp___0 = __fswab32((__u32 )tmp);
#line 2456
  p.seq_num = tmp___0;
#line 2458
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_37644.conn <= 9) {
#line 2459
    return (0);
  } else {

  }
#line 2460
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2462
  return (ok);
}
}
#line 2468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2471
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2471
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2471
    tmp___0 = tmp;
  } else {
#line 2471
    tmp___0 = 0U;
  }
#line 2471
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2473
  tmp___1 = __fswab32((__u32 )data_size);
#line 2473
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2473
  return (tmp___2);
}
}
#line 2477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2480
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2480
  return (tmp);
}
}
#line 2489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2492
  tmp = __fswab32(e->size);
#line 2492
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2492
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_45843.block_id);
#line 2492
  return (tmp___1);
}
}
#line 2500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2503
  tmp = __fswab64(block_id);
#line 2503
  tmp___0 = __fswab32((__u32 )blksize);
#line 2503
  tmp___1 = __fswab64((__u64 )sector);
#line 2503
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2503
  return (tmp___2);
}
}
#line 2509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2515
  tmp = __fswab64((__u64 )sector);
#line 2515
  p.sector = tmp;
#line 2516
  p.block_id = block_id;
#line 2517
  tmp___0 = __fswab32((__u32 )size);
#line 2517
  p.blksize = tmp___0;
#line 2519
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2521
  return (ok);
}
}
#line 2524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2532
  tmp = __fswab64((__u64 )sector);
#line 2532
  p.sector = tmp;
#line 2533
  p.block_id = 1728263026ULL;
#line 2534
  tmp___0 = __fswab32((__u32 )size);
#line 2534
  p.blksize = tmp___0;
#line 2536
  p.head.magic = 1728214147U;
#line 2537
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2537
  p.head.command = tmp___1;
#line 2538
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2538
  p.head.length = tmp___2;
#line 2540
  ldv_mutex_lock_129(& mdev->data.mutex);
#line 2542
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2542
  ok = tmp___3 == 32;
#line 2543
  if (ok != 0) {
#line 2543
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2543
    if (tmp___4 == digest_size) {
#line 2543
      tmp___5 = 1;
    } else {
#line 2543
      tmp___5 = 0;
    }
  } else {
#line 2543
    tmp___5 = 0;
  }
#line 2543
  ok = tmp___5;
#line 2545
  ldv_mutex_unlock_130(& mdev->data.mutex);
#line 2547
  return (ok);
}
}
#line 2550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2555
  tmp = __fswab64((__u64 )sector);
#line 2555
  p.sector = tmp;
#line 2556
  p.block_id = 1728261953ULL;
#line 2557
  tmp___0 = __fswab32((__u32 )size);
#line 2557
  p.blksize = tmp___0;
#line 2559
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2561
  return (ok);
}
}
#line 2568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2573
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2573
    tmp___0 = 1;
  } else {
#line 2573
    tmp = get_t_state(& mdev->asender);
#line 2573
    if ((unsigned int )tmp != 1U) {
#line 2573
      tmp___0 = 1;
    } else
#line 2573
    if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 2573
      tmp___0 = 1;
    } else {
#line 2573
      tmp___0 = 0;
    }
  }
#line 2573
  drop_it = tmp___0;
#line 2578
  if (drop_it != 0) {
#line 2579
    return (1);
  } else {

  }
#line 2581
  mdev->ko_count = mdev->ko_count - 1U;
#line 2581
  drop_it = mdev->ko_count == 0U;
#line 2582
  if (drop_it == 0) {
#line 2583
    tmp___1 = get_current();
#line 2583
    tmp___2 = get_current();
#line 2583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2585
    request_ping(mdev);
  } else {

  }
#line 2588
  return (drop_it);
}
}
#line 2612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2615
  tmp = kmap(page);
#line 2615
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2615
  sent = tmp___0;
#line 2616
  kunmap(page);
#line 2617
  if ((size_t )sent == size) {
#line 2618
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2619
  return ((size_t )sent == size);
}
}
#line 2622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2625
  tmp = current_thread_info___1();
#line 2625
  oldfs = tmp->addr_limit;
#line 2627
  len = (int )size;
#line 2635
  if (disable_sendpage != 0) {
#line 2636
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2636
    return (tmp___0);
  } else {
#line 2635
    tmp___1 = page_count(page);
#line 2635
    if (tmp___1 <= 0) {
#line 2636
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2636
      return (tmp___0);
    } else {
#line 2635
      tmp___2 = PageSlab(page);
#line 2635
      if (tmp___2 != 0) {
#line 2636
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2636
        return (tmp___0);
      } else {

      }
    }
  }
#line 2638
  msg_flags = msg_flags | 16384U;
#line 2639
  drbd_update_congested(mdev);
#line 2640
  tmp___3 = current_thread_info___1();
#line 2640
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2640
  tmp___3->addr_limit = __constr_expr_0;
  ldv_48917: 
#line 2642
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2642
  sent = (int )tmp___4;
#line 2645
  if (sent == -11) {
#line 2646
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2646
    if (tmp___5 != 0) {
#line 2648
      goto ldv_48914;
    } else {
#line 2650
      goto ldv_48915;
    }
  } else {

  }
#line 2652
  if (sent <= 0) {
#line 2653
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2655
    goto ldv_48914;
  } else {

  }
#line 2657
  len = len - sent;
#line 2658
  offset = offset + sent;
  ldv_48915: ;
#line 2659
  if (len > 0) {
#line 2660
    goto ldv_48917;
  } else {

  }
  ldv_48914: 
#line 2660
  tmp___6 = current_thread_info___1();
#line 2660
  tmp___6->addr_limit = oldfs;
#line 2661
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2663
  ok = len == 0;
#line 2664
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2664
  if (tmp___7 != 0L) {
#line 2665
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2666
  return (ok);
}
}
#line 2669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2674
  bvec = bio->bi_io_vec;
#line 2674
  i = 0;
#line 2674
  goto ldv_48925;
  ldv_48924: 
#line 2675
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2675
  if (tmp == 0) {
#line 2678
    return (0);
  } else {

  }
#line 2674
  bvec = bvec + 1;
#line 2674
  i = i + 1;
  ldv_48925: ;
#line 2674
  if ((int )bio->bi_vcnt > i) {
#line 2675
    goto ldv_48924;
  } else {

  }

#line 2680
  return (1);
}
}
#line 2683 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2688
  bvec = bio->bi_io_vec;
#line 2688
  i = 0;
#line 2688
  goto ldv_48934;
  ldv_48933: 
#line 2689
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2689
  if (tmp == 0) {
#line 2692
    return (0);
  } else {

  }
#line 2688
  bvec = bvec + 1;
#line 2688
  i = i + 1;
  ldv_48934: ;
#line 2688
  if ((int )bio->bi_vcnt > i) {
#line 2689
    goto ldv_48933;
  } else {

  }

#line 2694
  return (1);
}
}
#line 2697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2699
  page = e->pages;
#line 2700
  len = e->size;
#line 2702
  goto ldv_48948;
  ldv_48947: 
#line 2703
  __min1 = len;
#line 2703
  __min2 = 4096U;
#line 2703
  l = __min1 < __min2 ? __min1 : __min2;
#line 2704
  tmp = page_chain_next(page);
#line 2704
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2704
  if (tmp___0 == 0) {
#line 2706
    return (0);
  } else {

  }
#line 2707
  len = len - l;
#line 2702
  page = page_chain_next(page);
  ldv_48948: ;
#line 2702
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2702
    tmp___1 = page_chain_next(page);
#line 2702
    __builtin_prefetch((void const   *)tmp___1);
#line 2702
    if (1 != 0) {
#line 2703
      goto ldv_48947;
    } else {
#line 2705
      goto ldv_48949;
    }
  } else {

  }
  ldv_48949: ;
#line 2709
  return (1);
}
}
#line 2712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2714
  if (mdev->agreed_pro_version > 94) {
#line 2715
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 4096UL) != 0UL ? 16 : 0)) | ((bi_rw & 8388608UL) != 0UL ? 32 : 0)) | ((int )bi_rw & 64)));
  } else {
#line 2720
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2728
  ok = 1;
#line 2730
  dp_flags = 0U;
#line 2734
  tmp = drbd_get_data_sock___0(mdev);
#line 2734
  if (tmp == 0) {
#line 2735
    return (0);
  } else {

  }
#line 2737
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2737
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2737
    dgs = (int )tmp___0;
  } else {
#line 2737
    dgs = 0;
  }
#line 2740
  if (req->size <= 32768U) {
#line 2741
    p.head.h80.magic = 1728214147U;
#line 2742
    p.head.h80.command = 0U;
#line 2743
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2743
    p.head.h80.length = tmp___1;
  } else {
#line 2746
    p.head.h95.magic = 23171U;
#line 2747
    p.head.h95.command = 0U;
#line 2748
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2748
    p.head.h95.length = tmp___2;
  }
#line 2752
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2752
  p.sector = tmp___3;
#line 2753
  p.block_id = (u64 )req;
#line 2754
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2754
  req->seq_num = tmp___4;
#line 2754
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2754
  p.seq_num = tmp___5;
#line 2757
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2759
  if ((int )mdev->state.ldv_37644.conn > 15 && (int )mdev->state.ldv_37644.conn <= 21) {
#line 2761
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2763
  tmp___6 = __fswab32(dp_flags);
#line 2763
  p.dp_flags = tmp___6;
#line 2764
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2765
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2765
  ok = tmp___7 == 32;
#line 2767
  if (ok != 0 && dgs != 0) {
#line 2768
    dgb = mdev->int_dig_out;
#line 2769
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2770
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2770
    ok = tmp___8 == dgs;
  } else {

  }
#line 2772
  if (ok != 0) {
#line 2784
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2785
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2787
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2790
    if (dgs > 0 && dgs <= 64) {
#line 2794
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2795
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2795
      if (tmp___9 != 0) {
#line 2796
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2805
  drbd_put_data_sock___0(mdev);
#line 2807
  return (ok);
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2822
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2822
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2822
    dgs = (int )tmp;
  } else {
#line 2822
    dgs = 0;
  }
#line 2825
  if (e->size <= 32768U) {
#line 2826
    p.head.h80.magic = 1728214147U;
#line 2827
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2827
    p.head.h80.command = tmp___0;
#line 2828
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2828
    p.head.h80.length = tmp___1;
  } else {
#line 2831
    p.head.h95.magic = 23171U;
#line 2832
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2832
    p.head.h95.command = tmp___2;
#line 2833
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2833
    p.head.h95.length = tmp___3;
  }
#line 2837
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2837
  p.sector = tmp___4;
#line 2838
  p.block_id = e->ldv_45843.block_id;
#line 2845
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 2845
  if (tmp___5 == 0) {
#line 2846
    return (0);
  } else {

  }
#line 2848
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2848
  ok = tmp___6 == 32;
#line 2849
  if (ok != 0 && dgs != 0) {
#line 2850
    dgb = mdev->int_dig_out;
#line 2851
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2852
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2852
    ok = tmp___7 == dgs;
  } else {

  }
#line 2854
  if (ok != 0) {
#line 2855
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2857
  drbd_put_data_sock___0(mdev);
#line 2859
  return (ok);
}
}
#line 2862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2866
  tmp = __fswab64((__u64 )req->sector);
#line 2866
  p.sector = tmp;
#line 2867
  tmp___0 = __fswab32(req->size);
#line 2867
  p.blksize = tmp___0;
#line 2869
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 2869
  return (tmp___1);
}
}
#line 2888 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2893
  sent = 0;
#line 2895
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2896
    return (-1000);
  } else {

  }
#line 2900
  iov.iov_base = buf;
#line 2901
  iov.iov_len = size;
#line 2903
  msg.msg_name = 0;
#line 2904
  msg.msg_namelen = 0;
#line 2905
  msg.msg_control = 0;
#line 2906
  msg.msg_controllen = 0UL;
#line 2907
  msg.msg_flags = msg_flags | 16384U;
#line 2909
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2910
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2911
    drbd_update_congested(mdev);
  } else {

  }
  ldv_48991: 
#line 2923
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2924
  if (rv == -11) {
#line 2925
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2925
    if (tmp != 0) {
#line 2926
      goto ldv_48989;
    } else {
#line 2928
      goto ldv_48990;
    }
  } else {

  }
#line 2930
  if (rv == 0) {
#line 2930
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2930);
  } else {

  }
#line 2931
  if (rv == -4) {
#line 2932
    tmp___0 = get_current();
#line 2932
    flush_signals(tmp___0);
#line 2933
    rv = 0;
  } else {

  }
#line 2935
  if (rv < 0) {
#line 2936
    goto ldv_48989;
  } else {

  }
#line 2937
  sent = sent + rv;
#line 2938
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2939
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_48990: ;
#line 2940
  if ((size_t )sent < size) {
#line 2941
    goto ldv_48991;
  } else {

  }
  ldv_48989: ;
#line 2942
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2943
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2945
  if (rv <= 0) {
#line 2946
    if (rv != -11) {
#line 2947
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2950
      val.i = 0U;
#line 2950
      val.ldv_37644.conn = 4U;
#line 2950
      mask.i = 0U;
#line 2950
      mask.ldv_37644.conn = 31U;
#line 2950
      drbd_force_state(mdev, mask, val);
    } else {
#line 2952
      val___0.i = 0U;
#line 2952
      val___0.ldv_37644.conn = 3U;
#line 2952
      mask___0.i = 0U;
#line 2952
      mask___0.ldv_37644.conn = 31U;
#line 2952
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2955
  return (sent);
}
}
#line 2958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2960
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2962
  rv = 0;
#line 2964
  ldv_mutex_lock_131(& drbd_main_mutex);
#line 2965
  tmp = spinlock_check(& mdev->req_lock);
#line 2965
  flags = _raw_spin_lock_irqsave(tmp);
#line 2969
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 2970
    if ((mode & 2U) != 0U) {
#line 2971
      rv = -30;
    } else
#line 2972
    if (allow_oos == 0) {
#line 2973
      rv = -124;
    } else {

    }
  } else {

  }
#line 2976
  if (rv == 0) {
#line 2977
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2978
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2979
  ldv_mutex_unlock_132(& drbd_main_mutex);
#line 2981
  return (rv);
}
}
#line 2984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2986
  mdev = (struct drbd_conf *)gd->private_data;
#line 2987
  ldv_mutex_lock_133(& drbd_main_mutex);
#line 2988
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2989
  ldv_mutex_unlock_134(& drbd_main_mutex);
#line 2990
  return (0);
}
}
#line 2993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2997
  __constr_expr_0.rate = 250;
#line 2997
  __constr_expr_0.after = -1;
#line 2997
  __constr_expr_0.al_extents = 127;
#line 2997
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2997
  __constr_expr_0.verify_alg_len = 0;
#line 2997
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2997
  __constr_expr_0.cpu_mask_len = 0;
#line 2997
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2997
  __constr_expr_0.csums_alg_len = 0;
#line 2997
  __constr_expr_0.use_rle = 0U;
#line 2997
  __constr_expr_0.on_no_data = 0;
#line 2997
  __constr_expr_0.c_plan_ahead = 0;
#line 2997
  __constr_expr_0.c_delay_target = 10;
#line 2997
  __constr_expr_0.c_fill_target = 0;
#line 2997
  __constr_expr_0.c_max_rate = 102400;
#line 2997
  __constr_expr_0.c_min_rate = 4096;
#line 2997
  mdev->sync_conf = __constr_expr_0;
#line 3015
  __constr_expr_1.ldv_37644.role = 2U;
#line 3015
  __constr_expr_1.ldv_37644.peer = 0U;
#line 3015
  __constr_expr_1.ldv_37644.conn = 0U;
#line 3015
  __constr_expr_1.ldv_37644.disk = 0U;
#line 3015
  __constr_expr_1.ldv_37644.pdsk = 6U;
#line 3015
  __constr_expr_1.ldv_37644.susp = 0U;
#line 3015
  __constr_expr_1.ldv_37644.aftr_isp = (unsigned char)0;
#line 3015
  __constr_expr_1.ldv_37644.peer_isp = (unsigned char)0;
#line 3015
  __constr_expr_1.ldv_37644.user_isp = (unsigned char)0;
#line 3015
  __constr_expr_1.ldv_37644.susp_nod = 0U;
#line 3015
  __constr_expr_1.ldv_37644.susp_fen = 0U;
#line 3015
  __constr_expr_1.ldv_37644._pad = (unsigned short)0;
#line 3015
  mdev->state = __constr_expr_1;
#line 3016
  return;
}
}
#line 3027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;
  struct lock_class_key __key___18 ;

  {
#line 3032
  drbd_set_defaults(mdev);
#line 3034
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3035
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3036
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3037
  atomic_set(& mdev->unacked_cnt, 0);
#line 3038
  atomic_set(& mdev->local_cnt, 0);
#line 3039
  atomic_set(& mdev->net_cnt, 0);
#line 3040
  atomic_set(& mdev->packet_seq, 0);
#line 3041
  atomic_set(& mdev->pp_in_use, 0);
#line 3042
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3043
  atomic_set(& mdev->rs_sect_in, 0);
#line 3044
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3045
  atomic_set(& mdev->ap_in_flight, 0);
#line 3047
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 3048
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 3049
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 3050
  sema_init(& mdev->data.work.s, 0);
#line 3051
  sema_init(& mdev->meta.work.s, 0);
#line 3052
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 3054
  spinlock_check(& mdev->data.work.q_lock);
#line 3054
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5802.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 3055
  spinlock_check(& mdev->meta.work.q_lock);
#line 3055
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5802.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 3057
  spinlock_check(& mdev->al_lock);
#line 3057
  __raw_spin_lock_init(& mdev->al_lock.ldv_5802.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 3058
  spinlock_check(& mdev->req_lock);
#line 3058
  __raw_spin_lock_init(& mdev->req_lock.ldv_5802.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 3059
  spinlock_check(& mdev->peer_seq_lock);
#line 3059
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5802.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 3060
  spinlock_check(& mdev->epoch_lock);
#line 3060
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5802.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 3062
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3063
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3064
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3065
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3066
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3067
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3068
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3069
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3070
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3071
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3072
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3073
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3074
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3075
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3077
  mdev->resync_work.cb = & w_resync_timer;
#line 3078
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3079
  mdev->go_diskless.cb = & w_go_diskless;
#line 3080
  mdev->md_sync_work.cb = & w_md_sync;
#line 3081
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3082
  mdev->start_resync_work.cb = & w_start_resync;
#line 3083
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 3084
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 3085
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___11);
#line 3086
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___12);
#line 3087
  mdev->resync_timer.function = & resync_timer_fn;
#line 3088
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3089
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3090
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3091
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3092
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3093
  mdev->request_timer.function = & request_timer_fn;
#line 3094
  mdev->request_timer.data = (unsigned long )mdev;
#line 3096
  __init_waitqueue_head(& mdev->misc_wait, & __key___13);
#line 3097
  __init_waitqueue_head(& mdev->state_wait, & __key___14);
#line 3098
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___15);
#line 3099
  __init_waitqueue_head(& mdev->ee_wait, & __key___16);
#line 3100
  __init_waitqueue_head(& mdev->al_wait, & __key___17);
#line 3101
  __init_waitqueue_head(& mdev->seq_wait, & __key___18);
#line 3103
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3104
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3105
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3107
  mdev->agreed_pro_version = 96;
#line 3108
  mdev->write_ordering = WO_bdev_flush;
#line 3109
  mdev->resync_wenr = 4294967295U;
#line 3110
  mdev->peer_max_bio_size = 4096;
#line 3111
  mdev->local_max_bio_size = 4096;
#line 3112
  return;
}
}
#line 3114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3117
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3122
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3122
  if (tmp___0 != 0) {
#line 3123
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3123
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3124
  tmp___9 = 0UL;
#line 3124
  mdev->rs_failed = tmp___9;
#line 3124
  tmp___8 = tmp___9;
#line 3124
  mdev->rs_total = tmp___8;
#line 3124
  tmp___7 = tmp___8;
#line 3124
  mdev->rs_start = tmp___7;
#line 3124
  tmp___6 = tmp___7;
#line 3124
  mdev->p_size = tmp___6;
#line 3124
  tmp___5 = (unsigned int )tmp___6;
#line 3124
  mdev->writ_cnt = tmp___5;
#line 3124
  tmp___4 = tmp___5;
#line 3124
  mdev->send_cnt = tmp___4;
#line 3124
  tmp___3 = tmp___4;
#line 3124
  mdev->recv_cnt = tmp___3;
#line 3124
  tmp___2 = tmp___3;
#line 3124
  mdev->read_cnt = tmp___2;
#line 3124
  tmp___1 = tmp___2;
#line 3124
  mdev->bm_writ_cnt = tmp___1;
#line 3124
  mdev->al_writ_cnt = tmp___1;
#line 3134
  mdev->rs_last_events = 0;
#line 3135
  mdev->rs_last_sect_ev = 0;
#line 3136
  i = 0;
#line 3136
  goto ldv_49048;
  ldv_49047: 
#line 3137
  mdev->rs_mark_left[i] = 0UL;
#line 3138
  mdev->rs_mark_time[i] = 0UL;
#line 3136
  i = i + 1;
  ldv_49048: ;
#line 3136
  if (i <= 7) {
#line 3137
    goto ldv_49047;
  } else {

  }

#line 3140
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3140
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3140);
  } else {

  }
#line 3142
  drbd_set_my_capacity(mdev, 0UL);
#line 3143
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3145
    drbd_bm_resize(mdev, 0UL, 1);
#line 3146
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3149
  drbd_free_resources(mdev);
#line 3150
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 3156
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3156
  if (tmp___10 == 0) {
#line 3156
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3156);
  } else {

  }
#line 3157
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3157
  if (tmp___11 == 0) {
#line 3157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3157);
  } else {

  }
#line 3158
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3158
  if (tmp___12 == 0) {
#line 3158
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3158);
  } else {

  }
#line 3159
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3159
  if (tmp___13 == 0) {
#line 3159
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3159);
  } else {

  }
#line 3160
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3160
  if (tmp___14 == 0) {
#line 3160
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3160);
  } else {

  }
#line 3161
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3161
  if (tmp___15 == 0) {
#line 3161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3161);
  } else {

  }
#line 3162
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3162
  if (tmp___16 == 0) {
#line 3162
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3162);
  } else {

  }
#line 3163
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3163
  if (tmp___17 == 0) {
#line 3163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3163);
  } else {

  }
#line 3164
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3164
  if (tmp___18 == 0) {
#line 3164
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3164);
  } else {

  }
#line 3165
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3165
  if (tmp___19 == 0) {
#line 3165
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3165);
  } else {

  }
#line 3166
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3166
  if (tmp___20 == 0) {
#line 3166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3166);
  } else {

  }
#line 3168
  drbd_set_defaults(mdev);
#line 3169
  return;
}
}
#line 3172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3176
  goto ldv_49055;
  ldv_49054: 
#line 3177
  page = drbd_pp_pool;
#line 3178
  drbd_pp_pool = (struct page *)page->ldv_13136.ldv_13133.private;
#line 3179
  __free_pages(page, 0U);
#line 3180
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_49055: ;
#line 3176
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3177
    goto ldv_49054;
  } else {

  }

#line 3185
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3186
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3187
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3188
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3189
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3190
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3191
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3192
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3193
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3194
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3195
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3196
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3198
  drbd_ee_mempool = 0;
#line 3199
  drbd_request_mempool = 0;
#line 3200
  drbd_ee_cache = 0;
#line 3201
  drbd_request_cache = 0;
#line 3202
  drbd_bm_ext_cache = 0;
#line 3203
  drbd_al_ext_cache = 0;
#line 3205
  return;
}
}
#line 3208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3211
  number = (int const   )(minor_count * 32U);
#line 3215
  drbd_request_mempool = 0;
#line 3216
  drbd_ee_cache = 0;
#line 3217
  drbd_request_cache = 0;
#line 3218
  drbd_bm_ext_cache = 0;
#line 3219
  drbd_al_ext_cache = 0;
#line 3220
  drbd_pp_pool = 0;
#line 3223
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 3225
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3226
    goto Enomem;
  } else {

  }
#line 3228
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3230
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3231
    goto Enomem;
  } else {

  }
#line 3233
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3235
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3236
    goto Enomem;
  } else {

  }
#line 3238
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3240
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3241
    goto Enomem;
  } else {

  }
#line 3244
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3246
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3247
    goto Enomem;
  } else {

  }
#line 3249
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3251
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3252
    goto Enomem;
  } else {

  }
#line 3255
  spinlock_check(& drbd_pp_lock);
#line 3255
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5802.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3257
  i = 0;
#line 3257
  goto ldv_49066;
  ldv_49065: 
#line 3258
  page = alloc_pages(131282U, 0U);
#line 3259
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3260
    goto Enomem;
  } else {

  }
#line 3261
  page->ldv_13136.ldv_13133.private = (unsigned long )drbd_pp_pool;
#line 3262
  drbd_pp_pool = page;
#line 3257
  i = i + 1;
  ldv_49066: ;
#line 3257
  if (i < number) {
#line 3258
    goto ldv_49065;
  } else {

  }
#line 3264
  drbd_pp_vacant = number;
#line 3266
  return (0);
  Enomem: 
#line 3269
  drbd_destroy_mempools();
#line 3270
  return (-12);
}
}
#line 3273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3280
  return (0);
}
}
#line 3283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3291
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3292
  if (rr != 0) {
#line 3293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3295
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3296
  if (rr != 0) {
#line 3297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3299
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3300
  if (rr != 0) {
#line 3301
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3303
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3304
  if (rr != 0) {
#line 3305
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3307
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3308
  if (rr != 0) {
#line 3309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3310
  return;
}
}
#line 3314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3316
  tmp = minor_to_mdev(minor);
#line 3316
  mdev = tmp;
#line 3318
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3319
    return;
  } else {

  }
#line 3322
  if (mdev->open_cnt != 0) {
#line 3323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3324);
  } else {

  }
#line 3326
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3326
  _b = tmp___0 == 0;
#line 3326
  if (_b != 0) {
#line 3326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3326);
  } else {

  }
#line 3326
  if (_b != 0) {
#line 3328
    lp = mdev->data.work.q.next;
#line 3328
    goto ldv_49087;
    ldv_49086: 
#line 3329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3328
    lp = lp->next;
    ldv_49087: 
#line 3328
    __builtin_prefetch((void const   *)lp->next);
#line 3328
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3329
      goto ldv_49086;
    } else {

    }

  } else {

  }
#line 3334
  del_gendisk(mdev->vdisk);
#line 3339
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3340
    bdput(mdev->this_bdev);
  } else {

  }
#line 3342
  drbd_free_resources(mdev);
#line 3344
  drbd_release_ee_lists(mdev);
#line 3347
  kfree((void const   *)mdev->ee_hash);
#line 3353
  lc_destroy(mdev->act_log);
#line 3354
  lc_destroy(mdev->resync);
#line 3356
  kfree((void const   *)mdev->p_uuid);
#line 3359
  kfree((void const   *)mdev->int_dig_out);
#line 3360
  kfree((void const   *)mdev->int_dig_in);
#line 3361
  kfree((void const   *)mdev->int_dig_vv);
#line 3366
  drbd_free_mdev(mdev);
#line 3367
  return;
}
}
#line 3369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3373
  unregister_reboot_notifier(& drbd_notifier);
#line 3383
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3384
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3386
  drbd_nl_cleanup();
#line 3388
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3389
    i = minor_count;
#line 3390
    goto ldv_49094;
    ldv_49093: 
#line 3391
    drbd_delete_device(i);
    ldv_49094: 
#line 3390
    tmp = i;
#line 3390
    i = i - 1U;
#line 3390
    if (tmp != 0U) {
#line 3391
      goto ldv_49093;
    } else {

    }
#line 3392
    drbd_destroy_mempools();
  } else {

  }
#line 3395
  kfree((void const   *)minor_table);
#line 3397
  unregister_blkdev(147U, "drbd");
#line 3399
  printk("<6>drbd: module cleanup done.\n");
#line 3400
  return;
}
}
#line 3409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3411
  mdev = (struct drbd_conf *)congested_data;
#line 3413
  reason = 45;
#line 3414
  r = 0;
#line 3416
  tmp = may_inc_ap_bio___0(mdev);
#line 3416
  if (tmp) {
#line 3416
    tmp___0 = 0;
  } else {
#line 3416
    tmp___0 = 1;
  }
#line 3416
  if (tmp___0) {
#line 3418
    r = bdi_bits;
#line 3419
    reason = 100;
#line 3420
    goto out;
  } else {

  }
#line 3423
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3423
  if (tmp___1 != 0) {
#line 3424
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3425
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3426
    put_ldev(mdev);
#line 3427
    if (r != 0) {
#line 3428
      reason = 98;
    } else {

    }
  } else {

  }
#line 3431
  if ((bdi_bits & 4) != 0) {
#line 3431
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3431
    if (tmp___2 != 0) {
#line 3432
      r = r | 4;
#line 3433
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3437
  mdev->congestion_reason = reason;
#line 3438
  return (r);
}
}
#line 3441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3448
  tmp = kzalloc(4848UL, 208U);
#line 3448
  mdev = (struct drbd_conf *)tmp;
#line 3449
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3450
    return (0);
  } else {

  }
#line 3451
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3451
  if (tmp___0) {
#line 3451
    tmp___1 = 0;
  } else {
#line 3451
    tmp___1 = 1;
  }
#line 3451
  if (tmp___1) {
#line 3452
    goto out_no_cpumask;
  } else {

  }
#line 3454
  mdev->minor = minor;
#line 3456
  drbd_init_set_defaults(mdev);
#line 3458
  q = blk_alloc_queue(208U);
#line 3459
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3460
    goto out_no_q;
  } else {

  }
#line 3461
  mdev->rq_queue = q;
#line 3462
  q->queuedata = (void *)mdev;
#line 3464
  disk = alloc_disk(1);
#line 3465
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3466
    goto out_no_disk;
  } else {

  }
#line 3467
  mdev->vdisk = disk;
#line 3469
  set_disk_ro(disk, 1);
#line 3471
  disk->queue = q;
#line 3472
  disk->major = 147;
#line 3473
  disk->first_minor = (int )minor;
#line 3474
  disk->fops = & drbd_ops;
#line 3475
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3476
  disk->private_data = (void *)mdev;
#line 3478
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3480
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3482
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3483
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3485
  blk_queue_make_request(q, & drbd_make_request);
#line 3488
  blk_queue_max_hw_sectors(q, 16U);
#line 3489
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3490
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3491
  q->queue_lock = & mdev->req_lock;
#line 3493
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3494
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3495
    goto out_no_io_page;
  } else {

  }
#line 3497
  tmp___2 = drbd_bm_init(mdev);
#line 3497
  if (tmp___2 != 0) {
#line 3498
    goto out_no_bitmap;
  } else {

  }
#line 3500
  tmp___3 = tl_init(mdev);
#line 3500
  if (tmp___3 == 0) {
#line 3501
    goto out_no_tl;
  } else {

  }
#line 3503
  tmp___4 = kzalloc(120UL, 208U);
#line 3503
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3504
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3505
    goto out_no_app_reads;
  } else {

  }
#line 3507
  tmp___5 = kzalloc(40UL, 208U);
#line 3507
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3508
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3509
    goto out_no_epoch;
  } else {

  }
#line 3511
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3512
  mdev->epochs = 1U;
#line 3514
  return (mdev);
  out_no_epoch: 
#line 3519
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3521
  tl_cleanup(mdev);
  out_no_tl: 
#line 3523
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3525
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3527
  put_disk(disk);
  out_no_disk: 
#line 3529
  blk_cleanup_queue(q);
  out_no_q: 
#line 3531
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3533
  kfree((void const   *)mdev);
#line 3534
  return (0);
}
}
#line 3539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3541
  kfree((void const   *)mdev->current_epoch);
#line 3542
  kfree((void const   *)mdev->app_reads_hash);
#line 3543
  tl_cleanup(mdev);
#line 3544
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3545
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3546
  __free_pages(mdev->md_io_page, 0U);
#line 3547
  put_disk(mdev->vdisk);
#line 3548
  blk_cleanup_queue(mdev->rq_queue);
#line 3549
  free_cpumask_var(mdev->cpu_mask);
#line 3550
  drbd_free_tl_hash(mdev);
#line 3551
  kfree((void const   *)mdev);
#line 3552
  return;
}
}
#line 3555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3566
  if (minor_count == 0U || minor_count > 256U) {
#line 3567
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3570
    return (-22);
  } else {

  }
#line 3576
  err = drbd_nl_init();
#line 3577
  if (err != 0) {
#line 3578
    return (err);
  } else {

  }
#line 3580
  err = register_blkdev(147U, "drbd");
#line 3581
  if (err != 0) {
#line 3582
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3585
    return (err);
  } else {

  }
#line 3588
  register_reboot_notifier(& drbd_notifier);
#line 3593
  err = -12;
#line 3595
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3597
  drbd_proc = 0;
#line 3598
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3598
  minor_table = (struct drbd_conf **)tmp;
#line 3600
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3601
    goto Enomem;
  } else {

  }
#line 3603
  err = drbd_create_mempools();
#line 3604
  if (err != 0) {
#line 3605
    goto Enomem;
  } else {

  }
#line 3607
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3608
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3609
    printk("<3>drbd: unable to register proc file\n");
#line 3610
    goto Enomem;
  } else {

  }
#line 3613
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3615
  printk("<6>drbd: initialized. Version: 8.3.11 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3618
  tmp___0 = drbd_buildtag();
#line 3618
  printk("<6>drbd: %s\n", tmp___0);
#line 3619
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3621
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3623
  return (0);
  Enomem: 
#line 3626
  drbd_cleanup();
#line 3627
  if (err == -12) {
#line 3629
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3631
    printk("<3>drbd: initialization failure\n");
  }
#line 3632
  return (err);
}
}
#line 3635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3637
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3638
    return;
  } else {

  }
#line 3640
  blkdev_put(ldev->backing_bdev, 131U);
#line 3641
  blkdev_put(ldev->md_bdev, 131U);
#line 3643
  kfree((void const   *)ldev);
#line 3644
  return;
}
}
#line 3646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3648
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3649
    ldv_mutex_lock_135(& mdev->data.mutex);
#line 3650
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3651
    sock_release(mdev->data.socket);
#line 3652
    mdev->data.socket = 0;
#line 3653
    ldv_mutex_unlock_136(& mdev->data.mutex);
  } else {

  }
#line 3655
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3656
    ldv_mutex_lock_137(& mdev->meta.mutex);
#line 3657
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3658
    sock_release(mdev->meta.socket);
#line 3659
    mdev->meta.socket = 0;
#line 3660
    ldv_mutex_unlock_138(& mdev->meta.mutex);
  } else {

  }
#line 3662
  return;
}
}
#line 3665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3667
  crypto_free_hash(mdev->csums_tfm);
#line 3668
  mdev->csums_tfm = 0;
#line 3669
  crypto_free_hash(mdev->verify_tfm);
#line 3670
  mdev->verify_tfm = 0;
#line 3671
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3672
  mdev->cram_hmac_tfm = 0;
#line 3673
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3674
  mdev->integrity_w_tfm = 0;
#line 3675
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3676
  mdev->integrity_r_tfm = 0;
#line 3678
  drbd_free_sock(mdev);
#line 3680
  drbd_free_bc(mdev->ldev);
#line 3680
  mdev->ldev = 0;
#line 3681
  return;
}
}
#line 3709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3715
  del_timer(& mdev->md_sync_timer);
#line 3717
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3717
  if (tmp == 0) {
#line 3718
    return;
  } else {

  }
#line 3722
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3722
  if (tmp___0 == 0) {
#line 3723
    return;
  } else {

  }
#line 3725
  ldv_mutex_lock_139(& mdev->md_io_mutex);
#line 3726
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3726
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3727
  memset((void *)buffer, 0, 512UL);
#line 3729
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3729
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3729
  buffer->la_size = tmp___3;
#line 3730
  i = 0;
#line 3730
  goto ldv_49159;
  ldv_49158: 
#line 3731
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3731
  buffer->uuid[i] = tmp___4;
#line 3730
  i = i + 1;
  ldv_49159: ;
#line 3730
  if (i <= 3) {
#line 3731
    goto ldv_49158;
  } else {

  }
#line 3732
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3732
  buffer->flags = tmp___5;
#line 3733
  buffer->magic = 1795323011U;
#line 3735
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3735
  buffer->md_size_sect = tmp___6;
#line 3736
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3736
  buffer->al_offset = tmp___7;
#line 3737
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3737
  buffer->al_nr_extents = tmp___8;
#line 3738
  buffer->bm_bytes_per_bit = 1048576U;
#line 3739
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3739
  buffer->device_uuid = tmp___9;
#line 3741
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3741
  buffer->bm_offset = tmp___10;
#line 3742
  tmp___11 = __fswab32((__u32 )mdev->peer_max_bio_size);
#line 3742
  buffer->la_peer_max_bio_size = tmp___11;
#line 3744
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3744
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3744);
  } else {

  }
#line 3745
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3747
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3747
  if (tmp___13 == 0) {
#line 3749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3750
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3755
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3755
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3757
  ldv_mutex_unlock_140(& mdev->md_io_mutex);
#line 3758
  put_ldev(mdev);
#line 3759
  return;
}
}
#line 3769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  int peer ;
  __u32 tmp___16 ;
  int __max1 ;
  int __max2 ;

  {
#line 3772
  rv = 101;
#line 3774
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3774
  if (tmp == 0) {
#line 3775
    return (118);
  } else {

  }
#line 3777
  ldv_mutex_lock_141(& mdev->md_io_mutex);
#line 3778
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3778
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3780
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3780
  if (tmp___1 == 0) {
#line 3783
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3784
    rv = 118;
#line 3785
    goto err;
  } else {

  }
#line 3788
  tmp___2 = __fswab32(buffer->magic);
#line 3788
  if (tmp___2 != 2205418091U) {
#line 3789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3790
    rv = 119;
#line 3791
    goto err;
  } else {

  }
#line 3793
  tmp___4 = __fswab32(buffer->al_offset);
#line 3793
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3794
    tmp___3 = __fswab32(buffer->al_offset);
#line 3794
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3796
    rv = 119;
#line 3797
    goto err;
  } else {

  }
#line 3799
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3799
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3800
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3802
    rv = 119;
#line 3803
    goto err;
  } else {

  }
#line 3805
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3805
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3806
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3806
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3808
    rv = 119;
#line 3809
    goto err;
  } else {

  }
#line 3812
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3812
  if (tmp___10 != 4096U) {
#line 3813
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3815
    rv = 119;
#line 3816
    goto err;
  } else {

  }
#line 3819
  tmp___11 = __fswab64(buffer->la_size);
#line 3819
  bdev->md.la_size_sect = tmp___11;
#line 3820
  i = 0;
#line 3820
  goto ldv_49171;
  ldv_49170: 
#line 3821
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3821
  bdev->md.uuid[i] = tmp___12;
#line 3820
  i = i + 1;
  ldv_49171: ;
#line 3820
  if (i <= 3) {
#line 3821
    goto ldv_49170;
  } else {

  }
#line 3822
  tmp___13 = __fswab32(buffer->flags);
#line 3822
  bdev->md.flags = tmp___13;
#line 3823
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3823
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3824
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3824
  bdev->md.device_uuid = tmp___15;
#line 3826
  spin_lock_irq(& mdev->req_lock);
#line 3827
  if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 3829
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3829
    peer = (int )tmp___16;
#line 3830
    __max1 = peer;
#line 3830
    __max2 = 4096;
#line 3830
    peer = __max1 > __max2 ? __max1 : __max2;
#line 3831
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3833
  spin_unlock_irq(& mdev->req_lock);
#line 3835
  if (mdev->sync_conf.al_extents <= 6) {
#line 3836
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3839
  ldv_mutex_unlock_142(& mdev->md_io_mutex);
#line 3840
  put_ldev(mdev);
#line 3842
  return (rv);
}
}
#line 3863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3865
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3865
  if (tmp == 0) {
#line 3866
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3867
  return;
}
}
#line 3870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3874
  i = 2;
#line 3874
  goto ldv_49185;
  ldv_49184: 
#line 3875
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3874
  i = i + 1;
  ldv_49185: ;
#line 3874
  if (i <= 2) {
#line 3875
    goto ldv_49184;
  } else {

  }

#line 3879
  return;
}
}
#line 3878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3880
  if (idx == 0) {
#line 3881
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3882
      val = val | 1ULL;
    } else {
#line 3884
      val = val & 0xfffffffffffffffeULL;
    }
#line 3886
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3889
  (mdev->ldev)->md.uuid[idx] = val;
#line 3890
  drbd_md_mark_dirty(mdev);
#line 3891
  return;
}
}
#line 3894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3896
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3897
    drbd_uuid_move_history(mdev);
#line 3898
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3900
  _drbd_uuid_set(mdev, idx, val);
#line 3901
  return;
}
}
#line 3910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 3913
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3915
  if (bm_uuid != 0ULL) {
#line 3916
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 3918
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3920
  get_random_bytes((void *)(& val), 8);
#line 3921
  _drbd_uuid_set(mdev, 0, val);
#line 3922
  drbd_print_uuids(mdev, "new current UUID");
#line 3924
  drbd_md_sync(mdev);
#line 3925
  return;
}
}
#line 3927 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 3929
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3930
    return;
  } else {

  }
#line 3932
  if (val == 0ULL) {
#line 3933
    drbd_uuid_move_history(mdev);
#line 3934
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3935
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3937
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3938
    if (bm_uuid != 0ULL) {
#line 3939
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 3941
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 3943
  drbd_md_mark_dirty(mdev);
#line 3944
  return;
}
}
#line 3952 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3954
  rv = -5;
#line 3956
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3956
  if (tmp != 0) {
#line 3957
    drbd_md_set_flag(mdev, 8);
#line 3958
    drbd_md_sync(mdev);
#line 3959
    drbd_bm_set_all(mdev);
#line 3961
    rv = drbd_bm_write(mdev);
#line 3963
    if (rv == 0) {
#line 3964
      drbd_md_clear_flag(mdev, 8);
#line 3965
      drbd_md_sync(mdev);
    } else {

    }
#line 3968
    put_ldev(mdev);
  } else {

  }
#line 3971
  return (rv);
}
}
#line 3980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3982
  rv = -5;
#line 3984
  drbd_resume_al(mdev);
#line 3985
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3985
  if (tmp != 0) {
#line 3986
    drbd_bm_clear_all(mdev);
#line 3987
    rv = drbd_bm_write(mdev);
#line 3988
    put_ldev(mdev);
  } else {

  }
#line 3991
  return (rv);
}
}
#line 3994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 3996
  __mptr = (struct drbd_work  const  *)w;
#line 3996
  work = (struct bm_io_work *)__mptr;
#line 3997
  rv = -5;
#line 3999
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3999
  if (tmp != 0) {
#line 3999
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3999);
  } else {

  }
#line 4001
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4001
  if (tmp___0 != 0) {
#line 4002
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4003
    rv = (*(work->io_fn))(mdev);
#line 4004
    drbd_bm_unlock(mdev);
#line 4005
    put_ldev(mdev);
  } else {

  }
#line 4008
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4009
  __asm__  volatile   ("": : : "memory");
#line 4010
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4012
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4013
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4015
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4016
  work->why = 0;
#line 4017
  work->flags = 0;
#line 4019
  return (1);
}
}
#line 4022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4024
  lc_destroy(mdev->resync);
#line 4025
  mdev->resync = 0;
#line 4026
  lc_destroy(mdev->act_log);
#line 4027
  mdev->act_log = 0;
#line 4028
  drbd_free_bc(mdev->ldev);
#line 4028
  mdev->ldev = 0;
#line 4032
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4033
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4034
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4036
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4037
  return;
}
}
#line 4039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4041
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4041
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4041);
  } else {

  }
#line 4046
  val.i = 0U;
#line 4046
  val.ldv_37644.disk = 0U;
#line 4046
  mask.i = 0U;
#line 4046
  mask.ldv_37644.disk = 15U;
#line 4046
  drbd_force_state(mdev, mask, val);
#line 4047
  return (1);
}
}
#line 4050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4052
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4052
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4052);
  } else {

  }
#line 4053
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4053
  if (tmp == 0) {
#line 4054
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4055
  return;
}
}
#line 4069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4074
  tmp = get_current();
#line 4074
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4074
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4074);
  } else {

  }
#line 4076
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 4076
  if (tmp___0 != 0) {
#line 4076
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4076);
  } else {

  }
#line 4077
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 4077
  if (tmp___1 != 0) {
#line 4077
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4077);
  } else {

  }
#line 4078
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4078
  if (tmp___2 == 0) {
#line 4078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4078);
  } else {

  }
#line 4079
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4080
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4083
  mdev->bm_io_work.io_fn = io_fn;
#line 4084
  mdev->bm_io_work.done = done;
#line 4085
  mdev->bm_io_work.why = why;
#line 4086
  mdev->bm_io_work.flags = flags;
#line 4088
  spin_lock_irq(& mdev->req_lock);
#line 4089
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 4090
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4090
  if (tmp___4 == 0) {
#line 4091
    tmp___3 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4091
    if (tmp___3 == 0) {
#line 4092
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4094
  spin_unlock_irq(& mdev->req_lock);
#line 4095
  return;
}
}
#line 4106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4111
  tmp = get_current();
#line 4111
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4111);
  } else {

  }
#line 4113
  if (((unsigned int )flags & 1U) == 0U) {
#line 4114
    drbd_suspend_io(mdev);
  } else {

  }
#line 4116
  drbd_bm_lock(mdev, why, flags);
#line 4117
  rv = (*io_fn)(mdev);
#line 4118
  drbd_bm_unlock(mdev);
#line 4120
  if (((unsigned int )flags & 1U) == 0U) {
#line 4121
    drbd_resume_io(mdev);
  } else {

  }
#line 4123
  return (rv);
}
}
#line 4126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4128
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4129
    drbd_md_mark_dirty(mdev);
#line 4130
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4132
  return;
}
}
#line 4134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4136
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4137
    drbd_md_mark_dirty(mdev);
#line 4138
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4140
  return;
}
}
#line 4141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4143
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4148
  mdev = (struct drbd_conf *)data;
#line 4150
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4151
  return;
}
}
#line 4153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4155
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4160
  drbd_md_sync(mdev);
#line 4161
  return (1);
}
}
#line 4181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4185
  tmp = rsp->count;
#line 4185
  rsp->count = rsp->count - 1UL;
#line 4185
  if (tmp == 0UL) {
#line 4186
    get_random_bytes((void *)(& refresh), 8);
#line 4187
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4188
    rsp->count = 10000UL;
  } else {

  }
#line 4190
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4191
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4191
  return ((unsigned long )tmp___0);
}
}
#line 4195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4196
  _faults[0] = (char *)"Meta-data write";
#line 4196
  _faults[1] = (char *)"Meta-data read";
#line 4196
  _faults[2] = (char *)"Resync write";
#line 4196
  _faults[3] = (char *)"Resync read";
#line 4196
  _faults[4] = (char *)"Data write";
#line 4196
  _faults[5] = (char *)"Data read";
#line 4196
  _faults[6] = (char *)"Data read ahead";
#line 4196
  _faults[7] = (char *)"BM allocation";
#line 4196
  _faults[8] = (char *)"EE allocation";
#line 4196
  _faults[9] = (char *)"receive data corruption";
#line 4209
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4215
  rrs.state = 0UL;
#line 4215
  rrs.count = 0UL;
#line 4217
  if (fault_devs == 0) {
#line 4217
    goto _L;
  } else {
#line 4217
    tmp = mdev_to_minor(mdev);
#line 4217
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4217
      tmp___0 = _drbd_fault_random(& rrs);
#line 4217
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4217
        tmp___1 = 1;
      } else {
#line 4217
        tmp___1 = 0;
      }
    } else {
#line 4217
      tmp___1 = 0;
    }
  }
#line 4217
  ret = (unsigned int )tmp___1;
#line 4222
  if (ret != 0U) {
#line 4223
    fault_count = fault_count + 1;
#line 4225
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4225
    if (tmp___3 != 0) {
#line 4226
      tmp___2 = _drbd_fault_str(type);
#line 4226
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4230
  return (ret);
}
}
#line 4234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4239
  buildtag[0] = '\000';
#line 4239
  tmp = 1U;
#line 4239
  while (1) {
#line 4239
    if (tmp >= 38U) {
#line 4239
      break;
    } else {

    }
#line 4239
    buildtag[tmp] = (char)0;
#line 4239
    tmp = tmp + 1U;
  }
#line 4241
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4243
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4244
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4247
      buildtag[0] = 98;
    }
  } else {

  }
#line 4250
  return ((char const   *)(& buildtag));
}
}
#line 4298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_68_p1 ;
  int res_drbd_open_68 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_69_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_75_p1 ;
  void *var_drbd_notify_sys_75_p2 ;
  unsigned long var_md_sync_timer_fn_104_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4487
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4446
  LDV_IN_INTERRUPT = 1;
#line 4455
  ldv_initialize();
#line 4470
  ldv_handler_precall();
#line 4471
  tmp = drbd_init();
#line 4471
  if (tmp != 0) {
#line 4472
    goto ldv_final;
  } else {

  }
#line 4494
  goto ldv_49365;
  ldv_49364: 
#line 4498
  tmp___0 = nondet_int();
#line 4498
  switch (tmp___0) {
  case 0: ;
#line 4503
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4517
    ldv_handler_precall();
#line 4518
    res_drbd_open_68 = drbd_open(var_group1, var_drbd_open_68_p1);
#line 4519
    ldv_check_return_value(res_drbd_open_68);
#line 4520
    if (res_drbd_open_68 != 0) {
#line 4521
      goto ldv_module_exit;
    } else {

    }
#line 4539
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4545
  goto ldv_49359;
  case 1: ;
#line 4549
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4563
    ldv_handler_precall();
#line 4564
    drbd_release(var_group2, var_drbd_release_69_p1);
#line 4582
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4588
  goto ldv_49359;
  case 2: 
#line 4606
  ldv_handler_precall();
#line 4607
  drbd_notify_sys(var_group3, var_drbd_notify_sys_75_p1, var_drbd_notify_sys_75_p2);
#line 4631
  goto ldv_49359;
  case 3: 
#line 4655
  ldv_handler_precall();
#line 4656
  md_sync_timer_fn(var_md_sync_timer_fn_104_p0);
#line 4674
  goto ldv_49359;
  default: ;
#line 4675
  goto ldv_49359;
  }
  ldv_49359: ;
  ldv_49365: 
#line 4494
  tmp___1 = nondet_int();
#line 4494
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4496
    goto ldv_49364;
  } else {

  }

  ldv_module_exit: 
#line 4696
  ldv_handler_precall();
#line 4697
  drbd_cleanup();
  ldv_final: 
#line 4717
  ldv_check_final_state();
#line 4720
  return;
}
}
#line 4724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_113(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4729
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4731
  mutex_lock(ldv_func_arg1);
#line 4732
  return;
}
}
#line 4734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_114(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4739
  tmp = mutex_trylock(ldv_func_arg1);
#line 4739
  ldv_func_res = tmp;
#line 4741
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4741
  return (tmp___0);
#line 4743
  return (ldv_func_res);
}
}
#line 4746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4751
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4753
  mutex_unlock(ldv_func_arg1);
#line 4754
  return;
}
}
#line 4756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_116(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4761
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4763
  mutex_lock(ldv_func_arg1);
#line 4764
  return;
}
}
#line 4766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_117(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4771
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4773
  mutex_unlock(ldv_func_arg1);
#line 4774
  return;
}
}
#line 4776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4781
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4783
  mutex_unlock(ldv_func_arg1);
#line 4784
  return;
}
}
#line 4786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_119(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4791
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4793
  mutex_lock(ldv_func_arg1);
#line 4794
  return;
}
}
#line 4796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_120(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4801
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4803
  mutex_unlock(ldv_func_arg1);
#line 4804
  return;
}
}
#line 4806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4811
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4813
  mutex_lock(ldv_func_arg1);
#line 4814
  return;
}
}
#line 4816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_122(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4821
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4823
  mutex_lock(ldv_func_arg1);
#line 4824
  return;
}
}
#line 4826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4831
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4833
  mutex_unlock(ldv_func_arg1);
#line 4834
  return;
}
}
#line 4836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4841
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4843
  mutex_unlock(ldv_func_arg1);
#line 4844
  return;
}
}
#line 4846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4851
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4853
  mutex_lock(ldv_func_arg1);
#line 4854
  return;
}
}
#line 4856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4861
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4863
  mutex_unlock(ldv_func_arg1);
#line 4864
  return;
}
}
#line 4866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4871
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4873
  mutex_lock(ldv_func_arg1);
#line 4874
  return;
}
}
#line 4876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4881
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4883
  mutex_unlock(ldv_func_arg1);
#line 4884
  return;
}
}
#line 4886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4891
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4893
  mutex_lock(ldv_func_arg1);
#line 4894
  return;
}
}
#line 4896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4901
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4903
  mutex_unlock(ldv_func_arg1);
#line 4904
  return;
}
}
#line 4906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4911
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4913
  mutex_lock(ldv_func_arg1);
#line 4914
  return;
}
}
#line 4916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4921
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4923
  mutex_unlock(ldv_func_arg1);
#line 4924
  return;
}
}
#line 4926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4931
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4933
  mutex_lock(ldv_func_arg1);
#line 4934
  return;
}
}
#line 4936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4941
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4943
  mutex_unlock(ldv_func_arg1);
#line 4944
  return;
}
}
#line 4946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4951
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4953
  mutex_lock(ldv_func_arg1);
#line 4954
  return;
}
}
#line 4956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4961
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4963
  mutex_unlock(ldv_func_arg1);
#line 4964
  return;
}
}
#line 4966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4971
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4973
  mutex_lock(ldv_func_arg1);
#line 4974
  return;
}
}
#line 4976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4981
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4983
  mutex_unlock(ldv_func_arg1);
#line 4984
  return;
}
}
#line 4986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4991
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4993
  mutex_lock(ldv_func_arg1);
#line 4994
  return;
}
}
#line 4996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5001
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5003
  mutex_unlock(ldv_func_arg1);
#line 5004
  return;
}
}
#line 5006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5011
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5013
  mutex_lock(ldv_func_arg1);
#line 5014
  return;
}
}
#line 5016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5021
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 5023
  mutex_unlock(ldv_func_arg1);
#line 5024
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_174(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 116
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 128
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 152
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 157
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 162
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 167
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 177
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 179
  mutex_lock(ldv_func_arg1);
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_174(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 187
  tmp = mutex_trylock(ldv_func_arg1);
#line 187
  ldv_func_res = tmp;
#line 189
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 189
  return (tmp___0);
#line 191
  return (ldv_func_res);
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 199
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 201
  mutex_unlock(ldv_func_arg1);
#line 202
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 264 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_180(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_181(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_184(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_179(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_182(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6083;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6083: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 211 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___1(struct module *mod , unsigned long ip ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 89
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 89
  if (tmp != 0L) {
#line 89
    goto do_trace;
  } else {

  }
#line 89
  return;
  do_trace: 
#line 89
  rcu_read_lock_sched_notrace();
#line 89
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
  tmp___0 = debug_lockdep_rcu_enabled();
#line 89
  if (tmp___0 != 0 && ! __warned) {
#line 89
    tmp___1 = rcu_read_lock_sched_held();
#line 89
    if (tmp___1 == 0 && 1) {
#line 89
      __warned = 1;
#line 89
      lockdep_rcu_dereference("include/trace/events/module.h", 94);
    } else {

    }
  } else {

  }
#line 89
  it_func_ptr = _________p1;
#line 89
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_12320: 
#line 89
    it_func = it_func_ptr->func;
#line 89
    __data = it_func_ptr->data;
#line 89
    (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                       ip);
#line 89
    it_func_ptr = it_func_ptr + 1;
#line 89
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
      goto ldv_12320;
    } else {

    }

  } else {

  }
#line 89
  rcu_read_lock_sched_notrace();
#line 91
  return;
}
}
#line 515 "include/linux/module.h"
__inline static int try_module_get___1(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 517
  ret = 1;
#line 519
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 522
    tmp = module_is_live(module);
#line 522
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 522
    if (tmp___0 != 0L) {
#line 523
      __vpp_verify = 0;
#line 523
      switch (4UL) {
      case 1UL: 
#line 523
      pao_ID__ = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12691;
      case 2UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12691;
      case 4UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12691;
      case 8UL: ;
#line 523
      if (pao_ID__ == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID__ == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12691;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12691: ;
#line 523
      goto ldv_12696;
      case 2UL: 
#line 523
      pao_ID_____0 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12702;
      case 2UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12702;
      case 4UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12702;
      case 8UL: ;
#line 523
      if (pao_ID_____0 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____0 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12702;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12702: ;
#line 523
      goto ldv_12696;
      case 4UL: 
#line 523
      pao_ID_____1 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12712;
      case 2UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12712;
      case 4UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12712;
      case 8UL: ;
#line 523
      if (pao_ID_____1 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____1 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12712;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12712: ;
#line 523
      goto ldv_12696;
      case 8UL: 
#line 523
      pao_ID_____2 = 1;
#line 523
      switch (4UL) {
      case 1UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 523
      goto ldv_12722;
      case 2UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12722;
      case 4UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 523
      goto ldv_12722;
      case 8UL: ;
#line 523
      if (pao_ID_____2 == 1) {
#line 523
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 523
      if (pao_ID_____2 == -1) {
#line 523
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 523
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 523
      goto ldv_12722;
      default: 
#line 523
      __bad_percpu_size();
      }
      ldv_12722: ;
#line 523
      goto ldv_12696;
      default: 
#line 523
      __bad_size_call_parameter();
#line 523
      goto ldv_12696;
      }
      ldv_12696: ;
#line 524
      trace_module_get___1(module, (unsigned long )((void *)0));
    } else {
#line 526
      ret = 0;
    }
  } else {

  }
#line 530
  return (ret);
}
}
#line 2055 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 123 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 125
extern void cn_del_callback(struct cb_id * ) ;
#line 126
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 408 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable___0();
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 67
  pagefault_enable___0();
#line 68
  return;
}
}
#line 810 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 814
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 829
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 836
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_46949;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_46949;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_46949: ;
#line 1942
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[85U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 100
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 101
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_47721;
  ldv_47720: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_47718;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_47718: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_47721: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_47720;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_47782;
  ldv_47781: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_47750;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_47750;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_47750;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_47750;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_47750;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_47750;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47750;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47750;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47750;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_47750;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47750;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47750;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_47750: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_47782: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_47781;
  } else {

  }

#line 20
  return (1);
}
}
#line 70
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 70 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 38
  goto ldv_47888;
  ldv_47887: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_47820;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_47820;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_47820;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_47820;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_47820;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_47820;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_47820;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_47820;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_47820;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_47820;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_47820;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_47820;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_47820;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_47820;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_47820;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_47820;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_47820;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_47820;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_47820;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_47820;
  case 81: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->on_congestion = (int )tmp___16;
#line 38
  goto ldv_47820;
  case 82: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_fill = (int )tmp___17;
#line 38
  goto ldv_47820;
  case 83: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_extents = (int )tmp___18;
#line 38
  goto ldv_47820;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47820;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_47820: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_47888: 
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 38
  tag = (int )tmp___20;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_47887;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 72
  goto ldv_47905;
  ldv_47904: 
#line 72
  tmp = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 72
  dlen = (int )tmp___0;
#line 72
  switch (tag & 8191) {
  case 84: 
#line 72
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 72
  goto ldv_47902;
  default: ;
#line 72
  if ((tag & 8192) != 0) {
#line 72
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 72
    return (0);
  } else {

  }
  }
  ldv_47902: 
#line 72
  tags = tags + (unsigned long )dlen;
  ldv_47905: 
#line 72
  tmp___1 = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 72
  tag = (int )tmp___2;
#line 72
  if (tag != 0) {
#line 73
    goto ldv_47904;
  } else {

  }

#line 72
  return (1);
}
}
#line 80
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 80 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 76
  goto ldv_47924;
  ldv_47923: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 29: 
#line 76
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 76
  goto ldv_47919;
  case 68: 
#line 76
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_47919;
  case 69: 
#line 76
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_47919;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_47919: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_47924: 
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 76
  tag = (int )tmp___2;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_47923;
  } else {

  }

#line 76
  return (1);
}
}
#line 101
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 101 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 82
  goto ldv_47980;
  ldv_47979: 
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 82
  dlen = (int )tmp___0;
#line 82
  switch (tag & 8191) {
  case 30: 
#line 82
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->rate = (int )tmp___1;
#line 82
  goto ldv_47938;
  case 31: 
#line 82
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->after = (int )tmp___2;
#line 82
  goto ldv_47938;
  case 32: 
#line 82
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->al_extents = (int )tmp___3;
#line 82
  goto ldv_47938;
  case 52: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->verify_alg_len = dlen;
#line 82
  __min1 = (size_t )dlen;
#line 82
  __min2 = 64UL;
#line 82
  __len = __min1 < __min2 ? __min1 : __min2;
#line 82
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 82
  goto ldv_47938;
  case 51: ;
#line 82
  if (dlen > 32) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->cpu_mask_len = dlen;
#line 82
  __min1___0 = (size_t )dlen;
#line 82
  __min2___0 = 32UL;
#line 82
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 82
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 82
  goto ldv_47938;
  case 64: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->csums_alg_len = dlen;
#line 82
  __min1___1 = (size_t )dlen;
#line 82
  __min2___1 = 64UL;
#line 82
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 82
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 82
  goto ldv_47938;
  case 65: 
#line 82
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 82
  goto ldv_47938;
  case 75: 
#line 82
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->on_no_data = (int )tmp___4;
#line 82
  goto ldv_47938;
  case 76: 
#line 82
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_plan_ahead = (int )tmp___5;
#line 82
  goto ldv_47938;
  case 77: 
#line 82
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_delay_target = (int )tmp___6;
#line 82
  goto ldv_47938;
  case 78: 
#line 82
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_fill_target = (int )tmp___7;
#line 82
  goto ldv_47938;
  case 79: 
#line 82
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_max_rate = (int )tmp___8;
#line 82
  goto ldv_47938;
  case 80: 
#line 82
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_min_rate = (int )tmp___9;
#line 82
  goto ldv_47938;
  default: ;
#line 82
  if ((tag & 8192) != 0) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 82
    return (0);
  } else {

  }
  }
  ldv_47938: 
#line 82
  tags = tags + (unsigned long )dlen;
  ldv_47980: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 82
  tag = (int )tmp___11;
#line 82
  if (tag != 0) {
#line 83
    goto ldv_47979;
  } else {

  }

#line 82
  return (1);
}
}
#line 145
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 145 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 143
  goto ldv_48279;
  ldv_48278: 
#line 143
  tmp = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 143
  dlen = (int )tmp___0;
#line 143
  switch (tag & 8191) {
  case 66: 
#line 143
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 143
  goto ldv_48276;
  default: ;
#line 143
  if ((tag & 8192) != 0) {
#line 143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 143
    return (0);
  } else {

  }
  }
  ldv_48276: 
#line 143
  tags = tags + (unsigned long )dlen;
  ldv_48279: 
#line 143
  tmp___1 = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 143
  tag = (int )tmp___2;
#line 143
  if (tag != 0) {
#line 144
    goto ldv_48278;
  } else {

  }

#line 143
  return (1);
}
}
#line 149
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 147
  goto ldv_48296;
  ldv_48295: 
#line 147
  tmp = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 147
  dlen = (int )tmp___0;
#line 147
  switch (tag & 8191) {
  case 63: 
#line 147
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 147
  goto ldv_48293;
  default: ;
#line 147
  if ((tag & 8192) != 0) {
#line 147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 147
    return (0);
  } else {

  }
  }
  ldv_48293: 
#line 147
  tags = tags + (unsigned long )dlen;
  ldv_48296: 
#line 147
  tmp___1 = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 147
  tag = (int )tmp___2;
#line 147
  if (tag != 0) {
#line 148
    goto ldv_48295;
  } else {

  }

#line 147
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_48341;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_48341;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_48341;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_48341;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48341;
  }
  ldv_48341: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_48348;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_48348;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_48348;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_48348;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48348;
  }
  ldv_48348: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_48355;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_48355;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48355;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48355;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48355;
  }
  ldv_48355: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_48362;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_48362;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_48362;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_48362;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48362;
  }
  ldv_48362: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_48369;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_48369;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48369;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48369;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48369;
  }
  ldv_48369: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_48379;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_48379;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_48379;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_48379;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48379;
  }
  ldv_48379: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_48386;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_48386;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48386;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48386;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48386;
  }
  ldv_48386: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_48396;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_48396;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_48396;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_48396;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48396;
  }
  ldv_48396: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_48403;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_48403;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_48403;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_48403;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48403;
  }
  ldv_48403: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_48410;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_48410;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48410;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48410;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48410;
  }
  ldv_48410: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_48417;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_48417;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_48417;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_48417;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48417;
  }
  ldv_48417: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_48424;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_48424;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_48424;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_48424;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48424;
  }
  ldv_48424: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_48431;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_48431;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48431;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48431;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48431;
  }
  ldv_48431: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_48438;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_48438;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_48438;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_48438;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48438;
  }
  ldv_48438: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_48445;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_48445;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_48445;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_48445;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48445;
  }
  ldv_48445: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_48452;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_48452;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48452;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48452;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48452;
  }
  ldv_48452: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_48459;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_48459;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_48459;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_48459;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48459;
  }
  ldv_48459: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_48466;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_48466;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_48466;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_48466;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48466;
  }
  ldv_48466: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_48473;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_48473;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_48473;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_48473;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48473;
  }
  ldv_48473: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_48480;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_48480;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_48480;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_48480;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48480;
  }
  ldv_48480: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_48487;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_48487;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_48487;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_48487;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48487;
  }
  ldv_48487: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_48494;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_48494;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_48494;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_48494;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48494;
  }
  ldv_48494: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_48501;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_48501;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_48501;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_48501;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48501;
  }
  ldv_48501: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_48508;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_48508;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_48508;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_48508;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48508;
  }
  ldv_48508: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_48515;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_48515;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48515;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48515;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48515;
  }
  ldv_48515: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_48522;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_48522;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_48522;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_48522;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48522;
  }
  ldv_48522: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_48529;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_48529;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_48529;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_48529;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48529;
  }
  ldv_48529: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_48536;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_48536;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_48536;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_48536;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48536;
  }
  ldv_48536: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_48543;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_48543;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_48543;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_48543;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48543;
  }
  ldv_48543: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 70
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 70 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_48568;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_48568;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_48568;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_48568;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48568;
  }
  ldv_48568: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_48575;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_48575;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48575;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48575;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48575;
  }
  ldv_48575: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_48585;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_48585;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_48585;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_48585;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48585;
  }
  ldv_48585: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_48592;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_48592;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48592;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48592;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48592;
  }
  ldv_48592: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_48602;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_48602;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_48602;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_48602;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48602;
  }
  ldv_48602: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_48609;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_48609;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48609;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48609;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48609;
  }
  ldv_48609: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_48619;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_48619;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_48619;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_48619;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48619;
  }
  ldv_48619: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_48626;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_48626;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48626;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48626;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48626;
  }
  ldv_48626: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_48636;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_48636;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_48636;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_48636;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48636;
  }
  ldv_48636: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_48643;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_48643;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48643;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48643;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48643;
  }
  ldv_48643: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_48653;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_48653;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_48653;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_48653;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48653;
  }
  ldv_48653: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_48660;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_48660;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_48660;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_48660;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48660;
  }
  ldv_48660: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_48667;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_48667;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48667;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48667;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48667;
  }
  ldv_48667: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_48674;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_48674;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_48674;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_48674;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48674;
  }
  ldv_48674: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_48681;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_48681;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_48681;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_48681;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48681;
  }
  ldv_48681: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_48688;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_48688;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48688;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48688;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48688;
  }
  ldv_48688: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_48695;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_48695;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_48695;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_48695;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48695;
  }
  ldv_48695: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_48702;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_48702;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_48702;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_48702;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48702;
  }
  ldv_48702: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_48709;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_48709;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48709;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48709;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48709;
  }
  ldv_48709: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_48716;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_48716;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_48716;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_48716;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48716;
  }
  ldv_48716: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_48723;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_48723;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_48723;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_48723;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48723;
  }
  ldv_48723: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_48730;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_48730;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48730;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48730;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48730;
  }
  ldv_48730: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_48737;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_48737;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_48737;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_48737;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48737;
  }
  ldv_48737: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_48744;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_48744;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_48744;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_48744;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48744;
  }
  ldv_48744: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_48751;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_48751;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48751;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48751;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48751;
  }
  ldv_48751: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_48758;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_48758;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_48758;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_48758;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48758;
  }
  ldv_48758: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_48765;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_48765;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_48765;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_48765;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48765;
  }
  ldv_48765: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_48772;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_48772;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48772;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48772;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48772;
  }
  ldv_48772: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_48779;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_48779;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_48779;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_48779;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48779;
  }
  ldv_48779: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_48786;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_48786;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_48786;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_48786;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48786;
  }
  ldv_48786: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_48793;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_48793;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48793;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48793;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48793;
  }
  ldv_48793: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_48800;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_48800;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_48800;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_48800;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48800;
  }
  ldv_48800: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_48807;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_48807;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_48807;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_48807;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48807;
  }
  ldv_48807: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_48814;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_48814;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48814;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48814;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48814;
  }
  ldv_48814: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_48821;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_48821;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_48821;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_48821;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48821;
  }
  ldv_48821: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_48828;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_48828;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_48828;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_48828;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48828;
  }
  ldv_48828: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_48835;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_48835;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48835;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48835;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48835;
  }
  ldv_48835: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_48842;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_48842;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_48842;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_48842;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48842;
  }
  ldv_48842: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_48849;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_48849;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_48849;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_48849;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48849;
  }
  ldv_48849: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_48856;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_48856;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48856;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48856;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48856;
  }
  ldv_48856: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_48863;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_48863;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_48863;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_48863;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48863;
  }
  ldv_48863: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_48870;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_48870;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_48870;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_48870;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48870;
  }
  ldv_48870: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_48877;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_48877;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48877;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48877;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48877;
  }
  ldv_48877: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_48884;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_48884;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_48884;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_48884;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48884;
  }
  ldv_48884: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_48891;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_48891;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_48891;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_48891;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48891;
  }
  ldv_48891: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_48898;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_48898;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48898;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48898;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48898;
  }
  ldv_48898: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_48905;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_48905;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_48905;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_48905;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48905;
  }
  ldv_48905: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_48912;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_48912;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_48912;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_48912;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48912;
  }
  ldv_48912: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_48919;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_48919;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48919;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48919;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48919;
  }
  ldv_48919: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_48926;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_48926;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_48926;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_48926;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48926;
  }
  ldv_48926: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_48933;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_48933;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_48933;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_48933;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48933;
  }
  ldv_48933: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_48940;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_48940;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48940;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48940;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48940;
  }
  ldv_48940: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_48947;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_48947;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_48947;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_48947;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48947;
  }
  ldv_48947: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_48954;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_48954;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_48954;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_48954;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48954;
  }
  ldv_48954: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_48961;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_48961;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48961;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48961;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48961;
  }
  ldv_48961: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 81U;
#line 38
  goto ldv_48968;
  case 2UL: 
#line 38
  put_unaligned_le16(81, __gu_p___54);
#line 38
  goto ldv_48968;
  case 4UL: 
#line 38
  put_unaligned_le32(81U, __gu_p___54);
#line 38
  goto ldv_48968;
  case 8UL: 
#line 38
  put_unaligned_le64(81ULL, __gu_p___54);
#line 38
  goto ldv_48968;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48968;
  }
  ldv_48968: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 4U;
#line 38
  goto ldv_48975;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___55);
#line 38
  goto ldv_48975;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___55);
#line 38
  goto ldv_48975;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___55);
#line 38
  goto ldv_48975;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48975;
  }
  ldv_48975: 
#line 38
  __gu_p___56 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 38
  goto ldv_48982;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 38
  goto ldv_48982;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_48982;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_48982;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48982;
  }
  ldv_48982: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 82U;
#line 38
  goto ldv_48989;
  case 2UL: 
#line 38
  put_unaligned_le16(82, __gu_p___57);
#line 38
  goto ldv_48989;
  case 4UL: 
#line 38
  put_unaligned_le32(82U, __gu_p___57);
#line 38
  goto ldv_48989;
  case 8UL: 
#line 38
  put_unaligned_le64(82ULL, __gu_p___57);
#line 38
  goto ldv_48989;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48989;
  }
  ldv_48989: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 4U;
#line 38
  goto ldv_48996;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___58);
#line 38
  goto ldv_48996;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___58);
#line 38
  goto ldv_48996;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___58);
#line 38
  goto ldv_48996;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48996;
  }
  ldv_48996: 
#line 38
  __gu_p___59 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 38
  goto ldv_49003;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 38
  goto ldv_49003;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_49003;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_49003;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49003;
  }
  ldv_49003: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 83U;
#line 38
  goto ldv_49010;
  case 2UL: 
#line 38
  put_unaligned_le16(83, __gu_p___60);
#line 38
  goto ldv_49010;
  case 4UL: 
#line 38
  put_unaligned_le32(83U, __gu_p___60);
#line 38
  goto ldv_49010;
  case 8UL: 
#line 38
  put_unaligned_le64(83ULL, __gu_p___60);
#line 38
  goto ldv_49010;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49010;
  }
  ldv_49010: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 4U;
#line 38
  goto ldv_49017;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___61);
#line 38
  goto ldv_49017;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___61);
#line 38
  goto ldv_49017;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___61);
#line 38
  goto ldv_49017;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49017;
  }
  ldv_49017: 
#line 38
  __gu_p___62 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 38
  goto ldv_49024;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 38
  goto ldv_49024;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_49024;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_49024;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49024;
  }
  ldv_49024: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 60U;
#line 38
  goto ldv_49031;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___63);
#line 38
  goto ldv_49031;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___63);
#line 38
  goto ldv_49031;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 38
  goto ldv_49031;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49031;
  }
  ldv_49031: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 1U;
#line 38
  goto ldv_49038;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___64);
#line 38
  goto ldv_49038;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___64);
#line 38
  goto ldv_49038;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___64);
#line 38
  goto ldv_49038;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49038;
  }
  ldv_49038: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 27U;
#line 38
  goto ldv_49045;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___65);
#line 38
  goto ldv_49045;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___65);
#line 38
  goto ldv_49045;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 38
  goto ldv_49045;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49045;
  }
  ldv_49045: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 1U;
#line 38
  goto ldv_49052;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___66);
#line 38
  goto ldv_49052;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___66);
#line 38
  goto ldv_49052;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___66);
#line 38
  goto ldv_49052;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49052;
  }
  ldv_49052: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 28U;
#line 38
  goto ldv_49059;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___67);
#line 38
  goto ldv_49059;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___67);
#line 38
  goto ldv_49059;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 38
  goto ldv_49059;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49059;
  }
  ldv_49059: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___68 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___68) = 1U;
#line 38
  goto ldv_49066;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___68);
#line 38
  goto ldv_49066;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___68);
#line 38
  goto ldv_49066;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___68);
#line 38
  goto ldv_49066;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49066;
  }
  ldv_49066: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___69 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___69) = 41U;
#line 38
  goto ldv_49073;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___69);
#line 38
  goto ldv_49073;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___69);
#line 38
  goto ldv_49073;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 38
  goto ldv_49073;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49073;
  }
  ldv_49073: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___70 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___70) = 1U;
#line 38
  goto ldv_49080;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___70);
#line 38
  goto ldv_49080;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___70);
#line 38
  goto ldv_49080;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___70);
#line 38
  goto ldv_49080;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49080;
  }
  ldv_49080: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___53 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___71 = (void *)tmp___53;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___71) = 61U;
#line 38
  goto ldv_49087;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___71);
#line 38
  goto ldv_49087;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___71);
#line 38
  goto ldv_49087;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 38
  goto ldv_49087;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49087;
  }
  ldv_49087: 
#line 38
  tmp___54 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___72 = (void *)tmp___54;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___72) = 1U;
#line 38
  goto ldv_49094;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___72);
#line 38
  goto ldv_49094;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___72);
#line 38
  goto ldv_49094;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___72);
#line 38
  goto ldv_49094;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49094;
  }
  ldv_49094: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___55 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___73 = (void *)tmp___55;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___73) = 62U;
#line 38
  goto ldv_49101;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___73);
#line 38
  goto ldv_49101;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___73);
#line 38
  goto ldv_49101;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 38
  goto ldv_49101;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49101;
  }
  ldv_49101: 
#line 38
  tmp___56 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___74 = (void *)tmp___56;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___74) = 1U;
#line 38
  goto ldv_49108;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___74);
#line 38
  goto ldv_49108;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___74);
#line 38
  goto ldv_49108;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___74);
#line 38
  goto ldv_49108;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49108;
  }
  ldv_49108: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___57 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___75 = (void *)tmp___57;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___75) = 70U;
#line 38
  goto ldv_49115;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___75);
#line 38
  goto ldv_49115;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___75);
#line 38
  goto ldv_49115;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 38
  goto ldv_49115;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49115;
  }
  ldv_49115: 
#line 38
  tmp___58 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___76 = (void *)tmp___58;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___76) = 1U;
#line 38
  goto ldv_49122;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___76);
#line 38
  goto ldv_49122;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___76);
#line 38
  goto ldv_49122;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___76);
#line 38
  goto ldv_49122;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49122;
  }
  ldv_49122: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 101
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p = (void *)tmp;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p) = 30U;
#line 82
  goto ldv_49219;
  case 2UL: 
#line 82
  put_unaligned_le16(30, __gu_p);
#line 82
  goto ldv_49219;
  case 4UL: 
#line 82
  put_unaligned_le32(30U, __gu_p);
#line 82
  goto ldv_49219;
  case 8UL: 
#line 82
  put_unaligned_le64(30ULL, __gu_p);
#line 82
  goto ldv_49219;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49219;
  }
  ldv_49219: 
#line 82
  tmp___0 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___0 = (void *)tmp___0;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___0) = 4U;
#line 82
  goto ldv_49226;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___0);
#line 82
  goto ldv_49226;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___0);
#line 82
  goto ldv_49226;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___0);
#line 82
  goto ldv_49226;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49226;
  }
  ldv_49226: 
#line 82
  __gu_p___1 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 82
  goto ldv_49233;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 82
  goto ldv_49233;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 82
  goto ldv_49233;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 82
  goto ldv_49233;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49233;
  }
  ldv_49233: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___1 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___2 = (void *)tmp___1;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___2) = 31U;
#line 82
  goto ldv_49240;
  case 2UL: 
#line 82
  put_unaligned_le16(31, __gu_p___2);
#line 82
  goto ldv_49240;
  case 4UL: 
#line 82
  put_unaligned_le32(31U, __gu_p___2);
#line 82
  goto ldv_49240;
  case 8UL: 
#line 82
  put_unaligned_le64(31ULL, __gu_p___2);
#line 82
  goto ldv_49240;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49240;
  }
  ldv_49240: 
#line 82
  tmp___2 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___3 = (void *)tmp___2;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___3) = 4U;
#line 82
  goto ldv_49247;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___3);
#line 82
  goto ldv_49247;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___3);
#line 82
  goto ldv_49247;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___3);
#line 82
  goto ldv_49247;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49247;
  }
  ldv_49247: 
#line 82
  __gu_p___4 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 82
  goto ldv_49254;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 82
  goto ldv_49254;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 82
  goto ldv_49254;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 82
  goto ldv_49254;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49254;
  }
  ldv_49254: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___3 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___5 = (void *)tmp___3;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___5) = 32U;
#line 82
  goto ldv_49261;
  case 2UL: 
#line 82
  put_unaligned_le16(32, __gu_p___5);
#line 82
  goto ldv_49261;
  case 4UL: 
#line 82
  put_unaligned_le32(32U, __gu_p___5);
#line 82
  goto ldv_49261;
  case 8UL: 
#line 82
  put_unaligned_le64(32ULL, __gu_p___5);
#line 82
  goto ldv_49261;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49261;
  }
  ldv_49261: 
#line 82
  tmp___4 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___6 = (void *)tmp___4;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___6) = 4U;
#line 82
  goto ldv_49268;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___6);
#line 82
  goto ldv_49268;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___6);
#line 82
  goto ldv_49268;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___6);
#line 82
  goto ldv_49268;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49268;
  }
  ldv_49268: 
#line 82
  __gu_p___7 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 82
  goto ldv_49275;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 82
  goto ldv_49275;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_49275;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_49275;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49275;
  }
  ldv_49275: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___5 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___8 = (void *)tmp___5;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___8) = 52U;
#line 82
  goto ldv_49282;
  case 2UL: 
#line 82
  put_unaligned_le16(49204, __gu_p___8);
#line 82
  goto ldv_49282;
  case 4UL: 
#line 82
  put_unaligned_le32(49204U, __gu_p___8);
#line 82
  goto ldv_49282;
  case 8UL: 
#line 82
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 82
  goto ldv_49282;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49282;
  }
  ldv_49282: 
#line 82
  tmp___6 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___9 = (void *)tmp___6;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 82
  goto ldv_49289;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 82
  goto ldv_49289;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_49289;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_49289;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49289;
  }
  ldv_49289: 
#line 82
  __len = (size_t )arg->verify_alg_len;
#line 82
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 82
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 82
  tmp___7 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___10 = (void *)tmp___7;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___10) = 51U;
#line 82
  goto ldv_49299;
  case 2UL: 
#line 82
  put_unaligned_le16(49203, __gu_p___10);
#line 82
  goto ldv_49299;
  case 4UL: 
#line 82
  put_unaligned_le32(49203U, __gu_p___10);
#line 82
  goto ldv_49299;
  case 8UL: 
#line 82
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 82
  goto ldv_49299;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49299;
  }
  ldv_49299: 
#line 82
  tmp___8 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___11 = (void *)tmp___8;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 82
  goto ldv_49306;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 82
  goto ldv_49306;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_49306;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_49306;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49306;
  }
  ldv_49306: 
#line 82
  __len___0 = (size_t )arg->cpu_mask_len;
#line 82
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 82
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 82
  tmp___9 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___12 = (void *)tmp___9;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___12) = 64U;
#line 82
  goto ldv_49316;
  case 2UL: 
#line 82
  put_unaligned_le16(49216, __gu_p___12);
#line 82
  goto ldv_49316;
  case 4UL: 
#line 82
  put_unaligned_le32(49216U, __gu_p___12);
#line 82
  goto ldv_49316;
  case 8UL: 
#line 82
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 82
  goto ldv_49316;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49316;
  }
  ldv_49316: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___13 = (void *)tmp___10;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 82
  goto ldv_49323;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 82
  goto ldv_49323;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_49323;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_49323;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49323;
  }
  ldv_49323: 
#line 82
  __len___1 = (size_t )arg->csums_alg_len;
#line 82
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 82
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 82
  tmp___11 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___14 = (void *)tmp___11;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___14) = 65U;
#line 82
  goto ldv_49333;
  case 2UL: 
#line 82
  put_unaligned_le16(32833, __gu_p___14);
#line 82
  goto ldv_49333;
  case 4UL: 
#line 82
  put_unaligned_le32(32833U, __gu_p___14);
#line 82
  goto ldv_49333;
  case 8UL: 
#line 82
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 82
  goto ldv_49333;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49333;
  }
  ldv_49333: 
#line 82
  tmp___12 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___15 = (void *)tmp___12;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___15) = 1U;
#line 82
  goto ldv_49340;
  case 2UL: 
#line 82
  put_unaligned_le16(1, __gu_p___15);
#line 82
  goto ldv_49340;
  case 4UL: 
#line 82
  put_unaligned_le32(1U, __gu_p___15);
#line 82
  goto ldv_49340;
  case 8UL: 
#line 82
  put_unaligned_le64(1ULL, __gu_p___15);
#line 82
  goto ldv_49340;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49340;
  }
  ldv_49340: 
#line 82
  *((char *)tags) = (char )arg->use_rle;
#line 82
  tags = tags + 1U;
#line 82
  tmp___13 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___16 = (void *)tmp___13;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___16) = 75U;
#line 82
  goto ldv_49347;
  case 2UL: 
#line 82
  put_unaligned_le16(75, __gu_p___16);
#line 82
  goto ldv_49347;
  case 4UL: 
#line 82
  put_unaligned_le32(75U, __gu_p___16);
#line 82
  goto ldv_49347;
  case 8UL: 
#line 82
  put_unaligned_le64(75ULL, __gu_p___16);
#line 82
  goto ldv_49347;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49347;
  }
  ldv_49347: 
#line 82
  tmp___14 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___17 = (void *)tmp___14;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___17) = 4U;
#line 82
  goto ldv_49354;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___17);
#line 82
  goto ldv_49354;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___17);
#line 82
  goto ldv_49354;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___17);
#line 82
  goto ldv_49354;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49354;
  }
  ldv_49354: 
#line 82
  __gu_p___18 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 82
  goto ldv_49361;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 82
  goto ldv_49361;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_49361;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_49361;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49361;
  }
  ldv_49361: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___15 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___19 = (void *)tmp___15;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___19) = 76U;
#line 82
  goto ldv_49368;
  case 2UL: 
#line 82
  put_unaligned_le16(76, __gu_p___19);
#line 82
  goto ldv_49368;
  case 4UL: 
#line 82
  put_unaligned_le32(76U, __gu_p___19);
#line 82
  goto ldv_49368;
  case 8UL: 
#line 82
  put_unaligned_le64(76ULL, __gu_p___19);
#line 82
  goto ldv_49368;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49368;
  }
  ldv_49368: 
#line 82
  tmp___16 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___20 = (void *)tmp___16;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___20) = 4U;
#line 82
  goto ldv_49375;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___20);
#line 82
  goto ldv_49375;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___20);
#line 82
  goto ldv_49375;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___20);
#line 82
  goto ldv_49375;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49375;
  }
  ldv_49375: 
#line 82
  __gu_p___21 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 82
  goto ldv_49382;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 82
  goto ldv_49382;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_49382;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_49382;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49382;
  }
  ldv_49382: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___17 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___22 = (void *)tmp___17;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___22) = 77U;
#line 82
  goto ldv_49389;
  case 2UL: 
#line 82
  put_unaligned_le16(77, __gu_p___22);
#line 82
  goto ldv_49389;
  case 4UL: 
#line 82
  put_unaligned_le32(77U, __gu_p___22);
#line 82
  goto ldv_49389;
  case 8UL: 
#line 82
  put_unaligned_le64(77ULL, __gu_p___22);
#line 82
  goto ldv_49389;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49389;
  }
  ldv_49389: 
#line 82
  tmp___18 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___23 = (void *)tmp___18;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___23) = 4U;
#line 82
  goto ldv_49396;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___23);
#line 82
  goto ldv_49396;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___23);
#line 82
  goto ldv_49396;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___23);
#line 82
  goto ldv_49396;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49396;
  }
  ldv_49396: 
#line 82
  __gu_p___24 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 82
  goto ldv_49403;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 82
  goto ldv_49403;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_49403;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_49403;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49403;
  }
  ldv_49403: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___19 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___25 = (void *)tmp___19;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___25) = 78U;
#line 82
  goto ldv_49410;
  case 2UL: 
#line 82
  put_unaligned_le16(78, __gu_p___25);
#line 82
  goto ldv_49410;
  case 4UL: 
#line 82
  put_unaligned_le32(78U, __gu_p___25);
#line 82
  goto ldv_49410;
  case 8UL: 
#line 82
  put_unaligned_le64(78ULL, __gu_p___25);
#line 82
  goto ldv_49410;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49410;
  }
  ldv_49410: 
#line 82
  tmp___20 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___26 = (void *)tmp___20;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___26) = 4U;
#line 82
  goto ldv_49417;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___26);
#line 82
  goto ldv_49417;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___26);
#line 82
  goto ldv_49417;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___26);
#line 82
  goto ldv_49417;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49417;
  }
  ldv_49417: 
#line 82
  __gu_p___27 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 82
  goto ldv_49424;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 82
  goto ldv_49424;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_49424;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_49424;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49424;
  }
  ldv_49424: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___21 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___28 = (void *)tmp___21;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___28) = 79U;
#line 82
  goto ldv_49431;
  case 2UL: 
#line 82
  put_unaligned_le16(79, __gu_p___28);
#line 82
  goto ldv_49431;
  case 4UL: 
#line 82
  put_unaligned_le32(79U, __gu_p___28);
#line 82
  goto ldv_49431;
  case 8UL: 
#line 82
  put_unaligned_le64(79ULL, __gu_p___28);
#line 82
  goto ldv_49431;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49431;
  }
  ldv_49431: 
#line 82
  tmp___22 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___29 = (void *)tmp___22;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___29) = 4U;
#line 82
  goto ldv_49438;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___29);
#line 82
  goto ldv_49438;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___29);
#line 82
  goto ldv_49438;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___29);
#line 82
  goto ldv_49438;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49438;
  }
  ldv_49438: 
#line 82
  __gu_p___30 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 82
  goto ldv_49445;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 82
  goto ldv_49445;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_49445;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_49445;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49445;
  }
  ldv_49445: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___23 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___31 = (void *)tmp___23;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___31) = 80U;
#line 82
  goto ldv_49452;
  case 2UL: 
#line 82
  put_unaligned_le16(80, __gu_p___31);
#line 82
  goto ldv_49452;
  case 4UL: 
#line 82
  put_unaligned_le32(80U, __gu_p___31);
#line 82
  goto ldv_49452;
  case 8UL: 
#line 82
  put_unaligned_le64(80ULL, __gu_p___31);
#line 82
  goto ldv_49452;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49452;
  }
  ldv_49452: 
#line 82
  tmp___24 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___32 = (void *)tmp___24;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___32) = 4U;
#line 82
  goto ldv_49459;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___32);
#line 82
  goto ldv_49459;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___32);
#line 82
  goto ldv_49459;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___32);
#line 82
  goto ldv_49459;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49459;
  }
  ldv_49459: 
#line 82
  __gu_p___33 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 82
  goto ldv_49466;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 82
  goto ldv_49466;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_49466;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_49466;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49466;
  }
  ldv_49466: 
#line 82
  tags = tags + 4U;
#line 82
  return (tags);
}
}
#line 113
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 113 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 111
  tmp = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p = (void *)tmp;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p) = 33U;
#line 111
  goto ldv_49554;
  case 2UL: 
#line 111
  put_unaligned_le16(33, __gu_p);
#line 111
  goto ldv_49554;
  case 4UL: 
#line 111
  put_unaligned_le32(33U, __gu_p);
#line 111
  goto ldv_49554;
  case 8UL: 
#line 111
  put_unaligned_le64(33ULL, __gu_p);
#line 111
  goto ldv_49554;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49554;
  }
  ldv_49554: 
#line 111
  tmp___0 = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p___0 = (void *)tmp___0;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___0) = 4U;
#line 111
  goto ldv_49561;
  case 2UL: 
#line 111
  put_unaligned_le16(4, __gu_p___0);
#line 111
  goto ldv_49561;
  case 4UL: 
#line 111
  put_unaligned_le32(4U, __gu_p___0);
#line 111
  goto ldv_49561;
  case 8UL: 
#line 111
  put_unaligned_le64(4ULL, __gu_p___0);
#line 111
  goto ldv_49561;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49561;
  }
  ldv_49561: 
#line 111
  __gu_p___1 = (void *)tags;
#line 111
  switch (4UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 111
  goto ldv_49568;
  case 2UL: 
#line 111
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 111
  goto ldv_49568;
  case 4UL: 
#line 111
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 111
  goto ldv_49568;
  case 8UL: 
#line 111
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 111
  goto ldv_49568;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49568;
  }
  ldv_49568: 
#line 111
  tags = tags + 4U;
#line 111
  return (tags);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 190
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 194
  envp[0] = (char *)"HOME=/";
#line 194
  envp[1] = (char *)"TERM=linux";
#line 194
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 194
  envp[3] = 0;
#line 194
  envp[4] = 0;
#line 194
  envp[5] = 0;
#line 202
  argv[0] = (char *)(& usermode_helper);
#line 202
  argv[1] = cmd;
#line 202
  argv[2] = (char *)(& mb);
#line 202
  argv[3] = 0;
#line 205
  tmp = mdev_to_minor(mdev);
#line 205
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 207
  tmp___0 = get_net_conf(mdev);
#line 207
  if (tmp___0 != 0) {
#line 208
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 210
    afs = (char *)"ipv6";
#line 211
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 213
    goto ldv_49889;
    case 2: 
#line 215
    afs = (char *)"ipv4";
#line 216
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 218
    goto ldv_49889;
    default: 
#line 220
    afs = (char *)"ssocks";
#line 221
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_49889: 
#line 224
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 225
    envp[3] = (char *)(& af);
#line 226
    envp[4] = (char *)(& ad);
#line 227
    put_net_conf(mdev);
  } else {

  }
#line 232
  drbd_md_sync(mdev);
#line 234
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 236
  drbd_bcast_ev_helper(mdev, cmd);
#line 237
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 238
  if (ret != 0) {
#line 239
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 243
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 247
  if (ret < 0) {
#line 248
    ret = 0;
  } else {

  }
#line 250
  return (ret);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 260
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            260);
  } else {

  }
#line 262
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 262
  if (tmp != 0) {
#line 263
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 264
    put_ldev(mdev);
  } else {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 267
    nps = (enum drbd_disk_state )mdev->state.ldv_37644.pdsk;
#line 268
    goto out;
  }
#line 271
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 273
  switch ((r >> 8) & 255) {
  case 3: 
#line 275
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 276
  nps = D_INCONSISTENT;
#line 277
  goto ldv_49901;
  case 4: 
#line 279
  ex_to_string = (char *)"peer was fenced";
#line 280
  nps = D_OUTDATED;
#line 281
  goto ldv_49901;
  case 5: ;
#line 283
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 285
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 286
    nps = D_OUTDATED;
  } else {
#line 288
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 289
    nps = (enum drbd_disk_state )mdev->state.ldv_37644.pdsk;
  }
#line 291
  goto ldv_49901;
  case 6: 
#line 295
  ex_to_string = (char *)"peer is active";
#line 296
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 297
  nps = D_UNKNOWN;
#line 298
  val.i = 0U;
#line 298
  val.ldv_37644.disk = 5U;
#line 298
  mask.i = 0U;
#line 298
  mask.ldv_37644.disk = 15U;
#line 298
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 299
  goto ldv_49901;
  case 7: ;
#line 301
  if ((unsigned int )fp != 2U) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 303
  ex_to_string = (char *)"peer was stonithed";
#line 304
  nps = D_OUTDATED;
#line 305
  goto ldv_49901;
  default: 
#line 308
  nps = D_UNKNOWN;
#line 309
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 310
  return (nps);
  }
  ldv_49901: 
#line 313
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 317
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 320
    val___0.i = 0U;
#line 320
    val___0.ldv_37644.susp_fen = 0U;
#line 320
    mask___0.i = 0U;
#line 320
    mask___0.ldv_37644.susp_fen = 1U;
#line 320
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 323
  return (nps);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;

  {
#line 328
  mdev = (struct drbd_conf *)data;
#line 332
  nps = drbd_try_outdate_peer(mdev);
#line 345
  spin_lock_irq(& mdev->req_lock);
#line 346
  ns = mdev->state;
#line 347
  if ((int )ns.ldv_37644.conn <= 8) {
#line 348
    ns.ldv_37644.pdsk = (unsigned char )nps;
#line 349
    _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 351
  spin_unlock_irq(& mdev->req_lock);
#line 353
  return (0);
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 360
  tmp = mdev_to_minor(mdev);
#line 360
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 360
  __k = tmp___0;
#line 360
  tmp___1 = IS_ERR((void const   *)__k);
#line 360
  if (tmp___1 == 0L) {
#line 360
    wake_up_process(__k);
  } else {

  }
#line 360
  opa = __k;
#line 361
  tmp___2 = IS_ERR((void const   *)opa);
#line 361
  if (tmp___2 != 0L) {
#line 362
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 363
  return;
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 368
  max_tries = 4;
#line 369
  rv = 0;
#line 370
  try = 0;
#line 371
  forced = 0;
#line 375
  if ((unsigned int )new_role == 1U) {
#line 376
    request_ping(mdev);
  } else {

  }
#line 378
  ldv_mutex_lock_185(& mdev->state_mutex);
#line 380
  mask.i = 0U;
#line 380
  mask.ldv_37644.role = 3U;
#line 381
  val.i = 0U;
#line 381
  val.ldv_37644.role = (unsigned char )new_role;
#line 383
  goto ldv_49939;
  ldv_49942: 
#line 384
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 388
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 389
    val.ldv_37644.pdsk = 0U;
#line 390
    mask.ldv_37644.pdsk = 0U;
#line 391
    goto ldv_49939;
  } else {

  }
#line 394
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_37644.disk <= 7 && (int )mdev->state.ldv_37644.disk > 3)) {
#line 397
    mask.ldv_37644.disk = 15U;
#line 398
    val.ldv_37644.disk = 8U;
#line 399
    forced = 1;
#line 400
    goto ldv_49939;
  } else {

  }
#line 403
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 405
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 405
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              405);
    } else {

    }
#line 406
    nps = drbd_try_outdate_peer(mdev);
#line 408
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 409
      val.ldv_37644.disk = 8U;
#line 410
      mask.ldv_37644.disk = 15U;
    } else {

    }
#line 413
    val.ldv_37644.pdsk = (unsigned char )nps;
#line 414
    mask.ldv_37644.pdsk = 15U;
#line 416
    goto ldv_49939;
  } else {

  }
#line 419
  if ((int )rv == 2) {
#line 420
    goto fail;
  } else {

  }
#line 421
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 422
    nps = drbd_try_outdate_peer(mdev);
#line 424
    if (force != 0 && (unsigned int )nps > 5U) {
#line 425
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 426
      nps = D_OUTDATED;
    } else {

    }
#line 429
    mask.ldv_37644.pdsk = 15U;
#line 430
    val.ldv_37644.pdsk = (unsigned char )nps;
#line 432
    goto ldv_49939;
  } else {

  }
#line 434
  if ((int )rv == -1) {
#line 437
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 438
    if (try < max_tries) {
#line 439
      try = max_tries + -1;
    } else {

    }
#line 440
    goto ldv_49939;
  } else {

  }
#line 442
  if ((int )rv <= 0) {
#line 443
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 445
    if ((int )rv <= 0) {
#line 446
      goto fail;
    } else {

    }
  } else {

  }
#line 448
  goto ldv_49941;
  ldv_49939: 
#line 383
  tmp = try;
#line 383
  try = try + 1;
#line 383
  if (tmp < max_tries) {
#line 384
    goto ldv_49942;
  } else {

  }
  ldv_49941: ;
#line 451
  if ((int )rv <= 0) {
#line 452
    goto fail;
  } else {

  }
#line 454
  if (forced != 0) {
#line 455
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 458
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 458
  if (tmp___0 == 0) {
#line 458
    goto ldv_49943;
  } else {

  }
#line 458
  tmp___1 = get_current();
#line 458
  __wait.flags = 0U;
#line 458
  __wait.private = (void *)tmp___1;
#line 458
  __wait.func = & autoremove_wake_function;
#line 458
  __wait.task_list.next = & __wait.task_list;
#line 458
  __wait.task_list.prev = & __wait.task_list;
  ldv_49946: 
#line 458
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 458
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 458
  if (tmp___2 == 0) {
#line 458
    goto ldv_49945;
  } else {

  }
#line 458
  schedule();
#line 458
  goto ldv_49946;
  ldv_49945: 
#line 458
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49943: ;
#line 460
  if ((unsigned int )new_role == 2U) {
#line 461
    set_disk_ro(mdev->vdisk, 1);
#line 462
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 462
    if (tmp___3 != 0) {
#line 463
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 464
      put_ldev(mdev);
    } else {

    }
  } else {
#line 467
    tmp___4 = get_net_conf(mdev);
#line 467
    if (tmp___4 != 0) {
#line 468
      (mdev->net_conf)->want_lose = 0U;
#line 469
      put_net_conf(mdev);
    } else {

    }
#line 471
    set_disk_ro(mdev->vdisk, 0);
#line 472
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 472
    if (tmp___5 != 0) {
#line 473
      if ((((int )mdev->state.ldv_37644.conn <= 9 || (int )mdev->state.ldv_37644.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 476
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 478
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 479
      put_ldev(mdev);
    } else {

    }
  }
#line 486
  if ((int )mdev->state.ldv_37644.conn > 8) {
#line 488
    if (forced != 0) {
#line 489
      drbd_send_uuids(mdev);
    } else {

    }
#line 490
    drbd_send_state(mdev);
  } else {

  }
#line 493
  drbd_md_sync(mdev);
#line 495
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 497
  ldv_mutex_unlock_186(& mdev->state_mutex);
#line 498
  return (rv);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 505
  if ((unsigned int )minor >= minor_count) {
#line 506
    return (0);
  } else {

  }
#line 508
  mdev = minor_to_mdev((unsigned int )minor);
#line 510
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 511
    disk = 0;
#line 512
    mdev = drbd_new_device((unsigned int )minor);
#line 514
    spin_lock_irq(& drbd_pp_lock);
#line 515
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 516
      *(minor_table + (unsigned long )minor) = mdev;
#line 517
      disk = mdev->vdisk;
#line 518
      mdev = 0;
    } else {

    }
#line 520
    spin_unlock_irq(& drbd_pp_lock);
#line 522
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 525
      add_disk(disk);
    } else {
#line 527
      drbd_free_mdev(mdev);
    }
#line 529
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 532
  return (mdev);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 540
  memset((void *)(& primary_args), 0, 4UL);
#line 541
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 541
  if (tmp == 0) {
#line 542
    reply->ret_code = 126;
#line 543
    return (0);
  } else {

  }
#line 546
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 546
  reply->ret_code = (int )tmp___0;
#line 549
  return (0);
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 555
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 555
  reply->ret_code = (int )tmp;
#line 557
  return (0);
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 565
  md_size_sect = 0UL;
#line 566
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 569
  bdev->md.md_size_sect = 262144U;
#line 570
  tmp = drbd_md_ss__(mdev, bdev);
#line 570
  bdev->md.md_offset = (u64 )tmp;
#line 571
  bdev->md.al_offset = 8;
#line 572
  bdev->md.bm_offset = 72;
#line 573
  goto ldv_49970;
  case -2: 
#line 576
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 576
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 577
  bdev->md.md_offset = 0ULL;
#line 578
  bdev->md.al_offset = 8;
#line 579
  bdev->md.bm_offset = 72;
#line 580
  goto ldv_49970;
  case -1: ;
  case -3: 
#line 583
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 583
  bdev->md.md_offset = (u64 )tmp___1;
#line 585
  bdev->md.al_offset = -64;
#line 587
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 588
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 589
  md_size_sect = md_size_sect >> 15;
#line 590
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 594
  md_size_sect = md_size_sect + 72UL;
#line 596
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 598
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 599
  goto ldv_49970;
  }
  ldv_49970: ;
#line 602
  return;
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 608
  units[0] = 75;
#line 608
  units[1] = 77;
#line 608
  units[2] = 71;
#line 608
  units[3] = 84;
#line 608
  units[4] = 80;
#line 608
  units[5] = 69;
#line 609
  base = 0;
#line 610
  goto ldv_49981;
  ldv_49980: 
#line 612
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 613
  base = base + 1;
  ldv_49981: ;
#line 610
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 611
    goto ldv_49980;
  } else {

  }
#line 615
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 617
  return (buf);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 635
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 636
  tmp = is_susp(mdev->state);
#line 636
  if (tmp != 0) {
#line 637
    return;
  } else {

  }
#line 638
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 638
  if (tmp___0 == 0) {
#line 638
    goto ldv_49986;
  } else {

  }
#line 638
  tmp___1 = get_current();
#line 638
  __wait.flags = 0U;
#line 638
  __wait.private = (void *)tmp___1;
#line 638
  __wait.func = & autoremove_wake_function;
#line 638
  __wait.task_list.next = & __wait.task_list;
#line 638
  __wait.task_list.prev = & __wait.task_list;
  ldv_49989: 
#line 638
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 638
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 638
  if (tmp___2 == 0) {
#line 638
    goto ldv_49988;
  } else {

  }
#line 638
  schedule();
#line 638
  goto ldv_49989;
  ldv_49988: 
#line 638
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49986: ;
#line 641
  return;
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 643
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 644
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 645
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 662
  rv = 0;
#line 673
  drbd_suspend_io(mdev);
#line 676
  tmp = lc_try_lock(mdev->act_log);
#line 676
  if (tmp != 0) {
#line 676
    goto ldv_50005;
  } else {

  }
#line 676
  tmp___0 = get_current();
#line 676
  __wait.flags = 0U;
#line 676
  __wait.private = (void *)tmp___0;
#line 676
  __wait.func = & autoremove_wake_function;
#line 676
  __wait.task_list.next = & __wait.task_list;
#line 676
  __wait.task_list.prev = & __wait.task_list;
  ldv_50008: 
#line 676
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 676
  tmp___1 = lc_try_lock(mdev->act_log);
#line 676
  if (tmp___1 != 0) {
#line 676
    goto ldv_50007;
  } else {

  }
#line 676
  schedule();
#line 676
  goto ldv_50008;
  ldv_50007: 
#line 676
  finish_wait(& mdev->al_wait, & __wait);
  ldv_50005: 
#line 678
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 679
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 680
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 683
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 685
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 687
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 687
  if (tmp___5 != size) {
#line 687
    goto _L;
  } else {
#line 687
    tmp___6 = drbd_bm_capacity(mdev);
#line 687
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 690
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 691
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 691
      if (tmp___3 != 0L) {
#line 693
        tmp___2 = drbd_bm_capacity(mdev);
#line 693
        size = tmp___2 >> 1;
#line 694
        if (size == 0UL) {
#line 695
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 698
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 702
        rv = dev_size_error;
      } else {

      }
#line 705
      drbd_set_my_capacity(mdev, size);
#line 706
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 707
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 707
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 710
  if ((int )rv == -1) {
#line 711
    goto out;
  } else {

  }
#line 713
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 715
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 715
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 718
  if (la_size_changed != 0 || md_moved != 0) {
#line 721
    drbd_al_shrink(mdev);
#line 722
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 726
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 728
    if (err___0 != 0) {
#line 729
      rv = dev_size_error;
#line 730
      goto out;
    } else {

    }
#line 732
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 735
  if (size > la_size) {
#line 736
    rv = grew;
  } else {

  }
#line 737
  if (size < la_size) {
#line 738
    rv = shrunk;
  } else {

  }
  out: 
#line 740
  lc_unlock(mdev->act_log);
#line 741
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 742
  drbd_resume_io(mdev);
#line 744
  return (rv);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 750
  p_size = mdev->p_size;
#line 751
  la_size = (sector_t )bdev->md.la_size_sect;
#line 753
  u_size = (sector_t )bdev->dc.disk_size;
#line 754
  size = 0UL;
#line 756
  m_size = drbd_get_max_capacity___1(bdev);
#line 758
  if ((int )mdev->state.ldv_37644.conn <= 9 && assume_peer_has_space != 0) {
#line 759
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 760
    p_size = m_size;
  } else {

  }
#line 763
  if (p_size != 0UL && m_size != 0UL) {
#line 764
    __min1 = p_size;
#line 764
    __min2 = m_size;
#line 764
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 766
  if (la_size != 0UL) {
#line 767
    size = la_size;
#line 768
    if (m_size != 0UL && m_size < size) {
#line 769
      size = m_size;
    } else {

    }
#line 770
    if (p_size != 0UL && p_size < size) {
#line 771
      size = p_size;
    } else {

    }
  } else {
#line 773
    if (m_size != 0UL) {
#line 774
      size = m_size;
    } else {

    }
#line 775
    if (p_size != 0UL) {
#line 776
      size = p_size;
    } else {

    }
  }
#line 780
  if (size == 0UL) {
#line 781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 783
  if (u_size != 0UL) {
#line 784
    if (u_size > size) {
#line 785
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 788
      size = u_size;
    }
  } else {

  }
#line 791
  return (size);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 809
  _b = mdev->sync_conf.al_extents <= 6;
#line 809
  if (_b != 0) {
#line 809
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            809);
  } else {

  }
#line 809
  if (_b != 0) {
#line 810
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 812
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 814
    return (0);
  } else {

  }
#line 816
  in_use = 0U;
#line 817
  t = mdev->act_log;
#line 818
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 821
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 823
    return (-12);
  } else {

  }
#line 825
  spin_lock_irq(& mdev->al_lock);
#line 826
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 827
    i = 0;
#line 827
    goto ldv_50037;
    ldv_50036: 
#line 828
    e = lc_element_by_index(t, (unsigned int )i);
#line 829
    if (e->refcnt != 0U) {
#line 830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 832
    in_use = e->refcnt + in_use;
#line 827
    i = i + 1;
    ldv_50037: ;
#line 827
    if ((unsigned int )i < t->nr_elements) {
#line 828
      goto ldv_50036;
    } else {

    }

  } else {

  }
#line 835
  if (in_use == 0U) {
#line 836
    mdev->act_log = n;
  } else {

  }
#line 837
  spin_unlock_irq(& mdev->al_lock);
#line 838
  if (in_use != 0U) {
#line 839
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 840
    lc_destroy(n);
#line 841
    return (-16);
  } else
#line 843
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 844
    lc_destroy(t);
  } else {

  }
#line 846
  drbd_md_mark_dirty(mdev);
#line 847
  return (0);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  int max_hw_sectors ;
  int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 852
  q = mdev->rq_queue;
#line 853
  max_hw_sectors = (int )(max_bio_size >> 9);
#line 854
  max_segments = 0;
#line 856
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 856
  if (tmp___0 != 0) {
#line 857
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 859
    tmp = queue_max_hw_sectors(b);
#line 859
    _min1 = tmp;
#line 859
    _min2 = max_bio_size >> 9;
#line 859
    max_hw_sectors = (int )(_min1 < _min2 ? _min1 : _min2);
#line 860
    max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 861
    put_ldev(mdev);
  } else {

  }
#line 864
  blk_queue_logical_block_size(q, 512);
#line 865
  blk_queue_max_hw_sectors(q, (unsigned int )max_hw_sectors);
#line 867
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 868
  blk_queue_segment_boundary(q, 4095UL);
#line 870
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 870
  if (tmp___1 != 0) {
#line 871
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 873
    blk_queue_stack_limits(q, b___0);
#line 875
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 876
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 879
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 881
    put_ldev(mdev);
  } else {

  }
#line 883
  return;
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  int now ;
  int new ;
  int local ;
  int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 889
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 889
  now = (int )(tmp << 9);
#line 890
  local = mdev->local_max_bio_size;
#line 891
  peer = mdev->peer_max_bio_size;
#line 893
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 893
  if (tmp___1 != 0) {
#line 894
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 894
    local = (int )(tmp___0 << 9);
#line 895
    mdev->local_max_bio_size = local;
#line 896
    put_ldev(mdev);
  } else {

  }
#line 902
  if ((int )mdev->state.ldv_37644.conn > 9) {
#line 903
    if (mdev->agreed_pro_version <= 93) {
#line 904
      peer = mdev->peer_max_bio_size;
    } else
#line 905
    if (mdev->agreed_pro_version == 94) {
#line 906
      peer = 32768;
    } else {
#line 908
      peer = 131072;
    }
  } else {

  }
#line 911
  __min1 = local;
#line 911
  __min2 = peer;
#line 911
  new = __min1 < __min2 ? __min1 : __min2;
#line 913
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%d < %d)\n",
            new, now);
  } else {

  }
#line 916
  if (new != now) {
#line 917
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 919
  drbd_setup_queue_param(mdev, (unsigned int )new);
#line 920
  return;
}
}
#line 929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 931
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 931
  if (tmp == 0) {
#line 931
    goto ldv_50064;
  } else {

  }
#line 931
  tmp___0 = get_current();
#line 931
  __wait.flags = 0U;
#line 931
  __wait.private = (void *)tmp___0;
#line 931
  __wait.func = & autoremove_wake_function;
#line 931
  __wait.task_list.next = & __wait.task_list;
#line 931
  __wait.task_list.prev = & __wait.task_list;
  ldv_50067: 
#line 931
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 931
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 931
  if (tmp___1 == 0) {
#line 931
    goto ldv_50066;
  } else {

  }
#line 931
  schedule();
#line 931
  goto ldv_50067;
  ldv_50066: 
#line 931
  finish_wait(& mdev->state_wait, & __wait);
  ldv_50064: 
#line 932
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 932
  if (tmp___2 == 0) {
#line 932
    goto ldv_50068;
  } else {

  }
#line 932
  tmp___3 = get_current();
#line 932
  __wait___0.flags = 0U;
#line 932
  __wait___0.private = (void *)tmp___3;
#line 932
  __wait___0.func = & autoremove_wake_function;
#line 932
  __wait___0.task_list.next = & __wait___0.task_list;
#line 932
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_50071: 
#line 932
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 932
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 932
  if (tmp___4 == 0) {
#line 932
    goto ldv_50070;
  } else {

  }
#line 932
  schedule();
#line 932
  goto ldv_50071;
  ldv_50070: 
#line 932
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_50068: 
#line 933
  drbd_thread_start(& mdev->worker);
#line 934
  drbd_flush_workqueue(mdev);
#line 935
  return;
}
}
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 942
  spin_lock_irq(& mdev->req_lock);
#line 943
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 946
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 947
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 949
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 950
  spin_unlock_irq(& mdev->req_lock);
#line 951
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 952
  return;
}
}
#line 955 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 957
  s = 0;
#line 959
  tmp = lc_try_lock(mdev->act_log);
#line 959
  if (tmp != 0) {
#line 960
    drbd_al_shrink(mdev);
#line 961
    lc_unlock(mdev->act_log);
  } else {
#line 963
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 964
    return;
  }
#line 967
  spin_lock_irq(& mdev->req_lock);
#line 968
  if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 969
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 969
    s = tmp___0 == 0;
  } else {

  }
#line 971
  spin_unlock_irq(& mdev->req_lock);
#line 973
  if (s != 0) {
#line 974
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 975
  return;
}
}
#line 979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 986
  nbc = 0;
#line 988
  resync_lru = 0;
#line 991
  cp_discovered = 0;
#line 994
  drbd_reconfig_start(mdev);
#line 997
  if ((int )mdev->state.ldv_37644.disk > 0) {
#line 998
    retcode = ERR_DISK_CONFIGURED;
#line 999
    goto fail;
  } else {

  }
#line 1005
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1005
  if (tmp == 0) {
#line 1005
    goto ldv_50097;
  } else {

  }
#line 1005
  tmp___0 = get_current();
#line 1005
  __wait.flags = 0U;
#line 1005
  __wait.private = (void *)tmp___0;
#line 1005
  __wait.func = & autoremove_wake_function;
#line 1005
  __wait.task_list.next = & __wait.task_list;
#line 1005
  __wait.task_list.prev = & __wait.task_list;
  ldv_50100: 
#line 1005
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1005
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1005
  if (tmp___1 == 0) {
#line 1005
    goto ldv_50099;
  } else {

  }
#line 1005
  schedule();
#line 1005
  goto ldv_50100;
  ldv_50099: 
#line 1005
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50097: 
#line 1008
  tmp___2 = kzalloc(392UL, 208U);
#line 1008
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1009
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1010
    retcode = ERR_NOMEM;
#line 1011
    goto fail;
  } else {

  }
#line 1014
  nbc->dc.disk_size = 0ULL;
#line 1015
  nbc->dc.on_io_error = 0;
#line 1016
  nbc->dc.fencing = 0;
#line 1017
  nbc->dc.max_bio_bvecs = 0;
#line 1019
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1019
  if (tmp___3 == 0) {
#line 1020
    retcode = ERR_MANDATORY_TAG;
#line 1021
    goto fail;
  } else {

  }
#line 1024
  if (nbc->dc.meta_dev_idx < -3) {
#line 1025
    retcode = ERR_MD_IDX_INVALID;
#line 1026
    goto fail;
  } else {

  }
#line 1029
  tmp___4 = get_net_conf(mdev);
#line 1029
  if (tmp___4 != 0) {
#line 1030
    prot = (mdev->net_conf)->wire_protocol;
#line 1031
    put_net_conf(mdev);
#line 1032
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1033
      retcode = ERR_STONITH_AND_PROT_A;
#line 1034
      goto fail;
    } else {

    }
  } else {

  }
#line 1038
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1040
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1040
  if (tmp___6 != 0L) {
#line 1041
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1041
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1043
    retcode = ERR_OPEN_DISK;
#line 1044
    goto fail;
  } else {

  }
#line 1046
  nbc->backing_bdev = bdev;
#line 1056
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1060
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1060
  if (tmp___8 != 0L) {
#line 1061
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1061
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1063
    retcode = ERR_OPEN_MD_DISK;
#line 1064
    goto fail;
  } else {

  }
#line 1066
  nbc->md_bdev = bdev;
#line 1068
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1071
    retcode = ERR_MD_IDX_INVALID;
#line 1072
    goto fail;
  } else {

  }
#line 1075
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1078
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1079
    retcode = ERR_NOMEM;
#line 1080
    goto fail;
  } else {

  }
#line 1084
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1086
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1086
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1087
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1087
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1090
    retcode = ERR_DISK_TO_SMALL;
#line 1091
    goto fail;
  } else {

  }
#line 1094
  if (nbc->dc.meta_dev_idx < 0) {
#line 1095
    max_possible_sectors = 2251799813685248UL;
#line 1097
    min_md_device_sectors = 2048UL;
  } else {
#line 1099
    max_possible_sectors = 8587575296UL;
#line 1100
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1103
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1103
  if (tmp___11 < min_md_device_sectors) {
#line 1104
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1105
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1108
    goto fail;
  } else {

  }
#line 1113
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1113
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1113
  if (tmp___12 < tmp___13) {
#line 1115
    retcode = ERR_DISK_TO_SMALL;
#line 1116
    goto fail;
  } else {

  }
#line 1119
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1121
  if (nbc->known_size > max_possible_sectors) {
#line 1122
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1125
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1126
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1130
  drbd_suspend_io(mdev);
#line 1132
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1132
  if (tmp___14 == 0) {
#line 1132
    goto ldv_50102;
  } else {
#line 1132
    tmp___15 = is_susp(mdev->state);
#line 1132
    if (tmp___15 != 0) {
#line 1132
      goto ldv_50102;
    } else {

    }
  }
#line 1132
  tmp___16 = get_current();
#line 1132
  __wait___0.flags = 0U;
#line 1132
  __wait___0.private = (void *)tmp___16;
#line 1132
  __wait___0.func = & autoremove_wake_function;
#line 1132
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1132
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_50105: 
#line 1132
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1132
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1132
  if (tmp___17 == 0) {
#line 1132
    goto ldv_50104;
  } else {
#line 1132
    tmp___18 = is_susp(mdev->state);
#line 1132
    if (tmp___18 != 0) {
#line 1132
      goto ldv_50104;
    } else {

    }
  }
#line 1132
  schedule();
#line 1132
  goto ldv_50105;
  ldv_50104: 
#line 1132
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_50102: 
#line 1134
  drbd_flush_workqueue(mdev);
#line 1136
  val.i = 0U;
#line 1136
  val.ldv_37644.disk = 1U;
#line 1136
  mask.i = 0U;
#line 1136
  mask.ldv_37644.disk = 15U;
#line 1136
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1137
  retcode = (enum drbd_ret_code )rv;
#line 1138
  drbd_resume_io(mdev);
#line 1139
  if ((int )rv <= 0) {
#line 1140
    goto fail;
  } else {

  }
#line 1142
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1142
  if (tmp___19 == 0) {
#line 1143
    goto force_diskless;
  } else {

  }
#line 1145
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1148
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1148
  logical_block_size = (int )tmp___20;
#line 1149
  if (logical_block_size == 0) {
#line 1150
    logical_block_size = 512;
  } else {

  }
#line 1152
  if (logical_block_size != 512) {
#line 1153
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1154
      tmp___21 = alloc_pages(16U, 0U);
#line 1154
      page = tmp___21;
#line 1155
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1156
        goto force_diskless_dec;
      } else {

      }
#line 1158
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1160
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1162
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1166
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1167
    tmp___22 = drbd_bm_init(mdev);
#line 1167
    if (tmp___22 != 0) {
#line 1168
      retcode = ERR_NOMEM;
#line 1169
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1173
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1173
  retcode = (enum drbd_ret_code )tmp___23;
#line 1174
  if ((unsigned int )retcode != 101U) {
#line 1175
    goto force_diskless_dec;
  } else {

  }
#line 1177
  if (((int )mdev->state.ldv_37644.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1180
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1182
    retcode = ERR_DATA_NOT_CURRENT;
#line 1183
    goto force_diskless_dec;
  } else {

  }
#line 1187
  tmp___24 = drbd_check_al_size(mdev);
#line 1187
  if (tmp___24 != 0) {
#line 1188
    retcode = ERR_NOMEM;
#line 1189
    goto force_diskless_dec;
  } else {

  }
#line 1193
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1193
  if (tmp___25 != 0) {
#line 1193
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1193
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1195
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1196
      retcode = ERR_DISK_TO_SMALL;
#line 1197
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1200
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1200
  if (tmp___27 == 0) {
#line 1201
    retcode = ERR_IO_MD_DISK;
#line 1202
    goto force_diskless_dec;
  } else {

  }
#line 1207
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1208
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1210
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1216
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1216
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1216);
  } else {

  }
#line 1217
  mdev->ldev = nbc;
#line 1218
  mdev->resync = resync_lru;
#line 1219
  nbc = 0;
#line 1220
  resync_lru = 0;
#line 1222
  mdev->write_ordering = WO_bdev_flush;
#line 1223
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1225
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1225
  if (tmp___28 != 0) {
#line 1226
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1228
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1230
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1230
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1232
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1233
    cp_discovered = 1;
  } else {

  }
#line 1236
  mdev->send_cnt = 0U;
#line 1237
  mdev->recv_cnt = 0U;
#line 1238
  mdev->read_cnt = 0U;
#line 1239
  mdev->writ_cnt = 0U;
#line 1241
  drbd_reconsider_max_bio_size(mdev);
#line 1257
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1258
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1258
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1258
    if (tmp___30 != 0) {
#line 1258
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1258
      if (tmp___31 == 0) {
#line 1261
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1263
  dd = drbd_determine_dev_size(mdev, 0);
#line 1264
  if ((int )dd == -1) {
#line 1265
    retcode = ERR_NOMEM_BITMAP;
#line 1266
    goto force_diskless_dec;
  } else
#line 1267
  if ((int )dd == 2) {
#line 1268
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1270
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1270
  if (tmp___34 != 0) {
#line 1271
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1273
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1273
    if (tmp___32 != 0) {
#line 1275
      retcode = ERR_IO_MD_DISK;
#line 1276
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1279
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1279
    if (tmp___33 < 0) {
#line 1281
      retcode = ERR_IO_MD_DISK;
#line 1282
      goto force_diskless_dec;
    } else {

    }
  }
#line 1286
  if (cp_discovered != 0) {
#line 1287
    drbd_al_apply_to_bm(mdev);
#line 1288
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1288
    if (tmp___35 != 0) {
#line 1290
      retcode = ERR_IO_MD_DISK;
#line 1291
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1295
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1295
  tmp___37 = drbd_bm_bits(mdev);
#line 1295
  if (tmp___36 == tmp___37) {
#line 1296
    drbd_suspend_al(mdev);
  } else {

  }
#line 1298
  spin_lock_irq(& mdev->req_lock);
#line 1299
  os = mdev->state;
#line 1300
  ns.i = os.i;
#line 1306
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1306
  if (tmp___39 != 0) {
#line 1307
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1307
    if (tmp___38 != 0) {
#line 1308
      ns.ldv_37644.disk = 7U;
    } else {
#line 1310
      ns.ldv_37644.disk = 5U;
    }
  } else {
#line 1312
    ns.ldv_37644.disk = 4U;
  }
#line 1315
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1315
  if (tmp___40 != 0) {
#line 1316
    ns.ldv_37644.pdsk = 5U;
  } else {

  }
#line 1318
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1320
    ns.ldv_37644.disk = 8U;
  } else {

  }
#line 1329
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1330
    mdev->new_state_tmp.i = ns.i;
#line 1331
    ns.i = os.i;
#line 1332
    ns.ldv_37644.disk = 3U;
#line 1337
    kfree((void const   *)mdev->p_uuid);
#line 1338
    mdev->p_uuid = 0;
  } else {

  }
#line 1341
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1342
  ns = mdev->state;
#line 1343
  spin_unlock_irq(& mdev->req_lock);
#line 1345
  if ((int )rv <= 0) {
#line 1346
    goto force_diskless_dec;
  } else {

  }
#line 1348
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1349
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1351
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1353
  drbd_md_mark_dirty(mdev);
#line 1354
  drbd_md_sync(mdev);
#line 1356
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1357
  put_ldev(mdev);
#line 1358
  reply->ret_code = (int )retcode;
#line 1359
  drbd_reconfig_done(mdev);
#line 1360
  return (0);
  force_diskless_dec: 
#line 1363
  put_ldev(mdev);
  force_diskless: 
#line 1365
  val___0.i = 0U;
#line 1365
  val___0.ldv_37644.disk = 2U;
#line 1365
  mask___0.i = 0U;
#line 1365
  mask___0.ldv_37644.disk = 15U;
#line 1365
  drbd_force_state(mdev, mask___0, val___0);
#line 1366
  drbd_md_sync(mdev);
  fail: ;
#line 1368
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1369
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1370
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1372
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1373
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1375
    kfree((void const   *)nbc);
  } else {

  }
#line 1377
  lc_destroy(resync_lru);
#line 1379
  reply->ret_code = (int )retcode;
#line 1380
  drbd_reconfig_done(mdev);
#line 1381
  return (0);
}
}
#line 1389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1394
  drbd_suspend_io(mdev);
#line 1395
  val.i = 0U;
#line 1395
  val.ldv_37644.disk = 2U;
#line 1395
  mask.i = 0U;
#line 1395
  mask.ldv_37644.disk = 15U;
#line 1395
  tmp = drbd_request_state(mdev, mask, val);
#line 1395
  retcode = (enum drbd_ret_code )tmp;
#line 1397
  __ret = 0;
#line 1397
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1397
    tmp___0 = get_current();
#line 1397
    __wait.flags = 0U;
#line 1397
    __wait.private = (void *)tmp___0;
#line 1397
    __wait.func = & autoremove_wake_function;
#line 1397
    __wait.task_list.next = & __wait.task_list;
#line 1397
    __wait.task_list.prev = & __wait.task_list;
    ldv_50132: 
#line 1397
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1397
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1397
      goto ldv_50130;
    } else {

    }
#line 1397
    tmp___1 = get_current();
#line 1397
    tmp___2 = signal_pending(tmp___1);
#line 1397
    if (tmp___2 == 0) {
#line 1397
      schedule();
#line 1397
      goto ldv_50131;
    } else {

    }
#line 1397
    __ret = -512;
#line 1397
    goto ldv_50130;
    ldv_50131: ;
#line 1397
    goto ldv_50132;
    ldv_50130: 
#line 1397
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1397
  ret = __ret;
#line 1399
  drbd_resume_io(mdev);
#line 1400
  if ((long )retcode == 4294967285L) {
#line 1401
    retcode = 2;
  } else {

  }
#line 1402
  if (ret != 0) {
#line 1403
    retcode = ERR_INTR;
  } else {

  }
#line 1404
  reply->ret_code = (int )retcode;
#line 1405
  return (0);
}
}
#line 1408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1413
  new_conf = 0;
#line 1414
  tfm = 0;
#line 1415
  integrity_w_tfm = 0;
#line 1416
  integrity_r_tfm = 0;
#line 1417
  new_tl_hash = 0;
#line 1418
  new_ee_hash = 0;
#line 1421
  int_dig_out = 0;
#line 1422
  int_dig_in = 0;
#line 1423
  int_dig_vv = 0;
#line 1426
  drbd_reconfig_start(mdev);
#line 1428
  if ((int )mdev->state.ldv_37644.conn > 0) {
#line 1429
    retcode = ERR_NET_CONFIGURED;
#line 1430
    goto fail;
  } else {

  }
#line 1434
  tmp = kzalloc(544UL, 208U);
#line 1434
  new_conf = (struct net_conf *)tmp;
#line 1435
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1436
    retcode = ERR_NOMEM;
#line 1437
    goto fail;
  } else {

  }
#line 1440
  new_conf->timeout = 60;
#line 1441
  new_conf->try_connect_int = 10;
#line 1442
  new_conf->ping_int = 10;
#line 1443
  new_conf->max_epoch_size = 2048;
#line 1444
  new_conf->max_buffers = 2048;
#line 1445
  new_conf->unplug_watermark = 128;
#line 1446
  new_conf->sndbuf_size = 0;
#line 1447
  new_conf->rcvbuf_size = 0;
#line 1448
  new_conf->ko_count = 0;
#line 1449
  new_conf->after_sb_0p = 0;
#line 1450
  new_conf->after_sb_1p = 0;
#line 1451
  new_conf->after_sb_2p = 0;
#line 1452
  new_conf->want_lose = 0U;
#line 1453
  new_conf->two_primaries = 0U;
#line 1454
  new_conf->wire_protocol = 3;
#line 1455
  new_conf->ping_timeo = 5;
#line 1456
  new_conf->rr_conflict = 0;
#line 1457
  new_conf->on_congestion = 0;
#line 1458
  new_conf->cong_extents = 127;
#line 1460
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1460
  if (tmp___0 == 0) {
#line 1461
    retcode = ERR_MANDATORY_TAG;
#line 1462
    goto fail;
  } else {

  }
#line 1465
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1467
    retcode = ERR_NOT_PROTO_C;
#line 1468
    goto fail;
  } else {

  }
#line 1471
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1471
  if (tmp___1 != 0) {
#line 1472
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1473
    put_ldev(mdev);
#line 1474
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1475
      retcode = ERR_STONITH_AND_PROT_A;
#line 1476
      goto fail;
    } else {

    }
  } else {

  }
#line 1480
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1481
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1482
    goto fail;
  } else {

  }
#line 1485
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1486
    retcode = ERR_DISCARD;
#line 1487
    goto fail;
  } else {

  }
#line 1490
  retcode = NO_ERROR;
#line 1492
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1493
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1494
  i = 0;
#line 1494
  goto ldv_50160;
  ldv_50159: 
#line 1495
  odev = minor_to_mdev((unsigned int )i);
#line 1496
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1497
    goto ldv_50158;
  } else {

  }
#line 1498
  tmp___4 = get_net_conf(odev);
#line 1498
  if (tmp___4 != 0) {
#line 1499
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1500
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1500
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1500
      if (tmp___2 == 0) {
#line 1502
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1504
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1505
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1505
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1505
      if (tmp___3 == 0) {
#line 1507
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1509
    put_net_conf(odev);
#line 1510
    if ((unsigned int )retcode != 101U) {
#line 1511
      goto fail;
    } else {

    }
  } else {

  }
  ldv_50158: 
#line 1494
  i = i + 1;
  ldv_50160: ;
#line 1494
  if ((unsigned int )i < minor_count) {
#line 1495
    goto ldv_50159;
  } else {

  }

#line 1515
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1516
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1518
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1519
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1519
    if (tmp___5 != 0L) {
#line 1520
      tfm = 0;
#line 1521
      retcode = ERR_AUTH_ALG;
#line 1522
      goto fail;
    } else {

    }
#line 1525
    tmp___6 = crypto_hash_tfm(tfm);
#line 1525
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1525
    if (tmp___7 == 0) {
#line 1526
      retcode = ERR_AUTH_ALG_ND;
#line 1527
      goto fail;
    } else {

    }
  } else {

  }
#line 1531
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1532
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1533
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1533
    if (tmp___8 != 0L) {
#line 1534
      integrity_w_tfm = 0;
#line 1535
      retcode = ERR_INTEGRITY_ALG;
#line 1536
      goto fail;
    } else {

    }
#line 1539
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1539
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1539
    if (tmp___10 == 0) {
#line 1540
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1541
      goto fail;
    } else {

    }
#line 1544
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1545
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1545
    if (tmp___11 != 0L) {
#line 1546
      integrity_r_tfm = 0;
#line 1547
      retcode = ERR_INTEGRITY_ALG;
#line 1548
      goto fail;
    } else {

    }
  } else {

  }
#line 1552
  ns = new_conf->max_epoch_size / 8;
#line 1553
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1554
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1554
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1555
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1556
      retcode = ERR_NOMEM;
#line 1557
      goto fail;
    } else {

    }
  } else {

  }
#line 1561
  ns = new_conf->max_buffers / 8;
#line 1562
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1563
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1563
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1564
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1565
      retcode = ERR_NOMEM;
#line 1566
      goto fail;
    } else {

    }
  } else {

  }
#line 1570
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1572
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1573
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1573
    i = (int )tmp___14;
#line 1574
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1575
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1576
      retcode = ERR_NOMEM;
#line 1577
      goto fail;
    } else {

    }
#line 1579
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1580
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1581
      retcode = ERR_NOMEM;
#line 1582
      goto fail;
    } else {

    }
#line 1584
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1585
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1586
      retcode = ERR_NOMEM;
#line 1587
      goto fail;
    } else {

    }
  } else {

  }
#line 1591
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1592
    tmp___15 = drbd_bm_init(mdev);
#line 1592
    if (tmp___15 != 0) {
#line 1593
      retcode = ERR_NOMEM;
#line 1594
      goto fail;
    } else {

    }
  } else {

  }
#line 1598
  drbd_flush_workqueue(mdev);
#line 1599
  spin_lock_irq(& mdev->req_lock);
#line 1600
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1601
    retcode = ERR_NET_CONFIGURED;
#line 1602
    spin_unlock_irq(& mdev->req_lock);
#line 1603
    goto fail;
  } else {

  }
#line 1605
  mdev->net_conf = new_conf;
#line 1607
  mdev->send_cnt = 0U;
#line 1608
  mdev->recv_cnt = 0U;
#line 1610
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1611
    kfree((void const   *)mdev->tl_hash);
#line 1612
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1613
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1616
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1617
    kfree((void const   *)mdev->ee_hash);
#line 1618
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1619
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1622
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1623
  mdev->cram_hmac_tfm = tfm;
#line 1625
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1626
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1628
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1629
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1631
  kfree((void const   *)mdev->int_dig_out);
#line 1632
  kfree((void const   *)mdev->int_dig_in);
#line 1633
  kfree((void const   *)mdev->int_dig_vv);
#line 1634
  mdev->int_dig_out = int_dig_out;
#line 1635
  mdev->int_dig_in = int_dig_in;
#line 1636
  mdev->int_dig_vv = int_dig_vv;
#line 1637
  __ns.i = mdev->state.i;
#line 1637
  __ns.ldv_37644.conn = 2U;
#line 1637
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1637
  retcode = (enum drbd_ret_code )tmp___16;
#line 1638
  spin_unlock_irq(& mdev->req_lock);
#line 1640
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1641
  reply->ret_code = (int )retcode;
#line 1642
  drbd_reconfig_done(mdev);
#line 1643
  return (0);
  fail: 
#line 1646
  kfree((void const   *)int_dig_out);
#line 1647
  kfree((void const   *)int_dig_in);
#line 1648
  kfree((void const   *)int_dig_vv);
#line 1649
  crypto_free_hash(tfm);
#line 1650
  crypto_free_hash(integrity_w_tfm);
#line 1651
  crypto_free_hash(integrity_r_tfm);
#line 1652
  kfree((void const   *)new_tl_hash);
#line 1653
  kfree((void const   *)new_ee_hash);
#line 1654
  kfree((void const   *)new_conf);
#line 1656
  reply->ret_code = (int )retcode;
#line 1657
  drbd_reconfig_done(mdev);
#line 1658
  return (0);
}
}
#line 1661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1667
  memset((void *)(& dc), 0, 4UL);
#line 1668
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1668
  if (tmp == 0) {
#line 1669
    retcode = 126;
#line 1670
    goto fail;
  } else {

  }
#line 1673
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1674
    spin_lock_irq(& mdev->req_lock);
#line 1675
    if ((int )mdev->state.ldv_37644.conn > 7) {
#line 1676
      __ns.i = mdev->state.i;
#line 1676
      __ns.ldv_37644.conn = 1U;
#line 1676
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1677
    spin_unlock_irq(& mdev->req_lock);
#line 1678
    goto done;
  } else {

  }
#line 1681
  val.i = 0U;
#line 1681
  val.ldv_37644.conn = 1U;
#line 1681
  mask.i = 0U;
#line 1681
  mask.ldv_37644.conn = 31U;
#line 1681
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1681
  retcode = (int )tmp___0;
#line 1683
  if (retcode == 2) {
#line 1684
    goto done;
  } else
#line 1685
  if (retcode == -9) {
#line 1686
    goto done;
  } else
#line 1687
  if (retcode == -7) {
#line 1690
    val___0.i = 0U;
#line 1690
    val___0.ldv_37644.conn = 1U;
#line 1690
    val___0.ldv_37644.pdsk = 5U;
#line 1689
    mask___0.i = 0U;
#line 1689
    mask___0.ldv_37644.conn = 31U;
#line 1690
    mask___0.ldv_37644.pdsk = 15U;
#line 1690
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1691
  if (retcode == -10) {
#line 1694
    val___1.i = 0U;
#line 1694
    val___1.ldv_37644.conn = 1U;
#line 1694
    val___1.ldv_37644.disk = 5U;
#line 1693
    mask___1.i = 0U;
#line 1693
    mask___1.ldv_37644.conn = 31U;
#line 1694
    mask___1.ldv_37644.disk = 15U;
#line 1694
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1694
    retcode = (int )tmp___1;
#line 1696
    if (retcode == -11 || retcode == -16) {
#line 1697
      val___2.i = 0U;
#line 1697
      val___2.ldv_37644.conn = 1U;
#line 1697
      mask___2.i = 0U;
#line 1697
      mask___2.ldv_37644.conn = 31U;
#line 1697
      drbd_force_state(mdev, mask___2, val___2);
#line 1698
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1702
  if (retcode <= 0) {
#line 1703
    goto fail;
  } else {

  }
#line 1705
  __ret = 0;
#line 1705
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1705
    tmp___2 = get_current();
#line 1705
    __wait.flags = 0U;
#line 1705
    __wait.private = (void *)tmp___2;
#line 1705
    __wait.func = & autoremove_wake_function;
#line 1705
    __wait.task_list.next = & __wait.task_list;
#line 1705
    __wait.task_list.prev = & __wait.task_list;
    ldv_50195: 
#line 1705
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1705
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1705
      goto ldv_50193;
    } else {

    }
#line 1705
    tmp___3 = get_current();
#line 1705
    tmp___4 = signal_pending(tmp___3);
#line 1705
    if (tmp___4 == 0) {
#line 1705
      schedule();
#line 1705
      goto ldv_50194;
    } else {

    }
#line 1705
    __ret = -512;
#line 1705
    goto ldv_50193;
    ldv_50194: ;
#line 1705
    goto ldv_50195;
    ldv_50193: 
#line 1705
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1705
  if (__ret != 0) {
#line 1709
    retcode = 129;
#line 1710
    goto fail;
  } else {

  }
  done: 
#line 1714
  retcode = 101;
  fail: 
#line 1716
  drbd_md_sync(mdev);
#line 1717
  reply->ret_code = retcode;
#line 1718
  return (0);
}
}
#line 1721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1725
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1726
  if ((int )mdev->state.ldv_37644.role != (int )mdev->state.ldv_37644.peer) {
#line 1727
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1729
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1731
  if (iass != 0) {
#line 1732
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1734
    val.i = 0U;
#line 1734
    val.ldv_37644.conn = 15U;
#line 1734
    mask.i = 0U;
#line 1734
    mask.ldv_37644.conn = 31U;
#line 1734
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1736
  return;
}
}
#line 1737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1741
  retcode = 101;
#line 1745
  memset((void *)(& rs), 0, 16UL);
#line 1746
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1746
  if (tmp == 0) {
#line 1747
    retcode = 126;
#line 1748
    goto fail;
  } else {

  }
#line 1751
  if ((int )mdev->state.ldv_37644.conn > 10) {
#line 1752
    retcode = 130;
#line 1753
    goto fail;
  } else {

  }
#line 1756
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1758
    retcode = 131;
#line 1759
    goto fail;
  } else {

  }
#line 1762
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1762
  if (tmp___0 == 0) {
#line 1763
    retcode = 138;
#line 1764
    goto fail;
  } else {

  }
#line 1767
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1768
    retcode = 153;
#line 1769
    goto fail;
  } else {

  }
#line 1772
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1772
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1773
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1775
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1776
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1777
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1778
  drbd_md_sync(mdev);
#line 1779
  put_ldev(mdev);
#line 1780
  if ((int )dd == -1) {
#line 1781
    retcode = 140;
#line 1782
    goto fail;
  } else {

  }
#line 1785
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1786
    if ((int )dd == 2) {
#line 1787
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1789
    drbd_send_uuids(mdev);
#line 1790
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1794
  reply->ret_code = retcode;
#line 1795
  return (0);
}
}
#line 1798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1801
  retcode = 101;
#line 1805
  verify_tfm = 0;
#line 1806
  csums_tfm = 0;
#line 1809
  rs_plan_s = 0;
#line 1812
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1812
  if (tmp) {
#line 1812
    tmp___0 = 0;
  } else {
#line 1812
    tmp___0 = 1;
  }
#line 1812
  if (tmp___0) {
#line 1813
    retcode = 122;
#line 1814
    goto fail;
  } else {

  }
#line 1817
  if ((nlp->flags & 2) != 0) {
#line 1818
    memset((void *)(& sc), 0, 212UL);
#line 1819
    sc.rate = 250;
#line 1820
    sc.after = -1;
#line 1821
    sc.al_extents = 127;
#line 1822
    sc.on_no_data = 0;
#line 1823
    sc.c_plan_ahead = 0;
#line 1824
    sc.c_delay_target = 10;
#line 1825
    sc.c_fill_target = 0;
#line 1826
    sc.c_max_rate = 102400;
#line 1827
    sc.c_min_rate = 4096;
  } else {
#line 1829
    __len = 212UL;
#line 1829
    if (__len > 63UL) {
#line 1829
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1829
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1831
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1831
  if (tmp___1 == 0) {
#line 1832
    retcode = 126;
#line 1833
    goto fail;
  } else {

  }
#line 1837
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1842
  if (rsr != 0) {
#line 1842
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1842
    if (tmp___2 != 0) {
#line 1843
      retcode = 148;
#line 1844
      goto fail;
    } else {

    }
  } else {

  }
#line 1847
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1848
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1849
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1849
    if (tmp___3 != 0L) {
#line 1850
      csums_tfm = 0;
#line 1851
      retcode = 144;
#line 1852
      goto fail;
    } else {

    }
#line 1855
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1855
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1855
    if (tmp___5 == 0) {
#line 1856
      retcode = 145;
#line 1857
      goto fail;
    } else {

    }
  } else {

  }
#line 1862
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1864
  if (ovr != 0) {
#line 1865
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1865
    if (tmp___6 != 0) {
#line 1866
      retcode = 149;
#line 1867
      goto fail;
    } else {

    }
  } else {

  }
#line 1871
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1872
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1873
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1873
    if (tmp___7 != 0L) {
#line 1874
      verify_tfm = 0;
#line 1875
      retcode = 146;
#line 1876
      goto fail;
    } else {

    }
#line 1879
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1879
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1879
    if (tmp___9 == 0) {
#line 1880
      retcode = 147;
#line 1881
      goto fail;
    } else {

    }
  } else {

  }
#line 1886
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1887
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1889
    if (err != 0) {
#line 1890
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1891
      retcode = 143;
#line 1892
      goto fail;
    } else {

    }
  } else {

  }
#line 1896
  _b = sc.rate <= 0;
#line 1896
  if (_b != 0) {
#line 1896
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1896);
  } else {

  }
#line 1896
  if (_b != 0) {
#line 1896
    sc.rate = 1;
  } else {

  }
#line 1897
  _b___0 = sc.al_extents <= 6;
#line 1897
  if (_b___0 != 0) {
#line 1897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1897);
  } else {

  }
#line 1897
  if (_b___0 != 0) {
#line 1897
    sc.al_extents = 127;
  } else {

  }
#line 1899
  if (sc.al_extents > 3843) {
#line 1900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1901
    sc.al_extents = 3843;
  } else {

  }
#line 1908
  if (sc.after >= 0) {
#line 1909
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1914
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1915
  if (retcode != 101) {
#line 1916
    goto fail;
  } else {

  }
#line 1918
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1919
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1920
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1920
    rs_plan_s = (int *)tmp___10;
#line 1921
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1922
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1923
      retcode = 122;
#line 1924
      goto fail;
    } else {

    }
  } else {

  }
#line 1930
  spin_lock(& mdev->peer_seq_lock);
#line 1931
  mdev->sync_conf = sc;
#line 1933
  if (rsr == 0) {
#line 1934
    crypto_free_hash(mdev->csums_tfm);
#line 1935
    mdev->csums_tfm = csums_tfm;
#line 1936
    csums_tfm = 0;
  } else {

  }
#line 1939
  if (ovr == 0) {
#line 1940
    crypto_free_hash(mdev->verify_tfm);
#line 1941
    mdev->verify_tfm = verify_tfm;
#line 1942
    verify_tfm = 0;
  } else {

  }
#line 1945
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1946
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1947
    mdev->rs_plan_s.values = rs_plan_s;
#line 1948
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1949
    mdev->rs_planed = 0;
#line 1950
    rs_plan_s = 0;
  } else {

  }
#line 1953
  spin_unlock(& mdev->peer_seq_lock);
#line 1955
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1955
  if (tmp___14 != 0) {
#line 1956
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1956
    if (tmp___11 != 0) {
#line 1956
      goto ldv_50239;
    } else {

    }
#line 1956
    tmp___12 = get_current();
#line 1956
    __wait.flags = 0U;
#line 1956
    __wait.private = (void *)tmp___12;
#line 1956
    __wait.func = & autoremove_wake_function;
#line 1956
    __wait.task_list.next = & __wait.task_list;
#line 1956
    __wait.task_list.prev = & __wait.task_list;
    ldv_50242: 
#line 1956
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1956
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1956
    if (tmp___13 != 0) {
#line 1956
      goto ldv_50241;
    } else {

    }
#line 1956
    schedule();
#line 1956
    goto ldv_50242;
    ldv_50241: 
#line 1956
    finish_wait(& mdev->al_wait, & __wait);
    ldv_50239: 
#line 1957
    drbd_al_shrink(mdev);
#line 1958
    err = drbd_check_al_size(mdev);
#line 1959
    lc_unlock(mdev->act_log);
#line 1960
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1962
    put_ldev(mdev);
#line 1963
    drbd_md_sync(mdev);
#line 1965
    if (err != 0) {
#line 1966
      retcode = 122;
#line 1967
      goto fail;
    } else {

    }
  } else {

  }
#line 1971
  if ((int )mdev->state.ldv_37644.conn > 9) {
#line 1972
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1974
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1974
  if (tmp___15) {
#line 1974
    tmp___16 = 0;
  } else {
#line 1974
    tmp___16 = 1;
  }
#line 1974
  if (tmp___16) {
#line 1975
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1976
    drbd_calc_cpu_mask(mdev);
#line 1977
    mdev->receiver.reset_cpu_mask = 1;
#line 1978
    mdev->asender.reset_cpu_mask = 1;
#line 1979
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1982
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1984
  kfree((void const   *)rs_plan_s);
#line 1985
  free_cpumask_var(new_cpu_mask);
#line 1986
  crypto_free_hash(csums_tfm);
#line 1987
  crypto_free_hash(verify_tfm);
#line 1988
  reply->ret_code = retcode;
#line 1989
  return (0);
}
}
#line 1992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1999
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1999
  if (tmp == 0) {
#line 1999
    goto ldv_50249;
  } else {

  }
#line 1999
  tmp___0 = get_current();
#line 1999
  __wait.flags = 0U;
#line 1999
  __wait.private = (void *)tmp___0;
#line 1999
  __wait.func = & autoremove_wake_function;
#line 1999
  __wait.task_list.next = & __wait.task_list;
#line 1999
  __wait.task_list.prev = & __wait.task_list;
  ldv_50252: 
#line 1999
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1999
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1999
  if (tmp___1 == 0) {
#line 1999
    goto ldv_50251;
  } else {

  }
#line 1999
  schedule();
#line 1999
  goto ldv_50252;
  ldv_50251: 
#line 1999
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50249: 
#line 2001
  val.i = 0U;
#line 2001
  val.ldv_37644.conn = 12U;
#line 2001
  mask.i = 0U;
#line 2001
  mask.ldv_37644.conn = 31U;
#line 2001
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2001
  retcode = (int )tmp___2;
#line 2003
  if (retcode <= 0 && retcode != -15) {
#line 2004
    val___0.i = 0U;
#line 2004
    val___0.ldv_37644.conn = 12U;
#line 2004
    mask___0.i = 0U;
#line 2004
    mask___0.ldv_37644.conn = 31U;
#line 2004
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2006
  goto ldv_50269;
  ldv_50268: 
#line 2007
  spin_lock_irq(& mdev->req_lock);
#line 2008
  if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 2009
    __ns.i = mdev->state.i;
#line 2009
    __ns.ldv_37644.disk = 4U;
#line 2009
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2009
    retcode = (int )tmp___3;
  } else {

  }
#line 2010
  spin_unlock_irq(& mdev->req_lock);
#line 2012
  if (retcode != -15) {
#line 2013
    goto ldv_50263;
  } else {

  }
#line 2015
  val___1.i = 0U;
#line 2015
  val___1.ldv_37644.conn = 12U;
#line 2015
  mask___1.i = 0U;
#line 2015
  mask___1.ldv_37644.conn = 31U;
#line 2015
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_50269: ;
#line 2006
  if (retcode == -15) {
#line 2007
    goto ldv_50268;
  } else {

  }
  ldv_50263: 
#line 2018
  reply->ret_code = retcode;
#line 2019
  return (0);
}
}
#line 2022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2026
  rv = drbd_bmio_set_n_write(mdev);
#line 2027
  drbd_suspend_al(mdev);
#line 2028
  return (rv);
}
}
#line 2031 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2038
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2038
  if (tmp == 0) {
#line 2038
    goto ldv_50280;
  } else {

  }
#line 2038
  tmp___0 = get_current();
#line 2038
  __wait.flags = 0U;
#line 2038
  __wait.private = (void *)tmp___0;
#line 2038
  __wait.func = & autoremove_wake_function;
#line 2038
  __wait.task_list.next = & __wait.task_list;
#line 2038
  __wait.task_list.prev = & __wait.task_list;
  ldv_50283: 
#line 2038
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2038
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2038
  if (tmp___1 == 0) {
#line 2038
    goto ldv_50282;
  } else {

  }
#line 2038
  schedule();
#line 2038
  goto ldv_50283;
  ldv_50282: 
#line 2038
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50280: 
#line 2040
  val.i = 0U;
#line 2040
  val.ldv_37644.conn = 11U;
#line 2040
  mask.i = 0U;
#line 2040
  mask.ldv_37644.conn = 31U;
#line 2040
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2040
  retcode = (int )tmp___2;
#line 2042
  if (retcode <= 0) {
#line 2043
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2046
      val___0.i = 0U;
#line 2046
      val___0.ldv_37644.pdsk = 4U;
#line 2046
      mask___0.i = 0U;
#line 2046
      mask___0.ldv_37644.pdsk = 15U;
#line 2046
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2047
      if (retcode > 0) {
#line 2048
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_DONT_CLEAR);
#line 2048
        if (tmp___3 != 0) {
#line 2051
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2054
      val___1.i = 0U;
#line 2054
      val___1.ldv_37644.conn = 11U;
#line 2054
      mask___1.i = 0U;
#line 2054
      mask___1.ldv_37644.conn = 31U;
#line 2054
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2057
  reply->ret_code = retcode;
#line 2058
  return (0);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2064
  retcode = 101;
#line 2066
  val.i = 0U;
#line 2066
  val.ldv_37644.user_isp = 1U;
#line 2066
  mask.i = 0U;
#line 2066
  mask.ldv_37644.user_isp = 1U;
#line 2066
  tmp = drbd_request_state(mdev, mask, val);
#line 2066
  if (tmp == 2) {
#line 2067
    retcode = 134;
  } else {

  }
#line 2069
  reply->ret_code = retcode;
#line 2070
  return (0);
}
}
#line 2073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2076
  retcode = 101;
#line 2079
  val.i = 0U;
#line 2079
  val.ldv_37644.user_isp = 0U;
#line 2079
  mask.i = 0U;
#line 2079
  mask.ldv_37644.user_isp = 1U;
#line 2079
  tmp = drbd_request_state(mdev, mask, val);
#line 2079
  if (tmp == 2) {
#line 2080
    s = mdev->state;
#line 2081
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2082
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2085
      retcode = 135;
    }
  } else {

  }
#line 2089
  reply->ret_code = retcode;
#line 2090
  return (0);
}
}
#line 2093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2096
  val.i = 0U;
#line 2096
  val.ldv_37644.susp = 1U;
#line 2096
  mask.i = 0U;
#line 2096
  mask.ldv_37644.susp = 1U;
#line 2096
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2098
  return (0);
}
}
#line 2101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2104
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2104
  if (tmp != 0) {
#line 2105
    drbd_uuid_new_current(mdev);
#line 2106
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2108
  drbd_suspend_io(mdev);
#line 2109
  val.i = 0U;
#line 2109
  val.ldv_37644.susp = 0U;
#line 2109
  val.ldv_37644.susp_nod = 0U;
#line 2109
  val.ldv_37644.susp_fen = 0U;
#line 2109
  mask.i = 0U;
#line 2109
  mask.ldv_37644.susp = 1U;
#line 2109
  mask.ldv_37644.susp_nod = 1U;
#line 2109
  mask.ldv_37644.susp_fen = 1U;
#line 2109
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2110
  if (reply->ret_code == 1) {
#line 2111
    if ((int )mdev->state.ldv_37644.conn <= 9) {
#line 2112
      tl_clear(mdev);
    } else {

    }
#line 2113
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2114
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2116
  drbd_resume_io(mdev);
#line 2118
  return (0);
}
}
#line 2121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2124
  val.i = 0U;
#line 2124
  val.ldv_37644.disk = 5U;
#line 2124
  mask.i = 0U;
#line 2124
  mask.ldv_37644.disk = 15U;
#line 2124
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2125
  return (0);
}
}
#line 2128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2133
  tl = (unsigned short *)(& reply->tag_list);
#line 2135
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2135
  if (tmp != 0) {
#line 2136
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2137
    put_ldev(mdev);
  } else {

  }
#line 2140
  tmp___0 = get_net_conf(mdev);
#line 2140
  if (tmp___0 != 0) {
#line 2141
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2142
    put_net_conf(mdev);
  } else {

  }
#line 2144
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2146
  tmp___1 = tl;
#line 2146
  tl = tl + 1;
#line 2146
  __gu_p = (void *)tmp___1;
#line 2146
  switch (2UL) {
  case 1UL: 
#line 2146
  *((u8 *)__gu_p) = 0U;
#line 2146
  goto ldv_50352;
  case 2UL: 
#line 2146
  put_unaligned_le16(0, __gu_p);
#line 2146
  goto ldv_50352;
  case 4UL: 
#line 2146
  put_unaligned_le32(0U, __gu_p);
#line 2146
  goto ldv_50352;
  case 8UL: 
#line 2146
  put_unaligned_le64(0ULL, __gu_p);
#line 2146
  goto ldv_50352;
  default: 
#line 2146
  __bad_unaligned_access_size();
#line 2146
  goto ldv_50352;
  }
  ldv_50352: ;
#line 2148
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2154
  tl = (unsigned short *)(& reply->tag_list);
#line 2155
  s = mdev->state;
#line 2159
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2162
  if ((int )s.ldv_37644.conn > 15 && (int )s.ldv_37644.conn <= 21) {
#line 2163
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2163
    if (tmp != 0) {
#line 2164
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2165
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2166
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2169
  tmp___0 = tl;
#line 2169
  tl = tl + 1;
#line 2169
  __gu_p = (void *)tmp___0;
#line 2169
  switch (2UL) {
  case 1UL: 
#line 2169
  *((u8 *)__gu_p) = 0U;
#line 2169
  goto ldv_50368;
  case 2UL: 
#line 2169
  put_unaligned_le16(0, __gu_p);
#line 2169
  goto ldv_50368;
  case 4UL: 
#line 2169
  put_unaligned_le32(0U, __gu_p);
#line 2169
  goto ldv_50368;
  case 8UL: 
#line 2169
  put_unaligned_le64(0ULL, __gu_p);
#line 2169
  goto ldv_50368;
  default: 
#line 2169
  __bad_unaligned_access_size();
#line 2169
  goto ldv_50368;
  }
  ldv_50368: ;
#line 2171
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2179
  tl = (unsigned short *)(& reply->tag_list);
#line 2181
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2181
  if (tmp != 0) {
#line 2182
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2183
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2184
    put_ldev(mdev);
  } else {

  }
#line 2186
  tmp___0 = tl;
#line 2186
  tl = tl + 1;
#line 2186
  __gu_p = (void *)tmp___0;
#line 2186
  switch (2UL) {
  case 1UL: 
#line 2186
  *((u8 *)__gu_p) = 0U;
#line 2186
  goto ldv_50381;
  case 2UL: 
#line 2186
  put_unaligned_le16(0, __gu_p);
#line 2186
  goto ldv_50381;
  case 4UL: 
#line 2186
  put_unaligned_le32(0U, __gu_p);
#line 2186
  goto ldv_50381;
  case 8UL: 
#line 2186
  put_unaligned_le64(0ULL, __gu_p);
#line 2186
  goto ldv_50381;
  default: 
#line 2186
  __bad_unaligned_access_size();
#line 2186
  goto ldv_50381;
  }
  ldv_50381: ;
#line 2188
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2203
  tl = (unsigned short *)(& reply->tag_list);
#line 2205
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2205
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2205
    rv = tmp != 0;
  } else {
#line 2205
    rv = 2;
  }
#line 2208
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2209
  tmp___0 = tl;
#line 2209
  tl = tl + 1;
#line 2209
  __gu_p = (void *)tmp___0;
#line 2209
  switch (2UL) {
  case 1UL: 
#line 2209
  *((u8 *)__gu_p) = 0U;
#line 2209
  goto ldv_50395;
  case 2UL: 
#line 2209
  put_unaligned_le16(0, __gu_p);
#line 2209
  goto ldv_50395;
  case 4UL: 
#line 2209
  put_unaligned_le32(0U, __gu_p);
#line 2209
  goto ldv_50395;
  case 8UL: 
#line 2209
  put_unaligned_le64(0ULL, __gu_p);
#line 2209
  goto ldv_50395;
  default: 
#line 2209
  __bad_unaligned_access_size();
#line 2209
  goto ldv_50395;
  }
  ldv_50395: ;
#line 2211
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2218
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2221
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2221
  if (tmp == 0) {
#line 2222
    reply->ret_code = 126;
#line 2223
    return (0);
  } else {

  }
#line 2228
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2228
  if (tmp___0 == 0) {
#line 2228
    goto ldv_50406;
  } else {

  }
#line 2228
  tmp___1 = get_current();
#line 2228
  __wait.flags = 0U;
#line 2228
  __wait.private = (void *)tmp___1;
#line 2228
  __wait.func = & autoremove_wake_function;
#line 2228
  __wait.task_list.next = & __wait.task_list;
#line 2228
  __wait.task_list.prev = & __wait.task_list;
  ldv_50409: 
#line 2228
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2228
  tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2228
  if (tmp___2 == 0) {
#line 2228
    goto ldv_50408;
  } else {

  }
#line 2228
  schedule();
#line 2228
  goto ldv_50409;
  ldv_50408: 
#line 2228
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50406: 
#line 2231
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2232
  val.i = 0U;
#line 2232
  val.ldv_37644.conn = 18U;
#line 2232
  mask.i = 0U;
#line 2232
  mask.ldv_37644.conn = 31U;
#line 2232
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2233
  return (0);
}
}
#line 2237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2240
  retcode = 101;
#line 2241
  skip_initial_sync = 0;
#line 2246
  memset((void *)(& args), 0, 4UL);
#line 2247
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2247
  if (tmp == 0) {
#line 2248
    reply->ret_code = 126;
#line 2249
    return (0);
  } else {

  }
#line 2252
  ldv_mutex_lock_187(& mdev->state_mutex);
#line 2254
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2254
  if (tmp___0 == 0) {
#line 2255
    retcode = 138;
#line 2256
    goto out;
  } else {

  }
#line 2260
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2262
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2263
    skip_initial_sync = 1;
  } else
#line 2264
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2265
    retcode = 151;
#line 2266
    goto out_dec;
  } else {

  }
#line 2269
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2270
  drbd_uuid_new_current(mdev);
#line 2272
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2273
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2275
    if (err != 0) {
#line 2276
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2277
      retcode = 118;
    } else {

    }
#line 2279
    if (skip_initial_sync != 0) {
#line 2280
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2281
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2282
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2283
      spin_lock_irq(& mdev->req_lock);
#line 2284
      __ns.i = mdev->state.i;
#line 2284
      __ns.ldv_37644.disk = 8U;
#line 2284
      __ns.ldv_37644.pdsk = 8U;
#line 2284
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2286
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2290
  drbd_md_sync(mdev);
  out_dec: 
#line 2292
  put_ldev(mdev);
  out: 
#line 2294
  ldv_mutex_unlock_188(& mdev->state_mutex);
#line 2296
  reply->ret_code = retcode;
#line 2297
  return (0);
}
}
#line 2307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2307
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1312}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  struct task_struct *tmp___0 ;
  void *tmp___1 ;

  {
#line 2340
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2346
  reply_size = 34;
#line 2350
  tmp = try_module_get___1(& __this_module);
#line 2350
  if (tmp == 0) {
#line 2351
    printk("<3>drbd: try_module_get() failed!\n");
#line 2352
    return;
  } else {

  }
#line 2355
  tmp___0 = get_current();
#line 2355
  if (((tmp___0->cred)->cap_effective.cap[0] & 2097152U) == 0U) {
#line 2356
    retcode = 152;
#line 2357
    goto fail;
  } else {

  }
#line 2360
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2362
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2363
    retcode = 127;
#line 2364
    goto fail;
  } else {

  }
#line 2367
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2369
    retcode = 137;
#line 2370
    goto fail;
  } else {

  }
#line 2373
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2376
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2377
    retcode = 137;
#line 2378
    goto fail;
  } else {

  }
#line 2381
  reply_size = cm->reply_body_size + reply_size;
#line 2384
  tmp___1 = kzalloc((size_t )reply_size, 208U);
#line 2384
  cn_reply = (struct cn_msg *)tmp___1;
#line 2385
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2386
    retcode = 122;
#line 2387
    goto fail;
  } else {

  }
#line 2389
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2391
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2393
  reply->minor = nlp->drbd_minor;
#line 2394
  reply->ret_code = 101;
#line 2397
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2399
  cn_reply->id = req->id;
#line 2400
  cn_reply->seq = req->seq;
#line 2401
  cn_reply->ack = req->ack + 1U;
#line 2402
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2403
  cn_reply->flags = 0U;
#line 2405
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2406
  if (rr != 0 && rr != -3) {
#line 2407
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2409
  kfree((void const   *)cn_reply);
#line 2410
  module_put(& __this_module);
#line 2411
  return;
  fail: 
#line 2413
  drbd_nl_send_reply(req, retcode);
#line 2414
  module_put(& __this_module);
#line 2415
  return;
}
}
#line 2417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2423
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2424
  len = (int )len < (int )l ? len : l;
#line 2425
  tmp = tl;
#line 2425
  tl = tl + 1;
#line 2425
  __gu_p = (void *)tmp;
#line 2425
  switch (2UL) {
  case 1UL: 
#line 2425
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2425
  goto ldv_50458;
  case 2UL: 
#line 2425
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2425
  goto ldv_50458;
  case 4UL: 
#line 2425
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2425
  goto ldv_50458;
  case 8UL: 
#line 2425
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2425
  goto ldv_50458;
  default: 
#line 2425
  __bad_unaligned_access_size();
#line 2425
  goto ldv_50458;
  }
  ldv_50458: 
#line 2426
  tmp___0 = tl;
#line 2426
  tl = tl + 1;
#line 2426
  __gu_p___0 = (void *)tmp___0;
#line 2426
  switch (2UL) {
  case 1UL: 
#line 2426
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2426
  goto ldv_50465;
  case 2UL: 
#line 2426
  put_unaligned_le16((int )len, __gu_p___0);
#line 2426
  goto ldv_50465;
  case 4UL: 
#line 2426
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2426
  goto ldv_50465;
  case 8UL: 
#line 2426
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2426
  goto ldv_50465;
  default: 
#line 2426
  __bad_unaligned_access_size();
#line 2426
  goto ldv_50465;
  }
  ldv_50465: 
#line 2427
  __len = (size_t )len;
#line 2427
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2428
  tl = tl + (unsigned long )len;
#line 2429
  if (nul_terminated != 0) {
#line 2430
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2431
  return (tl);
}
}
#line 2435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2437
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2437
  return (tmp);
}
}
#line 2441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2443
  tmp = strlen(str);
#line 2443
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2443
  return (tmp___0);
}
}
#line 2447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2449
  tmp = tl;
#line 2449
  tl = tl + 1;
#line 2449
  __gu_p = (void *)tmp;
#line 2449
  switch (2UL) {
  case 1UL: 
#line 2449
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2449
  goto ldv_50491;
  case 2UL: 
#line 2449
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2449
  goto ldv_50491;
  case 4UL: 
#line 2449
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2449
  goto ldv_50491;
  case 8UL: 
#line 2449
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2449
  goto ldv_50491;
  default: 
#line 2449
  __bad_unaligned_access_size();
#line 2449
  goto ldv_50491;
  }
  ldv_50491: ;
#line 2450
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2452
  tmp___0 = tl;
#line 2452
  tl = tl + 1;
#line 2452
  __gu_p___0 = (void *)tmp___0;
#line 2452
  switch (2UL) {
  case 1UL: 
#line 2452
  *((u8 *)__gu_p___0) = 4U;
#line 2452
  goto ldv_50499;
  case 2UL: 
#line 2452
  put_unaligned_le16(4, __gu_p___0);
#line 2452
  goto ldv_50499;
  case 4UL: 
#line 2452
  put_unaligned_le32(4U, __gu_p___0);
#line 2452
  goto ldv_50499;
  case 8UL: 
#line 2452
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2452
  goto ldv_50499;
  default: 
#line 2452
  __bad_unaligned_access_size();
#line 2452
  goto ldv_50499;
  }
  ldv_50499: 
#line 2453
  __gu_p___1 = (void *)tl;
#line 2453
  switch (4UL) {
  case 1UL: 
#line 2453
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2453
  goto ldv_50506;
  case 2UL: 
#line 2453
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2453
  goto ldv_50506;
  case 4UL: 
#line 2453
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2453
  goto ldv_50506;
  case 8UL: 
#line 2453
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2453
  goto ldv_50506;
  default: 
#line 2453
  __bad_unaligned_access_size();
#line 2453
  goto ldv_50506;
  }
  ldv_50506: 
#line 2454
  tl = tl + 4U;
#line 2455
  goto ldv_50511;
  case 16384U: 
#line 2457
  tmp___1 = tl;
#line 2457
  tl = tl + 1;
#line 2457
  __gu_p___2 = (void *)tmp___1;
#line 2457
  switch (2UL) {
  case 1UL: 
#line 2457
  *((u8 *)__gu_p___2) = 8U;
#line 2457
  goto ldv_50515;
  case 2UL: 
#line 2457
  put_unaligned_le16(8, __gu_p___2);
#line 2457
  goto ldv_50515;
  case 4UL: 
#line 2457
  put_unaligned_le32(8U, __gu_p___2);
#line 2457
  goto ldv_50515;
  case 8UL: 
#line 2457
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2457
  goto ldv_50515;
  default: 
#line 2457
  __bad_unaligned_access_size();
#line 2457
  goto ldv_50515;
  }
  ldv_50515: 
#line 2458
  __gu_p___3 = (void *)tl;
#line 2458
  switch (8UL) {
  case 1UL: 
#line 2458
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2458
  goto ldv_50522;
  case 2UL: 
#line 2458
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2458
  goto ldv_50522;
  case 4UL: 
#line 2458
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2458
  goto ldv_50522;
  case 8UL: 
#line 2458
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2458
  goto ldv_50522;
  default: 
#line 2458
  __bad_unaligned_access_size();
#line 2458
  goto ldv_50522;
  }
  ldv_50522: 
#line 2459
  tl = tl + 8U;
#line 2460
  goto ldv_50511;
  default: ;
  }
  ldv_50511: ;
#line 2465
  return (tl);
}
}
#line 2468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2474
  cn_reply = (struct cn_msg *)(& buffer);
#line 2475
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2477
  tl = (unsigned short *)(& reply->tag_list);
#line 2481
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2483
  tmp = tl;
#line 2483
  tl = tl + 1;
#line 2483
  __gu_p = (void *)tmp;
#line 2483
  switch (2UL) {
  case 1UL: 
#line 2483
  *((u8 *)__gu_p) = 0U;
#line 2483
  goto ldv_50538;
  case 2UL: 
#line 2483
  put_unaligned_le16(0, __gu_p);
#line 2483
  goto ldv_50538;
  case 4UL: 
#line 2483
  put_unaligned_le32(0U, __gu_p);
#line 2483
  goto ldv_50538;
  case 8UL: 
#line 2483
  put_unaligned_le64(0ULL, __gu_p);
#line 2483
  goto ldv_50538;
  default: 
#line 2483
  __bad_unaligned_access_size();
#line 2483
  goto ldv_50538;
  }
  ldv_50538: 
#line 2485
  cn_reply->id.idx = 8U;
#line 2486
  cn_reply->id.val = 1U;
#line 2488
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2488
  cn_reply->seq = (__u32 )tmp___0;
#line 2489
  cn_reply->ack = 0U;
#line 2490
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2492
  cn_reply->flags = 0U;
#line 2494
  reply->packet_type = 17;
#line 2495
  reply->minor = mdev_to_minor(mdev);
#line 2496
  reply->ret_code = 101;
#line 2498
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2499
  return;
}
}
#line 2501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2507
  cn_reply = (struct cn_msg *)(& buffer);
#line 2508
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2510
  tl = (unsigned short *)(& reply->tag_list);
#line 2514
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2515
  tmp = tl;
#line 2515
  tl = tl + 1;
#line 2515
  __gu_p = (void *)tmp;
#line 2515
  switch (2UL) {
  case 1UL: 
#line 2515
  *((u8 *)__gu_p) = 0U;
#line 2515
  goto ldv_50553;
  case 2UL: 
#line 2515
  put_unaligned_le16(0, __gu_p);
#line 2515
  goto ldv_50553;
  case 4UL: 
#line 2515
  put_unaligned_le32(0U, __gu_p);
#line 2515
  goto ldv_50553;
  case 8UL: 
#line 2515
  put_unaligned_le64(0ULL, __gu_p);
#line 2515
  goto ldv_50553;
  default: 
#line 2515
  __bad_unaligned_access_size();
#line 2515
  goto ldv_50553;
  }
  ldv_50553: 
#line 2517
  cn_reply->id.idx = 8U;
#line 2518
  cn_reply->id.val = 1U;
#line 2520
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2520
  cn_reply->seq = (__u32 )tmp___0;
#line 2521
  cn_reply->ack = 0U;
#line 2522
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2524
  cn_reply->flags = 0U;
#line 2526
  reply->packet_type = 20;
#line 2527
  reply->minor = mdev_to_minor(mdev);
#line 2528
  reply->ret_code = 101;
#line 2530
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2531
  return;
}
}
#line 2533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2544
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2545
    return;
  } else {

  }
#line 2546
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2547
    return;
  } else {

  }
#line 2555
  tmp = kzalloc(33026UL, 16U);
#line 2555
  cn_reply = (struct cn_msg *)tmp;
#line 2562
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2565
    return;
  } else {

  }
#line 2568
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2569
  tl = (unsigned short *)(& reply->tag_list);
#line 2571
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2572
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2573
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2574
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2575
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_45843.block_id));
#line 2578
  __min1 = e->size;
#line 2578
  __min2 = 32768U;
#line 2578
  len = __min1 < __min2 ? __min1 : __min2;
#line 2579
  tmp___0 = tl;
#line 2579
  tl = tl + 1;
#line 2579
  __gu_p = (void *)tmp___0;
#line 2579
  switch (2UL) {
  case 1UL: 
#line 2579
  *((u8 *)__gu_p) = 50U;
#line 2579
  goto ldv_50576;
  case 2UL: 
#line 2579
  put_unaligned_le16(49202, __gu_p);
#line 2579
  goto ldv_50576;
  case 4UL: 
#line 2579
  put_unaligned_le32(49202U, __gu_p);
#line 2579
  goto ldv_50576;
  case 8UL: 
#line 2579
  put_unaligned_le64(49202ULL, __gu_p);
#line 2579
  goto ldv_50576;
  default: 
#line 2579
  __bad_unaligned_access_size();
#line 2579
  goto ldv_50576;
  }
  ldv_50576: 
#line 2580
  tmp___1 = tl;
#line 2580
  tl = tl + 1;
#line 2580
  __gu_p___0 = (void *)tmp___1;
#line 2580
  switch (2UL) {
  case 1UL: 
#line 2580
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2580
  goto ldv_50583;
  case 2UL: 
#line 2580
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2580
  goto ldv_50583;
  case 4UL: 
#line 2580
  put_unaligned_le32(len, __gu_p___0);
#line 2580
  goto ldv_50583;
  case 8UL: 
#line 2580
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2580
  goto ldv_50583;
  default: 
#line 2580
  __bad_unaligned_access_size();
#line 2580
  goto ldv_50583;
  }
  ldv_50583: 
#line 2582
  page = e->pages;
#line 2583
  goto ldv_50599;
  ldv_50598: 
#line 2584
  tmp___2 = __kmap_atomic___0(page);
#line 2584
  d = tmp___2;
#line 2585
  __min1___0 = len;
#line 2585
  __min2___0 = 4096U;
#line 2585
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2586
  __len = (size_t )l;
#line 2586
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2587
  __kunmap_atomic___0(d);
#line 2588
  tl = tl + (unsigned long )l;
#line 2589
  len = len - l;
#line 2590
  if (len == 0U) {
#line 2591
    goto ldv_50597;
  } else {

  }
#line 2583
  page = page_chain_next(page);
  ldv_50599: ;
#line 2583
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2583
    tmp___3 = page_chain_next(page);
#line 2583
    __builtin_prefetch((void const   *)tmp___3);
#line 2583
    if (1 != 0) {
#line 2584
      goto ldv_50598;
    } else {
#line 2586
      goto ldv_50597;
    }
  } else {

  }
  ldv_50597: 
#line 2593
  tmp___4 = tl;
#line 2593
  tl = tl + 1;
#line 2593
  __gu_p___1 = (void *)tmp___4;
#line 2593
  switch (2UL) {
  case 1UL: 
#line 2593
  *((u8 *)__gu_p___1) = 0U;
#line 2593
  goto ldv_50602;
  case 2UL: 
#line 2593
  put_unaligned_le16(0, __gu_p___1);
#line 2593
  goto ldv_50602;
  case 4UL: 
#line 2593
  put_unaligned_le32(0U, __gu_p___1);
#line 2593
  goto ldv_50602;
  case 8UL: 
#line 2593
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2593
  goto ldv_50602;
  default: 
#line 2593
  __bad_unaligned_access_size();
#line 2593
  goto ldv_50602;
  }
  ldv_50602: 
#line 2595
  cn_reply->id.idx = 8U;
#line 2596
  cn_reply->id.val = 1U;
#line 2598
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2598
  cn_reply->seq = (__u32 )tmp___5;
#line 2599
  cn_reply->ack = 0U;
#line 2600
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2602
  cn_reply->flags = 0U;
#line 2604
  reply->packet_type = 24;
#line 2605
  reply->minor = mdev_to_minor(mdev);
#line 2606
  reply->ret_code = 101;
#line 2608
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2609
  kfree((void const   *)cn_reply);
#line 2610
  return;
}
}
#line 2612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2618
  cn_reply = (struct cn_msg *)(& buffer);
#line 2619
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2621
  tl = (unsigned short *)(& reply->tag_list);
#line 2626
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2626
  if (tmp == 0) {
#line 2627
    return;
  } else {

  }
#line 2628
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2629
  put_ldev(mdev);
#line 2631
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2632
  tmp___0 = tl;
#line 2632
  tl = tl + 1;
#line 2632
  __gu_p = (void *)tmp___0;
#line 2632
  switch (2UL) {
  case 1UL: 
#line 2632
  *((u8 *)__gu_p) = 0U;
#line 2632
  goto ldv_50618;
  case 2UL: 
#line 2632
  put_unaligned_le16(0, __gu_p);
#line 2632
  goto ldv_50618;
  case 4UL: 
#line 2632
  put_unaligned_le32(0U, __gu_p);
#line 2632
  goto ldv_50618;
  case 8UL: 
#line 2632
  put_unaligned_le64(0ULL, __gu_p);
#line 2632
  goto ldv_50618;
  default: 
#line 2632
  __bad_unaligned_access_size();
#line 2632
  goto ldv_50618;
  }
  ldv_50618: 
#line 2634
  cn_reply->id.idx = 8U;
#line 2635
  cn_reply->id.val = 1U;
#line 2637
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2637
  cn_reply->seq = (__u32 )tmp___1;
#line 2638
  cn_reply->ack = 0U;
#line 2639
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2641
  cn_reply->flags = 0U;
#line 2643
  reply->packet_type = 23;
#line 2644
  reply->minor = mdev_to_minor(mdev);
#line 2645
  reply->ret_code = 101;
#line 2647
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2648
  return;
}
}
#line 2650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2653
  try = 10;
#line 2655
  cn_id_drbd.val = 1U;
  ldv_50630: 
#line 2657
  cn_id_drbd.idx = cn_idx;
#line 2658
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2659
  if (err == 0) {
#line 2660
    goto ldv_50629;
  } else {

  }
#line 2661
  cn_idx = cn_idx + 6977U;
#line 2662
  tmp = try;
#line 2662
  try = try - 1;
#line 2662
  if (tmp != 0) {
#line 2663
    goto ldv_50630;
  } else {

  }
  ldv_50629: ;
#line 2664
  if (err != 0) {
#line 2665
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2666
    return (err);
  } else {

  }
#line 2669
  return (0);
}
}
#line 2672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2676
  cn_id_drbd.idx = cn_idx;
#line 2677
  cn_id_drbd.val = 1U;
#line 2679
  cn_del_callback(& cn_id_drbd);
#line 2680
  return;
}
}
#line 2682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2685
  cn_reply = (struct cn_msg *)(& buffer);
#line 2686
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2690
  memset((void *)(& buffer), 0, 32UL);
#line 2691
  cn_reply->id = req->id;
#line 2693
  cn_reply->seq = req->seq;
#line 2694
  cn_reply->ack = req->ack + 1U;
#line 2695
  cn_reply->len = 12U;
#line 2696
  cn_reply->flags = 0U;
#line 2698
  reply->packet_type = 27;
#line 2699
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2700
  reply->ret_code = ret_code;
#line 2702
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2703
  if (rr != 0 && rr != -3) {
#line 2704
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2705
  return;
}
}
#line 2707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_179(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2712
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2714
  mutex_lock(ldv_func_arg1);
#line 2715
  return;
}
}
#line 2717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_180(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2722
  tmp = mutex_trylock(ldv_func_arg1);
#line 2722
  ldv_func_res = tmp;
#line 2724
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2724
  return (tmp___0);
#line 2726
  return (ldv_func_res);
}
}
#line 2729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2734
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2736
  mutex_unlock(ldv_func_arg1);
#line 2737
  return;
}
}
#line 2739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_182(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2744
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2746
  mutex_lock(ldv_func_arg1);
#line 2747
  return;
}
}
#line 2749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2754
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2756
  mutex_unlock(ldv_func_arg1);
#line 2757
  return;
}
}
#line 2759 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_184(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2764
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2766
  mutex_unlock(ldv_func_arg1);
#line 2767
  return;
}
}
#line 2769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_185(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2774
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2776
  mutex_lock(ldv_func_arg1);
#line 2777
  return;
}
}
#line 2779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_186(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2784
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2786
  mutex_unlock(ldv_func_arg1);
#line 2787
  return;
}
}
#line 2789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2794
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2796
  mutex_lock(ldv_func_arg1);
#line 2797
  return;
}
}
#line 2799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2804
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2806
  mutex_unlock(ldv_func_arg1);
#line 2807
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_drbd_main_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_drbd_main_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_drbd_main_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_drbd_main_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_drbd_main_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_drbd_main_mutex = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_drbd_main_mutex = 1;
#line 929
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
