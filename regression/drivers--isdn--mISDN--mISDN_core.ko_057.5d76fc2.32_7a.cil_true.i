/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 91 "include/linux/types.h"
typedef unsigned char u_char;
#line 93 "include/linux/types.h"
typedef unsigned int u_int;
#line 94 "include/linux/types.h"
typedef unsigned long u_long;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 154 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 178 "include/linux/types.h"
typedef __u16 __be16;
#line 180 "include/linux/types.h"
typedef __u32 __be32;
#line 185 "include/linux/types.h"
typedef __u32 __wsum;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 202 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 240 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 41 "include/linux/dynamic_debug.h"
struct device;
#line 46
struct net_device;
#line 53 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 70 "include/asm-generic/bug.h"
struct completion;
#line 71
struct pt_regs;
#line 329 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2013_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2013_8 ldv_2013 ;
};
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2020_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2020_10 ldv_2020 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2135_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2150_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2151_11 {
   struct __anonstruct_ldv_2135_12 ldv_2135 ;
   struct __anonstruct_ldv_2150_13 ldv_2150 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2151_11 ldv_2151 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2783_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2783_18 ldv_2783 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 636 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct jump_label_key;
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5164_23 {
   u64 rip ;
   u64 rdp ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5170_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5171_22 {
   struct __anonstruct_ldv_5164_23 ldv_5164 ;
   struct __anonstruct_ldv_5170_24 ldv_5170 ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5180_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5171_22 ldv_5171 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5180_25 ldv_5180 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 423
struct kmem_cache;
#line 424
struct perf_event;
#line 425 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 552 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6005_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6006_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6005_29 ldv_6005 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6006_28 ldv_6006 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 36 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
struct timespec;
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 646 "include/linux/mmzone.h"
struct rw_semaphore;
#line 647 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 769 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mpspec.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 429 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 432 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 437
struct pm_qos_constraints;
#line 437 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 493 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 74 "include/asm-generic/iomap.h"
struct vm_area_struct;
#line 164 "include/linux/slab.h"
struct sock;
#line 165
struct kobject;
#line 166
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 172 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 117
struct sysfs_dirent;
#line 182 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 109 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 117 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 124 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 141 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 123 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[24U] ;
};
#line 52 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 73 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 815 "include/linux/rcupdate.h"
struct nsproxy;
#line 816
struct ctl_table_root;
#line 817 "include/linux/rcupdate.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 947 "include/linux/sysctl.h"
struct ctl_table_header;
#line 965 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 985 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1035 "include/linux/sysctl.h"
struct __anonstruct_ldv_13011_129 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1035 "include/linux/sysctl.h"
union __anonunion_ldv_13013_128 {
   struct __anonstruct_ldv_13011_129 ldv_13011 ;
   struct rcu_head rcu ;
};
#line 1035 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_13013_128 ldv_13013 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 36 "include/linux/kmod.h"
struct cred;
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 444
struct kernel_param;
#line 445 "include/linux/elf.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13410_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_13410_134 ldv_13410 ;
};
#line 64 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 70 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 429 "include/linux/moduleparam.h"
struct jump_label_key {
   atomic_t enabled ;
};
#line 99 "include/linux/jump_label.h"
struct tracepoint;
#line 100 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct jump_label_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 36 "include/linux/module.h"
struct module_param_attrs;
#line 36 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 71
struct exception_table_entry;
#line 200
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 206 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 354
struct module_sect_attrs;
#line 354
struct module_notes_attrs;
#line 354
struct ftrace_event_call;
#line 354 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 255 "include/linux/mISDNif.h"
struct sockaddr_mISDN {
   sa_family_t family ;
   unsigned char dev ;
   unsigned char channel ;
   unsigned char sapi ;
   unsigned char tei ;
};
#line 393
struct prio_tree_node;
#line 393 "include/linux/mISDNif.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 180
struct address_space;
#line 181 "include/linux/rbtree.h"
union __anonunion_ldv_14415_136 {
   unsigned long index ;
   void *freelist ;
};
#line 181 "include/linux/rbtree.h"
struct __anonstruct_ldv_14425_140 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 181 "include/linux/rbtree.h"
union __anonunion_ldv_14426_139 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14425_140 ldv_14425 ;
};
#line 181 "include/linux/rbtree.h"
struct __anonstruct_ldv_14428_138 {
   union __anonunion_ldv_14426_139 ldv_14426 ;
   atomic_t _count ;
};
#line 181 "include/linux/rbtree.h"
union __anonunion_ldv_14429_137 {
   unsigned long counters ;
   struct __anonstruct_ldv_14428_138 ldv_14428 ;
};
#line 181 "include/linux/rbtree.h"
struct __anonstruct_ldv_14430_135 {
   union __anonunion_ldv_14415_136 ldv_14415 ;
   union __anonunion_ldv_14429_137 ldv_14429 ;
};
#line 181 "include/linux/rbtree.h"
struct __anonstruct_ldv_14437_142 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 181 "include/linux/rbtree.h"
union __anonunion_ldv_14438_141 {
   struct list_head lru ;
   struct __anonstruct_ldv_14437_142 ldv_14437 ;
};
#line 181 "include/linux/rbtree.h"
union __anonunion_ldv_14443_143 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 181 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_14430_135 ldv_14430 ;
   union __anonunion_ldv_14438_141 ldv_14438 ;
   union __anonunion_ldv_14443_143 ldv_14443 ;
};
#line 180 "include/linux/mm_types.h"
struct __anonstruct_vm_set_145 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 180 "include/linux/mm_types.h"
union __anonunion_shared_144 {
   struct __anonstruct_vm_set_145 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 180
struct anon_vma;
#line 180
struct vm_operations_struct;
#line 180
struct mempolicy;
#line 180 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_144 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 243 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 249 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 262 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 275
struct linux_binfmt;
#line 275
struct mmu_notifier_mm;
#line 275 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   atomic_t oom_disable_count ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_14386 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_14386 socket_state;
#line 174 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 175
struct pipe_inode_info;
#line 176
struct inode;
#line 177
struct net;
#line 194
struct fasync_struct;
#line 194 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 127 "include/linux/net.h"
struct proto_ops;
#line 127 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 153
struct kiocb;
#line 154 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 159
struct of_device_id;
#line 159 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 224 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 254
struct class_attribute;
#line 254 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 311
struct device_type;
#line 350 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 403 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 430 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 491 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 500
struct dma_coherent_mem;
#line 500 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 612 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 921
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 928
struct scatterlist;
#line 35 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 876 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   long nr ;
};
#line 42
struct file_ra_state;
#line 43
struct user_struct;
#line 44
struct writeback_control;
#line 176 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 193 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 184 "include/linux/dma-mapping.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 108 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 118 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 302 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 303
struct sec_path;
#line 303 "include/linux/skbuff.h"
struct __anonstruct_ldv_19816_149 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 303 "include/linux/skbuff.h"
union __anonunion_ldv_19817_148 {
   __wsum csum ;
   struct __anonstruct_ldv_19816_149 ldv_19816 ;
};
#line 303 "include/linux/skbuff.h"
union __anonunion_ldv_19848_150 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 303 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19817_148 ldv_19817 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19848_150 ldv_19848 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 498
struct dst_entry;
#line 533
struct rtable;
#line 336 "include/linux/irq.h"
struct proc_dir_entry;
#line 338
struct irqaction;
#line 210 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 210 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_152 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_152 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_153 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_153 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_154 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_154 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_155 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_155 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_156 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_156 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_157 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_157 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_158 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_158 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 145 "include/linux/if.h"
union __anonunion_ifs_ifsu_159 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 145 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_159 ifs_ifsu ;
};
#line 163 "include/linux/if.h"
union __anonunion_ifr_ifrn_160 {
   char ifrn_name[16U] ;
};
#line 163 "include/linux/if.h"
union __anonunion_ifr_ifru_161 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 163 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_160 ifr_ifrn ;
   union __anonunion_ifr_ifru_161 ifr_ifru ;
};
#line 227 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 308 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 392 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 254
struct file_operations;
#line 61 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
};
#line 34 "include/linux/pm_qos.h"
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 40 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 152
struct block_device;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 100 "include/linux/dcache.h"
struct dentry_operations;
#line 100
struct super_block;
#line 100 "include/linux/dcache.h"
union __anonunion_d_u_166 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 100 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_166 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 151 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 424 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 59 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 59 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 261
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 268
struct pid_namespace;
#line 268 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct kstatfs;
#line 428 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 340 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 386 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 578 "include/linux/fs.h"
union __anonunion_arg_168 {
   char *buf ;
   void *data ;
};
#line 578 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_167 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_168 arg ;
   int error ;
};
#line 578 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_167 read_descriptor_t;
#line 581 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 632
struct backing_dev_info;
#line 633 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 654
struct hd_struct;
#line 654
struct gendisk;
#line 654 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 725
struct posix_acl;
#line 726
struct inode_operations;
#line 726 "include/linux/fs.h"
union __anonunion_ldv_23993_169 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 726
struct file_lock;
#line 726
struct cdev;
#line 726 "include/linux/fs.h"
union __anonunion_ldv_24009_170 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 726 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   uid_t i_uid ;
   gid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   unsigned int i_nlink ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_23993_169 ldv_23993 ;
   atomic_t i_count ;
   u64 i_version ;
   unsigned short i_bytes ;
   atomic_t i_dio_count ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_24009_170 ldv_24009 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   atomic_t i_writecount ;
   void *i_private ;
};
#line 919 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 927 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 950 "include/linux/fs.h"
union __anonunion_f_u_171 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 950 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_171 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1088
struct files_struct;
#line 1088 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1089 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1094 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_release_private)(struct file_lock * ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 165 "include/linux/nfs.h"
struct nlm_lockowner;
#line 166 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_173 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_172 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_173 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_172 fl_u ;
};
#line 1197 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1389
struct file_system_type;
#line 1389
struct super_operations;
#line 1389
struct xattr_handler;
#line 1389
struct mtd_info;
#line 1389 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
};
#line 1527 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1566 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1601 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1645 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_devname)(struct seq_file * , struct vfsmount * ) ;
   int (*show_path)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1834 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_174 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_174 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_176 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_177 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_178 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_179 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_180 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_181 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_175 {
   int _pad[28U] ;
   struct __anonstruct__kill_176 _kill ;
   struct __anonstruct__timer_177 _timer ;
   struct __anonstruct__rt_178 _rt ;
   struct __anonstruct__sigchld_179 _sigchld ;
   struct __anonstruct__sigfault_180 _sigfault ;
   struct __anonstruct__sigpoll_181 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_175 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   raw_spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_184 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_184 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26602_185 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_186 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_187 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26602_185 ldv_26602 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_186 type_data ;
   union __anonunion_payload_187 payload ;
};
#line 310
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 264
struct llist_node;
#line 65 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 186
struct futex_pi_state;
#line 187
struct robust_list_head;
#line 188
struct bio_list;
#line 189
struct fs_struct;
#line 190
struct perf_event_context;
#line 191
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 383
struct kioctx;
#line 384 "include/linux/sched.h"
union __anonunion_ki_obj_188 {
   void *user ;
   struct task_struct *tsk ;
};
#line 384
struct eventfd_ctx;
#line 384 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_188 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 404 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 447 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 455 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 462 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 479 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 515
struct autogroup;
#line 516
struct tty_struct;
#line 516
struct taskstats;
#line 516
struct tty_audit_buf;
#line 516 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore threadgroup_fork_lock ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 683 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 728
struct reclaim_state;
#line 729 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 744 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1037
struct io_context;
#line 1060
struct rq;
#line 1061 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1127 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1132 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1167 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1193
struct rt_rq;
#line 1193 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1217
struct mem_cgroup;
#line 1217 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1565
struct css_set;
#line 1565
struct compat_robust_list_head;
#line 1565 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
};
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 205 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 209 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 553 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 61 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 87 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 102 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 110 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 119 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 217 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 239 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 267 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 318 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 340 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 361 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 394 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 410 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 430 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 441 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 472 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 539 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 555 "include/linux/ethtool.h"
union __anonunion_h_u_195 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 555 "include/linux/ethtool.h"
union __anonunion_m_u_196 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 555 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_195 h_u ;
   union __anonunion_m_u_196 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 592 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 608 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 616 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 731
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 766 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
};
#line 973
struct prot_inuse;
#line 974 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[82U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics[1U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[1U] ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   unsigned int sysctl_ping_group_range[2U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 70 "include/net/netns/ipv4.h"
struct neighbour;
#line 70 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*default_mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 67 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 376 "include/linux/netfilter.h"
struct ebt_table;
#line 377 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 105 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 29 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 101
struct vlan_group;
#line 102
struct netpoll_info;
#line 103
struct phy_device;
#line 104
struct wireless_dev;
#line 105
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 111 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 205
struct neigh_parms;
#line 233 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 238 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 267 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 366
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 414 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 415 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 522
struct Qdisc;
#line 522 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
};
#line 564 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 576 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 588 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 640 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 650 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 663 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 674 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 685 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   u32 (*ndo_fix_features)(struct net_device * , u32  ) ;
   int (*ndo_set_features)(struct net_device * , u32  ) ;
};
#line 965
struct iw_handler_def;
#line 965
struct iw_public_data;
#line 965
struct in_device;
#line 965
struct dn_dev;
#line 965
struct inet6_dev;
#line 965
struct cpu_rmap;
#line 965
struct pcpu_lstats;
#line 965
struct pcpu_tstats;
#line 965
struct pcpu_dstats;
#line 965 "include/linux/netdevice.h"
union __anonunion_ldv_32428_204 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 965
struct garp_port;
#line 965
struct rtnl_link_ops;
#line 965 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   u32 features ;
   u32 hw_features ;
   u32 wanted_features ;
   u32 vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_group *vlgrp ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_32428_204 ldv_32428 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct phy_device *phydev ;
   int group ;
};
#line 327 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   unsigned long vma_pages ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 62 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 80 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
};
#line 108 "include/linux/msg.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 84 "include/linux/security.h"
struct xfrm_policy;
#line 85
struct xfrm_state;
#line 110 "include/linux/uaccess.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 816 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 130
struct neigh_table;
#line 130 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 118 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd ;
   struct rcu_head rcu ;
};
#line 147 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32  ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 402
struct dn_route;
#line 402 "include/net/neighbour.h"
union __anonunion_ldv_37208_212 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 402 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *_neighbour ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int flags ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37208_212 ldv_37208 ;
};
#line 102 "include/net/sock.h"
struct __anonstruct_socket_lock_t_213 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 102 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_213 socket_lock_t;
#line 102
struct proto;
#line 103 "include/net/sock.h"
union __anonunion_ldv_37431_214 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 103 "include/net/sock.h"
union __anonunion_ldv_37439_215 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 103 "include/net/sock.h"
union __anonunion_ldv_37446_216 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 103 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37431_214 ldv_37431 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37439_215 ldv_37439 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37446_216 ldv_37446 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 169 "include/net/sock.h"
struct __anonstruct_sk_backlog_217 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 169 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_217 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 727
struct request_sock_ops;
#line 728
struct timewait_sock_ops;
#line 729
struct inet_hashinfo;
#line 730
struct raw_hashinfo;
#line 731
struct udp_table;
#line 731 "include/net/sock.h"
union __anonunion_h_218 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 731 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_218 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 1860
struct mISDNchannel;
#line 1861
struct mISDNdevice;
#line 1862
struct mISDNstack;
#line 1864 "include/net/sock.h"
struct channel_req {
   u_int protocol ;
   struct sockaddr_mISDN adr ;
   struct mISDNchannel *ch ;
};
#line 443 "include/linux/mISDNif.h"
typedef int ctrl_func_t(struct mISDNchannel * , u_int  , void * );
#line 444 "include/linux/mISDNif.h"
typedef int send_func_t(struct mISDNchannel * , struct sk_buff * );
#line 445 "include/linux/mISDNif.h"
typedef int create_func_t(struct channel_req * );
#line 446 "include/linux/mISDNif.h"
struct Bprotocol {
   struct list_head list ;
   char *name ;
   u_int Bprotocols ;
   create_func_t *create ;
};
#line 453 "include/linux/mISDNif.h"
struct mISDNchannel {
   struct list_head list ;
   u_int protocol ;
   u_int nr ;
   u_long opt ;
   u_int addr ;
   struct mISDNstack *st ;
   struct mISDNchannel *peer ;
   send_func_t *send ;
   send_func_t *recv ;
   ctrl_func_t *ctrl ;
};
#line 466 "include/linux/mISDNif.h"
struct mISDN_sock_list {
   struct hlist_head head ;
   rwlock_t lock ;
};
#line 478 "include/linux/mISDNif.h"
struct mISDNdevice {
   struct mISDNchannel D ;
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int nrbchan ;
   u_char channelmap[16U] ;
   struct list_head bchannels ;
   struct mISDNchannel *teimgr ;
   struct device dev ;
};
#line 492 "include/linux/mISDNif.h"
struct mISDNstack {
   u_long status ;
   struct mISDNdevice *dev ;
   struct task_struct *thread ;
   struct completion *notify ;
   wait_queue_head_t workq ;
   struct sk_buff_head msgq ;
   struct list_head layer2 ;
   struct mISDNchannel *layer1 ;
   struct mISDNchannel own ;
   struct mutex lmutex ;
   struct mISDN_sock_list l1sock ;
};
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
typedef int ldv_func_ret_type___0;
#line 653 "include/linux/module.h"
struct FsmInst;
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
typedef void (*FSMFNPTR)(struct FsmInst * , int  , void * );
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct Fsm {
   FSMFNPTR (**jumpmatrix)(struct FsmInst * , int  , void * ) ;
   int state_count ;
   int event_count ;
   char **strEvent ;
   char **strState ;
};
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmInst {
   struct Fsm *fsm ;
   int state ;
   int debug ;
   void *userdata ;
   int userint ;
   void (*printdebug)(struct FsmInst * , char *  , ...) ;
};
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmNode {
   int state ;
   int event ;
   void (*routine)(struct FsmInst * , int  , void * ) ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct FsmTimer {
   struct FsmInst *fi ;
   struct timer_list tl ;
   int event ;
   void *arg ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_suseconds_t;
#line 341 "include/linux/socket.h"
struct mISDNhead {
   unsigned int prim ;
   unsigned int id ;
};
#line 285 "include/linux/mISDNif.h"
struct mISDNversion {
   unsigned char major ;
   unsigned char minor ;
   unsigned short release ;
};
#line 291 "include/linux/mISDNif.h"
struct mISDN_devinfo {
   u_int id ;
   u_int Dprotocols ;
   u_int Bprotocols ;
   u_int protocol ;
   u_char channelmap[16U] ;
   u_int nrbchan ;
   char name[20U] ;
};
#line 301 "include/linux/mISDNif.h"
struct mISDN_devrename {
   u_int id ;
   char name[20U] ;
};
#line 357 "include/linux/mISDNif.h"
struct mISDN_ctrl_req {
   int op ;
   int channel ;
   int p1 ;
   int p2 ;
};
#line 18 "include/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 209 "include/linux/net.h"
struct net_proto_family {
   int family ;
   int (*create)(struct net * , struct socket * , int  , int  ) ;
   struct module *owner ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 520 "include/net/sock.h"
enum sock_flags {
    SOCK_DEAD = 0,
    SOCK_DONE = 1,
    SOCK_URGINLINE = 2,
    SOCK_KEEPOPEN = 3,
    SOCK_LINGER = 4,
    SOCK_DESTROY = 5,
    SOCK_BROADCAST = 6,
    SOCK_TIMESTAMP = 7,
    SOCK_ZAPPED = 8,
    SOCK_USE_WRITE_QUEUE = 9,
    SOCK_DBG = 10,
    SOCK_RCVTSTAMP = 11,
    SOCK_RCVTSTAMPNS = 12,
    SOCK_LOCALROUTE = 13,
    SOCK_QUEUE_SHRUNK = 14,
    SOCK_TIMESTAMPING_TX_HARDWARE = 15,
    SOCK_TIMESTAMPING_TX_SOFTWARE = 16,
    SOCK_TIMESTAMPING_RX_HARDWARE = 17,
    SOCK_TIMESTAMPING_RX_SOFTWARE = 18,
    SOCK_TIMESTAMPING_SOFTWARE = 19,
    SOCK_TIMESTAMPING_RAW_HARDWARE = 20,
    SOCK_TIMESTAMPING_SYS_HARDWARE = 21,
    SOCK_FASYNC = 22,
    SOCK_RXQ_OVFL = 23,
    SOCK_ZEROCOPY = 24
} ;
#line 471 "include/linux/mISDNif.h"
struct mISDN_sock {
   struct sock sk ;
   struct mISDNchannel ch ;
   u_int cmask ;
   struct mISDNdevice *dev ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 1863 "include/net/sock.h"
struct mISDNclock;
#line 512 "include/linux/mISDNif.h"
typedef int clockctl_func_t(void * , int  );
#line 513 "include/linux/mISDNif.h"
struct mISDNclock {
   struct list_head list ;
   char name[64U] ;
   int pri ;
   clockctl_func_t *ctl ;
   void *priv ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 588 "include/linux/mISDNif.h"
struct dchannel {
   struct mISDNdevice dev ;
   u_long Flags ;
   struct work_struct workq ;
   void (*phfunc)(struct dchannel * ) ;
   u_int state ;
   void *l1 ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff_head squeue ;
   struct sk_buff_head rqueue ;
   struct sk_buff *tx_skb ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 141 "include/linux/mISDNhw.h"
struct bchannel {
   struct mISDNchannel ch ;
   int nr ;
   u_long Flags ;
   struct work_struct workq ;
   u_int state ;
   void *hw ;
   int slot ;
   struct timer_list timer ;
   struct sk_buff *rx_skb ;
   int maxlen ;
   struct sk_buff *next_skb ;
   struct sk_buff *tx_skb ;
   struct sk_buff_head rqueue ;
   int rcount ;
   int tx_idx ;
   int debug ;
   int err_crc ;
   int err_tx ;
   int err_rx ;
};
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 624 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 624 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
struct compat_timespec;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 54
struct pollfd;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
union __anonunion_ldv_6187_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6187_31 ldv_6187 ;
};
#line 51 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.o.c"
struct __va_list_tag;
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.o.c"
typedef struct __va_list_tag __va_list_tag;
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 44 "include/linux/printk.h"
struct va_format {
   char const   *fmt ;
   va_list *va ;
};
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 448 "include/linux/module.h"
typedef unsigned int pao_T__;
#line 448 "include/linux/module.h"
typedef unsigned int pao_T_____0;
#line 448 "include/linux/module.h"
typedef unsigned int pao_T_____1;
#line 448 "include/linux/module.h"
typedef unsigned int pao_T_____2;
#line 110 "include/linux/mISDNhw.h"
typedef int dchannel_l1callback(struct dchannel * , u_int  );
#line 112
struct layer1;
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
struct layer1 {
   u_long Flags ;
   struct FsmInst l1m ;
   struct FsmTimer timer ;
   int delay ;
   struct dchannel *dch ;
   dchannel_l1callback *dcb ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
struct manager {
   struct mISDNchannel ch ;
   struct mISDNchannel bcast ;
   u_long options ;
   struct list_head layer2 ;
   rwlock_t lock ;
   struct FsmInst deact ;
   struct FsmTimer datimer ;
   struct sk_buff_head sendq ;
   struct mISDNchannel *up ;
   u_int nextid ;
   u_int lastid ;
};
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct teimgr {
   int ri ;
   int rcnt ;
   struct FsmInst tei_m ;
   struct FsmTimer timer ;
   int tval ;
   int nval ;
   struct layer2 *l2 ;
   struct manager *mgr ;
};
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct laddr {
   u_char A ;
   u_char B ;
};
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 {
   struct list_head list ;
   struct mISDNchannel ch ;
   u_long flag ;
   int id ;
   struct mISDNchannel *up ;
   signed char sapi ;
   signed char tei ;
   struct laddr addr ;
   u_int maxlen ;
   struct teimgr *tm ;
   u_int vs ;
   u_int va ;
   u_int vr ;
   int rc ;
   u_int window ;
   u_int sow ;
   struct FsmInst l2m ;
   struct FsmTimer t200 ;
   struct FsmTimer t203 ;
   int T200 ;
   int N200 ;
   int T203 ;
   u_int next_id ;
   u_int down_id ;
   struct sk_buff *windowar[8U] ;
   struct sk_buff_head i_queue ;
   struct sk_buff_head ui_queue ;
   struct sk_buff_head down_queue ;
   struct sk_buff_head tmp_queue ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 290
enum hrtimer_restart;
#line 38 "include/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 653 "include/linux/module.h"
struct miscdevice {
   int minor ;
   char const   *name ;
   struct file_operations  const  *fops ;
   struct list_head list ;
   struct device *parent ;
   struct device *this_device ;
   char const   *nodename ;
   mode_t mode ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
struct mISDNtimerdev {
   int next_id ;
   struct list_head pending ;
   struct list_head expired ;
   wait_queue_head_t wait ;
   u_int work ;
   spinlock_t lock ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
struct mISDNtimer {
   struct list_head list ;
   struct mISDNtimerdev *dev ;
   struct timer_list tl ;
   int id ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 101 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 299 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 47 "include/linux/list.h"
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 112
extern void list_del(struct list_head * ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 168 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 173
extern void mutex_unlock(struct mutex * ) ;
#line 176
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 31
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 32
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 35
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 26
extern unsigned long _raw_write_lock_irqsave(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 40
extern void _raw_write_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
#line 80 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 82
  return ((char const   *)kobj->name);
}
}
#line 215
extern int add_uevent_var(struct kobj_uevent_env * , char const   *  , ...) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 338 "include/linux/mISDNif.h"
__inline static int test_channelmap(u_int nr , u_char *map ) 
{ 


  {
#line 340
  if (nr <= 127U) {
#line 341
    return ((int )*(map + (unsigned long )(nr >> 3)) & (1 << ((int )nr & 7)));
  } else {
#line 343
    return (0);
  }
}
}
#line 319 "include/linux/device.h"
extern int __class_register(struct class * , struct lock_class_key * ) ;
#line 321
extern void class_unregister(struct class * ) ;
#line 346
extern int class_for_each_device(struct class * , struct device * , void * , int (*)(struct device * ,
                                                                                     void * ) ) ;
#line 349
extern struct device *class_find_device(struct class * , struct device * , void * ,
                                        int (*)(struct device * , void * ) ) ;
#line 616 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 619
  if ((unsigned long )dev->init_name != (unsigned long )((char const   */* const  */)0)) {
#line 620
    return ((char const   *)dev->init_name);
  } else {

  }
#line 622
  tmp = kobject_name(& dev->kobj);
#line 622
  return (tmp);
}
}
#line 625
extern int dev_set_name(struct device * , char const   *  , ...) ;
#line 706
extern void device_initialize(struct device * ) ;
#line 707
extern int device_add(struct device * ) ;
#line 708
extern void device_del(struct device * ) ;
#line 718
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 719
extern int dev_set_drvdata(struct device * , void * ) ;
#line 778
extern void put_device(struct device * ) ;
#line 568 "include/linux/mISDNif.h"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) ;
#line 570
void mISDN_unregister_device(struct mISDNdevice *dev ) ;
#line 571
int mISDN_register_Bprotocol(struct Bprotocol *bp ) ;
#line 572
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) ;
#line 577 "include/linux/mISDNif.h"
__inline static struct mISDNdevice *dev_to_mISDN(struct device *dev ) 
{ 
  void *tmp ;

  {
#line 579
  if ((unsigned long )dev != (unsigned long )((struct device *)0)) {
#line 580
    tmp = dev_get_drvdata((struct device  const  *)dev);
#line 580
    return ((struct mISDNdevice *)tmp);
  } else {
#line 582
    return (0);
  }
}
}
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
struct mISDNdevice *get_mdevice(u_int id ) ;
#line 19
int get_mdevice_count(void) ;
#line 54
int create_stack(struct mISDNdevice *dev ) ;
#line 58
void delete_stack(struct mISDNdevice *dev ) ;
#line 59
void mISDN_initstack(u_int *dp ) ;
#line 60
int misdn_sock_init(u_int *deb ) ;
#line 61
void misdn_sock_cleanup(void) ;
#line 65
u_int get_all_Bprotocols(void) ;
#line 66
struct Bprotocol *get_Bprotocol4mask(u_int m ) ;
#line 67
struct Bprotocol *get_Bprotocol4id(u_int id ) ;
#line 69
int mISDN_inittimer(u_int *deb ) ;
#line 70
void mISDN_timer_cleanup(void) ;
#line 72
int l1_init(u_int *deb ) ;
#line 73
void l1_cleanup(void) ;
#line 74
int Isdnl2_Init(u_int *deb ) ;
#line 75
void Isdnl2_cleanup(void) ;
#line 77
void mISDN_init_clock(u_int *dp ) ;
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static u_int debug  ;
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static u64 device_ids  ;
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static struct list_head Bprotocols  =    {& Bprotocols, & Bprotocols};
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static rwlock_t bp_lock  =    {{4294967296LL}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "bp_lock",
                                                                     0, 0UL}};
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_dev_release(struct device *dev ) 
{ 


  {
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_id(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int tmp___0 ;

  {
#line 75
  tmp = dev_to_mISDN(dev);
#line 75
  mdev = tmp;
#line 77
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 78
    return (-19L);
  } else {

  }
#line 79
  tmp___0 = sprintf(buf, "%d\n", mdev->id);
#line 79
  return ((ssize_t )tmp___0);
}
}
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_nrbchan(struct device *dev , struct device_attribute *attr ,
                             char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int tmp___0 ;

  {
#line 85
  tmp = dev_to_mISDN(dev);
#line 85
  mdev = tmp;
#line 87
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 88
    return (-19L);
  } else {

  }
#line 89
  tmp___0 = sprintf(buf, "%d\n", mdev->nrbchan);
#line 89
  return ((ssize_t )tmp___0);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_d_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int tmp___0 ;

  {
#line 95
  tmp = dev_to_mISDN(dev);
#line 95
  mdev = tmp;
#line 97
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 98
    return (-19L);
  } else {

  }
#line 99
  tmp___0 = sprintf(buf, "%d\n", mdev->Dprotocols);
#line 99
  return ((ssize_t )tmp___0);
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_b_protocols(struct device *dev , struct device_attribute *attr ,
                                 char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  u_int tmp___0 ;
  int tmp___1 ;

  {
#line 105
  tmp = dev_to_mISDN(dev);
#line 105
  mdev = tmp;
#line 107
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 108
    return (-19L);
  } else {

  }
#line 109
  tmp___0 = get_all_Bprotocols();
#line 109
  tmp___1 = sprintf(buf, "%d\n", mdev->Bprotocols | tmp___0);
#line 109
  return ((ssize_t )tmp___1);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_protocol(struct device *dev , struct device_attribute *attr ,
                              char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int tmp___0 ;

  {
#line 115
  tmp = dev_to_mISDN(dev);
#line 115
  mdev = tmp;
#line 117
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 118
    return (-19L);
  } else {

  }
#line 119
  tmp___0 = sprintf(buf, "%d\n", mdev->D.protocol);
#line 119
  return ((ssize_t )tmp___0);
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_name(struct device *dev , struct device_attribute *attr , char *buf ) 
{ 
  char const   *tmp ;
  size_t tmp___0 ;

  {
#line 125
  tmp = dev_name((struct device  const  *)dev);
#line 125
  strcpy(buf, tmp);
#line 126
  tmp___0 = strlen((char const   *)buf);
#line 126
  return ((ssize_t )tmp___0);
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static ssize_t _show_channelmap(struct device *dev , struct device_attribute *attr ,
                                char *buf ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  char *bp ;
  int i ;
  char *tmp___0 ;
  int tmp___1 ;

  {
#line 153
  tmp = dev_to_mISDN(dev);
#line 153
  mdev = tmp;
#line 154
  bp = buf;
#line 157
  i = 0;
#line 157
  goto ldv_38688;
  ldv_38687: 
#line 158
  tmp___0 = bp;
#line 158
  bp = bp + 1;
#line 158
  tmp___1 = test_channelmap((u_int )i, (u_char *)(& mdev->channelmap));
#line 158
  *tmp___0 = tmp___1 != 0 ? 49 : 48;
#line 157
  i = i + 1;
  ldv_38688: ;
#line 157
  if ((u_int )i <= mdev->nrbchan) {
#line 158
    goto ldv_38687;
  } else {

  }

#line 160
  return ((long )bp - (long )buf);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static struct device_attribute mISDN_dev_attrs[8U]  = {      {{"id", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                        {(char)0}, {(char)0}}}}, & _show_id, 0}, 
        {{"d_protocols", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                 {(char)0}, {(char)0}, {(char)0}}}}, & _show_d_protocols,
      0}, 
        {{"b_protocols", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                 {(char)0}, {(char)0}, {(char)0}}}}, & _show_b_protocols,
      0}, 
        {{"protocol", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                              {(char)0}, {(char)0}, {(char)0}}}}, & _show_protocol,
      0}, 
        {{"channelmap", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                {(char)0}, {(char)0}, {(char)0}}}}, & _show_channelmap,
      0}, 
        {{"nrbchan", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                             {(char)0}, {(char)0}, {(char)0}}}}, & _show_nrbchan,
      0}, 
        {{"name", 292U, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                          {(char)0}, {(char)0}}}}, & _show_name, 0}};
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static int mISDN_uevent(struct device *dev , struct kobj_uevent_env *env ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;
  int tmp___0 ;

  {
#line 178
  tmp = dev_to_mISDN(dev);
#line 178
  mdev = tmp;
#line 180
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 181
    return (0);
  } else {

  }
#line 183
  tmp___0 = add_uevent_var(env, "nchans=%d", mdev->nrbchan);
#line 183
  if (tmp___0 != 0) {
#line 184
    return (-12);
  } else {

  }
#line 186
  return (0);
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_class_release(struct class *cls ) 
{ 


  {
#line 192
  return;
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static struct class mISDN_class  = 
#line 195
     {"mISDN", & __this_module, 0, (struct device_attribute *)(& mISDN_dev_attrs), 0,
    0, & mISDN_uevent, 0, & mISDN_class_release, & mISDN_dev_release, 0, 0, 0, 0,
    0, 0};
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static int _get_mdevice(struct device *dev , void *id ) 
{ 
  struct mISDNdevice *mdev ;
  struct mISDNdevice *tmp ;

  {
#line 209
  tmp = dev_to_mISDN(dev);
#line 209
  mdev = tmp;
#line 211
  if ((unsigned long )mdev == (unsigned long )((struct mISDNdevice *)0)) {
#line 212
    return (0);
  } else {

  }
#line 213
  if (mdev->id != *((u_int *)id)) {
#line 214
    return (0);
  } else {

  }
#line 215
  return (1);
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
struct mISDNdevice *get_mdevice(u_int id ) 
{ 
  struct device *tmp ;
  struct mISDNdevice *tmp___0 ;

  {
#line 221
  tmp = class_find_device(& mISDN_class, 0, (void *)(& id), & _get_mdevice);
#line 221
  tmp___0 = dev_to_mISDN(tmp);
#line 221
  return (tmp___0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static int _get_mdevice_count(struct device *dev , void *cnt ) 
{ 


  {
#line 228
  *((int *)cnt) = *((int *)cnt) + 1;
#line 229
  return (0);
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
int get_mdevice_count(void) 
{ 
  int cnt ;

  {
#line 235
  cnt = 0;
#line 237
  class_for_each_device(& mISDN_class, 0, (void *)(& cnt), & _get_mdevice_count);
#line 238
  return (cnt);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static int get_free_devid(void) 
{ 
  u_int i ;
  int tmp ;

  {
#line 246
  i = 0U;
#line 246
  goto ldv_38722;
  ldv_38721: 
#line 247
  tmp = test_and_set_bit((int )i, (unsigned long volatile   *)(& device_ids));
#line 247
  if (tmp == 0) {
#line 248
    goto ldv_38720;
  } else {

  }
#line 246
  i = i + (u_int )1;
  ldv_38722: ;
#line 246
  if (i <= 63U) {
#line 247
    goto ldv_38721;
  } else {

  }
  ldv_38720: ;
#line 249
  if (i > 63U) {
#line 250
    return (-16);
  } else {

  }
#line 251
  return ((int )i);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
int mISDN_register_device(struct mISDNdevice *dev , struct device *parent , char *name ) 
{ 
  int err ;
  char const   *tmp ;

  {
#line 260
  err = get_free_devid();
#line 261
  if (err < 0) {
#line 262
    goto error1;
  } else {

  }
#line 263
  dev->id = (u_int )err;
#line 265
  device_initialize(& dev->dev);
#line 266
  if ((unsigned long )name != (unsigned long )((char *)0) && (int )((signed char )*name) != 0) {
#line 267
    dev_set_name(& dev->dev, "%s", name);
  } else {
#line 269
    dev_set_name(& dev->dev, "mISDN%d", dev->id);
  }
#line 270
  if ((debug & 255U) != 0U) {
#line 271
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 271
    printk("<7>mISDN_register %s %d\n", tmp, dev->id);
  } else {

  }
#line 273
  err = create_stack(dev);
#line 274
  if (err != 0) {
#line 275
    goto error1;
  } else {

  }
#line 277
  dev->dev.class = & mISDN_class;
#line 278
  dev->dev.platform_data = (void *)dev;
#line 279
  dev->dev.parent = parent;
#line 280
  dev_set_drvdata(& dev->dev, (void *)dev);
#line 282
  err = device_add(& dev->dev);
#line 283
  if (err != 0) {
#line 284
    goto error3;
  } else {

  }
#line 285
  return (0);
  error3: 
#line 288
  delete_stack(dev);
#line 289
  return (err);
  error1: ;
#line 291
  return (err);
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
void mISDN_unregister_device(struct mISDNdevice *dev ) 
{ 
  char const   *tmp ;

  {
#line 298
  if ((debug & 255U) != 0U) {
#line 299
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 299
    printk("<7>mISDN_unregister %s %d\n", tmp, dev->id);
  } else {

  }
#line 302
  device_del(& dev->dev);
#line 303
  dev_set_drvdata(& dev->dev, 0);
#line 305
  test_and_clear_bit((int )dev->id, (unsigned long volatile   *)(& device_ids));
#line 306
  delete_stack(dev);
#line 307
  put_device(& dev->dev);
#line 308
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
u_int get_all_Bprotocols(void) 
{ 
  struct Bprotocol *bp ;
  u_int m ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 315
  m = 0U;
#line 317
  _raw_read_lock(& bp_lock);
#line 318
  __mptr = (struct list_head  const  *)Bprotocols.next;
#line 318
  bp = (struct Bprotocol *)__mptr;
#line 318
  goto ldv_38758;
  ldv_38757: 
#line 319
  m = bp->Bprotocols | m;
#line 318
  __mptr___0 = (struct list_head  const  *)bp->list.next;
#line 318
  bp = (struct Bprotocol *)__mptr___0;
  ldv_38758: ;
#line 318
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
#line 319
    goto ldv_38757;
  } else {

  }
#line 320
  _raw_read_unlock(& bp_lock);
#line 321
  return (m);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
struct Bprotocol *get_Bprotocol4mask(u_int m ) 
{ 
  struct Bprotocol *bp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 329
  _raw_read_lock(& bp_lock);
#line 330
  __mptr = (struct list_head  const  *)Bprotocols.next;
#line 330
  bp = (struct Bprotocol *)__mptr;
#line 330
  goto ldv_38769;
  ldv_38768: ;
#line 331
  if ((bp->Bprotocols & m) != 0U) {
#line 332
    _raw_read_unlock(& bp_lock);
#line 333
    return (bp);
  } else {

  }
#line 330
  __mptr___0 = (struct list_head  const  *)bp->list.next;
#line 330
  bp = (struct Bprotocol *)__mptr___0;
  ldv_38769: ;
#line 330
  if ((unsigned long )(& bp->list) != (unsigned long )(& Bprotocols)) {
#line 331
    goto ldv_38768;
  } else {

  }
#line 335
  _raw_read_unlock(& bp_lock);
#line 336
  return (0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
struct Bprotocol *get_Bprotocol4id(u_int id ) 
{ 
  u_int m ;
  struct Bprotocol *tmp ;

  {
#line 344
  if (id <= 31U || id > 63U) {
#line 345
    printk("<4>%s id not in range  %d\n", "get_Bprotocol4id", id);
#line 347
    return (0);
  } else {

  }
#line 349
  m = (u_int )(1 << ((int )id & 31));
#line 350
  tmp = get_Bprotocol4mask(m);
#line 350
  return (tmp);
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
int mISDN_register_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;
  struct Bprotocol *old ;

  {
#line 359
  if ((debug & 255U) != 0U) {
#line 360
    printk("<7>%s: %s/%x\n", "mISDN_register_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 362
  old = get_Bprotocol4mask(bp->Bprotocols);
#line 363
  if ((unsigned long )old != (unsigned long )((struct Bprotocol *)0)) {
#line 364
    printk("<4>register duplicate protocol old %s/%x new %s/%x\n", old->name, old->Bprotocols,
           bp->name, bp->Bprotocols);
#line 367
    return (-16);
  } else {

  }
#line 369
  flags = _raw_write_lock_irqsave(& bp_lock);
#line 370
  list_add_tail(& bp->list, & Bprotocols);
#line 371
  _raw_write_unlock_irqrestore(& bp_lock, flags);
#line 372
  return (0);
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
void mISDN_unregister_Bprotocol(struct Bprotocol *bp ) 
{ 
  u_long flags ;

  {
#line 381
  if ((debug & 255U) != 0U) {
#line 382
    printk("<7>%s: %s/%x\n", "mISDN_unregister_Bprotocol", bp->name, bp->Bprotocols);
  } else {

  }
#line 384
  flags = _raw_write_lock_irqsave(& bp_lock);
#line 385
  list_del(& bp->list);
#line 386
  _raw_write_unlock_irqrestore(& bp_lock, flags);
#line 387
  return;
}
}
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static int mISDNInit(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  int tmp ;

  {
#line 395
  printk("<6>Modular ISDN core version %d.%d.%d\n", 1, 1, 21);
#line 397
  mISDN_init_clock(& debug);
#line 398
  mISDN_initstack(& debug);
#line 399
  tmp = __class_register(& mISDN_class, & __key);
#line 399
  err = tmp;
#line 400
  if (err != 0) {
#line 401
    goto error1;
  } else {

  }
#line 402
  err = mISDN_inittimer(& debug);
#line 403
  if (err != 0) {
#line 404
    goto error2;
  } else {

  }
#line 405
  err = l1_init(& debug);
#line 406
  if (err != 0) {
#line 407
    goto error3;
  } else {

  }
#line 408
  err = Isdnl2_Init(& debug);
#line 409
  if (err != 0) {
#line 410
    goto error4;
  } else {

  }
#line 411
  err = misdn_sock_init(& debug);
#line 412
  if (err != 0) {
#line 413
    goto error5;
  } else {

  }
#line 414
  return (0);
  error5: 
#line 417
  Isdnl2_cleanup();
  error4: 
#line 419
  l1_cleanup();
  error3: 
#line 421
  mISDN_timer_cleanup();
  error2: 
#line 423
  class_unregister(& mISDN_class);
  error1: ;
#line 425
  return (err);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
static void mISDN_cleanup(void) 
{ 


  {
#line 430
  misdn_sock_cleanup();
#line 431
  Isdnl2_cleanup();
#line 432
  l1_cleanup();
#line 433
  mISDN_timer_cleanup();
#line 434
  class_unregister(& mISDN_class);
#line 436
  printk("<7>mISDNcore unloaded\n");
#line 437
  return;
}
}
#line 459
void ldv_check_final_state(void) ;
#line 468
void ldv_initialize(void) ;
#line 471
extern void ldv_handler_precall(void) ;
#line 474
extern int nondet_int(void) ;
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
void main(void) 
{ 
  struct device *var_group1 ;
  struct kobj_uevent_env *var_group2 ;
  struct class *var_group3 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 536
  LDV_IN_INTERRUPT = 1;
#line 545
  ldv_initialize();
#line 559
  ldv_handler_precall();
#line 560
  tmp = mISDNInit();
#line 560
  if (tmp != 0) {
#line 561
    goto ldv_final;
  } else {

  }
#line 565
  goto ldv_38861;
  ldv_38860: 
#line 568
  tmp___0 = nondet_int();
#line 568
  switch (tmp___0) {
  case 0: 
#line 583
  ldv_handler_precall();
#line 584
  mISDN_uevent(var_group1, var_group2);
#line 596
  goto ldv_38856;
  case 1: 
#line 607
  ldv_handler_precall();
#line 608
  mISDN_dev_release(var_group1);
#line 623
  goto ldv_38856;
  case 2: 
#line 638
  ldv_handler_precall();
#line 639
  mISDN_class_release(var_group3);
#line 650
  goto ldv_38856;
  default: ;
#line 651
  goto ldv_38856;
  }
  ldv_38856: ;
  ldv_38861: 
#line 565
  tmp___1 = nondet_int();
#line 565
  if (tmp___1 != 0) {
#line 566
    goto ldv_38860;
  } else {

  }

#line 671
  ldv_handler_precall();
#line 672
  mISDN_cleanup();
  ldv_final: 
#line 675
  ldv_check_final_state();
#line 678
  return;
}
}
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 687
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 689
  mutex_lock(ldv_func_arg1);
#line 690
  return;
}
}
#line 692 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 697
  tmp = mutex_trylock(ldv_func_arg1);
#line 697
  ldv_func_res = tmp;
#line 699
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 699
  return (tmp___0);
#line 701
  return (ldv_func_res);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/core.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 709
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 711
  mutex_unlock(ldv_func_arg1);
#line 712
  return;
}
}
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 204 "include/linux/timer.h"
__inline static int timer_pending(struct timer_list  const  *timer ) 
{ 


  {
#line 206
  return ((unsigned long )timer->entry.next != (unsigned long )((struct list_head */* const  */)0));
}
}
#line 210
extern int del_timer(struct timer_list * ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 218 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 265 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 280
  tmp___2 = __kmalloc(size, flags);
#line 280
  return (tmp___2);
}
}
#line 338 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 340
  tmp = kmalloc(size, flags | 32768U);
#line 340
  return (tmp);
}
}
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/fsm.h"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) ;
#line 59
void mISDN_FsmFree(struct Fsm *fsm ) ;
#line 60
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) ;
#line 61
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) ;
#line 62
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) ;
#line 63
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) ;
#line 64
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) ;
#line 65
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) ;
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmNew(struct Fsm *fsm , struct FsmNode *fnlist , int fncount ) 
{ 
  int i ;
  void *tmp ;

  {
#line 66
  tmp = kzalloc(((unsigned long )fsm->state_count * (unsigned long )fsm->event_count) * 8UL,
                208U);
#line 66
  fsm->jumpmatrix = (FSMFNPTR (**)(struct FsmInst * , int  , void * ))tmp;
#line 69
  i = 0;
#line 69
  goto ldv_14192;
  ldv_14191: ;
#line 70
  if ((fnlist + (unsigned long )i)->state >= fsm->state_count || (fnlist + (unsigned long )i)->event >= fsm->event_count) {
#line 72
    printk("<3>mISDN_FsmNew Error: %d st(%ld/%ld) ev(%ld/%ld)\n", i, (long )(fnlist + (unsigned long )i)->state,
           (long )fsm->state_count, (long )(fnlist + (unsigned long )i)->event, (long )fsm->event_count);
  } else {
#line 77
    *(fsm->jumpmatrix + (unsigned long )(fsm->state_count * (fnlist + (unsigned long )i)->event + (fnlist + (unsigned long )i)->state)) = (fnlist + (unsigned long )i)->routine;
  }
#line 69
  i = i + 1;
  ldv_14192: ;
#line 69
  if (i < fncount) {
#line 70
    goto ldv_14191;
  } else {

  }

#line 74
  return;
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmFree(struct Fsm *fsm ) 
{ 


  {
#line 85
  kfree((void const   *)fsm->jumpmatrix);
#line 86
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
int mISDN_FsmEvent(struct FsmInst *fi , int event , void *arg ) 
{ 
  void (*r)(struct FsmInst * , int  , void * ) ;

  {
#line 94
  if (fi->state >= (fi->fsm)->state_count || (fi->fsm)->event_count <= event) {
#line 96
    printk("<3>mISDN_FsmEvent Error st(%ld/%ld) ev(%d/%ld)\n", (long )fi->state, (long )(fi->fsm)->state_count,
           event, (long )(fi->fsm)->event_count);
#line 100
    return (1);
  } else {

  }
#line 102
  r = *((fi->fsm)->jumpmatrix + (unsigned long )((fi->fsm)->state_count * event + fi->state));
#line 103
  if ((unsigned long )r != (unsigned long )((void (*)(struct FsmInst * , int  , void * ))0)) {
#line 104
    if (fi->debug != 0) {
#line 105
      (*(fi->printdebug))(fi, (char *)"State %s Event %s", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
#line 108
    (*r)(fi, event, arg);
#line 109
    return (0);
  } else {
#line 111
    if (fi->debug != 0) {
#line 112
      (*(fi->printdebug))(fi, (char *)"State %s Event %s no action", *((fi->fsm)->strState + (unsigned long )fi->state),
                          *((fi->fsm)->strEvent + (unsigned long )event));
    } else {

    }
#line 115
    return (1);
  }
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmChangeState(struct FsmInst *fi , int newstate ) 
{ 


  {
#line 123
  fi->state = newstate;
#line 124
  if (fi->debug != 0) {
#line 125
    (*(fi->printdebug))(fi, (char *)"ChangeState %s", *((fi->fsm)->strState + (unsigned long )newstate));
  } else {

  }
#line 127
  return;
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
static void FsmExpireTimer(struct FsmTimer *ft ) 
{ 


  {
#line 137
  mISDN_FsmEvent(ft->fi, ft->event, ft->arg);
#line 138
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmInitTimer(struct FsmInst *fi , struct FsmTimer *ft ) 
{ 
  struct lock_class_key __key ;

  {
#line 143
  ft->fi = fi;
#line 144
  ft->tl.function = (void (*)(unsigned long  ))(& FsmExpireTimer);
#line 145
  ft->tl.data = (unsigned long )ft;
#line 150
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 152
  return;
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmDelTimer(struct FsmTimer *ft , int where ) 
{ 


  {
#line 162
  del_timer(& ft->tl);
#line 163
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
int mISDN_FsmAddTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                      int where ) 
{ 
  int tmp ;
  struct lock_class_key __key ;

  {
#line 177
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
#line 177
  if (tmp != 0) {
#line 178
    if ((ft->fi)->debug != 0) {
#line 179
      printk("<4>mISDN_FsmAddTimer: timer already active!\n");
#line 181
      (*((ft->fi)->printdebug))(ft->fi, (char *)"mISDN_FsmAddTimer already active!");
    } else {

    }
#line 184
    return (-1);
  } else {

  }
#line 186
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 187
  ft->event = event;
#line 188
  ft->arg = arg;
#line 189
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
#line 190
  add_timer(& ft->tl);
#line 191
  return (0);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/fsm.c.prepared"
void mISDN_FsmRestartTimer(struct FsmTimer *ft , int millisec , int event , void *arg ,
                           int where ) 
{ 
  int tmp ;
  struct lock_class_key __key ;

  {
#line 206
  tmp = timer_pending((struct timer_list  const  *)(& ft->tl));
#line 206
  if (tmp != 0) {
#line 207
    del_timer(& ft->tl);
  } else {

  }
#line 208
  init_timer_key(& ft->tl, "&ft->tl", & __key);
#line 209
  ft->event = event;
#line 210
  ft->arg = arg;
#line 211
  ft->tl.expires = (unsigned long )((millisec * 250) / 1000) + (unsigned long )jiffies;
#line 212
  add_timer(& ft->tl);
#line 213
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
unsigned long __builtin_object_size(void * , int  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 64 "include/asm-generic/bug.h"
extern void warn_slowpath_fmt(char const   * , int const    , char const   *  , ...) ;
#line 69
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 178 "include/linux/kernel.h"
extern void might_fault(void) ;
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_8(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) ;
#line 321 "include/linux/socket.h"
extern int memcpy_fromiovec(unsigned char * , struct iovec * , int  ) ;
#line 334
extern int put_cmsg(struct msghdr * , int  , int  , int  , void * ) ;
#line 20 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock_bh(rwlock_t * ) ;
#line 21
extern void _raw_write_lock_bh(rwlock_t * ) ;
#line 32
extern void _raw_read_unlock_bh(rwlock_t * ) ;
#line 33
extern void _raw_write_unlock_bh(rwlock_t * ) ;
#line 244 "include/linux/time.h"
extern struct timeval ns_to_timeval(s64 const    ) ;
#line 232 "include/linux/net.h"
extern int sock_register(struct net_proto_family  const  * ) ;
#line 233
extern void sock_unregister(int  ) ;
#line 40 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
#line 42
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ 
  int sz ;
  unsigned long tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 50
  tmp = __builtin_object_size((void const   *)to, 0);
#line 50
  sz = (int )tmp;
#line 52
  might_fault();
#line 53
  tmp___1 = __builtin_expect(sz == -1, 1L);
#line 53
  if (tmp___1 != 0L) {
#line 54
    n = _copy_from_user(to, from, (unsigned int )n);
  } else {
#line 53
    tmp___2 = __builtin_expect((unsigned long )sz >= n, 1L);
#line 53
    if (tmp___2 != 0L) {
#line 54
      n = _copy_from_user(to, from, (unsigned int )n);
    } else {
#line 57
      __ret_warn_on = 1;
#line 57
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 57
      if (tmp___0 != 0L) {
#line 57
        warn_slowpath_fmt("/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h",
                          57, "Buffer overflow detected!\n");
      } else {

      }
#line 57
      __builtin_expect(__ret_warn_on != 0, 0L);
    }
  }
#line 59
  return (n);
}
}
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  unsigned long tmp ;

  {
#line 65
  might_fault();
#line 67
  tmp = _copy_to_user(dst, src, size);
#line 67
  return ((int )tmp);
}
}
#line 713 "include/linux/device.h"
extern int device_rename(struct device * , char const   * ) ;
#line 320 "include/linux/hrtimer.h"
extern ktime_t ktime_get_real(void) ;
#line 538 "include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff * ) ;
#line 541
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
#line 543 "include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
#line 546
  tmp = __alloc_skb(size, priority, 0, -1);
#line 546
  return (tmp);
}
}
#line 1067
extern void skb_queue_head(struct sk_buff_head * , struct sk_buff * ) ;
#line 1250
extern unsigned char *skb_put(struct sk_buff * , unsigned int  ) ;
#line 1260
extern unsigned char *skb_push(struct sk_buff * , unsigned int  ) ;
#line 1268
extern unsigned char *skb_pull(struct sk_buff * , unsigned int  ) ;
#line 1336 "include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
#line 1338
  skb->data = skb->data + (unsigned long )len;
#line 1339
  skb->tail = skb->tail + (sk_buff_data_t )len;
#line 1340
  return;
}
}
#line 1595
extern void skb_queue_purge(struct sk_buff_head * ) ;
#line 2063
extern struct sk_buff *skb_recv_datagram(struct sock * , unsigned int  , int  , int * ) ;
#line 2065
extern unsigned int datagram_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
#line 2067
extern int skb_copy_datagram_iovec(struct sk_buff  const  * , int  , struct iovec * ,
                                   int  ) ;
#line 2083
extern void skb_free_datagram(struct sock * , struct sk_buff * ) ;
#line 2169 "include/linux/skbuff.h"
__inline static void skb_get_timestamp(struct sk_buff  const  *skb , struct timeval *stamp ) 
{ 


  {
#line 2172
  *stamp = ns_to_timeval(skb->tstamp.tv64);
#line 2173
  return;
}
}
#line 2181 "include/linux/skbuff.h"
__inline static void __net_timestamp(struct sk_buff *skb ) 
{ 


  {
#line 2183
  skb->tstamp = ktime_get_real();
#line 2184
  return;
}
}
#line 393 "include/net/sock.h"
__inline static int sk_unhashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
#line 395
  tmp = hlist_unhashed(& sk->__sk_common.ldv_37446.skc_node);
#line 395
  return (tmp);
}
}
#line 398 "include/net/sock.h"
__inline static int sk_hashed(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
#line 400
  tmp = sk_unhashed(sk);
#line 400
  return (tmp == 0);
}
}
#line 403 "include/net/sock.h"
__inline static void sk_node_init(struct hlist_node *node ) 
{ 


  {
#line 405
  node->pprev = 0;
#line 406
  return;
}
}
#line 413 "include/net/sock.h"
__inline static void __sk_del_node(struct sock *sk ) 
{ 


  {
#line 415
  __hlist_del(& sk->__sk_common.ldv_37446.skc_node);
#line 416
  return;
}
}
#line 419 "include/net/sock.h"
__inline static int __sk_del_node_init(struct sock *sk ) 
{ 
  int tmp ;

  {
#line 421
  tmp = sk_hashed((struct sock  const  *)sk);
#line 421
  if (tmp != 0) {
#line 422
    __sk_del_node(sk);
#line 423
    sk_node_init(& sk->__sk_common.ldv_37446.skc_node);
#line 424
    return (1);
  } else {

  }
#line 426
  return (0);
}
}
#line 435 "include/net/sock.h"
__inline static void sock_hold(struct sock *sk ) 
{ 


  {
#line 437
  atomic_inc(& sk->__sk_common.skc_refcnt);
#line 438
  return;
}
}
#line 443 "include/net/sock.h"
__inline static void __sock_put(struct sock *sk ) 
{ 


  {
#line 445
  atomic_dec(& sk->__sk_common.skc_refcnt);
#line 446
  return;
}
}
#line 448 "include/net/sock.h"
__inline static int sk_del_node_init(struct sock *sk ) 
{ 
  int rc ;
  int tmp ;
  int __ret_warn_on ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 450
  tmp = __sk_del_node_init(sk);
#line 450
  rc = tmp;
#line 452
  if (rc != 0) {
#line 454
    tmp___0 = atomic_read((atomic_t const   *)(& sk->__sk_common.skc_refcnt));
#line 454
    __ret_warn_on = tmp___0 == 1;
#line 454
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 454
    if (tmp___1 != 0L) {
#line 454
      warn_slowpath_null("include/net/sock.h", 454);
    } else {

    }
#line 454
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 455
    __sock_put(sk);
  } else {

  }
#line 457
  return (rc);
}
}
#line 482 "include/net/sock.h"
__inline static void __sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 484
  hlist_add_head(& sk->__sk_common.ldv_37446.skc_node, list);
#line 485
  return;
}
}
#line 487 "include/net/sock.h"
__inline static void sk_add_node(struct sock *sk , struct hlist_head *list ) 
{ 


  {
#line 489
  sock_hold(sk);
#line 490
  __sk_add_node(sk, list);
#line 491
  return;
}
}
#line 574 "include/net/sock.h"
__inline static void sock_set_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 576
  __set_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
#line 577
  return;
}
}
#line 579 "include/net/sock.h"
__inline static void sock_reset_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
#line 581
  __clear_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
#line 582
  return;
}
}
#line 1053
extern void lock_sock_nested(struct sock * , int  ) ;
#line 1055 "include/net/sock.h"
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
#line 1057
  lock_sock_nested(sk, 0);
#line 1058
  return;
}
}
#line 1060
extern void release_sock(struct sock * ) ;
#line 1087
extern struct sock *sk_alloc(struct net * , int  , gfp_t  , struct proto * ) ;
#line 1090
extern void sk_free(struct sock * ) ;
#line 1139
extern int sock_no_connect(struct socket * , struct sockaddr * , int  , int  ) ;
#line 1141
extern int sock_no_socketpair(struct socket * , struct socket * ) ;
#line 1143
extern int sock_no_accept(struct socket * , struct socket * , int  ) ;
#line 1145
extern int sock_no_getname(struct socket * , struct sockaddr * , int * , int  ) ;
#line 1147
extern unsigned int sock_no_poll(struct file * , struct socket * , struct poll_table_struct * ) ;
#line 1151
extern int sock_no_listen(struct socket * , int  ) ;
#line 1152
extern int sock_no_shutdown(struct socket * , int  ) ;
#line 1153
extern int sock_no_getsockopt(struct socket * , int  , int  , char * , int * ) ;
#line 1155
extern int sock_no_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1157
extern int sock_no_sendmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
#line 1159
extern int sock_no_recvmsg(struct kiocb * , struct socket * , struct msghdr * , size_t  ,
                           int  ) ;
#line 1161
extern int sock_no_mmap(struct file * , struct socket * , struct vm_area_struct * ) ;
#line 1191
extern void sock_init_data(struct socket * , struct sock * ) ;
#line 1248 "include/net/sock.h"
__inline static void sock_put(struct sock *sk ) 
{ 
  int tmp ;

  {
#line 1250
  tmp = atomic_dec_and_test(& sk->__sk_common.skc_refcnt);
#line 1250
  if (tmp != 0) {
#line 1251
    sk_free(sk);
  } else {

  }
#line 1252
  return;
}
}
#line 1262 "include/net/sock.h"
__inline static void sk_tx_queue_clear(struct sock *sk ) 
{ 


  {
#line 1264
  sk->__sk_common.skc_tx_queue_mapping = -1;
#line 1265
  return;
}
}
#line 1272 "include/net/sock.h"
__inline static void sk_set_socket(struct sock *sk , struct socket *sock ) 
{ 


  {
#line 1274
  sk_tx_queue_clear(sk);
#line 1275
  sk->sk_socket = sock;
#line 1276
  return;
}
}
#line 1290 "include/net/sock.h"
__inline static void sock_orphan(struct sock *sk ) 
{ 


  {
#line 1292
  _raw_write_lock_bh(& sk->sk_callback_lock);
#line 1293
  sock_set_flag(sk, SOCK_DEAD);
#line 1294
  sk_set_socket(sk, 0);
#line 1295
  sk->sk_wq = 0;
#line 1296
  _raw_write_unlock_bh(& sk->sk_callback_lock);
#line 1297
  return;
}
}
#line 1615
extern int sock_queue_rcv_skb(struct sock * , struct sk_buff * ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 49
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) ;
#line 51
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) ;
#line 57
void delete_channel(struct mISDNchannel *ch ) ;
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static u_int *debug___0  ;
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto mISDN_proto  = 
#line 57
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U, 0, 0,
    0, 0, 0, 0, 0, 0, (_Bool)0, 0, 1368U, 0, 0, 0, 0, {0}, & __this_module, {'m',
                                                                             'i',
                                                                             's',
                                                                             'd',
                                                                             'n',
                                                                             '\000'},
    {0, 0}};
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct mISDN_sock_list data_sockets  =    {{0}, {{4294967296LL}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, {0,
                                                                               0},
                                                                           "data_sockets.lock",
                                                                           0, 0UL}}};
#line 69 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct mISDN_sock_list base_sockets  =    {{0}, {{4294967296LL}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, {0,
                                                                               0},
                                                                           "base_sockets.lock",
                                                                           0, 0UL}}};
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
__inline static struct sk_buff *_l2_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  long tmp ;

  {
#line 80
  skb = alloc_skb(len + 4U, gfp_mask);
#line 81
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 81
  if (tmp != 0L) {
#line 82
    skb_reserve(skb, 4);
  } else {

  }
#line 83
  return (skb);
}
}
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static void mISDN_sock_link(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 89
  _raw_write_lock_bh(& l->lock);
#line 90
  sk_add_node(sk, & l->head);
#line 91
  _raw_write_unlock_bh(& l->lock);
#line 92
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static void mISDN_sock_unlink(struct mISDN_sock_list *l , struct sock *sk ) 
{ 


  {
#line 96
  _raw_write_lock_bh(& l->lock);
#line 97
  sk_del_node_init(sk);
#line 98
  _raw_write_unlock_bh(& l->lock);
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct mISDN_sock *msk ;
  int err ;
  struct mISDNchannel  const  *__mptr ;

  {
#line 107
  __mptr = (struct mISDNchannel  const  *)ch;
#line 107
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb08UL;
#line 108
  if ((*debug___0 & 4U) != 0U) {
#line 109
    printk("<7>%s len %d %p\n", "mISDN_send", skb->len, skb);
  } else {

  }
#line 110
  if ((unsigned int )((unsigned char )msk->sk.__sk_common.skc_state) == 3U) {
#line 111
    return (-49);
  } else {

  }
#line 112
  __net_timestamp(skb);
#line 113
  err = sock_queue_rcv_skb(& msk->sk, skb);
#line 114
  if (err != 0) {
#line 115
    printk("<4>%s: error %d\n", "mISDN_send", err);
  } else {

  }
#line 116
  return (err);
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;

  {
#line 124
  __mptr = (struct mISDNchannel  const  *)ch;
#line 124
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb08UL;
#line 125
  if ((*debug___0 & 4U) != 0U) {
#line 126
    printk("<7>%s(%p, %x, %p)\n", "mISDN_ctrl", ch, cmd, arg);
  } else {

  }
#line 127
  switch (cmd) {
  case (u_int )512: 
#line 129
  msk->sk.__sk_common.skc_state = 3U;
#line 130
  goto ldv_38661;
  }
  ldv_38661: ;
#line 132
  return (0);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
__inline static void mISDN_sock_cmsg(struct sock *sk , struct msghdr *msg , struct sk_buff *skb ) 
{ 
  struct timeval tv ;

  {
#line 140
  if ((int )((struct mISDN_sock *)sk)->cmask & 1) {
#line 141
    skb_get_timestamp((struct sk_buff  const  *)skb, & tv);
#line 142
    put_cmsg(msg, 0, 1, 16, (void *)(& tv));
  } else {

  }
#line 144
  return;
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_recvmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len , int flags ) 
{ 
  struct sk_buff *skb ;
  struct sock *sk ;
  struct sockaddr_mISDN *maddr ;
  int copied ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;

  {
#line 151
  sk = sock->sk;
#line 156
  if ((*debug___0 & 4U) != 0U) {
#line 157
    printk("<7>%s: len %d, flags %x ch.nr %d, proto %x\n", "mISDN_sock_recvmsg", (int )len,
           flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
#line 160
  if (flags & 1) {
#line 161
    return (-95);
  } else {

  }
#line 163
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 3U) {
#line 164
    return (0);
  } else {

  }
#line 166
  skb = skb_recv_datagram(sk, (unsigned int )flags, flags & 64, & err);
#line 167
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 168
    return (err);
  } else {

  }
#line 170
  if ((unsigned int )msg->msg_namelen > 5U) {
#line 171
    msg->msg_namelen = 6;
#line 172
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 173
    maddr->family = 34U;
#line 174
    maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
#line 175
    if ((unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U) {
#line 177
      maddr->channel = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 16);
#line 178
      maddr->tei = (unsigned char )(((struct mISDNhead *)(& skb->cb))->id >> 8);
#line 179
      maddr->sapi = (unsigned char )((struct mISDNhead *)(& skb->cb))->id;
    } else {
#line 181
      maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
#line 182
      maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
#line 183
      maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
    }
  } else {
#line 186
    if (msg->msg_namelen != 0) {
#line 187
      printk("<4>%s: too small namelen %d\n", "mISDN_sock_recvmsg", msg->msg_namelen);
    } else {

    }
#line 189
    msg->msg_namelen = 0;
  }
#line 192
  copied = (int )(skb->len + 8U);
#line 193
  if ((size_t )copied > len) {
#line 194
    if ((flags & 2) != 0) {
#line 195
      atomic_dec(& skb->users);
    } else {
#line 197
      skb_queue_head(& sk->sk_receive_queue, skb);
    }
#line 198
    return (-28);
  } else {

  }
#line 200
  __len = 8UL;
#line 200
  if (__len > 63UL) {
#line 200
    tmp = skb_push(skb, 8U);
#line 200
    __ret = __memcpy((void *)tmp, (void const   *)(& skb->cb), __len);
  } else {
#line 200
    tmp___0 = skb_push(skb, 8U);
#line 200
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)(& skb->cb), __len);
  }
#line 203
  err = skb_copy_datagram_iovec((struct sk_buff  const  *)skb, 0, msg->msg_iov, copied);
#line 205
  mISDN_sock_cmsg(sk, msg, skb);
#line 207
  skb_free_datagram(sk, skb);
#line 209
  return (err != 0 ? err : copied);
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_sendmsg(struct kiocb *iocb , struct socket *sock , struct msghdr *msg ,
                              size_t len ) 
{ 
  struct sock *sk ;
  struct sk_buff *skb ;
  int err ;
  struct sockaddr_mISDN *maddr ;
  unsigned char *tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 216
  sk = sock->sk;
#line 218
  err = -12;
#line 221
  if ((*debug___0 & 4U) != 0U) {
#line 222
    printk("<7>%s: len %d flags %x ch %d proto %x\n", "mISDN_sock_sendmsg", (int )len,
           msg->msg_flags, ((struct mISDN_sock *)sk)->ch.nr, (int )sk->sk_protocol);
  } else {

  }
#line 226
  if ((int )msg->msg_flags & 1) {
#line 227
    return (-95);
  } else {

  }
#line 229
  if ((msg->msg_flags & 4294942655U) != 0U) {
#line 230
    return (-22);
  } else {

  }
#line 232
  if (len <= 7UL) {
#line 233
    return (-22);
  } else {

  }
#line 235
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U) {
#line 236
    return (-77);
  } else {

  }
#line 238
  lock_sock(sk);
#line 240
  skb = _l2_alloc_skb((unsigned int )len, 208U);
#line 241
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 242
    goto done;
  } else {

  }
#line 244
  tmp = skb_put(skb, (unsigned int )len);
#line 244
  tmp___0 = memcpy_fromiovec(tmp, msg->msg_iov, (int )len);
#line 244
  if (tmp___0 != 0) {
#line 245
    err = -14;
#line 246
    goto done;
  } else {

  }
#line 249
  __len = 8UL;
#line 249
  if (__len > 63UL) {
#line 249
    __ret = __memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  } else {
#line 249
    __ret = __builtin_memcpy((void *)(& skb->cb), (void const   *)skb->data, __len);
  }
#line 250
  skb_pull(skb, 8U);
#line 252
  if ((unsigned int )msg->msg_namelen > 5U) {
#line 254
    maddr = (struct sockaddr_mISDN *)msg->msg_name;
#line 255
    ((struct mISDNhead *)(& skb->cb))->id = (unsigned int )maddr->channel;
  } else
#line 257
  if ((unsigned int )sk->sk_protocol == 16U || (unsigned int )sk->sk_protocol == 17U) {
#line 259
    ((struct mISDNhead *)(& skb->cb))->id = ((struct mISDN_sock *)sk)->ch.nr;
  } else {

  }
#line 262
  if ((*debug___0 & 4U) != 0U) {
#line 263
    printk("<7>%s: ID:%x\n", "mISDN_sock_sendmsg", ((struct mISDNhead *)(& skb->cb))->id);
  } else {

  }
#line 266
  err = -19;
#line 267
  if ((unsigned long )((struct mISDN_sock *)sk)->ch.peer == (unsigned long )((struct mISDNchannel *)0)) {
#line 268
    goto done;
  } else {

  }
#line 269
  err = (*(((struct mISDN_sock *)sk)->ch.recv))(((struct mISDN_sock *)sk)->ch.peer,
                                                skb);
#line 270
  if (err != 0) {

  } else {
#line 273
    skb = 0;
#line 274
    err = (int )len;
  }
  done: ;
#line 278
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 279
    kfree_skb(skb);
  } else {

  }
#line 280
  release_sock(sk);
#line 281
  return (err);
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;

  {
#line 287
  sk = sock->sk;
#line 289
  if ((*debug___0 & 4U) != 0U) {
#line 290
    printk("<7>%s(%p) sk=%p\n", "data_sock_release", sock, sk);
  } else {

  }
#line 291
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 292
    return (0);
  } else {

  }
#line 293
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: ;
#line 298
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U) {
#line 299
    delete_channel(& ((struct mISDN_sock *)sk)->ch);
  } else {
#line 301
    mISDN_sock_unlink(& data_sockets, sk);
  }
#line 302
  goto ldv_38708;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 311
  delete_channel(& ((struct mISDN_sock *)sk)->ch);
#line 312
  mISDN_sock_unlink(& data_sockets, sk);
#line 313
  goto ldv_38708;
  }
  ldv_38708: 
#line 316
  lock_sock(sk);
#line 318
  sock_orphan(sk);
#line 319
  skb_queue_purge(& sk->sk_receive_queue);
#line 321
  release_sock(sk);
#line 322
  sock_put(sk);
#line 324
  return (0);
}
}
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_ioctl_bound(struct sock *sk , unsigned int cmd , void *p ) 
{ 
  struct mISDN_ctrl_req cq ;
  int err ;
  int val[2U] ;
  struct mISDNchannel *bchan ;
  struct mISDNchannel *next ;
  unsigned long tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___0 ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;

  {
#line 331
  err = -22;
#line 334
  lock_sock(sk);
#line 335
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
#line 336
    err = -19;
#line 337
    goto done;
  } else {

  }
#line 339
  switch (cmd) {
  case 2147764549U: 
#line 341
  tmp = copy_from_user((void *)(& cq), (void const   *)p, 16UL);
#line 341
  if (tmp != 0UL) {
#line 342
    err = -14;
#line 343
    goto ldv_38729;
  } else {

  }
#line 345
  if (((int )sk->sk_protocol & -32) == 32) {
#line 346
    __mptr = (struct list_head  const  *)(((struct mISDN_sock *)sk)->dev)->bchannels.next;
#line 346
    bchan = (struct mISDNchannel *)__mptr;
#line 346
    __mptr___0 = (struct list_head  const  *)bchan->list.next;
#line 346
    next = (struct mISDNchannel *)__mptr___0;
#line 346
    goto ldv_38738;
    ldv_38737: ;
#line 348
    if (bchan->nr == (u_int )cq.channel) {
#line 349
      err = (*(bchan->ctrl))(bchan, 768U, (void *)(& cq));
#line 351
      goto ldv_38736;
    } else {

    }
#line 346
    bchan = next;
#line 346
    __mptr___1 = (struct list_head  const  *)next->list.next;
#line 346
    next = (struct mISDNchannel *)__mptr___1;
    ldv_38738: ;
#line 346
    if ((unsigned long )(& bchan->list) != (unsigned long )(& (((struct mISDN_sock *)sk)->dev)->bchannels)) {
#line 347
      goto ldv_38737;
    } else {

    }
    ldv_38736: ;
  } else {
#line 355
    err = (*((((struct mISDN_sock *)sk)->dev)->D.ctrl))(& (((struct mISDN_sock *)sk)->dev)->D,
                                                        768U, (void *)(& cq));
  }
#line 357
  if (err != 0) {
#line 358
    goto ldv_38729;
  } else {

  }
#line 359
  tmp___0 = copy_to_user(p, (void const   *)(& cq), 16U);
#line 359
  if (tmp___0 != 0) {
#line 360
    err = -14;
  } else {

  }
#line 361
  goto ldv_38729;
  case 2147764550U: ;
#line 363
  if ((unsigned int )sk->sk_protocol != 17U) {
#line 364
    err = -22;
#line 365
    goto ldv_38729;
  } else {

  }
#line 367
  val[0] = (int )cmd;
#line 368
  might_fault();
#line 368
  switch (4UL) {
  case 1UL: 
#line 368
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 368
  goto ldv_38743;
  case 2UL: 
#line 368
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 368
  goto ldv_38743;
  case 4UL: 
#line 368
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 368
  goto ldv_38743;
  case 8UL: 
#line 368
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 368
  goto ldv_38743;
  default: 
#line 368
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)p));
#line 368
  goto ldv_38743;
  }
  ldv_38743: 
#line 368
  val[1] = (int )__val_gu;
#line 368
  if (__ret_gu != 0) {
#line 369
    err = -14;
#line 370
    goto ldv_38729;
  } else {

  }
#line 372
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768U, (void *)(& val));
#line 374
  goto ldv_38729;
  case 2147764552U: ;
#line 376
  if ((unsigned int )sk->sk_protocol != 17U && (unsigned int )sk->sk_protocol != 16U) {
#line 378
    err = -22;
#line 379
    goto ldv_38729;
  } else {

  }
#line 381
  val[0] = (int )cmd;
#line 382
  might_fault();
#line 382
  switch (4UL) {
  case 1UL: 
#line 382
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 382
  goto ldv_38753;
  case 2UL: 
#line 382
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 382
  goto ldv_38753;
  case 4UL: 
#line 382
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 382
  goto ldv_38753;
  case 8UL: 
#line 382
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 382
  goto ldv_38753;
  default: 
#line 382
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)p));
#line 382
  goto ldv_38753;
  }
  ldv_38753: 
#line 382
  val[1] = (int )__val_gu___0;
#line 382
  if (__ret_gu___0 != 0) {
#line 383
    err = -14;
#line 384
    goto ldv_38729;
  } else {

  }
#line 386
  err = (*(((((struct mISDN_sock *)sk)->dev)->teimgr)->ctrl))((((struct mISDN_sock *)sk)->dev)->teimgr,
                                                              768U, (void *)(& val));
#line 388
  goto ldv_38729;
  default: 
#line 390
  err = -22;
#line 391
  goto ldv_38729;
  }
  ldv_38729: ;
  done: 
#line 394
  release_sock(sk);
#line 395
  return (err);
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct sock *sk ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int tmp ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu ;
  unsigned long __val_gu ;
  struct mISDN_devinfo di ;
  u_int tmp___0 ;
  size_t __len ;
  void *__ret ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 401
  err = 0;
#line 402
  sk = sock->sk;
#line 406
  switch (cmd) {
  case 2147764546U: 
#line 408
  ver.major = 1U;
#line 409
  ver.minor = 1U;
#line 410
  ver.release = 21U;
#line 411
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
#line 411
  if (tmp != 0) {
#line 412
    err = -14;
  } else {

  }
#line 413
  goto ldv_38771;
  case 2147764547U: 
#line 415
  id = get_mdevice_count();
#line 416
  might_fault();
#line 416
  __pu_val = id;
#line 416
  switch (4UL) {
  case 1UL: 
#line 416
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 416
  goto ldv_38776;
  case 2UL: 
#line 416
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 416
  goto ldv_38776;
  case 4UL: 
#line 416
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 416
  goto ldv_38776;
  case 8UL: 
#line 416
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 416
  goto ldv_38776;
  default: 
#line 416
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 416
  goto ldv_38776;
  }
  ldv_38776: ;
#line 416
  if (__ret_pu != 0) {
#line 417
    err = -14;
  } else {

  }
#line 418
  goto ldv_38771;
  case 2147764548U: 
#line 420
  might_fault();
#line 420
  switch (4UL) {
  case 1UL: 
#line 420
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 420
  goto ldv_38786;
  case 2UL: 
#line 420
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 420
  goto ldv_38786;
  case 4UL: 
#line 420
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 420
  goto ldv_38786;
  case 8UL: 
#line 420
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 420
  goto ldv_38786;
  default: 
#line 420
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 420
  goto ldv_38786;
  }
  ldv_38786: 
#line 420
  id = (int )__val_gu;
#line 420
  if (__ret_gu != 0) {
#line 421
    err = -14;
#line 422
    goto ldv_38771;
  } else {

  }
#line 424
  dev = get_mdevice((u_int )id);
#line 425
  if ((unsigned long )dev != (unsigned long )((struct mISDNdevice *)0)) {
#line 428
    memset((void *)(& di), 0, 56UL);
#line 429
    di.id = dev->id;
#line 430
    di.Dprotocols = dev->Dprotocols;
#line 431
    tmp___0 = get_all_Bprotocols();
#line 431
    di.Bprotocols = dev->Bprotocols | tmp___0;
#line 432
    di.protocol = dev->D.protocol;
#line 433
    __len = 16UL;
#line 433
    if (__len > 63UL) {
#line 433
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
#line 433
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
#line 435
    di.nrbchan = dev->nrbchan;
#line 436
    tmp___1 = dev_name((struct device  const  *)(& dev->dev));
#line 436
    strcpy((char *)(& di.name), tmp___1);
#line 437
    tmp___2 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
#line 437
    if (tmp___2 != 0) {
#line 438
      err = -14;
    } else {

    }
  } else {
#line 440
    err = -19;
  }
#line 441
  goto ldv_38771;
  default: ;
#line 443
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 2U) {
#line 444
    err = data_sock_ioctl_bound(sk, cmd, (void *)arg);
  } else {
#line 447
    err = -107;
  }
  }
  ldv_38771: ;
#line 449
  return (err);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_setsockopt(struct socket *sock , int level , int optname , char *optval ,
                                unsigned int len ) 
{ 
  struct sock *sk ;
  int err ;
  int opt ;
  int __ret_gu ;
  unsigned long __val_gu ;

  {
#line 455
  sk = sock->sk;
#line 456
  err = 0;
#line 456
  opt = 0;
#line 458
  if ((*debug___0 & 4U) != 0U) {
#line 459
    printk("<7>%s(%p, %d, %x, %p, %d)\n", "data_sock_setsockopt", sock, level, optname,
           optval, len);
  } else {

  }
#line 462
  lock_sock(sk);
#line 464
  switch (optname) {
  case 1: 
#line 466
  might_fault();
#line 466
  switch (4UL) {
  case 1UL: 
#line 466
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 466
  goto ldv_38812;
  case 2UL: 
#line 466
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 466
  goto ldv_38812;
  case 4UL: 
#line 466
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 466
  goto ldv_38812;
  case 8UL: 
#line 466
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 466
  goto ldv_38812;
  default: 
#line 466
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)optval));
#line 466
  goto ldv_38812;
  }
  ldv_38812: 
#line 466
  opt = (int )__val_gu;
#line 466
  if (__ret_gu != 0) {
#line 467
    err = -14;
#line 468
    goto ldv_38818;
  } else {

  }
#line 471
  if (opt != 0) {
#line 472
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask | 1U;
  } else {
#line 474
    ((struct mISDN_sock *)sk)->cmask = ((struct mISDN_sock *)sk)->cmask & 4294967294U;
  }
#line 475
  goto ldv_38818;
  default: 
#line 477
  err = -92;
#line 478
  goto ldv_38818;
  }
  ldv_38818: 
#line 480
  release_sock(sk);
#line 481
  return (err);
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_getsockopt(struct socket *sock , int level , int optname , char *optval ,
                                int *optlen ) 
{ 
  struct sock *sk ;
  int len ;
  int opt ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int __ret_pu ;
  char __pu_val ;

  {
#line 487
  sk = sock->sk;
#line 490
  might_fault();
#line 490
  switch (4UL) {
  case 1UL: 
#line 490
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 490
  goto ldv_38833;
  case 2UL: 
#line 490
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 490
  goto ldv_38833;
  case 4UL: 
#line 490
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 490
  goto ldv_38833;
  case 8UL: 
#line 490
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 490
  goto ldv_38833;
  default: 
#line 490
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (optlen));
#line 490
  goto ldv_38833;
  }
  ldv_38833: 
#line 490
  len = (int )__val_gu;
#line 490
  if (__ret_gu != 0) {
#line 491
    return (-14);
  } else {

  }
#line 493
  if (len != 1) {
#line 494
    return (-22);
  } else {

  }
#line 496
  switch (optname) {
  case 1: ;
#line 498
  if ((int )((struct mISDN_sock *)sk)->cmask & 1) {
#line 499
    opt = 1;
  } else {
#line 501
    opt = 0;
  }
#line 503
  might_fault();
#line 503
  __pu_val = (char )opt;
#line 503
  switch (1UL) {
  case 1UL: 
#line 503
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 503
  goto ldv_38843;
  case 2UL: 
#line 503
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 503
  goto ldv_38843;
  case 4UL: 
#line 503
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 503
  goto ldv_38843;
  case 8UL: 
#line 503
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 503
  goto ldv_38843;
  default: 
#line 503
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (optval): "ebx");
#line 503
  goto ldv_38843;
  }
  ldv_38843: ;
#line 503
  if (__ret_pu != 0) {
#line 504
    return (-14);
  } else {

  }
#line 505
  goto ldv_38849;
  default: ;
#line 507
  return (-92);
  }
  ldv_38849: ;
#line 510
  return (0);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  struct hlist_node *node ;
  struct sock *csk ;
  int err ;
  struct hlist_node  const  *__mptr ;

  {
#line 516
  maddr = (struct sockaddr_mISDN *)addr;
#line 517
  sk = sock->sk;
#line 520
  err = 0;
#line 522
  if ((*debug___0 & 4U) != 0U) {
#line 523
    printk("<7>%s(%p) sk=%p\n", "data_sock_bind", sock, sk);
  } else {

  }
#line 524
  if (addr_len != 6) {
#line 525
    return (-22);
  } else {

  }
#line 526
  if ((unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U) {
#line 527
    return (-22);
  } else {

  }
#line 529
  lock_sock(sk);
#line 531
  if ((unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0)) {
#line 532
    err = -114;
#line 533
    goto done;
  } else {

  }
#line 535
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
#line 536
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
#line 537
    err = -19;
#line 538
    goto done;
  } else {

  }
#line 541
  if ((unsigned int )sk->sk_protocol <= 31U) {
#line 542
    _raw_read_lock_bh(& data_sockets.lock);
#line 543
    node = data_sockets.head.first;
#line 543
    goto ldv_38868;
    ldv_38867: ;
#line 544
    if ((unsigned long )sk == (unsigned long )csk) {
#line 545
      goto ldv_38866;
    } else {

    }
#line 546
    if ((unsigned long )((struct mISDN_sock *)csk)->dev != (unsigned long )((struct mISDN_sock *)sk)->dev) {
#line 547
      goto ldv_38866;
    } else {

    }
#line 548
    if ((unsigned int )csk->sk_protocol > 31U) {
#line 549
      goto ldv_38866;
    } else {

    }
#line 550
    if (! ((_Bool )((((unsigned int )csk->sk_protocol == 1U || (unsigned int )csk->sk_protocol == 3U) || (unsigned int )csk->sk_protocol == 5U) || (unsigned int )csk->sk_protocol == 16U)) ^ (int )((_Bool )((((unsigned int )sk->sk_protocol == 1U || (unsigned int )sk->sk_protocol == 3U) || (unsigned int )sk->sk_protocol == 5U) || (unsigned int )sk->sk_protocol == 16U))) {
#line 552
      goto ldv_38866;
    } else {

    }
#line 553
    _raw_read_unlock_bh(& data_sockets.lock);
#line 554
    err = -16;
#line 555
    goto done;
    ldv_38866: 
#line 543
    node = node->next;
    ldv_38868: ;
#line 543
    if ((unsigned long )node != (unsigned long )((struct hlist_node *)0)) {
#line 543
      __mptr = (struct hlist_node  const  *)node;
#line 543
      csk = (struct sock *)__mptr + 0xffffffffffffffc8UL;
#line 543
      if (1 != 0) {
#line 544
        goto ldv_38867;
      } else {
#line 546
        goto ldv_38869;
      }
    } else {

    }
    ldv_38869: 
#line 557
    _raw_read_unlock_bh(& data_sockets.lock);
  } else {

  }
#line 560
  ((struct mISDN_sock *)sk)->ch.send = & mISDN_send;
#line 561
  ((struct mISDN_sock *)sk)->ch.ctrl = & mISDN_ctrl;
#line 563
  switch ((int )sk->sk_protocol) {
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: 
#line 568
  mISDN_sock_unlink(& data_sockets, sk);
#line 569
  err = connect_layer1(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
#line 571
  if (err != 0) {
#line 572
    mISDN_sock_link(& data_sockets, sk);
  } else {

  }
#line 573
  goto ldv_38874;
  case 16: ;
  case 17: 
#line 576
  err = create_l2entity(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                        (u_int )sk->sk_protocol, maddr);
#line 578
  goto ldv_38874;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 585
  err = connect_Bstack(((struct mISDN_sock *)sk)->dev, & ((struct mISDN_sock *)sk)->ch,
                       (u_int )sk->sk_protocol, maddr);
#line 587
  goto ldv_38874;
  default: 
#line 589
  err = -93;
  }
  ldv_38874: ;
#line 591
  if (err != 0) {
#line 592
    goto done;
  } else {

  }
#line 593
  sk->__sk_common.skc_state = 2U;
#line 594
  ((struct mISDN_sock *)sk)->ch.protocol = (u_int )sk->sk_protocol;
  done: 
#line 597
  release_sock(sk);
#line 598
  return (err);
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_getname(struct socket *sock , struct sockaddr *addr , int *addr_len ,
                             int peer ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;

  {
#line 605
  maddr = (struct sockaddr_mISDN *)addr;
#line 606
  sk = sock->sk;
#line 608
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
#line 609
    return (-77);
  } else {

  }
#line 611
  lock_sock(sk);
#line 613
  *addr_len = 6;
#line 614
  maddr->dev = (unsigned char )(((struct mISDN_sock *)sk)->dev)->id;
#line 615
  maddr->channel = (unsigned char )((struct mISDN_sock *)sk)->ch.nr;
#line 616
  maddr->sapi = (unsigned char )((struct mISDN_sock *)sk)->ch.addr;
#line 617
  maddr->tei = (unsigned char )(((struct mISDN_sock *)sk)->ch.addr >> 8);
#line 618
  release_sock(sk);
#line 619
  return (0);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto_ops  const  data_sock_ops  = 
#line 622
     {34, & __this_module, & data_sock_release, & data_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & data_sock_getname, & datagram_poll,
    & data_sock_ioctl, 0, & sock_no_listen, & sock_no_shutdown, & data_sock_setsockopt,
    & data_sock_getsockopt, 0, 0, & mISDN_sock_sendmsg, & mISDN_sock_recvmsg, & sock_no_mmap,
    0, 0};
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int data_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;

  {
#line 647
  if ((int )sock->type != 2) {
#line 648
    return (-94);
  } else {

  }
#line 650
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
#line 651
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 652
    return (-12);
  } else {

  }
#line 654
  sock_init_data(sock, sk);
#line 656
  sock->ops = & data_sock_ops;
#line 657
  sock->state = SS_UNCONNECTED;
#line 658
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 660
  sk->sk_protocol = (unsigned char )protocol;
#line 661
  sk->__sk_common.skc_state = 1U;
#line 662
  mISDN_sock_link(& data_sockets, sk);
#line 664
  return (0);
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_release(struct socket *sock ) 
{ 
  struct sock *sk ;

  {
#line 670
  sk = sock->sk;
#line 672
  printk("<7>%s(%p) sk=%p\n", "base_sock_release", sock, sk);
#line 673
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 674
    return (0);
  } else {

  }
#line 676
  mISDN_sock_unlink(& base_sockets, sk);
#line 677
  sock_orphan(sk);
#line 678
  sock_put(sk);
#line 680
  return (0);
}
}
#line 684 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_ioctl(struct socket *sock , unsigned int cmd , unsigned long arg ) 
{ 
  int err ;
  int id ;
  struct mISDNdevice *dev ;
  struct mISDNversion ver ;
  int tmp ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu ;
  unsigned long __val_gu ;
  struct mISDN_devinfo di ;
  u_int tmp___0 ;
  size_t __len ;
  void *__ret ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct mISDN_devrename dn ;
  unsigned long tmp___3 ;

  {
#line 686
  err = 0;
#line 690
  switch (cmd) {
  case 2147764546U: 
#line 692
  ver.major = 1U;
#line 693
  ver.minor = 1U;
#line 694
  ver.release = 21U;
#line 695
  tmp = copy_to_user((void *)arg, (void const   *)(& ver), 4U);
#line 695
  if (tmp != 0) {
#line 696
    err = -14;
  } else {

  }
#line 697
  goto ldv_38914;
  case 2147764547U: 
#line 699
  id = get_mdevice_count();
#line 700
  might_fault();
#line 700
  __pu_val = id;
#line 700
  switch (4UL) {
  case 1UL: 
#line 700
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 700
  goto ldv_38919;
  case 2UL: 
#line 700
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 700
  goto ldv_38919;
  case 4UL: 
#line 700
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 700
  goto ldv_38919;
  case 8UL: 
#line 700
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 700
  goto ldv_38919;
  default: 
#line 700
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 700
  goto ldv_38919;
  }
  ldv_38919: ;
#line 700
  if (__ret_pu != 0) {
#line 701
    err = -14;
  } else {

  }
#line 702
  goto ldv_38914;
  case 2147764548U: 
#line 704
  might_fault();
#line 704
  switch (4UL) {
  case 1UL: 
#line 704
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 704
  goto ldv_38929;
  case 2UL: 
#line 704
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 704
  goto ldv_38929;
  case 4UL: 
#line 704
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 704
  goto ldv_38929;
  case 8UL: 
#line 704
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 704
  goto ldv_38929;
  default: 
#line 704
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 704
  goto ldv_38929;
  }
  ldv_38929: 
#line 704
  id = (int )__val_gu;
#line 704
  if (__ret_gu != 0) {
#line 705
    err = -14;
#line 706
    goto ldv_38914;
  } else {

  }
#line 708
  dev = get_mdevice((u_int )id);
#line 709
  if ((unsigned long )dev != (unsigned long )((struct mISDNdevice *)0)) {
#line 712
    memset((void *)(& di), 0, 56UL);
#line 713
    di.id = dev->id;
#line 714
    di.Dprotocols = dev->Dprotocols;
#line 715
    tmp___0 = get_all_Bprotocols();
#line 715
    di.Bprotocols = dev->Bprotocols | tmp___0;
#line 716
    di.protocol = dev->D.protocol;
#line 717
    __len = 16UL;
#line 717
    if (__len > 63UL) {
#line 717
      __ret = __memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                       __len);
    } else {
#line 717
      __ret = __builtin_memcpy((void *)(& di.channelmap), (void const   *)(& dev->channelmap),
                               __len);
    }
#line 719
    di.nrbchan = dev->nrbchan;
#line 720
    tmp___1 = dev_name((struct device  const  *)(& dev->dev));
#line 720
    strcpy((char *)(& di.name), tmp___1);
#line 721
    tmp___2 = copy_to_user((void *)arg, (void const   *)(& di), 56U);
#line 721
    if (tmp___2 != 0) {
#line 722
      err = -14;
    } else {

    }
  } else {
#line 724
    err = -19;
  }
#line 725
  goto ldv_38914;
  case 2149075271U: 
#line 729
  tmp___3 = copy_from_user((void *)(& dn), (void const   *)arg, 24UL);
#line 729
  if (tmp___3 != 0UL) {
#line 731
    err = -14;
#line 732
    goto ldv_38914;
  } else {

  }
#line 734
  dev = get_mdevice(dn.id);
#line 735
  if ((unsigned long )dev != (unsigned long )((struct mISDNdevice *)0)) {
#line 736
    err = device_rename(& dev->dev, (char const   *)(& dn.name));
  } else {
#line 738
    err = -19;
  }
#line 740
  goto ldv_38914;
  default: 
#line 742
  err = -22;
  }
  ldv_38914: ;
#line 744
  return (err);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_bind(struct socket *sock , struct sockaddr *addr , int addr_len ) 
{ 
  struct sockaddr_mISDN *maddr ;
  struct sock *sk ;
  int err ;

  {
#line 750
  maddr = (struct sockaddr_mISDN *)addr;
#line 751
  sk = sock->sk;
#line 752
  err = 0;
#line 754
  if ((unsigned long )maddr == (unsigned long )((struct sockaddr_mISDN *)0) || (unsigned int )maddr->family != 34U) {
#line 755
    return (-22);
  } else {

  }
#line 757
  lock_sock(sk);
#line 759
  if ((unsigned long )((struct mISDN_sock *)sk)->dev != (unsigned long )((struct mISDNdevice *)0)) {
#line 760
    err = -114;
#line 761
    goto done;
  } else {

  }
#line 764
  ((struct mISDN_sock *)sk)->dev = get_mdevice((u_int )maddr->dev);
#line 765
  if ((unsigned long )((struct mISDN_sock *)sk)->dev == (unsigned long )((struct mISDNdevice *)0)) {
#line 766
    err = -19;
#line 767
    goto done;
  } else {

  }
#line 769
  sk->__sk_common.skc_state = 2U;
  done: 
#line 772
  release_sock(sk);
#line 773
  return (err);
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct proto_ops  const  base_sock_ops  = 
#line 776
     {34, & __this_module, & base_sock_release, & base_sock_bind, & sock_no_connect,
    & sock_no_socketpair, & sock_no_accept, & sock_no_getname, & sock_no_poll, & base_sock_ioctl,
    0, & sock_no_listen, & sock_no_shutdown, & sock_no_setsockopt, & sock_no_getsockopt,
    0, 0, & sock_no_sendmsg, & sock_no_recvmsg, & sock_no_mmap, 0, 0};
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int base_sock_create(struct net *net , struct socket *sock , int protocol ) 
{ 
  struct sock *sk ;

  {
#line 802
  if ((int )sock->type != 3) {
#line 803
    return (-94);
  } else {

  }
#line 805
  sk = sk_alloc(net, 34, 208U, & mISDN_proto);
#line 806
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 807
    return (-12);
  } else {

  }
#line 809
  sock_init_data(sock, sk);
#line 810
  sock->ops = & base_sock_ops;
#line 811
  sock->state = SS_UNCONNECTED;
#line 812
  sock_reset_flag(sk, SOCK_ZAPPED);
#line 813
  sk->sk_protocol = (unsigned char )protocol;
#line 814
  sk->__sk_common.skc_state = 1U;
#line 815
  mISDN_sock_link(& base_sockets, sk);
#line 817
  return (0);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static int mISDN_sock_create(struct net *net , struct socket *sock , int proto , int kern ) 
{ 
  int err ;

  {
#line 823
  err = -93;
#line 825
  switch (proto) {
  case 0: 
#line 827
  err = base_sock_create(net, sock, proto);
#line 828
  goto ldv_38966;
  case 1: ;
  case 2: ;
  case 3: ;
  case 4: ;
  case 16: ;
  case 17: ;
  case 33: ;
  case 34: ;
  case 35: ;
  case 36: ;
  case 37: ;
  case 38: 
#line 841
  err = data_sock_create(net, sock, proto);
#line 842
  goto ldv_38966;
  default: ;
#line 844
  return (err);
  }
  ldv_38966: ;
#line 847
  return (err);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
static struct net_proto_family  const  mISDN_sock_family_ops  =    {34, & mISDN_sock_create, & __this_module};
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
int misdn_sock_init(u_int *deb ) 
{ 
  int err ;

  {
#line 861
  debug___0 = deb;
#line 862
  err = sock_register(& mISDN_sock_family_ops);
#line 863
  if (err != 0) {
#line 864
    printk("<3>%s: error(%d)\n", "misdn_sock_init", err);
  } else {

  }
#line 865
  return (err);
}
}
#line 869 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
void misdn_sock_cleanup(void) 
{ 


  {
#line 871
  sock_unregister(34);
#line 872
  return;
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
void ldv_main2_sequence_infinite_withcheck_stateful(void) 
{ 
  struct socket *var_group1 ;
  unsigned int var_data_sock_ioctl_10_p1 ;
  unsigned long var_data_sock_ioctl_10_p2 ;
  struct sockaddr *var_group2 ;
  int var_data_sock_bind_13_p2 ;
  int *var_data_sock_getname_14_p2 ;
  int var_data_sock_getname_14_p3 ;
  struct kiocb *var_group3 ;
  struct msghdr *var_mISDN_sock_sendmsg_7_p2 ;
  size_t var_mISDN_sock_sendmsg_7_p3 ;
  struct msghdr *var_mISDN_sock_recvmsg_6_p2 ;
  size_t var_mISDN_sock_recvmsg_6_p3 ;
  int var_mISDN_sock_recvmsg_6_p4 ;
  int var_data_sock_setsockopt_11_p1 ;
  int var_data_sock_setsockopt_11_p2 ;
  char *var_data_sock_setsockopt_11_p3 ;
  unsigned int var_data_sock_setsockopt_11_p4 ;
  int var_data_sock_getsockopt_12_p1 ;
  int var_data_sock_getsockopt_12_p2 ;
  char *var_data_sock_getsockopt_12_p3 ;
  int *var_data_sock_getsockopt_12_p4 ;
  unsigned int var_base_sock_ioctl_17_p1 ;
  unsigned long var_base_sock_ioctl_17_p2 ;
  int var_base_sock_bind_18_p2 ;
  struct net *var_group4 ;
  int var_mISDN_sock_create_20_p2 ;
  int var_mISDN_sock_create_20_p3 ;
  int ldv_s_data_sock_ops_proto_ops ;
  int ldv_s_base_sock_ops_proto_ops ;
  int tmp ;
  int tmp___0 ;

  {
#line 1054
  ldv_s_data_sock_ops_proto_ops = 0;
#line 1057
  ldv_s_base_sock_ops_proto_ops = 0;
#line 1044
  LDV_IN_INTERRUPT = 1;
#line 1053
  ldv_initialize();
#line 1063
  goto ldv_39049;
  ldv_39048: 
#line 1068
  tmp = nondet_int();
#line 1068
  switch (tmp) {
  case 0: ;
#line 1073
  if (ldv_s_data_sock_ops_proto_ops == 0) {
#line 1081
    ldv_handler_precall();
#line 1082
    data_sock_release(var_group1);
#line 1083
    ldv_s_data_sock_ops_proto_ops = 0;
  } else {

  }
#line 1089
  goto ldv_39035;
  case 1: 
#line 1101
  ldv_handler_precall();
#line 1102
  data_sock_ioctl(var_group1, var_data_sock_ioctl_10_p1, var_data_sock_ioctl_10_p2);
#line 1109
  goto ldv_39035;
  case 2: 
#line 1121
  ldv_handler_precall();
#line 1122
  data_sock_bind(var_group1, var_group2, var_data_sock_bind_13_p2);
#line 1129
  goto ldv_39035;
  case 3: 
#line 1141
  ldv_handler_precall();
#line 1142
  data_sock_getname(var_group1, var_group2, var_data_sock_getname_14_p2, var_data_sock_getname_14_p3);
#line 1149
  goto ldv_39035;
  case 4: 
#line 1161
  ldv_handler_precall();
#line 1162
  mISDN_sock_sendmsg(var_group3, var_group1, var_mISDN_sock_sendmsg_7_p2, var_mISDN_sock_sendmsg_7_p3);
#line 1169
  goto ldv_39035;
  case 5: 
#line 1181
  ldv_handler_precall();
#line 1182
  mISDN_sock_recvmsg(var_group3, var_group1, var_mISDN_sock_recvmsg_6_p2, var_mISDN_sock_recvmsg_6_p3,
                     var_mISDN_sock_recvmsg_6_p4);
#line 1189
  goto ldv_39035;
  case 6: 
#line 1201
  ldv_handler_precall();
#line 1202
  data_sock_setsockopt(var_group1, var_data_sock_setsockopt_11_p1, var_data_sock_setsockopt_11_p2,
                       var_data_sock_setsockopt_11_p3, var_data_sock_setsockopt_11_p4);
#line 1209
  goto ldv_39035;
  case 7: 
#line 1221
  ldv_handler_precall();
#line 1222
  data_sock_getsockopt(var_group1, var_data_sock_getsockopt_12_p1, var_data_sock_getsockopt_12_p2,
                       var_data_sock_getsockopt_12_p3, var_data_sock_getsockopt_12_p4);
#line 1229
  goto ldv_39035;
  case 8: ;
#line 1233
  if (ldv_s_base_sock_ops_proto_ops == 0) {
#line 1241
    ldv_handler_precall();
#line 1242
    base_sock_release(var_group1);
#line 1243
    ldv_s_base_sock_ops_proto_ops = 0;
  } else {

  }
#line 1249
  goto ldv_39035;
  case 9: 
#line 1261
  ldv_handler_precall();
#line 1262
  base_sock_ioctl(var_group1, var_base_sock_ioctl_17_p1, var_base_sock_ioctl_17_p2);
#line 1269
  goto ldv_39035;
  case 10: 
#line 1281
  ldv_handler_precall();
#line 1282
  base_sock_bind(var_group1, var_group2, var_base_sock_bind_18_p2);
#line 1289
  goto ldv_39035;
  case 11: 
#line 1301
  ldv_handler_precall();
#line 1302
  mISDN_sock_create(var_group4, var_group1, var_mISDN_sock_create_20_p2, var_mISDN_sock_create_20_p3);
#line 1309
  goto ldv_39035;
  default: ;
#line 1310
  goto ldv_39035;
  }
  ldv_39035: ;
  ldv_39049: 
#line 1063
  tmp___0 = nondet_int();
#line 1063
  if ((tmp___0 != 0 || ldv_s_data_sock_ops_proto_ops != 0) || ldv_s_base_sock_ops_proto_ops != 0) {
#line 1066
    goto ldv_39048;
  } else {

  }


#line 1319
  ldv_check_final_state();
#line 1322
  return;
}
}
#line 1326 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1331
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1333
  mutex_lock(ldv_func_arg1);
#line 1334
  return;
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
int ldv_mutex_trylock_8(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1341
  tmp = mutex_trylock(ldv_func_arg1);
#line 1341
  ldv_func_res = tmp;
#line 1343
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1343
  return (tmp___0);
#line 1345
  return (ldv_func_res);
}
}
#line 1348 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/socket.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1353
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1355
  mutex_unlock(ldv_func_arg1);
#line 1356
  return;
}
}
#line 27 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_14(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void ldv_mutex_lock_13(struct mutex *ldv_func_arg1 ) ;
#line 24 "include/linux/rwlock_api_smp.h"
extern unsigned long _raw_read_lock_irqsave(rwlock_t * ) ;
#line 37
extern void _raw_read_unlock_irqrestore(rwlock_t * , unsigned long  ) ;
#line 149 "include/linux/time.h"
extern void do_gettimeofday(struct timeval * ) ;
#line 573 "include/linux/mISDNif.h"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) ;
#line 575
void mISDN_unregister_clock(struct mISDNclock *iclock ) ;
#line 586
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) ;
#line 587
unsigned short mISDN_clock_get(void) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static u_int *debug___1  ;
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static struct list_head iclock_list  =    {& iclock_list, & iclock_list};
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static rwlock_t iclock_lock  =    {{4294967296LL}, 3736018669U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "iclock_lock",
                                                                     0, 0UL}};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static u16 iclock_count  ;
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static struct timeval iclock_tv  ;
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static int iclock_tv_valid  ;
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static struct mISDNclock *iclock_current  ;
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_init_clock(u_int *dp ) 
{ 


  {
#line 86
  debug___1 = dp;
#line 87
  do_gettimeofday(& iclock_tv);
#line 88
  return;
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
static void select_iclock(void) 
{ 
  struct mISDNclock *iclock ;
  struct mISDNclock *bestclock ;
  struct mISDNclock *lastclock ;
  int pri ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 93
  bestclock = 0;
#line 93
  lastclock = 0;
#line 94
  pri = -128;
#line 96
  __mptr = (struct list_head  const  *)iclock_list.next;
#line 96
  iclock = (struct mISDNclock *)__mptr;
#line 96
  goto ldv_38646;
  ldv_38645: ;
#line 97
  if (iclock->pri > pri) {
#line 98
    pri = iclock->pri;
#line 99
    bestclock = iclock;
  } else {

  }
#line 101
  if ((unsigned long )iclock_current == (unsigned long )iclock) {
#line 102
    lastclock = iclock;
  } else {

  }
#line 96
  __mptr___0 = (struct list_head  const  *)iclock->list.next;
#line 96
  iclock = (struct mISDNclock *)__mptr___0;
  ldv_38646: ;
#line 96
  if ((unsigned long )(& iclock->list) != (unsigned long )(& iclock_list)) {
#line 97
    goto ldv_38645;
  } else {

  }

#line 104
  if ((unsigned long )lastclock != (unsigned long )((struct mISDNclock *)0) && (unsigned long )bestclock != (unsigned long )lastclock) {
#line 106
    if ((*debug___1 & 33554432U) != 0U) {
#line 107
      printk("<7>Old clock source \'%s\' disable.\n", (char *)(& lastclock->name));
    } else {

    }
#line 109
    (*(lastclock->ctl))(lastclock->priv, 0);
  } else {

  }
#line 111
  if ((unsigned long )bestclock != (unsigned long )((struct mISDNclock *)0) && (unsigned long )bestclock != (unsigned long )iclock_current) {
#line 113
    if ((*debug___1 & 33554432U) != 0U) {
#line 114
      printk("<7>New clock source \'%s\' enable.\n", (char *)(& bestclock->name));
    } else {

    }
#line 116
    (*(bestclock->ctl))(bestclock->priv, 1);
  } else {

  }
#line 118
  if ((unsigned long )bestclock != (unsigned long )iclock_current) {
#line 120
    iclock_tv_valid = 0;
  } else {

  }
#line 122
  iclock_current = bestclock;
#line 123
  return;
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
struct mISDNclock *mISDN_register_clock(char *name , int pri , clockctl_func_t *ctl ,
                                        void *priv ) 
{ 
  u_long flags ;
  struct mISDNclock *iclock ;
  void *tmp ;

  {
#line 131
  if ((*debug___1 & 33554687U) != 0U) {
#line 132
    printk("<7>%s: %s %d\n", "mISDN_register_clock", name, pri);
  } else {

  }
#line 133
  tmp = kzalloc(104UL, 32U);
#line 133
  iclock = (struct mISDNclock *)tmp;
#line 134
  if ((unsigned long )iclock == (unsigned long )((struct mISDNclock *)0)) {
#line 135
    printk("<3>%s: No memory for clock entry.\n", "mISDN_register_clock");
#line 136
    return (0);
  } else {

  }
#line 138
  strncpy((char *)(& iclock->name), (char const   *)name, 63UL);
#line 139
  iclock->pri = pri;
#line 140
  iclock->priv = priv;
#line 141
  iclock->ctl = ctl;
#line 142
  flags = _raw_write_lock_irqsave(& iclock_lock);
#line 143
  list_add_tail(& iclock->list, & iclock_list);
#line 144
  select_iclock();
#line 145
  _raw_write_unlock_irqrestore(& iclock_lock, flags);
#line 146
  return (iclock);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_unregister_clock(struct mISDNclock *iclock ) 
{ 
  u_long flags ;

  {
#line 155
  if ((*debug___1 & 33554687U) != 0U) {
#line 156
    printk("<7>%s: %s %d\n", "mISDN_unregister_clock", (char *)(& iclock->name), iclock->pri);
  } else {

  }
#line 158
  flags = _raw_write_lock_irqsave(& iclock_lock);
#line 159
  if ((unsigned long )iclock_current == (unsigned long )iclock) {
#line 160
    if ((*debug___1 & 33554432U) != 0U) {
#line 161
      printk("<7>Current clock source \'%s\' unregisters.\n", (char *)(& iclock->name));
    } else {

    }
#line 164
    (*(iclock->ctl))(iclock->priv, 0);
  } else {

  }
#line 166
  list_del(& iclock->list);
#line 167
  select_iclock();
#line 168
  _raw_write_unlock_irqrestore(& iclock_lock, flags);
#line 169
  return;
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void mISDN_clock_update(struct mISDNclock *iclock , int samples , struct timeval *tv ) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;

  {
#line 180
  flags = _raw_write_lock_irqsave(& iclock_lock);
#line 181
  if ((unsigned long )iclock_current != (unsigned long )iclock) {
#line 182
    printk("<3>%s: \'%s\' sends us clock updates, but we do listen to \'%s\'. This is a bug!\n",
           "mISDN_clock_update", (char *)(& iclock->name), (unsigned long )iclock_current != (unsigned long )((struct mISDNclock *)0) ? (char *)(& iclock_current->name) : (char *)"nothing");
#line 186
    (*(iclock->ctl))(iclock->priv, 0);
#line 187
    _raw_write_unlock_irqrestore(& iclock_lock, flags);
#line 188
    return;
  } else {

  }
#line 190
  if (iclock_tv_valid != 0) {
#line 192
    iclock_count = (int )((u16 )samples) + (int )iclock_count;
#line 193
    if ((unsigned long )tv != (unsigned long )((struct timeval *)0)) {
#line 194
      iclock_tv.tv_sec = tv->tv_sec;
#line 195
      iclock_tv.tv_usec = tv->tv_usec;
    } else {
#line 197
      do_gettimeofday(& iclock_tv);
    }
  } else {
#line 200
    if ((unsigned long )tv != (unsigned long )((struct timeval *)0)) {
#line 201
      tv_now.tv_sec = tv->tv_sec;
#line 202
      tv_now.tv_usec = tv->tv_usec;
    } else {
#line 204
      do_gettimeofday(& tv_now);
    }
#line 205
    elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 206
    elapsed_8000th = (int )((unsigned int )(tv_now.tv_usec / 125L) - (unsigned int )(iclock_tv.tv_usec / 125L));
#line 208
    if (elapsed_8000th < 0) {
#line 209
      elapsed_sec = elapsed_sec + -1L;
#line 210
      elapsed_8000th = elapsed_8000th + 8000;
    } else {

    }
#line 213
    iclock_count = ((unsigned int )((u16 )elapsed_sec) * 8000U + (unsigned int )((u16 )elapsed_8000th)) + (unsigned int )iclock_count;
#line 214
    iclock_tv.tv_sec = tv_now.tv_sec;
#line 215
    iclock_tv.tv_usec = tv_now.tv_usec;
#line 216
    iclock_tv_valid = 1;
#line 217
    if ((*debug___1 & 33554432U) != 0U) {
#line 218
      printk("Received first clock from source \'%s\'.\n", (unsigned long )iclock_current != (unsigned long )((struct mISDNclock *)0) ? (char *)(& iclock_current->name) : (char *)"nothing");
    } else {

    }
  }
#line 221
  _raw_write_unlock_irqrestore(& iclock_lock, flags);
#line 222
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
unsigned short mISDN_clock_get(void) 
{ 
  u_long flags ;
  struct timeval tv_now ;
  time_t elapsed_sec ;
  int elapsed_8000th ;
  u16 count ;

  {
#line 234
  flags = _raw_read_lock_irqsave(& iclock_lock);
#line 236
  do_gettimeofday(& tv_now);
#line 237
  elapsed_sec = tv_now.tv_sec - iclock_tv.tv_sec;
#line 238
  elapsed_8000th = (int )((unsigned int )(tv_now.tv_usec / 125L) - (unsigned int )(iclock_tv.tv_usec / 125L));
#line 239
  if (elapsed_8000th < 0) {
#line 240
    elapsed_sec = elapsed_sec + -1L;
#line 241
    elapsed_8000th = elapsed_8000th + 8000;
  } else {

  }
#line 244
  count = ((unsigned int )((u16 )elapsed_sec) * 8000U + (unsigned int )iclock_count) + (unsigned int )((u16 )elapsed_8000th);
#line 245
  _raw_read_unlock_irqrestore(& iclock_lock, flags);
#line 246
  return (count);
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void ldv_mutex_lock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 255
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 257
  mutex_lock(ldv_func_arg1);
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
int ldv_mutex_trylock_14(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 265
  tmp = mutex_trylock(ldv_func_arg1);
#line 265
  ldv_func_res = tmp;
#line 267
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 267
  return (tmp___0);
#line 269
  return (ldv_func_res);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/clock.c.prepared"
void ldv_mutex_unlock_15(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 277
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 279
  mutex_unlock(ldv_func_arg1);
#line 280
  return;
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_20(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) ;
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6006.rlock);
}
}
#line 156 "include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 361
extern int schedule_work(struct work_struct * ) ;
#line 372
extern bool flush_work_sync(struct work_struct * ) ;
#line 539 "include/linux/skbuff.h"
extern void consume_skb(struct sk_buff * ) ;
#line 908 "include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct sk_buff *tmp ;

  {
#line 910
  tmp = (struct sk_buff *)list;
#line 910
  list->next = tmp;
#line 910
  list->prev = tmp;
#line 911
  list->qlen = 0U;
#line 912
  return;
}
}
#line 922 "include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list ) 
{ 
  struct lock_class_key __key ;

  {
#line 924
  spinlock_check(& list->lock);
#line 924
  __raw_spin_lock_init(& list->lock.ldv_6006.rlock, "&(&list->lock)->rlock", & __key);
#line 925
  __skb_queue_head_init(list);
#line 926
  return;
}
}
#line 1084
extern void skb_queue_tail(struct sk_buff_head * , struct sk_buff * ) ;
#line 1116
extern struct sk_buff *skb_dequeue(struct sk_buff_head * ) ;
#line 525 "include/linux/mISDNif.h"
__inline static struct sk_buff *mI_alloc_skb(unsigned int len , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  long tmp ;

  {
#line 529
  skb = alloc_skb(len + 8U, gfp_mask);
#line 530
  tmp = __builtin_expect((unsigned long )skb != (unsigned long )((struct sk_buff *)0),
                         1L);
#line 530
  if (tmp != 0L) {
#line 531
    skb_reserve(skb, 8);
  } else {

  }
#line 532
  return (skb);
}
}
#line 536 "include/linux/mISDNif.h"
__inline static struct sk_buff *_alloc_mISDN_skb(u_int prim , u_int id , u_int len ,
                                                 void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;
  struct mISDNhead *hh ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___1 ;

  {
#line 538
  tmp = mI_alloc_skb(len, gfp_mask);
#line 538
  skb = tmp;
#line 541
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 542
    return (0);
  } else {

  }
#line 543
  if (len != 0U) {
#line 544
    __len = (size_t )len;
#line 544
    tmp___1 = skb_put(skb, len);
#line 544
    __ret = __builtin_memcpy((void *)tmp___1, (void const   *)dp, __len);
  } else {

  }
#line 545
  hh = (struct mISDNhead *)(& skb->cb);
#line 546
  hh->prim = prim;
#line 547
  hh->id = id;
#line 548
  return (skb);
}
}
#line 552 "include/linux/mISDNif.h"
__inline static void _queue_data(struct mISDNchannel *ch , u_int prim , u_int id ,
                                 u_int len , void *dp , gfp_t gfp_mask ) 
{ 
  struct sk_buff *skb ;
  int tmp ;

  {
#line 557
  if ((unsigned long )ch->peer == (unsigned long )((struct mISDNchannel *)0)) {
#line 558
    return;
  } else {

  }
#line 559
  skb = _alloc_mISDN_skb(prim, id, len, dp, gfp_mask);
#line 560
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 561
    return;
  } else {

  }
#line 562
  tmp = (*(ch->recv))(ch->peer, skb);
#line 562
  if (tmp != 0) {
#line 563
    consume_skb(skb);
  } else {

  }
#line 564
  return;
}
}
#line 168 "include/linux/mISDNhw.h"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) ;
#line 169
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) ;
#line 170
int mISDN_freedchannel(struct dchannel *ch ) ;
#line 171
void mISDN_clear_bchannel(struct bchannel *ch ) ;
#line 172
int mISDN_freebchannel(struct bchannel *ch ) ;
#line 173
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) ;
#line 175
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) ;
#line 176
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) ;
#line 177
void recv_Dchannel(struct dchannel *dch ) ;
#line 178
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) ;
#line 179
void recv_Bchannel(struct bchannel *bch , unsigned int id ) ;
#line 180
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) ;
#line 181
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) ;
#line 182
void confirm_Bsend(struct bchannel *bch ) ;
#line 183
int get_next_bframe(struct bchannel *bch ) ;
#line 184
int get_next_dframe(struct dchannel *dch ) ;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void dchannel_bh(struct work_struct *ws ) 
{ 
  struct dchannel *dch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 56
  __mptr = (struct work_struct  const  *)ws;
#line 56
  dch = (struct dchannel *)__mptr + 0xfffffffffffffb08UL;
#line 60
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 60
  if (tmp___0 != 0) {
#line 61
    goto ldv_38666;
    ldv_38665: 
#line 62
    tmp = __builtin_expect((unsigned long )dch->dev.D.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
#line 62
    if (tmp != 0L) {
#line 63
      err = (*(dch->dev.D.recv))(dch->dev.D.peer, skb);
#line 64
      if (err != 0) {
#line 65
        consume_skb(skb);
      } else {

      }
    } else {
#line 67
      consume_skb(skb);
    }
    ldv_38666: 
#line 61
    skb = skb_dequeue(& dch->rqueue);
#line 61
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 62
      goto ldv_38665;
    } else {

    }

  } else {

  }
#line 70
  tmp___1 = test_and_clear_bit(31, (unsigned long volatile   *)(& dch->Flags));
#line 70
  if (tmp___1 != 0) {
#line 71
    if ((unsigned long )dch->phfunc != (unsigned long )((void (*)(struct dchannel * ))0)) {
#line 72
      (*(dch->phfunc))(dch);
    } else {

    }
  } else {

  }
#line 73
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void bchannel_bh(struct work_struct *ws ) 
{ 
  struct bchannel *bch ;
  struct work_struct  const  *__mptr ;
  struct sk_buff *skb ;
  int err ;
  long tmp ;
  int tmp___0 ;

  {
#line 79
  __mptr = (struct work_struct  const  *)ws;
#line 79
  bch = (struct bchannel *)__mptr + 0xffffffffffffffa0UL;
#line 83
  tmp___0 = test_and_clear_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 83
  if (tmp___0 != 0) {
#line 84
    goto ldv_38677;
    ldv_38676: 
#line 85
    bch->rcount = bch->rcount - 1;
#line 86
    tmp = __builtin_expect((unsigned long )bch->ch.peer != (unsigned long )((struct mISDNchannel *)0),
                           1L);
#line 86
    if (tmp != 0L) {
#line 87
      err = (*(bch->ch.recv))(bch->ch.peer, skb);
#line 88
      if (err != 0) {
#line 89
        consume_skb(skb);
      } else {

      }
    } else {
#line 91
      consume_skb(skb);
    }
    ldv_38677: 
#line 84
    skb = skb_dequeue(& bch->rqueue);
#line 84
    if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 85
      goto ldv_38676;
    } else {

    }

  } else {

  }
#line 90
  return;
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_initdchannel(struct dchannel *ch , int maxlen , void *phf ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 99
  test_and_set_bit(13, (unsigned long volatile   *)(& ch->Flags));
#line 100
  ch->maxlen = maxlen;
#line 101
  ch->hw = 0;
#line 102
  ch->rx_skb = 0;
#line 103
  ch->tx_skb = 0;
#line 104
  ch->tx_idx = 0;
#line 105
  ch->phfunc = (void (*)(struct dchannel * ))phf;
#line 106
  skb_queue_head_init(& ch->squeue);
#line 107
  skb_queue_head_init(& ch->rqueue);
#line 108
  INIT_LIST_HEAD(& ch->dev.bchannels);
#line 109
  __init_work(& ch->workq, 0);
#line 109
  __constr_expr_0.counter = 2097664L;
#line 109
  ch->workq.data = __constr_expr_0;
#line 109
  lockdep_init_map(& ch->workq.lockdep_map, "(&ch->workq)", & __key, 0);
#line 109
  INIT_LIST_HEAD(& ch->workq.entry);
#line 109
  ch->workq.func = & dchannel_bh;
#line 110
  return (0);
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_initbchannel(struct bchannel *ch , int maxlen ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 117
  ch->Flags = 0UL;
#line 118
  ch->maxlen = maxlen;
#line 119
  ch->hw = 0;
#line 120
  ch->rx_skb = 0;
#line 121
  ch->tx_skb = 0;
#line 122
  ch->tx_idx = 0;
#line 123
  skb_queue_head_init(& ch->rqueue);
#line 124
  ch->rcount = 0;
#line 125
  ch->next_skb = 0;
#line 126
  __init_work(& ch->workq, 0);
#line 126
  __constr_expr_0.counter = 2097664L;
#line 126
  ch->workq.data = __constr_expr_0;
#line 126
  lockdep_init_map(& ch->workq.lockdep_map, "(&ch->workq)", & __key, 0);
#line 126
  INIT_LIST_HEAD(& ch->workq.entry);
#line 126
  ch->workq.func = & bchannel_bh;
#line 127
  return (0);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_freedchannel(struct dchannel *ch ) 
{ 


  {
#line 134
  if ((unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 135
    consume_skb(ch->tx_skb);
#line 136
    ch->tx_skb = 0;
  } else {

  }
#line 138
  if ((unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 139
    consume_skb(ch->rx_skb);
#line 140
    ch->rx_skb = 0;
  } else {

  }
#line 142
  skb_queue_purge(& ch->squeue);
#line 143
  skb_queue_purge(& ch->rqueue);
#line 144
  flush_work_sync(& ch->workq);
#line 145
  return (0);
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void mISDN_clear_bchannel(struct bchannel *ch ) 
{ 


  {
#line 152
  if ((unsigned long )ch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 153
    consume_skb(ch->tx_skb);
#line 154
    ch->tx_skb = 0;
  } else {

  }
#line 156
  ch->tx_idx = 0;
#line 157
  if ((unsigned long )ch->rx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 158
    consume_skb(ch->rx_skb);
#line 159
    ch->rx_skb = 0;
  } else {

  }
#line 161
  if ((unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0)) {
#line 162
    consume_skb(ch->next_skb);
#line 163
    ch->next_skb = 0;
  } else {

  }
#line 165
  test_and_clear_bit(0, (unsigned long volatile   *)(& ch->Flags));
#line 166
  test_and_clear_bit(1, (unsigned long volatile   *)(& ch->Flags));
#line 167
  test_and_clear_bit(6, (unsigned long volatile   *)(& ch->Flags));
#line 168
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int mISDN_freebchannel(struct bchannel *ch ) 
{ 


  {
#line 174
  mISDN_clear_bchannel(ch);
#line 175
  skb_queue_purge(& ch->rqueue);
#line 176
  ch->rcount = 0;
#line 177
  flush_work_sync(& ch->workq);
#line 178
  return (0);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
__inline static u_int get_sapi_tei(u_char *p ) 
{ 
  u_int sapi ;
  u_int tei ;

  {
#line 187
  sapi = (u_int )((int )*p >> 2);
#line 188
  tei = (u_int )((int )*(p + 1UL) >> 1);
#line 189
  return ((tei << 8) | sapi);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Dchannel(struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;

  {
#line 197
  if ((dch->rx_skb)->len <= 1U) {
#line 198
    consume_skb(dch->rx_skb);
#line 199
    dch->rx_skb = 0;
#line 200
    return;
  } else {

  }
#line 202
  hh = (struct mISDNhead *)(& (dch->rx_skb)->cb);
#line 203
  hh->prim = 8194U;
#line 204
  hh->id = get_sapi_tei((dch->rx_skb)->data);
#line 205
  skb_queue_tail(& dch->rqueue, dch->rx_skb);
#line 206
  dch->rx_skb = 0;
#line 207
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 207
  schedule_work(& dch->workq);
#line 208
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Echannel(struct dchannel *ech , struct dchannel *dch ) 
{ 
  struct mISDNhead *hh ;

  {
#line 216
  if ((ech->rx_skb)->len <= 1U) {
#line 217
    consume_skb(ech->rx_skb);
#line 218
    ech->rx_skb = 0;
#line 219
    return;
  } else {

  }
#line 221
  hh = (struct mISDNhead *)(& (ech->rx_skb)->cb);
#line 222
  hh->prim = 12290U;
#line 223
  hh->id = get_sapi_tei((ech->rx_skb)->data);
#line 224
  skb_queue_tail(& dch->rqueue, ech->rx_skb);
#line 225
  ech->rx_skb = 0;
#line 226
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 226
  schedule_work(& dch->workq);
#line 227
  return;
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Bchannel(struct bchannel *bch , unsigned int id ) 
{ 
  struct mISDNhead *hh ;

  {
#line 235
  hh = (struct mISDNhead *)(& (bch->rx_skb)->cb);
#line 236
  hh->prim = 8194U;
#line 237
  hh->id = id;
#line 238
  if (bch->rcount > 63) {
#line 239
    printk("<4>B-channel %p receive queue overflow, flushing!\n", bch);
#line 241
    skb_queue_purge(& bch->rqueue);
#line 242
    bch->rcount = 0;
#line 243
    return;
  } else {

  }
#line 245
  bch->rcount = bch->rcount + 1;
#line 246
  skb_queue_tail(& bch->rqueue, bch->rx_skb);
#line 247
  bch->rx_skb = 0;
#line 248
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 248
  schedule_work(& bch->workq);
#line 249
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Dchannel_skb(struct dchannel *dch , struct sk_buff *skb ) 
{ 


  {
#line 255
  skb_queue_tail(& dch->rqueue, skb);
#line 256
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 256
  schedule_work(& dch->workq);
#line 257
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void recv_Bchannel_skb(struct bchannel *bch , struct sk_buff *skb ) 
{ 


  {
#line 263
  if (bch->rcount > 63) {
#line 264
    printk("<4>B-channel %p receive queue overflow, flushing!\n", bch);
#line 266
    skb_queue_purge(& bch->rqueue);
#line 267
    bch->rcount = 0;
  } else {

  }
#line 269
  bch->rcount = bch->rcount + 1;
#line 270
  skb_queue_tail(& bch->rqueue, skb);
#line 271
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 271
  schedule_work(& bch->workq);
#line 272
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
static void confirm_Dsend(struct dchannel *dch ) 
{ 
  struct sk_buff *skb ;

  {
#line 280
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id,
                         0U, 0, 32U);
#line 282
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 283
    printk("<3>%s: no skb id %x\n", "confirm_Dsend", ((struct mISDNhead *)(& (dch->tx_skb)->cb))->id);
#line 285
    return;
  } else {

  }
#line 287
  skb_queue_tail(& dch->rqueue, skb);
#line 288
  test_and_set_bit(30, (unsigned long volatile   *)(& dch->Flags));
#line 288
  schedule_work(& dch->workq);
#line 289
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int get_next_dframe(struct dchannel *dch ) 
{ 


  {
#line 294
  dch->tx_idx = 0;
#line 295
  dch->tx_skb = skb_dequeue(& dch->squeue);
#line 296
  if ((unsigned long )dch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 297
    confirm_Dsend(dch);
#line 298
    return (1);
  } else {

  }
#line 300
  dch->tx_skb = 0;
#line 301
  test_and_clear_bit(0, (unsigned long volatile   *)(& dch->Flags));
#line 302
  return (0);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void confirm_Bsend(struct bchannel *bch ) 
{ 
  struct sk_buff *skb ;

  {
#line 311
  if (bch->rcount > 63) {
#line 312
    printk("<4>B-channel %p receive queue overflow, flushing!\n", bch);
#line 314
    skb_queue_purge(& bch->rqueue);
#line 315
    bch->rcount = 0;
  } else {

  }
#line 317
  skb = _alloc_mISDN_skb(24578U, ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id,
                         0U, 0, 32U);
#line 319
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 320
    printk("<3>%s: no skb id %x\n", "confirm_Bsend", ((struct mISDNhead *)(& (bch->tx_skb)->cb))->id);
#line 322
    return;
  } else {

  }
#line 324
  bch->rcount = bch->rcount + 1;
#line 325
  skb_queue_tail(& bch->rqueue, skb);
#line 326
  test_and_set_bit(30, (unsigned long volatile   *)(& bch->Flags));
#line 326
  schedule_work(& bch->workq);
#line 327
  return;
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int get_next_bframe(struct bchannel *bch ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 333
  bch->tx_idx = 0;
#line 334
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& bch->Flags));
#line 334
  if (tmp___0 != 0) {
#line 335
    bch->tx_skb = bch->next_skb;
#line 336
    if ((unsigned long )bch->tx_skb != (unsigned long )((struct sk_buff *)0)) {
#line 337
      bch->next_skb = 0;
#line 338
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
#line 339
      tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& bch->Flags));
#line 339
      if (tmp == 0) {
#line 340
        confirm_Bsend(bch);
      } else {

      }
#line 341
      return (1);
    } else {
#line 343
      test_and_clear_bit(1, (unsigned long volatile   *)(& bch->Flags));
#line 344
      printk("<4>B TX_NEXT without skb\n");
    }
  } else {

  }
#line 347
  bch->tx_skb = 0;
#line 348
  test_and_clear_bit(0, (unsigned long volatile   *)(& bch->Flags));
#line 349
  return (0);
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void queue_ch_frame(struct mISDNchannel *ch , u_int pr , int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
#line 358
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 359
    _queue_data(ch, pr, (u_int )id, 0U, 0, 32U);
  } else {
#line 361
    if ((unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0)) {
#line 362
      hh = (struct mISDNhead *)(& skb->cb);
#line 363
      hh->prim = pr;
#line 364
      hh->id = (unsigned int )id;
#line 365
      tmp = (*(ch->recv))(ch->peer, skb);
#line 365
      if (tmp == 0) {
#line 366
        return;
      } else {

      }
    } else {

    }
#line 368
    consume_skb(skb);
  }
#line 370
  return;
}
}
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int dchannel_senddata(struct dchannel *ch , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
#line 377
  if (skb->len == 0U) {
#line 378
    printk("<4>%s: skb too small\n", "dchannel_senddata");
#line 379
    return (-22);
  } else {

  }
#line 381
  if (skb->len > (unsigned int )ch->maxlen) {
#line 382
    printk("<4>%s: skb too large(%d/%d)\n", "dchannel_senddata", skb->len, ch->maxlen);
#line 384
    return (-22);
  } else {

  }
#line 387
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
#line 387
  if (tmp != 0) {
#line 388
    skb_queue_tail(& ch->squeue, skb);
#line 389
    return (0);
  } else {
#line 392
    ch->tx_skb = skb;
#line 393
    ch->tx_idx = 0;
#line 394
    return (1);
  }
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int bchannel_senddata(struct bchannel *ch , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
#line 404
  if (skb->len == 0U) {
#line 405
    printk("<4>%s: skb too small\n", "bchannel_senddata");
#line 406
    return (-22);
  } else {

  }
#line 408
  if (skb->len > (unsigned int )ch->maxlen) {
#line 409
    printk("<4>%s: skb too large(%d/%d)\n", "bchannel_senddata", skb->len, ch->maxlen);
#line 411
    return (-22);
  } else {

  }
#line 415
  if ((unsigned long )ch->next_skb != (unsigned long )((struct sk_buff *)0)) {
#line 416
    printk("<4>%s: next_skb exist ERROR (skb->len=%d next_skb->len=%d)\n", "bchannel_senddata",
           skb->len, (ch->next_skb)->len);
#line 419
    return (-16);
  } else {

  }
#line 421
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& ch->Flags));
#line 421
  if (tmp != 0) {
#line 422
    test_and_set_bit(1, (unsigned long volatile   *)(& ch->Flags));
#line 423
    ch->next_skb = skb;
#line 424
    return (0);
  } else {
#line 427
    ch->tx_skb = skb;
#line 428
    ch->tx_idx = 0;
#line 429
    return (1);
  }
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void ldv_mutex_lock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 439
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 441
  mutex_lock(ldv_func_arg1);
#line 442
  return;
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
int ldv_mutex_trylock_20(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 449
  tmp = mutex_trylock(ldv_func_arg1);
#line 449
  ldv_func_res = tmp;
#line 451
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 451
  return (tmp___0);
#line 453
  return (ldv_func_res);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/hwchannel.c.prepared"
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 461
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 463
  mutex_unlock(ldv_func_arg1);
#line 464
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 176 "include/linux/list.h"
__inline static int list_is_last(struct list_head  const  *list , struct list_head  const  *head ) 
{ 


  {
#line 179
  return ((unsigned long )((struct list_head  const  *)list->next) == (unsigned long )head);
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 581 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 583
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2877;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2877;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2877;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2877;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2877: ;
#line 14
  return (pfo_ret__);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 171
int ldv_mutex_trylock_26(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) ;
#line 31
void ldv_mutex_lock_lmutex_of_mISDNstack(struct mutex *lock ) ;
#line 35
void ldv_mutex_unlock_lmutex_of_mISDNstack(struct mutex *lock ) ;
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 91
extern void complete(struct completion * ) ;
#line 562 "include/linux/skbuff.h"
extern struct sk_buff *skb_copy(struct sk_buff  const  * , gfp_t  ) ;
#line 643 "include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head  const  *list ) 
{ 


  {
#line 645
  return ((unsigned long )((struct sk_buff *)list->next) == (unsigned long )((struct sk_buff *)list));
}
}
#line 170 "include/linux/signal.h"
__inline static void sigfillset(sigset_t *set ) 
{ 


  {
#line 172
  switch (1) {
  default: 
#line 174
  memset((void *)set, -1, 8UL);
#line 175
  goto ldv_26318;
  case 2: 
#line 176
  set->sig[1] = 0xffffffffffffffffUL;
  case 1: 
#line 177
  set->sig[0] = 0xffffffffffffffffUL;
#line 178
  goto ldv_26318;
  }
  ldv_26318: ;
#line 181
  return;
}
}
#line 361 "include/linux/sched.h"
extern void schedule(void) ;
#line 2131
extern int wake_up_process(struct task_struct * ) ;
#line 2458 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2460
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2460
  return (tmp);
}
}
#line 2484 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2486
  tmp = test_tsk_thread_flag(p, 2);
#line 2486
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2486
  return ((int )tmp___0);
}
}
#line 585 "include/linux/mISDNif.h"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/core.h"
int create_teimanager(struct mISDNdevice *dev ) ;
#line 56
void delete_teimanager(struct mISDNchannel *ch ) ;
#line 62
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 63
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) ;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static u_int *debug___2  ;
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
__inline static void _queue_message(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;
  long tmp___0 ;

  {
#line 59
  hh = (struct mISDNhead *)(& skb->cb);
#line 61
  if ((*debug___2 & 64U) != 0U) {
#line 62
    printk("<7>%s prim(%x) id(%x) %p\n", "_queue_message", hh->prim, hh->id, skb);
  } else {

  }
#line 64
  skb_queue_tail(& st->msgq, skb);
#line 65
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 65
  tmp___0 = __builtin_expect(tmp == 0, 1L);
#line 65
  if (tmp___0 != 0L) {
#line 66
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
#line 67
    __wake_up(& st->workq, 1U, 1, 0);
  } else {

  }
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static int mISDN_queue_message(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
#line 74
  _queue_message(ch->st, skb);
#line 75
  return (0);
}
}
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static struct mISDNchannel *get_channel4id(struct mISDNstack *st , u_int id ) 
{ 
  struct mISDNchannel *ch ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 83
  ldv_mutex_lock_28(& st->lmutex);
#line 84
  __mptr = (struct list_head  const  *)st->layer2.next;
#line 84
  ch = (struct mISDNchannel *)__mptr;
#line 84
  goto ldv_38723;
  ldv_38722: ;
#line 85
  if (ch->nr == id) {
#line 86
    goto unlock;
  } else {

  }
#line 84
  __mptr___0 = (struct list_head  const  *)ch->list.next;
#line 84
  ch = (struct mISDNchannel *)__mptr___0;
  ldv_38723: ;
#line 84
  if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 85
    goto ldv_38722;
  } else {

  }
#line 88
  ch = 0;
  unlock: 
#line 90
  ldv_mutex_unlock_29(& st->lmutex);
#line 91
  return (ch);
}
}
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static void send_socklist(struct mISDN_sock_list *sl , struct sk_buff *skb ) 
{ 
  struct hlist_node *node ;
  struct sock *sk ;
  struct sk_buff *cskb ;
  int tmp ;
  struct hlist_node  const  *__mptr ;

  {
#line 99
  cskb = 0;
#line 101
  _raw_read_lock(& sl->lock);
#line 102
  node = sl->head.first;
#line 102
  goto ldv_38739;
  ldv_38738: ;
#line 103
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) != 2U) {
#line 104
    goto ldv_38735;
  } else {

  }
#line 105
  if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
#line 106
    cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
  } else {

  }
#line 107
  if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
#line 108
    printk("<4>%s no skb\n", "send_socklist");
#line 109
    goto ldv_38737;
  } else {

  }
#line 111
  tmp = sock_queue_rcv_skb(sk, cskb);
#line 111
  if (tmp == 0) {
#line 112
    cskb = 0;
  } else {

  }
  ldv_38735: 
#line 102
  node = node->next;
  ldv_38739: ;
#line 102
  if ((unsigned long )node != (unsigned long )((struct hlist_node *)0)) {
#line 102
    __mptr = (struct hlist_node  const  *)node;
#line 102
    sk = (struct sock *)__mptr + 0xffffffffffffffc8UL;
#line 102
    if (1 != 0) {
#line 103
      goto ldv_38738;
    } else {
#line 105
      goto ldv_38737;
    }
  } else {

  }
  ldv_38737: 
#line 114
  _raw_read_unlock(& sl->lock);
#line 115
  if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
#line 116
    consume_skb(cskb);
  } else {

  }
#line 117
  return;
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static void send_layer2(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct sk_buff *cskb ;
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 123
  hh = (struct mISDNhead *)(& skb->cb);
#line 127
  if ((unsigned long )st == (unsigned long )((struct mISDNstack *)0)) {
#line 128
    return;
  } else {

  }
#line 129
  ldv_mutex_lock_30(& st->lmutex);
#line 130
  if ((hh->id & 65535U) == 65535U) {
#line 131
    __mptr = (struct list_head  const  *)st->layer2.next;
#line 131
    ch = (struct mISDNchannel *)__mptr;
#line 131
    goto ldv_38755;
    ldv_38754: 
#line 132
    tmp = list_is_last((struct list_head  const  *)(& ch->list), (struct list_head  const  *)(& st->layer2));
#line 132
    if (tmp != 0) {
#line 133
      cskb = skb;
#line 134
      skb = 0;
    } else {
#line 136
      cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
    }
#line 138
    if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
#line 139
      ret = (*(ch->send))(ch, cskb);
#line 140
      if (ret != 0) {
#line 141
        if ((*debug___2 & 16U) != 0U) {
#line 142
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr, hh->prim,
                 ch->addr, ret);
        } else {

        }
#line 147
        consume_skb(cskb);
      } else {

      }
    } else {
#line 150
      printk("<4>%s ch%d addr %x no mem\n", "send_layer2", ch->nr, ch->addr);
#line 152
      goto out;
    }
#line 131
    __mptr___0 = (struct list_head  const  *)ch->list.next;
#line 131
    ch = (struct mISDNchannel *)__mptr___0;
    ldv_38755: ;
#line 131
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 132
      goto ldv_38754;
    } else {

    }

  } else {
#line 156
    __mptr___1 = (struct list_head  const  *)st->layer2.next;
#line 156
    ch = (struct mISDNchannel *)__mptr___1;
#line 156
    goto ldv_38762;
    ldv_38761: ;
#line 157
    if ((hh->id & 65535U) == ch->addr) {
#line 158
      ret = (*(ch->send))(ch, skb);
#line 159
      if (ret == 0) {
#line 160
        skb = 0;
      } else {

      }
#line 161
      goto out;
    } else {

    }
#line 156
    __mptr___2 = (struct list_head  const  *)ch->list.next;
#line 156
    ch = (struct mISDNchannel *)__mptr___2;
    ldv_38762: ;
#line 156
    if ((unsigned long )(& ch->list) != (unsigned long )(& st->layer2)) {
#line 157
      goto ldv_38761;
    } else {

    }
#line 164
    ret = (*(((st->dev)->teimgr)->ctrl))((st->dev)->teimgr, 1024U, (void *)skb);
#line 165
    if (ret == 0) {
#line 166
      skb = 0;
    } else
#line 167
    if ((*debug___2 & 16U) != 0U) {
#line 168
      printk("<7>%s ch%d mgr prim(%x) addr(%x) err %d\n", "send_layer2", ch->nr, hh->prim,
             ch->addr, ret);
    } else {

    }
  }
  out: 
#line 173
  ldv_mutex_unlock_31(& st->lmutex);
#line 174
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 175
    consume_skb(skb);
  } else {

  }
#line 176
  return;
}
}
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
__inline static int send_msg_to_layer(struct mISDNstack *st , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  struct mISDNchannel *ch ;
  int lm ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  int __ret_warn_on ;
  long tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 181
  hh = (struct mISDNhead *)(& skb->cb);
#line 185
  lm = (int )hh->prim & 255;
#line 186
  if ((*debug___2 & 64U) != 0U) {
#line 187
    printk("<7>%s prim(%x) id(%x) %p\n", "send_msg_to_layer", hh->prim, hh->id, skb);
  } else {

  }
#line 189
  if (lm == 1) {
#line 190
    tmp = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 190
    if (tmp == 0) {
#line 191
      __net_timestamp(skb);
#line 192
      send_socklist(& st->l1sock, skb);
    } else {

    }
#line 194
    tmp___0 = (*((st->layer1)->send))(st->layer1, skb);
#line 194
    return (tmp___0);
  } else
#line 195
  if (lm == 2) {
#line 196
    tmp___1 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 196
    if (tmp___1 == 0) {
#line 197
      send_socklist(& st->l1sock, skb);
    } else {

    }
#line 198
    send_layer2(st, skb);
#line 199
    return (0);
  } else
#line 200
  if (lm == 4) {
#line 201
    ch = get_channel4id(st, hh->id);
#line 202
    if ((unsigned long )ch != (unsigned long )((struct mISDNchannel *)0)) {
#line 203
      tmp___2 = (*(ch->send))(ch, skb);
#line 203
      return (tmp___2);
    } else {
#line 205
      tmp___3 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 205
      printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer", tmp___3,
             hh->prim, hh->id);
    }
  } else
#line 209
  if (lm == 8) {
#line 210
    __ret_warn_on = lm == 8;
#line 210
    tmp___4 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 210
    if (tmp___4 != 0L) {
#line 210
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared",
                         210);
    } else {

    }
#line 210
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 211
    ch = get_channel4id(st, hh->id);
#line 212
    if ((unsigned long )ch != (unsigned long )((struct mISDNchannel *)0)) {
#line 213
      tmp___5 = (*(ch->send))(ch, skb);
#line 213
      return (tmp___5);
    } else {
#line 215
      tmp___6 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 215
      printk("<4>%s: dev(%s) prim(%x) id(%x) no channel\n", "send_msg_to_layer", tmp___6,
             hh->prim, hh->id);
    }
  } else {
#line 221
    tmp___7 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 221
    printk("<4>%s: dev(%s) prim %x not delivered\n", "send_msg_to_layer", tmp___7,
           hh->prim);
  }
#line 224
  return (-3);
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static void do_clear_stack(struct mISDNstack *st ) 
{ 


  {
#line 230
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static int mISDNStackd(void *data ) 
{ 
  struct mISDNstack *st ;
  int err ;
  struct task_struct *tmp ;
  char const   *tmp___0 ;
  struct sk_buff *skb ;
  int tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 235
  st = (struct mISDNstack *)data;
#line 236
  err = 0;
#line 238
  tmp = get_current();
#line 238
  sigfillset(& tmp->blocked);
#line 239
  if ((*debug___2 & 32U) != 0U) {
#line 240
    tmp___0 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 240
    printk("<7>mISDNStackd %s started\n", tmp___0);
  } else {

  }
#line 243
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
#line 244
    complete(st->notify);
#line 245
    st->notify = 0;
  } else {

  }
  ldv_38794: 
#line 251
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 251
  tmp___2 = __builtin_expect(tmp___1 != 0, 0L);
#line 251
  if (tmp___2 != 0L) {
#line 252
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 253
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {
#line 255
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
  }
#line 256
  goto ldv_38783;
  ldv_38786: 
#line 257
  skb = skb_dequeue(& st->msgq);
#line 258
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 259
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 262
    skb = skb_dequeue(& st->msgq);
#line 263
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 264
      goto ldv_38783;
    } else {

    }
#line 265
    test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 271
  err = send_msg_to_layer(st, skb);
#line 272
  tmp___4 = __builtin_expect(err != 0, 0L);
#line 272
  if (tmp___4 != 0L) {
#line 273
    if ((*debug___2 & 16U) != 0U) {
#line 274
      tmp___3 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 274
      printk("<7>%s: %s prim(%x) id(%x) send call(%d)\n", "mISDNStackd", tmp___3,
             ((struct mISDNhead *)(& skb->cb))->prim, ((struct mISDNhead *)(& skb->cb))->id,
             err);
    } else {

    }
#line 280
    consume_skb(skb);
#line 281
    goto ldv_38783;
  } else {

  }
#line 283
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 283
  tmp___6 = __builtin_expect(tmp___5 != 0, 0L);
#line 283
  if (tmp___6 != 0L) {
#line 285
    test_and_clear_bit(0, (unsigned long volatile   *)(& st->status));
#line 287
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 289
    goto ldv_38785;
  } else {

  }
  ldv_38783: 
#line 256
  tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& st->status));
#line 256
  if (tmp___7 != 0) {
#line 257
    goto ldv_38786;
  } else {

  }
  ldv_38785: 
#line 292
  tmp___8 = constant_test_bit(2U, (unsigned long const volatile   *)(& st->status));
#line 292
  if (tmp___8 != 0) {
#line 293
    test_and_set_bit(16, (unsigned long volatile   *)(& st->status));
#line 294
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 295
    do_clear_stack(st);
#line 296
    test_and_clear_bit(2, (unsigned long volatile   *)(& st->status));
#line 297
    test_and_set_bit(3, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 299
  tmp___10 = test_and_clear_bit(3, (unsigned long volatile   *)(& st->status));
#line 299
  if (tmp___10 != 0) {
#line 300
    test_and_clear_bit(16, (unsigned long volatile   *)(& st->status));
#line 301
    test_and_set_bit(30, (unsigned long volatile   *)(& st->status));
#line 302
    tmp___9 = skb_queue_empty((struct sk_buff_head  const  *)(& st->msgq));
#line 302
    if (tmp___9 == 0) {
#line 303
      test_and_set_bit(0, (unsigned long volatile   *)(& st->status));
    } else {

    }
  } else {

  }
#line 306
  tmp___11 = constant_test_bit(15U, (unsigned long const volatile   *)(& st->status));
#line 306
  if (tmp___11 != 0) {
#line 307
    goto ldv_38787;
  } else {

  }
#line 308
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
#line 309
    complete(st->notify);
#line 310
    st->notify = 0;
  } else {

  }
#line 315
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
#line 316
  __ret = 0;
#line 316
  if ((st->status & 65535UL) == 0UL) {
#line 316
    tmp___12 = get_current();
#line 316
    __wait.flags = 0U;
#line 316
    __wait.private = (void *)tmp___12;
#line 316
    __wait.func = & autoremove_wake_function;
#line 316
    __wait.task_list.next = & __wait.task_list;
#line 316
    __wait.task_list.prev = & __wait.task_list;
    ldv_38792: 
#line 316
    prepare_to_wait(& st->workq, & __wait, 1);
#line 316
    if ((st->status & 65535UL) != 0UL) {
#line 316
      goto ldv_38790;
    } else {

    }
#line 316
    tmp___13 = get_current();
#line 316
    tmp___14 = signal_pending(tmp___13);
#line 316
    if (tmp___14 == 0) {
#line 316
      schedule();
#line 316
      goto ldv_38791;
    } else {

    }
#line 316
    __ret = -512;
#line 316
    goto ldv_38790;
    ldv_38791: ;
#line 316
    goto ldv_38792;
    ldv_38790: 
#line 316
    finish_wait(& st->workq, & __wait);
  } else {

  }
#line 318
  if ((*debug___2 & 32U) != 0U) {
#line 319
    tmp___15 = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 319
    printk("<7>%s: %s wake status %08lx\n", "mISDNStackd", tmp___15, st->status);
  } else {

  }
#line 321
  test_and_set_bit(29, (unsigned long volatile   *)(& st->status));
#line 323
  test_and_clear_bit(4, (unsigned long volatile   *)(& st->status));
#line 325
  tmp___16 = constant_test_bit(16U, (unsigned long const volatile   *)(& st->status));
#line 325
  if (tmp___16 != 0) {
#line 326
    test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
  } else {

  }
#line 331
  goto ldv_38794;
  ldv_38787: 
#line 346
  test_and_set_bit(31, (unsigned long volatile   *)(& st->status));
#line 347
  test_and_clear_bit(30, (unsigned long volatile   *)(& st->status));
#line 348
  test_and_clear_bit(29, (unsigned long volatile   *)(& st->status));
#line 349
  test_and_clear_bit(15, (unsigned long volatile   *)(& st->status));
#line 350
  skb_queue_purge(& st->msgq);
#line 351
  st->thread = 0;
#line 352
  if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
#line 353
    complete(st->notify);
#line 354
    st->notify = 0;
  } else {

  }
#line 356
  return (0);
}
}
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static int l1_receive(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 


  {
#line 362
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0)) {
#line 363
    return (-19);
  } else {

  }
#line 364
  __net_timestamp(skb);
#line 365
  _queue_message(ch->st, skb);
#line 366
  return (0);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void set_channel_address(struct mISDNchannel *ch , u_int sapi , u_int tei ) 
{ 


  {
#line 372
  ch->addr = (tei << 8) | sapi;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void __add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 378
  list_add_tail(& ch->list, & st->layer2);
#line 379
  return;
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void add_layer2(struct mISDNchannel *ch , struct mISDNstack *st ) 
{ 


  {
#line 384
  ldv_mutex_lock_32(& st->lmutex);
#line 385
  __add_layer2(ch, st);
#line 386
  ldv_mutex_unlock_33(& st->lmutex);
#line 387
  return;
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
static int st_own_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  int tmp ;

  {
#line 392
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0) || (unsigned long )(ch->st)->layer1 == (unsigned long )((struct mISDNchannel *)0)) {
#line 393
    return (-22);
  } else {

  }
#line 394
  tmp = (*(((ch->st)->layer1)->ctrl))((ch->st)->layer1, cmd, arg);
#line 394
  return (tmp);
}
}
#line 398 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
int create_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *newst ;
  int err ;
  struct completion done ;
  void *tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  char const   *tmp___0 ;
  struct task_struct *__k ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  long tmp___6 ;

  {
#line 402
  init_completion(& done);
#line 402
  done = done;
#line 404
  tmp = kzalloc(568UL, 208U);
#line 404
  newst = (struct mISDNstack *)tmp;
#line 405
  if ((unsigned long )newst == (unsigned long )((struct mISDNstack *)0)) {
#line 406
    printk("<3>kmalloc mISDN_stack failed\n");
#line 407
    return (-12);
  } else {

  }
#line 409
  newst->dev = dev;
#line 410
  INIT_LIST_HEAD(& newst->layer2);
#line 411
  newst->l1sock.head.first = 0;
#line 412
  __rwlock_init(& newst->l1sock.lock, "&newst->l1sock.lock", & __key);
#line 413
  __init_waitqueue_head(& newst->workq, & __key___0);
#line 414
  skb_queue_head_init(& newst->msgq);
#line 415
  __mutex_init(& newst->lmutex, "&newst->lmutex", & __key___1);
#line 416
  dev->D.st = newst;
#line 417
  err = create_teimanager(dev);
#line 418
  if (err != 0) {
#line 419
    printk("<3>kmalloc teimanager failed\n");
#line 420
    kfree((void const   *)newst);
#line 421
    return (err);
  } else {

  }
#line 423
  (dev->teimgr)->peer = & newst->own;
#line 424
  (dev->teimgr)->recv = & mISDN_queue_message;
#line 425
  (dev->teimgr)->st = newst;
#line 426
  newst->layer1 = & dev->D;
#line 427
  dev->D.recv = & l1_receive;
#line 428
  dev->D.peer = & newst->own;
#line 429
  newst->own.st = newst;
#line 430
  newst->own.ctrl = & st_own_ctrl;
#line 431
  newst->own.send = & mISDN_queue_message;
#line 432
  newst->own.recv = & mISDN_queue_message;
#line 433
  if ((*debug___2 & 2U) != 0U) {
#line 434
    tmp___0 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 434
    printk("<7>%s: st(%s)\n", "create_stack", tmp___0);
  } else {

  }
#line 436
  newst->notify = & done;
#line 437
  tmp___1 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 437
  tmp___2 = kthread_create_on_node(& mISDNStackd, (void *)newst, -1, "mISDN_%s", tmp___1);
#line 437
  __k = tmp___2;
#line 437
  tmp___3 = IS_ERR((void const   *)__k);
#line 437
  if (tmp___3 == 0L) {
#line 437
    wake_up_process(__k);
  } else {

  }
#line 437
  newst->thread = __k;
#line 439
  tmp___6 = IS_ERR((void const   *)newst->thread);
#line 439
  if (tmp___6 != 0L) {
#line 440
    tmp___4 = PTR_ERR((void const   *)newst->thread);
#line 440
    err = (int )tmp___4;
#line 441
    tmp___5 = dev_name((struct device  const  *)(& (newst->dev)->dev));
#line 441
    printk("<3>mISDN:cannot create kernel thread for %s (%d)\n", tmp___5, err);
#line 444
    delete_teimanager(dev->teimgr);
#line 445
    kfree((void const   *)newst);
  } else {
#line 447
    wait_for_completion(& done);
  }
#line 448
  return (err);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
int connect_layer1(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct channel_req rq ;
  int err ;
  char const   *tmp ;

  {
#line 455
  __mptr = (struct mISDNchannel  const  *)ch;
#line 455
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb08UL;
#line 460
  if ((*debug___2 & 2U) != 0U) {
#line 461
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 461
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_layer1", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 464
  switch (protocol) {
  case (u_int )2: ;
  case (u_int )4: ;
  case (u_int )1: ;
  case (u_int )3: 
#line 469
  ch->recv = & mISDN_queue_message;
#line 470
  ch->peer = & (dev->D.st)->own;
#line 471
  ch->st = dev->D.st;
#line 472
  rq.protocol = protocol;
#line 473
  rq.adr.channel = adr->channel;
#line 474
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 475
  printk("<7>%s: ret %d (dev %d)\n", "connect_layer1", err, dev->id);
#line 477
  if (err != 0) {
#line 478
    return (err);
  } else {

  }
#line 479
  _raw_write_lock_bh(& (dev->D.st)->l1sock.lock);
#line 480
  sk_add_node(& msk->sk, & (dev->D.st)->l1sock.head);
#line 481
  _raw_write_unlock_bh(& (dev->D.st)->l1sock.lock);
#line 482
  goto ldv_38846;
  default: ;
#line 484
  return (-92);
  }
  ldv_38846: ;
#line 486
  return (0);
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
int connect_Bstack(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                   struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  struct channel_req rq2 ;
  int pmask ;
  int err ;
  struct Bprotocol *bp ;
  char const   *tmp ;

  {
#line 497
  if ((*debug___2 & 2U) != 0U) {
#line 498
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 498
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "connect_Bstack", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 502
  ch->st = dev->D.st;
#line 503
  pmask = 1 << ((int )protocol & 31);
#line 504
  if ((dev->Bprotocols & (u_int )pmask) != 0U) {
#line 505
    rq.protocol = protocol;
#line 506
    rq.adr = *adr;
#line 507
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 508
    if (err != 0) {
#line 509
      return (err);
    } else {

    }
#line 510
    ch->recv = (rq.ch)->send;
#line 511
    ch->peer = rq.ch;
#line 512
    (rq.ch)->recv = ch->send;
#line 513
    (rq.ch)->peer = ch;
#line 514
    (rq.ch)->st = dev->D.st;
  } else {
#line 516
    bp = get_Bprotocol4mask((u_int )pmask);
#line 517
    if ((unsigned long )bp == (unsigned long )((struct Bprotocol *)0)) {
#line 518
      return (-92);
    } else {

    }
#line 519
    rq2.protocol = protocol;
#line 520
    rq2.adr = *adr;
#line 521
    rq2.ch = ch;
#line 522
    err = (*(bp->create))(& rq2);
#line 523
    if (err != 0) {
#line 524
      return (err);
    } else {

    }
#line 525
    ch->recv = (rq2.ch)->send;
#line 526
    ch->peer = rq2.ch;
#line 527
    (rq2.ch)->st = dev->D.st;
#line 528
    rq.protocol = rq2.protocol;
#line 529
    rq.adr = *adr;
#line 530
    err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 531
    if (err != 0) {
#line 532
      (*((rq2.ch)->ctrl))(rq2.ch, 512U, 0);
#line 533
      return (err);
    } else {

    }
#line 535
    (rq2.ch)->recv = (rq.ch)->send;
#line 536
    (rq2.ch)->peer = rq.ch;
#line 537
    (rq.ch)->recv = (rq2.ch)->send;
#line 538
    (rq.ch)->peer = rq2.ch;
#line 539
    (rq.ch)->st = dev->D.st;
  }
#line 541
  ch->protocol = protocol;
#line 542
  ch->nr = (rq.ch)->nr;
#line 543
  return (0);
}
}
#line 547 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
int create_l2entity(struct mISDNdevice *dev , struct mISDNchannel *ch , u_int protocol ,
                    struct sockaddr_mISDN *adr ) 
{ 
  struct channel_req rq ;
  int err ;
  char const   *tmp ;

  {
#line 553
  if ((*debug___2 & 2U) != 0U) {
#line 554
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 554
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_l2entity", tmp, protocol,
           (int )adr->dev, (int )adr->channel, (int )adr->sapi, (int )adr->tei);
  } else {

  }
#line 558
  rq.protocol = 1U;
#line 559
  if ((dev->Dprotocols & 8U) != 0U) {
#line 560
    rq.protocol = 3U;
  } else {

  }
#line 561
  switch (protocol) {
  case (u_int )17: 
#line 563
  rq.protocol = 2U;
#line 564
  if ((dev->Dprotocols & 16U) != 0U) {
#line 565
    rq.protocol = 4U;
  } else {

  }
  case (u_int )16: 
#line 567
  ch->recv = & mISDN_queue_message;
#line 568
  ch->peer = & (dev->D.st)->own;
#line 569
  ch->st = dev->D.st;
#line 570
  rq.adr.channel = 0U;
#line 571
  err = (*(dev->D.ctrl))(& dev->D, 256U, (void *)(& rq));
#line 572
  printk("<7>%s: ret 1 %d\n", "create_l2entity", err);
#line 573
  if (err != 0) {
#line 574
    goto ldv_38871;
  } else {

  }
#line 575
  rq.protocol = protocol;
#line 576
  rq.adr = *adr;
#line 577
  rq.ch = ch;
#line 578
  err = (*((dev->teimgr)->ctrl))(dev->teimgr, 256U, (void *)(& rq));
#line 579
  printk("<7>%s: ret 2 %d\n", "create_l2entity", err);
#line 580
  if (err == 0) {
#line 581
    if (protocol == 17U && (unsigned long )rq.ch == (unsigned long )((struct mISDNchannel *)0)) {
#line 582
      goto ldv_38871;
    } else {

    }
#line 583
    add_layer2(rq.ch, dev->D.st);
#line 584
    (rq.ch)->recv = & mISDN_queue_message;
#line 585
    (rq.ch)->peer = & (dev->D.st)->own;
#line 586
    (*((rq.ch)->ctrl))(rq.ch, 256U, 0);
  } else {

  }
#line 588
  goto ldv_38871;
  default: 
#line 590
  err = -93;
  }
  ldv_38871: ;
#line 592
  return (err);
}
}
#line 596 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void delete_channel(struct mISDNchannel *ch ) 
{ 
  struct mISDN_sock *msk ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNchannel *pch ;
  char const   *tmp ;

  {
#line 598
  __mptr = (struct mISDNchannel  const  *)ch;
#line 598
  msk = (struct mISDN_sock *)__mptr + 0xfffffffffffffb08UL;
#line 601
  if ((unsigned long )ch->st == (unsigned long )((struct mISDNstack *)0)) {
#line 602
    printk("<4>%s: no stack\n", "delete_channel");
#line 603
    return;
  } else {

  }
#line 605
  if ((*debug___2 & 2U) != 0U) {
#line 606
    tmp = dev_name((struct device  const  *)(& ((ch->st)->dev)->dev));
#line 606
    printk("<7>%s: st(%s) protocol(%x)\n", "delete_channel", tmp, ch->protocol);
  } else {

  }
#line 608
  if (ch->protocol > 31U) {
#line 609
    if ((unsigned long )ch->peer != (unsigned long )((struct mISDNchannel *)0)) {
#line 610
      (*((ch->peer)->ctrl))(ch->peer, 512U, 0);
#line 611
      ch->peer = 0;
    } else {

    }
#line 613
    return;
  } else {

  }
#line 615
  switch (ch->protocol) {
  case (u_int )2: ;
  case (u_int )1: ;
  case (u_int )4: ;
  case (u_int )3: 
#line 620
  _raw_write_lock_bh(& (ch->st)->l1sock.lock);
#line 621
  sk_del_node_init(& msk->sk);
#line 622
  _raw_write_unlock_bh(& (ch->st)->l1sock.lock);
#line 623
  (*(((ch->st)->dev)->D.ctrl))(& ((ch->st)->dev)->D, 512U, 0);
#line 624
  goto ldv_38885;
  case (u_int )16: 
#line 626
  pch = get_channel4id(ch->st, ch->nr);
#line 627
  if ((unsigned long )pch != (unsigned long )((struct mISDNchannel *)0)) {
#line 628
    ldv_mutex_lock_34(& (ch->st)->lmutex);
#line 629
    list_del(& pch->list);
#line 630
    ldv_mutex_unlock_35(& (ch->st)->lmutex);
#line 631
    (*(pch->ctrl))(pch, 512U, 0);
#line 632
    pch = ((ch->st)->dev)->teimgr;
#line 633
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
#line 635
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 637
  goto ldv_38885;
  case (u_int )17: 
#line 639
  pch = ((ch->st)->dev)->teimgr;
#line 640
  if ((unsigned long )pch != (unsigned long )((struct mISDNchannel *)0)) {
#line 641
    (*(pch->ctrl))(pch, 512U, 0);
  } else {
#line 643
    printk("<4>%s: no l2 channel\n", "delete_channel");
  }
#line 645
  goto ldv_38885;
  default: ;
#line 647
  goto ldv_38885;
  }
  ldv_38885: ;
#line 649
  return;
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void delete_stack(struct mISDNdevice *dev ) 
{ 
  struct mISDNstack *st ;
  struct completion done ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 655
  st = dev->D.st;
#line 656
  init_completion(& done);
#line 656
  done = done;
#line 658
  if ((*debug___2 & 2U) != 0U) {
#line 659
    tmp = dev_name((struct device  const  *)(& (st->dev)->dev));
#line 659
    printk("<7>%s: st(%s)\n", "delete_stack", tmp);
  } else {

  }
#line 661
  if ((unsigned long )dev->teimgr != (unsigned long )((struct mISDNchannel *)0)) {
#line 662
    delete_teimanager(dev->teimgr);
  } else {

  }
#line 663
  if ((unsigned long )st->thread != (unsigned long )((struct task_struct *)0)) {
#line 664
    if ((unsigned long )st->notify != (unsigned long )((struct completion *)0)) {
#line 665
      printk("<4>%s: notifier in use\n", "delete_stack");
#line 667
      complete(st->notify);
    } else {

    }
#line 669
    st->notify = & done;
#line 670
    test_and_set_bit(15, (unsigned long volatile   *)(& st->status));
#line 671
    test_and_set_bit(4, (unsigned long volatile   *)(& st->status));
#line 672
    __wake_up(& st->workq, 1U, 1, 0);
#line 673
    wait_for_completion(& done);
  } else {

  }
#line 675
  tmp___0 = list_empty((struct list_head  const  *)(& st->layer2));
#line 675
  if (tmp___0 == 0) {
#line 676
    printk("<4>%s: layer2 list not empty\n", "delete_stack");
  } else {

  }
#line 678
  tmp___1 = hlist_empty((struct hlist_head  const  *)(& st->l1sock.head));
#line 678
  if (tmp___1 == 0) {
#line 679
    printk("<4>%s: layer1 list not empty\n", "delete_stack");
  } else {

  }
#line 681
  kfree((void const   *)st);
#line 682
  return;
}
}
#line 685 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void mISDN_initstack(u_int *dp ) 
{ 


  {
#line 687
  debug___2 = dp;
#line 688
  return;
}
}
#line 690 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 695
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 697
  mutex_lock(ldv_func_arg1);
#line 698
  return;
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
int ldv_mutex_trylock_26(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 705
  tmp = mutex_trylock(ldv_func_arg1);
#line 705
  ldv_func_res = tmp;
#line 707
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 707
  return (tmp___0);
#line 709
  return (ldv_func_res);
}
}
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 717
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 719
  mutex_unlock(ldv_func_arg1);
#line 720
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 727
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 729
  mutex_lock(ldv_func_arg1);
#line 730
  return;
}
}
#line 732 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 737
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 739
  mutex_unlock(ldv_func_arg1);
#line 740
  return;
}
}
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 747
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 749
  mutex_lock(ldv_func_arg1);
#line 750
  return;
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 757
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 759
  mutex_unlock(ldv_func_arg1);
#line 760
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 767
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 769
  mutex_lock(ldv_func_arg1);
#line 770
  return;
}
}
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 777
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 779
  mutex_unlock(ldv_func_arg1);
#line 780
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 787
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 789
  mutex_lock(ldv_func_arg1);
#line 790
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/stack.c.prepared"
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 797
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 799
  mutex_unlock(ldv_func_arg1);
#line 800
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_va_end(__builtin_va_list  ) ;
#line 1
void __builtin_va_start(__builtin_va_list  ) ;
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops ;
#line 860 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
#line 862
  __edi = __edi;
#line 862
  __esi = __esi;
#line 862
  __edx = __edx;
#line 862
  __ecx = __ecx;
#line 862
  __eax = __eax;
#line 862
  tmp = __builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                         0L);
#line 862
  if (tmp != 0L) {
#line 862
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"),
                         "i" (862), "i" (12UL));
    ldv_4680: ;
#line 862
    goto ldv_4680;
  } else {

  }
#line 862
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (47UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 862
  __ret = __eax;
#line 862
  return (__ret);
}
}
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 157
  return ((flags & 512UL) == 0UL);
}
}
#line 10 "include/linux/debug_locks.h"
extern int debug_locks ;
#line 324 "include/linux/lockdep.h"
extern int lock_is_held(struct lockdep_map * ) ;
#line 551
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_48(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6177;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6177;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6177;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6177;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6177: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 227 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 246 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_sched_lock_map ;
#line 252
extern int debug_lockdep_rcu_enabled(void) ;
#line 295 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  struct thread_info *tmp___0 ;
  unsigned long _flags ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 297
  lockdep_opinion = 0;
#line 299
  tmp = debug_lockdep_rcu_enabled();
#line 299
  if (tmp == 0) {
#line 300
    return (1);
  } else {

  }
#line 301
  if (debug_locks != 0) {
#line 302
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
  } else {

  }
#line 303
  if (lockdep_opinion != 0) {
#line 303
    tmp___2 = 1;
  } else {
#line 303
    tmp___0 = current_thread_info();
#line 303
    if (tmp___0->preempt_count != 0) {
#line 303
      tmp___2 = 1;
    } else {
#line 303
      _flags = arch_local_save_flags();
#line 303
      tmp___1 = arch_irqs_disabled_flags(_flags);
#line 303
      if (tmp___1 != 0) {
#line 303
        tmp___2 = 1;
      } else {
#line 303
        tmp___2 = 0;
      }
    }
  }
#line 303
  return (tmp___2);
}
}
#line 712 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 
  struct thread_info *tmp ;

  {
#line 714
  tmp = current_thread_info();
#line 714
  tmp->preempt_count = tmp->preempt_count + 1;
#line 714
  __asm__  volatile   ("": : : "memory");
#line 716
  return;
}
}
#line 731 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace(void) 
{ 
  struct thread_info *tmp ;

  {
#line 734
  __asm__  volatile   ("": : : "memory");
#line 734
  tmp = current_thread_info();
#line 734
  tmp->preempt_count = tmp->preempt_count + -1;
#line 734
  __asm__  volatile   ("": : : "memory");
#line 735
  return;
}
}
#line 65 "include/linux/jump_label.h"
__inline static bool static_branch(struct jump_label_key *key ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 67
  tmp = atomic_read((atomic_t const   *)(& key->enabled));
#line 67
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 68
    return (1);
  } else {

  }
#line 69
  return (0);
}
}
#line 94 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 89
  tmp___1 = static_branch(& __tracepoint_module_get.key);
#line 89
  if ((int )tmp___1) {
#line 89
    rcu_read_lock_sched_notrace();
#line 89
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
    tmp = debug_lockdep_rcu_enabled();
#line 89
    if (tmp != 0 && ! __warned) {
#line 89
      tmp___0 = rcu_read_lock_sched_held();
#line 89
      if (tmp___0 == 0 && 1) {
#line 89
        __warned = 1;
#line 89
        lockdep_rcu_suspicious("include/trace/events/module.h", 94, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 89
    it_func_ptr = _________p1;
#line 89
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13686: 
#line 89
      it_func = it_func_ptr->func;
#line 89
      __data = it_func_ptr->data;
#line 89
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 89
      it_func_ptr = it_func_ptr + 1;
#line 89
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
        goto ldv_13686;
      } else {

      }

    } else {

    }
#line 89
    rcu_read_unlock_sched_notrace();
  } else {

  }
#line 91
  return;
}
}
#line 444 "include/linux/module.h"
__inline static void __module_get(struct module *module ) 
{ 
  struct thread_info *tmp ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  struct thread_info *tmp___0 ;

  {
#line 446
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 447
    tmp = current_thread_info();
#line 447
    tmp->preempt_count = tmp->preempt_count + 1;
#line 447
    __asm__  volatile   ("": : : "memory");
#line 448
    __vpp_verify = 0;
#line 448
    switch (4UL) {
    case 1UL: 
#line 448
    pao_ID__ = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_14006;
    case 2UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14006;
    case 4UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14006;
    case 8UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_14006;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_14006: ;
#line 448
    goto ldv_14011;
    case 2UL: 
#line 448
    pao_ID_____0 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_14017;
    case 2UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14017;
    case 4UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14017;
    case 8UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_14017;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_14017: ;
#line 448
    goto ldv_14011;
    case 4UL: 
#line 448
    pao_ID_____1 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_14027;
    case 2UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14027;
    case 4UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14027;
    case 8UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_14027;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_14027: ;
#line 448
    goto ldv_14011;
    case 8UL: 
#line 448
    pao_ID_____2 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_14037;
    case 2UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14037;
    case 4UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_14037;
    case 8UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_14037;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_14037: ;
#line 448
    goto ldv_14011;
    default: 
#line 448
    __bad_size_call_parameter();
#line 448
    goto ldv_14011;
    }
    ldv_14011: ;
#line 449
    trace_module_get(module, (unsigned long )((void *)0));
#line 450
    __asm__  volatile   ("": : : "memory");
#line 450
    tmp___0 = current_thread_info();
#line 450
    tmp___0->preempt_count = tmp___0->preempt_count + -1;
#line 450
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 452
  return;
}
}
#line 472
extern void module_put(struct module * ) ;
#line 111 "include/linux/mISDNhw.h"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) ;
#line 140
int l1_event(struct layer1 *l1 , u_int event ) ;
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static u_int *debug___3  ;
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static struct Fsm l1fsm_s  =    {0, 0, 0, 0, 0};
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static char *strL1SState[7U]  = {      (char *)"ST_L1_F2",      (char *)"ST_L1_F3",      (char *)"ST_L1_F4",      (char *)"ST_L1_F5", 
        (char *)"ST_L1_F6",      (char *)"ST_L1_F7",      (char *)"ST_L1_F8"};
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static char *strL1Event[12U]  = 
#line 113
  {      (char *)"EV_PH_ACTIVATE",      (char *)"EV_PH_DEACTIVATE",      (char *)"EV_RESET_IND",      (char *)"EV_DEACT_CNF", 
        (char *)"EV_DEACT_IND",      (char *)"EV_POWER_UP",      (char *)"EV_ANYSIG_IND",      (char *)"EV_INFO2_IND", 
        (char *)"EV_INFO4_IND",      (char *)"EV_TIMER_DEACT",      (char *)"EV_TIMER_ACT",      (char *)"EV_TIMER3"};
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer1 *l1 ;
  struct va_format vaf ;
  va_list va ;
  char const   *tmp ;

  {
#line 132
  l1 = (struct layer1 *)fi->userdata;
#line 136
  __builtin_va_start((__va_list_tag *)(& va));
#line 138
  vaf.fmt = (char const   *)fmt;
#line 139
  vaf.va = & va;
#line 141
  tmp = dev_name((struct device  const  *)(& (l1->dch)->dev.dev));
#line 141
  printk("<7>%s: %pV\n", tmp, & vaf);
#line 143
  __builtin_va_end((__va_list_tag *)(& va));
#line 144
  return;
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_reset(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 149
  mISDN_FsmChangeState(fi, 1);
#line 150
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_deact_cnf(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
#line 155
  l1 = (struct layer1 *)fi->userdata;
#line 157
  mISDN_FsmChangeState(fi, 1);
#line 158
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l1->Flags));
#line 158
  if (tmp != 0) {
#line 159
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
#line 160
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_deact_req_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 165
  l1 = (struct layer1 *)fi->userdata;
#line 167
  mISDN_FsmChangeState(fi, 1);
#line 168
  mISDN_FsmRestartTimer(& l1->timer, 550, 9, 0, 2);
#line 169
  test_and_set_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 170
  return;
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_power_up_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
#line 175
  l1 = (struct layer1 *)fi->userdata;
#line 177
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l1->Flags));
#line 177
  if (tmp != 0) {
#line 178
    mISDN_FsmChangeState(fi, 2);
#line 179
    (*(l1->dcb))(l1->dch, 33538U);
  } else {
#line 181
    mISDN_FsmChangeState(fi, 1);
  }
#line 182
  return;
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_go_F5(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 187
  mISDN_FsmChangeState(fi, 3);
#line 188
  return;
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_go_F8(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 193
  mISDN_FsmChangeState(fi, 6);
#line 194
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_info2_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 199
  l1 = (struct layer1 *)fi->userdata;
#line 201
  mISDN_FsmChangeState(fi, 4);
#line 202
  (*(l1->dcb))(l1->dch, 33538U);
#line 203
  return;
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_info4_ind(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 208
  l1 = (struct layer1 *)fi->userdata;
#line 210
  mISDN_FsmChangeState(fi, 5);
#line 211
  (*(l1->dcb))(l1->dch, 33538U);
#line 212
  tmp = test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 212
  if (tmp != 0) {
#line 213
    mISDN_FsmDelTimer(& l1->timer, 4);
  } else {

  }
#line 214
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& l1->Flags));
#line 214
  if (tmp___1 == 0) {
#line 215
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 215
    if (tmp___0 != 0) {
#line 216
      mISDN_FsmDelTimer(& l1->timer, 3);
    } else {

    }
#line 217
    mISDN_FsmRestartTimer(& l1->timer, 110, 10, 0, 2);
#line 218
    test_and_set_bit(4, (unsigned long volatile   *)(& l1->Flags));
  } else {

  }
#line 220
  return;
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 225
  l1 = (struct layer1 *)fi->userdata;
#line 227
  test_and_clear_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 228
  tmp___0 = test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 228
  if (tmp___0 != 0) {
#line 229
    tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 229
    if (tmp != 0) {
#line 230
      (*(l1->dcb))(l1->dch, 36610U);
    } else {

    }
#line 231
    (*(l1->dcb))(l1->dch, 514U);
  } else {

  }
#line 233
  if (l1->l1m.state != 4) {
#line 234
    mISDN_FsmChangeState(fi, 1);
#line 235
    (*(l1->dcb))(l1->dch, 35586U);
  } else {

  }
#line 237
  return;
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer_act(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 242
  l1 = (struct layer1 *)fi->userdata;
#line 244
  test_and_clear_bit(4, (unsigned long volatile   *)(& l1->Flags));
#line 245
  test_and_set_bit(2, (unsigned long volatile   *)(& l1->Flags));
#line 246
  (*(l1->dcb))(l1->dch, 258U);
#line 247
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_timer_deact(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;

  {
#line 252
  l1 = (struct layer1 *)fi->userdata;
#line 254
  test_and_clear_bit(3, (unsigned long volatile   *)(& l1->Flags));
#line 255
  test_and_clear_bit(2, (unsigned long volatile   *)(& l1->Flags));
#line 256
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 256
  if (tmp != 0) {
#line 257
    (*(l1->dcb))(l1->dch, 36610U);
  } else {

  }
#line 258
  (*(l1->dcb))(l1->dch, 514U);
#line 259
  (*(l1->dcb))(l1->dch, 35842U);
#line 260
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_activate_s(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;

  {
#line 265
  l1 = (struct layer1 *)fi->userdata;
#line 267
  mISDN_FsmRestartTimer(& l1->timer, 7000, 11, 0, 2);
#line 268
  test_and_set_bit(5, (unsigned long volatile   *)(& l1->Flags));
#line 269
  (*(l1->dcb))(l1->dch, 35330U);
#line 270
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void l1_activate_no(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer1 *l1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 275
  l1 = (struct layer1 *)fi->userdata;
#line 277
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l1->Flags));
#line 277
  if (tmp___0 == 0) {
#line 277
    tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& l1->Flags));
#line 277
    if (tmp___1 == 0) {
#line 279
      test_and_clear_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 280
      tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& l1->Flags));
#line 280
      if (tmp != 0) {
#line 281
        (*(l1->dcb))(l1->dch, 36610U);
      } else {

      }
#line 282
      (*(l1->dcb))(l1->dch, 514U);
    } else {

    }
  } else {

  }
#line 284
  return;
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static struct FsmNode L1SFnList[44U]  = 
#line 286
  {      {1, 0, & l1_activate_s}, 
        {4, 0, & l1_activate_no}, 
        {6, 0, & l1_activate_no}, 
        {1, 2, & l1_reset}, 
        {2, 2, & l1_reset}, 
        {3, 2, & l1_reset}, 
        {4, 2, & l1_reset}, 
        {5, 2, & l1_reset}, 
        {6, 2, & l1_reset}, 
        {1, 3, & l1_deact_cnf}, 
        {2, 3, & l1_deact_cnf}, 
        {3, 3, & l1_deact_cnf}, 
        {4, 3, & l1_deact_cnf}, 
        {5, 3, & l1_deact_cnf}, 
        {6, 3, & l1_deact_cnf}, 
        {4, 4, & l1_deact_req_s}, 
        {5, 4, & l1_deact_req_s}, 
        {6, 4, & l1_deact_req_s}, 
        {1, 5, & l1_power_up_s}, 
        {2, 6, & l1_go_F5}, 
        {4, 6, & l1_go_F8}, 
        {5, 6, & l1_go_F8}, 
        {1, 7, & l1_info2_ind}, 
        {2, 7, & l1_info2_ind}, 
        {3, 7, & l1_info2_ind}, 
        {5, 7, & l1_info2_ind}, 
        {6, 7, & l1_info2_ind}, 
        {1, 8, & l1_info4_ind}, 
        {2, 8, & l1_info4_ind}, 
        {3, 8, & l1_info4_ind}, 
        {4, 8, & l1_info4_ind}, 
        {6, 8, & l1_info4_ind}, 
        {1, 11, & l1_timer3}, 
        {2, 11, & l1_timer3}, 
        {3, 11, & l1_timer3}, 
        {4, 11, & l1_timer3}, 
        {6, 11, & l1_timer3}, 
        {5, 10, & l1_timer_act}, 
        {1, 9, & l1_timer_deact}, 
        {2, 9, & l1_timer_deact}, 
        {3, 9, & l1_timer_deact}, 
        {4, 9, & l1_timer_deact}, 
        {5, 9, & l1_timer_deact}, 
        {6, 9, & l1_timer_deact}};
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
static void release_l1(struct layer1 *l1 ) 
{ 


  {
#line 336
  mISDN_FsmDelTimer(& l1->timer, 0);
#line 337
  if ((unsigned long )l1->dch != (unsigned long )((struct dchannel *)0)) {
#line 338
    (l1->dch)->l1 = 0;
  } else {

  }
#line 339
  module_put(& __this_module);
#line 340
  kfree((void const   *)l1);
#line 341
  return;
}
}
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
int l1_event(struct layer1 *l1 , u_int event ) 
{ 
  int err ;
  int tmp ;

  {
#line 346
  err = 0;
#line 348
  if ((unsigned long )l1 == (unsigned long )((struct layer1 *)0)) {
#line 349
    return (-22);
  } else {

  }
#line 350
  switch (event) {
  case (u_int )36866: 
#line 352
  mISDN_FsmEvent(& l1->l1m, 2, 0);
#line 353
  goto ldv_38903;
  case (u_int )37378: 
#line 355
  mISDN_FsmEvent(& l1->l1m, 4, 0);
#line 356
  goto ldv_38903;
  case (u_int )37122: 
#line 358
  mISDN_FsmEvent(& l1->l1m, 5, 0);
#line 359
  goto ldv_38903;
  case (u_int )37890: 
#line 361
  mISDN_FsmEvent(& l1->l1m, 3, 0);
#line 362
  goto ldv_38903;
  case (u_int )34818: 
#line 364
  mISDN_FsmEvent(& l1->l1m, 6, 0);
#line 365
  goto ldv_38903;
  case (u_int )34562: 
#line 367
  mISDN_FsmEvent(& l1->l1m, 6, 0);
#line 368
  goto ldv_38903;
  case (u_int )33282: 
#line 370
  mISDN_FsmEvent(& l1->l1m, 7, 0);
#line 371
  goto ldv_38903;
  case (u_int )34050: 
#line 373
  mISDN_FsmEvent(& l1->l1m, 8, 0);
#line 374
  goto ldv_38903;
  case (u_int )34306: 
#line 376
  mISDN_FsmEvent(& l1->l1m, 8, 0);
#line 377
  goto ldv_38903;
  case (u_int )257: 
#line 379
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l1->Flags));
#line 379
  if (tmp != 0) {
#line 380
    (*(l1->dcb))(l1->dch, 258U);
  } else {
#line 382
    test_and_set_bit(1, (unsigned long volatile   *)(& l1->Flags));
#line 383
    mISDN_FsmEvent(& l1->l1m, 0, 0);
  }
#line 385
  goto ldv_38903;
  case (u_int )512: 
#line 387
  release_l1(l1);
#line 388
  goto ldv_38903;
  default: ;
#line 390
  if ((*debug___3 & 65280U) != 0U) {
#line 391
    printk("<7>%s %x unhandled\n", "l1_event", event);
  } else {

  }
#line 393
  err = -22;
  }
  ldv_38903: ;
#line 395
  return (err);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
int create_l1(struct dchannel *dch , dchannel_l1callback *dcb ) 
{ 
  struct layer1 *nl1 ;
  void *tmp ;

  {
#line 403
  tmp = kzalloc(224UL, 32U);
#line 403
  nl1 = (struct layer1 *)tmp;
#line 404
  if ((unsigned long )nl1 == (unsigned long )((struct layer1 *)0)) {
#line 405
    printk("<3>kmalloc struct layer1 failed\n");
#line 406
    return (-12);
  } else {

  }
#line 408
  nl1->l1m.fsm = & l1fsm_s;
#line 409
  nl1->l1m.state = 1;
#line 410
  nl1->Flags = 0UL;
#line 411
  nl1->l1m.debug = (int )*debug___3 & 512;
#line 412
  nl1->l1m.userdata = (void *)nl1;
#line 413
  nl1->l1m.userint = 0;
#line 414
  nl1->l1m.printdebug = & l1m_debug;
#line 415
  nl1->dch = dch;
#line 416
  nl1->dcb = dcb;
#line 417
  mISDN_FsmInitTimer(& nl1->l1m, & nl1->timer);
#line 418
  __module_get(& __this_module);
#line 419
  dch->l1 = (void *)nl1;
#line 420
  return (0);
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
int l1_init(u_int *deb ) 
{ 


  {
#line 427
  debug___3 = deb;
#line 428
  l1fsm_s.state_count = 7;
#line 429
  l1fsm_s.event_count = 12;
#line 430
  l1fsm_s.strEvent = (char **)(& strL1Event);
#line 431
  l1fsm_s.strState = (char **)(& strL1SState);
#line 432
  mISDN_FsmNew(& l1fsm_s, (struct FsmNode *)(& L1SFnList), 44);
#line 433
  return (0);
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
void l1_cleanup(void) 
{ 


  {
#line 439
  mISDN_FsmFree(& l1fsm_s);
#line 440
  return;
}
}
#line 442 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 447
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 449
  mutex_lock(ldv_func_arg1);
#line 450
  return;
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
int ldv_mutex_trylock_48(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 457
  tmp = mutex_trylock(ldv_func_arg1);
#line 457
  ldv_func_res = tmp;
#line 459
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 459
  return (tmp___0);
#line 461
  return (ldv_func_res);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer1.c.prepared"
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 469
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 471
  mutex_unlock(ldv_func_arg1);
#line 472
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_54(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
void ldv_mutex_lock_53(struct mutex *ldv_func_arg1 ) ;
#line 560 "include/linux/skbuff.h"
extern struct sk_buff *skb_clone(struct sk_buff * , gfp_t  ) ;
#line 893 "include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head  const  *list_ ) 
{ 


  {
#line 895
  return ((__u32 )list_->qlen);
}
}
#line 1312 "include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff  const  *skb ) 
{ 


  {
#line 1314
  return ((unsigned int )((long )skb->data) - (unsigned int )((long )skb->head));
}
}
#line 1541
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
#line 92 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/isdn/mISDN/layer2.h"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) ;
#line 94
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 98
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) ;
#line 99
void TEIrelease(struct layer2 *l2 ) ;
#line 100
int TEIInit(u_int *deb ) ;
#line 101
void TEIFree(void) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static u_int *debug___4  ;
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static struct Fsm l2fsm  =    {0, 0, 0, 0, 0};
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static char *strL2State[8U]  = 
#line 61
  {      (char *)"ST_L2_1",      (char *)"ST_L2_2",      (char *)"ST_L2_3",      (char *)"ST_L2_4", 
        (char *)"ST_L2_5",      (char *)"ST_L2_6",      (char *)"ST_L2_7",      (char *)"ST_L2_8"};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static char *strL2Event[22U]  = 
#line 100
  {      (char *)"EV_L2_UI",      (char *)"EV_L2_SABME",      (char *)"EV_L2_DISC",      (char *)"EV_L2_DM", 
        (char *)"EV_L2_UA",      (char *)"EV_L2_FRMR",      (char *)"EV_L2_SUPER",      (char *)"EV_L2_I", 
        (char *)"EV_L2_DL_DATA",      (char *)"EV_L2_ACK_PULL",      (char *)"EV_L2_DL_UNITDATA",      (char *)"EV_L2_DL_ESTABLISH_REQ", 
        (char *)"EV_L2_DL_RELEASE_REQ",      (char *)"EV_L2_MDL_ASSIGN",      (char *)"EV_L2_MDL_REMOVE",      (char *)"EV_L2_MDL_ERROR", 
        (char *)"EV_L1_DEACTIVATE",      (char *)"EV_L2_T200",      (char *)"EV_L2_T203",      (char *)"EV_L2_SET_OWN_BUSY", 
        (char *)"EV_L2_CLEAR_OWN_BUSY",      (char *)"EV_L2_FRAME_ERROR"};
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2m_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct layer2 *l2 ;
  struct va_format vaf ;
  va_list va ;

  {
#line 129
  l2 = (struct layer2 *)fi->userdata;
#line 133
  if ((*debug___4 & 131072U) == 0U) {
#line 134
    return;
  } else {

  }
#line 136
  __builtin_va_start((__va_list_tag *)(& va));
#line 138
  vaf.fmt = (char const   *)fmt;
#line 139
  vaf.va = & va;
#line 141
  printk("<7>l2 (sapi %d tei %d): %pV\n", (int )l2->sapi, (int )l2->tei, & vaf);
#line 144
  __builtin_va_end((__va_list_tag *)(& va));
#line 145
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_int l2headersize(struct layer2 *l2 , int ui ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 150
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 150
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 150
  return ((u_int )((tmp != 0 && ui == 0 ? 2 : 1) + (tmp___0 != 0 ? 2 : 1)));
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_int l2addrsize(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 157
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 157
  return (tmp != 0 ? 2U : 1U);
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static u_int l2_newid(struct layer2 *l2 ) 
{ 
  u_int id ;
  u_int tmp ;

  {
#line 165
  tmp = l2->next_id;
#line 165
  l2->next_id = l2->next_id + (u_int )1;
#line 165
  id = tmp;
#line 166
  if (id == 32767U) {
#line 167
    l2->next_id = 1U;
  } else {

  }
#line 168
  id = id << 16;
#line 169
  id = (u_int )((int )l2->tei << 8) | id;
#line 170
  id = (u_int )l2->sapi | id;
#line 171
  return (id);
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2up(struct layer2 *l2 , u_int prim , struct sk_buff *skb ) 
{ 
  int err ;

  {
#line 179
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
#line 180
    return;
  } else {

  }
#line 181
  ((struct mISDNhead *)(& skb->cb))->prim = prim;
#line 182
  ((struct mISDNhead *)(& skb->cb))->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 183
  err = (*((l2->up)->send))(l2->up, skb);
#line 184
  if (err != 0) {
#line 185
    printk("<4>%s: err=%d\n", "l2up", err);
#line 186
    consume_skb(skb);
  } else {

  }
#line 188
  return;
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2up_create(struct layer2 *l2 , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
#line 197
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
#line 198
    return;
  } else {

  }
#line 199
  skb = mI_alloc_skb((unsigned int )len, 32U);
#line 200
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 201
    return;
  } else {

  }
#line 202
  hh = (struct mISDNhead *)(& skb->cb);
#line 203
  hh->prim = prim;
#line 204
  hh->id = (l2->ch.nr << 16) | l2->ch.addr;
#line 205
  if (len != 0) {
#line 206
    __len = (size_t )len;
#line 206
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 206
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 207
  err = (*((l2->up)->send))(l2->up, skb);
#line 208
  if (err != 0) {
#line 209
    printk("<4>%s: err=%d\n", "l2up_create", err);
#line 210
    consume_skb(skb);
  } else {

  }
#line 212
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_skb(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int ret ;

  {
#line 218
  ret = (*(l2->ch.recv))(l2->ch.peer, skb);
#line 219
  if (ret != 0 && (*debug___4 & 524288U) != 0U) {
#line 220
    printk("<7>l2down_skb: ret(%d)\n", ret);
  } else {

  }
#line 221
  return (ret);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_raw(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;
  int tmp___0 ;

  {
#line 227
  hh = (struct mISDNhead *)(& skb->cb);
#line 229
  if (hh->prim == 8193U) {
#line 230
    tmp = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 230
    if (tmp != 0) {
#line 231
      skb_queue_tail(& l2->down_queue, skb);
#line 232
      return (0);
    } else {

    }
#line 234
    l2->down_id = ((struct mISDNhead *)(& skb->cb))->id;
  } else {

  }
#line 236
  tmp___0 = l2down_skb(l2, skb);
#line 236
  return (tmp___0);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down(struct layer2 *l2 , u_int prim , u_int id , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int tmp ;

  {
#line 242
  hh = (struct mISDNhead *)(& skb->cb);
#line 244
  hh->prim = prim;
#line 245
  hh->id = id;
#line 246
  tmp = l2down_raw(l2, skb);
#line 246
  return (tmp);
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2down_create(struct layer2 *l2 , u_int prim , u_int id , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  int err ;
  struct mISDNhead *hh ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
#line 256
  skb = mI_alloc_skb((unsigned int )len, 32U);
#line 257
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 258
    return (-12);
  } else {

  }
#line 259
  hh = (struct mISDNhead *)(& skb->cb);
#line 260
  hh->prim = prim;
#line 261
  hh->id = id;
#line 262
  if (len != 0) {
#line 263
    __len = (size_t )len;
#line 263
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 263
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 264
  err = l2down_raw(l2, skb);
#line 265
  if (err != 0) {
#line 266
    consume_skb(skb);
  } else {

  }
#line 267
  return (err);
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int ph_data_confirm(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  struct sk_buff *nskb ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 272
  nskb = skb;
#line 273
  ret = -11;
#line 275
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& l2->flag));
#line 275
  if (tmp___0 != 0) {
#line 276
    if (hh->id == l2->down_id) {
#line 277
      nskb = skb_dequeue(& l2->down_queue);
#line 278
      if ((unsigned long )nskb != (unsigned long )((struct sk_buff *)0)) {
#line 279
        l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
#line 280
        tmp = l2down_skb(l2, nskb);
#line 280
        if (tmp != 0) {
#line 281
          consume_skb(nskb);
#line 282
          l2->down_id = 65534U;
        } else {

        }
      } else {
#line 285
        l2->down_id = 65534U;
      }
#line 286
      if (ret != 0) {
#line 287
        consume_skb(skb);
#line 288
        ret = 0;
      } else {

      }
#line 290
      if (l2->down_id == 65534U) {
#line 291
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 292
        mISDN_FsmEvent(& l2->l2m, 9, 0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 296
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& l2->flag));
#line 296
  if (tmp___2 == 0) {
#line 297
    nskb = skb_dequeue(& l2->down_queue);
#line 298
    if ((unsigned long )nskb != (unsigned long )((struct sk_buff *)0)) {
#line 299
      l2->down_id = ((struct mISDNhead *)(& nskb->cb))->id;
#line 300
      tmp___1 = l2down_skb(l2, nskb);
#line 300
      if (tmp___1 != 0) {
#line 301
        consume_skb(nskb);
#line 302
        l2->down_id = 65534U;
#line 303
        test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
      } else {

      }
    } else {
#line 306
      test_and_clear_bit(17, (unsigned long volatile   *)(& l2->flag));
    }
  } else {

  }
#line 308
  return (ret);
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2mgr(struct layer2 *l2 , u_int prim , void *arg ) 
{ 
  long c ;
  int tmp ;
  int tmp___0 ;

  {
#line 313
  c = (long )arg;
#line 315
  printk("<4>l2mgr: addr:%x prim %x %c\n", l2->id, prim, (int )((char )c));
#line 317
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 317
  if (tmp != 0) {
#line 317
    tmp___0 = constant_test_bit(15U, (unsigned long const volatile   *)(& l2->flag));
#line 317
    if (tmp___0 == 0) {
#line 319
      switch (c) {
      case 67L: ;
      case 68L: ;
      case 71L: ;
      case 72L: 
#line 324
      l2_tei(l2, prim, (unsigned long )arg);
#line 325
      goto ldv_38880;
      }
      ldv_38880: ;
    } else {

    }
  } else {

  }
#line 328
  return (0);
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void set_peer_busy(struct layer2 *l2 ) 
{ 
  __u32 tmp ;
  __u32 tmp___0 ;

  {
#line 333
  test_and_set_bit(10, (unsigned long volatile   *)(& l2->flag));
#line 334
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 334
  if (tmp != 0U) {
#line 335
    test_and_set_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 334
    tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
#line 334
    if (tmp___0 != 0U) {
#line 335
      test_and_set_bit(16, (unsigned long volatile   *)(& l2->flag));
    } else {

    }
  }
#line 336
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void clear_peer_busy(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 340
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& l2->flag));
#line 340
  if (tmp != 0) {
#line 341
    test_and_clear_bit(16, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 342
  return;
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void InitWin(struct layer2 *l2 ) 
{ 
  int i ;

  {
#line 349
  i = 0;
#line 349
  goto ldv_38892;
  ldv_38891: 
#line 350
  l2->windowar[i] = 0;
#line 349
  i = i + 1;
  ldv_38892: ;
#line 349
  if (i <= 7) {
#line 350
    goto ldv_38891;
  } else {

  }

#line 354
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int freewin(struct layer2 *l2 ) 
{ 
  int i ;
  int cnt ;

  {
#line 356
  cnt = 0;
#line 358
  i = 0;
#line 358
  goto ldv_38900;
  ldv_38899: ;
#line 359
  if ((unsigned long )l2->windowar[i] != (unsigned long )((struct sk_buff *)0)) {
#line 360
    cnt = cnt + 1;
#line 361
    consume_skb(l2->windowar[i]);
#line 362
    l2->windowar[i] = 0;
  } else {

  }
#line 358
  i = i + 1;
  ldv_38900: ;
#line 358
  if (i <= 7) {
#line 359
    goto ldv_38899;
  } else {

  }

#line 365
  return (cnt);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void ReleaseWin(struct layer2 *l2 ) 
{ 
  int cnt ;
  int tmp ;

  {
#line 371
  tmp = freewin(l2);
#line 371
  cnt = tmp;
#line 373
  if (cnt != 0) {
#line 374
    printk("<4>isdnl2 freed %d skbuffs in release\n", cnt);
  } else {

  }
#line 375
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline unsigned int cansend(struct layer2 *l2 ) 
{ 
  unsigned int p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 383
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 383
  if (tmp != 0) {
#line 384
    p1 = (l2->vs - l2->va) & 127U;
  } else {
#line 386
    p1 = (l2->vs - l2->va) & 7U;
  }
#line 387
  if (l2->window > p1) {
#line 387
    tmp___0 = constant_test_bit(10U, (unsigned long const volatile   *)(& l2->flag));
#line 387
    if (tmp___0 == 0) {
#line 387
      tmp___1 = 1;
    } else {
#line 387
      tmp___1 = 0;
    }
  } else {
#line 387
    tmp___1 = 0;
  }
#line 387
  return ((unsigned int )tmp___1);
}
}
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void clear_exception(struct layer2 *l2 ) 
{ 


  {
#line 393
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 394
  test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 395
  test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 396
  clear_peer_busy(l2);
#line 397
  return;
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int sethdraddr(struct layer2 *l2 , u_char *header , int rsp ) 
{ 
  u_char *ptr ;
  int crbit ;
  int tmp ;
  u_char *tmp___0 ;
  u_char *tmp___1 ;
  int tmp___2 ;
  u_char *tmp___3 ;
  u_char *tmp___4 ;
  int tmp___5 ;

  {
#line 402
  ptr = header;
#line 403
  crbit = rsp;
#line 405
  tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 405
  if (tmp___5 != 0) {
#line 406
    tmp = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 406
    if (tmp != 0) {
#line 407
      crbit = crbit == 0;
    } else {

    }
#line 408
    tmp___0 = ptr;
#line 408
    ptr = ptr + 1;
#line 408
    *tmp___0 = (u_char )((int )((signed char )((int )l2->sapi << 2)) | (crbit != 0 ? 2 : 0));
#line 409
    tmp___1 = ptr;
#line 409
    ptr = ptr + 1;
#line 409
    *tmp___1 = (u_char )((int )((signed char )((int )l2->tei << 1)) | 1);
#line 410
    return (2);
  } else {
#line 412
    tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 412
    if (tmp___2 != 0) {
#line 413
      crbit = crbit == 0;
    } else {

    }
#line 414
    if (crbit != 0) {
#line 415
      tmp___3 = ptr;
#line 415
      ptr = ptr + 1;
#line 415
      *tmp___3 = l2->addr.B;
    } else {
#line 417
      tmp___4 = ptr;
#line 417
      ptr = ptr + 1;
#line 417
      *tmp___4 = l2->addr.A;
    }
#line 418
    return (1);
  }
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline static void enqueue_super(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
#line 425
  tmp = l2_newid(l2);
#line 425
  tmp___0 = l2down(l2, 8193U, tmp, skb);
#line 425
  if (tmp___0 != 0) {
#line 426
    consume_skb(skb);
  } else {

  }
#line 427
  return;
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline static void enqueue_ui(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
#line 432
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 433
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
#line 434
  tmp = l2_newid(l2);
#line 434
  tmp___0 = l2down(l2, 8193U, tmp, skb);
#line 434
  if (tmp___0 != 0) {
#line 435
    consume_skb(skb);
  } else {

  }
#line 436
  return;
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsUI(u_char *data ) 
{ 


  {
#line 441
  return (((int )*data & 239) == 3);
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsUA(u_char *data ) 
{ 


  {
#line 447
  return (((int )*data & 239) == 99);
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsDM(u_char *data ) 
{ 


  {
#line 453
  return (((int )*data & 239) == 15);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsDISC(u_char *data ) 
{ 


  {
#line 459
  return (((int )*data & 239) == 67);
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsSFrame(u_char *data , struct layer2 *l2 ) 
{ 
  register u_char d ;
  int tmp ;

  {
#line 474
  d = *data;
#line 476
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 476
  if (tmp == 0) {
#line 477
    d = (unsigned int )d & 15U;
  } else {

  }
#line 478
  return (((int )d & 243) == 1 && ((int )d & 12) != 12);
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsSABME(u_char *data , struct layer2 *l2 ) 
{ 
  u_char d ;
  int tmp ;

  {
#line 484
  d = (unsigned int )*data & 239U;
#line 486
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 486
  return (tmp != 0 ? (unsigned int )d == 111U : (unsigned int )d == 47U);
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsREJ(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 492
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 492
  return (tmp != 0 ? (unsigned int )*data == 9U : ((int )*data & 15) == 9);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsFRMR(u_char *data ) 
{ 


  {
#line 499
  return (((int )*data & 239) == 135);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline int IsRNR(u_char *data , struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 505
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 505
  return (tmp != 0 ? (unsigned int )*data == 5U : ((int )*data & 15) == 5);
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int iframe_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int i ;
  int rsp ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 513
  rsp = (int )*(skb->data) & 2;
#line 515
  tmp = l2addrsize(l2);
#line 515
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 515
  i = tmp + (tmp___0 != 0 ? 2U : 1U);
#line 516
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 516
  if (tmp___1 != 0) {
#line 517
    rsp = rsp == 0;
  } else {

  }
#line 518
  if (rsp != 0) {
#line 519
    return (76);
  } else {

  }
#line 520
  if (skb->len < i) {
#line 521
    return (78);
  } else {

  }
#line 522
  if (skb->len - i > l2->maxlen) {
#line 523
    return (79);
  } else {

  }
#line 524
  return (0);
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int super_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
#line 530
  tmp = l2addrsize(l2);
#line 530
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 530
  if (skb->len != tmp + (tmp___0 != 0 ? 2U : 1U)) {
#line 532
    return (78);
  } else {

  }
#line 533
  return (0);
}
}
#line 537 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int unnum_error(struct layer2 *l2 , struct sk_buff *skb , int wantrsp ) 
{ 
  int rsp ;
  int tmp ;
  u_int tmp___0 ;

  {
#line 539
  rsp = ((int )*(skb->data) & 2) >> 1;
#line 540
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 540
  if (tmp != 0) {
#line 541
    rsp = rsp == 0;
  } else {

  }
#line 542
  if (rsp != wantrsp) {
#line 543
    return (76);
  } else {

  }
#line 544
  tmp___0 = l2addrsize(l2);
#line 544
  if (skb->len != tmp___0 + 1U) {
#line 545
    return (78);
  } else {

  }
#line 546
  return (0);
}
}
#line 550 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int UI_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  int rsp ;
  int tmp ;
  u_int tmp___0 ;

  {
#line 552
  rsp = (int )*(skb->data) & 2;
#line 553
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 553
  if (tmp != 0) {
#line 554
    rsp = rsp == 0;
  } else {

  }
#line 555
  if (rsp != 0) {
#line 556
    return (76);
  } else {

  }
#line 557
  tmp___0 = l2addrsize(l2);
#line 557
  if (skb->len > (l2->maxlen + tmp___0) + 1U) {
#line 558
    return (79);
  } else {

  }
#line 559
  return (0);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int FRMR_error(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int headers ;
  u_int tmp ;
  u_char *datap ;
  int rsp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 565
  tmp = l2addrsize(l2);
#line 565
  headers = tmp + 1U;
#line 566
  datap = skb->data + (unsigned long )headers;
#line 567
  rsp = (int )*(skb->data) & 2;
#line 569
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 569
  if (tmp___0 != 0) {
#line 570
    rsp = rsp == 0;
  } else {

  }
#line 571
  if (rsp == 0) {
#line 572
    return (76);
  } else {

  }
#line 573
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 573
  if (tmp___1 != 0) {
#line 574
    if (skb->len < headers + 5U) {
#line 575
      return (78);
    } else
#line 576
    if ((*debug___4 & 16711680U) != 0U) {
#line 577
      l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x %2x %2x", (int )*datap,
                (int )*(datap + 1UL), (int )*(datap + 2UL), (int )*(datap + 3UL),
                (int )*(datap + 4UL));
    } else
#line 581
    if (skb->len < headers + 3U) {
#line 582
      return (78);
    } else
#line 583
    if ((*debug___4 & 16711680U) != 0U) {
#line 584
      l2m_debug(& l2->l2m, (char *)"FRMR information %2x %2x %2x", (int )*datap, (int )*(datap + 1UL),
                (int )*(datap + 2UL));
    } else {

    }
  } else {

  }
#line 588
  return (0);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static unsigned int legalnr(struct layer2 *l2 , unsigned int nr ) 
{ 
  int tmp ;

  {
#line 594
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 594
  if (tmp != 0) {
#line 595
    return (((nr - l2->va) & 127U) <= ((l2->vs - l2->va) & 127U));
  } else {
#line 597
    return (((nr - l2->va) & 7U) <= ((l2->vs - l2->va) & 7U));
  }
}
}
#line 601 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void setva(struct layer2 *l2 , unsigned int nr ) 
{ 
  struct sk_buff *skb ;
  int tmp ;

  {
#line 605
  goto ldv_39003;
  ldv_39002: 
#line 606
  l2->va = l2->va + (u_int )1;
#line 607
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 607
  if (tmp != 0) {
#line 608
    l2->va = l2->va & 127U;
  } else {
#line 610
    l2->va = l2->va & 7U;
  }
#line 611
  if ((unsigned long )l2->windowar[l2->sow] != (unsigned long )((struct sk_buff *)0)) {
#line 612
    skb_trim(l2->windowar[l2->sow], 0U);
#line 613
    skb_queue_tail(& l2->tmp_queue, l2->windowar[l2->sow]);
#line 614
    l2->windowar[l2->sow] = 0;
  } else {

  }
#line 616
  l2->sow = (l2->sow + 1U) % l2->window;
  ldv_39003: ;
#line 605
  if (l2->va != nr) {
#line 606
    goto ldv_39002;
  } else {

  }
#line 618
  skb = skb_dequeue(& l2->tmp_queue);
#line 619
  goto ldv_39006;
  ldv_39005: 
#line 620
  consume_skb(skb);
#line 621
  skb = skb_dequeue(& l2->tmp_queue);
  ldv_39006: ;
#line 619
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 620
    goto ldv_39005;
  } else {

  }

#line 624
  return;
}
}
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void send_uframe(struct layer2 *l2 , struct sk_buff *skb , u_char cmd , u_char cr ) 
{ 
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
#line 631
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
#line 632
  tmp___0 = i;
#line 632
  i = i + 1;
#line 632
  tmp[tmp___0] = cmd;
#line 633
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 634
    skb_trim(skb, 0U);
  } else {
#line 636
    skb = mI_alloc_skb((unsigned int )i, 32U);
#line 637
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 638
      printk("<4>%s: can\'t alloc skbuff\n", "send_uframe");
#line 640
      return;
    } else {

    }
  }
#line 643
  __len = (size_t )i;
#line 643
  tmp___2 = skb_put(skb, (unsigned int )i);
#line 643
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& tmp), __len);
#line 644
  enqueue_super(l2, skb);
#line 645
  return;
}
}
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_char get_PollFlag(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_int tmp ;

  {
#line 651
  tmp = l2addrsize(l2);
#line 651
  return ((unsigned int )*(skb->data + (unsigned long )tmp) & 16U);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline u_char get_PollFlagFree(struct layer2 *l2 , struct sk_buff *skb ) 
{ 
  u_char PF ;

  {
#line 659
  PF = get_PollFlag(l2, skb);
#line 660
  consume_skb(skb);
#line 661
  return (PF);
}
}
#line 665 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void start_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 667
  mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, i);
#line 668
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 669
  return;
}
}
#line 672 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void restart_t200(struct layer2 *l2 , int i ) 
{ 


  {
#line 674
  mISDN_FsmRestartTimer(& l2->t200, l2->T200, 17, 0, i);
#line 675
  test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 676
  return;
}
}
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void stop_t200(struct layer2 *l2 , int i ) 
{ 
  int tmp ;

  {
#line 681
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 681
  if (tmp != 0) {
#line 682
    mISDN_FsmDelTimer(& l2->t200, i);
  } else {

  }
#line 683
  return;
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void st5_dl_release_l2l3(struct layer2 *l2 ) 
{ 
  int pr ;
  int tmp ;

  {
#line 690
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 690
  if (tmp != 0) {
#line 691
    pr = 20744;
  } else {
#line 693
    pr = 4360;
  }
#line 694
  l2up_create(l2, (u_int )pr, 0, 0);
#line 695
  return;
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void lapb_dl_release_l2l3(struct layer2 *l2 , int f ) 
{ 
  u_int tmp ;
  int tmp___0 ;

  {
#line 700
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 700
  if (tmp___0 != 0) {
#line 701
    tmp = l2_newid(l2);
#line 701
    l2down_create(l2, 513U, tmp, 0, 0);
  } else {

  }
#line 702
  l2up_create(l2, (u_int )f, 0, 0);
#line 703
  return;
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void establishlink(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;
  u_char cmd ;
  int tmp ;

  {
#line 708
  l2 = (struct layer2 *)fi->userdata;
#line 711
  clear_exception(l2);
#line 712
  l2->rc = 0;
#line 713
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 713
  cmd = tmp != 0 ? 127U : 63U;
#line 714
  send_uframe(l2, 0, (int )cmd, 0);
#line 715
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 716
  restart_t200(l2, 1);
#line 717
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 718
  freewin(l2);
#line 719
  mISDN_FsmChangeState(fi, 4);
#line 720
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_error_ua(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
#line 725
  skb = (struct sk_buff *)arg;
#line 726
  l2 = (struct layer2 *)fi->userdata;
#line 728
  tmp = get_PollFlagFree(l2, skb);
#line 728
  if ((unsigned int )tmp != 0U) {
#line 729
    l2mgr(l2, 7940U, 67);
  } else {
#line 731
    l2mgr(l2, 7940U, 68);
  }
#line 732
  return;
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
#line 738
  skb = (struct sk_buff *)arg;
#line 739
  l2 = (struct layer2 *)fi->userdata;
#line 741
  tmp = get_PollFlagFree(l2, skb);
#line 741
  if ((unsigned int )tmp != 0U) {
#line 742
    l2mgr(l2, 7940U, 66);
  } else {
#line 744
    l2mgr(l2, 7940U, 69);
#line 745
    establishlink(fi);
#line 746
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  }
#line 748
  return;
}
}
#line 751 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_mdl_error_dm(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;
  u_char tmp ;

  {
#line 753
  skb = (struct sk_buff *)arg;
#line 754
  l2 = (struct layer2 *)fi->userdata;
#line 756
  tmp = get_PollFlagFree(l2, skb);
#line 756
  if ((unsigned int )tmp != 0U) {
#line 757
    l2mgr(l2, 7940U, 66);
  } else {
#line 759
    l2mgr(l2, 7940U, 69);
  }
#line 760
  establishlink(fi);
#line 761
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 762
  return;
}
}
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_go_st3(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 767
  consume_skb((struct sk_buff *)arg);
#line 768
  mISDN_FsmChangeState(fi, 2);
#line 769
  return;
}
}
#line 772 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_mdl_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 774
  l2 = (struct layer2 *)fi->userdata;
#line 776
  mISDN_FsmChangeState(fi, 2);
#line 777
  consume_skb((struct sk_buff *)arg);
#line 778
  l2_tei(l2, 6404U, 0UL);
#line 779
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_queue_ui_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 784
  l2 = (struct layer2 *)fi->userdata;
#line 785
  skb = (struct sk_buff *)arg;
#line 787
  skb_queue_tail(& l2->ui_queue, skb);
#line 788
  mISDN_FsmChangeState(fi, 1);
#line 789
  l2_tei(l2, 6404U, 0UL);
#line 790
  return;
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_queue_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 795
  l2 = (struct layer2 *)fi->userdata;
#line 796
  skb = (struct sk_buff *)arg;
#line 798
  skb_queue_tail(& l2->ui_queue, skb);
#line 799
  return;
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void tx_ui(struct layer2 *l2 ) 
{ 
  struct sk_buff *skb ;
  u_char header[4U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___2 ;

  {
#line 808
  i = sethdraddr(l2, (u_char *)(& header), 0);
#line 809
  tmp = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 809
  if (tmp != 0) {
#line 810
    header[1] = 255U;
  } else {

  }
#line 811
  tmp___0 = i;
#line 811
  i = i + 1;
#line 811
  header[tmp___0] = 3U;
#line 812
  goto ldv_39110;
  ldv_39109: 
#line 813
  __len = (size_t )i;
#line 813
  tmp___2 = skb_push(skb, (unsigned int )i);
#line 813
  __ret = __builtin_memcpy((void *)tmp___2, (void const   *)(& header), __len);
#line 814
  enqueue_ui(l2, skb);
  ldv_39110: 
#line 812
  skb = skb_dequeue(& l2->ui_queue);
#line 812
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 813
    goto ldv_39109;
  } else {

  }

#line 817
  return;
}
}
#line 819 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 821
  l2 = (struct layer2 *)fi->userdata;
#line 822
  skb = (struct sk_buff *)arg;
#line 824
  skb_queue_tail(& l2->ui_queue, skb);
#line 825
  tx_ui(l2);
#line 826
  return;
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;

  {
#line 831
  l2 = (struct layer2 *)fi->userdata;
#line 832
  skb = (struct sk_buff *)arg;
#line 834
  tmp = l2headersize(l2, 1);
#line 834
  skb_pull(skb, tmp);
#line 839
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 840
    l2_tei(l2, 7684U, 0UL);
  } else {

  }
#line 841
  l2up(l2, 12552U, skb);
#line 842
  return;
}
}
#line 845 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_establish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 847
  skb = (struct sk_buff *)arg;
#line 848
  l2 = (struct layer2 *)fi->userdata;
#line 850
  establishlink(fi);
#line 851
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 852
  consume_skb(skb);
#line 853
  return;
}
}
#line 856 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_discard_i_setl3(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 858
  skb = (struct sk_buff *)arg;
#line 859
  l2 = (struct layer2 *)fi->userdata;
#line 861
  skb_queue_purge(& l2->i_queue);
#line 862
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 863
  test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 864
  consume_skb(skb);
#line 865
  return;
}
}
#line 868 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_l3_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 870
  skb = (struct sk_buff *)arg;
#line 871
  l2 = (struct layer2 *)fi->userdata;
#line 873
  skb_queue_purge(& l2->i_queue);
#line 874
  establishlink(fi);
#line 875
  test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 876
  consume_skb(skb);
#line 877
  return;
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 882
  l2 = (struct layer2 *)fi->userdata;
#line 883
  skb = (struct sk_buff *)arg;
#line 885
  skb_trim(skb, 0U);
#line 886
  l2up(l2, 20744U, skb);
#line 887
  return;
}
}
#line 890 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_pend_rel(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct layer2 *l2 ;

  {
#line 892
  skb = (struct sk_buff *)arg;
#line 893
  l2 = (struct layer2 *)fi->userdata;
#line 895
  test_and_set_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 896
  consume_skb(skb);
#line 897
  return;
}
}
#line 900 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_disconnect(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 902
  l2 = (struct layer2 *)fi->userdata;
#line 903
  skb = (struct sk_buff *)arg;
#line 905
  skb_queue_purge(& l2->i_queue);
#line 906
  freewin(l2);
#line 907
  mISDN_FsmChangeState(fi, 5);
#line 908
  l2->rc = 0;
#line 909
  send_uframe(l2, 0, 83, 0);
#line 910
  mISDN_FsmDelTimer(& l2->t203, 1);
#line 911
  restart_t200(l2, 2);
#line 912
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 913
    consume_skb(skb);
  } else {

  }
#line 914
  return;
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_start_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 919
  l2 = (struct layer2 *)fi->userdata;
#line 920
  skb = (struct sk_buff *)arg;
#line 922
  l2->vs = 0U;
#line 923
  l2->va = 0U;
#line 924
  l2->vr = 0U;
#line 925
  l2->sow = 0U;
#line 926
  clear_exception(l2);
#line 927
  tmp = get_PollFlag(l2, skb);
#line 927
  send_uframe(l2, 0, (int )((unsigned int )tmp | 99U), 1);
#line 928
  mISDN_FsmChangeState(fi, 6);
#line 929
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 3);
#line 930
  skb_trim(skb, 0U);
#line 931
  l2up(l2, 4104U, skb);
#line 932
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 933
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
#line 934
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_UA(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 939
  l2 = (struct layer2 *)fi->userdata;
#line 940
  skb = (struct sk_buff *)arg;
#line 942
  tmp = get_PollFlag(l2, skb);
#line 942
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 943
  return;
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_send_DM(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 948
  l2 = (struct layer2 *)fi->userdata;
#line 949
  skb = (struct sk_buff *)arg;
#line 951
  tmp = get_PollFlag(l2, skb);
#line 951
  send_uframe(l2, skb, (int )((unsigned int )tmp | 15U), 1);
#line 952
  return;
}
}
#line 955 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_restart_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int est ;
  u_char tmp ;
  __u32 tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 957
  l2 = (struct layer2 *)fi->userdata;
#line 958
  skb = (struct sk_buff *)arg;
#line 959
  est = 0;
#line 961
  tmp = get_PollFlag(l2, skb);
#line 961
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 963
  l2mgr(l2, 7940U, 70);
#line 965
  if (l2->vs != l2->va) {
#line 966
    skb_queue_purge(& l2->i_queue);
#line 967
    est = 1;
  } else {

  }
#line 970
  clear_exception(l2);
#line 971
  l2->vs = 0U;
#line 972
  l2->va = 0U;
#line 973
  l2->vr = 0U;
#line 974
  l2->sow = 0U;
#line 975
  mISDN_FsmChangeState(fi, 6);
#line 976
  stop_t200(l2, 3);
#line 977
  mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 3);
#line 979
  if (est != 0) {
#line 980
    l2up_create(l2, 4104U, 0, 0);
  } else {

  }
#line 985
  tmp___0 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 985
  if (tmp___0 != 0U) {
#line 985
    tmp___1 = cansend(l2);
#line 985
    if (tmp___1 != 0U) {
#line 986
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {

  }
#line 987
  return;
}
}
#line 990 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_stop_multi(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 992
  l2 = (struct layer2 *)fi->userdata;
#line 993
  skb = (struct sk_buff *)arg;
#line 995
  mISDN_FsmChangeState(fi, 3);
#line 996
  mISDN_FsmDelTimer(& l2->t203, 3);
#line 997
  stop_t200(l2, 4);
#line 999
  tmp = get_PollFlag(l2, skb);
#line 999
  send_uframe(l2, skb, (int )((unsigned int )tmp | 99U), 1);
#line 1000
  skb_queue_purge(& l2->i_queue);
#line 1001
  freewin(l2);
#line 1002
  lapb_dl_release_l2l3(l2, 4360);
#line 1003
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1004
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1005
  return;
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_connected(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int pr ;
  u_char tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1010
  l2 = (struct layer2 *)fi->userdata;
#line 1011
  skb = (struct sk_buff *)arg;
#line 1012
  pr = -1;
#line 1014
  tmp = get_PollFlag(l2, skb);
#line 1014
  if ((unsigned int )tmp == 0U) {
#line 1015
    l2_mdl_error_ua(fi, event, arg);
#line 1016
    return;
  } else {

  }
#line 1018
  consume_skb(skb);
#line 1019
  tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& l2->flag));
#line 1019
  if (tmp___0 != 0) {
#line 1020
    l2_disconnect(fi, event, 0);
  } else {

  }
#line 1021
  tmp___1 = test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 1021
  if (tmp___1 != 0) {
#line 1022
    pr = 20488;
  } else
#line 1023
  if (l2->vs != l2->va) {
#line 1024
    skb_queue_purge(& l2->i_queue);
#line 1025
    pr = 4104;
  } else {

  }
#line 1027
  stop_t200(l2, 5);
#line 1028
  l2->vr = 0U;
#line 1029
  l2->vs = 0U;
#line 1030
  l2->va = 0U;
#line 1031
  l2->sow = 0U;
#line 1032
  mISDN_FsmChangeState(fi, 6);
#line 1033
  mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 4);
#line 1034
  if (pr != -1) {
#line 1035
    l2up_create(l2, (u_int )pr, 0, 0);
  } else {

  }
#line 1037
  tmp___2 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1037
  if (tmp___2 != 0U) {
#line 1037
    tmp___3 = cansend(l2);
#line 1037
    if (tmp___3 != 0U) {
#line 1038
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {

  }
#line 1040
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1041
    l2_tei(l2, 7172U, 0UL);
  } else {

  }
#line 1042
  return;
}
}
#line 1045 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_released(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 1047
  l2 = (struct layer2 *)fi->userdata;
#line 1048
  skb = (struct sk_buff *)arg;
#line 1050
  tmp = get_PollFlag(l2, skb);
#line 1050
  if ((unsigned int )tmp == 0U) {
#line 1051
    l2_mdl_error_ua(fi, event, arg);
#line 1052
    return;
  } else {

  }
#line 1054
  consume_skb(skb);
#line 1055
  stop_t200(l2, 6);
#line 1056
  lapb_dl_release_l2l3(l2, 20744);
#line 1057
  mISDN_FsmChangeState(fi, 3);
#line 1058
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1059
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1060
  return;
}
}
#line 1063 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_reestablish(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 1065
  l2 = (struct layer2 *)fi->userdata;
#line 1066
  skb = (struct sk_buff *)arg;
#line 1068
  tmp = get_PollFlagFree(l2, skb);
#line 1068
  if ((unsigned int )tmp == 0U) {
#line 1069
    establishlink(fi);
#line 1070
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1072
  return;
}
}
#line 1075 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  u_char tmp___2 ;

  {
#line 1077
  l2 = (struct layer2 *)fi->userdata;
#line 1078
  skb = (struct sk_buff *)arg;
#line 1080
  tmp___2 = get_PollFlagFree(l2, skb);
#line 1080
  if ((unsigned int )tmp___2 != 0U) {
#line 1081
    stop_t200(l2, 7);
#line 1082
    tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& l2->flag));
#line 1082
    if (tmp == 0) {
#line 1083
      skb_queue_purge(& l2->i_queue);
    } else {

    }
#line 1084
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1084
    if (tmp___1 != 0) {
#line 1085
      tmp___0 = l2_newid(l2);
#line 1085
      l2down_create(l2, 513U, tmp___0, 0, 0);
    } else {

    }
#line 1087
    st5_dl_release_l2l3(l2);
#line 1088
    mISDN_FsmChangeState(fi, 3);
#line 1089
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1090
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
#line 1092
  return;
}
}
#line 1095 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_dm_release(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_char tmp ;

  {
#line 1097
  l2 = (struct layer2 *)fi->userdata;
#line 1098
  skb = (struct sk_buff *)arg;
#line 1100
  tmp = get_PollFlagFree(l2, skb);
#line 1100
  if ((unsigned int )tmp != 0U) {
#line 1101
    stop_t200(l2, 8);
#line 1102
    lapb_dl_release_l2l3(l2, 20744);
#line 1103
    mISDN_FsmChangeState(fi, 3);
#line 1104
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1105
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {

  }
#line 1107
  return;
}
}
#line 1110 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void enquiry_cr(struct layer2 *l2 , u_char typ , u_char cr , u_char pf ) 
{ 
  struct sk_buff *skb ;
  u_char tmp[4U] ;
  int i ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___5 ;

  {
#line 1116
  i = sethdraddr(l2, (u_char *)(& tmp), (int )cr);
#line 1117
  tmp___3 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1117
  if (tmp___3 != 0) {
#line 1118
    tmp___0 = i;
#line 1118
    i = i + 1;
#line 1118
    tmp[tmp___0] = typ;
#line 1119
    tmp___1 = i;
#line 1119
    i = i + 1;
#line 1119
    tmp[tmp___1] = (unsigned int )((int )((u_char )l2->vr) << 1U) | ((unsigned int )pf != 0U ? 1U : 0U);
  } else {
#line 1121
    tmp___2 = i;
#line 1121
    i = i + 1;
#line 1121
    tmp[tmp___2] = (unsigned int )(((int )((u_char )l2->vr) << 5U) | (int )typ) | ((unsigned int )pf != 0U ? 16U : 0U);
  }
#line 1122
  skb = mI_alloc_skb((unsigned int )i, 32U);
#line 1123
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 1124
    printk("<4>isdnl2 can\'t alloc sbbuff for enquiry_cr\n");
#line 1126
    return;
  } else {

  }
#line 1128
  __len = (size_t )i;
#line 1128
  tmp___5 = skb_put(skb, (unsigned int )i);
#line 1128
  __ret = __builtin_memcpy((void *)tmp___5, (void const   *)(& tmp), __len);
#line 1129
  enqueue_super(l2, skb);
#line 1130
  return;
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void enquiry_response(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 1135
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1135
  if (tmp != 0) {
#line 1136
    enquiry_cr(l2, 5, 1, 1);
  } else {
#line 1138
    enquiry_cr(l2, 1, 1, 1);
  }
#line 1139
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1140
  return;
}
}
#line 1143 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
__inline void transmit_enquiry(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 1145
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1145
  if (tmp != 0) {
#line 1146
    enquiry_cr(l2, 5, 0, 1);
  } else {
#line 1148
    enquiry_cr(l2, 1, 0, 1);
  }
#line 1149
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1150
  start_t200(l2, 9);
#line 1151
  return;
}
}
#line 1155 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void nrerrorrecovery(struct FsmInst *fi ) 
{ 
  struct layer2 *l2 ;

  {
#line 1157
  l2 = (struct layer2 *)fi->userdata;
#line 1159
  l2mgr(l2, 7940U, 74);
#line 1160
  establishlink(fi);
#line 1161
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 1162
  return;
}
}
#line 1165 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void invoke_retransmission(struct layer2 *l2 , unsigned int nr ) 
{ 
  u_int p1 ;
  int tmp ;

  {
#line 1169
  if (l2->vs != nr) {
#line 1170
    goto ldv_39269;
    ldv_39268: 
#line 1171
    l2->vs = l2->vs - (u_int )1;
#line 1172
    tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1172
    if (tmp != 0) {
#line 1173
      l2->vs = l2->vs & 127U;
#line 1174
      p1 = (l2->vs - l2->va) & 127U;
    } else {
#line 1176
      l2->vs = l2->vs & 7U;
#line 1177
      p1 = (l2->vs - l2->va) & 7U;
    }
#line 1179
    p1 = (l2->sow + p1) % l2->window;
#line 1180
    if ((unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0)) {
#line 1181
      skb_queue_head(& l2->i_queue, l2->windowar[p1]);
    } else {
#line 1183
      printk("<4>%s: windowar[%d] is NULL\n", "invoke_retransmission", p1);
    }
#line 1186
    l2->windowar[p1] = 0;
    ldv_39269: ;
#line 1170
    if (l2->vs != nr) {
#line 1171
      goto ldv_39268;
    } else {

    }
#line 1188
    mISDN_FsmEvent(& l2->l2m, 9, 0);
  } else {

  }
#line 1190
  return;
}
}
#line 1193 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int typ ;
  unsigned int nr ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  unsigned int tmp___6 ;

  {
#line 1195
  l2 = (struct layer2 *)fi->userdata;
#line 1196
  skb = (struct sk_buff *)arg;
#line 1197
  typ = 1;
#line 1200
  rsp = (int )*(skb->data) & 2;
#line 1201
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1201
  if (tmp != 0) {
#line 1202
    rsp = rsp == 0;
  } else {

  }
#line 1204
  tmp___0 = l2addrsize(l2);
#line 1204
  skb_pull(skb, tmp___0);
#line 1205
  tmp___1 = IsRNR(skb->data, l2);
#line 1205
  if (tmp___1 != 0) {
#line 1206
    set_peer_busy(l2);
#line 1207
    typ = 5;
  } else {
#line 1209
    clear_peer_busy(l2);
  }
#line 1210
  tmp___2 = IsREJ(skb->data, l2);
#line 1210
  if (tmp___2 != 0) {
#line 1211
    typ = 9;
  } else {

  }
#line 1213
  tmp___3 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1213
  if (tmp___3 != 0) {
#line 1214
    PollFlag = (int )*(skb->data + 1UL) & 1;
#line 1215
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
#line 1217
    PollFlag = (int )*(skb->data) & 16;
#line 1218
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
#line 1220
  consume_skb(skb);
#line 1222
  if (PollFlag != 0) {
#line 1223
    if (rsp != 0) {
#line 1224
      l2mgr(l2, 7940U, 65);
    } else {
#line 1226
      enquiry_response(l2);
    }
  } else {

  }
#line 1228
  tmp___6 = legalnr(l2, nr);
#line 1228
  if (tmp___6 != 0U) {
#line 1229
    if (typ == 9) {
#line 1230
      setva(l2, nr);
#line 1231
      invoke_retransmission(l2, nr);
#line 1232
      stop_t200(l2, 10);
#line 1233
      tmp___4 = mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 6);
#line 1233
      if (tmp___4 != 0) {
#line 1235
        l2m_debug(& l2->l2m, (char *)"Restart T203 ST7 REJ");
      } else {

      }
    } else
#line 1236
    if (l2->vs == nr && typ == 1) {
#line 1237
      setva(l2, nr);
#line 1238
      stop_t200(l2, 11);
#line 1239
      mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
    } else
#line 1241
    if (l2->va != nr || typ == 5) {
#line 1242
      setva(l2, nr);
#line 1243
      if (typ != 1) {
#line 1244
        mISDN_FsmDelTimer(& l2->t203, 9);
      } else {

      }
#line 1245
      restart_t200(l2, 12);
    } else {

    }
#line 1247
    tmp___5 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1247
    if (tmp___5 != 0U && typ == 1) {
#line 1248
      mISDN_FsmEvent(fi, 9, 0);
    } else {

    }
  } else {
#line 1250
    nrerrorrecovery(fi);
  }
#line 1251
  return;
}
}
#line 1254 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_i_if_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
#line 1256
  l2 = (struct layer2 *)fi->userdata;
#line 1257
  skb = (struct sk_buff *)arg;
#line 1259
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& l2->flag));
#line 1259
  if (tmp == 0) {
#line 1260
    skb_queue_tail(& l2->i_queue, skb);
  } else {
#line 1262
    consume_skb(skb);
  }
#line 1263
  return;
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_i_pull(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1268
  l2 = (struct layer2 *)fi->userdata;
#line 1269
  skb = (struct sk_buff *)arg;
#line 1271
  skb_queue_tail(& l2->i_queue, skb);
#line 1272
  mISDN_FsmEvent(fi, 9, 0);
#line 1273
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_feed_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1278
  l2 = (struct layer2 *)fi->userdata;
#line 1279
  skb = (struct sk_buff *)arg;
#line 1281
  skb_queue_tail(& l2->i_queue, skb);
#line 1282
  return;
}
}
#line 1285 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_iframe(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int i ;
  u_int ns ;
  u_int nr ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  u_int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  unsigned int tmp___6 ;
  __u32 tmp___7 ;
  int tmp___8 ;

  {
#line 1287
  l2 = (struct layer2 *)fi->userdata;
#line 1288
  skb = (struct sk_buff *)arg;
#line 1292
  tmp = l2addrsize(l2);
#line 1292
  i = (int )tmp;
#line 1293
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1293
  if (tmp___0 != 0) {
#line 1294
    PollFlag = (int )*(skb->data + ((unsigned long )i + 1UL)) & 1;
#line 1295
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1);
#line 1296
    nr = (u_int )((int )*(skb->data + ((unsigned long )i + 1UL)) >> 1) & 127U;
  } else {
#line 1298
    PollFlag = (int )*(skb->data + (unsigned long )i) & 16;
#line 1299
    ns = (u_int )((int )*(skb->data + (unsigned long )i) >> 1) & 7U;
#line 1300
    nr = (u_int )((int )*(skb->data + (unsigned long )i) >> 5) & 7U;
  }
#line 1302
  tmp___4 = constant_test_bit(9U, (unsigned long const volatile   *)(& l2->flag));
#line 1302
  if (tmp___4 != 0) {
#line 1303
    consume_skb(skb);
#line 1304
    if (PollFlag != 0) {
#line 1305
      enquiry_response(l2);
    } else {

    }
  } else
#line 1307
  if (l2->vr == ns) {
#line 1308
    l2->vr = l2->vr + (u_int )1;
#line 1309
    tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1309
    if (tmp___1 != 0) {
#line 1310
      l2->vr = l2->vr & 127U;
    } else {
#line 1312
      l2->vr = l2->vr & 7U;
    }
#line 1313
    test_and_clear_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 1314
    if (PollFlag != 0) {
#line 1315
      enquiry_response(l2);
    } else {
#line 1317
      test_and_set_bit(7, (unsigned long volatile   *)(& l2->flag));
    }
#line 1318
    tmp___2 = l2headersize(l2, 0);
#line 1318
    skb_pull(skb, tmp___2);
#line 1319
    l2up(l2, 12296U, skb);
  } else {
#line 1322
    consume_skb(skb);
#line 1323
    tmp___3 = test_and_set_bit(8, (unsigned long volatile   *)(& l2->flag));
#line 1323
    if (tmp___3 != 0) {
#line 1324
      if (PollFlag != 0) {
#line 1325
        enquiry_response(l2);
      } else {
#line 1327
        enquiry_cr(l2, 9, 1, (int )((u_char )PollFlag));
#line 1328
        test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
      }
    } else {

    }
  }
#line 1332
  tmp___6 = legalnr(l2, nr);
#line 1332
  if (tmp___6 != 0U) {
#line 1333
    tmp___5 = constant_test_bit(10U, (unsigned long const volatile   *)(& l2->flag));
#line 1333
    if (tmp___5 == 0 && fi->state == 6) {
#line 1335
      if (l2->vs == nr) {
#line 1336
        stop_t200(l2, 13);
#line 1337
        mISDN_FsmRestartTimer(& l2->t203, l2->T203, 18, 0, 7);
      } else
#line 1339
      if (l2->va != nr) {
#line 1340
        restart_t200(l2, 14);
      } else {

      }
    } else {

    }
#line 1342
    setva(l2, nr);
  } else {
#line 1344
    nrerrorrecovery(fi);
#line 1345
    return;
  }
#line 1347
  tmp___7 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1347
  if (tmp___7 != 0U && fi->state == 6) {
#line 1348
    mISDN_FsmEvent(fi, 9, 0);
  } else {

  }
#line 1349
  tmp___8 = test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1349
  if (tmp___8 != 0) {
#line 1350
    enquiry_cr(l2, 1, 1, 0);
  } else {

  }
#line 1351
  return;
}
}
#line 1354 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_tei(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int info ;
  __u32 tmp ;

  {
#line 1356
  l2 = (struct layer2 *)fi->userdata;
#line 1359
  l2->tei = (signed char )((long )arg);
#line 1360
  set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
#line 1361
  info = 1U;
#line 1362
  l2up_create(l2, 8U, 4, (void *)(& info));
#line 1363
  if (fi->state == 2) {
#line 1364
    establishlink(fi);
#line 1365
    test_and_set_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 1367
    mISDN_FsmChangeState(fi, 3);
  }
#line 1368
  tmp = skb_queue_len((struct sk_buff_head  const  *)(& l2->ui_queue));
#line 1368
  if (tmp != 0U) {
#line 1369
    tx_ui(l2);
  } else {

  }
#line 1370
  return;
}
}
#line 1373 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  u_int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1375
  l2 = (struct layer2 *)fi->userdata;
#line 1377
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1377
  if (tmp___2 != 0) {
#line 1377
    tmp___3 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1377
    if (tmp___3 != 0) {
#line 1379
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    } else {
#line 1377
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1380
  if (l2->rc == l2->N200) {
#line 1381
    mISDN_FsmChangeState(fi, 3);
#line 1382
    test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1383
    skb_queue_purge(& l2->i_queue);
#line 1384
    l2mgr(l2, 7940U, 71);
#line 1385
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1385
    if (tmp___0 != 0) {
#line 1386
      tmp = l2_newid(l2);
#line 1386
      l2down_create(l2, 513U, tmp, 0, 0);
    } else {

    }
#line 1388
    st5_dl_release_l2l3(l2);
#line 1389
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1390
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {
#line 1392
    l2->rc = l2->rc + 1;
#line 1393
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1394
    tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1394
    send_uframe(l2, 0, tmp___1 != 0 ? 127 : 63, 0);
  }
#line 1396
  return;
}
}
#line 1400 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1402
  l2 = (struct layer2 *)fi->userdata;
#line 1404
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1404
  if (tmp != 0) {
#line 1404
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1404
    if (tmp___0 != 0) {
#line 1406
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
    } else {
#line 1404
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1407
  if (l2->rc == l2->N200) {
#line 1408
    mISDN_FsmChangeState(fi, 3);
#line 1409
    test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1410
    l2mgr(l2, 7940U, 72);
#line 1411
    lapb_dl_release_l2l3(l2, 20744);
#line 1412
    if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1413
      l2_tei(l2, 7428U, 0UL);
    } else {

    }
  } else {
#line 1415
    l2->rc = l2->rc + 1;
#line 1416
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1418
    send_uframe(l2, 0, 83, 0);
  }
#line 1420
  return;
}
}
#line 1423 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1425
  l2 = (struct layer2 *)fi->userdata;
#line 1427
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1427
  if (tmp != 0) {
#line 1427
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1427
    if (tmp___0 != 0) {
#line 1429
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1430
      return;
    } else {

    }
  } else {

  }
#line 1432
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1433
  l2->rc = 0;
#line 1434
  mISDN_FsmChangeState(fi, 7);
#line 1435
  transmit_enquiry(l2);
#line 1436
  l2->rc = l2->rc + 1;
#line 1437
  return;
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_tout_200(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1442
  l2 = (struct layer2 *)fi->userdata;
#line 1444
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1444
  if (tmp != 0) {
#line 1444
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1444
    if (tmp___0 != 0) {
#line 1446
      mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 9);
#line 1447
      return;
    } else {

    }
  } else {

  }
#line 1449
  test_and_clear_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1450
  if (l2->rc == l2->N200) {
#line 1451
    l2mgr(l2, 7940U, 73);
#line 1452
    establishlink(fi);
#line 1453
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 1455
    transmit_enquiry(l2);
#line 1456
    l2->rc = l2->rc + 1;
  }
#line 1458
  return;
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st7_tout_203(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1463
  l2 = (struct layer2 *)fi->userdata;
#line 1465
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1465
  if (tmp != 0) {
#line 1465
    tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& l2->flag));
#line 1465
    if (tmp___0 != 0) {
#line 1467
      mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 9);
#line 1468
      return;
    } else {

    }
  } else {

  }
#line 1470
  mISDN_FsmChangeState(fi, 7);
#line 1471
  transmit_enquiry(l2);
#line 1472
  l2->rc = 0;
#line 1473
  return;
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_pull_iqueue(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  struct sk_buff *nskb ;
  struct sk_buff *oskb ;
  u_char header[4U] ;
  u_int i ;
  u_int p1 ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  u_int tmp___2 ;
  u_int tmp___3 ;
  u_int tmp___4 ;
  int tmp___5 ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___7 ;
  size_t __len___0 ;
  void *__ret___0 ;
  unsigned char *tmp___9 ;
  size_t __len___1 ;
  void *__ret___1 ;
  unsigned char *tmp___11 ;
  u_int tmp___12 ;
  int tmp___13 ;

  {
#line 1478
  l2 = (struct layer2 *)fi->userdata;
#line 1483
  tmp = cansend(l2);
#line 1483
  if (tmp == 0U) {
#line 1484
    return;
  } else {

  }
#line 1486
  skb = skb_dequeue(& l2->i_queue);
#line 1487
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 1488
    return;
  } else {

  }
#line 1490
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1490
  if (tmp___0 != 0) {
#line 1491
    p1 = (l2->vs - l2->va) & 127U;
  } else {
#line 1493
    p1 = (l2->vs - l2->va) & 7U;
  }
#line 1494
  p1 = (l2->sow + p1) % l2->window;
#line 1495
  if ((unsigned long )l2->windowar[p1] != (unsigned long )((struct sk_buff *)0)) {
#line 1496
    printk("<4>isdnl2 try overwrite ack queue entry %d\n", p1);
#line 1498
    consume_skb(l2->windowar[p1]);
  } else {

  }
#line 1500
  l2->windowar[p1] = skb;
#line 1501
  tmp___1 = sethdraddr(l2, (u_char *)(& header), 0);
#line 1501
  i = (u_int )tmp___1;
#line 1502
  tmp___5 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1502
  if (tmp___5 != 0) {
#line 1503
    tmp___2 = i;
#line 1503
    i = i + (u_int )1;
#line 1503
    header[tmp___2] = (int )((u_char )l2->vs) << 1U;
#line 1504
    tmp___3 = i;
#line 1504
    i = i + (u_int )1;
#line 1504
    header[tmp___3] = (int )((u_char )l2->vr) << 1U;
#line 1505
    l2->vs = (l2->vs + 1U) & 127U;
  } else {
#line 1507
    tmp___4 = i;
#line 1507
    i = i + (u_int )1;
#line 1507
    header[tmp___4] = ((int )((u_char )l2->vr) << 5U) | ((int )((u_char )l2->vs) << 1U);
#line 1508
    l2->vs = (l2->vs + 1U) & 7U;
  }
#line 1511
  nskb = skb_clone(skb, 32U);
#line 1512
  p1 = skb_headroom((struct sk_buff  const  *)nskb);
#line 1513
  if (p1 >= i) {
#line 1514
    __len = (size_t )i;
#line 1514
    tmp___7 = skb_push(nskb, i);
#line 1514
    __ret = __builtin_memcpy((void *)tmp___7, (void const   *)(& header), __len);
  } else {
#line 1516
    printk("<4>isdnl2 pull_iqueue skb header(%d/%d) too short\n", i, p1);
#line 1518
    oskb = nskb;
#line 1519
    nskb = mI_alloc_skb(oskb->len + i, 32U);
#line 1520
    if ((unsigned long )nskb == (unsigned long )((struct sk_buff *)0)) {
#line 1521
      consume_skb(oskb);
#line 1522
      printk("<4>%s: no skb mem\n", "l2_pull_iqueue");
#line 1523
      return;
    } else {

    }
#line 1525
    __len___0 = (size_t )i;
#line 1525
    tmp___9 = skb_put(nskb, i);
#line 1525
    __ret___0 = __builtin_memcpy((void *)tmp___9, (void const   *)(& header), __len___0);
#line 1526
    __len___1 = (size_t )oskb->len;
#line 1526
    tmp___11 = skb_put(nskb, oskb->len);
#line 1526
    __ret___1 = __builtin_memcpy((void *)tmp___11, (void const   *)oskb->data, __len___1);
#line 1527
    consume_skb(oskb);
  }
#line 1529
  tmp___12 = l2_newid(l2);
#line 1529
  l2down(l2, 8193U, tmp___12, nskb);
#line 1530
  test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
#line 1531
  tmp___13 = test_and_set_bit(6, (unsigned long volatile   *)(& l2->flag));
#line 1531
  if (tmp___13 == 0) {
#line 1532
    mISDN_FsmDelTimer(& l2->t203, 13);
#line 1533
    mISDN_FsmAddTimer(& l2->t200, l2->T200, 17, 0, 11);
  } else {

  }
#line 1535
  return;
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st8_got_super(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int PollFlag ;
  int rsp ;
  int rnr ;
  unsigned int nr ;
  int tmp ;
  u_int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;

  {
#line 1540
  l2 = (struct layer2 *)fi->userdata;
#line 1541
  skb = (struct sk_buff *)arg;
#line 1542
  rnr = 0;
#line 1545
  rsp = (int )*(skb->data) & 2;
#line 1546
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 1546
  if (tmp != 0) {
#line 1547
    rsp = rsp == 0;
  } else {

  }
#line 1549
  tmp___0 = l2addrsize(l2);
#line 1549
  skb_pull(skb, tmp___0);
#line 1551
  tmp___1 = IsRNR(skb->data, l2);
#line 1551
  if (tmp___1 != 0) {
#line 1552
    set_peer_busy(l2);
#line 1553
    rnr = 1;
  } else {
#line 1555
    clear_peer_busy(l2);
  }
#line 1557
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& l2->flag));
#line 1557
  if (tmp___2 != 0) {
#line 1558
    PollFlag = (int )*(skb->data + 1UL) & 1;
#line 1559
    nr = (unsigned int )((int )*(skb->data + 1UL) >> 1);
  } else {
#line 1561
    PollFlag = (int )*(skb->data) & 16;
#line 1562
    nr = (unsigned int )((int )*(skb->data) >> 5) & 7U;
  }
#line 1564
  consume_skb(skb);
#line 1565
  if (rsp != 0 && PollFlag != 0) {
#line 1566
    tmp___5 = legalnr(l2, nr);
#line 1566
    if (tmp___5 != 0U) {
#line 1567
      if (rnr != 0) {
#line 1568
        restart_t200(l2, 15);
      } else {
#line 1570
        stop_t200(l2, 16);
#line 1571
        mISDN_FsmAddTimer(& l2->t203, l2->T203, 18, 0, 5);
#line 1573
        setva(l2, nr);
      }
#line 1575
      invoke_retransmission(l2, nr);
#line 1576
      mISDN_FsmChangeState(fi, 6);
#line 1577
      tmp___3 = skb_queue_len((struct sk_buff_head  const  *)(& l2->i_queue));
#line 1577
      if (tmp___3 != 0U) {
#line 1577
        tmp___4 = cansend(l2);
#line 1577
        if (tmp___4 != 0U) {
#line 1578
          mISDN_FsmEvent(fi, 9, 0);
        } else {

        }
      } else {

      }
    } else {
#line 1580
      nrerrorrecovery(fi);
    }
  } else {
#line 1582
    if (rsp == 0 && PollFlag != 0) {
#line 1583
      enquiry_response(l2);
    } else {

    }
#line 1584
    tmp___6 = legalnr(l2, nr);
#line 1584
    if (tmp___6 != 0U) {
#line 1585
      setva(l2, nr);
    } else {
#line 1587
      nrerrorrecovery(fi);
    }
  }
#line 1589
  return;
}
}
#line 1592 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_got_FRMR(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  u_int tmp ;
  int tmp___0 ;

  {
#line 1594
  l2 = (struct layer2 *)fi->userdata;
#line 1595
  skb = (struct sk_buff *)arg;
#line 1597
  tmp = l2addrsize(l2);
#line 1597
  skb_pull(skb, tmp + 1U);
#line 1599
  if (((int )*(skb->data) & 1) == 0 || ((int )*(skb->data) & 3) == 1) {
#line 1601
    l2mgr(l2, 7940U, 75);
#line 1602
    establishlink(fi);
#line 1603
    test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
  } else {
#line 1599
    tmp___0 = IsUA(skb->data);
#line 1599
    if (tmp___0 != 0 && fi->state == 6) {
#line 1601
      l2mgr(l2, 7940U, 75);
#line 1602
      establishlink(fi);
#line 1603
      test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
    } else {

    }
  }
#line 1605
  consume_skb(skb);
#line 1606
  return;
}
}
#line 1609 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st24_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1611
  l2 = (struct layer2 *)fi->userdata;
#line 1613
  skb_queue_purge(& l2->ui_queue);
#line 1614
  l2->tei = 127;
#line 1615
  mISDN_FsmChangeState(fi, 0);
#line 1616
  return;
}
}
#line 1619 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st3_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1621
  l2 = (struct layer2 *)fi->userdata;
#line 1623
  skb_queue_purge(& l2->ui_queue);
#line 1624
  l2->tei = 127;
#line 1625
  l2up_create(l2, 4360U, 0, 0);
#line 1626
  mISDN_FsmChangeState(fi, 0);
#line 1627
  return;
}
}
#line 1630 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1632
  l2 = (struct layer2 *)fi->userdata;
#line 1634
  skb_queue_purge(& l2->i_queue);
#line 1635
  skb_queue_purge(& l2->ui_queue);
#line 1636
  freewin(l2);
#line 1637
  l2->tei = 127;
#line 1638
  stop_t200(l2, 17);
#line 1639
  st5_dl_release_l2l3(l2);
#line 1640
  mISDN_FsmChangeState(fi, 0);
#line 1641
  return;
}
}
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1646
  l2 = (struct layer2 *)fi->userdata;
#line 1648
  skb_queue_purge(& l2->ui_queue);
#line 1649
  l2->tei = 127;
#line 1650
  stop_t200(l2, 18);
#line 1651
  l2up_create(l2, 4360U, 0, 0);
#line 1652
  mISDN_FsmChangeState(fi, 0);
#line 1653
  return;
}
}
#line 1656 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_tei_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1658
  l2 = (struct layer2 *)fi->userdata;
#line 1660
  skb_queue_purge(& l2->i_queue);
#line 1661
  skb_queue_purge(& l2->ui_queue);
#line 1662
  freewin(l2);
#line 1663
  l2->tei = 127;
#line 1664
  stop_t200(l2, 17);
#line 1665
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1666
  l2up_create(l2, 4360U, 0, 0);
#line 1671
  mISDN_FsmChangeState(fi, 0);
#line 1672
  return;
}
}
#line 1675 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st14_persistent_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
#line 1677
  l2 = (struct layer2 *)fi->userdata;
#line 1678
  skb = (struct sk_buff *)arg;
#line 1680
  skb_queue_purge(& l2->i_queue);
#line 1681
  skb_queue_purge(& l2->ui_queue);
#line 1682
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
#line 1682
  if (tmp != 0) {
#line 1683
    l2up(l2, 4360U, skb);
  } else {
#line 1685
    consume_skb(skb);
  }
#line 1686
  return;
}
}
#line 1689 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st5_persistent_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1691
  l2 = (struct layer2 *)fi->userdata;
#line 1692
  skb = (struct sk_buff *)arg;
#line 1694
  skb_queue_purge(& l2->i_queue);
#line 1695
  skb_queue_purge(& l2->ui_queue);
#line 1696
  freewin(l2);
#line 1697
  stop_t200(l2, 19);
#line 1698
  st5_dl_release_l2l3(l2);
#line 1699
  mISDN_FsmChangeState(fi, 3);
#line 1700
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1701
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1702
  consume_skb(skb);
#line 1703
  return;
}
}
#line 1706 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_st6_persistent_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1708
  l2 = (struct layer2 *)fi->userdata;
#line 1709
  skb = (struct sk_buff *)arg;
#line 1711
  skb_queue_purge(& l2->ui_queue);
#line 1712
  stop_t200(l2, 20);
#line 1713
  l2up(l2, 20744U, skb);
#line 1714
  mISDN_FsmChangeState(fi, 3);
#line 1715
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1716
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1717
  return;
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_persistent_da(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;

  {
#line 1722
  l2 = (struct layer2 *)fi->userdata;
#line 1723
  skb = (struct sk_buff *)arg;
#line 1725
  skb_queue_purge(& l2->i_queue);
#line 1726
  skb_queue_purge(& l2->ui_queue);
#line 1727
  freewin(l2);
#line 1728
  stop_t200(l2, 19);
#line 1729
  mISDN_FsmDelTimer(& l2->t203, 19);
#line 1730
  l2up(l2, 4360U, skb);
#line 1731
  mISDN_FsmChangeState(fi, 3);
#line 1732
  if ((unsigned long )l2->tm != (unsigned long )((struct teimgr *)0)) {
#line 1733
    l2_tei(l2, 7428U, 0UL);
  } else {

  }
#line 1734
  return;
}
}
#line 1737 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_set_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
#line 1739
  l2 = (struct layer2 *)fi->userdata;
#line 1740
  skb = (struct sk_buff *)arg;
#line 1742
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 1742
  if (tmp == 0) {
#line 1743
    enquiry_cr(l2, 5, 1, 0);
#line 1744
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1746
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 1747
    consume_skb(skb);
  } else {

  }
#line 1748
  return;
}
}
#line 1751 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_clear_own_busy(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct sk_buff *skb ;
  int tmp ;

  {
#line 1753
  l2 = (struct layer2 *)fi->userdata;
#line 1754
  skb = (struct sk_buff *)arg;
#line 1756
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& l2->flag));
#line 1756
  if (tmp == 0) {
#line 1757
    enquiry_cr(l2, 1, 1, 0);
#line 1758
    test_and_clear_bit(7, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 1760
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 1761
    consume_skb(skb);
  } else {

  }
#line 1762
  return;
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_frame_error(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1767
  l2 = (struct layer2 *)fi->userdata;
#line 1769
  l2mgr(l2, 7940U, arg);
#line 1770
  return;
}
}
#line 1773 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void l2_frame_error_reest(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct layer2 *l2 ;

  {
#line 1775
  l2 = (struct layer2 *)fi->userdata;
#line 1777
  l2mgr(l2, 7940U, arg);
#line 1778
  establishlink(fi);
#line 1779
  test_and_clear_bit(5, (unsigned long volatile   *)(& l2->flag));
#line 1780
  return;
}
}
#line 1782 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static struct FsmNode L2FnList[88U]  = 
#line 1782
  {      {0, 11, & l2_mdl_assign}, 
        {1, 11, & l2_go_st3}, 
        {3, 11, & l2_establish}, 
        {4, 11, & l2_discard_i_setl3}, 
        {6, 11, & l2_l3_reestablish}, 
        {7, 11, & l2_l3_reestablish}, 
        {3, 12, & l2_release}, 
        {4, 12, & l2_pend_rel}, 
        {6, 12, & l2_disconnect}, 
        {7, 12, & l2_disconnect}, 
        {4, 8, & l2_feed_i_if_reest}, 
        {6, 8, & l2_feed_i_pull}, 
        {7, 8, & l2_feed_iqueue}, 
        {0, 10, & l2_queue_ui_assign}, 
        {1, 10, & l2_queue_ui}, 
        {2, 10, & l2_queue_ui}, 
        {3, 10, & l2_send_ui}, 
        {4, 10, & l2_send_ui}, 
        {5, 10, & l2_send_ui}, 
        {6, 10, & l2_send_ui}, 
        {7, 10, & l2_send_ui}, 
        {0, 13, & l2_got_tei}, 
        {1, 13, & l2_got_tei}, 
        {2, 13, & l2_got_tei}, 
        {1, 15, & l2_st24_tei_remove}, 
        {2, 15, & l2_st3_tei_remove}, 
        {3, 14, & l2_st24_tei_remove}, 
        {4, 14, & l2_st5_tei_remove}, 
        {5, 14, & l2_st6_tei_remove}, 
        {6, 14, & l2_tei_remove}, 
        {7, 14, & l2_tei_remove}, 
        {3, 1, & l2_start_multi}, 
        {4, 1, & l2_send_UA}, 
        {5, 1, & l2_send_DM}, 
        {6, 1, & l2_restart_multi}, 
        {7, 1, & l2_restart_multi}, 
        {3, 2, & l2_send_DM}, 
        {4, 2, & l2_send_DM}, 
        {5, 2, & l2_send_UA}, 
        {6, 2, & l2_stop_multi}, 
        {7, 2, & l2_stop_multi}, 
        {3, 4, & l2_mdl_error_ua}, 
        {4, 4, & l2_connected}, 
        {5, 4, & l2_released}, 
        {6, 4, & l2_mdl_error_ua}, 
        {7, 4, & l2_mdl_error_ua}, 
        {3, 3, & l2_reestablish}, 
        {4, 3, & l2_st5_dm_release}, 
        {5, 3, & l2_st6_dm_release}, 
        {6, 3, & l2_mdl_error_dm}, 
        {7, 3, & l2_st8_mdl_error_dm}, 
        {0, 0, & l2_got_ui}, 
        {1, 0, & l2_got_ui}, 
        {2, 0, & l2_got_ui}, 
        {3, 0, & l2_got_ui}, 
        {4, 0, & l2_got_ui}, 
        {5, 0, & l2_got_ui}, 
        {6, 0, & l2_got_ui}, 
        {7, 0, & l2_got_ui}, 
        {6, 5, & l2_got_FRMR}, 
        {7, 5, & l2_got_FRMR}, 
        {6, 6, & l2_st7_got_super}, 
        {7, 6, & l2_st8_got_super}, 
        {6, 7, & l2_got_iframe}, 
        {7, 7, & l2_got_iframe}, 
        {4, 17, & l2_st5_tout_200}, 
        {5, 17, & l2_st6_tout_200}, 
        {6, 17, & l2_st7_tout_200}, 
        {7, 17, & l2_st8_tout_200}, 
        {6, 18, & l2_st7_tout_203}, 
        {6, 9, & l2_pull_iqueue}, 
        {6, 19, & l2_set_own_busy}, 
        {7, 19, & l2_set_own_busy}, 
        {6, 20, & l2_clear_own_busy}, 
        {7, 20, & l2_clear_own_busy}, 
        {3, 21, & l2_frame_error}, 
        {4, 21, & l2_frame_error}, 
        {5, 21, & l2_frame_error}, 
        {6, 21, & l2_frame_error_reest}, 
        {7, 21, & l2_frame_error_reest}, 
        {0, 16, & l2_st14_persistent_da}, 
        {1, 16, & l2_st24_tei_remove}, 
        {2, 16, & l2_st3_tei_remove}, 
        {3, 16, & l2_st14_persistent_da}, 
        {4, 16, & l2_st5_persistent_da}, 
        {5, 16, & l2_st6_persistent_da}, 
        {6, 16, & l2_persistent_da}, 
        {7, 16, & l2_persistent_da}};
#line 1875 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int ph_data_indication(struct layer2 *l2 , struct mISDNhead *hh , struct sk_buff *skb ) 
{ 
  u_char *datap ;
  int ret ;
  int psapi ;
  int ptei ;
  u_int l ;
  int c ;
  u_char *tmp ;
  u_char *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1877
  datap = skb->data;
#line 1878
  ret = -22;
#line 1881
  c = 0;
#line 1883
  l = l2addrsize(l2);
#line 1884
  if (skb->len <= l) {
#line 1885
    mISDN_FsmEvent(& l2->l2m, 21, 78);
#line 1886
    return (ret);
  } else {

  }
#line 1888
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 1888
  if (tmp___1 != 0) {
#line 1889
    tmp = datap;
#line 1889
    datap = datap + 1;
#line 1889
    psapi = (int )*tmp;
#line 1890
    tmp___0 = datap;
#line 1890
    datap = datap + 1;
#line 1890
    ptei = (int )*tmp___0;
#line 1891
    if (psapi & 1 || (ptei & 1) == 0) {
#line 1892
      printk("<4>l2 D-channel frame wrong EA0/EA1\n");
#line 1894
      return (ret);
    } else {

    }
#line 1896
    psapi = psapi >> 2;
#line 1897
    ptei = ptei >> 1;
#line 1898
    if ((int )l2->sapi != psapi) {
#line 1900
      if ((*debug___4 & 16711680U) != 0U) {
#line 1901
        printk("<7>%s: sapi %d/%d mismatch\n", "ph_data_indication", psapi, (int )l2->sapi);
      } else {

      }
#line 1903
      consume_skb(skb);
#line 1904
      return (0);
    } else {

    }
#line 1906
    if ((int )l2->tei != ptei && ptei != 127) {
#line 1908
      if ((*debug___4 & 16711680U) != 0U) {
#line 1909
        printk("<7>%s: tei %d/%d mismatch\n", "ph_data_indication", ptei, (int )l2->tei);
      } else {

      }
#line 1911
      consume_skb(skb);
#line 1912
      return (0);
    } else {

    }
  } else {
#line 1915
    datap = datap + (unsigned long )l;
  }
#line 1916
  if (((int )*datap & 1) == 0) {
#line 1917
    c = iframe_error(l2, skb);
#line 1918
    if (c == 0) {
#line 1919
      ret = mISDN_FsmEvent(& l2->l2m, 7, (void *)skb);
    } else {

    }
  } else {
#line 1920
    tmp___8 = IsSFrame(datap, l2);
#line 1920
    if (tmp___8 != 0) {
#line 1921
      c = super_error(l2, skb);
#line 1922
      if (c == 0) {
#line 1923
        ret = mISDN_FsmEvent(& l2->l2m, 6, (void *)skb);
      } else {

      }
    } else {
#line 1924
      tmp___7 = IsUI(datap);
#line 1924
      if (tmp___7 != 0) {
#line 1925
        c = UI_error(l2, skb);
#line 1926
        if (c == 0) {
#line 1927
          ret = mISDN_FsmEvent(& l2->l2m, 0, (void *)skb);
        } else {

        }
      } else {
#line 1928
        tmp___6 = IsSABME(datap, l2);
#line 1928
        if (tmp___6 != 0) {
#line 1929
          c = unnum_error(l2, skb, 0);
#line 1930
          if (c == 0) {
#line 1931
            ret = mISDN_FsmEvent(& l2->l2m, 1, (void *)skb);
          } else {

          }
        } else {
#line 1932
          tmp___5 = IsUA(datap);
#line 1932
          if (tmp___5 != 0) {
#line 1933
            c = unnum_error(l2, skb, 1);
#line 1934
            if (c == 0) {
#line 1935
              ret = mISDN_FsmEvent(& l2->l2m, 4, (void *)skb);
            } else {

            }
          } else {
#line 1936
            tmp___4 = IsDISC(datap);
#line 1936
            if (tmp___4 != 0) {
#line 1937
              c = unnum_error(l2, skb, 0);
#line 1938
              if (c == 0) {
#line 1939
                ret = mISDN_FsmEvent(& l2->l2m, 2, (void *)skb);
              } else {

              }
            } else {
#line 1940
              tmp___3 = IsDM(datap);
#line 1940
              if (tmp___3 != 0) {
#line 1941
                c = unnum_error(l2, skb, 1);
#line 1942
                if (c == 0) {
#line 1943
                  ret = mISDN_FsmEvent(& l2->l2m, 3, (void *)skb);
                } else {

                }
              } else {
#line 1944
                tmp___2 = IsFRMR(datap);
#line 1944
                if (tmp___2 != 0) {
#line 1945
                  c = FRMR_error(l2, skb);
#line 1946
                  if (c == 0) {
#line 1947
                    ret = mISDN_FsmEvent(& l2->l2m, 5, (void *)skb);
                  } else {

                  }
                } else {
#line 1949
                  c = 76;
                }
              }
            }
          }
        }
      }
    }
  }
#line 1950
  if (c != 0) {
#line 1951
    printk("<4>l2 D-channel frame error %c\n", c);
#line 1952
    mISDN_FsmEvent(& l2->l2m, 21, (void *)((long )c));
  } else {

  }
#line 1954
  return (ret);
}
}
#line 1958 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  u_int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  u_int tmp___7 ;
  int tmp___8 ;

  {
#line 1960
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1960
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
#line 1961
  hh = (struct mISDNhead *)(& skb->cb);
#line 1962
  ret = -22;
#line 1964
  if ((*debug___4 & 524288U) != 0U) {
#line 1965
    printk("<7>%s: prim(%x) id(%x) sapi(%d) tei(%d)\n", "l2_send", hh->prim, hh->id,
           (int )l2->sapi, (int )l2->tei);
  } else {

  }
#line 1967
  switch (hh->prim) {
  case 8194U: 
#line 1969
  ret = ph_data_indication(l2, hh, skb);
#line 1970
  goto ldv_39499;
  case 24578U: 
#line 1972
  ret = ph_data_confirm(l2, hh, skb);
#line 1973
  goto ldv_39499;
  case 258U: 
#line 1975
  test_and_set_bit(12, (unsigned long volatile   *)(& l2->flag));
#line 1976
  l2up_create(l2, 1282U, 0, 0);
#line 1977
  tmp = test_and_clear_bit(13, (unsigned long volatile   *)(& l2->flag));
#line 1977
  if (tmp != 0) {
#line 1978
    ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
  } else {

  }
#line 1980
  goto ldv_39499;
  case 514U: 
#line 1982
  test_and_clear_bit(12, (unsigned long volatile   *)(& l2->flag));
#line 1983
  l2up_create(l2, 1538U, 0, 0);
#line 1984
  ret = mISDN_FsmEvent(& l2->l2m, 16, (void *)skb);
#line 1985
  goto ldv_39499;
  case 1794U: ;
#line 1987
  if ((unsigned long )l2->up == (unsigned long )((struct mISDNchannel *)0)) {
#line 1988
    goto ldv_39499;
  } else {

  }
#line 1989
  ret = (*((l2->up)->send))(l2->up, skb);
#line 1990
  goto ldv_39499;
  case 12292U: 
#line 1992
  ret = mISDN_FsmEvent(& l2->l2m, 8, (void *)skb);
#line 1993
  goto ldv_39499;
  case 12548U: 
#line 1995
  ret = mISDN_FsmEvent(& l2->l2m, 10, (void *)skb);
#line 1996
  goto ldv_39499;
  case 4100U: 
#line 1998
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 1998
  if (tmp___0 != 0) {
#line 1999
    test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2000
  tmp___6 = constant_test_bit(12U, (unsigned long const volatile   *)(& l2->flag));
#line 2000
  if (tmp___6 != 0) {
#line 2001
    tmp___4 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2001
    if (tmp___4 != 0) {
#line 2003
      ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
    } else {
#line 2001
      tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 2001
      if (tmp___5 != 0) {
#line 2003
        ret = mISDN_FsmEvent(& l2->l2m, 11, (void *)skb);
      } else {
#line 2006
        tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2006
        if (tmp___1 != 0) {
#line 2008
          test_and_set_bit(13, (unsigned long volatile   *)(& l2->flag));
        } else {
#line 2006
          tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& l2->flag));
#line 2006
          if (tmp___2 != 0) {
#line 2008
            test_and_set_bit(13, (unsigned long volatile   *)(& l2->flag));
          } else {

          }
        }
#line 2011
        tmp___3 = l2_newid(l2);
#line 2011
        ret = l2down(l2, 257U, tmp___3, skb);
      }
    }
  } else {

  }
#line 2014
  goto ldv_39499;
  case 4356U: 
#line 2016
  tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 2016
  if (tmp___8 != 0) {
#line 2017
    tmp___7 = l2_newid(l2);
#line 2017
    l2down_create(l2, 513U, tmp___7, 0, 0);
  } else {

  }
#line 2019
  ret = mISDN_FsmEvent(& l2->l2m, 12, (void *)skb);
#line 2021
  goto ldv_39499;
  default: ;
#line 2023
  if ((*debug___4 & 16711680U) != 0U) {
#line 2024
    l2m_debug(& l2->l2m, (char *)"l2 unknown pr %04x", hh->prim);
  } else {

  }
  }
  ldv_39499: ;
#line 2027
  if (ret != 0) {
#line 2028
    consume_skb(skb);
#line 2029
    ret = 0;
  } else {

  }
#line 2031
  return (ret);
}
}
#line 2035 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
int tei_l2(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  int ret ;

  {
#line 2037
  ret = -22;
#line 2039
  if ((*debug___4 & 1048576U) != 0U) {
#line 2040
    printk("<7>%s: cmd(%x)\n", "tei_l2", cmd);
  } else {

  }
#line 2041
  switch (cmd) {
  case (u_int )6148: 
#line 2043
  ret = mISDN_FsmEvent(& l2->l2m, 13, (void *)arg);
#line 2044
  goto ldv_39517;
  case (u_int )6660: 
#line 2046
  ret = mISDN_FsmEvent(& l2->l2m, 14, 0);
#line 2047
  goto ldv_39517;
  case (u_int )7940: 
#line 2049
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
#line 2050
  goto ldv_39517;
  case (u_int )24324: 
#line 2053
  printk("<5>MDL_ERROR|REQ (tei_l2)\n");
#line 2054
  ret = mISDN_FsmEvent(& l2->l2m, 15, 0);
#line 2055
  goto ldv_39517;
  }
  ldv_39517: ;
#line 2057
  return (ret);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static void release_l2(struct layer2 *l2 ) 
{ 
  int tmp ;

  {
#line 2063
  mISDN_FsmDelTimer(& l2->t200, 21);
#line 2064
  mISDN_FsmDelTimer(& l2->t203, 16);
#line 2065
  skb_queue_purge(& l2->i_queue);
#line 2066
  skb_queue_purge(& l2->ui_queue);
#line 2067
  skb_queue_purge(& l2->down_queue);
#line 2068
  ReleaseWin(l2);
#line 2069
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2069
  if (tmp != 0) {
#line 2070
    TEIrelease(l2);
#line 2071
    if ((unsigned long )l2->ch.st != (unsigned long )((struct mISDNstack *)0)) {
#line 2072
      (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 512U, 0);
    } else {

    }
  } else {

  }
#line 2075
  kfree((void const   *)l2);
#line 2076
  return;
}
}
#line 2079 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int l2_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct layer2 *l2 ;
  struct mISDNchannel  const  *__mptr ;
  u_int info ;
  int tmp ;

  {
#line 2081
  __mptr = (struct mISDNchannel  const  *)ch;
#line 2081
  l2 = (struct layer2 *)__mptr + 0xfffffffffffffff0UL;
#line 2084
  if ((*debug___4 & 262144U) != 0U) {
#line 2085
    printk("<7>%s:(%x)\n", "l2_ctrl", cmd);
  } else {

  }
#line 2087
  switch (cmd) {
  case (u_int )256: 
#line 2089
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& l2->flag));
#line 2089
  if (tmp != 0) {
#line 2090
    set_channel_address(& l2->ch, (u_int )l2->sapi, (u_int )l2->tei);
#line 2091
    info = 1U;
#line 2092
    l2up_create(l2, 8U, 4, (void *)(& info));
  } else {

  }
#line 2095
  goto ldv_39535;
  case (u_int )512: ;
#line 2097
  if ((unsigned long )l2->ch.peer != (unsigned long )((struct mISDNchannel *)0)) {
#line 2098
    (*((l2->ch.peer)->ctrl))(l2->ch.peer, 512U, 0);
  } else {

  }
#line 2099
  release_l2(l2);
#line 2100
  goto ldv_39535;
  }
  ldv_39535: ;
#line 2102
  return (0);
}
}
#line 2106 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
struct layer2 *create_l2(struct mISDNchannel *ch , u_int protocol , u_long options ,
                         int tei , int sapi ) 
{ 
  struct layer2 *l2 ;
  struct channel_req rq ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 2112
  tmp = kzalloc(976UL, 208U);
#line 2112
  l2 = (struct layer2 *)tmp;
#line 2113
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 2114
    printk("<3>kzalloc layer2 failed\n");
#line 2115
    return (0);
  } else {

  }
#line 2117
  l2->next_id = 1U;
#line 2118
  l2->down_id = 65534U;
#line 2119
  l2->up = ch;
#line 2120
  l2->ch.st = ch->st;
#line 2121
  l2->ch.send = & l2_send;
#line 2122
  l2->ch.ctrl = & l2_ctrl;
#line 2123
  switch (protocol) {
  case (u_int )17: 
#line 2125
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
#line 2126
  test_and_set_bit(18, (unsigned long volatile   *)(& l2->flag));
#line 2127
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
#line 2128
  l2->sapi = (signed char )sapi;
#line 2129
  l2->maxlen = 260U;
#line 2130
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2130
  if (tmp___0 != 0) {
#line 2131
    l2->window = 7U;
  } else {
#line 2133
    l2->window = 1U;
  }
#line 2134
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& options));
#line 2134
  if (tmp___1 != 0) {
#line 2135
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2136
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& options));
#line 2136
  if (tmp___2 != 0) {
#line 2137
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2138
  l2->tei = (signed char )tei;
#line 2139
  l2->T200 = 1000;
#line 2140
  l2->N200 = 3;
#line 2141
  l2->T203 = 10000;
#line 2142
  tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2142
  if (tmp___3 != 0) {
#line 2143
    rq.protocol = 4U;
  } else {
#line 2145
    rq.protocol = 2U;
  }
#line 2146
  rq.adr.channel = 0U;
#line 2147
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
#line 2148
  goto ldv_39547;
  case (u_int )16: 
#line 2150
  test_and_set_bit(1, (unsigned long volatile   *)(& l2->flag));
#line 2151
  test_and_set_bit(3, (unsigned long volatile   *)(& l2->flag));
#line 2152
  test_and_set_bit(2, (unsigned long volatile   *)(& l2->flag));
#line 2153
  l2->sapi = (signed char )sapi;
#line 2154
  l2->maxlen = 260U;
#line 2155
  tmp___4 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2155
  if (tmp___4 != 0) {
#line 2156
    l2->window = 7U;
  } else {
#line 2158
    l2->window = 1U;
  }
#line 2159
  tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& options));
#line 2159
  if (tmp___5 != 0) {
#line 2160
    test_and_set_bit(14, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2161
  tmp___6 = constant_test_bit(3U, (unsigned long const volatile   *)(& options));
#line 2161
  if (tmp___6 != 0) {
#line 2162
    test_and_set_bit(15, (unsigned long volatile   *)(& l2->flag));
  } else {

  }
#line 2163
  l2->tei = (signed char )tei;
#line 2164
  l2->T200 = 1000;
#line 2165
  l2->N200 = 3;
#line 2166
  l2->T203 = 10000;
#line 2167
  tmp___7 = constant_test_bit(1U, (unsigned long const volatile   *)(& options));
#line 2167
  if (tmp___7 != 0) {
#line 2168
    rq.protocol = 3U;
  } else {
#line 2170
    rq.protocol = 1U;
  }
#line 2171
  rq.adr.channel = 0U;
#line 2172
  (*(((l2->ch.st)->dev)->D.ctrl))(& ((l2->ch.st)->dev)->D, 256U, (void *)(& rq));
#line 2173
  goto ldv_39547;
  case (u_int )35: 
#line 2175
  test_and_set_bit(0, (unsigned long volatile   *)(& l2->flag));
#line 2176
  l2->window = 7U;
#line 2177
  l2->maxlen = 2048U;
#line 2178
  l2->T200 = 1000;
#line 2179
  l2->N200 = 4;
#line 2180
  l2->T203 = 5000;
#line 2181
  l2->addr.A = 3U;
#line 2182
  l2->addr.B = 1U;
#line 2183
  goto ldv_39547;
  default: 
#line 2185
  printk("<3>layer2 create failed prt %x\n", protocol);
#line 2187
  kfree((void const   *)l2);
#line 2188
  return (0);
  }
  ldv_39547: 
#line 2190
  skb_queue_head_init(& l2->i_queue);
#line 2191
  skb_queue_head_init(& l2->ui_queue);
#line 2192
  skb_queue_head_init(& l2->down_queue);
#line 2193
  skb_queue_head_init(& l2->tmp_queue);
#line 2194
  InitWin(l2);
#line 2195
  l2->l2m.fsm = & l2fsm;
#line 2196
  tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& l2->flag));
#line 2196
  if (tmp___8 != 0) {
#line 2199
    l2->l2m.state = 3;
  } else {
#line 2196
    tmp___9 = constant_test_bit(14U, (unsigned long const volatile   *)(& l2->flag));
#line 2196
    if (tmp___9 != 0) {
#line 2199
      l2->l2m.state = 3;
    } else {
#line 2196
      tmp___10 = constant_test_bit(18U, (unsigned long const volatile   *)(& l2->flag));
#line 2196
      if (tmp___10 != 0) {
#line 2199
        l2->l2m.state = 3;
      } else {
#line 2201
        l2->l2m.state = 0;
      }
    }
  }
#line 2202
  l2->l2m.debug = (int )*debug___4;
#line 2203
  l2->l2m.userdata = (void *)l2;
#line 2204
  l2->l2m.userint = 0;
#line 2205
  l2->l2m.printdebug = & l2m_debug;
#line 2207
  mISDN_FsmInitTimer(& l2->l2m, & l2->t200);
#line 2208
  mISDN_FsmInitTimer(& l2->l2m, & l2->t203);
#line 2209
  return (l2);
}
}
#line 2213 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static int x75create(struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;

  {
#line 2217
  if (crq->protocol != 35U) {
#line 2218
    return (-93);
  } else {

  }
#line 2219
  l2 = create_l2(crq->ch, crq->protocol, 0UL, 0, 0);
#line 2220
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 2221
    return (-12);
  } else {

  }
#line 2222
  crq->ch = & l2->ch;
#line 2223
  crq->protocol = 34U;
#line 2224
  return (0);
}
}
#line 2227 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
static struct Bprotocol X75SLP  =    {{0, 0}, (char *)"X75SLP", 8U, & x75create};
#line 2234 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
int Isdnl2_Init(u_int *deb ) 
{ 


  {
#line 2236
  debug___4 = deb;
#line 2237
  mISDN_register_Bprotocol(& X75SLP);
#line 2238
  l2fsm.state_count = 8;
#line 2239
  l2fsm.event_count = 22;
#line 2240
  l2fsm.strEvent = (char **)(& strL2Event);
#line 2241
  l2fsm.strState = (char **)(& strL2State);
#line 2242
  mISDN_FsmNew(& l2fsm, (struct FsmNode *)(& L2FnList), 88);
#line 2243
  TEIInit(deb);
#line 2244
  return (0);
}
}
#line 2248 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
void Isdnl2_cleanup(void) 
{ 


  {
#line 2250
  mISDN_unregister_Bprotocol(& X75SLP);
#line 2251
  TEIFree();
#line 2252
  mISDN_FsmFree(& l2fsm);
#line 2253
  return;
}
}
#line 2293 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
void ldv_main7_sequence_infinite_withcheck_stateful(void) 
{ 
  struct channel_req *var_group1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 2313
  LDV_IN_INTERRUPT = 1;
#line 2322
  ldv_initialize();
#line 2326
  goto ldv_39585;
  ldv_39584: 
#line 2329
  tmp = nondet_int();
#line 2329
  switch (tmp) {
  case 0: 
#line 2341
  ldv_handler_precall();
#line 2342
  x75create(var_group1);
#line 2349
  goto ldv_39582;
  default: ;
#line 2350
  goto ldv_39582;
  }
  ldv_39582: ;
  ldv_39585: 
#line 2326
  tmp___0 = nondet_int();
#line 2326
  if (tmp___0 != 0) {
#line 2327
    goto ldv_39584;
  } else {

  }


#line 2359
  ldv_check_final_state();
#line 2362
  return;
}
}
#line 2366 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
void ldv_mutex_lock_53(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2371
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2373
  mutex_lock(ldv_func_arg1);
#line 2374
  return;
}
}
#line 2376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
int ldv_mutex_trylock_54(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2381
  tmp = mutex_trylock(ldv_func_arg1);
#line 2381
  ldv_func_res = tmp;
#line 2383
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2383
  return (tmp___0);
#line 2385
  return (ldv_func_res);
}
}
#line 2388 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/layer2.c.prepared"
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2393
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2395
  mutex_unlock(ldv_func_arg1);
#line 2396
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_60(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_62(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_64(struct mutex *ldv_func_arg1 ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static u_int *debug___5  ;
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm deactfsm  =    {0, 0, 0, 0, 0};
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm teifsmu  =    {0, 0, 0, 0, 0};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct Fsm teifsmn  =    {0, 0, 0, 0, 0};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static char *strDeactState[3U]  = {      (char *)"ST_L1_DEACT",      (char *)"ST_L1_DEACT_PENDING",      (char *)"ST_L1_ACTIV"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static char *strDeactEvent[6U]  = {      (char *)"EV_ACTIVATE",      (char *)"EV_ACTIVATE_IND",      (char *)"EV_DEACTIVATE",      (char *)"EV_DEACTIVATE_IND", 
        (char *)"EV_UI",      (char *)"EV_DATIMER"};
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct manager *mgr ;
  struct va_format vaf ;
  va_list va ;

  {
#line 112
  mgr = (struct manager *)fi->userdata;
#line 116
  if ((*debug___5 & 2097152U) == 0U) {
#line 117
    return;
  } else {

  }
#line 119
  __builtin_va_start((__va_list_tag *)(& va));
#line 121
  vaf.fmt = (char const   *)fmt;
#line 122
  vaf.va = & va;
#line 124
  printk("<7>mgr(%d): %pV\n", ((mgr->ch.st)->dev)->id, & vaf);
#line 126
  __builtin_va_end((__va_list_tag *)(& va));
#line 127
  return;
}
}
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_activate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;

  {
#line 132
  mgr = (struct manager *)fi->userdata;
#line 134
  if (fi->state == 1) {
#line 135
    mISDN_FsmDelTimer(& mgr->datimer, 1);
  } else {

  }
#line 136
  mISDN_FsmChangeState(fi, 2);
#line 137
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_deactivate_ind(struct FsmInst *fi , int event , void *arg ) 
{ 


  {
#line 142
  mISDN_FsmChangeState(fi, 0);
#line 143
  return;
}
}
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_deactivate(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
#line 148
  mgr = (struct manager *)fi->userdata;
#line 152
  flags = _raw_read_lock_irqsave(& mgr->lock);
#line 153
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 153
  l2 = (struct layer2 *)__mptr;
#line 153
  goto ldv_38838;
  ldv_38837: ;
#line 154
  if (l2->l2m.state > 3) {
#line 156
    _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 157
    return;
  } else {

  }
#line 153
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 153
  l2 = (struct layer2 *)__mptr___0;
  ldv_38838: ;
#line 153
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 154
    goto ldv_38837;
  } else {

  }
#line 160
  _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 162
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mgr->options));
#line 162
  if (tmp == 0) {
#line 163
    mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 1);
#line 165
    mISDN_FsmChangeState(fi, 1);
  } else {

  }
#line 167
  return;
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_ui(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  int tmp ;

  {
#line 172
  mgr = (struct manager *)fi->userdata;
#line 175
  tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mgr->options));
#line 175
  if (tmp == 0) {
#line 176
    mISDN_FsmDelTimer(& mgr->datimer, 2);
#line 177
    mISDN_FsmAddTimer(& mgr->datimer, 10000, 5, 0, 2);
  } else {

  }
#line 179
  return;
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void da_timer(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 185
  mgr = (struct manager *)fi->userdata;
#line 190
  flags = _raw_read_lock_irqsave(& mgr->lock);
#line 191
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 191
  l2 = (struct layer2 *)__mptr;
#line 191
  goto ldv_38868;
  ldv_38867: ;
#line 192
  if (l2->l2m.state > 3) {
#line 194
    _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 195
    mISDN_FsmChangeState(fi, 2);
#line 196
    return;
  } else {

  }
#line 191
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 191
  l2 = (struct layer2 *)__mptr___0;
  ldv_38868: ;
#line 191
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 192
    goto ldv_38867;
  } else {

  }
#line 199
  _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 201
  mISDN_FsmChangeState(fi, 0);
#line 202
  _queue_data(& mgr->ch, 513U, 65535U, 0U, 0, 32U);
#line 203
  return;
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode DeactFnList[6U]  = {      {0, 1, & da_activate}, 
        {2, 3, & da_deactivate_ind}, 
        {2, 2, & da_deactivate}, 
        {1, 0, & da_activate}, 
        {1, 4, & da_ui}, 
        {1, 5, & da_timer}};
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static char *strTeiState[3U]  = {      (char *)"ST_TEI_NOP",      (char *)"ST_TEI_IDREQ",      (char *)"ST_TEI_IDVERIFY"};
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static char *strTeiEvent[9U]  = 
#line 245
  {      (char *)"EV_IDREQ",      (char *)"EV_ASSIGN",      (char *)"EV_ASSIGN_REQ",      (char *)"EV_DENIED", 
        (char *)"EV_CHKREQ",      (char *)"EV_CHKRESP",      (char *)"EV_REMOVE",      (char *)"EV_VERIFY", 
        (char *)"EV_TIMER"};
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_debug(struct FsmInst *fi , char *fmt  , ...) 
{ 
  struct teimgr *tm ;
  struct va_format vaf ;
  va_list va ;

  {
#line 261
  tm = (struct teimgr *)fi->userdata;
#line 265
  if ((*debug___5 & 2097152U) == 0U) {
#line 266
    return;
  } else {

  }
#line 268
  __builtin_va_start((__va_list_tag *)(& va));
#line 270
  vaf.fmt = (char const   *)fmt;
#line 271
  vaf.va = & va;
#line 273
  printk("<7>sapi(%d) tei(%d): %pV\n", (int )(tm->l2)->sapi, (int )(tm->l2)->tei,
         & vaf);
#line 276
  __builtin_va_end((__va_list_tag *)(& va));
#line 277
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int get_free_id(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
#line 284
  ids = 0ULL;
#line 288
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 288
  l2 = (struct layer2 *)__mptr;
#line 288
  goto ldv_38909;
  ldv_38908: ;
#line 289
  if (l2->ch.nr > 63U) {
#line 290
    printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 293
    return (-16);
  } else {

  }
#line 295
  test_and_set_bit((int )l2->ch.nr, (unsigned long volatile   *)(& ids));
#line 288
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 288
  l2 = (struct layer2 *)__mptr___0;
  ldv_38909: ;
#line 288
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 289
    goto ldv_38908;
  } else {

  }
#line 297
  i = 1;
#line 297
  goto ldv_38912;
  ldv_38911: 
#line 298
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
#line 298
  if (tmp == 0) {
#line 299
    return (i);
  } else {

  }
#line 297
  i = i + 1;
  ldv_38912: ;
#line 297
  if (i <= 63) {
#line 298
    goto ldv_38911;
  } else {

  }
#line 300
  printk("<4>%s: more as 63 layer2 for one device\n", "get_free_id");
#line 302
  return (-16);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int get_free_tei(struct manager *mgr ) 
{ 
  u64 ids ;
  int i ;
  struct layer2 *l2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
#line 308
  ids = 0ULL;
#line 312
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 312
  l2 = (struct layer2 *)__mptr;
#line 312
  goto ldv_38926;
  ldv_38925: ;
#line 313
  if (l2->ch.nr == 0U) {
#line 314
    goto ldv_38924;
  } else {

  }
#line 315
  if ((l2->ch.addr & 255U) != 0U) {
#line 316
    goto ldv_38924;
  } else {

  }
#line 317
  i = (int )(l2->ch.addr >> 8);
#line 318
  if (i <= 63) {
#line 319
    goto ldv_38924;
  } else {

  }
#line 320
  i = i + -64;
#line 322
  test_and_set_bit(i, (unsigned long volatile   *)(& ids));
  ldv_38924: 
#line 312
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 312
  l2 = (struct layer2 *)__mptr___0;
  ldv_38926: ;
#line 312
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 313
    goto ldv_38925;
  } else {

  }
#line 324
  i = 0;
#line 324
  goto ldv_38929;
  ldv_38928: 
#line 325
  tmp = variable_test_bit(i, (unsigned long const volatile   *)(& ids));
#line 325
  if (tmp == 0) {
#line 326
    return (i + 64);
  } else {

  }
#line 324
  i = i + 1;
  ldv_38929: ;
#line 324
  if (i <= 63) {
#line 325
    goto ldv_38928;
  } else {

  }
#line 327
  printk("<4>%s: more as 63 dynamic tei for one device\n", "get_free_tei");
#line 329
  return (-1);
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void teiup_create(struct manager *mgr , u_int prim , int len , void *arg ) 
{ 
  struct sk_buff *skb ;
  struct mISDNhead *hh ;
  int err ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
#line 339
  skb = mI_alloc_skb((unsigned int )len, 32U);
#line 340
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 341
    return;
  } else {

  }
#line 342
  hh = (struct mISDNhead *)(& skb->cb);
#line 343
  hh->prim = prim;
#line 344
  hh->id = (mgr->ch.nr << 16) | mgr->ch.addr;
#line 345
  if (len != 0) {
#line 346
    __len = (size_t )len;
#line 346
    tmp___0 = skb_put(skb, (unsigned int )len);
#line 346
    __ret = __builtin_memcpy((void *)tmp___0, (void const   *)arg, __len);
  } else {

  }
#line 347
  err = (*((mgr->up)->send))(mgr->up, skb);
#line 348
  if (err != 0) {
#line 349
    printk("<4>%s: err=%d\n", "teiup_create", err);
#line 350
    consume_skb(skb);
  } else {

  }
#line 352
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static u_int new_id(struct manager *mgr ) 
{ 
  u_int id ;
  u_int tmp ;

  {
#line 359
  tmp = mgr->nextid;
#line 359
  mgr->nextid = mgr->nextid + (u_int )1;
#line 359
  id = tmp;
#line 360
  if (id == 32767U) {
#line 361
    mgr->nextid = 1U;
  } else {

  }
#line 362
  id = id << 16;
#line 363
  id = id | 32512U;
#line 364
  id = id | 63U;
#line 365
  return (id);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void do_send(struct manager *mgr ) 
{ 
  int tmp ;
  struct sk_buff *skb ;
  struct sk_buff *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 371
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 371
  if (tmp == 0) {
#line 372
    return;
  } else {

  }
#line 374
  tmp___2 = test_and_set_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 374
  if (tmp___2 == 0) {
#line 375
    tmp___0 = skb_dequeue(& mgr->sendq);
#line 375
    skb = tmp___0;
#line 377
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 378
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 379
      return;
    } else {

    }
#line 381
    mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
#line 382
    mISDN_FsmEvent(& mgr->deact, 4, 0);
#line 383
    tmp___1 = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 383
    if (tmp___1 != 0) {
#line 384
      consume_skb(skb);
#line 385
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
#line 386
      mgr->lastid = 65534U;
    } else {

    }
  } else {

  }
#line 389
  return;
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void do_ack(struct manager *mgr , u_int id ) 
{ 
  struct sk_buff *skb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 394
  tmp___1 = constant_test_bit(17U, (unsigned long const volatile   *)(& mgr->options));
#line 394
  if (tmp___1 != 0) {
#line 395
    if (mgr->lastid == id) {
#line 396
      tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 396
      if (tmp___0 != 0) {
#line 399
        skb = skb_dequeue(& mgr->sendq);
#line 400
        if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 401
          mgr->lastid = ((struct mISDNhead *)(& skb->cb))->id;
#line 402
          tmp = (*(mgr->ch.recv))(mgr->ch.peer, skb);
#line 402
          if (tmp == 0) {
#line 403
            return;
          } else {

          }
#line 404
          consume_skb(skb);
        } else {

        }
      } else {

      }
#line 407
      mgr->lastid = 65534U;
#line 408
      test_and_clear_bit(17, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
#line 410
  return;
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void mgr_send_down(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int tmp ;

  {
#line 416
  skb_queue_tail(& mgr->sendq, skb);
#line 417
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 417
  if (tmp == 0) {
#line 418
    _queue_data(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {
#line 421
    do_send(mgr);
  }
#line 422
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int dl_unit_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 428
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 428
  if (tmp == 0) {
#line 429
    return (-22);
  } else {

  }
#line 430
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mgr->options));
#line 430
  if (tmp___0 == 0) {
#line 431
    _queue_data(& mgr->ch, 257U, 65535U, 0U, 0, 208U);
  } else {

  }
#line 433
  skb_push(skb, 3U);
#line 434
  *(skb->data) = 2U;
#line 435
  *(skb->data + 1UL) = 255U;
#line 436
  *(skb->data + 2UL) = 3U;
#line 437
  ((struct mISDNhead *)(& skb->cb))->prim = 8193U;
#line 438
  ((struct mISDNhead *)(& skb->cb))->id = new_id(mgr);
#line 439
  skb_queue_tail(& mgr->sendq, skb);
#line 440
  do_send(mgr);
#line 441
  return (0);
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static unsigned int random_ri(void) 
{ 
  u16 x ;

  {
#line 449
  get_random_bytes((void *)(& x), 2);
#line 450
  return ((unsigned int )x);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct layer2 *findtei(struct manager *mgr , int tei ) 
{ 
  struct layer2 *l2 ;
  u_long flags ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 459
  flags = _raw_read_lock_irqsave(& mgr->lock);
#line 460
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 460
  l2 = (struct layer2 *)__mptr;
#line 460
  goto ldv_38985;
  ldv_38984: ;
#line 461
  if ((((int )l2->sapi == 0 && (int )l2->tei > 0) && (int )l2->tei != 127) && (int )l2->tei == tei) {
#line 463
    goto done;
  } else {

  }
#line 460
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 460
  l2 = (struct layer2 *)__mptr___0;
  ldv_38985: ;
#line 460
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 461
    goto ldv_38984;
  } else {

  }
#line 465
  l2 = 0;
  done: 
#line 467
  _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 468
  return (l2);
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void put_tei_msg(struct manager *mgr , u_char m_id , unsigned int ri , int tei ) 
{ 
  struct sk_buff *skb ;
  u_char bp[8U] ;
  int tmp ;
  u_int tmp___0 ;

  {
#line 477
  bp[0] = 252U;
#line 478
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 478
  if (tmp != 0) {
#line 479
    bp[0] = (u_char )((unsigned int )bp[0] | 2U);
  } else {

  }
#line 480
  bp[1] = 255U;
#line 481
  bp[2] = 3U;
#line 482
  bp[3] = 15U;
#line 483
  bp[4] = (u_char )(ri >> 8);
#line 484
  bp[5] = (u_char )ri;
#line 485
  bp[6] = m_id;
#line 486
  bp[7] = (u_char )((int )((signed char )(tei << 1)) | 1);
#line 487
  tmp___0 = new_id(mgr);
#line 487
  skb = _alloc_mISDN_skb(8193U, tmp___0, 8U, (void *)(& bp), 32U);
#line 488
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 489
    printk("<4>%s: no skb for tei msg\n", "put_tei_msg");
#line 490
    return;
  } else {

  }
#line 492
  mgr_send_down(mgr, skb);
#line 493
  return;
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_request(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;

  {
#line 498
  tm = (struct teimgr *)fi->userdata;
#line 500
  if ((int )(tm->l2)->tei != 127) {
#line 501
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request for already assigned tei %d",
                              (int )(tm->l2)->tei);
#line 504
    return;
  } else {

  }
#line 506
  tmp = random_ri();
#line 506
  tm->ri = (int )tmp;
#line 507
  if ((*debug___5 & 1048576U) != 0U) {
#line 508
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"assign request ri %d", tm->ri);
  } else {

  }
#line 510
  put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
#line 511
  mISDN_FsmChangeState(fi, 1);
#line 512
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 1);
#line 513
  tm->nval = 3;
#line 514
  return;
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_assign(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
#line 519
  tm = (struct teimgr *)fi->userdata;
#line 521
  dp = (u_char *)arg;
#line 524
  tmp = dp;
#line 524
  dp = dp + 1;
#line 524
  ri = (int )((unsigned int )*tmp << 8);
#line 525
  tmp___0 = dp;
#line 525
  dp = dp + 1;
#line 525
  ri = (int )*tmp___0 + ri;
#line 526
  dp = dp + 1;
#line 527
  tei = (int )*dp >> 1;
#line 528
  if ((*debug___5 & 1048576U) != 0U) {
#line 529
    (*(tm->tei_m.printdebug))(fi, (char *)"identity assign ri %d tei %d", ri, tei);
  } else {

  }
#line 531
  l2 = findtei(tm->mgr, tei);
#line 532
  if ((unsigned long )l2 != (unsigned long )((struct layer2 *)0)) {
#line 533
    if ((l2->tm)->ri != ri) {
#line 534
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
#line 536
      tei_l2(l2, 24324U, 0UL);
    } else
#line 538
    if (tm->ri == ri) {
#line 539
      mISDN_FsmDelTimer(& tm->timer, 1);
#line 540
      mISDN_FsmChangeState(fi, 0);
#line 541
      tei_l2(tm->l2, 6148U, (u_long )tei);
    } else {

    }
  } else {

  }
#line 543
  return;
}
}
#line 546 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_test_dup(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  struct layer2 *l2 ;
  u_char *dp ;
  int tei ;
  int ri ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
#line 548
  tm = (struct teimgr *)fi->userdata;
#line 550
  dp = (u_char *)arg;
#line 553
  tmp = dp;
#line 553
  dp = dp + 1;
#line 553
  ri = (int )((unsigned int )*tmp << 8);
#line 554
  tmp___0 = dp;
#line 554
  dp = dp + 1;
#line 554
  ri = (int )*tmp___0 + ri;
#line 555
  dp = dp + 1;
#line 556
  tei = (int )*dp >> 1;
#line 557
  if ((*debug___5 & 1048576U) != 0U) {
#line 558
    (*(tm->tei_m.printdebug))(fi, (char *)"foreign identity assign ri %d tei %d",
                              ri, tei);
  } else {

  }
#line 560
  l2 = findtei(tm->mgr, tei);
#line 561
  if ((unsigned long )l2 != (unsigned long )((struct layer2 *)0)) {
#line 562
    if ((l2->tm)->ri != ri) {
#line 563
      (*(tm->tei_m.printdebug))(fi, (char *)"possible duplicate assignment tei %d",
                                tei);
#line 565
      mISDN_FsmEvent(& (l2->tm)->tei_m, 7, 0);
    } else {

    }
  } else {

  }
#line 567
  return;
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_denied(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int ri ;
  int tei ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
#line 573
  tm = (struct teimgr *)fi->userdata;
#line 574
  dp = (u_char *)arg;
#line 577
  tmp = dp;
#line 577
  dp = dp + 1;
#line 577
  ri = (int )((unsigned int )*tmp << 8);
#line 578
  tmp___0 = dp;
#line 578
  dp = dp + 1;
#line 578
  ri = (int )*tmp___0 + ri;
#line 579
  dp = dp + 1;
#line 580
  tei = (int )*dp >> 1;
#line 581
  if ((*debug___5 & 1048576U) != 0U) {
#line 582
    (*(tm->tei_m.printdebug))(fi, (char *)"identity denied ri %d tei %d", ri, tei);
  } else {

  }
#line 583
  return;
}
}
#line 587 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;
  unsigned int tmp ;

  {
#line 589
  tm = (struct teimgr *)fi->userdata;
#line 590
  dp = (u_char *)arg;
#line 593
  tei = (int )*(dp + 3UL) >> 1;
#line 594
  if ((*debug___5 & 1048576U) != 0U) {
#line 595
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check req tei %d", tei);
  } else {

  }
#line 596
  if ((int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei)) {
#line 598
    mISDN_FsmDelTimer(& tm->timer, 4);
#line 599
    mISDN_FsmChangeState(& tm->tei_m, 0);
#line 600
    tmp = random_ri();
#line 600
    put_tei_msg(tm->mgr, 5, tmp, (int )(tm->l2)->tei);
  } else {

  }
#line 602
  return;
}
}
#line 605 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_remove(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
#line 607
  tm = (struct teimgr *)fi->userdata;
#line 608
  dp = (u_char *)arg;
#line 611
  tei = (int )*(dp + 3UL) >> 1;
#line 612
  if ((*debug___5 & 1048576U) != 0U) {
#line 613
    (*(tm->tei_m.printdebug))(fi, (char *)"identity remove tei %d", tei);
  } else {

  }
#line 614
  if ((int )(tm->l2)->tei != 127 && (tei == 127 || (int )(tm->l2)->tei == tei)) {
#line 616
    mISDN_FsmDelTimer(& tm->timer, 5);
#line 617
    mISDN_FsmChangeState(& tm->tei_m, 0);
#line 618
    tei_l2(tm->l2, 6660U, 0UL);
  } else {

  }
#line 620
  return;
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_verify(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
#line 625
  tm = (struct teimgr *)fi->userdata;
#line 627
  if ((*debug___5 & 1048576U) != 0U) {
#line 628
    (*(tm->tei_m.printdebug))(fi, (char *)"id verify request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
#line 630
  put_tei_msg(tm->mgr, 7, 0U, (int )(tm->l2)->tei);
#line 631
  mISDN_FsmChangeState(& tm->tei_m, 2);
#line 632
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
#line 633
  tm->nval = 2;
#line 634
  return;
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_req_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  unsigned int tmp ;

  {
#line 639
  tm = (struct teimgr *)fi->userdata;
#line 641
  tm->nval = tm->nval - 1;
#line 641
  if (tm->nval != 0) {
#line 642
    tmp = random_ri();
#line 642
    tm->ri = (int )tmp;
#line 643
    if ((*debug___5 & 1048576U) != 0U) {
#line 644
      (*(tm->tei_m.printdebug))(fi, (char *)"assign req(%d) ri %d", 4 - tm->nval,
                                tm->ri);
    } else {

    }
#line 646
    put_tei_msg(tm->mgr, 1, (unsigned int )tm->ri, 127);
#line 647
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 3);
  } else {
#line 649
    (*(tm->tei_m.printdebug))(fi, (char *)"assign req failed");
#line 650
    tei_l2(tm->l2, 24324U, 0UL);
#line 651
    mISDN_FsmChangeState(fi, 0);
  }
#line 653
  return;
}
}
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_ver_tout(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
#line 658
  tm = (struct teimgr *)fi->userdata;
#line 660
  tm->nval = tm->nval - 1;
#line 660
  if (tm->nval != 0) {
#line 661
    if ((*debug___5 & 1048576U) != 0U) {
#line 662
      (*(tm->tei_m.printdebug))(fi, (char *)"id verify req(%d) for tei %d", 3 - tm->nval,
                                (int )(tm->l2)->tei);
    } else {

    }
#line 665
    put_tei_msg(tm->mgr, 7, 0U, (int )(tm->l2)->tei);
#line 666
    mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
  } else {
#line 668
    (*(tm->tei_m.printdebug))(fi, (char *)"verify req for tei %d failed", (int )(tm->l2)->tei);
#line 670
    tei_l2(tm->l2, 6660U, 0UL);
#line 671
    mISDN_FsmChangeState(fi, 0);
  }
#line 673
  return;
}
}
#line 675 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode TeiFnListUser[11U]  = 
#line 675
  {      {0, 0, & tei_id_request}, 
        {0, 1, & tei_id_test_dup}, 
        {0, 7, & tei_id_verify}, 
        {0, 6, & tei_id_remove}, 
        {0, 4, & tei_id_chk_req}, 
        {1, 8, & tei_id_req_tout}, 
        {1, 1, & tei_id_assign}, 
        {1, 3, & tei_id_denied}, 
        {2, 8, & tei_id_ver_tout}, 
        {2, 6, & tei_id_remove}, 
        {2, 4, & tei_id_chk_req}};
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_l2remove(struct layer2 *l2 ) 
{ 


  {
#line 693
  put_tei_msg((l2->tm)->mgr, 6, 0U, (int )l2->tei);
#line 694
  tei_l2(l2, 6660U, 0UL);
#line 695
  list_del(& l2->ch.list);
#line 696
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 697
  return;
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_assign_req(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  u_char *tmp ;
  u_char *tmp___0 ;

  {
#line 702
  tm = (struct teimgr *)fi->userdata;
#line 703
  dp = (u_char *)arg;
#line 705
  if ((int )(tm->l2)->tei == 127) {
#line 706
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net tei assign request without tei");
#line 708
    return;
  } else {

  }
#line 710
  tmp = dp;
#line 710
  dp = dp + 1;
#line 710
  tm->ri = (int )((unsigned int )*tmp << 8);
#line 711
  tmp___0 = dp;
#line 711
  dp = dp + 1;
#line 711
  tm->ri = tm->ri + (int )*tmp___0;
#line 712
  if ((*debug___5 & 1048576U) != 0U) {
#line 713
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"net assign request ri %d teim %d",
                              tm->ri, (int )*dp);
  } else {

  }
#line 715
  put_tei_msg(tm->mgr, 2, (unsigned int )tm->ri, (int )(tm->l2)->tei);
#line 716
  mISDN_FsmChangeState(fi, 0);
#line 717
  return;
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_req_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
#line 722
  tm = (struct teimgr *)fi->userdata;
#line 724
  if ((*debug___5 & 1048576U) != 0U) {
#line 725
    (*(tm->tei_m.printdebug))(fi, (char *)"id check request for tei %d", (int )(tm->l2)->tei);
  } else {

  }
#line 727
  tm->rcnt = 0;
#line 728
  put_tei_msg(tm->mgr, 4, 0U, (int )(tm->l2)->tei);
#line 729
  mISDN_FsmChangeState(& tm->tei_m, 2);
#line 730
  mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 2);
#line 731
  tm->nval = 2;
#line 732
  return;
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_chk_resp(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
#line 737
  tm = (struct teimgr *)fi->userdata;
#line 738
  dp = (u_char *)arg;
#line 741
  tei = (int )*(dp + 3UL) >> 1;
#line 742
  if ((*debug___5 & 1048576U) != 0U) {
#line 743
    (*(tm->tei_m.printdebug))(fi, (char *)"identity check resp tei %d", tei);
  } else {

  }
#line 744
  if ((int )(tm->l2)->tei == tei) {
#line 745
    tm->rcnt = tm->rcnt + 1;
  } else {

  }
#line 746
  return;
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_verify_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;
  u_char *dp ;
  int tei ;

  {
#line 751
  tm = (struct teimgr *)fi->userdata;
#line 752
  dp = (u_char *)arg;
#line 755
  tei = (int )*(dp + 3UL) >> 1;
#line 756
  if ((*debug___5 & 1048576U) != 0U) {
#line 757
    (*(tm->tei_m.printdebug))(fi, (char *)"identity verify req tei %d/%d", tei, (int )(tm->l2)->tei);
  } else {

  }
#line 759
  if ((int )(tm->l2)->tei == tei) {
#line 760
    tei_id_chk_req_net(fi, event, arg);
  } else {

  }
#line 761
  return;
}
}
#line 764 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_id_ver_tout_net(struct FsmInst *fi , int event , void *arg ) 
{ 
  struct teimgr *tm ;

  {
#line 766
  tm = (struct teimgr *)fi->userdata;
#line 768
  if (tm->rcnt == 1) {
#line 769
    if ((*debug___5 & 1048576U) != 0U) {
#line 770
      (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d successful\n", (int )(tm->l2)->tei);
    } else {

    }
#line 772
    mISDN_FsmChangeState(fi, 0);
  } else
#line 773
  if (tm->rcnt > 1) {
#line 775
    tei_l2remove(tm->l2);
  } else {
#line 776
    tm->nval = tm->nval - 1;
#line 776
    if (tm->nval != 0) {
#line 777
      if ((*debug___5 & 1048576U) != 0U) {
#line 778
        (*(tm->tei_m.printdebug))(fi, (char *)"id check req(%d) for tei %d", 3 - tm->nval,
                                  (int )(tm->l2)->tei);
      } else {

      }
#line 781
      put_tei_msg(tm->mgr, 4, 0U, (int )(tm->l2)->tei);
#line 782
      mISDN_FsmAddTimer(& tm->timer, tm->tval, 8, 0, 4);
    } else {
#line 784
      (*(tm->tei_m.printdebug))(fi, (char *)"check req for tei %d failed", (int )(tm->l2)->tei);
#line 786
      mISDN_FsmChangeState(fi, 0);
#line 787
      tei_l2remove(tm->l2);
    }
  }
#line 789
  return;
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct FsmNode TeiFnListNet[5U]  = {      {0, 2, & tei_assign_req}, 
        {0, 7, & tei_id_verify_net}, 
        {0, 4, & tei_id_chk_req_net}, 
        {2, 8, & tei_id_ver_tout_net}, 
        {2, 5, & tei_id_chk_resp}};
#line 801 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void tei_ph_data_ind(struct teimgr *tm , u_int mt , u_char *dp , int len ) 
{ 
  int tmp ;

  {
#line 803
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& (tm->l2)->flag));
#line 803
  if (tmp != 0) {
#line 804
    return;
  } else {

  }
#line 805
  if ((*debug___5 & 1048576U) != 0U) {
#line 806
    (*(tm->tei_m.printdebug))(& tm->tei_m, (char *)"tei handler mt %x", mt);
  } else {

  }
#line 807
  if (mt == 2U) {
#line 808
    mISDN_FsmEvent(& tm->tei_m, 1, (void *)dp);
  } else
#line 809
  if (mt == 3U) {
#line 810
    mISDN_FsmEvent(& tm->tei_m, 3, (void *)dp);
  } else
#line 811
  if (mt == 4U) {
#line 812
    mISDN_FsmEvent(& tm->tei_m, 4, (void *)dp);
  } else
#line 813
  if (mt == 6U) {
#line 814
    mISDN_FsmEvent(& tm->tei_m, 6, (void *)dp);
  } else
#line 815
  if (mt == 7U) {
#line 816
    mISDN_FsmEvent(& tm->tei_m, 7, (void *)dp);
  } else
#line 817
  if (mt == 5U) {
#line 818
    mISDN_FsmEvent(& tm->tei_m, 5, (void *)dp);
  } else {

  }
#line 819
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static struct layer2 *create_new_tei(struct manager *mgr , int tei , int sapi ) 
{ 
  u_long opt ;
  u_long flags ;
  int id ;
  struct layer2 *l2 ;
  void *tmp ;

  {
#line 824
  opt = 0UL;
#line 829
  if ((unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0)) {
#line 830
    return (0);
  } else {

  }
#line 831
  if (tei >= 0 && tei <= 63) {
#line 832
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 833
  if ((((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U) {
#line 835
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 836
  l2 = create_l2(mgr->up, 17U, opt, tei, sapi);
#line 837
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 838
    printk("<4>%s:no memory for layer2\n", "create_new_tei");
#line 839
    return (0);
  } else {

  }
#line 841
  tmp = kzalloc(224UL, 208U);
#line 841
  l2->tm = (struct teimgr *)tmp;
#line 842
  if ((unsigned long )l2->tm == (unsigned long )((struct teimgr *)0)) {
#line 843
    kfree((void const   *)l2);
#line 844
    printk("<4>%s:no memory for teimgr\n", "create_new_tei");
#line 845
    return (0);
  } else {

  }
#line 847
  (l2->tm)->mgr = mgr;
#line 848
  (l2->tm)->l2 = l2;
#line 849
  (l2->tm)->tei_m.debug = (int )*debug___5 & 2097152;
#line 850
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
#line 851
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 852
  (l2->tm)->tei_m.fsm = & teifsmn;
#line 853
  (l2->tm)->tei_m.state = 0;
#line 854
  (l2->tm)->tval = 2000;
#line 855
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 856
  flags = _raw_write_lock_irqsave(& mgr->lock);
#line 857
  id = get_free_id(mgr);
#line 858
  list_add_tail(& l2->list, & mgr->layer2);
#line 859
  _raw_write_unlock_irqrestore(& mgr->lock, flags);
#line 860
  if (id < 0) {
#line 861
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 862
    printk("<4>%s:no free id\n", "create_new_tei");
#line 863
    return (0);
  } else {
#line 865
    l2->ch.nr = (u_int )id;
#line 866
    __add_layer2(& l2->ch, mgr->ch.st);
#line 867
    l2->ch.recv = mgr->ch.recv;
#line 868
    l2->ch.peer = mgr->ch.peer;
#line 869
    (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
  }
#line 871
  return (l2);
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static void new_tei_req(struct manager *mgr , u_char *dp ) 
{ 
  int tei ;
  int ri ;
  struct layer2 *l2 ;

  {
#line 880
  ri = (int )*dp << 8;
#line 881
  ri = (int )*(dp + 1UL) + ri;
#line 882
  if ((unsigned long )mgr->up == (unsigned long )((struct mISDNchannel *)0)) {
#line 883
    goto denied;
  } else {

  }
#line 884
  if (((int )*(dp + 3UL) & 1) == 0) {
#line 885
    goto denied;
  } else {

  }
#line 886
  if ((unsigned int )*(dp + 3UL) != 255U) {
#line 887
    tei = (int )*(dp + 3UL) >> 1;
  } else {
#line 889
    tei = get_free_tei(mgr);
  }
#line 890
  if (tei < 0) {
#line 891
    printk("<4>%s:No free tei\n", "new_tei_req");
#line 892
    goto denied;
  } else {

  }
#line 894
  l2 = create_new_tei(mgr, tei, 0);
#line 895
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 896
    goto denied;
  } else {
#line 898
    mISDN_FsmEvent(& (l2->tm)->tei_m, 2, (void *)dp);
  }
#line 899
  return;
  denied: 
#line 901
  put_tei_msg(mgr, 3, (unsigned int )ri, 127);
#line 902
  return;
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int ph_data_ind(struct manager *mgr , struct sk_buff *skb ) 
{ 
  int ret ;
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  u_char mt ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 907
  ret = -22;
#line 911
  if (skb->len <= 7U) {
#line 912
    if ((*debug___5 & 1048576U) != 0U) {
#line 913
      printk("<7>%s: short mgr frame %d/8\n", "ph_data_ind", skb->len);
    } else {

    }
#line 915
    goto done;
  } else {

  }
#line 918
  if ((unsigned int )((int )*(skb->data) >> 2) != 63U) {
#line 919
    goto done;
  } else {

  }
#line 920
  if ((int )*(skb->data) & 1) {
#line 921
    goto done;
  } else {

  }
#line 922
  if (((int )*(skb->data + 1UL) & 1) == 0) {
#line 923
    goto done;
  } else {

  }
#line 924
  if ((unsigned int )((int )*(skb->data + 1UL) >> 1) != 127U) {
#line 925
    goto done;
  } else {

  }
#line 926
  if (((int )*(skb->data + 2UL) & 239) != 3) {
#line 927
    goto done;
  } else {

  }
#line 928
  if ((unsigned int )*(skb->data + 3UL) != 15U) {
#line 929
    goto done;
  } else {

  }
#line 930
  mt = *(skb->data + 6UL);
#line 931
  switch ((int )mt) {
  case 1: ;
  case 5: ;
  case 7: 
#line 935
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 935
  if (tmp == 0) {
#line 936
    goto done;
  } else {

  }
#line 937
  goto ldv_39152;
  case 2: ;
  case 3: ;
  case 4: ;
  case 6: 
#line 942
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 942
  if (tmp___0 != 0) {
#line 943
    goto done;
  } else {

  }
#line 944
  goto ldv_39152;
  default: ;
#line 946
  goto done;
  }
  ldv_39152: 
#line 948
  ret = 0;
#line 949
  if ((unsigned int )mt == 1U) {
#line 950
    new_tei_req(mgr, skb->data + 4U);
#line 951
    goto done;
  } else {

  }
#line 953
  __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 953
  l2 = (struct layer2 *)__mptr;
#line 953
  __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 953
  nl2 = (struct layer2 *)__mptr___0;
#line 953
  goto ldv_39165;
  ldv_39164: 
#line 954
  tei_ph_data_ind(l2->tm, (u_int )mt, skb->data + 4U, (int )(skb->len - 4U));
#line 953
  l2 = nl2;
#line 953
  __mptr___1 = (struct list_head  const  *)nl2->list.next;
#line 953
  nl2 = (struct layer2 *)__mptr___1;
  ldv_39165: ;
#line 953
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 954
    goto ldv_39164;
  } else {

  }

  done: ;
#line 957
  return (ret);
}
}
#line 961 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
int l2_tei(struct layer2 *l2 , u_int cmd , u_long arg ) 
{ 
  struct teimgr *tm ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 963
  tm = l2->tm;
#line 965
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& l2->flag));
#line 965
  if (tmp != 0) {
#line 966
    return (0);
  } else {

  }
#line 967
  if ((*debug___5 & 1048576U) != 0U) {
#line 968
    printk("<7>%s: cmd(%x)\n", "l2_tei", cmd);
  } else {

  }
#line 969
  switch (cmd) {
  case (u_int )6404: 
#line 971
  mISDN_FsmEvent(& tm->tei_m, 0, 0);
#line 972
  goto ldv_39175;
  case (u_int )7940: 
#line 974
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 974
  if (tmp___0 != 0) {
#line 975
    mISDN_FsmEvent(& tm->tei_m, 4, (void *)(& l2->tei));
  } else {

  }
#line 976
  tmp___1 = constant_test_bit(24U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 976
  if (tmp___1 != 0) {
#line 977
    mISDN_FsmEvent(& tm->tei_m, 7, 0);
  } else {

  }
#line 978
  goto ldv_39175;
  case (u_int )7172: 
#line 980
  tmp___2 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 980
  if (tmp___2 != 0) {
#line 981
    mISDN_FsmEvent(& (tm->mgr)->deact, 0, 0);
  } else {

  }
#line 982
  goto ldv_39175;
  case (u_int )7428: 
#line 984
  tmp___3 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 984
  if (tmp___3 != 0) {
#line 985
    mISDN_FsmEvent(& (tm->mgr)->deact, 2, 0);
  } else {

  }
#line 986
  goto ldv_39175;
  case (u_int )7684: 
#line 988
  tmp___4 = constant_test_bit(25U, (unsigned long const volatile   *)(& (tm->mgr)->options));
#line 988
  if (tmp___4 != 0) {
#line 989
    mISDN_FsmEvent(& (tm->mgr)->deact, 4, 0);
  } else {

  }
#line 990
  goto ldv_39175;
  }
  ldv_39175: ;
#line 992
  return (0);
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void TEIrelease(struct layer2 *l2 ) 
{ 
  struct teimgr *tm ;
  u_long flags ;

  {
#line 998
  tm = l2->tm;
#line 1001
  mISDN_FsmDelTimer(& tm->timer, 1);
#line 1002
  flags = _raw_write_lock_irqsave(& (tm->mgr)->lock);
#line 1003
  list_del(& l2->list);
#line 1004
  _raw_write_unlock_irqrestore(& (tm->mgr)->lock, flags);
#line 1005
  l2->tm = 0;
#line 1006
  kfree((void const   *)tm);
#line 1007
  return;
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int create_teimgr(struct manager *mgr , struct channel_req *crq ) 
{ 
  struct layer2 *l2 ;
  u_long opt ;
  u_long flags ;
  int id ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 1013
  opt = 0UL;
#line 1017
  if ((*debug___5 & 1048576U) != 0U) {
#line 1018
    tmp = dev_name((struct device  const  *)(& ((mgr->ch.st)->dev)->dev));
#line 1018
    printk("<7>%s: %s proto(%x) adr(%d %d %d %d)\n", "create_teimgr", tmp, crq->protocol,
           (int )crq->adr.dev, (int )crq->adr.channel, (int )crq->adr.sapi, (int )crq->adr.tei);
  } else {

  }
#line 1022
  if ((int )((signed char )crq->adr.tei) < 0) {
#line 1023
    return (-22);
  } else {

  }
#line 1024
  if ((unsigned int )crq->adr.tei <= 63U) {
#line 1025
    test_and_set_bit(3, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1026
  if ((unsigned int )crq->adr.tei == 0U) {
#line 1027
    test_and_set_bit(2, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1028
  tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 1028
  if (tmp___1 != 0) {
#line 1029
    if (crq->protocol == 16U) {
#line 1030
      return (-93);
    } else {

    }
#line 1031
    if ((unsigned int )crq->adr.tei != 0U && (unsigned int )crq->adr.tei != 127U) {
#line 1032
      return (-22);
    } else {

    }
#line 1033
    if ((unsigned long )mgr->up != (unsigned long )((struct mISDNchannel *)0)) {
#line 1034
      printk("<4>%s: only one network manager is allowed\n", "create_teimgr");
#line 1037
      return (-16);
    } else {

    }
  } else {
#line 1039
    tmp___0 = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1039
    if (tmp___0 != 0) {
#line 1040
      if (crq->protocol == 17U) {
#line 1041
        return (-93);
      } else {

      }
#line 1042
      if ((unsigned int )crq->adr.tei > 63U && (unsigned int )crq->adr.tei <= 126U) {
#line 1043
        return (-22);
      } else {

      }
    } else {
#line 1045
      if (crq->protocol == 17U) {
#line 1046
        test_and_set_bit(25, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
#line 1047
      if (crq->protocol == 16U) {
#line 1048
        test_and_set_bit(24, (unsigned long volatile   *)(& mgr->options));
      } else {

      }
    }
  }
#line 1050
  if ((((mgr->ch.st)->dev)->Dprotocols & 24U) != 0U) {
#line 1052
    test_and_set_bit(1, (unsigned long volatile   *)(& opt));
  } else {

  }
#line 1053
  if (crq->protocol == 17U && (unsigned int )crq->adr.tei == 127U) {
#line 1054
    mgr->up = crq->ch;
#line 1055
    id = 1;
#line 1056
    teiup_create(mgr, 8U, 4, (void *)(& id));
#line 1057
    crq->ch = 0;
#line 1058
    tmp___2 = list_empty((struct list_head  const  *)(& mgr->layer2));
#line 1058
    if (tmp___2 == 0) {
#line 1059
      flags = _raw_read_lock_irqsave(& mgr->lock);
#line 1060
      __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 1060
      l2 = (struct layer2 *)__mptr;
#line 1060
      goto ldv_39208;
      ldv_39207: 
#line 1061
      l2->up = mgr->up;
#line 1062
      (*(l2->ch.ctrl))(& l2->ch, 256U, 0);
#line 1060
      __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 1060
      l2 = (struct layer2 *)__mptr___0;
      ldv_39208: ;
#line 1060
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1061
        goto ldv_39207;
      } else {

      }
#line 1064
      _raw_read_unlock_irqrestore(& mgr->lock, flags);
    } else {

    }
#line 1066
    return (0);
  } else {

  }
#line 1068
  l2 = create_l2(crq->ch, crq->protocol, opt, (int )crq->adr.tei, (int )crq->adr.sapi);
#line 1070
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 1071
    return (-12);
  } else {

  }
#line 1072
  tmp___3 = kzalloc(224UL, 208U);
#line 1072
  l2->tm = (struct teimgr *)tmp___3;
#line 1073
  if ((unsigned long )l2->tm == (unsigned long )((struct teimgr *)0)) {
#line 1074
    kfree((void const   *)l2);
#line 1075
    printk("<3>kmalloc teimgr failed\n");
#line 1076
    return (-12);
  } else {

  }
#line 1078
  (l2->tm)->mgr = mgr;
#line 1079
  (l2->tm)->l2 = l2;
#line 1080
  (l2->tm)->tei_m.debug = (int )*debug___5 & 2097152;
#line 1081
  (l2->tm)->tei_m.userdata = (void *)l2->tm;
#line 1082
  (l2->tm)->tei_m.printdebug = & tei_debug;
#line 1083
  if (crq->protocol == 16U) {
#line 1084
    (l2->tm)->tei_m.fsm = & teifsmu;
#line 1085
    (l2->tm)->tei_m.state = 0;
#line 1086
    (l2->tm)->tval = 1000;
  } else {
#line 1088
    (l2->tm)->tei_m.fsm = & teifsmn;
#line 1089
    (l2->tm)->tei_m.state = 0;
#line 1090
    (l2->tm)->tval = 2000;
  }
#line 1092
  mISDN_FsmInitTimer(& (l2->tm)->tei_m, & (l2->tm)->timer);
#line 1093
  flags = _raw_write_lock_irqsave(& mgr->lock);
#line 1094
  id = get_free_id(mgr);
#line 1095
  list_add_tail(& l2->list, & mgr->layer2);
#line 1096
  _raw_write_unlock_irqrestore(& mgr->lock, flags);
#line 1097
  if (id < 0) {
#line 1098
    (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
  } else {
#line 1100
    l2->ch.nr = (u_int )id;
#line 1101
    (l2->up)->nr = (u_int )id;
#line 1102
    crq->ch = & l2->ch;
#line 1103
    id = 0;
  }
#line 1105
  return (id);
}
}
#line 1109 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_send(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNhead *hh ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;
  int tmp ;

  {
#line 1112
  hh = (struct mISDNhead *)(& skb->cb);
#line 1113
  ret = -22;
#line 1115
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1115
  mgr = (struct manager *)__mptr;
#line 1116
  if ((*debug___5 & 524288U) != 0U) {
#line 1117
    printk("<7>%s: prim(%x) id(%x)\n", "mgr_send", hh->prim, hh->id);
  } else {

  }
#line 1119
  switch (hh->prim) {
  case 8194U: 
#line 1121
  mISDN_FsmEvent(& mgr->deact, 4, 0);
#line 1122
  ret = ph_data_ind(mgr, skb);
#line 1123
  goto ldv_39230;
  case 24578U: 
#line 1125
  do_ack(mgr, hh->id);
#line 1126
  ret = 0;
#line 1127
  goto ldv_39230;
  case 258U: 
#line 1129
  test_and_set_bit(16, (unsigned long volatile   *)(& mgr->options));
#line 1130
  mISDN_FsmEvent(& mgr->deact, 1, 0);
#line 1131
  do_send(mgr);
#line 1132
  ret = 0;
#line 1133
  goto ldv_39230;
  case 514U: 
#line 1135
  test_and_clear_bit(16, (unsigned long volatile   *)(& mgr->options));
#line 1136
  mISDN_FsmEvent(& mgr->deact, 3, 0);
#line 1137
  ret = 0;
#line 1138
  goto ldv_39230;
  case 12548U: 
#line 1140
  tmp = dl_unit_data(mgr, skb);
#line 1140
  return (tmp);
  }
  ldv_39230: ;
#line 1142
  if (ret == 0) {
#line 1143
    consume_skb(skb);
  } else {

  }
#line 1144
  return (ret);
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int free_teimanager(struct manager *mgr ) 
{ 
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1152
  test_and_clear_bit(5, (unsigned long volatile   *)(& mgr->options));
#line 1153
  tmp___0 = constant_test_bit(25U, (unsigned long const volatile   *)(& mgr->options));
#line 1153
  if (tmp___0 != 0) {
#line 1155
    mgr->up = 0;
#line 1156
    tmp = constant_test_bit(4U, (unsigned long const volatile   *)(& mgr->options));
#line 1156
    if (tmp != 0) {
#line 1157
      __mptr = (struct list_head  const  *)mgr->layer2.next;
#line 1157
      l2 = (struct layer2 *)__mptr;
#line 1157
      __mptr___0 = (struct list_head  const  *)l2->list.next;
#line 1157
      nl2 = (struct layer2 *)__mptr___0;
#line 1157
      goto ldv_39247;
      ldv_39246: 
#line 1158
      put_tei_msg(mgr, 6, 0U, (int )l2->tei);
#line 1159
      ldv_mutex_lock_62(& (mgr->ch.st)->lmutex);
#line 1160
      list_del(& l2->ch.list);
#line 1161
      ldv_mutex_unlock_63(& (mgr->ch.st)->lmutex);
#line 1162
      (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 1157
      l2 = nl2;
#line 1157
      __mptr___1 = (struct list_head  const  *)nl2->list.next;
#line 1157
      nl2 = (struct layer2 *)__mptr___1;
      ldv_39247: ;
#line 1157
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1158
        goto ldv_39246;
      } else {

      }
#line 1164
      test_and_clear_bit(25, (unsigned long volatile   *)(& mgr->options));
    } else {
#line 1166
      __mptr___2 = (struct list_head  const  *)mgr->layer2.next;
#line 1166
      l2 = (struct layer2 *)__mptr___2;
#line 1166
      __mptr___3 = (struct list_head  const  *)l2->list.next;
#line 1166
      nl2 = (struct layer2 *)__mptr___3;
#line 1166
      goto ldv_39256;
      ldv_39255: 
#line 1167
      l2->up = 0;
#line 1166
      l2 = nl2;
#line 1166
      __mptr___4 = (struct list_head  const  *)nl2->list.next;
#line 1166
      nl2 = (struct layer2 *)__mptr___4;
      ldv_39256: ;
#line 1166
      if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1167
        goto ldv_39255;
      } else {

      }

    }
  } else {

  }
#line 1171
  tmp___2 = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1171
  if (tmp___2 != 0) {
#line 1172
    tmp___1 = list_empty((struct list_head  const  *)(& mgr->layer2));
#line 1172
    if (tmp___1 != 0) {
#line 1173
      test_and_clear_bit(24, (unsigned long volatile   *)(& mgr->options));
    } else {

    }
  } else {

  }
#line 1175
  (*(((mgr->ch.st)->dev)->D.ctrl))(& ((mgr->ch.st)->dev)->D, 512U, 0);
#line 1176
  return (0);
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int ctrl_teimanager(struct manager *mgr , void *arg ) 
{ 
  int *val ;
  int ret ;

  {
#line 1183
  val = (int *)arg;
#line 1184
  ret = 0;
#line 1186
  switch (*val) {
  case -2147202746: ;
#line 1188
  if (*(val + 1UL) != 0) {
#line 1189
    test_and_set_bit(4, (unsigned long volatile   *)(& mgr->options));
  } else {
#line 1191
    test_and_clear_bit(4, (unsigned long volatile   *)(& mgr->options));
  }
#line 1192
  goto ldv_39265;
  case -2147202744: ;
#line 1194
  if (*(val + 1UL) != 0) {
#line 1195
    test_and_set_bit(5, (unsigned long volatile   *)(& mgr->options));
  } else {
#line 1197
    test_and_clear_bit(5, (unsigned long volatile   *)(& mgr->options));
  }
#line 1198
  goto ldv_39265;
  default: 
#line 1200
  ret = -22;
  }
  ldv_39265: ;
#line 1202
  return (ret);
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int check_data(struct manager *mgr , struct sk_buff *skb ) 
{ 
  struct mISDNhead *hh ;
  int ret ;
  int tei ;
  int sapi ;
  struct layer2 *l2 ;
  int tmp ;

  {
#line 1209
  hh = (struct mISDNhead *)(& skb->cb);
#line 1213
  if ((*debug___5 & 262144U) != 0U) {
#line 1214
    printk("<7>%s: prim(%x) id(%x)\n", "check_data", hh->prim, hh->id);
  } else {

  }
#line 1216
  tmp = constant_test_bit(24U, (unsigned long const volatile   *)(& mgr->options));
#line 1216
  if (tmp != 0) {
#line 1217
    return (-107);
  } else {

  }
#line 1218
  if (hh->prim != 8194U) {
#line 1219
    return (-107);
  } else {

  }
#line 1220
  if (skb->len != 3U) {
#line 1221
    return (-107);
  } else {

  }
#line 1222
  if (((int )*(skb->data) & 3) != 0) {
#line 1223
    return (-22);
  } else {

  }
#line 1224
  sapi = (int )*(skb->data) >> 2;
#line 1225
  if (((int )*(skb->data + 1UL) & 1) == 0) {
#line 1226
    return (-22);
  } else {

  }
#line 1227
  tei = (int )*(skb->data + 1UL) >> 1;
#line 1228
  if (tei > 63) {
#line 1229
    return (-107);
  } else {

  }
#line 1230
  if (((int )*(skb->data + 2UL) & -17) != 111) {
#line 1231
    return (-107);
  } else {

  }
#line 1233
  if ((*debug___5 & 262144U) != 0U) {
#line 1234
    printk("<7>%s: SABME sapi(%d) tei(%d)\n", "check_data", sapi, tei);
  } else {

  }
#line 1236
  l2 = create_new_tei(mgr, tei, sapi);
#line 1237
  if ((unsigned long )l2 == (unsigned long )((struct layer2 *)0)) {
#line 1238
    if ((*debug___5 & 262144U) != 0U) {
#line 1239
      printk("<7>%s: failed to create new tei\n", "check_data");
    } else {

    }
#line 1241
    return (-12);
  } else {

  }
#line 1243
  ret = (*(l2->ch.send))(& l2->ch, skb);
#line 1244
  return (ret);
}
}
#line 1248 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void delete_teimanager(struct mISDNchannel *ch ) 
{ 
  struct manager *mgr ;
  struct layer2 *l2 ;
  struct layer2 *nl2 ;
  struct mISDNchannel  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 1253
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1253
  mgr = (struct manager *)__mptr;
#line 1255
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
#line 1255
  l2 = (struct layer2 *)__mptr___0;
#line 1255
  __mptr___1 = (struct list_head  const  *)l2->list.next;
#line 1255
  nl2 = (struct layer2 *)__mptr___1;
#line 1255
  goto ldv_39293;
  ldv_39292: 
#line 1256
  ldv_mutex_lock_64(& (mgr->ch.st)->lmutex);
#line 1257
  list_del(& l2->ch.list);
#line 1258
  ldv_mutex_unlock_65(& (mgr->ch.st)->lmutex);
#line 1259
  (*(l2->ch.ctrl))(& l2->ch, 512U, 0);
#line 1255
  l2 = nl2;
#line 1255
  __mptr___2 = (struct list_head  const  *)nl2->list.next;
#line 1255
  nl2 = (struct layer2 *)__mptr___2;
  ldv_39293: ;
#line 1255
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1256
    goto ldv_39292;
  } else {

  }
#line 1261
  list_del(& mgr->ch.list);
#line 1262
  list_del(& mgr->bcast.list);
#line 1263
  skb_queue_purge(& mgr->sendq);
#line 1264
  kfree((void const   *)mgr);
#line 1265
  return;
}
}
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 
  struct manager *mgr ;
  int ret ;
  struct mISDNchannel  const  *__mptr ;

  {
#line 1271
  ret = -22;
#line 1273
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1273
  mgr = (struct manager *)__mptr;
#line 1274
  if ((*debug___5 & 262144U) != 0U) {
#line 1275
    printk("<7>%s(%x, %p)\n", "mgr_ctrl", cmd, arg);
  } else {

  }
#line 1276
  switch (cmd) {
  case (u_int )256: 
#line 1278
  ret = create_teimgr(mgr, (struct channel_req *)arg);
#line 1279
  goto ldv_39306;
  case (u_int )512: 
#line 1281
  ret = free_teimanager(mgr);
#line 1282
  goto ldv_39306;
  case (u_int )768: 
#line 1284
  ret = ctrl_teimanager(mgr, arg);
#line 1285
  goto ldv_39306;
  case (u_int )1024: 
#line 1287
  ret = check_data(mgr, (struct sk_buff *)arg);
#line 1288
  goto ldv_39306;
  }
  ldv_39306: ;
#line 1290
  return (ret);
}
}
#line 1294 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_bcast(struct mISDNchannel *ch , struct sk_buff *skb ) 
{ 
  struct manager *mgr ;
  struct mISDNchannel  const  *__mptr ;
  struct mISDNhead *hh ;
  struct sk_buff *cskb ;
  struct layer2 *l2 ;
  u_long flags ;
  int ret ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1296
  __mptr = (struct mISDNchannel  const  *)ch;
#line 1296
  mgr = (struct manager *)__mptr + 0xffffffffffffffb0UL;
#line 1297
  hh = (struct mISDNhead *)(& skb->cb);
#line 1298
  cskb = 0;
#line 1303
  flags = _raw_read_lock_irqsave(& mgr->lock);
#line 1304
  __mptr___0 = (struct list_head  const  *)mgr->layer2.next;
#line 1304
  l2 = (struct layer2 *)__mptr___0;
#line 1304
  goto ldv_39332;
  ldv_39331: ;
#line 1305
  if (((hh->id ^ l2->ch.addr) & 255U) == 0U) {
#line 1307
    tmp = list_is_last((struct list_head  const  *)(& l2->list), (struct list_head  const  *)(& mgr->layer2));
#line 1307
    if (tmp != 0) {
#line 1308
      cskb = skb;
#line 1309
      skb = 0;
    } else
#line 1311
    if ((unsigned long )cskb == (unsigned long )((struct sk_buff *)0)) {
#line 1312
      cskb = skb_copy((struct sk_buff  const  *)skb, 208U);
    } else {

    }
#line 1314
    if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
#line 1315
      ret = (*(l2->ch.send))(& l2->ch, cskb);
#line 1316
      if (ret != 0) {
#line 1317
        if ((*debug___5 & 16U) != 0U) {
#line 1318
          printk("<7>%s ch%d prim(%x) addr(%x) err %d\n", "mgr_bcast", l2->ch.nr,
                 hh->prim, l2->ch.addr, ret);
        } else {
#line 1324
          cskb = 0;
        }
      } else {

      }
    } else {
#line 1326
      printk("<4>%s ch%d addr %x no mem\n", "mgr_bcast", ch->nr, ch->addr);
#line 1328
      goto out;
    }
  } else {

  }
#line 1304
  __mptr___1 = (struct list_head  const  *)l2->list.next;
#line 1304
  l2 = (struct layer2 *)__mptr___1;
  ldv_39332: ;
#line 1304
  if ((unsigned long )(& l2->list) != (unsigned long )(& mgr->layer2)) {
#line 1305
    goto ldv_39331;
  } else {

  }

  out: 
#line 1333
  _raw_read_unlock_irqrestore(& mgr->lock, flags);
#line 1334
  if ((unsigned long )cskb != (unsigned long )((struct sk_buff *)0)) {
#line 1335
    consume_skb(cskb);
  } else {

  }
#line 1336
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 1337
    consume_skb(skb);
  } else {

  }
#line 1338
  return (0);
}
}
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
static int mgr_bcast_ctrl(struct mISDNchannel *ch , u_int cmd , void *arg ) 
{ 


  {
#line 1345
  return (-22);
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
int create_teimanager(struct mISDNdevice *dev ) 
{ 
  struct manager *mgr ;
  void *tmp ;
  struct lock_class_key __key ;

  {
#line 1353
  tmp = kzalloc(560UL, 208U);
#line 1353
  mgr = (struct manager *)tmp;
#line 1354
  if ((unsigned long )mgr == (unsigned long )((struct manager *)0)) {
#line 1355
    return (-12);
  } else {

  }
#line 1356
  INIT_LIST_HEAD(& mgr->layer2);
#line 1357
  __rwlock_init(& mgr->lock, "&mgr->lock", & __key);
#line 1358
  skb_queue_head_init(& mgr->sendq);
#line 1359
  mgr->nextid = 1U;
#line 1360
  mgr->lastid = 65534U;
#line 1361
  mgr->ch.send = & mgr_send;
#line 1362
  mgr->ch.ctrl = & mgr_ctrl;
#line 1363
  mgr->ch.st = dev->D.st;
#line 1364
  set_channel_address(& mgr->ch, 63U, 127U);
#line 1365
  add_layer2(& mgr->ch, dev->D.st);
#line 1366
  mgr->bcast.send = & mgr_bcast;
#line 1367
  mgr->bcast.ctrl = & mgr_bcast_ctrl;
#line 1368
  mgr->bcast.st = dev->D.st;
#line 1369
  set_channel_address(& mgr->bcast, 0U, 127U);
#line 1370
  add_layer2(& mgr->bcast, dev->D.st);
#line 1371
  mgr->deact.debug = (int )*debug___5 & 8;
#line 1372
  mgr->deact.userdata = (void *)mgr;
#line 1373
  mgr->deact.printdebug = & da_debug;
#line 1374
  mgr->deact.fsm = & deactfsm;
#line 1375
  mgr->deact.state = 0;
#line 1376
  mISDN_FsmInitTimer(& mgr->deact, & mgr->datimer);
#line 1377
  dev->teimgr = & mgr->ch;
#line 1378
  return (0);
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
int TEIInit(u_int *deb ) 
{ 


  {
#line 1383
  debug___5 = deb;
#line 1384
  teifsmu.state_count = 3;
#line 1385
  teifsmu.event_count = 9;
#line 1386
  teifsmu.strEvent = (char **)(& strTeiEvent);
#line 1387
  teifsmu.strState = (char **)(& strTeiState);
#line 1388
  mISDN_FsmNew(& teifsmu, (struct FsmNode *)(& TeiFnListUser), 11);
#line 1389
  teifsmn.state_count = 3;
#line 1390
  teifsmn.event_count = 9;
#line 1391
  teifsmn.strEvent = (char **)(& strTeiEvent);
#line 1392
  teifsmn.strState = (char **)(& strTeiState);
#line 1393
  mISDN_FsmNew(& teifsmn, (struct FsmNode *)(& TeiFnListNet), 5);
#line 1394
  deactfsm.state_count = 3;
#line 1395
  deactfsm.event_count = 6;
#line 1396
  deactfsm.strEvent = (char **)(& strDeactEvent);
#line 1397
  deactfsm.strState = (char **)(& strDeactState);
#line 1398
  mISDN_FsmNew(& deactfsm, (struct FsmNode *)(& DeactFnList), 6);
#line 1399
  return (0);
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void TEIFree(void) 
{ 


  {
#line 1404
  mISDN_FsmFree(& teifsmu);
#line 1405
  mISDN_FsmFree(& teifsmn);
#line 1406
  mISDN_FsmFree(& deactfsm);
#line 1407
  return;
}
}
#line 1409 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1414
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1416
  mutex_lock(ldv_func_arg1);
#line 1417
  return;
}
}
#line 1419 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
int ldv_mutex_trylock_60(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1424
  tmp = mutex_trylock(ldv_func_arg1);
#line 1424
  ldv_func_res = tmp;
#line 1426
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1426
  return (tmp___0);
#line 1428
  return (ldv_func_res);
}
}
#line 1431 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1436
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1438
  mutex_unlock(ldv_func_arg1);
#line 1439
  return;
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_lock_62(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1446
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 1448
  mutex_lock(ldv_func_arg1);
#line 1449
  return;
}
}
#line 1451 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1456
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 1458
  mutex_unlock(ldv_func_arg1);
#line 1459
  return;
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_lock_64(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1466
  ldv_mutex_lock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 1468
  mutex_lock(ldv_func_arg1);
#line 1469
  return;
}
}
#line 1471 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/tei.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1476
  ldv_mutex_unlock_lmutex_of_mISDNstack(ldv_func_arg1);
#line 1478
  mutex_unlock(ldv_func_arg1);
#line 1479
  return;
}
}
#line 111 "include/linux/list.h"
extern void __list_del_entry(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 164 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 167
  __list_del_entry(list);
#line 168
  list_add_tail(list, head);
#line 169
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_74(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_mutex_lock_73(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_76(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_mISDN_mutex(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_mISDN_mutex(struct mutex *lock ) ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6188;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6188;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6188;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_6188;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_6188: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 32 "include/linux/spinlock_api_smp.h"
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6006.rlock, flags);
#line 341
  return;
}
}
#line 295 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held___0(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  struct thread_info *tmp___0 ;
  unsigned long _flags ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 297
  lockdep_opinion = 0;
#line 299
  tmp = debug_lockdep_rcu_enabled();
#line 299
  if (tmp == 0) {
#line 300
    return (1);
  } else {

  }
#line 301
  if (debug_locks != 0) {
#line 302
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
  } else {

  }
#line 303
  if (lockdep_opinion != 0) {
#line 303
    tmp___2 = 1;
  } else {
#line 303
    tmp___0 = current_thread_info___0();
#line 303
    if (tmp___0->preempt_count != 0) {
#line 303
      tmp___2 = 1;
    } else {
#line 303
      _flags = arch_local_save_flags();
#line 303
      tmp___1 = arch_irqs_disabled_flags(_flags);
#line 303
      if (tmp___1 != 0) {
#line 303
        tmp___2 = 1;
      } else {
#line 303
        tmp___2 = 0;
      }
    }
  }
#line 303
  return (tmp___2);
}
}
#line 712 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 714
  tmp = current_thread_info___0();
#line 714
  tmp->preempt_count = tmp->preempt_count + 1;
#line 714
  __asm__  volatile   ("": : : "memory");
#line 716
  return;
}
}
#line 731 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 734
  __asm__  volatile   ("": : : "memory");
#line 734
  tmp = current_thread_info___0();
#line 734
  tmp->preempt_count = tmp->preempt_count + -1;
#line 734
  __asm__  volatile   ("": : : "memory");
#line 735
  return;
}
}
#line 2408 "include/linux/fs.h"
extern loff_t no_llseek(struct file * , loff_t  , int  ) ;
#line 2413
extern int nonseekable_open(struct inode * , struct file * ) ;
#line 40 "include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 


  {
#line 42
  if ((unsigned long )p != (unsigned long )((poll_table *)0) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0)) {
#line 43
    (*(p->qproc))(filp, wait_address, p);
  } else {

  }
#line 44
  return;
}
}
#line 94 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 89
  tmp___1 = static_branch(& __tracepoint_module_get.key);
#line 89
  if ((int )tmp___1) {
#line 89
    rcu_read_lock_sched_notrace___0();
#line 89
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 89
    tmp = debug_lockdep_rcu_enabled();
#line 89
    if (tmp != 0 && ! __warned) {
#line 89
      tmp___0 = rcu_read_lock_sched_held___0();
#line 89
      if (tmp___0 == 0 && 1) {
#line 89
        __warned = 1;
#line 89
        lockdep_rcu_suspicious("include/trace/events/module.h", 94, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 89
    it_func_ptr = _________p1;
#line 89
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_17584: 
#line 89
      it_func = it_func_ptr->func;
#line 89
      __data = it_func_ptr->data;
#line 89
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 89
      it_func_ptr = it_func_ptr + 1;
#line 89
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 90
        goto ldv_17584;
      } else {

      }

    } else {

    }
#line 89
    rcu_read_unlock_sched_notrace___0();
  } else {

  }
#line 91
  return;
}
}
#line 444 "include/linux/module.h"
__inline static void __module_get___0(struct module *module ) 
{ 
  struct thread_info *tmp ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  struct thread_info *tmp___0 ;

  {
#line 446
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 447
    tmp = current_thread_info___0();
#line 447
    tmp->preempt_count = tmp->preempt_count + 1;
#line 447
    __asm__  volatile   ("": : : "memory");
#line 448
    __vpp_verify = 0;
#line 448
    switch (4UL) {
    case 1UL: 
#line 448
    pao_ID__ = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_17903;
    case 2UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17903;
    case 4UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17903;
    case 8UL: ;
#line 448
    if (pao_ID__ == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID__ == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_17903;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_17903: ;
#line 448
    goto ldv_17908;
    case 2UL: 
#line 448
    pao_ID_____0 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_17914;
    case 2UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17914;
    case 4UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17914;
    case 8UL: ;
#line 448
    if (pao_ID_____0 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____0 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_17914;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_17914: ;
#line 448
    goto ldv_17908;
    case 4UL: 
#line 448
    pao_ID_____1 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_17924;
    case 2UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17924;
    case 4UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17924;
    case 8UL: ;
#line 448
    if (pao_ID_____1 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____1 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_17924;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_17924: ;
#line 448
    goto ldv_17908;
    case 8UL: 
#line 448
    pao_ID_____2 = 1;
#line 448
    switch (4UL) {
    case 1UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
    }
#line 448
    goto ldv_17934;
    case 2UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17934;
    case 4UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
    }
#line 448
    goto ldv_17934;
    case 8UL: ;
#line 448
    if (pao_ID_____2 == 1) {
#line 448
      __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else
#line 448
    if (pao_ID_____2 == -1) {
#line 448
      __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
    } else {
#line 448
      __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
    }
#line 448
    goto ldv_17934;
    default: 
#line 448
    __bad_percpu_size();
    }
    ldv_17934: ;
#line 448
    goto ldv_17908;
    default: 
#line 448
    __bad_size_call_parameter();
#line 448
    goto ldv_17908;
    }
    ldv_17908: ;
#line 449
    trace_module_get___0(module, (unsigned long )((void *)0));
#line 450
    __asm__  volatile   ("": : : "memory");
#line 450
    tmp___0 = current_thread_info___0();
#line 450
    tmp___0->preempt_count = tmp___0->preempt_count + -1;
#line 450
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 452
  return;
}
}
#line 59 "include/linux/miscdevice.h"
extern int misc_register(struct miscdevice * ) ;
#line 60
extern int misc_deregister(struct miscdevice * ) ;
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static struct mutex mISDN_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "mISDN_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& mISDN_mutex.wait_list,
                                                                                  & mISDN_mutex.wait_list},
    0, 0, (void *)(& mISDN_mutex), {0, {0, 0}, "mISDN_mutex", 0, 0UL}};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static u_int *debug___6  ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static int mISDN_open(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  void *tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  int tmp___0 ;

  {
#line 87
  if ((*debug___6 & 16777216U) != 0U) {
#line 88
    printk("<7>%s(%p,%p)\n", "mISDN_open", ino, filep);
  } else {

  }
#line 89
  tmp = kmalloc(208UL, 208U);
#line 89
  dev = (struct mISDNtimerdev *)tmp;
#line 90
  if ((unsigned long )dev == (unsigned long )((struct mISDNtimerdev *)0)) {
#line 91
    return (-12);
  } else {

  }
#line 92
  dev->next_id = 1;
#line 93
  INIT_LIST_HEAD(& dev->pending);
#line 94
  INIT_LIST_HEAD(& dev->expired);
#line 95
  spinlock_check(& dev->lock);
#line 95
  __raw_spin_lock_init(& dev->lock.ldv_6006.rlock, "&(&dev->lock)->rlock", & __key);
#line 96
  dev->work = 0U;
#line 97
  __init_waitqueue_head(& dev->wait, & __key___0);
#line 98
  filep->private_data = (void *)dev;
#line 99
  __module_get___0(& __this_module);
#line 100
  tmp___0 = nonseekable_open(ino, filep);
#line 100
  return (tmp___0);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static int mISDN_close(struct inode *ino , struct file *filep ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  struct mISDNtimer *next ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;

  {
#line 106
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 109
  if ((*debug___6 & 16777216U) != 0U) {
#line 110
    printk("<7>%s(%p,%p)\n", "mISDN_close", ino, filep);
  } else {

  }
#line 111
  __mptr = (struct list_head  const  *)dev->pending.next;
#line 111
  timer = (struct mISDNtimer *)__mptr;
#line 111
  __mptr___0 = (struct list_head  const  *)timer->list.next;
#line 111
  next = (struct mISDNtimer *)__mptr___0;
#line 111
  goto ldv_38669;
  ldv_38668: 
#line 112
  del_timer(& timer->tl);
#line 113
  kfree((void const   *)timer);
#line 111
  timer = next;
#line 111
  __mptr___1 = (struct list_head  const  *)next->list.next;
#line 111
  next = (struct mISDNtimer *)__mptr___1;
  ldv_38669: ;
#line 111
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
#line 112
    goto ldv_38668;
  } else {

  }
#line 115
  __mptr___2 = (struct list_head  const  *)dev->expired.next;
#line 115
  timer = (struct mISDNtimer *)__mptr___2;
#line 115
  __mptr___3 = (struct list_head  const  *)timer->list.next;
#line 115
  next = (struct mISDNtimer *)__mptr___3;
#line 115
  goto ldv_38678;
  ldv_38677: 
#line 116
  kfree((void const   *)timer);
#line 115
  timer = next;
#line 115
  __mptr___4 = (struct list_head  const  *)next->list.next;
#line 115
  next = (struct mISDNtimer *)__mptr___4;
  ldv_38678: ;
#line 115
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->expired)) {
#line 116
    goto ldv_38677;
  } else {

  }
#line 118
  kfree((void const   *)dev);
#line 119
  module_put(& __this_module);
#line 120
  return (0);
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static ssize_t mISDN_read(struct file *filep , char *buf , size_t count , loff_t *off ) 
{ 
  struct mISDNtimerdev *dev ;
  struct mISDNtimer *timer ;
  u_long flags ;
  int ret ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int __ret_pu ;
  int __pu_val ;
  int tmp___8 ;

  {
#line 126
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 129
  ret = 0;
#line 131
  if ((*debug___6 & 16777216U) != 0U) {
#line 132
    printk("<7>%s(%p, %p, %d, %p)\n", "mISDN_read", filep, buf, (int )count, off);
  } else {

  }
#line 135
  tmp___6 = list_empty((struct list_head  const  *)(& dev->expired));
#line 135
  if (tmp___6 != 0 && dev->work == 0U) {
#line 136
    if ((filep->f_flags & 2048U) != 0U) {
#line 137
      return (-11L);
    } else {

    }
#line 138
    __ret = 0;
#line 138
    if (dev->work == 0U) {
#line 138
      tmp___3 = list_empty((struct list_head  const  *)(& dev->expired));
#line 138
      if (tmp___3 != 0) {
#line 138
        tmp = get_current();
#line 138
        __wait.flags = 0U;
#line 138
        __wait.private = (void *)tmp;
#line 138
        __wait.func = & autoremove_wake_function;
#line 138
        __wait.task_list.next = & __wait.task_list;
#line 138
        __wait.task_list.prev = & __wait.task_list;
        ldv_38695: 
#line 138
        prepare_to_wait(& dev->wait, & __wait, 1);
#line 138
        if (dev->work != 0U) {
#line 138
          goto ldv_38693;
        } else {
#line 138
          tmp___0 = list_empty((struct list_head  const  *)(& dev->expired));
#line 138
          if (tmp___0 == 0) {
#line 138
            goto ldv_38693;
          } else {

          }
        }
#line 138
        tmp___1 = get_current();
#line 138
        tmp___2 = signal_pending(tmp___1);
#line 138
        if (tmp___2 == 0) {
#line 138
          schedule();
#line 138
          goto ldv_38694;
        } else {

        }
#line 138
        __ret = -512;
#line 138
        goto ldv_38693;
        ldv_38694: ;
#line 138
        goto ldv_38695;
        ldv_38693: 
#line 138
        finish_wait(& dev->wait, & __wait);
      } else {

      }
    } else {

    }
#line 140
    tmp___4 = get_current();
#line 140
    tmp___5 = signal_pending(tmp___4);
#line 140
    if (tmp___5 != 0) {
#line 141
      return (-512L);
    } else {

    }
  } else {

  }
#line 143
  if (count <= 3UL) {
#line 144
    return (-28L);
  } else {

  }
#line 145
  if (dev->work != 0U) {
#line 146
    dev->work = 0U;
  } else {

  }
#line 147
  tmp___8 = list_empty((struct list_head  const  *)(& dev->expired));
#line 147
  if (tmp___8 == 0) {
#line 148
    tmp___7 = spinlock_check(& dev->lock);
#line 148
    flags = _raw_spin_lock_irqsave(tmp___7);
#line 149
    timer = (struct mISDNtimer *)dev->expired.next;
#line 150
    list_del(& timer->list);
#line 151
    spin_unlock_irqrestore(& dev->lock, flags);
#line 152
    might_fault();
#line 152
    __pu_val = timer->id;
#line 152
    switch (4UL) {
    case 1UL: 
#line 152
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 152
    goto ldv_38703;
    case 2UL: 
#line 152
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 152
    goto ldv_38703;
    case 4UL: 
#line 152
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 152
    goto ldv_38703;
    case 8UL: 
#line 152
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 152
    goto ldv_38703;
    default: 
#line 152
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)buf): "ebx");
#line 152
    goto ldv_38703;
    }
    ldv_38703: ;
#line 152
    if (__ret_pu != 0) {
#line 153
      ret = -14;
    } else {
#line 155
      ret = 4;
    }
#line 156
    kfree((void const   *)timer);
  } else {

  }
#line 158
  return ((ssize_t )ret);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static unsigned int mISDN_poll(struct file *filep , poll_table *wait ) 
{ 
  struct mISDNtimerdev *dev ;
  unsigned int mask ;
  int tmp ;
  int tmp___0 ;

  {
#line 164
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 165
  mask = 8U;
#line 167
  if ((*debug___6 & 16777216U) != 0U) {
#line 168
    printk("<7>%s(%p, %p)\n", "mISDN_poll", filep, wait);
  } else {

  }
#line 169
  if ((unsigned long )dev != (unsigned long )((struct mISDNtimerdev *)0)) {
#line 170
    poll_wait(filep, & dev->wait, wait);
#line 171
    mask = 0U;
#line 172
    if (dev->work != 0U) {
#line 173
      mask = mask | 65U;
    } else {
#line 172
      tmp = list_empty((struct list_head  const  *)(& dev->expired));
#line 172
      if (tmp == 0) {
#line 173
        mask = mask | 65U;
      } else {

      }
    }
#line 174
    if ((*debug___6 & 16777216U) != 0U) {
#line 175
      tmp___0 = list_empty((struct list_head  const  *)(& dev->expired));
#line 175
      printk("<7>%s work(%d) empty(%d)\n", "mISDN_poll", dev->work, tmp___0);
    } else {

    }
  } else {

  }
#line 178
  return (mask);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static void dev_expire_timer(unsigned long data ) 
{ 
  struct mISDNtimer *timer ;
  u_long flags ;
  raw_spinlock_t *tmp ;

  {
#line 184
  timer = (struct mISDNtimer *)data;
#line 187
  tmp = spinlock_check(& (timer->dev)->lock);
#line 187
  flags = _raw_spin_lock_irqsave(tmp);
#line 188
  list_move_tail(& timer->list, & (timer->dev)->expired);
#line 189
  spin_unlock_irqrestore(& (timer->dev)->lock, flags);
#line 190
  __wake_up(& (timer->dev)->wait, 1U, 1, 0);
#line 191
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static int misdn_add_timer(struct mISDNtimerdev *dev , int timeout ) 
{ 
  int id ;
  u_long flags ;
  struct mISDNtimer *timer ;
  void *tmp ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lock_class_key __key ;

  {
#line 200
  if (timeout == 0) {
#line 201
    dev->work = 1U;
#line 202
    __wake_up(& dev->wait, 1U, 1, 0);
#line 203
    id = 0;
  } else {
#line 205
    tmp = kzalloc(160UL, 208U);
#line 205
    timer = (struct mISDNtimer *)tmp;
#line 206
    if ((unsigned long )timer == (unsigned long )((struct mISDNtimer *)0)) {
#line 207
      return (-12);
    } else {

    }
#line 208
    tmp___0 = spinlock_check(& dev->lock);
#line 208
    flags = _raw_spin_lock_irqsave(tmp___0);
#line 209
    tmp___1 = dev->next_id;
#line 209
    dev->next_id = dev->next_id + 1;
#line 209
    timer->id = tmp___1;
#line 210
    if (dev->next_id < 0) {
#line 211
      dev->next_id = 1;
    } else {

    }
#line 212
    list_add_tail(& timer->list, & dev->pending);
#line 213
    spin_unlock_irqrestore(& dev->lock, flags);
#line 214
    timer->dev = dev;
#line 215
    timer->tl.data = (unsigned long )timer;
#line 216
    timer->tl.function = & dev_expire_timer;
#line 217
    init_timer_key(& timer->tl, "&timer->tl", & __key);
#line 218
    timer->tl.expires = ((unsigned long )timeout * 250UL) / 1000UL + (unsigned long )jiffies;
#line 219
    add_timer(& timer->tl);
#line 220
    id = timer->id;
  }
#line 222
  return (id);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static int misdn_del_timer(struct mISDNtimerdev *dev , int id ) 
{ 
  u_long flags ;
  struct mISDNtimer *timer ;
  int ret ;
  raw_spinlock_t *tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 230
  ret = 0;
#line 232
  tmp = spinlock_check(& dev->lock);
#line 232
  flags = _raw_spin_lock_irqsave(tmp);
#line 233
  __mptr = (struct list_head  const  *)dev->pending.next;
#line 233
  timer = (struct mISDNtimer *)__mptr;
#line 233
  goto ldv_38751;
  ldv_38750: ;
#line 234
  if (timer->id == id) {
#line 235
    list_del_init(& timer->list);
#line 239
    del_timer(& timer->tl);
#line 240
    ret = timer->id;
#line 241
    kfree((void const   *)timer);
#line 242
    goto unlock;
  } else {

  }
#line 233
  __mptr___0 = (struct list_head  const  *)timer->list.next;
#line 233
  timer = (struct mISDNtimer *)__mptr___0;
  ldv_38751: ;
#line 233
  if ((unsigned long )(& timer->list) != (unsigned long )(& dev->pending)) {
#line 234
    goto ldv_38750;
  } else {

  }

  unlock: 
#line 246
  spin_unlock_irqrestore(& dev->lock, flags);
#line 247
  return (ret);
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static long mISDN_ioctl(struct file *filep , unsigned int cmd , unsigned long arg ) 
{ 
  struct mISDNtimerdev *dev ;
  int id ;
  int tout ;
  int ret ;
  int __ret_gu ;
  unsigned long __val_gu ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu___0 ;
  unsigned long __val_gu___0 ;
  int __ret_pu___0 ;
  int __pu_val___0 ;

  {
#line 253
  dev = (struct mISDNtimerdev *)filep->private_data;
#line 254
  ret = 0;
#line 257
  if ((*debug___6 & 16777216U) != 0U) {
#line 258
    printk("<7>%s(%p, %x, %lx)\n", "mISDN_ioctl", filep, cmd, arg);
  } else {

  }
#line 260
  ldv_mutex_lock_76(& mISDN_mutex);
#line 261
  switch (cmd) {
  case 2147764544U: 
#line 263
  might_fault();
#line 263
  switch (4UL) {
  case 1UL: 
#line 263
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 263
  goto ldv_38767;
  case 2UL: 
#line 263
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 263
  goto ldv_38767;
  case 4UL: 
#line 263
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 263
  goto ldv_38767;
  case 8UL: 
#line 263
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 263
  goto ldv_38767;
  default: 
#line 263
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)arg));
#line 263
  goto ldv_38767;
  }
  ldv_38767: 
#line 263
  tout = (int )__val_gu;
#line 263
  if (__ret_gu != 0) {
#line 264
    ret = -14;
#line 265
    goto ldv_38773;
  } else {

  }
#line 267
  id = misdn_add_timer(dev, tout);
#line 268
  if ((*debug___6 & 16777216U) != 0U) {
#line 269
    printk("<7>%s add %d id %d\n", "mISDN_ioctl", tout, id);
  } else {

  }
#line 271
  if (id < 0) {
#line 272
    ret = id;
#line 273
    goto ldv_38773;
  } else {

  }
#line 275
  might_fault();
#line 275
  __pu_val = id;
#line 275
  switch (4UL) {
  case 1UL: 
#line 275
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 275
  goto ldv_38777;
  case 2UL: 
#line 275
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 275
  goto ldv_38777;
  case 4UL: 
#line 275
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 275
  goto ldv_38777;
  case 8UL: 
#line 275
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 275
  goto ldv_38777;
  default: 
#line 275
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 275
  goto ldv_38777;
  }
  ldv_38777: ;
#line 275
  if (__ret_pu != 0) {
#line 276
    ret = -14;
  } else {

  }
#line 277
  goto ldv_38773;
  case 2147764545U: 
#line 279
  might_fault();
#line 279
  switch (4UL) {
  case 1UL: 
#line 279
  __asm__  volatile   ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 279
  goto ldv_38787;
  case 2UL: 
#line 279
  __asm__  volatile   ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 279
  goto ldv_38787;
  case 4UL: 
#line 279
  __asm__  volatile   ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 279
  goto ldv_38787;
  case 8UL: 
#line 279
  __asm__  volatile   ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 279
  goto ldv_38787;
  default: 
#line 279
  __asm__  volatile   ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)arg));
#line 279
  goto ldv_38787;
  }
  ldv_38787: 
#line 279
  id = (int )__val_gu___0;
#line 279
  if (__ret_gu___0 != 0) {
#line 280
    ret = -14;
#line 281
    goto ldv_38773;
  } else {

  }
#line 283
  if ((*debug___6 & 16777216U) != 0U) {
#line 284
    printk("<7>%s del id %d\n", "mISDN_ioctl", id);
  } else {

  }
#line 285
  id = misdn_del_timer(dev, id);
#line 286
  might_fault();
#line 286
  __pu_val___0 = id;
#line 286
  switch (4UL) {
  case 1UL: 
#line 286
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
#line 286
  goto ldv_38796;
  case 2UL: 
#line 286
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
#line 286
  goto ldv_38796;
  case 4UL: 
#line 286
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
#line 286
  goto ldv_38796;
  case 8UL: 
#line 286
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
#line 286
  goto ldv_38796;
  default: 
#line 286
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
#line 286
  goto ldv_38796;
  }
  ldv_38796: ;
#line 286
  if (__ret_pu___0 != 0) {
#line 287
    ret = -14;
  } else {

  }
#line 288
  goto ldv_38773;
  default: 
#line 290
  ret = -22;
  }
  ldv_38773: 
#line 292
  ldv_mutex_unlock_77(& mISDN_mutex);
#line 293
  return ((long )ret);
}
}
#line 296 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static struct file_operations  const  mISDN_fops  = 
#line 296
     {0, & no_llseek, & mISDN_read, 0, 0, 0, 0, & mISDN_poll, & mISDN_ioctl, 0, 0, & mISDN_open,
    0, & mISDN_close, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
static struct miscdevice mISDNtimer  = 
#line 305
     {255, "mISDNtimer", & mISDN_fops, {0, 0}, 0, 0, 0, 0U};
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
int mISDN_inittimer(u_int *deb ) 
{ 
  int err ;

  {
#line 316
  debug___6 = deb;
#line 317
  err = misc_register(& mISDNtimer);
#line 318
  if (err != 0) {
#line 319
    printk("<4>mISDN: Could not register timer device\n");
  } else {

  }
#line 320
  return (err);
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void mISDN_timer_cleanup(void) 
{ 


  {
#line 325
  misc_deregister(& mISDNtimer);
#line 326
  return;
}
}
#line 347
extern void ldv_check_return_value(int  ) ;
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct file *var_group1 ;
  char *var_mISDN_read_2_p1 ;
  size_t var_mISDN_read_2_p2 ;
  loff_t *var_mISDN_read_2_p3 ;
  ssize_t res_mISDN_read_2 ;
  poll_table *var_mISDN_poll_3_p1 ;
  unsigned int var_mISDN_ioctl_7_p1 ;
  unsigned long var_mISDN_ioctl_7_p2 ;
  struct inode *var_group2 ;
  int res_mISDN_open_0 ;
  unsigned long var_dev_expire_timer_4_p0 ;
  int ldv_s_mISDN_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 425
  ldv_s_mISDN_fops_file_operations = 0;
#line 415
  LDV_IN_INTERRUPT = 1;
#line 424
  ldv_initialize();
#line 431
  goto ldv_38850;
  ldv_38849: 
#line 435
  tmp = nondet_int();
#line 435
  switch (tmp) {
  case 0: ;
#line 440
  if (ldv_s_mISDN_fops_file_operations == 0) {
#line 445
    ldv_handler_precall();
#line 446
    res_mISDN_open_0 = mISDN_open(var_group2, var_group1);
#line 447
    ldv_check_return_value(res_mISDN_open_0);
#line 448
    if (res_mISDN_open_0 != 0) {
#line 449
      goto ldv_module_exit;
    } else {

    }
#line 450
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
#line 456
  goto ldv_38842;
  case 1: ;
#line 460
  if (ldv_s_mISDN_fops_file_operations == 1) {
#line 465
    ldv_handler_precall();
#line 466
    res_mISDN_read_2 = mISDN_read(var_group1, var_mISDN_read_2_p1, var_mISDN_read_2_p2,
                                  var_mISDN_read_2_p3);
#line 467
    ldv_check_return_value((int )res_mISDN_read_2);
#line 468
    if (res_mISDN_read_2 < 0L) {
#line 469
      goto ldv_module_exit;
    } else {

    }
#line 470
    ldv_s_mISDN_fops_file_operations = ldv_s_mISDN_fops_file_operations + 1;
  } else {

  }
#line 476
  goto ldv_38842;
  case 2: ;
#line 480
  if (ldv_s_mISDN_fops_file_operations == 2) {
#line 485
    ldv_handler_precall();
#line 486
    mISDN_close(var_group2, var_group1);
#line 487
    ldv_s_mISDN_fops_file_operations = 0;
  } else {

  }
#line 493
  goto ldv_38842;
  case 3: 
#line 502
  ldv_handler_precall();
#line 503
  mISDN_poll(var_group1, var_mISDN_poll_3_p1);
#line 510
  goto ldv_38842;
  case 4: 
#line 519
  ldv_handler_precall();
#line 520
  mISDN_ioctl(var_group1, var_mISDN_ioctl_7_p1, var_mISDN_ioctl_7_p2);
#line 527
  goto ldv_38842;
  case 5: 
#line 536
  ldv_handler_precall();
#line 537
  dev_expire_timer(var_dev_expire_timer_4_p0);
#line 544
  goto ldv_38842;
  default: ;
#line 545
  goto ldv_38842;
  }
  ldv_38842: ;
  ldv_38850: 
#line 431
  tmp___0 = nondet_int();
#line 431
  if (tmp___0 != 0 || ldv_s_mISDN_fops_file_operations != 0) {
#line 433
    goto ldv_38849;
  } else {

  }

  ldv_module_exit: ;
#line 554
  ldv_check_final_state();
#line 557
  return;
}
}
#line 561 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_mutex_lock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 566
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 568
  mutex_lock(ldv_func_arg1);
#line 569
  return;
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
int ldv_mutex_trylock_74(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 576
  tmp = mutex_trylock(ldv_func_arg1);
#line 576
  ldv_func_res = tmp;
#line 578
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 578
  return (tmp___0);
#line 580
  return (ldv_func_res);
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 588
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 590
  mutex_unlock(ldv_func_arg1);
#line 591
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_mutex_lock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 598
  ldv_mutex_lock_mISDN_mutex(ldv_func_arg1);
#line 600
  mutex_lock(ldv_func_arg1);
#line 601
  return;
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/dscv/ri/32_7a/drivers/isdn/mISDN/timerdev.c.prepared"
void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 608
  ldv_mutex_unlock_mISDN_mutex(ldv_func_arg1);
#line 610
  mutex_unlock(ldv_func_arg1);
#line 611
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_lmutex_of_mISDNstack  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_lmutex_of_mISDNstack = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_lmutex_of_mISDNstack = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_lmutex_of_mISDNstack = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_lmutex_of_mISDNstack = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_lmutex_of_mISDNstack(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_lmutex_of_mISDNstack = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_lmutex_of_mISDNstack(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_lmutex_of_mISDNstack == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_lmutex_of_mISDNstack = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mISDN_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mISDN_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_mISDN_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mISDN_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_mISDN_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mISDN_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_mISDN_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mISDN_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_mISDN_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mISDN_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_mISDN_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mISDN_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_mISDN_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mISDN_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_mISDN_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_mISDN_mutex = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_mutex_of_device = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_mutex_of_device = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_mutex_of_device = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_mutex_of_device = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_mutex_of_device = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_mutex_of_device == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_mutex_of_device = 1;
#line 462
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 469
  ldv_mutex_lmutex_of_mISDNstack = 1;
#line 471
  ldv_mutex_mISDN_mutex = 1;
#line 473
  ldv_mutex_mutex_of_device = 1;
#line 474
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/isdn/mISDN/mISDN_core.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/30/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 480
  if (ldv_mutex_lmutex_of_mISDNstack == 1) {

  } else {
#line 480
    ldv_error();
  }
#line 482
  if (ldv_mutex_mISDN_mutex == 1) {

  } else {
#line 482
    ldv_error();
  }
#line 484
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 484
    ldv_error();
  }
#line 485
  return;
}
}
