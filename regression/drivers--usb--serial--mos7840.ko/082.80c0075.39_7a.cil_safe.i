/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 32 "include/uapi/linux/types.h"
typedef __u16 __le16;
#line 34 "include/uapi/linux/types.h"
typedef __u32 __le32;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 176 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 176 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 181 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 181 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 182 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 187
struct hlist_node;
#line 187 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 191 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 202 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 157 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 710 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/bug.h"
struct timespec;
#line 97
struct compat_timespec;
#line 98 "include/linux/bug.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 98 "include/linux/bug.h"
struct __anonstruct_nanosleep_10 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 98
struct pollfd;
#line 98 "include/linux/bug.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 98 "include/linux/bug.h"
union __anonunion_ldv_1941_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 98 "include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1941_8 ldv_1941 ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 27
struct exec_domain;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2075_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2090_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2091_12 {
   struct __anonstruct_ldv_2075_13 ldv_2075 ;
   struct __anonstruct_ldv_2090_14 ldv_2090 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2091_12 ldv_2091 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 335
struct thread_struct;
#line 337
struct cpumask;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2694_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2694_19 ldv_2694 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 26 "include/linux/personality.h"
struct map_segment;
#line 26 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4998_24 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5004_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5005_23 {
   struct __anonstruct_ldv_4998_24 ldv_4998 ;
   struct __anonstruct_ldv_5004_25 ldv_5004 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5014_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5005_23 ldv_5005 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5014_26 ldv_5014 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 445
struct kmem_cache;
#line 446
struct perf_event;
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5865_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5865_29 ldv_5865 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5872_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5872_31 ldv_5872 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6088_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6089_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6088_33 ldv_6088 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6089_32 ldv_6089 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 11 "include/linux/wait.h"
struct __wait_queue;
#line 11 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 721 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 854 "include/linux/rcupdate.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 313 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 334
struct tvec_base;
#line 335 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 188 "include/linux/slab.h"
struct sock;
#line 189
struct kobject;
#line 190
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 196 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 93 "include/linux/bit_spinlock.h"
struct hlist_bl_node;
#line 93 "include/linux/bit_spinlock.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_12854_129 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_12856_128 {
   struct __anonstruct_ldv_12854_129 ldv_12854 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_12856_128 ldv_12856 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct inode;
#line 87
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_130 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_130 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 419 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380 "include/linux/radix-tree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 83
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 90
struct pid_namespace;
#line 90 "include/linux/rbtree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 42
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 54 "include/linux/delay.h"
struct percpu_rw_semaphore {
   unsigned int *counters ;
   bool locked ;
   struct mutex mtx ;
};
#line 91 "include/linux/percpu-rwsem.h"
struct block_device;
#line 92
struct io_context;
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 58
struct iovec;
#line 59
struct kiocb;
#line 60
struct pipe_inode_info;
#line 61
struct poll_table_struct;
#line 62
struct kstatfs;
#line 63
struct cred;
#line 64
struct swap_info_struct;
#line 64 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 240 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_14233_132 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_14233_132 ldv_14233 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 409
struct address_space;
#line 410
struct writeback_control;
#line 339 "include/linux/fs.h"
union __anonunion_arg_134 {
   char *buf ;
   void *data ;
};
#line 339 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_133 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_134 arg ;
   int error ;
};
#line 339 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_133 read_descriptor_t;
#line 342 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 401
struct backing_dev_info;
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 423
struct request_queue;
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
   struct percpu_rw_semaphore bd_block_size_semaphore ;
};
#line 498
struct posix_acl;
#line 499
struct inode_operations;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14670_135 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14690_136 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 499
struct file_lock;
#line 499
struct cdev;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14706_137 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 499 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_14670_135 ldv_14670 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_14690_136 ldv_14690 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_14706_137 ldv_14706 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 727 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 735 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 758 "include/linux/fs.h"
union __anonunion_f_u_138 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 758 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_138 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 901
struct files_struct;
#line 901 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 902 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 907 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 924
struct nlm_lockowner;
#line 925 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_140 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_139 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_140 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_139 fl_u ;
};
#line 1011 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1217 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1233
struct file_system_type;
#line 1233
struct super_operations;
#line 1233
struct xattr_handler;
#line 1233
struct mtd_info;
#line 1233 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1474 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1513 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1548 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1595 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1808 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 93 "include/asm-generic/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/termios.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36
struct serial_icounter_struct;
#line 37 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 288 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 288
struct tty_port;
#line 288 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev *cdevs ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   unsigned int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   unsigned long flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct tty_port **ports ;
   struct ktermios **termios ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/pps.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 568 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 578
struct dma_coherent_mem;
#line 578 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 703 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 48 "include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec ts_real ;
};
#line 124 "include/linux/pps_kernel.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   void (*dcd_change)(struct tty_struct * , unsigned int  , struct pps_event_time * ) ;
   struct module *owner ;
   int refcount ;
};
#line 154 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   atomic_t users ;
   wait_queue_head_t wq_idle ;
};
#line 160 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 42 "include/linux/tty.h"
struct tty_bufhead {
   struct work_struct work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 62
struct signal_struct;
#line 63 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   void (*drop)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 189 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   unsigned char console : 1 ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 211 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct device *dev ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex legacy_mutex ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios termios ;
   struct ktermios termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct kernel_param;
#line 45 "include/linux/elf.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_19838_147 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_19838_147 ldv_19838 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 648 "include/linux/module.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1U] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 91 "include/uapi/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9U] ;
};
#line 124 "include/uapi/linux/serial.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 bInterfaceNumber ;
   kernel_ulong_t driver_info ;
};
#line 225 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 610 "include/linux/mod_devicetable.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
};
#line 247 "include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 269 "include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 337 "include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 357 "include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 607 "include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
};
#line 686 "include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 745 "include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
};
#line 795 "include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
};
#line 805 "include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
};
#line 834 "include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
};
#line 899
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5
} ;
#line 908
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 189 "include/linux/hardirq.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 123 "include/linux/uprobes.h"
union __anonunion_ldv_22453_151 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 123 "include/linux/uprobes.h"
struct __anonstruct_ldv_22463_155 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 123 "include/linux/uprobes.h"
union __anonunion_ldv_22465_154 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_22463_155 ldv_22463 ;
   int units ;
};
#line 123 "include/linux/uprobes.h"
struct __anonstruct_ldv_22467_153 {
   union __anonunion_ldv_22465_154 ldv_22465 ;
   atomic_t _count ;
};
#line 123 "include/linux/uprobes.h"
union __anonunion_ldv_22468_152 {
   unsigned long counters ;
   struct __anonstruct_ldv_22467_153 ldv_22467 ;
};
#line 123 "include/linux/uprobes.h"
struct __anonstruct_ldv_22469_150 {
   union __anonunion_ldv_22453_151 ldv_22453 ;
   union __anonunion_ldv_22468_152 ldv_22468 ;
};
#line 123 "include/linux/uprobes.h"
struct __anonstruct_ldv_22476_157 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 123
struct slab;
#line 123 "include/linux/uprobes.h"
struct __anonstruct_ldv_22482_158 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 123 "include/linux/uprobes.h"
union __anonunion_ldv_22483_156 {
   struct list_head lru ;
   struct __anonstruct_ldv_22476_157 ldv_22476 ;
   struct list_head list ;
   struct __anonstruct_ldv_22482_158 ldv_22482 ;
};
#line 123 "include/linux/uprobes.h"
union __anonunion_ldv_22488_159 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 123 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_22469_150 ldv_22469 ;
   union __anonunion_ldv_22483_156 ldv_22483 ;
   union __anonunion_ldv_22488_159 ldv_22488 ;
   unsigned long debug_flags ;
};
#line 170 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 218 "include/linux/mm_types.h"
struct __anonstruct_linear_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 218 "include/linux/mm_types.h"
union __anonunion_shared_160 {
   struct __anonstruct_linear_161 linear ;
   struct list_head nonlinear ;
};
#line 218
struct anon_vma;
#line 218
struct vm_operations_struct;
#line 218
struct mempolicy;
#line 218 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_160 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 278 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 284 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 297 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 310
struct linux_binfmt;
#line 310
struct mmu_notifier_mm;
#line 310 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 32
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_162 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_162 sigset_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_164 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_165 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_168 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_169 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_170 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_163 {
   int _pad[28U] ;
   struct __anonstruct__kill_164 _kill ;
   struct __anonstruct__timer_165 _timer ;
   struct __anonstruct__rt_166 _rt ;
   struct __anonstruct__sigchld_167 _sigchld ;
   struct __anonstruct__sigfault_168 _sigfault ;
   struct __anonstruct__sigpoll_169 _sigpoll ;
   struct __anonstruct__sigsys_170 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_163 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 11 "include/linux/signal.h"
struct user_struct;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 80 "include/linux/seccomp.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/seccomp.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23305_173 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23314_174 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_175 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_176 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_23305_173 ldv_23305 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_23314_174 ldv_23314 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_175 type_data ;
   union __anonunion_payload_176 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 111 "include/linux/sched.h"
struct cfs_rq;
#line 112
struct task_group;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 38 "include/linux/uio.h"
struct kioctx;
#line 39 "include/linux/uio.h"
union __anonunion_ki_obj_177 {
   void *user ;
   struct task_struct *tsk ;
};
#line 39
struct eventfd_ctx;
#line 39 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_177 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 368 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 428 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 435 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 452 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 488
struct autogroup;
#line 489
struct taskstats;
#line 489
struct tty_audit_buf;
#line 489 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 664 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 724 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1025
struct rq;
#line 1026 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1092 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1097 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1158
struct rt_rq;
#line 1158 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1181
struct mem_cgroup;
#line 1181 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1544
struct css_set;
#line 1544
struct compat_robust_list_head;
#line 1544 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 250 "include/linux/pm_runtime.h"
struct usb_device;
#line 251
struct usb_driver;
#line 252
struct wusb_dev;
#line 253
struct ep_device;
#line 254 "include/linux/pm_runtime.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 75 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 90
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 97 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   unsigned char resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 204 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 231 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 295 "include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
};
#line 307 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 319
struct mon_bus;
#line 319 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   unsigned char no_stop_on_short : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 364
struct usb_tt;
#line 365
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
} ;
#line 378 "include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
#line 432 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   unsigned char lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_enabled : 1 ;
   unsigned char usb3_lpm_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
};
#line 760 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 931 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 941 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*unlocked_ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char disable_hub_initiated_lpm : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 1119 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1161
struct urb;
#line 1162 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
#line 1179
struct scatterlist;
#line 1179 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1689 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 273 "include/linux/scatterlist.h"
struct __kfifo {
   unsigned int in ;
   unsigned int out ;
   unsigned int mask ;
   unsigned int esize ;
   void *data ;
};
#line 65 "include/linux/kfifo.h"
union __anonunion_ldv_28532_179 {
   struct __kfifo kfifo ;
   unsigned char *type ;
   char (*rectype)[0U] ;
   void *ptr ;
   void const   *ptr_const ;
};
#line 65 "include/linux/kfifo.h"
struct kfifo {
   union __anonunion_ldv_28532_179 ldv_28532 ;
   unsigned char buf[0U] ;
};
#line 851
struct usb_serial;
#line 851 "include/linux/kfifo.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_in_buffers[2U] ;
   struct urb *read_urbs[2U] ;
   unsigned long read_urbs_free ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   struct kfifo write_fifo ;
   unsigned char *bulk_out_buffers[2U] ;
   struct urb *write_urbs[2U] ;
   unsigned long write_urbs_free ;
   __u8 bulk_out_endpointAddress ;
   int tx_bytes ;
   unsigned long flags ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   unsigned long sysrq ;
   struct device dev ;
};
#line 134 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 134 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char attached : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 183 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   size_t bulk_in_size ;
   size_t bulk_out_size ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*disconnect)(struct usb_serial * ) ;
   void (*release)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*reset_resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * ) ;
   void (*close)(struct usb_serial_port * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   void (*dtr_rts)(struct usb_serial_port * , int  ) ;
   int (*carrier_raised)(struct usb_serial_port * ) ;
   void (*init_termios)(struct tty_struct * ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
   void (*process_read_urb)(struct urb * ) ;
   int (*prepare_write_buffer)(struct usb_serial_port * , void * , size_t  ) ;
};
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16U] ;
   char busy[16U] ;
   bool read_urb_busy ;
   bool has_led ;
   bool led_flag ;
   struct timer_list led_timer1 ;
   struct timer_list led_timer2 ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 45 "include/linux/dynamic_debug.h"
extern int __dynamic_pr_debug(struct _ddebug * , char const   *  , ...) ;
#line 53
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 195 "include/linux/kernel.h"
extern void might_fault(void) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2788;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2788;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2788;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2788;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2788: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6089.rlock);
}
}
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_6089.rlock);
#line 286
  return;
}
}
#line 313
__inline static void ldv_spin_lock_19(spinlock_t *lock ) ;
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_6089.rlock);
#line 326
  return;
}
}
#line 353
__inline static void ldv_spin_unlock_20(spinlock_t *lock ) ;
#line 366 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 368
  _raw_spin_unlock_irqrestore(& lock->ldv_6089.rlock, flags);
#line 369
  return;
}
}
#line 384
__inline static void ldv_spin_unlock_irqrestore_22(spinlock_t *lock , unsigned long flags ) ;
#line 388
__inline static void ldv_spin_unlock_irqrestore_22(spinlock_t *lock , unsigned long flags ) ;
#line 392
__inline static void ldv_spin_unlock_irqrestore_22(spinlock_t *lock , unsigned long flags ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_21(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_23(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_25(spinlock_t *ldv_func_arg1 ) ;
#line 64
void ldv_spin_lock_node_size_lock_of_pglist_data(void) ;
#line 72
void ldv_spin_lock_pool_lock_of_moschip_port(void) ;
#line 73
void ldv_spin_unlock_pool_lock_of_moschip_port(void) ;
#line 80
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 63 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 139
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 562
extern long interruptible_sleep_on_timeout(wait_queue_head_t * , long  ) ;
#line 568
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 570
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 573
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 77 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 293
extern unsigned long msecs_to_jiffies(unsigned int const    ) ;
#line 94 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 176
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 245
extern int del_timer_sync(struct timer_list * ) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 375 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 377
  tmp = kmalloc(size, flags | 32768U);
#line 377
  return (tmp);
}
}
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  unsigned long tmp ;

  {
#line 74
  might_fault();
#line 76
  tmp = _copy_to_user(dst, src, size);
#line 76
  return ((int )tmp);
}
}
#line 820 "include/linux/device.h"
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 821
extern int dev_set_drvdata(struct device * , void * ) ;
#line 921
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 368 "include/linux/tty.h"
extern void tty_kref_put(struct tty_struct * ) ;
#line 413
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 418
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 435
extern void tty_wakeup(struct tty_struct * ) ;
#line 497
extern struct tty_struct *tty_port_tty_get(struct tty_port * ) ;
#line 6 "include/linux/tty_flip.h"
extern int tty_insert_flip_string_fixed_flag(struct tty_struct * , unsigned char const   * ,
                                             char  , size_t  ) ;
#line 23 "include/linux/tty_flip.h"
__inline static int tty_insert_flip_string(struct tty_struct *tty , unsigned char const   *chars ,
                                           size_t size ) 
{ 
  int tmp ;

  {
#line 25
  tmp = tty_insert_flip_string_fixed_flag(tty, chars, 0, size);
#line 25
  return (tmp);
}
}
#line 324 "include/linux/sched.h"
extern void schedule(void) ;
#line 2533 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2535
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2535
  return (tmp);
}
}
#line 2559 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2561
  tmp = test_tsk_thread_flag(p, 2);
#line 2561
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2561
  return ((int )tmp___0);
}
}
#line 1411 "include/linux/usb.h"
__inline static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 


  {
#line 1420
  urb->dev = dev;
#line 1421
  urb->pipe = pipe;
#line 1422
  urb->setup_packet = setup_packet;
#line 1423
  urb->transfer_buffer = transfer_buffer;
#line 1424
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1425
  urb->complete = complete_fn;
#line 1426
  urb->context = context;
#line 1427
  return;
}
}
#line 1442 "include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
#line 1450
  urb->dev = dev;
#line 1451
  urb->pipe = pipe;
#line 1452
  urb->transfer_buffer = transfer_buffer;
#line 1453
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1454
  urb->complete = complete_fn;
#line 1455
  urb->context = context;
#line 1456
  return;
}
}
#line 1483 "include/linux/usb.h"
__inline static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 


  {
#line 1492
  urb->dev = dev;
#line 1493
  urb->pipe = pipe;
#line 1494
  urb->transfer_buffer = transfer_buffer;
#line 1495
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1496
  urb->complete = complete_fn;
#line 1497
  urb->context = context;
#line 1498
  if ((unsigned int )dev->speed == 3U || (unsigned int )dev->speed == 5U) {
#line 1499
    urb->interval = 1 << (interval + -1);
  } else {
#line 1501
    urb->interval = interval;
  }
#line 1502
  urb->start_frame = -1;
#line 1503
  return;
}
}
#line 1506
extern struct urb *usb_alloc_urb(int  , gfp_t  ) ;
#line 1507
extern void usb_free_urb(struct urb * ) ;
#line 1510
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1512
extern void usb_kill_urb(struct urb * ) ;
#line 1579
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1597
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1703 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1706
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 124 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 126
  tmp = dev_get_drvdata((struct device  const  *)(& port->dev));
#line 126
  return (tmp);
}
}
#line 129 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 132
  dev_set_drvdata(& port->dev, data);
#line 133
  return;
}
}
#line 354 "include/linux/usb/serial.h"
__inline static void usb_serial_debug_data(struct device *dev , char const   *function ,
                                           int size , unsigned char const   *data ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 358
  descriptor.modname = "mos7840";
#line 358
  descriptor.function = "usb_serial_debug_data";
#line 358
  descriptor.filename = "include/linux/usb/serial.h";
#line 358
  descriptor.format = "%s - length = %d, data = %*ph\n";
#line 358
  descriptor.lineno = 359U;
#line 358
  descriptor.flags = 0U;
#line 358
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 358
  if (tmp != 0L) {
#line 358
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s - length = %d, data = %*ph\n",
                      function, size, size, data);
  } else {

  }
#line 360
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int device_type  ;
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  struct _ddebug descriptor ;
  long tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 330
  dev = (port->serial)->dev;
#line 331
  val = (unsigned int )val & 255U;
#line 332
  descriptor.modname = "mos7840";
#line 332
  descriptor.function = "mos7840_set_reg_sync";
#line 332
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 332
  descriptor.format = "mos7840_set_reg_sync offset is %x, value %x\n";
#line 332
  descriptor.lineno = 332U;
#line 332
  descriptor.flags = 0U;
#line 332
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 332
  if (tmp != 0L) {
#line 332
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "mos7840_set_reg_sync offset is %x, value %x\n",
                      (int )reg, (int )val);
  } else {

  }
#line 334
  tmp___0 = __create_pipe(dev, 0U);
#line 334
  tmp___1 = usb_control_msg(dev, tmp___0 | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 5000);
#line 334
  return (tmp___1);
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  u8 *buf ;
  void *tmp ;
  unsigned int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;

  {
#line 348
  dev = (port->serial)->dev;
#line 349
  ret = 0;
#line 352
  tmp = kmalloc(1UL, 208U);
#line 352
  buf = (u8 *)tmp;
#line 353
  if ((unsigned long )buf == (unsigned long )((u8 *)0)) {
#line 354
    return (-12);
  } else {

  }
#line 356
  tmp___0 = __create_pipe(dev, 0U);
#line 356
  ret = usb_control_msg(dev, tmp___0 | 2147483776U, 13, 192, 0, (int )reg, (void *)buf,
                        1, 5000);
#line 359
  *val = (__u16 )*buf;
#line 360
  descriptor.modname = "mos7840";
#line 360
  descriptor.function = "mos7840_get_reg_sync";
#line 360
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 360
  descriptor.format = "%s offset is %x, return val %x\n";
#line 360
  descriptor.lineno = 360U;
#line 360
  descriptor.flags = 0U;
#line 360
  tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 360
  if (tmp___1 != 0L) {
#line 360
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s offset is %x, return val %x\n",
                      "mos7840_get_reg_sync", (int )reg, (int )*val);
  } else {

  }
#line 362
  kfree((void const   *)buf);
#line 363
  return (ret);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  struct _ddebug descriptor ;
  long tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 376
  dev = (port->serial)->dev;
#line 377
  val = (unsigned int )val & 255U;
#line 380
  if ((unsigned int )(port->serial)->num_ports == 4U) {
#line 381
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
  } else
#line 384
  if ((int )port->number == (int )(port->serial)->minor) {
#line 385
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
  } else {
#line 388
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 2) << 8)) | (int )((short )val));
  }
#line 392
  descriptor.modname = "mos7840";
#line 392
  descriptor.function = "mos7840_set_uart_reg";
#line 392
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 392
  descriptor.format = "%s application number is %x\n";
#line 392
  descriptor.lineno = 392U;
#line 392
  descriptor.flags = 0U;
#line 392
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 392
  if (tmp != 0L) {
#line 392
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s application number is %x\n",
                      "mos7840_set_uart_reg", (int )val);
  } else {

  }
#line 393
  tmp___0 = __create_pipe(dev, 0U);
#line 393
  tmp___1 = usb_control_msg(dev, tmp___0 | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 5000);
#line 393
  return (tmp___1);
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  u8 *buf ;
  void *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 407
  dev = (port->serial)->dev;
#line 408
  ret = 0;
#line 412
  tmp = kmalloc(1UL, 208U);
#line 412
  buf = (u8 *)tmp;
#line 413
  if ((unsigned long )buf == (unsigned long )((u8 *)0)) {
#line 414
    return (-12);
  } else {

  }
#line 417
  if ((unsigned int )(port->serial)->num_ports == 4U) {
#line 418
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1U) << 8U;
  } else
#line 422
  if ((int )port->number == (int )(port->serial)->minor) {
#line 423
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1U) << 8U;
  } else {
#line 426
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2U) << 8U;
  }
#line 430
  descriptor.modname = "mos7840";
#line 430
  descriptor.function = "mos7840_get_uart_reg";
#line 430
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 430
  descriptor.format = "%s application number is %x\n";
#line 430
  descriptor.lineno = 430U;
#line 430
  descriptor.flags = 0U;
#line 430
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 430
  if (tmp___0 != 0L) {
#line 430
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s application number is %x\n",
                      "mos7840_get_uart_reg", (int )Wval);
  } else {

  }
#line 431
  tmp___1 = __create_pipe(dev, 0U);
#line 431
  ret = usb_control_msg(dev, tmp___1 | 2147483776U, 13, 192, (int )Wval, (int )reg,
                        (void *)buf, 1, 5000);
#line 434
  *val = (__u16 )*buf;
#line 436
  kfree((void const   *)buf);
#line 437
  return (ret);
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_dump_serial_port(struct usb_serial_port *port , struct moschip_port *mos7840_port ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;

  {
#line 444
  descriptor.modname = "mos7840";
#line 444
  descriptor.function = "mos7840_dump_serial_port";
#line 444
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 444
  descriptor.format = "SpRegOffset is %2x\n";
#line 444
  descriptor.lineno = 444U;
#line 444
  descriptor.flags = 0U;
#line 444
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 444
  if (tmp != 0L) {
#line 444
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "SpRegOffset is %2x\n",
                      (int )mos7840_port->SpRegOffset);
  } else {

  }
#line 445
  descriptor___0.modname = "mos7840";
#line 445
  descriptor___0.function = "mos7840_dump_serial_port";
#line 445
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 445
  descriptor___0.format = "ControlRegOffset is %2x\n";
#line 445
  descriptor___0.lineno = 445U;
#line 445
  descriptor___0.flags = 0U;
#line 445
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 445
  if (tmp___0 != 0L) {
#line 445
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev), "ControlRegOffset is %2x\n",
                      (int )mos7840_port->ControlRegOffset);
  } else {

  }
#line 446
  descriptor___1.modname = "mos7840";
#line 446
  descriptor___1.function = "mos7840_dump_serial_port";
#line 446
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 446
  descriptor___1.format = "DCRRegOffset is %2x\n";
#line 446
  descriptor___1.lineno = 446U;
#line 446
  descriptor___1.flags = 0U;
#line 446
  tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 446
  if (tmp___1 != 0L) {
#line 446
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev), "DCRRegOffset is %2x\n",
                      (int )mos7840_port->DcrRegOffset);
  } else {

  }
#line 448
  return;
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static void mos7840_set_port_private(struct usb_serial_port *port , struct moschip_port *data ) 
{ 


  {
#line 460
  usb_set_serial_port_data(port, (void *)data);
#line 461
  return;
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static struct moschip_port *mos7840_get_port_private(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 467
  tmp = usb_get_serial_port_data(port);
#line 467
  return ((struct moschip_port *)tmp);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;

  {
#line 474
  mos7840_port = port;
#line 475
  icount = & mos7840_port->icount;
#line 476
  if (((int )new_msr & 240) != 0) {
#line 479
    icount = & mos7840_port->icount;
#line 482
    if (((int )new_msr & 16) != 0) {
#line 483
      icount->cts = icount->cts + (__u32 )1;
#line 484
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 486
    if (((int )new_msr & 32) != 0) {
#line 487
      icount->dsr = icount->dsr + (__u32 )1;
#line 488
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 490
    if ((int )((signed char )new_msr) < 0) {
#line 491
      icount->dcd = icount->dcd + (__u32 )1;
#line 492
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 494
    if (((int )new_msr & 64) != 0) {
#line 495
      icount->rng = icount->rng + (__u32 )1;
#line 496
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 499
  return;
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;

  {
#line 505
  if (((int )new_lsr & 16) != 0) {
#line 511
    new_lsr = (unsigned int )new_lsr & 18U;
  } else {

  }
#line 515
  icount = & port->icount;
#line 516
  if (((int )new_lsr & 16) != 0) {
#line 517
    icount->brk = icount->brk + (__u32 )1;
#line 518
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 520
  if (((int )new_lsr & 2) != 0) {
#line 521
    icount->overrun = icount->overrun + (__u32 )1;
#line 522
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 524
  if (((int )new_lsr & 4) != 0) {
#line 525
    icount->parity = icount->parity + (__u32 )1;
#line 526
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 528
  if (((int )new_lsr & 8) != 0) {
#line 529
    icount->frame = icount->frame + (__u32 )1;
#line 530
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 532
  return;
}
}
#line 541 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  struct device *dev ;
  __u8 regval ;
  int status ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  struct _ddebug descriptor___2 ;
  long tmp___2 ;
  struct _ddebug descriptor___3 ;
  long tmp___3 ;

  {
#line 545
  dev = & (urb->dev)->dev;
#line 546
  regval = 0U;
#line 547
  status = urb->status;
#line 549
  mos7840_port = (struct moschip_port *)urb->context;
#line 551
  switch (status) {
  case 0: ;
#line 554
  goto ldv_29031;
  case -104: ;
  case -2: ;
  case -108: 
#line 559
  descriptor.modname = "mos7840";
#line 559
  descriptor.function = "mos7840_control_callback";
#line 559
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 559
  descriptor.format = "%s - urb shutting down with status: %d\n";
#line 559
  descriptor.lineno = 559U;
#line 559
  descriptor.flags = 0U;
#line 559
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 559
  if (tmp != 0L) {
#line 559
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s - urb shutting down with status: %d\n",
                      "mos7840_control_callback", status);
  } else {

  }
#line 560
  return;
  default: 
#line 562
  descriptor___0.modname = "mos7840";
#line 562
  descriptor___0.function = "mos7840_control_callback";
#line 562
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 562
  descriptor___0.format = "%s - nonzero urb status received: %d\n";
#line 562
  descriptor___0.lineno = 562U;
#line 562
  descriptor___0.flags = 0U;
#line 562
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 562
  if (tmp___0 != 0L) {
#line 562
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "%s - nonzero urb status received: %d\n",
                      "mos7840_control_callback", status);
  } else {

  }
#line 563
  return;
  }
  ldv_29031: 
#line 566
  descriptor___1.modname = "mos7840";
#line 566
  descriptor___1.function = "mos7840_control_callback";
#line 566
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 566
  descriptor___1.format = "%s urb buffer size is %d\n";
#line 566
  descriptor___1.lineno = 566U;
#line 566
  descriptor___1.flags = 0U;
#line 566
  tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 566
  if (tmp___1 != 0L) {
#line 566
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)dev, "%s urb buffer size is %d\n",
                      "mos7840_control_callback", urb->actual_length);
  } else {

  }
#line 567
  descriptor___2.modname = "mos7840";
#line 567
  descriptor___2.function = "mos7840_control_callback";
#line 567
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 567
  descriptor___2.format = "%s mos7840_port->MsrLsr is %d port %d\n";
#line 567
  descriptor___2.lineno = 568U;
#line 567
  descriptor___2.flags = 0U;
#line 567
  tmp___2 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 567
  if (tmp___2 != 0L) {
#line 567
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)dev, "%s mos7840_port->MsrLsr is %d port %d\n",
                      "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
  } else {

  }
#line 569
  data = (unsigned char *)urb->transfer_buffer;
#line 570
  regval = *data;
#line 571
  descriptor___3.modname = "mos7840";
#line 571
  descriptor___3.function = "mos7840_control_callback";
#line 571
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 571
  descriptor___3.format = "%s data is %x\n";
#line 571
  descriptor___3.lineno = 571U;
#line 571
  descriptor___3.flags = 0U;
#line 571
  tmp___3 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 571
  if (tmp___3 != 0L) {
#line 571
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)dev, "%s data is %x\n",
                      "mos7840_control_callback", (int )regval);
  } else {

  }
#line 572
  if (mos7840_port->MsrLsr == 0) {
#line 573
    mos7840_handle_new_msr(mos7840_port, (int )regval);
  } else
#line 574
  if (mos7840_port->MsrLsr == 1) {
#line 575
    mos7840_handle_new_lsr(mos7840_port, (int )regval);
  } else {

  }
#line 576
  return;
}
}
#line 578 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 581
  dev = ((mcs->port)->serial)->dev;
#line 582
  dr = mcs->dr;
#line 583
  buffer = (unsigned char *)mcs->ctrl_buf;
#line 586
  dr->bRequestType = 192U;
#line 587
  dr->bRequest = 13U;
#line 588
  dr->wValue = Wval;
#line 589
  dr->wIndex = reg;
#line 590
  dr->wLength = 2U;
#line 592
  tmp = __create_pipe(dev, 0U);
#line 592
  usb_fill_control_urb(mcs->control_urb, dev, tmp | 2147483776U, (unsigned char *)dr,
                       (void *)buffer, 2, & mos7840_control_callback, (void *)mcs);
#line 595
  (mcs->control_urb)->transfer_buffer_length = 2U;
#line 596
  ret = usb_submit_urb(mcs->control_urb, 32U);
#line 597
  return (ret);
}
}
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_led_callback(struct urb *urb ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;

  {
#line 602
  switch (urb->status) {
  case 0: ;
#line 605
  goto ldv_29056;
  case -104: ;
  case -2: ;
  case -108: 
#line 610
  descriptor.modname = "mos7840";
#line 610
  descriptor.function = "mos7840_set_led_callback";
#line 610
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 610
  descriptor.format = "%s - urb shutting down with status: %d";
#line 610
  descriptor.lineno = 611U;
#line 610
  descriptor.flags = 0U;
#line 610
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 610
  if (tmp != 0L) {
#line 610
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (urb->dev)->dev),
                      "%s - urb shutting down with status: %d", "mos7840_set_led_callback",
                      urb->status);
  } else {

  }
#line 612
  goto ldv_29056;
  default: 
#line 614
  descriptor___0.modname = "mos7840";
#line 614
  descriptor___0.function = "mos7840_set_led_callback";
#line 614
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 614
  descriptor___0.format = "%s - nonzero urb status received: %d";
#line 614
  descriptor___0.lineno = 615U;
#line 614
  descriptor___0.flags = 0U;
#line 614
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 614
  if (tmp___0 != 0L) {
#line 614
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (urb->dev)->dev),
                      "%s - nonzero urb status received: %d", "mos7840_set_led_callback",
                      urb->status);
  } else {

  }
  }
  ldv_29056: ;
#line 618
  return;
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_led_async(struct moschip_port *mcs , __u16 wval , __u16 reg ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned int tmp ;

  {
#line 622
  dev = ((mcs->port)->serial)->dev;
#line 623
  dr = mcs->dr;
#line 625
  dr->bRequestType = 64U;
#line 626
  dr->bRequest = 14U;
#line 627
  dr->wValue = wval;
#line 628
  dr->wIndex = reg;
#line 629
  dr->wLength = 0U;
#line 631
  tmp = __create_pipe(dev, 0U);
#line 631
  usb_fill_control_urb(mcs->control_urb, dev, tmp | 2147483648U, (unsigned char *)dr,
                       0, 0, & mos7840_set_led_callback, 0);
#line 634
  usb_submit_urb(mcs->control_urb, 32U);
#line 635
  return;
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_led_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;

  {
#line 640
  dev = (port->serial)->dev;
#line 642
  tmp = __create_pipe(dev, 0U);
#line 642
  usb_control_msg(dev, tmp | 2147483648U, 14, 64, (int )val, (int )reg, 0, 0, 5000);
#line 643
  return;
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_led_off(unsigned long arg ) 
{ 
  struct moschip_port *mcs ;
  unsigned long tmp ;

  {
#line 648
  mcs = (struct moschip_port *)arg;
#line 651
  mos7840_set_led_async(mcs, 768, 4);
#line 652
  tmp = msecs_to_jiffies(500U);
#line 652
  mod_timer(& mcs->led_timer2, tmp + (unsigned long )jiffies);
#line 654
  return;
}
}
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_led_flag_off(unsigned long arg ) 
{ 
  struct moschip_port *mcs ;

  {
#line 658
  mcs = (struct moschip_port *)arg;
#line 660
  mcs->led_flag = 0;
#line 661
  return;
}
}
#line 669 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5U] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  struct _ddebug descriptor___2 ;
  long tmp___2 ;
  struct _ddebug descriptor___3 ;
  long tmp___3 ;
  struct _ddebug descriptor___4 ;
  long tmp___4 ;
  struct _ddebug descriptor___5 ;
  long tmp___5 ;

  {
#line 678
  rv = 0;
#line 679
  wreg = 0U;
#line 680
  status = urb->status;
#line 682
  switch (status) {
  case 0: ;
#line 685
  goto ldv_29102;
  case -104: ;
  case -2: ;
  case -108: 
#line 690
  descriptor.modname = "mos7840";
#line 690
  descriptor.function = "mos7840_interrupt_callback";
#line 690
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 690
  descriptor.format = "%s - urb shutting down with status: %d\n";
#line 690
  descriptor.lineno = 691U;
#line 690
  descriptor.flags = 0U;
#line 690
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 690
  if (tmp != 0L) {
#line 690
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (urb->dev)->dev),
                      "%s - urb shutting down with status: %d\n", "mos7840_interrupt_callback",
                      status);
  } else {

  }
#line 692
  return;
  default: 
#line 694
  descriptor___0.modname = "mos7840";
#line 694
  descriptor___0.function = "mos7840_interrupt_callback";
#line 694
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 694
  descriptor___0.format = "%s - nonzero urb status received: %d\n";
#line 694
  descriptor___0.lineno = 695U;
#line 694
  descriptor___0.flags = 0U;
#line 694
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 694
  if (tmp___0 != 0L) {
#line 694
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (urb->dev)->dev),
                      "%s - nonzero urb status received: %d\n", "mos7840_interrupt_callback",
                      status);
  } else {

  }
#line 696
  goto exit;
  }
  ldv_29102: 
#line 699
  length = (int )urb->actual_length;
#line 700
  data = (unsigned char *)urb->transfer_buffer;
#line 702
  serial = (struct usb_serial *)urb->context;
#line 711
  if (length != 0 && length > 5) {
#line 712
    descriptor___1.modname = "mos7840";
#line 712
    descriptor___1.function = "mos7840_interrupt_callback";
#line 712
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 712
    descriptor___1.format = "%s";
#line 712
    descriptor___1.lineno = 712U;
#line 712
    descriptor___1.flags = 0U;
#line 712
    tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 712
    if (tmp___1 != 0L) {
#line 712
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& (urb->dev)->dev),
                        "%s", (char *)"Wrong data !!!\n");
    } else {

    }
#line 713
    return;
  } else {

  }
#line 716
  sp[0] = *data;
#line 717
  sp[1] = *(data + 1UL);
#line 718
  sp[2] = *(data + 2UL);
#line 719
  sp[3] = *(data + 3UL);
#line 720
  st = *(data + 4UL);
#line 722
  i = 0;
#line 722
  goto ldv_29120;
  ldv_29119: 
#line 723
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 724
  wval = ((unsigned int )((int )((__u16 )(serial->port[i])->number) - (int )((__u16 )serial->minor)) + 1U) << 8U;
#line 727
  if ((int )((signed char )mos7840_port->open) != 0) {
#line 728
    if ((int )sp[i] & 1) {
#line 729
      descriptor___2.modname = "mos7840";
#line 729
      descriptor___2.function = "mos7840_interrupt_callback";
#line 729
      descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 729
      descriptor___2.format = "SP%d No Interrupt !!!\n";
#line 729
      descriptor___2.lineno = 729U;
#line 729
      descriptor___2.flags = 0U;
#line 729
      tmp___2 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 729
      if (tmp___2 != 0L) {
#line 729
        __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& (urb->dev)->dev),
                          "SP%d No Interrupt !!!\n", i);
      } else {

      }
    } else {
#line 731
      switch ((int )sp[i] & 15) {
      case 6: 
#line 733
      descriptor___3.modname = "mos7840";
#line 733
      descriptor___3.function = "mos7840_interrupt_callback";
#line 733
      descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 733
      descriptor___3.format = "Serial Port %d: Receiver status error or \n";
#line 733
      descriptor___3.lineno = 733U;
#line 733
      descriptor___3.flags = 0U;
#line 733
      tmp___3 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 733
      if (tmp___3 != 0L) {
#line 733
        __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& (urb->dev)->dev),
                          "Serial Port %d: Receiver status error or \n", i);
      } else {

      }
#line 734
      descriptor___4.modname = "mos7840";
#line 734
      descriptor___4.function = "mos7840_interrupt_callback";
#line 734
      descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 734
      descriptor___4.format = "address bit detected in 9-bit mode\n";
#line 734
      descriptor___4.lineno = 734U;
#line 734
      descriptor___4.flags = 0U;
#line 734
      tmp___4 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 734
      if (tmp___4 != 0L) {
#line 734
        __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)(& (urb->dev)->dev),
                          "address bit detected in 9-bit mode\n");
      } else {

      }
#line 735
      mos7840_port->MsrLsr = 1;
#line 736
      wreg = 5U;
#line 737
      goto ldv_29116;
      case 0: 
#line 739
      descriptor___5.modname = "mos7840";
#line 739
      descriptor___5.function = "mos7840_interrupt_callback";
#line 739
      descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 739
      descriptor___5.format = "Serial Port %d: Modem status change\n";
#line 739
      descriptor___5.lineno = 739U;
#line 739
      descriptor___5.flags = 0U;
#line 739
      tmp___5 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 739
      if (tmp___5 != 0L) {
#line 739
        __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)(& (urb->dev)->dev),
                          "Serial Port %d: Modem status change\n", i);
      } else {

      }
#line 740
      mos7840_port->MsrLsr = 0;
#line 741
      wreg = 6U;
#line 742
      goto ldv_29116;
      }
      ldv_29116: 
#line 744
      rv = mos7840_get_reg(mos7840_port, (int )wval, (int )wreg, & Data);
    }
  } else {

  }
#line 722
  i = i + 1;
  ldv_29120: ;
#line 722
  if ((int )serial->num_ports > i) {
#line 723
    goto ldv_29119;
  } else {

  }

#line 748
  if (rv >= 0) {
#line 750
    return;
  } else {

  }
  exit: 
#line 752
  result = usb_submit_urb(urb, 32U);
#line 753
  if (result != 0) {
#line 754
    dev_err((struct device  const  *)(& (urb->dev)->dev), "%s - Error %d submitting interrupt urb\n",
            "mos7840_interrupt_callback", result);
  } else {

  }
#line 757
  return;
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;

  {
#line 763
  if ((unsigned long )port == (unsigned long )((struct usb_serial_port *)0)) {
#line 764
    descriptor.modname = "mos7840";
#line 764
    descriptor.function = "mos7840_port_paranoia_check";
#line 764
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 764
    descriptor.format = "%s - port == NULL\n";
#line 764
    descriptor.lineno = 764U;
#line 764
    descriptor.flags = 0U;
#line 764
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 764
    if (tmp != 0L) {
#line 764
      __dynamic_pr_debug(& descriptor, "%s - port == NULL\n", function);
    } else {

    }
#line 765
    return (-1);
  } else {

  }
#line 767
  if ((unsigned long )port->serial == (unsigned long )((struct usb_serial *)0)) {
#line 768
    descriptor___0.modname = "mos7840";
#line 768
    descriptor___0.function = "mos7840_port_paranoia_check";
#line 768
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 768
    descriptor___0.format = "%s - port->serial == NULL\n";
#line 768
    descriptor___0.lineno = 768U;
#line 768
    descriptor___0.flags = 0U;
#line 768
    tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 768
    if (tmp___0 != 0L) {
#line 768
      __dynamic_pr_debug(& descriptor___0, "%s - port->serial == NULL\n", function);
    } else {

    }
#line 769
    return (-1);
  } else {

  }
#line 772
  return (0);
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;

  {
#line 779
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 780
    descriptor.modname = "mos7840";
#line 780
    descriptor.function = "mos7840_serial_paranoia_check";
#line 780
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 780
    descriptor.format = "%s - serial == NULL\n";
#line 780
    descriptor.lineno = 780U;
#line 780
    descriptor.flags = 0U;
#line 780
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 780
    if (tmp != 0L) {
#line 780
      __dynamic_pr_debug(& descriptor, "%s - serial == NULL\n", function);
    } else {

    }
#line 781
    return (-1);
  } else {

  }
#line 783
  if ((unsigned long )serial->type == (unsigned long )((struct usb_serial_driver *)0)) {
#line 784
    descriptor___0.modname = "mos7840";
#line 784
    descriptor___0.function = "mos7840_serial_paranoia_check";
#line 784
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 784
    descriptor___0.format = "%s - serial->type == NULL!\n";
#line 784
    descriptor___0.lineno = 784U;
#line 784
    descriptor___0.flags = 0U;
#line 784
    tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 784
    if (tmp___0 != 0L) {
#line 784
      __dynamic_pr_debug(& descriptor___0, "%s - serial->type == NULL!\n", function);
    } else {

    }
#line 785
    return (-1);
  } else {

  }
#line 788
  return (0);
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 795
  if ((unsigned long )port == (unsigned long )((struct usb_serial_port *)0)) {
#line 800
    return (0);
  } else {
#line 795
    tmp = mos7840_port_paranoia_check(port, function);
#line 795
    if (tmp != 0) {
#line 800
      return (0);
    } else {
#line 795
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 795
      if (tmp___0 != 0) {
#line 800
        return (0);
      } else {

      }
    }
  }
#line 803
  return (port->serial);
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  struct _ddebug descriptor___0 ;
  long tmp___1 ;
  struct _ddebug descriptor___1 ;
  long tmp___2 ;
  unsigned long tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;

  {
#line 820
  status = urb->status;
#line 822
  mos7840_port = (struct moschip_port *)urb->context;
#line 823
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 824
    return;
  } else {

  }
#line 826
  if (status != 0) {
#line 827
    descriptor.modname = "mos7840";
#line 827
    descriptor.function = "mos7840_bulk_in_callback";
#line 827
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 827
    descriptor.format = "nonzero read bulk status received: %d\n";
#line 827
    descriptor.lineno = 827U;
#line 827
    descriptor.flags = 0U;
#line 827
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 827
    if (tmp != 0L) {
#line 827
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (urb->dev)->dev),
                        "nonzero read bulk status received: %d\n", status);
    } else {

    }
#line 828
    mos7840_port->read_urb_busy = 0;
#line 829
    return;
  } else {

  }
#line 832
  port = mos7840_port->port;
#line 833
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 833
  if (tmp___0 != 0) {
#line 834
    mos7840_port->read_urb_busy = 0;
#line 835
    return;
  } else {

  }
#line 838
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 839
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 840
    mos7840_port->read_urb_busy = 0;
#line 841
    return;
  } else {

  }
#line 844
  data = (unsigned char *)urb->transfer_buffer;
#line 845
  usb_serial_debug_data(& port->dev, "mos7840_bulk_in_callback", (int )urb->actual_length,
                        (unsigned char const   *)data);
#line 847
  if (urb->actual_length != 0U) {
#line 848
    tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 849
    if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 850
      tty_insert_flip_string(tty, (unsigned char const   *)data, (size_t )urb->actual_length);
#line 851
      tty_flip_buffer_push(tty);
#line 852
      tty_kref_put(tty);
    } else {

    }
#line 854
    mos7840_port->icount.rx = mos7840_port->icount.rx + urb->actual_length;
#line 855
    __asm__  volatile   ("": : : "memory");
#line 856
    descriptor___0.modname = "mos7840";
#line 856
    descriptor___0.function = "mos7840_bulk_in_callback";
#line 856
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 856
    descriptor___0.format = "mos7840_port->icount.rx is %d:\n";
#line 856
    descriptor___0.lineno = 856U;
#line 856
    descriptor___0.flags = 0U;
#line 856
    tmp___1 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 856
    if (tmp___1 != 0L) {
#line 856
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                        "mos7840_port->icount.rx is %d:\n", mos7840_port->icount.rx);
    } else {

    }
  } else {

  }
#line 859
  if ((unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0)) {
#line 860
    descriptor___1.modname = "mos7840";
#line 860
    descriptor___1.function = "mos7840_bulk_in_callback";
#line 860
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 860
    descriptor___1.format = "%s";
#line 860
    descriptor___1.lineno = 860U;
#line 860
    descriptor___1.flags = 0U;
#line 860
    tmp___2 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 860
    if (tmp___2 != 0L) {
#line 860
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev),
                        "%s", (char *)"URB KILLED !!!\n");
    } else {

    }
#line 861
    mos7840_port->read_urb_busy = 0;
#line 862
    return;
  } else {

  }
#line 866
  if ((int )mos7840_port->has_led && ! mos7840_port->led_flag) {
#line 867
    mos7840_port->led_flag = 1;
#line 868
    mos7840_set_led_async(mos7840_port, 769, 4);
#line 870
    tmp___3 = msecs_to_jiffies(500U);
#line 870
    mod_timer(& mos7840_port->led_timer1, tmp___3 + (unsigned long )jiffies);
  } else {

  }
#line 874
  mos7840_port->read_urb_busy = 1;
#line 875
  retval = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 877
  if (retval != 0) {
#line 878
    descriptor___2.modname = "mos7840";
#line 878
    descriptor___2.function = "mos7840_bulk_in_callback";
#line 878
    descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 878
    descriptor___2.format = "usb_submit_urb(read bulk) failed, retval = %d\n";
#line 878
    descriptor___2.lineno = 878U;
#line 878
    descriptor___2.flags = 0U;
#line 878
    tmp___4 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 878
    if (tmp___4 != 0L) {
#line 878
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev),
                        "usb_submit_urb(read bulk) failed, retval = %d\n", retval);
    } else {

    }
#line 879
    mos7840_port->read_urb_busy = 0;
  } else {

  }
#line 881
  return;
}
}
#line 889 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_serial_port *port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 894
  status = urb->status;
#line 897
  mos7840_port = (struct moschip_port *)urb->context;
#line 898
  port = mos7840_port->port;
#line 899
  ldv_spin_lock_19(& mos7840_port->pool_lock);
#line 900
  i = 0;
#line 900
  goto ldv_29165;
  ldv_29164: ;
#line 901
  if ((unsigned long )mos7840_port->write_urb_pool[i] == (unsigned long )urb) {
#line 902
    mos7840_port->busy[i] = 0;
#line 903
    goto ldv_29163;
  } else {

  }
#line 900
  i = i + 1;
  ldv_29165: ;
#line 900
  if (i <= 15) {
#line 901
    goto ldv_29164;
  } else {

  }
  ldv_29163: 
#line 906
  ldv_spin_unlock_20(& mos7840_port->pool_lock);
#line 908
  if (status != 0) {
#line 909
    descriptor.modname = "mos7840";
#line 909
    descriptor.function = "mos7840_bulk_out_data_callback";
#line 909
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 909
    descriptor.format = "nonzero write bulk status received:%d\n";
#line 909
    descriptor.lineno = 909U;
#line 909
    descriptor.flags = 0U;
#line 909
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 909
    if (tmp != 0L) {
#line 909
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "nonzero write bulk status received:%d\n",
                        status);
    } else {

    }
#line 910
    return;
  } else {

  }
#line 913
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_bulk_out_data_callback");
#line 913
  if (tmp___0 != 0) {
#line 914
    return;
  } else {

  }
#line 916
  tty = tty_port_tty_get(& port->port);
#line 917
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && (int )((signed char )mos7840_port->open) != 0) {
#line 918
    tty_wakeup(tty);
  } else {

  }
#line 919
  tty_kref_put(tty);
#line 920
  return;
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_open(struct tty_struct *tty , struct usb_serial_port *port ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;
  struct _ddebug descriptor___3 ;
  long tmp___5 ;
  struct _ddebug descriptor___4 ;
  long tmp___6 ;
  struct _ddebug descriptor___5 ;
  long tmp___7 ;
  struct _ddebug descriptor___6 ;
  long tmp___8 ;
  unsigned int tmp___9 ;
  struct _ddebug descriptor___7 ;
  long tmp___10 ;
  struct _ddebug descriptor___8 ;
  long tmp___11 ;
  struct _ddebug descriptor___9 ;
  long tmp___12 ;
  struct _ddebug descriptor___10 ;
  long tmp___13 ;
  struct _ddebug descriptor___11 ;
  long tmp___14 ;
  struct _ddebug descriptor___12 ;
  long tmp___15 ;
  unsigned int tmp___16 ;
  unsigned int tmp___17 ;
  struct _ddebug descriptor___13 ;
  long tmp___18 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
#line 957
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 957
  if (tmp != 0) {
#line 958
    return (-19);
  } else {

  }
#line 960
  serial = port->serial;
#line 962
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 962
  if (tmp___0 != 0) {
#line 963
    return (-19);
  } else {

  }
#line 965
  mos7840_port = mos7840_get_port_private(port);
#line 966
  port0 = mos7840_get_port_private(serial->port[0]);
#line 968
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0)) {
#line 969
    return (-19);
  } else {

  }
#line 971
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 972
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 973
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 976
  j = 0;
#line 976
  goto ldv_29183;
  ldv_29182: 
#line 977
  urb = usb_alloc_urb(0, 208U);
#line 978
  mos7840_port->write_urb_pool[j] = urb;
#line 980
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
#line 981
    dev_err((struct device  const  *)(& port->dev), "No more urbs???\n");
#line 982
    goto ldv_29181;
  } else {

  }
#line 985
  urb->transfer_buffer = kmalloc(32UL, 208U);
#line 987
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 988
    usb_free_urb(urb);
#line 989
    mos7840_port->write_urb_pool[j] = 0;
#line 990
    dev_err((struct device  const  *)(& port->dev), "%s-out of memory for urb buffers.\n",
            "mos7840_open");
#line 993
    goto ldv_29181;
  } else {

  }
  ldv_29181: 
#line 976
  j = j + 1;
  ldv_29183: ;
#line 976
  if (j <= 15) {
#line 977
    goto ldv_29182;
  } else {

  }
#line 1011
  Data = 0U;
#line 1012
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1013
  if (status < 0) {
#line 1014
    descriptor.modname = "mos7840";
#line 1014
    descriptor.function = "mos7840_open";
#line 1014
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1014
    descriptor.format = "Reading Spreg failed\n";
#line 1014
    descriptor.lineno = 1014U;
#line 1014
    descriptor.flags = 0U;
#line 1014
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1014
    if (tmp___1 != 0L) {
#line 1014
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "Reading Spreg failed\n");
    } else {

    }
#line 1015
    return (-1);
  } else {

  }
#line 1017
  Data = (__u16 )((unsigned int )Data | 128U);
#line 1018
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1019
  if (status < 0) {
#line 1020
    descriptor___0.modname = "mos7840";
#line 1020
    descriptor___0.function = "mos7840_open";
#line 1020
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1020
    descriptor___0.format = "writing Spreg failed\n";
#line 1020
    descriptor___0.lineno = 1020U;
#line 1020
    descriptor___0.flags = 0U;
#line 1020
    tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1020
    if (tmp___2 != 0L) {
#line 1020
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                        "writing Spreg failed\n");
    } else {

    }
#line 1021
    return (-1);
  } else {

  }
#line 1024
  Data = (unsigned int )Data & 65407U;
#line 1025
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1026
  if (status < 0) {
#line 1027
    descriptor___1.modname = "mos7840";
#line 1027
    descriptor___1.function = "mos7840_open";
#line 1027
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1027
    descriptor___1.format = "writing Spreg failed\n";
#line 1027
    descriptor___1.lineno = 1027U;
#line 1027
    descriptor___1.flags = 0U;
#line 1027
    tmp___3 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 1027
    if (tmp___3 != 0L) {
#line 1027
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev),
                        "writing Spreg failed\n");
    } else {

    }
#line 1028
    return (-1);
  } else {

  }
#line 1032
  Data = 0U;
#line 1033
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1035
  if (status < 0) {
#line 1036
    descriptor___2.modname = "mos7840";
#line 1036
    descriptor___2.function = "mos7840_open";
#line 1036
    descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1036
    descriptor___2.format = "Reading Controlreg failed\n";
#line 1036
    descriptor___2.lineno = 1036U;
#line 1036
    descriptor___2.flags = 0U;
#line 1036
    tmp___4 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 1036
    if (tmp___4 != 0L) {
#line 1036
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev),
                        "Reading Controlreg failed\n");
    } else {

    }
#line 1037
    return (-1);
  } else {

  }
#line 1039
  Data = (__u16 )((unsigned int )Data | 8U);
#line 1040
  Data = (__u16 )((unsigned int )Data | 32U);
#line 1041
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1043
  if (status < 0) {
#line 1044
    descriptor___3.modname = "mos7840";
#line 1044
    descriptor___3.function = "mos7840_open";
#line 1044
    descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1044
    descriptor___3.format = "writing Controlreg failed\n";
#line 1044
    descriptor___3.lineno = 1044U;
#line 1044
    descriptor___3.flags = 0U;
#line 1044
    tmp___5 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 1044
    if (tmp___5 != 0L) {
#line 1044
      __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev),
                        "writing Controlreg failed\n");
    } else {

    }
#line 1045
    return (-1);
  } else {

  }
#line 1052
  Data = 0U;
#line 1053
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1054
  if (status < 0) {
#line 1055
    descriptor___4.modname = "mos7840";
#line 1055
    descriptor___4.function = "mos7840_open";
#line 1055
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1055
    descriptor___4.format = "disabling interrupts failed\n";
#line 1055
    descriptor___4.lineno = 1055U;
#line 1055
    descriptor___4.flags = 0U;
#line 1055
    tmp___6 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 1055
    if (tmp___6 != 0L) {
#line 1055
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)(& port->dev),
                        "disabling interrupts failed\n");
    } else {

    }
#line 1056
    return (-1);
  } else {

  }
#line 1059
  Data = 0U;
#line 1060
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 1061
  if (status < 0) {
#line 1062
    descriptor___5.modname = "mos7840";
#line 1062
    descriptor___5.function = "mos7840_open";
#line 1062
    descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1062
    descriptor___5.format = "Writing FIFO_CONTROL_REGISTER  failed\n";
#line 1062
    descriptor___5.lineno = 1062U;
#line 1062
    descriptor___5.flags = 0U;
#line 1062
    tmp___7 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 1062
    if (tmp___7 != 0L) {
#line 1062
      __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)(& port->dev),
                        "Writing FIFO_CONTROL_REGISTER  failed\n");
    } else {

    }
#line 1063
    return (-1);
  } else {

  }
#line 1066
  Data = 207U;
#line 1067
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 1068
  if (status < 0) {
#line 1069
    descriptor___6.modname = "mos7840";
#line 1069
    descriptor___6.function = "mos7840_open";
#line 1069
    descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1069
    descriptor___6.format = "Writing FIFO_CONTROL_REGISTER  failed\n";
#line 1069
    descriptor___6.lineno = 1069U;
#line 1069
    descriptor___6.flags = 0U;
#line 1069
    tmp___8 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 1069
    if (tmp___8 != 0L) {
#line 1069
      __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)(& port->dev),
                        "Writing FIFO_CONTROL_REGISTER  failed\n");
    } else {

    }
#line 1070
    return (-1);
  } else {

  }
#line 1073
  Data = 3U;
#line 1074
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1075
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1077
  Data = 11U;
#line 1078
  status = mos7840_set_uart_reg(port, 4, (int )Data);
#line 1079
  mos7840_port->shadowMCR = (__u8 )Data;
#line 1081
  Data = 0U;
#line 1082
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 1083
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1085
  Data = (__u16 )((unsigned int )Data | 128U);
#line 1086
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1088
  Data = 12U;
#line 1089
  status = mos7840_set_uart_reg(port, 0, (int )Data);
#line 1091
  Data = 0U;
#line 1092
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1094
  Data = 0U;
#line 1095
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 1097
  Data = (unsigned int )Data & 65407U;
#line 1098
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1099
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1102
  Data = 0U;
#line 1103
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1105
  Data = (__u16 )((unsigned int )Data | 12U);
#line 1106
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1108
  Data = (unsigned int )Data & 65523U;
#line 1109
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1111
  Data = 12U;
#line 1112
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1115
  Data = 0U;
#line 1116
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1118
  Data = (unsigned int )Data & 65503U;
#line 1119
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1123
  Data = 0U;
#line 1124
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1126
  Data = (__u16 )((unsigned int )Data | 16U);
#line 1127
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1133
  if ((int )((signed char )port0->open_ports) == 1) {
#line 1134
    if ((unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((unsigned char *)0)) {
#line 1136
      tmp___9 = __create_pipe(serial->dev, (unsigned int )(serial->port[0])->interrupt_in_endpointAddress);
#line 1136
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, tmp___9 | 1073741952U,
                       (void *)(serial->port[0])->interrupt_in_buffer, (int )((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, (void *)serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1150
      response = usb_submit_urb((serial->port[0])->interrupt_in_urb, 208U);
#line 1153
      if (response != 0) {
#line 1154
        dev_err((struct device  const  *)(& port->dev), "%s - Error %d submitting interrupt urb\n",
                "mos7840_open", response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1166
  descriptor___7.modname = "mos7840";
#line 1166
  descriptor___7.function = "mos7840_open";
#line 1166
  descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1166
  descriptor___7.format = "port number is %d\n";
#line 1166
  descriptor___7.lineno = 1166U;
#line 1166
  descriptor___7.flags = 0U;
#line 1166
  tmp___10 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 1166
  if (tmp___10 != 0L) {
#line 1166
    __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)(& port->dev), "port number is %d\n",
                      (int )port->number);
  } else {

  }
#line 1167
  descriptor___8.modname = "mos7840";
#line 1167
  descriptor___8.function = "mos7840_open";
#line 1167
  descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1167
  descriptor___8.format = "serial number is %d\n";
#line 1167
  descriptor___8.lineno = 1167U;
#line 1167
  descriptor___8.flags = 0U;
#line 1167
  tmp___11 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 1167
  if (tmp___11 != 0L) {
#line 1167
    __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)(& port->dev), "serial number is %d\n",
                      (int )(port->serial)->minor);
  } else {

  }
#line 1168
  descriptor___9.modname = "mos7840";
#line 1168
  descriptor___9.function = "mos7840_open";
#line 1168
  descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1168
  descriptor___9.format = "Bulkin endpoint is %d\n";
#line 1168
  descriptor___9.lineno = 1168U;
#line 1168
  descriptor___9.flags = 0U;
#line 1168
  tmp___12 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 1168
  if (tmp___12 != 0L) {
#line 1168
    __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)(& port->dev), "Bulkin endpoint is %d\n",
                      (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1169
  descriptor___10.modname = "mos7840";
#line 1169
  descriptor___10.function = "mos7840_open";
#line 1169
  descriptor___10.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1169
  descriptor___10.format = "BulkOut endpoint is %d\n";
#line 1169
  descriptor___10.lineno = 1169U;
#line 1169
  descriptor___10.flags = 0U;
#line 1169
  tmp___13 = __builtin_expect((long )descriptor___10.flags & 1L, 0L);
#line 1169
  if (tmp___13 != 0L) {
#line 1169
    __dynamic_dev_dbg(& descriptor___10, (struct device  const  *)(& port->dev), "BulkOut endpoint is %d\n",
                      (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1170
  descriptor___11.modname = "mos7840";
#line 1170
  descriptor___11.function = "mos7840_open";
#line 1170
  descriptor___11.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1170
  descriptor___11.format = "Interrupt endpoint is %d\n";
#line 1170
  descriptor___11.lineno = 1170U;
#line 1170
  descriptor___11.flags = 0U;
#line 1170
  tmp___14 = __builtin_expect((long )descriptor___11.flags & 1L, 0L);
#line 1170
  if (tmp___14 != 0L) {
#line 1170
    __dynamic_dev_dbg(& descriptor___11, (struct device  const  *)(& port->dev), "Interrupt endpoint is %d\n",
                      (int )port->interrupt_in_endpointAddress);
  } else {

  }
#line 1171
  descriptor___12.modname = "mos7840";
#line 1171
  descriptor___12.function = "mos7840_open";
#line 1171
  descriptor___12.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1171
  descriptor___12.format = "port\'s number in the device is %d\n";
#line 1171
  descriptor___12.lineno = 1171U;
#line 1171
  descriptor___12.flags = 0U;
#line 1171
  tmp___15 = __builtin_expect((long )descriptor___12.flags & 1L, 0L);
#line 1171
  if (tmp___15 != 0L) {
#line 1171
    __dynamic_dev_dbg(& descriptor___12, (struct device  const  *)(& port->dev), "port\'s number in the device is %d\n",
                      mos7840_port->port_num);
  } else {

  }
#line 1172
  mos7840_port->read_urb = port->read_urb;
#line 1175
  if ((unsigned int )serial->num_ports == 2U && ((int )port->number - (int )(port->serial)->minor) & 1) {
#line 1178
    tmp___16 = __create_pipe(serial->dev, (unsigned int )((int )port->bulk_in_endpointAddress + 2));
#line 1178
    usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, tmp___16 | 3221225600U,
                      (void *)port->bulk_in_buffer, (int )(mos7840_port->read_urb)->transfer_buffer_length,
                      & mos7840_bulk_in_callback, (void *)mos7840_port);
  } else {
#line 1186
    tmp___17 = __create_pipe(serial->dev, (unsigned int )port->bulk_in_endpointAddress);
#line 1186
    usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, tmp___17 | 3221225600U,
                      (void *)port->bulk_in_buffer, (int )(mos7840_port->read_urb)->transfer_buffer_length,
                      & mos7840_bulk_in_callback, (void *)mos7840_port);
  }
#line 1195
  descriptor___13.modname = "mos7840";
#line 1195
  descriptor___13.function = "mos7840_open";
#line 1195
  descriptor___13.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1195
  descriptor___13.format = "%s: bulkin endpoint is %d\n";
#line 1195
  descriptor___13.lineno = 1195U;
#line 1195
  descriptor___13.flags = 0U;
#line 1195
  tmp___18 = __builtin_expect((long )descriptor___13.flags & 1L, 0L);
#line 1195
  if (tmp___18 != 0L) {
#line 1195
    __dynamic_dev_dbg(& descriptor___13, (struct device  const  *)(& port->dev), "%s: bulkin endpoint is %d\n",
                      "mos7840_open", (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1196
  mos7840_port->read_urb_busy = 1;
#line 1197
  response = usb_submit_urb(mos7840_port->read_urb, 208U);
#line 1198
  if (response != 0) {
#line 1199
    dev_err((struct device  const  *)(& port->dev), "%s - Error %d submitting control urb\n",
            "mos7840_open", response);
#line 1201
    mos7840_port->read_urb_busy = 0;
  } else {

  }
#line 1205
  __init_waitqueue_head(& mos7840_port->wait_chase, "&mos7840_port->wait_chase", & __key);
#line 1206
  __init_waitqueue_head(& mos7840_port->delta_msr_wait, "&mos7840_port->delta_msr_wait",
                        & __key___0);
#line 1209
  memset((void *)(& mos7840_port->icount), 0, 44UL);
#line 1213
  mos7840_port->shadowMCR = 8U;
#line 1215
  mos7840_port->open = 1;
#line 1217
  mos7840_port->icount.tx = 0U;
#line 1218
  mos7840_port->icount.rx = 0U;
#line 1220
  return (0);
}
}
#line 1233 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int chars ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  struct urb *urb ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
#line 1235
  port = (struct usb_serial_port *)tty->driver_data;
#line 1237
  chars = 0;
#line 1241
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1241
  if (tmp != 0) {
#line 1242
    return (0);
  } else {

  }
#line 1244
  mos7840_port = mos7840_get_port_private(port);
#line 1245
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1246
    return (0);
  } else {

  }
#line 1248
  ldv___ldv_spin_lock_21(& mos7840_port->pool_lock);
#line 1249
  i = 0;
#line 1249
  goto ldv_29213;
  ldv_29212: ;
#line 1250
  if ((int )((signed char )mos7840_port->busy[i]) != 0) {
#line 1251
    urb = mos7840_port->write_urb_pool[i];
#line 1252
    chars = (int )(urb->transfer_buffer_length + (u32 )chars);
  } else {

  }
#line 1249
  i = i + 1;
  ldv_29213: ;
#line 1249
  if (i <= 15) {
#line 1250
    goto ldv_29212;
  } else {

  }
#line 1255
  ldv_spin_unlock_irqrestore_22(& mos7840_port->pool_lock, flags);
#line 1256
  descriptor.modname = "mos7840";
#line 1256
  descriptor.function = "mos7840_chars_in_buffer";
#line 1256
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1256
  descriptor.format = "%s - returns %d\n";
#line 1256
  descriptor.lineno = 1256U;
#line 1256
  descriptor.flags = 0U;
#line 1256
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1256
  if (tmp___0 != 0L) {
#line 1256
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - returns %d\n",
                      "mos7840_chars_in_buffer", chars);
  } else {

  }
#line 1257
  return (chars);
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_close(struct usb_serial_port *port ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  struct _ddebug descriptor___0 ;
  long tmp___1 ;
  struct _ddebug descriptor___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___2 ;
  long tmp___3 ;
  struct _ddebug descriptor___3 ;
  long tmp___4 ;

  {
#line 1274
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1274
  if (tmp != 0) {
#line 1275
    return;
  } else {

  }
#line 1277
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1278
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 1279
    return;
  } else {

  }
#line 1281
  mos7840_port = mos7840_get_port_private(port);
#line 1282
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1284
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0)) {
#line 1285
    return;
  } else {

  }
#line 1287
  j = 0;
#line 1287
  goto ldv_29226;
  ldv_29225: 
#line 1288
  usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1287
  j = j + 1;
  ldv_29226: ;
#line 1287
  if (j <= 15) {
#line 1288
    goto ldv_29225;
  } else {

  }
#line 1291
  j = 0;
#line 1291
  goto ldv_29229;
  ldv_29228: ;
#line 1292
  if ((unsigned long )mos7840_port->write_urb_pool[j] != (unsigned long )((struct urb *)0)) {
#line 1293
    if ((unsigned long )(mos7840_port->write_urb_pool[j])->transfer_buffer != (unsigned long )((void *)0)) {
#line 1294
      kfree((void const   *)(mos7840_port->write_urb_pool[j])->transfer_buffer);
    } else {

    }
#line 1297
    usb_free_urb(mos7840_port->write_urb_pool[j]);
  } else {

  }
#line 1291
  j = j + 1;
  ldv_29229: ;
#line 1291
  if (j <= 15) {
#line 1292
    goto ldv_29228;
  } else {

  }

#line 1303
  if ((unsigned long )serial->dev != (unsigned long )((struct usb_device *)0)) {
#line 1304
    if ((unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0)) {
#line 1305
      descriptor.modname = "mos7840";
#line 1305
      descriptor.function = "mos7840_close";
#line 1305
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1305
      descriptor.format = "%s";
#line 1305
      descriptor.lineno = 1305U;
#line 1305
      descriptor.flags = 0U;
#line 1305
      tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1305
      if (tmp___0 != 0L) {
#line 1305
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s",
                          (char *)"Shutdown bulk write\n");
      } else {

      }
#line 1306
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1308
    if ((unsigned long )mos7840_port->read_urb != (unsigned long )((struct urb *)0)) {
#line 1309
      descriptor___0.modname = "mos7840";
#line 1309
      descriptor___0.function = "mos7840_close";
#line 1309
      descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1309
      descriptor___0.format = "%s";
#line 1309
      descriptor___0.lineno = 1309U;
#line 1309
      descriptor___0.flags = 0U;
#line 1309
      tmp___1 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1309
      if (tmp___1 != 0L) {
#line 1309
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                          "%s", (char *)"Shutdown bulk read\n");
      } else {

      }
#line 1310
      usb_kill_urb(mos7840_port->read_urb);
#line 1311
      mos7840_port->read_urb_busy = 0;
    } else {

    }
#line 1313
    if ((unsigned long )(& mos7840_port->control_urb) != (unsigned long )((struct urb **)0)) {
#line 1314
      descriptor___1.modname = "mos7840";
#line 1314
      descriptor___1.function = "mos7840_close";
#line 1314
      descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1314
      descriptor___1.format = "%s";
#line 1314
      descriptor___1.lineno = 1314U;
#line 1314
      descriptor___1.flags = 0U;
#line 1314
      tmp___2 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 1314
      if (tmp___2 != 0L) {
#line 1314
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev),
                          "%s", (char *)"Shutdown control read\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 1320
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1321
  descriptor___2.modname = "mos7840";
#line 1321
  descriptor___2.function = "mos7840_close";
#line 1321
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1321
  descriptor___2.format = "%s in close%d:in port%d\n";
#line 1321
  descriptor___2.lineno = 1321U;
#line 1321
  descriptor___2.flags = 0U;
#line 1321
  tmp___3 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 1321
  if (tmp___3 != 0L) {
#line 1321
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "%s in close%d:in port%d\n",
                      "mos7840_close", (int )port0->open_ports, (int )port->number);
  } else {

  }
#line 1322
  if ((int )((signed char )port0->open_ports) == 0) {
#line 1323
    if ((unsigned long )(serial->port[0])->interrupt_in_urb != (unsigned long )((struct urb *)0)) {
#line 1324
      descriptor___3.modname = "mos7840";
#line 1324
      descriptor___3.function = "mos7840_close";
#line 1324
      descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1324
      descriptor___3.format = "Shutdown interrupt_in_urb\n";
#line 1324
      descriptor___3.lineno = 1324U;
#line 1324
      descriptor___3.flags = 0U;
#line 1324
      tmp___4 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 1324
      if (tmp___4 != 0L) {
#line 1324
        __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev),
                          "Shutdown interrupt_in_urb\n");
      } else {

      }
#line 1325
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1329
  if ((unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0)) {
#line 1331
    if ((unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0)) {
#line 1332
      kfree((void const   *)(mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1333
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1336
  Data = 0U;
#line 1337
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 1339
  Data = 0U;
#line 1340
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1342
  mos7840_port->open = 0;
#line 1343
  return;
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_block_until_chase_response(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  unsigned long tmp ;
  int wait ;
  int count ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
#line 1359
  tmp = msecs_to_jiffies(1000U);
#line 1359
  timeout = (int )tmp;
#line 1360
  wait = 10;
  ldv_29245: 
#line 1364
  count = mos7840_chars_in_buffer(tty);
#line 1367
  if (count <= 0) {
#line 1368
    return;
  } else {

  }
#line 1371
  interruptible_sleep_on_timeout(& mos7840_port->wait_chase, (long )timeout);
#line 1374
  wait = wait - 1;
#line 1375
  if (wait == 0) {
#line 1376
    descriptor.modname = "mos7840";
#line 1376
    descriptor.function = "mos7840_block_until_chase_response";
#line 1376
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1376
    descriptor.format = "%s - TIMEOUT\n";
#line 1376
    descriptor.lineno = 1376U;
#line 1376
    descriptor.flags = 0U;
#line 1376
    tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1376
    if (tmp___0 != 0L) {
#line 1376
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mos7840_port->port)->dev),
                        "%s - TIMEOUT\n", "mos7840_block_until_chase_response");
    } else {

    }
#line 1377
    return;
  } else {
#line 1380
    wait = 10;
  }
#line 1382
  goto ldv_29245;
}
}
#line 1390 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_break(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
#line 1392
  port = (struct usb_serial_port *)tty->driver_data;
#line 1397
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1397
  if (tmp != 0) {
#line 1398
    return;
  } else {

  }
#line 1400
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1401
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 1402
    return;
  } else {

  }
#line 1404
  mos7840_port = mos7840_get_port_private(port);
#line 1406
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1407
    return;
  } else {

  }
#line 1409
  if ((unsigned long )serial->dev != (unsigned long )((struct usb_device *)0)) {
#line 1411
    mos7840_block_until_chase_response(tty, mos7840_port);
  } else {

  }
#line 1413
  if (break_state == -1) {
#line 1414
    data = (unsigned int )mos7840_port->shadowLCR | 64U;
  } else {
#line 1416
    data = (unsigned int )mos7840_port->shadowLCR & 191U;
  }
#line 1419
  mos7840_port->shadowLCR = data;
#line 1420
  descriptor.modname = "mos7840";
#line 1420
  descriptor.function = "mos7840_break";
#line 1420
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1420
  descriptor.format = "%s mos7840_port->shadowLCR is %x\n";
#line 1420
  descriptor.lineno = 1420U;
#line 1420
  descriptor.flags = 0U;
#line 1420
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1420
  if (tmp___0 != 0L) {
#line 1420
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s mos7840_port->shadowLCR is %x\n",
                      "mos7840_break", (int )mos7840_port->shadowLCR);
  } else {

  }
#line 1421
  mos7840_set_uart_reg(port, 3, (int )mos7840_port->shadowLCR);
#line 1423
  return;
}
}
#line 1433 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int room ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;

  {
#line 1435
  port = (struct usb_serial_port *)tty->driver_data;
#line 1437
  room = 0;
#line 1441
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1441
  if (tmp != 0) {
#line 1442
    return (-1);
  } else {

  }
#line 1444
  mos7840_port = mos7840_get_port_private(port);
#line 1445
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1446
    return (-1);
  } else {

  }
#line 1448
  ldv___ldv_spin_lock_23(& mos7840_port->pool_lock);
#line 1449
  i = 0;
#line 1449
  goto ldv_29266;
  ldv_29265: ;
#line 1450
  if ((int )((signed char )mos7840_port->busy[i]) == 0) {
#line 1451
    room = room + 32;
  } else {

  }
#line 1449
  i = i + 1;
  ldv_29266: ;
#line 1449
  if (i <= 15) {
#line 1450
    goto ldv_29265;
  } else {

  }
#line 1453
  ldv_spin_unlock_irqrestore_22(& mos7840_port->pool_lock, flags);
#line 1455
  room = room != 0 ? room + -31 : 0;
#line 1456
  descriptor.modname = "mos7840";
#line 1456
  descriptor.function = "mos7840_write_room";
#line 1456
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1456
  descriptor.format = "%s - returns %d\n";
#line 1456
  descriptor.lineno = 1456U;
#line 1456
  descriptor.flags = 0U;
#line 1456
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1456
  if (tmp___0 != 0L) {
#line 1456
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mos7840_port->port)->dev),
                      "%s - returns %d\n", "mos7840_write_room", room);
  } else {

  }
#line 1457
  return (room);
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  bool __print_once ;
  struct usb_serial_port *__port ;
  int _min1 ;
  int _min2 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  struct _ddebug descriptor___1 ;
  long tmp___5 ;
  unsigned long tmp___6 ;
  bool __print_once___0 ;
  struct usb_serial_port *__port___0 ;
  struct _ddebug descriptor___2 ;
  long tmp___7 ;

  {
#line 1474
  bytes_sent = 0;
#line 1482
  current_position = data;
#line 1514
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1514
  if (tmp != 0) {
#line 1515
    return (-1);
  } else {

  }
#line 1517
  serial = port->serial;
#line 1518
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1518
  if (tmp___0 != 0) {
#line 1519
    return (-1);
  } else {

  }
#line 1521
  mos7840_port = mos7840_get_port_private(port);
#line 1522
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1523
    return (-1);
  } else {

  }
#line 1526
  urb = 0;
#line 1528
  ldv___ldv_spin_lock_25(& mos7840_port->pool_lock);
#line 1529
  i = 0;
#line 1529
  goto ldv_29289;
  ldv_29288: ;
#line 1530
  if ((int )((signed char )mos7840_port->busy[i]) == 0) {
#line 1531
    mos7840_port->busy[i] = 1;
#line 1532
    urb = mos7840_port->write_urb_pool[i];
#line 1533
    descriptor.modname = "mos7840";
#line 1533
    descriptor.function = "mos7840_write";
#line 1533
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1533
    descriptor.format = "URB:%d\n";
#line 1533
    descriptor.lineno = 1533U;
#line 1533
    descriptor.flags = 0U;
#line 1533
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1533
    if (tmp___1 != 0L) {
#line 1533
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "URB:%d\n",
                        i);
    } else {

    }
#line 1534
    goto ldv_29287;
  } else {

  }
#line 1529
  i = i + 1;
  ldv_29289: ;
#line 1529
  if (i <= 15) {
#line 1530
    goto ldv_29288;
  } else {

  }
  ldv_29287: 
#line 1537
  ldv_spin_unlock_irqrestore_22(& mos7840_port->pool_lock, flags);
#line 1539
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
#line 1540
    descriptor___0.modname = "mos7840";
#line 1540
    descriptor___0.function = "mos7840_write";
#line 1540
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1540
    descriptor___0.format = "%s - no more free urbs\n";
#line 1540
    descriptor___0.lineno = 1540U;
#line 1540
    descriptor___0.flags = 0U;
#line 1540
    tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1540
    if (tmp___2 != 0L) {
#line 1540
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                        "%s - no more free urbs\n", "mos7840_write");
    } else {

    }
#line 1541
    goto exit;
  } else {

  }
#line 1544
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1545
    urb->transfer_buffer = kmalloc(32UL, 208U);
#line 1548
    if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1549
      __port = port;
#line 1549
      if ((unsigned int )*((unsigned char *)__port + 376UL) == 0U || ! __print_once) {
#line 1549
        __print_once = 1;
#line 1549
        dev_err((struct device  const  *)(& __port->dev), "%s no more kernel memory...\n",
                "mos7840_write");
      } else {

      }
#line 1551
      goto exit;
    } else {

    }
  } else {

  }
#line 1554
  _min1 = count;
#line 1554
  _min2 = 32;
#line 1554
  transfer_size = _min1 < _min2 ? _min1 : _min2;
#line 1556
  __len = (size_t )transfer_size;
#line 1556
  __ret = __builtin_memcpy(urb->transfer_buffer, (void const   *)current_position,
                           __len);
#line 1559
  if ((unsigned int )serial->num_ports == 2U && ((int )port->number - (int )(port->serial)->minor) & 1) {
#line 1562
    tmp___3 = __create_pipe(serial->dev, (unsigned int )((int )port->bulk_out_endpointAddress + 2));
#line 1562
    usb_fill_bulk_urb(urb, serial->dev, tmp___3 | 3221225472U, urb->transfer_buffer,
                      transfer_size, & mos7840_bulk_out_data_callback, (void *)mos7840_port);
  } else {
#line 1570
    tmp___4 = __create_pipe(serial->dev, (unsigned int )port->bulk_out_endpointAddress);
#line 1570
    usb_fill_bulk_urb(urb, serial->dev, tmp___4 | 3221225472U, urb->transfer_buffer,
                      transfer_size, & mos7840_bulk_out_data_callback, (void *)mos7840_port);
  }
#line 1579
  data1 = (unsigned char *)urb->transfer_buffer;
#line 1580
  descriptor___1.modname = "mos7840";
#line 1580
  descriptor___1.function = "mos7840_write";
#line 1580
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1580
  descriptor___1.format = "bulkout endpoint is %d\n";
#line 1580
  descriptor___1.lineno = 1580U;
#line 1580
  descriptor___1.flags = 0U;
#line 1580
  tmp___5 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 1580
  if (tmp___5 != 0L) {
#line 1580
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev), "bulkout endpoint is %d\n",
                      (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1583
  if ((int )mos7840_port->has_led && ! mos7840_port->led_flag) {
#line 1584
    mos7840_port->led_flag = 1;
#line 1585
    mos7840_set_led_sync(port, 4, 769);
#line 1586
    tmp___6 = msecs_to_jiffies(500U);
#line 1586
    mod_timer(& mos7840_port->led_timer1, tmp___6 + (unsigned long )jiffies);
  } else {

  }
#line 1591
  status = usb_submit_urb(urb, 32U);
#line 1593
  if (status != 0) {
#line 1594
    mos7840_port->busy[i] = 0;
#line 1595
    __port___0 = port;
#line 1595
    if ((unsigned int )*((unsigned char *)__port___0 + 376UL) == 0U || ! __print_once___0) {
#line 1595
      __print_once___0 = 1;
#line 1595
      dev_err((struct device  const  *)(& __port___0->dev), "%s - usb_submit_urb(write bulk) failed with status = %d\n",
              "mos7840_write", status);
    } else {

    }
#line 1597
    bytes_sent = status;
#line 1598
    goto exit;
  } else {

  }
#line 1600
  bytes_sent = transfer_size;
#line 1601
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1602
  __asm__  volatile   ("": : : "memory");
#line 1603
  descriptor___2.modname = "mos7840";
#line 1603
  descriptor___2.function = "mos7840_write";
#line 1603
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1603
  descriptor___2.format = "mos7840_port->icount.tx is %d:\n";
#line 1603
  descriptor___2.lineno = 1603U;
#line 1603
  descriptor___2.flags = 0U;
#line 1603
  tmp___7 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 1603
  if (tmp___7 != 0L) {
#line 1603
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "mos7840_port->icount.tx is %d:\n",
                      mos7840_port->icount.tx);
  } else {

  }
  exit: ;
#line 1605
  return (bytes_sent);
}
}
#line 1615 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_throttle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  int status ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  unsigned char stop_char ;

  {
#line 1617
  port = (struct usb_serial_port *)tty->driver_data;
#line 1621
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1621
  if (tmp != 0) {
#line 1622
    return;
  } else {

  }
#line 1624
  mos7840_port = mos7840_get_port_private(port);
#line 1626
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1627
    return;
  } else {

  }
#line 1629
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1630
    descriptor.modname = "mos7840";
#line 1630
    descriptor.function = "mos7840_throttle";
#line 1630
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1630
    descriptor.format = "%s";
#line 1630
    descriptor.lineno = 1630U;
#line 1630
    descriptor.flags = 0U;
#line 1630
    tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1630
    if (tmp___0 != 0L) {
#line 1630
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s",
                        (char *)"port not opened\n");
    } else {

    }
#line 1631
    return;
  } else {

  }
#line 1635
  if ((tty->termios.c_iflag & 4096U) != 0U) {
#line 1636
    stop_char = tty->termios.c_cc[9];
#line 1637
    status = mos7840_write(tty, port, (unsigned char const   *)(& stop_char), 1);
#line 1638
    if (status <= 0) {
#line 1639
      return;
    } else {

    }
  } else {

  }
#line 1642
  if ((int )tty->termios.c_cflag < 0) {
#line 1643
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 253U;
#line 1644
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1646
    if (status < 0) {
#line 1647
      return;
    } else {

    }
  } else {

  }
#line 1649
  return;
}
}
#line 1657 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_unthrottle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  unsigned char start_char ;

  {
#line 1659
  port = (struct usb_serial_port *)tty->driver_data;
#line 1661
  tmp = mos7840_get_port_private(port);
#line 1661
  mos7840_port = tmp;
#line 1663
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1663
  if (tmp___0 != 0) {
#line 1664
    return;
  } else {

  }
#line 1666
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1667
    return;
  } else {

  }
#line 1669
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1670
    descriptor.modname = "mos7840";
#line 1670
    descriptor.function = "mos7840_unthrottle";
#line 1670
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1670
    descriptor.format = "%s - port not opened\n";
#line 1670
    descriptor.lineno = 1670U;
#line 1670
    descriptor.flags = 0U;
#line 1670
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1670
    if (tmp___1 != 0L) {
#line 1670
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - port not opened\n",
                        "mos7840_unthrottle");
    } else {

    }
#line 1671
    return;
  } else {

  }
#line 1675
  if ((tty->termios.c_iflag & 4096U) != 0U) {
#line 1676
    start_char = tty->termios.c_cc[8];
#line 1677
    status = mos7840_write(tty, port, (unsigned char const   *)(& start_char), 1);
#line 1678
    if (status <= 0) {
#line 1679
      return;
    } else {

    }
  } else {

  }
#line 1683
  if ((int )tty->termios.c_cflag < 0) {
#line 1684
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 2U);
#line 1685
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1687
    if (status < 0) {
#line 1688
      return;
    } else {

    }
  } else {

  }
#line 1690
  return;
}
}
#line 1692 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmget(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 1694
  port = (struct usb_serial_port *)tty->driver_data;
#line 1700
  mos7840_port = mos7840_get_port_private(port);
#line 1702
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1703
    return (-19);
  } else {

  }
#line 1705
  status = mos7840_get_uart_reg(port, 6, & msr);
#line 1706
  status = mos7840_get_uart_reg(port, 4, & mcr);
#line 1707
  result = (unsigned int )((((((((int )mcr & 1 ? 2 : 0) | (((int )mcr & 2) != 0 ? 4 : 0)) | (((int )mcr & 16) != 0 ? 32768 : 0)) | (((int )msr & 16) != 0 ? 32 : 0)) | (((int )msr & 128) != 0 ? 64 : 0)) | (((int )msr & 64) != 0 ? 128 : 0)) | (((int )msr & 32) != 0 ? 256 : 0));
#line 1715
  descriptor.modname = "mos7840";
#line 1715
  descriptor.function = "mos7840_tiocmget";
#line 1715
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1715
  descriptor.format = "%s - 0x%04X\n";
#line 1715
  descriptor.lineno = 1715U;
#line 1715
  descriptor.flags = 0U;
#line 1715
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1715
  if (tmp != 0L) {
#line 1715
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - 0x%04X\n",
                      "mos7840_tiocmget", result);
  } else {

  }
#line 1717
  return ((int )result);
}
}
#line 1720 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmset(struct tty_struct *tty , unsigned int set , unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  int status ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 1723
  port = (struct usb_serial_port *)tty->driver_data;
#line 1728
  mos7840_port = mos7840_get_port_private(port);
#line 1730
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1731
    return (-19);
  } else {

  }
#line 1734
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 1735
  if ((clear & 4U) != 0U) {
#line 1736
    mcr = mcr & 4294967293U;
  } else {

  }
#line 1737
  if ((clear & 2U) != 0U) {
#line 1738
    mcr = mcr & 4294967294U;
  } else {

  }
#line 1739
  if ((clear & 32768U) != 0U) {
#line 1740
    mcr = mcr & 4294967279U;
  } else {

  }
#line 1742
  if ((set & 4U) != 0U) {
#line 1743
    mcr = mcr | 2U;
  } else {

  }
#line 1744
  if ((set & 2U) != 0U) {
#line 1745
    mcr = mcr | 1U;
  } else {

  }
#line 1746
  if ((set & 32768U) != 0U) {
#line 1747
    mcr = mcr | 16U;
  } else {

  }
#line 1749
  mos7840_port->shadowMCR = (__u8 )mcr;
#line 1751
  status = mos7840_set_uart_reg(port, 4, (int )((__u16 )mcr));
#line 1752
  if (status < 0) {
#line 1753
    descriptor.modname = "mos7840";
#line 1753
    descriptor.function = "mos7840_tiocmset";
#line 1753
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1753
    descriptor.format = "setting MODEM_CONTROL_REGISTER Failed\n";
#line 1753
    descriptor.lineno = 1753U;
#line 1753
    descriptor.flags = 0U;
#line 1753
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1753
    if (tmp != 0L) {
#line 1753
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "setting MODEM_CONTROL_REGISTER Failed\n");
    } else {

    }
#line 1754
    return (status);
  } else {

  }
#line 1757
  return (0);
}
}
#line 1765 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_baud_rate_divisor(struct usb_serial_port *port , int baudRate ,
                                          int *divisor , __u16 *clk_sel_val ) 
{ 
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 1769
  descriptor.modname = "mos7840";
#line 1769
  descriptor.function = "mos7840_calc_baud_rate_divisor";
#line 1769
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1769
  descriptor.format = "%s - %d\n";
#line 1769
  descriptor.lineno = 1769U;
#line 1769
  descriptor.flags = 0U;
#line 1769
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1769
  if (tmp != 0L) {
#line 1769
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - %d\n",
                      "mos7840_calc_baud_rate_divisor", baudRate);
  } else {

  }
#line 1771
  if (baudRate <= 115200) {
#line 1772
    *divisor = 115200 / baudRate;
#line 1773
    *clk_sel_val = 0U;
  } else {

  }
#line 1775
  if (baudRate > 115200 && baudRate <= 230400) {
#line 1776
    *divisor = 230400 / baudRate;
#line 1777
    *clk_sel_val = 16U;
  } else
#line 1778
  if (baudRate > 230400 && baudRate <= 403200) {
#line 1779
    *divisor = 403200 / baudRate;
#line 1780
    *clk_sel_val = 32U;
  } else
#line 1781
  if (baudRate > 403200 && baudRate <= 460800) {
#line 1782
    *divisor = 460800 / baudRate;
#line 1783
    *clk_sel_val = 48U;
  } else
#line 1784
  if (baudRate > 460800 && baudRate <= 806400) {
#line 1785
    *divisor = 806400 / baudRate;
#line 1786
    *clk_sel_val = 64U;
  } else
#line 1787
  if (baudRate > 806400 && baudRate <= 921600) {
#line 1788
    *divisor = 921600 / baudRate;
#line 1789
    *clk_sel_val = 80U;
  } else
#line 1790
  if (baudRate > 921600 && baudRate <= 1572864) {
#line 1791
    *divisor = 1572864 / baudRate;
#line 1792
    *clk_sel_val = 96U;
  } else
#line 1793
  if (baudRate > 1572864 && baudRate <= 3145728) {
#line 1794
    *divisor = 3145728 / baudRate;
#line 1795
    *clk_sel_val = 112U;
  } else {

  }
#line 1797
  return (0);
}
}
#line 1837 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;
  struct _ddebug descriptor___3 ;
  long tmp___5 ;

  {
#line 1840
  divisor = 0;
#line 1847
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1848
    return (-1);
  } else {

  }
#line 1850
  port = mos7840_port->port;
#line 1851
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1851
  if (tmp != 0) {
#line 1852
    return (-1);
  } else {

  }
#line 1854
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1854
  if (tmp___0 != 0) {
#line 1855
    return (-1);
  } else {

  }
#line 1857
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1859
  descriptor.modname = "mos7840";
#line 1859
  descriptor.function = "mos7840_send_cmd_write_baud_rate";
#line 1859
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1859
  descriptor.format = "%s - port = %d, baud = %d\n";
#line 1859
  descriptor.lineno = 1860U;
#line 1859
  descriptor.flags = 0U;
#line 1859
  tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1859
  if (tmp___1 != 0L) {
#line 1859
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - port = %d, baud = %d\n",
                      "mos7840_send_cmd_write_baud_rate", (int )(mos7840_port->port)->number,
                      baudRate);
  } else {

  }
#line 1892
  clk_sel_val = 0U;
#line 1893
  Data = 0U;
#line 1894
  status = mos7840_calc_baud_rate_divisor(port, baudRate, & divisor, & clk_sel_val);
#line 1896
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1898
  if (status < 0) {
#line 1899
    descriptor___0.modname = "mos7840";
#line 1899
    descriptor___0.function = "mos7840_send_cmd_write_baud_rate";
#line 1899
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1899
    descriptor___0.format = "reading spreg failed in set_serial_baud\n";
#line 1899
    descriptor___0.lineno = 1899U;
#line 1899
    descriptor___0.flags = 0U;
#line 1899
    tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1899
    if (tmp___2 != 0L) {
#line 1899
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                        "reading spreg failed in set_serial_baud\n");
    } else {

    }
#line 1900
    return (-1);
  } else {

  }
#line 1902
  Data = (__u16 )(((int )((short )Data) & 143) | (int )((short )clk_sel_val));
#line 1903
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1905
  if (status < 0) {
#line 1906
    descriptor___1.modname = "mos7840";
#line 1906
    descriptor___1.function = "mos7840_send_cmd_write_baud_rate";
#line 1906
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1906
    descriptor___1.format = "Writing spreg failed in set_serial_baud\n";
#line 1906
    descriptor___1.lineno = 1906U;
#line 1906
    descriptor___1.flags = 0U;
#line 1906
    tmp___3 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 1906
    if (tmp___3 != 0L) {
#line 1906
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev),
                        "Writing spreg failed in set_serial_baud\n");
    } else {

    }
#line 1907
    return (-1);
  } else {

  }
#line 1911
  if (status != 0) {
#line 1912
    dev_err((struct device  const  *)(& port->dev), "%s - bad baud rate\n", "mos7840_send_cmd_write_baud_rate");
#line 1913
    return (status);
  } else {

  }
#line 1916
  Data = (__u16 )((unsigned int )mos7840_port->shadowLCR | 128U);
#line 1917
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1918
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1921
  Data = (__u16 )((unsigned char )divisor);
#line 1922
  descriptor___2.modname = "mos7840";
#line 1922
  descriptor___2.function = "mos7840_send_cmd_write_baud_rate";
#line 1922
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1922
  descriptor___2.format = "set_serial_baud Value to write DLL is %x\n";
#line 1922
  descriptor___2.lineno = 1922U;
#line 1922
  descriptor___2.flags = 0U;
#line 1922
  tmp___4 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 1922
  if (tmp___4 != 0L) {
#line 1922
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "set_serial_baud Value to write DLL is %x\n",
                      (int )Data);
  } else {

  }
#line 1923
  mos7840_set_uart_reg(port, 0, (int )Data);
#line 1925
  Data = (__u16 )((unsigned char )((divisor & 65280) >> 8));
#line 1926
  descriptor___3.modname = "mos7840";
#line 1926
  descriptor___3.function = "mos7840_send_cmd_write_baud_rate";
#line 1926
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1926
  descriptor___3.format = "set_serial_baud Value to write DLM is %x\n";
#line 1926
  descriptor___3.lineno = 1926U;
#line 1926
  descriptor___3.flags = 0U;
#line 1926
  tmp___5 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 1926
  if (tmp___5 != 0L) {
#line 1926
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev), "set_serial_baud Value to write DLM is %x\n",
                      (int )Data);
  } else {

  }
#line 1927
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1930
  Data = (unsigned int )((__u16 )mos7840_port->shadowLCR) & 65407U;
#line 1931
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1932
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1935
  return (status);
}
}
#line 1944 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_change_port_settings(struct tty_struct *tty , struct moschip_port *mos7840_port ,
                                         struct ktermios *old_termios ) 
{ 
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;
  struct _ddebug descriptor___3 ;
  long tmp___5 ;
  struct _ddebug descriptor___4 ;
  long tmp___6 ;
  struct _ddebug descriptor___5 ;
  long tmp___7 ;
  speed_t tmp___8 ;
  struct _ddebug descriptor___6 ;
  long tmp___9 ;
  struct _ddebug descriptor___7 ;
  long tmp___10 ;
  struct _ddebug descriptor___8 ;
  long tmp___11 ;
  struct _ddebug descriptor___9 ;
  long tmp___12 ;

  {
#line 1958
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1959
    return;
  } else {

  }
#line 1961
  port = mos7840_port->port;
#line 1963
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1963
  if (tmp != 0) {
#line 1964
    return;
  } else {

  }
#line 1966
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1966
  if (tmp___0 != 0) {
#line 1967
    return;
  } else {

  }
#line 1969
  serial = port->serial;
#line 1971
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1972
    descriptor.modname = "mos7840";
#line 1972
    descriptor.function = "mos7840_change_port_settings";
#line 1972
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 1972
    descriptor.format = "%s - port not opened\n";
#line 1972
    descriptor.lineno = 1972U;
#line 1972
    descriptor.flags = 0U;
#line 1972
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1972
    if (tmp___1 != 0L) {
#line 1972
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - port not opened\n",
                        "mos7840_change_port_settings");
    } else {

    }
#line 1973
    return;
  } else {

  }
#line 1976
  lData = 3U;
#line 1977
  lStop = 0U;
#line 1978
  lParity = 0U;
#line 1980
  cflag = tty->termios.c_cflag;
#line 1981
  iflag = tty->termios.c_iflag;
#line 1984
  if ((cflag & 48U) != 0U) {
#line 1985
    switch (cflag & 48U) {
    case 0U: 
#line 1987
    lData = 0U;
#line 1988
    goto ldv_29386;
    case 16U: 
#line 1991
    lData = 1U;
#line 1992
    goto ldv_29386;
    case 32U: 
#line 1995
    lData = 2U;
#line 1996
    goto ldv_29386;
    default: ;
    case 48U: 
#line 1999
    lData = 3U;
#line 2000
    goto ldv_29386;
    }
    ldv_29386: ;
  } else {

  }
#line 2004
  if ((cflag & 256U) != 0U) {
#line 2005
    if ((cflag & 512U) != 0U) {
#line 2006
      lParity = 8U;
#line 2007
      descriptor___0.modname = "mos7840";
#line 2007
      descriptor___0.function = "mos7840_change_port_settings";
#line 2007
      descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2007
      descriptor___0.format = "%s - parity = odd\n";
#line 2007
      descriptor___0.lineno = 2007U;
#line 2007
      descriptor___0.flags = 0U;
#line 2007
      tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 2007
      if (tmp___2 != 0L) {
#line 2007
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev),
                          "%s - parity = odd\n", "mos7840_change_port_settings");
      } else {

      }
    } else {
#line 2009
      lParity = 24U;
#line 2010
      descriptor___1.modname = "mos7840";
#line 2010
      descriptor___1.function = "mos7840_change_port_settings";
#line 2010
      descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2010
      descriptor___1.format = "%s - parity = even\n";
#line 2010
      descriptor___1.lineno = 2010U;
#line 2010
      descriptor___1.flags = 0U;
#line 2010
      tmp___3 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 2010
      if (tmp___3 != 0L) {
#line 2010
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev),
                          "%s - parity = even\n", "mos7840_change_port_settings");
      } else {

      }
    }
  } else {
#line 2014
    descriptor___2.modname = "mos7840";
#line 2014
    descriptor___2.function = "mos7840_change_port_settings";
#line 2014
    descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2014
    descriptor___2.format = "%s - parity = none\n";
#line 2014
    descriptor___2.lineno = 2014U;
#line 2014
    descriptor___2.flags = 0U;
#line 2014
    tmp___4 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 2014
    if (tmp___4 != 0L) {
#line 2014
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev),
                        "%s - parity = none\n", "mos7840_change_port_settings");
    } else {

    }
  }
#line 2017
  if ((cflag & 1073741824U) != 0U) {
#line 2018
    lParity = (__u8 )((unsigned int )lParity | 32U);
  } else {

  }
#line 2021
  if ((cflag & 64U) != 0U) {
#line 2022
    lStop = 4U;
#line 2023
    descriptor___3.modname = "mos7840";
#line 2023
    descriptor___3.function = "mos7840_change_port_settings";
#line 2023
    descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2023
    descriptor___3.format = "%s - stop bits = 2\n";
#line 2023
    descriptor___3.lineno = 2023U;
#line 2023
    descriptor___3.flags = 0U;
#line 2023
    tmp___5 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 2023
    if (tmp___5 != 0L) {
#line 2023
      __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev),
                        "%s - stop bits = 2\n", "mos7840_change_port_settings");
    } else {

    }
  } else {
#line 2025
    lStop = 0U;
#line 2026
    descriptor___4.modname = "mos7840";
#line 2026
    descriptor___4.function = "mos7840_change_port_settings";
#line 2026
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2026
    descriptor___4.format = "%s - stop bits = 1\n";
#line 2026
    descriptor___4.lineno = 2026U;
#line 2026
    descriptor___4.flags = 0U;
#line 2026
    tmp___6 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 2026
    if (tmp___6 != 0L) {
#line 2026
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)(& port->dev),
                        "%s - stop bits = 1\n", "mos7840_change_port_settings");
    } else {

    }
  }
#line 2030
  mos7840_port->shadowLCR = (unsigned int )mos7840_port->shadowLCR & 192U;
#line 2032
  mos7840_port->shadowLCR = (__u8 )((int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop));
#line 2034
  descriptor___5.modname = "mos7840";
#line 2034
  descriptor___5.function = "mos7840_change_port_settings";
#line 2034
  descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2034
  descriptor___5.format = "%s - mos7840_port->shadowLCR is %x\n";
#line 2034
  descriptor___5.lineno = 2035U;
#line 2034
  descriptor___5.flags = 0U;
#line 2034
  tmp___7 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 2034
  if (tmp___7 != 0L) {
#line 2034
    __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)(& port->dev), "%s - mos7840_port->shadowLCR is %x\n",
                      "mos7840_change_port_settings", (int )mos7840_port->shadowLCR);
  } else {

  }
#line 2037
  Data = 0U;
#line 2038
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 2040
  Data = 0U;
#line 2041
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 2043
  Data = 207U;
#line 2044
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 2047
  Data = (__u16 )mos7840_port->shadowLCR;
#line 2049
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 2051
  Data = 11U;
#line 2052
  mos7840_port->shadowMCR = (__u8 )Data;
#line 2053
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2054
  Data = 11U;
#line 2055
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2059
  mos7840_port->shadowMCR = 8U;
#line 2060
  if ((cflag & 4111U) != 0U) {
#line 2061
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 3U);
  } else {

  }
#line 2063
  if ((int )cflag < 0) {
#line 2064
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 32U);
  } else {
#line 2066
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 223U;
  }
#line 2068
  Data = (__u16 )mos7840_port->shadowMCR;
#line 2069
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2072
  tmp___8 = tty_get_baud_rate(tty);
#line 2072
  baud = (int )tmp___8;
#line 2074
  if (baud == 0) {
#line 2076
    descriptor___6.modname = "mos7840";
#line 2076
    descriptor___6.function = "mos7840_change_port_settings";
#line 2076
    descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2076
    descriptor___6.format = "%s";
#line 2076
    descriptor___6.lineno = 2076U;
#line 2076
    descriptor___6.flags = 0U;
#line 2076
    tmp___9 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 2076
    if (tmp___9 != 0L) {
#line 2076
      __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)(& port->dev),
                        "%s", (char *)"Picked default baud...\n");
    } else {

    }
#line 2077
    baud = 9600;
  } else {

  }
#line 2080
  descriptor___7.modname = "mos7840";
#line 2080
  descriptor___7.function = "mos7840_change_port_settings";
#line 2080
  descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2080
  descriptor___7.format = "%s - baud rate = %d\n";
#line 2080
  descriptor___7.lineno = 2080U;
#line 2080
  descriptor___7.flags = 0U;
#line 2080
  tmp___10 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 2080
  if (tmp___10 != 0L) {
#line 2080
    __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)(& port->dev), "%s - baud rate = %d\n",
                      "mos7840_change_port_settings", baud);
  } else {

  }
#line 2081
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2084
  Data = 12U;
#line 2085
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 2087
  if (! mos7840_port->read_urb_busy) {
#line 2088
    mos7840_port->read_urb_busy = 1;
#line 2089
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2090
    if (status != 0) {
#line 2091
      descriptor___8.modname = "mos7840";
#line 2091
      descriptor___8.function = "mos7840_change_port_settings";
#line 2091
      descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2091
      descriptor___8.format = "usb_submit_urb(read bulk) failed, status = %d\n";
#line 2091
      descriptor___8.lineno = 2092U;
#line 2091
      descriptor___8.flags = 0U;
#line 2091
      tmp___11 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 2091
      if (tmp___11 != 0L) {
#line 2091
        __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)(& port->dev),
                          "usb_submit_urb(read bulk) failed, status = %d\n", status);
      } else {

      }
#line 2093
      mos7840_port->read_urb_busy = 0;
    } else {

    }
  } else {

  }
#line 2096
  __wake_up(& mos7840_port->delta_msr_wait, 3U, 1, 0);
#line 2097
  mos7840_port->delta_msr_cond = 1;
#line 2098
  descriptor___9.modname = "mos7840";
#line 2098
  descriptor___9.function = "mos7840_change_port_settings";
#line 2098
  descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2098
  descriptor___9.format = "%s - mos7840_port->shadowLCR is End %x\n";
#line 2098
  descriptor___9.lineno = 2099U;
#line 2098
  descriptor___9.flags = 0U;
#line 2098
  tmp___12 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 2098
  if (tmp___12 != 0L) {
#line 2098
    __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)(& port->dev), "%s - mos7840_port->shadowLCR is End %x\n",
                      "mos7840_change_port_settings", (int )mos7840_port->shadowLCR);
  } else {

  }
#line 2100
  return;
}
}
#line 2108 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  int tmp___0 ;
  struct _ddebug descriptor ;
  long tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  struct _ddebug descriptor___2 ;
  long tmp___4 ;
  struct _ddebug descriptor___3 ;
  long tmp___5 ;
  struct _ddebug descriptor___4 ;
  long tmp___6 ;
  struct _ddebug descriptor___5 ;
  long tmp___7 ;

  {
#line 2117
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2117
  if (tmp != 0) {
#line 2118
    return;
  } else {

  }
#line 2120
  serial = port->serial;
#line 2122
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2122
  if (tmp___0 != 0) {
#line 2123
    return;
  } else {

  }
#line 2125
  mos7840_port = mos7840_get_port_private(port);
#line 2127
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2128
    return;
  } else {

  }
#line 2130
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 2131
    descriptor.modname = "mos7840";
#line 2131
    descriptor.function = "mos7840_set_termios";
#line 2131
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2131
    descriptor.format = "%s - port not opened\n";
#line 2131
    descriptor.lineno = 2131U;
#line 2131
    descriptor.flags = 0U;
#line 2131
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 2131
    if (tmp___1 != 0L) {
#line 2131
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - port not opened\n",
                        "mos7840_set_termios");
    } else {

    }
#line 2132
    return;
  } else {

  }
#line 2135
  descriptor___0.modname = "mos7840";
#line 2135
  descriptor___0.function = "mos7840_set_termios";
#line 2135
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2135
  descriptor___0.format = "%s";
#line 2135
  descriptor___0.lineno = 2135U;
#line 2135
  descriptor___0.flags = 0U;
#line 2135
  tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 2135
  if (tmp___2 != 0L) {
#line 2135
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev), "%s",
                      (char *)"setting termios - \n");
  } else {

  }
#line 2137
  cflag = tty->termios.c_cflag;
#line 2139
  descriptor___1.modname = "mos7840";
#line 2139
  descriptor___1.function = "mos7840_set_termios";
#line 2139
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2139
  descriptor___1.format = "%s - clfag %08x iflag %08x\n";
#line 2139
  descriptor___1.lineno = 2140U;
#line 2139
  descriptor___1.flags = 0U;
#line 2139
  tmp___3 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 2139
  if (tmp___3 != 0L) {
#line 2139
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev), "%s - clfag %08x iflag %08x\n",
                      "mos7840_set_termios", tty->termios.c_cflag, tty->termios.c_iflag & 31U);
  } else {

  }
#line 2141
  descriptor___2.modname = "mos7840";
#line 2141
  descriptor___2.function = "mos7840_set_termios";
#line 2141
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2141
  descriptor___2.format = "%s - old clfag %08x old iflag %08x\n";
#line 2141
  descriptor___2.lineno = 2142U;
#line 2141
  descriptor___2.flags = 0U;
#line 2141
  tmp___4 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 2141
  if (tmp___4 != 0L) {
#line 2141
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "%s - old clfag %08x old iflag %08x\n",
                      "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & 31U);
  } else {

  }
#line 2143
  descriptor___3.modname = "mos7840";
#line 2143
  descriptor___3.function = "mos7840_set_termios";
#line 2143
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2143
  descriptor___3.format = "%s - port %d\n";
#line 2143
  descriptor___3.lineno = 2143U;
#line 2143
  descriptor___3.flags = 0U;
#line 2143
  tmp___5 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 2143
  if (tmp___5 != 0L) {
#line 2143
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev), "%s - port %d\n",
                      "mos7840_set_termios", (int )port->number);
  } else {

  }
#line 2147
  mos7840_change_port_settings(tty, mos7840_port, old_termios);
#line 2149
  if ((unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0)) {
#line 2150
    descriptor___4.modname = "mos7840";
#line 2150
    descriptor___4.function = "mos7840_set_termios";
#line 2150
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2150
    descriptor___4.format = "%s";
#line 2150
    descriptor___4.lineno = 2150U;
#line 2150
    descriptor___4.flags = 0U;
#line 2150
    tmp___6 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 2150
    if (tmp___6 != 0L) {
#line 2150
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)(& port->dev),
                        "%s", (char *)"URB KILLED !!!!!\n");
    } else {

    }
#line 2151
    return;
  } else {

  }
#line 2154
  if (! mos7840_port->read_urb_busy) {
#line 2155
    mos7840_port->read_urb_busy = 1;
#line 2156
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2157
    if (status != 0) {
#line 2158
      descriptor___5.modname = "mos7840";
#line 2158
      descriptor___5.function = "mos7840_set_termios";
#line 2158
      descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2158
      descriptor___5.format = "usb_submit_urb(read bulk) failed, status = %d\n";
#line 2158
      descriptor___5.lineno = 2159U;
#line 2158
      descriptor___5.flags = 0U;
#line 2158
      tmp___7 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 2158
      if (tmp___7 != 0L) {
#line 2158
        __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)(& port->dev),
                          "usb_submit_urb(read bulk) failed, status = %d\n", status);
      } else {

      }
#line 2160
      mos7840_port->read_urb_busy = 0;
    } else {

    }
  } else {

  }
#line 2163
  return;
}
}
#line 2176 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_lsr_info(struct tty_struct *tty , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  int tmp ;

  {
#line 2180
  result = 0U;
#line 2182
  count = mos7840_chars_in_buffer(tty);
#line 2183
  if (count == 0) {
#line 2184
    result = 1U;
  } else {

  }
#line 2186
  tmp = copy_to_user((void *)value, (void const   *)(& result), 4U);
#line 2186
  if (tmp != 0) {
#line 2187
    return (-14);
  } else {

  }
#line 2188
  return (0);
}
}
#line 2196 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  int tmp___0 ;

  {
#line 2201
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2202
    return (-1);
  } else {

  }
#line 2204
  if ((unsigned long )retinfo == (unsigned long )((struct serial_struct *)0)) {
#line 2205
    return (-14);
  } else {

  }
#line 2207
  memset((void *)(& tmp), 0, 72UL);
#line 2209
  tmp.type = 4;
#line 2210
  tmp.line = (int )((mos7840_port->port)->serial)->minor;
#line 2211
  tmp.port = (unsigned int )(mos7840_port->port)->number;
#line 2212
  tmp.irq = 0;
#line 2213
  tmp.flags = 192;
#line 2214
  tmp.xmit_fifo_size = 512;
#line 2215
  tmp.baud_base = 9600;
#line 2216
  tmp.close_delay = 1250U;
#line 2217
  tmp.closing_wait = 7500U;
#line 2219
  tmp___0 = copy_to_user((void *)retinfo, (void const   *)(& tmp), 72U);
#line 2219
  if (tmp___0 != 0) {
#line 2220
    return (-14);
  } else {

  }
#line 2221
  return (0);
}
}
#line 2224 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_icount(struct tty_struct *tty , struct serial_icounter_struct *icount ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 2227
  port = (struct usb_serial_port *)tty->driver_data;
#line 2231
  mos7840_port = mos7840_get_port_private(port);
#line 2232
  cnow = mos7840_port->icount;
#line 2234
  __asm__  volatile   ("": : : "memory");
#line 2235
  icount->cts = (int )cnow.cts;
#line 2236
  icount->dsr = (int )cnow.dsr;
#line 2237
  icount->rng = (int )cnow.rng;
#line 2238
  icount->dcd = (int )cnow.dcd;
#line 2239
  icount->rx = (int )cnow.rx;
#line 2240
  icount->tx = (int )cnow.tx;
#line 2241
  icount->frame = (int )cnow.frame;
#line 2242
  icount->overrun = (int )cnow.overrun;
#line 2243
  icount->parity = (int )cnow.parity;
#line 2244
  icount->brk = (int )cnow.brk;
#line 2245
  icount->buf_overrun = (int )cnow.buf_overrun;
#line 2247
  descriptor.modname = "mos7840";
#line 2247
  descriptor.function = "mos7840_get_icount";
#line 2247
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2247
  descriptor.format = "%s TIOCGICOUNT RX=%d, TX=%d\n";
#line 2247
  descriptor.lineno = 2248U;
#line 2247
  descriptor.flags = 0U;
#line 2247
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 2247
  if (tmp != 0L) {
#line 2247
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s TIOCGICOUNT RX=%d, TX=%d\n",
                      "mos7840_get_icount", icount->rx, icount->tx);
  } else {

  }
#line 2249
  return (0);
}
}
#line 2257 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_ioctl(struct tty_struct *tty , unsigned int cmd , unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  int tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  struct _ddebug descriptor___0 ;
  long tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor___1 ;
  long tmp___3 ;
  int tmp___4 ;
  struct _ddebug descriptor___2 ;
  long tmp___5 ;
  struct _ddebug descriptor___3 ;
  long tmp___6 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 2260
  port = (struct usb_serial_port *)tty->driver_data;
#line 2261
  argp = (void *)arg;
#line 2267
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2267
  if (tmp != 0) {
#line 2268
    return (-1);
  } else {

  }
#line 2270
  mos7840_port = mos7840_get_port_private(port);
#line 2272
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2273
    return (-1);
  } else {

  }
#line 2275
  descriptor.modname = "mos7840";
#line 2275
  descriptor.function = "mos7840_ioctl";
#line 2275
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2275
  descriptor.format = "%s - cmd = 0x%x\n";
#line 2275
  descriptor.lineno = 2275U;
#line 2275
  descriptor.flags = 0U;
#line 2275
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 2275
  if (tmp___0 != 0L) {
#line 2275
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - cmd = 0x%x\n",
                      "mos7840_ioctl", cmd);
  } else {

  }
#line 2277
  switch (cmd) {
  case 21593U: 
#line 2281
  descriptor___0.modname = "mos7840";
#line 2281
  descriptor___0.function = "mos7840_ioctl";
#line 2281
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2281
  descriptor___0.format = "%s TIOCSERGETLSR\n";
#line 2281
  descriptor___0.lineno = 2281U;
#line 2281
  descriptor___0.flags = 0U;
#line 2281
  tmp___1 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 2281
  if (tmp___1 != 0L) {
#line 2281
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev), "%s TIOCSERGETLSR\n",
                      "mos7840_ioctl");
  } else {

  }
#line 2282
  tmp___2 = mos7840_get_lsr_info(tty, (unsigned int *)argp);
#line 2282
  return (tmp___2);
  case 21534U: 
#line 2285
  descriptor___1.modname = "mos7840";
#line 2285
  descriptor___1.function = "mos7840_ioctl";
#line 2285
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2285
  descriptor___1.format = "%s TIOCGSERIAL\n";
#line 2285
  descriptor___1.lineno = 2285U;
#line 2285
  descriptor___1.flags = 0U;
#line 2285
  tmp___3 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 2285
  if (tmp___3 != 0L) {
#line 2285
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev), "%s TIOCGSERIAL\n",
                      "mos7840_ioctl");
  } else {

  }
#line 2286
  tmp___4 = mos7840_get_serial_info(mos7840_port, (struct serial_struct *)argp);
#line 2286
  return (tmp___4);
  case 21535U: 
#line 2289
  descriptor___2.modname = "mos7840";
#line 2289
  descriptor___2.function = "mos7840_ioctl";
#line 2289
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2289
  descriptor___2.format = "%s TIOCSSERIAL\n";
#line 2289
  descriptor___2.lineno = 2289U;
#line 2289
  descriptor___2.flags = 0U;
#line 2289
  tmp___5 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 2289
  if (tmp___5 != 0L) {
#line 2289
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "%s TIOCSSERIAL\n",
                      "mos7840_ioctl");
  } else {

  }
#line 2290
  goto ldv_29456;
  case 21596U: 
#line 2293
  descriptor___3.modname = "mos7840";
#line 2293
  descriptor___3.function = "mos7840_ioctl";
#line 2293
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2293
  descriptor___3.format = "%s  TIOCMIWAIT\n";
#line 2293
  descriptor___3.lineno = 2293U;
#line 2293
  descriptor___3.flags = 0U;
#line 2293
  tmp___6 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 2293
  if (tmp___6 != 0L) {
#line 2293
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev), "%s  TIOCMIWAIT\n",
                      "mos7840_ioctl");
  } else {

  }
#line 2294
  cprev = mos7840_port->icount;
  ldv_29465: 
#line 2297
  mos7840_port->delta_msr_cond = 0;
#line 2298
  __ret = 0;
#line 2298
  if (mos7840_port->delta_msr_cond != 1) {
#line 2298
    tmp___7 = get_current();
#line 2298
    __wait.flags = 0U;
#line 2298
    __wait.private = (void *)tmp___7;
#line 2298
    __wait.func = & autoremove_wake_function;
#line 2298
    __wait.task_list.next = & __wait.task_list;
#line 2298
    __wait.task_list.prev = & __wait.task_list;
    ldv_29463: 
#line 2298
    prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2298
    if (mos7840_port->delta_msr_cond == 1) {
#line 2298
      goto ldv_29461;
    } else {

    }
#line 2298
    tmp___8 = get_current();
#line 2298
    tmp___9 = signal_pending(tmp___8);
#line 2298
    if (tmp___9 == 0) {
#line 2298
      schedule();
#line 2298
      goto ldv_29462;
    } else {

    }
#line 2298
    __ret = -512;
#line 2298
    goto ldv_29461;
    ldv_29462: ;
#line 2298
    goto ldv_29463;
    ldv_29461: 
#line 2298
    finish_wait(& mos7840_port->delta_msr_wait, & __wait);
  } else {

  }
#line 2303
  tmp___10 = get_current();
#line 2303
  tmp___11 = signal_pending(tmp___10);
#line 2303
  if (tmp___11 != 0) {
#line 2304
    return (-512);
  } else {

  }
#line 2305
  cnow = mos7840_port->icount;
#line 2306
  __asm__  volatile   ("": : : "memory");
#line 2307
  if (((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts) {
#line 2309
    return (-5);
  } else {

  }
#line 2310
  if (((((arg & 128UL) != 0UL && cnow.rng != cprev.rng) || ((arg & 256UL) != 0UL && cnow.dsr != cprev.dsr)) || ((arg & 64UL) != 0UL && cnow.dcd != cprev.dcd)) || ((arg & 32UL) != 0UL && cnow.cts != cprev.cts)) {
#line 2314
    return (0);
  } else {

  }
#line 2316
  cprev = cnow;
#line 2317
  goto ldv_29465;
  default: ;
#line 2322
  goto ldv_29456;
  }
  ldv_29456: ;
#line 2324
  return (-515);
}
}
#line 2327 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7810_check(struct usb_serial *serial ) 
{ 
  int i ;
  int pass_count ;
  __u16 data ;
  __u16 mcr_data ;
  __u16 test_pattern ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 2329
  pass_count = 0;
#line 2330
  data = 0U;
#line 2330
  mcr_data = 0U;
#line 2331
  test_pattern = 21930U;
#line 2334
  tmp = __create_pipe(serial->dev, 0U);
#line 2334
  usb_control_msg(serial->dev, tmp | 2147483776U, 13, 192, 768, 4, (void *)(& mcr_data),
                  1, 5000);
#line 2338
  i = 0;
#line 2338
  goto ldv_29477;
  ldv_29476: 
#line 2340
  tmp___0 = __create_pipe(serial->dev, 0U);
#line 2340
  usb_control_msg(serial->dev, tmp___0 | 2147483648U, 14, 64, (int )((__u16 )((int )((short )((((int )test_pattern >> i) & 1) << 1)) | 768)),
                  4, 0, 0, 5000);
#line 2346
  tmp___1 = __create_pipe(serial->dev, 0U);
#line 2346
  usb_control_msg(serial->dev, tmp___1 | 2147483776U, 13, 192, 0, 7, (void *)(& data),
                  1, 5000);
#line 2351
  if ((((int )test_pattern >> i) ^ (~ ((int )data) >> 1)) & 1) {
#line 2352
    goto ldv_29475;
  } else {

  }
#line 2354
  pass_count = pass_count + 1;
#line 2338
  i = i + 1;
  ldv_29477: ;
#line 2338
  if (i <= 15) {
#line 2339
    goto ldv_29476;
  } else {

  }
  ldv_29475: 
#line 2358
  tmp___2 = __create_pipe(serial->dev, 0U);
#line 2358
  usb_control_msg(serial->dev, tmp___2 | 2147483648U, 14, 64, (int )((unsigned int )mcr_data | 768U),
                  4, 0, 0, 5000);
#line 2362
  if (pass_count == 16) {
#line 2363
    return (1);
  } else {

  }
#line 2365
  return (0);
}
}
#line 2368 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  __u16 data ;
  int mos7840_num_ports ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 2370
  data = 0U;
#line 2373
  tmp = __create_pipe(serial->dev, 0U);
#line 2373
  usb_control_msg(serial->dev, tmp | 2147483776U, 13, 192, 0, 7, (void *)(& data),
                  1, 5000);
#line 2377
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 30736U || (unsigned int )(serial->dev)->descriptor.idProduct == 30752U) {
#line 2379
    device_type = (int )(serial->dev)->descriptor.idProduct;
  } else
#line 2382
  if ((int )data & 1) {
#line 2383
    device_type = 30784;
  } else {
#line 2384
    tmp___0 = mos7810_check(serial);
#line 2384
    if (tmp___0 != 0) {
#line 2385
      device_type = 30736;
    } else {
#line 2387
      device_type = 30752;
    }
  }
#line 2390
  mos7840_num_ports = (device_type >> 4) & 15;
#line 2391
  serial->num_bulk_in = (char )mos7840_num_ports;
#line 2392
  serial->num_bulk_out = (char )mos7840_num_ports;
#line 2393
  serial->num_ports = (unsigned char )mos7840_num_ports;
#line 2395
  return (mos7840_num_ports);
}
}
#line 2398 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_port_probe(struct usb_serial_port *port ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int status ;
  int pnum ;
  __u16 Data ;
  struct _ddebug descriptor ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct _ddebug descriptor___0 ;
  long tmp___1 ;
  struct _ddebug descriptor___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___2 ;
  long tmp___3 ;
  struct _ddebug descriptor___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___4 ;
  long tmp___5 ;
  struct _ddebug descriptor___5 ;
  long tmp___6 ;
  struct _ddebug descriptor___6 ;
  long tmp___7 ;
  struct _ddebug descriptor___7 ;
  long tmp___8 ;
  struct _ddebug descriptor___8 ;
  long tmp___9 ;
  struct _ddebug descriptor___9 ;
  long tmp___10 ;
  struct _ddebug descriptor___10 ;
  long tmp___11 ;
  struct _ddebug descriptor___11 ;
  long tmp___12 ;
  struct _ddebug descriptor___12 ;
  long tmp___13 ;
  struct _ddebug descriptor___13 ;
  long tmp___14 ;
  struct _ddebug descriptor___14 ;
  long tmp___15 ;
  struct _ddebug descriptor___15 ;
  long tmp___16 ;
  struct _ddebug descriptor___16 ;
  long tmp___17 ;
  struct _ddebug descriptor___17 ;
  long tmp___18 ;
  struct _ddebug descriptor___18 ;
  long tmp___19 ;
  struct _ddebug descriptor___19 ;
  long tmp___20 ;
  struct _ddebug descriptor___20 ;
  long tmp___21 ;
  struct _ddebug descriptor___21 ;
  long tmp___22 ;
  struct _ddebug descriptor___22 ;
  long tmp___23 ;
  struct _ddebug descriptor___23 ;
  long tmp___24 ;
  struct _ddebug descriptor___24 ;
  long tmp___25 ;
  struct _ddebug descriptor___25 ;
  long tmp___26 ;
  void *tmp___27 ;
  void *tmp___28 ;
  struct lock_class_key __key___0 ;
  unsigned long tmp___29 ;
  struct lock_class_key __key___1 ;
  unsigned long tmp___30 ;
  struct _ddebug descriptor___26 ;
  long tmp___31 ;
  struct _ddebug descriptor___27 ;
  long tmp___32 ;
  unsigned int tmp___33 ;

  {
#line 2400
  serial = port->serial;
#line 2409
  pnum = (int )port->number - (int )serial->minor;
#line 2414
  descriptor.modname = "mos7840";
#line 2414
  descriptor.function = "mos7840_port_probe";
#line 2414
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2414
  descriptor.format = "mos7840_startup: configuring port %d............\n";
#line 2414
  descriptor.lineno = 2414U;
#line 2414
  descriptor.flags = 0U;
#line 2414
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 2414
  if (tmp != 0L) {
#line 2414
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "mos7840_startup: configuring port %d............\n",
                      pnum);
  } else {

  }
#line 2415
  tmp___0 = kzalloc(784UL, 208U);
#line 2415
  mos7840_port = (struct moschip_port *)tmp___0;
#line 2416
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2417
    dev_err((struct device  const  *)(& port->dev), "%s - Out of memory\n", "mos7840_port_probe");
#line 2418
    return (-12);
  } else {

  }
#line 2425
  mos7840_port->port = port;
#line 2426
  mos7840_set_port_private(port, mos7840_port);
#line 2427
  spinlock_check(& mos7840_port->pool_lock);
#line 2427
  __raw_spin_lock_init(& mos7840_port->pool_lock.ldv_6089.rlock, "&(&mos7840_port->pool_lock)->rlock",
                       & __key);
#line 2432
  mos7840_port->port_num = pnum + 1;
#line 2433
  descriptor___0.modname = "mos7840";
#line 2433
  descriptor___0.function = "mos7840_port_probe";
#line 2433
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2433
  descriptor___0.format = "port->number = %d\n";
#line 2433
  descriptor___0.lineno = 2433U;
#line 2433
  descriptor___0.flags = 0U;
#line 2433
  tmp___1 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 2433
  if (tmp___1 != 0L) {
#line 2433
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& port->dev), "port->number = %d\n",
                      (int )port->number);
  } else {

  }
#line 2434
  descriptor___1.modname = "mos7840";
#line 2434
  descriptor___1.function = "mos7840_port_probe";
#line 2434
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2434
  descriptor___1.format = "port->serial->minor = %d\n";
#line 2434
  descriptor___1.lineno = 2434U;
#line 2434
  descriptor___1.flags = 0U;
#line 2434
  tmp___2 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 2434
  if (tmp___2 != 0L) {
#line 2434
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)(& port->dev), "port->serial->minor = %d\n",
                      (int )(port->serial)->minor);
  } else {

  }
#line 2435
  descriptor___2.modname = "mos7840";
#line 2435
  descriptor___2.function = "mos7840_port_probe";
#line 2435
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2435
  descriptor___2.format = "mos7840_port->port_num = %d\n";
#line 2435
  descriptor___2.lineno = 2435U;
#line 2435
  descriptor___2.flags = 0U;
#line 2435
  tmp___3 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 2435
  if (tmp___3 != 0L) {
#line 2435
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)(& port->dev), "mos7840_port->port_num = %d\n",
                      mos7840_port->port_num);
  } else {

  }
#line 2436
  descriptor___3.modname = "mos7840";
#line 2436
  descriptor___3.function = "mos7840_port_probe";
#line 2436
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2436
  descriptor___3.format = "serial->minor = %d\n";
#line 2436
  descriptor___3.lineno = 2436U;
#line 2436
  descriptor___3.flags = 0U;
#line 2436
  tmp___4 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 2436
  if (tmp___4 != 0L) {
#line 2436
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)(& port->dev), "serial->minor = %d\n",
                      (int )serial->minor);
  } else {

  }
#line 2438
  if (mos7840_port->port_num == 1) {
#line 2439
    mos7840_port->SpRegOffset = 0U;
#line 2440
    mos7840_port->ControlRegOffset = 1U;
#line 2441
    mos7840_port->DcrRegOffset = 4U;
  } else
#line 2442
  if (mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 4U) {
#line 2444
    mos7840_port->SpRegOffset = 8U;
#line 2445
    mos7840_port->ControlRegOffset = 9U;
#line 2446
    mos7840_port->DcrRegOffset = 22U;
  } else
#line 2447
  if (mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 2U) {
#line 2449
    mos7840_port->SpRegOffset = 10U;
#line 2450
    mos7840_port->ControlRegOffset = 11U;
#line 2451
    mos7840_port->DcrRegOffset = 25U;
  } else
#line 2452
  if (mos7840_port->port_num == 3 && (unsigned int )serial->num_ports == 4U) {
#line 2454
    mos7840_port->SpRegOffset = 10U;
#line 2455
    mos7840_port->ControlRegOffset = 11U;
#line 2456
    mos7840_port->DcrRegOffset = 25U;
  } else
#line 2457
  if (mos7840_port->port_num == 4 && (unsigned int )serial->num_ports == 4U) {
#line 2459
    mos7840_port->SpRegOffset = 12U;
#line 2460
    mos7840_port->ControlRegOffset = 13U;
#line 2461
    mos7840_port->DcrRegOffset = 28U;
  } else {

  }
#line 2463
  mos7840_dump_serial_port(port, mos7840_port);
#line 2464
  mos7840_set_port_private(port, mos7840_port);
#line 2467
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 2469
  if (status < 0) {
#line 2470
    descriptor___4.modname = "mos7840";
#line 2470
    descriptor___4.function = "mos7840_port_probe";
#line 2470
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2470
    descriptor___4.format = "Reading ControlReg failed status-0x%x\n";
#line 2470
    descriptor___4.lineno = 2470U;
#line 2470
    descriptor___4.flags = 0U;
#line 2470
    tmp___5 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 2470
    if (tmp___5 != 0L) {
#line 2470
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)(& port->dev),
                        "Reading ControlReg failed status-0x%x\n", status);
    } else {

    }
#line 2471
    goto ldv_29499;
  } else {
#line 2473
    descriptor___5.modname = "mos7840";
#line 2473
    descriptor___5.function = "mos7840_port_probe";
#line 2473
    descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2473
    descriptor___5.format = "ControlReg Reading success val is %x, status%d\n";
#line 2473
    descriptor___5.lineno = 2473U;
#line 2473
    descriptor___5.flags = 0U;
#line 2473
    tmp___6 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 2473
    if (tmp___6 != 0L) {
#line 2473
      __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)(& port->dev),
                        "ControlReg Reading success val is %x, status%d\n", (int )Data,
                        status);
    } else {

    }
  }
#line 2474
  Data = (__u16 )((unsigned int )Data | 8U);
#line 2475
  Data = (__u16 )((unsigned int )Data | 4U);
#line 2479
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 2481
  if (status < 0) {
#line 2482
    descriptor___6.modname = "mos7840";
#line 2482
    descriptor___6.function = "mos7840_port_probe";
#line 2482
    descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2482
    descriptor___6.format = "Writing ControlReg failed(rx_disable) status-0x%x\n";
#line 2482
    descriptor___6.lineno = 2482U;
#line 2482
    descriptor___6.flags = 0U;
#line 2482
    tmp___7 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 2482
    if (tmp___7 != 0L) {
#line 2482
      __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)(& port->dev),
                        "Writing ControlReg failed(rx_disable) status-0x%x\n", status);
    } else {

    }
#line 2483
    goto ldv_29499;
  } else {
#line 2485
    descriptor___7.modname = "mos7840";
#line 2485
    descriptor___7.function = "mos7840_port_probe";
#line 2485
    descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2485
    descriptor___7.format = "ControlReg Writing success(rx_disable) status%d\n";
#line 2485
    descriptor___7.lineno = 2485U;
#line 2485
    descriptor___7.flags = 0U;
#line 2485
    tmp___8 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 2485
    if (tmp___8 != 0L) {
#line 2485
      __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)(& port->dev),
                        "ControlReg Writing success(rx_disable) status%d\n", status);
    } else {

    }
  }
#line 2489
  Data = 1U;
#line 2490
  status = mos7840_set_reg_sync(port, (int )mos7840_port->DcrRegOffset, (int )Data);
#line 2492
  if (status < 0) {
#line 2493
    descriptor___8.modname = "mos7840";
#line 2493
    descriptor___8.function = "mos7840_port_probe";
#line 2493
    descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2493
    descriptor___8.format = "Writing DCR0 failed status-0x%x\n";
#line 2493
    descriptor___8.lineno = 2493U;
#line 2493
    descriptor___8.flags = 0U;
#line 2493
    tmp___9 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 2493
    if (tmp___9 != 0L) {
#line 2493
      __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)(& port->dev),
                        "Writing DCR0 failed status-0x%x\n", status);
    } else {

    }
#line 2494
    goto ldv_29499;
  } else {
#line 2496
    descriptor___9.modname = "mos7840";
#line 2496
    descriptor___9.function = "mos7840_port_probe";
#line 2496
    descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2496
    descriptor___9.format = "DCR0 Writing success status%d\n";
#line 2496
    descriptor___9.lineno = 2496U;
#line 2496
    descriptor___9.flags = 0U;
#line 2496
    tmp___10 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 2496
    if (tmp___10 != 0L) {
#line 2496
      __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)(& port->dev),
                        "DCR0 Writing success status%d\n", status);
    } else {

    }
  }
#line 2498
  Data = 5U;
#line 2499
  status = mos7840_set_reg_sync(port, (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 1U),
                                (int )Data);
#line 2501
  if (status < 0) {
#line 2502
    descriptor___10.modname = "mos7840";
#line 2502
    descriptor___10.function = "mos7840_port_probe";
#line 2502
    descriptor___10.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2502
    descriptor___10.format = "Writing DCR1 failed status-0x%x\n";
#line 2502
    descriptor___10.lineno = 2502U;
#line 2502
    descriptor___10.flags = 0U;
#line 2502
    tmp___11 = __builtin_expect((long )descriptor___10.flags & 1L, 0L);
#line 2502
    if (tmp___11 != 0L) {
#line 2502
      __dynamic_dev_dbg(& descriptor___10, (struct device  const  *)(& port->dev),
                        "Writing DCR1 failed status-0x%x\n", status);
    } else {

    }
#line 2503
    goto ldv_29499;
  } else {
#line 2505
    descriptor___11.modname = "mos7840";
#line 2505
    descriptor___11.function = "mos7840_port_probe";
#line 2505
    descriptor___11.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2505
    descriptor___11.format = "DCR1 Writing success status%d\n";
#line 2505
    descriptor___11.lineno = 2505U;
#line 2505
    descriptor___11.flags = 0U;
#line 2505
    tmp___12 = __builtin_expect((long )descriptor___11.flags & 1L, 0L);
#line 2505
    if (tmp___12 != 0L) {
#line 2505
      __dynamic_dev_dbg(& descriptor___11, (struct device  const  *)(& port->dev),
                        "DCR1 Writing success status%d\n", status);
    } else {

    }
  }
#line 2507
  Data = 36U;
#line 2508
  status = mos7840_set_reg_sync(port, (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 2U),
                                (int )Data);
#line 2510
  if (status < 0) {
#line 2511
    descriptor___12.modname = "mos7840";
#line 2511
    descriptor___12.function = "mos7840_port_probe";
#line 2511
    descriptor___12.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2511
    descriptor___12.format = "Writing DCR2 failed status-0x%x\n";
#line 2511
    descriptor___12.lineno = 2511U;
#line 2511
    descriptor___12.flags = 0U;
#line 2511
    tmp___13 = __builtin_expect((long )descriptor___12.flags & 1L, 0L);
#line 2511
    if (tmp___13 != 0L) {
#line 2511
      __dynamic_dev_dbg(& descriptor___12, (struct device  const  *)(& port->dev),
                        "Writing DCR2 failed status-0x%x\n", status);
    } else {

    }
#line 2512
    goto ldv_29499;
  } else {
#line 2514
    descriptor___13.modname = "mos7840";
#line 2514
    descriptor___13.function = "mos7840_port_probe";
#line 2514
    descriptor___13.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2514
    descriptor___13.format = "DCR2 Writing success status%d\n";
#line 2514
    descriptor___13.lineno = 2514U;
#line 2514
    descriptor___13.flags = 0U;
#line 2514
    tmp___14 = __builtin_expect((long )descriptor___13.flags & 1L, 0L);
#line 2514
    if (tmp___14 != 0L) {
#line 2514
      __dynamic_dev_dbg(& descriptor___13, (struct device  const  *)(& port->dev),
                        "DCR2 Writing success status%d\n", status);
    } else {

    }
  }
#line 2517
  Data = 0U;
#line 2518
  status = mos7840_set_reg_sync(port, 3, (int )Data);
#line 2520
  if (status < 0) {
#line 2521
    descriptor___14.modname = "mos7840";
#line 2521
    descriptor___14.function = "mos7840_port_probe";
#line 2521
    descriptor___14.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2521
    descriptor___14.format = "Writing CLK_START_VALUE_REGISTER failed status-0x%x\n";
#line 2521
    descriptor___14.lineno = 2521U;
#line 2521
    descriptor___14.flags = 0U;
#line 2521
    tmp___15 = __builtin_expect((long )descriptor___14.flags & 1L, 0L);
#line 2521
    if (tmp___15 != 0L) {
#line 2521
      __dynamic_dev_dbg(& descriptor___14, (struct device  const  *)(& port->dev),
                        "Writing CLK_START_VALUE_REGISTER failed status-0x%x\n", status);
    } else {

    }
#line 2522
    goto ldv_29499;
  } else {
#line 2524
    descriptor___15.modname = "mos7840";
#line 2524
    descriptor___15.function = "mos7840_port_probe";
#line 2524
    descriptor___15.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2524
    descriptor___15.format = "CLK_START_VALUE_REGISTER Writing success status%d\n";
#line 2524
    descriptor___15.lineno = 2524U;
#line 2524
    descriptor___15.flags = 0U;
#line 2524
    tmp___16 = __builtin_expect((long )descriptor___15.flags & 1L, 0L);
#line 2524
    if (tmp___16 != 0L) {
#line 2524
      __dynamic_dev_dbg(& descriptor___15, (struct device  const  *)(& port->dev),
                        "CLK_START_VALUE_REGISTER Writing success status%d\n", status);
    } else {

    }
  }
#line 2526
  Data = 32U;
#line 2527
  status = mos7840_set_reg_sync(port, 2, (int )Data);
#line 2529
  if (status < 0) {
#line 2530
    descriptor___16.modname = "mos7840";
#line 2530
    descriptor___16.function = "mos7840_port_probe";
#line 2530
    descriptor___16.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2530
    descriptor___16.format = "Writing CLK_MULTI_REGISTER failed status-0x%x\n";
#line 2530
    descriptor___16.lineno = 2530U;
#line 2530
    descriptor___16.flags = 0U;
#line 2530
    tmp___17 = __builtin_expect((long )descriptor___16.flags & 1L, 0L);
#line 2530
    if (tmp___17 != 0L) {
#line 2530
      __dynamic_dev_dbg(& descriptor___16, (struct device  const  *)(& port->dev),
                        "Writing CLK_MULTI_REGISTER failed status-0x%x\n", status);
    } else {

    }
#line 2531
    goto error;
  } else {
#line 2533
    descriptor___17.modname = "mos7840";
#line 2533
    descriptor___17.function = "mos7840_port_probe";
#line 2533
    descriptor___17.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2533
    descriptor___17.format = "CLK_MULTI_REGISTER Writing success status%d\n";
#line 2533
    descriptor___17.lineno = 2533U;
#line 2533
    descriptor___17.flags = 0U;
#line 2533
    tmp___18 = __builtin_expect((long )descriptor___17.flags & 1L, 0L);
#line 2533
    if (tmp___18 != 0L) {
#line 2533
      __dynamic_dev_dbg(& descriptor___17, (struct device  const  *)(& port->dev),
                        "CLK_MULTI_REGISTER Writing success status%d\n", status);
    } else {

    }
  }
#line 2536
  Data = 0U;
#line 2537
  status = mos7840_set_uart_reg(port, 7, (int )Data);
#line 2539
  if (status < 0) {
#line 2540
    descriptor___18.modname = "mos7840";
#line 2540
    descriptor___18.function = "mos7840_port_probe";
#line 2540
    descriptor___18.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2540
    descriptor___18.format = "Writing SCRATCH_PAD_REGISTER failed status-0x%x\n";
#line 2540
    descriptor___18.lineno = 2540U;
#line 2540
    descriptor___18.flags = 0U;
#line 2540
    tmp___19 = __builtin_expect((long )descriptor___18.flags & 1L, 0L);
#line 2540
    if (tmp___19 != 0L) {
#line 2540
      __dynamic_dev_dbg(& descriptor___18, (struct device  const  *)(& port->dev),
                        "Writing SCRATCH_PAD_REGISTER failed status-0x%x\n", status);
    } else {

    }
#line 2541
    goto ldv_29499;
  } else {
#line 2543
    descriptor___19.modname = "mos7840";
#line 2543
    descriptor___19.function = "mos7840_port_probe";
#line 2543
    descriptor___19.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2543
    descriptor___19.format = "SCRATCH_PAD_REGISTER Writing success status%d\n";
#line 2543
    descriptor___19.lineno = 2543U;
#line 2543
    descriptor___19.flags = 0U;
#line 2543
    tmp___20 = __builtin_expect((long )descriptor___19.flags & 1L, 0L);
#line 2543
    if (tmp___20 != 0L) {
#line 2543
      __dynamic_dev_dbg(& descriptor___19, (struct device  const  *)(& port->dev),
                        "SCRATCH_PAD_REGISTER Writing success status%d\n", status);
    } else {

    }
  }
#line 2546
  if (mos7840_port->port_num != 1 && (unsigned int )serial->num_ports == 2U) {
#line 2549
    Data = 255U;
#line 2550
    status = mos7840_set_reg_sync(port, (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U),
                                  (int )Data);
#line 2553
    descriptor___20.modname = "mos7840";
#line 2553
    descriptor___20.function = "mos7840_port_probe";
#line 2553
    descriptor___20.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2553
    descriptor___20.format = "ZLIP offset %x\n";
#line 2553
    descriptor___20.lineno = 2554U;
#line 2553
    descriptor___20.flags = 0U;
#line 2553
    tmp___21 = __builtin_expect((long )descriptor___20.flags & 1L, 0L);
#line 2553
    if (tmp___21 != 0L) {
#line 2553
      __dynamic_dev_dbg(& descriptor___20, (struct device  const  *)(& port->dev),
                        "ZLIP offset %x\n", (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U));
    } else {

    }
#line 2555
    if (status < 0) {
#line 2556
      descriptor___21.modname = "mos7840";
#line 2556
      descriptor___21.function = "mos7840_port_probe";
#line 2556
      descriptor___21.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2556
      descriptor___21.format = "Writing ZLP_REG%d failed status-0x%x\n";
#line 2556
      descriptor___21.lineno = 2556U;
#line 2556
      descriptor___21.flags = 0U;
#line 2556
      tmp___22 = __builtin_expect((long )descriptor___21.flags & 1L, 0L);
#line 2556
      if (tmp___22 != 0L) {
#line 2556
        __dynamic_dev_dbg(& descriptor___21, (struct device  const  *)(& port->dev),
                          "Writing ZLP_REG%d failed status-0x%x\n", pnum + 2, status);
      } else {

      }
#line 2557
      goto ldv_29499;
    } else {
#line 2559
      descriptor___22.modname = "mos7840";
#line 2559
      descriptor___22.function = "mos7840_port_probe";
#line 2559
      descriptor___22.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2559
      descriptor___22.format = "ZLP_REG%d Writing success status%d\n";
#line 2559
      descriptor___22.lineno = 2559U;
#line 2559
      descriptor___22.flags = 0U;
#line 2559
      tmp___23 = __builtin_expect((long )descriptor___22.flags & 1L, 0L);
#line 2559
      if (tmp___23 != 0L) {
#line 2559
        __dynamic_dev_dbg(& descriptor___22, (struct device  const  *)(& port->dev),
                          "ZLP_REG%d Writing success status%d\n", pnum + 2, status);
      } else {

      }
    }
  } else {
#line 2561
    Data = 255U;
#line 2562
    status = mos7840_set_reg_sync(port, (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 57U),
                                  (int )Data);
#line 2565
    descriptor___23.modname = "mos7840";
#line 2565
    descriptor___23.function = "mos7840_port_probe";
#line 2565
    descriptor___23.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2565
    descriptor___23.format = "ZLIP offset %x\n";
#line 2565
    descriptor___23.lineno = 2566U;
#line 2565
    descriptor___23.flags = 0U;
#line 2565
    tmp___24 = __builtin_expect((long )descriptor___23.flags & 1L, 0L);
#line 2565
    if (tmp___24 != 0L) {
#line 2565
      __dynamic_dev_dbg(& descriptor___23, (struct device  const  *)(& port->dev),
                        "ZLIP offset %x\n", (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 57U));
    } else {

    }
#line 2567
    if (status < 0) {
#line 2568
      descriptor___24.modname = "mos7840";
#line 2568
      descriptor___24.function = "mos7840_port_probe";
#line 2568
      descriptor___24.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2568
      descriptor___24.format = "Writing ZLP_REG%d failed status-0x%x\n";
#line 2568
      descriptor___24.lineno = 2568U;
#line 2568
      descriptor___24.flags = 0U;
#line 2568
      tmp___25 = __builtin_expect((long )descriptor___24.flags & 1L, 0L);
#line 2568
      if (tmp___25 != 0L) {
#line 2568
        __dynamic_dev_dbg(& descriptor___24, (struct device  const  *)(& port->dev),
                          "Writing ZLP_REG%d failed status-0x%x\n", pnum + 1, status);
      } else {

      }
#line 2569
      goto ldv_29499;
    } else {
#line 2571
      descriptor___25.modname = "mos7840";
#line 2571
      descriptor___25.function = "mos7840_port_probe";
#line 2571
      descriptor___25.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2571
      descriptor___25.format = "ZLP_REG%d Writing success status%d\n";
#line 2571
      descriptor___25.lineno = 2571U;
#line 2571
      descriptor___25.flags = 0U;
#line 2571
      tmp___26 = __builtin_expect((long )descriptor___25.flags & 1L, 0L);
#line 2571
      if (tmp___26 != 0L) {
#line 2571
        __dynamic_dev_dbg(& descriptor___25, (struct device  const  *)(& port->dev),
                          "ZLP_REG%d Writing success status%d\n", pnum + 1, status);
      } else {

      }
    }
  }
#line 2574
  mos7840_port->control_urb = usb_alloc_urb(0, 208U);
#line 2575
  tmp___27 = kmalloc(16UL, 208U);
#line 2575
  mos7840_port->ctrl_buf = (char *)tmp___27;
#line 2576
  tmp___28 = kmalloc(8UL, 208U);
#line 2576
  mos7840_port->dr = (struct usb_ctrlrequest *)tmp___28;
#line 2578
  if (((unsigned long )mos7840_port->control_urb == (unsigned long )((struct urb *)0) || (unsigned long )mos7840_port->ctrl_buf == (unsigned long )((char *)0)) || (unsigned long )mos7840_port->dr == (unsigned long )((struct usb_ctrlrequest *)0)) {
#line 2580
    status = -12;
#line 2581
    goto error;
  } else {

  }
#line 2584
  mos7840_port->has_led = 0;
#line 2587
  if (device_type == 30736) {
#line 2588
    mos7840_port->has_led = 1;
#line 2590
    init_timer_key(& mos7840_port->led_timer1, 0U, "(&mos7840_port->led_timer1)",
                   & __key___0);
#line 2591
    mos7840_port->led_timer1.function = & mos7840_led_off;
#line 2592
    tmp___29 = msecs_to_jiffies(500U);
#line 2592
    mos7840_port->led_timer1.expires = tmp___29 + (unsigned long )jiffies;
#line 2594
    mos7840_port->led_timer1.data = (unsigned long )mos7840_port;
#line 2597
    init_timer_key(& mos7840_port->led_timer2, 0U, "(&mos7840_port->led_timer2)",
                   & __key___1);
#line 2598
    mos7840_port->led_timer2.function = & mos7840_led_flag_off;
#line 2600
    tmp___30 = msecs_to_jiffies(500U);
#line 2600
    mos7840_port->led_timer2.expires = tmp___30 + (unsigned long )jiffies;
#line 2602
    mos7840_port->led_timer2.data = (unsigned long )mos7840_port;
#line 2605
    mos7840_port->led_flag = 0;
#line 2608
    mos7840_set_led_sync(port, 4, 768);
  } else {

  }
  ldv_29499: ;
#line 2613
  if ((int )serial->num_ports + -1 == pnum) {
#line 2615
    Data = 15U;
#line 2616
    status = mos7840_set_reg_sync(serial->port[0], 62, (int )Data);
#line 2617
    if (status < 0) {
#line 2618
      descriptor___26.modname = "mos7840";
#line 2618
      descriptor___26.function = "mos7840_port_probe";
#line 2618
      descriptor___26.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2618
      descriptor___26.format = "Writing ZLP_REG5 failed status-0x%x\n";
#line 2618
      descriptor___26.lineno = 2618U;
#line 2618
      descriptor___26.flags = 0U;
#line 2618
      tmp___31 = __builtin_expect((long )descriptor___26.flags & 1L, 0L);
#line 2618
      if (tmp___31 != 0L) {
#line 2618
        __dynamic_dev_dbg(& descriptor___26, (struct device  const  *)(& port->dev),
                          "Writing ZLP_REG5 failed status-0x%x\n", status);
      } else {

      }
#line 2619
      goto error;
    } else {
#line 2621
      descriptor___27.modname = "mos7840";
#line 2621
      descriptor___27.function = "mos7840_port_probe";
#line 2621
      descriptor___27.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared";
#line 2621
      descriptor___27.format = "ZLP_REG5 Writing success status%d\n";
#line 2621
      descriptor___27.lineno = 2621U;
#line 2621
      descriptor___27.flags = 0U;
#line 2621
      tmp___32 = __builtin_expect((long )descriptor___27.flags & 1L, 0L);
#line 2621
      if (tmp___32 != 0L) {
#line 2621
        __dynamic_dev_dbg(& descriptor___27, (struct device  const  *)(& port->dev),
                          "ZLP_REG5 Writing success status%d\n", status);
      } else {

      }
    }
#line 2624
    tmp___33 = __create_pipe(serial->dev, 0U);
#line 2624
    usb_control_msg(serial->dev, tmp___33 | 2147483648U, 3, 0, 1, 0, 0, 0, 5000);
  } else {

  }
#line 2628
  return (0);
  error: 
#line 2630
  kfree((void const   *)mos7840_port->dr);
#line 2631
  kfree((void const   *)mos7840_port->ctrl_buf);
#line 2632
  usb_free_urb(mos7840_port->control_urb);
#line 2633
  kfree((void const   *)mos7840_port);
#line 2635
  return (status);
}
}
#line 2638 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_port_remove(struct usb_serial_port *port ) 
{ 
  struct moschip_port *mos7840_port ;

  {
#line 2642
  mos7840_port = mos7840_get_port_private(port);
#line 2644
  if ((int )mos7840_port->has_led) {
#line 2646
    mos7840_set_led_sync(port, 4, 768);
#line 2648
    del_timer_sync(& mos7840_port->led_timer1);
#line 2649
    del_timer_sync(& mos7840_port->led_timer2);
  } else {

  }
#line 2651
  usb_kill_urb(mos7840_port->control_urb);
#line 2652
  usb_free_urb(mos7840_port->control_urb);
#line 2653
  kfree((void const   *)mos7840_port->ctrl_buf);
#line 2654
  kfree((void const   *)mos7840_port->dr);
#line 2655
  kfree((void const   *)mos7840_port);
#line 2657
  return (0);
}
}
#line 2716
void ldv_check_final_state(void) ;
#line 2719
extern void ldv_check_return_value(int  ) ;
#line 2725
void ldv_initialize(void) ;
#line 2728
extern void ldv_handler_precall(void) ;
#line 2731
extern int nondet_int(void) ;
#line 2734 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 2737 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  int res_mos7840_open_23 ;
  unsigned char const   *var_mos7840_write_29_p2 ;
  int var_mos7840_write_29_p3 ;
  struct usb_serial *var_group3 ;
  unsigned int var_mos7840_ioctl_41_p1 ;
  unsigned long var_mos7840_ioctl_41_p2 ;
  struct ktermios *var_mos7840_set_termios_37_p2 ;
  int var_mos7840_break_27_p1 ;
  unsigned int var_mos7840_tiocmset_33_p1 ;
  unsigned int var_mos7840_tiocmset_33_p2 ;
  struct serial_icounter_struct *var_group4 ;
  struct urb *var_group5 ;
  unsigned long var_mos7840_led_off_14_p0 ;
  unsigned long var_mos7840_led_flag_off_15_p0 ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;

  {
#line 5149
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 5139
  LDV_IN_INTERRUPT = 1;
#line 5148
  ldv_initialize();
#line 5155
  goto ldv_29608;
  ldv_29607: 
#line 5159
  tmp = nondet_int();
#line 5159
  switch (tmp) {
  case 0: ;
#line 5164
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 0) {
#line 5284
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 5290
  goto ldv_29584;
  case 1: ;
#line 5294
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 1) {
#line 5397
    ldv_handler_precall();
#line 5398
    res_mos7840_open_23 = mos7840_open(var_group1, var_group2);
#line 5399
    ldv_check_return_value(res_mos7840_open_23);
#line 5400
    if (res_mos7840_open_23 != 0) {
#line 5401
      goto ldv_module_exit;
    } else {

    }
#line 5414
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 5420
  goto ldv_29584;
  case 2: ;
#line 5424
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 2) {
#line 5527
    ldv_handler_precall();
#line 5528
    mos7840_close(var_group2);
#line 5541
    ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
  } else {

  }
#line 5547
  goto ldv_29584;
  case 3: 
#line 5654
  ldv_handler_precall();
#line 5655
  mos7840_write(var_group1, var_group2, var_mos7840_write_29_p2, var_mos7840_write_29_p3);
#line 5672
  goto ldv_29584;
  case 4: 
#line 5779
  ldv_handler_precall();
#line 5780
  mos7840_write_room(var_group1);
#line 5799
  goto ldv_29584;
  case 5: 
#line 5906
  ldv_handler_precall();
#line 5907
  mos7840_chars_in_buffer(var_group1);
#line 5926
  goto ldv_29584;
  case 6: 
#line 6035
  ldv_handler_precall();
#line 6036
  mos7840_throttle(var_group1);
#line 6053
  goto ldv_29584;
  case 7: 
#line 6162
  ldv_handler_precall();
#line 6163
  mos7840_unthrottle(var_group1);
#line 6180
  goto ldv_29584;
  case 8: 
#line 6295
  ldv_handler_precall();
#line 6296
  mos7840_calc_num_ports(var_group3);
#line 6307
  goto ldv_29584;
  case 9: 
#line 6422
  ldv_handler_precall();
#line 6423
  mos7840_ioctl(var_group1, var_mos7840_ioctl_41_p1, var_mos7840_ioctl_41_p2);
#line 6434
  goto ldv_29584;
  case 10: 
#line 6549
  ldv_handler_precall();
#line 6550
  mos7840_set_termios(var_group1, var_group2, var_mos7840_set_termios_37_p2);
#line 6561
  goto ldv_29584;
  case 11: 
#line 6668
  ldv_handler_precall();
#line 6669
  mos7840_break(var_group1, var_mos7840_break_27_p1);
#line 6688
  goto ldv_29584;
  case 12: 
#line 6797
  ldv_handler_precall();
#line 6798
  mos7840_tiocmget(var_group1);
#line 6815
  goto ldv_29584;
  case 13: 
#line 6924
  ldv_handler_precall();
#line 6925
  mos7840_tiocmset(var_group1, var_mos7840_tiocmset_33_p1, var_mos7840_tiocmset_33_p2);
#line 6942
  goto ldv_29584;
  case 14: 
#line 7057
  ldv_handler_precall();
#line 7058
  mos7840_get_icount(var_group1, var_group4);
#line 7069
  goto ldv_29584;
  case 15: 
#line 7184
  ldv_handler_precall();
#line 7185
  mos7840_port_probe(var_group2);
#line 7196
  goto ldv_29584;
  case 16: 
#line 7311
  ldv_handler_precall();
#line 7312
  mos7840_port_remove(var_group2);
#line 7323
  goto ldv_29584;
  case 17: 
#line 7428
  ldv_handler_precall();
#line 7429
  mos7840_bulk_in_callback(var_group5);
#line 7450
  goto ldv_29584;
  case 18: 
#line 7555
  ldv_handler_precall();
#line 7556
  mos7840_interrupt_callback(var_group5);
#line 7577
  goto ldv_29584;
  case 19: 
#line 7682
  ldv_handler_precall();
#line 7683
  mos7840_led_off(var_mos7840_led_off_14_p0);
#line 7704
  goto ldv_29584;
  case 20: 
#line 7809
  ldv_handler_precall();
#line 7810
  mos7840_led_flag_off(var_mos7840_led_flag_off_15_p0);
#line 7831
  goto ldv_29584;
  default: ;
#line 7832
  goto ldv_29584;
  }
  ldv_29584: ;
  ldv_29608: 
#line 5155
  tmp___0 = nondet_int();
#line 5155
  if (tmp___0 != 0 || ldv_s_moschip7840_4port_device_usb_serial_driver != 0) {
#line 5157
    goto ldv_29607;
  } else {

  }

  ldv_module_exit: ;
#line 7841
  ldv_check_final_state();
#line 7844
  return;
}
}
#line 7880 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7885
  ldv_spin_lock_node_size_lock_of_pglist_data();
#line 7887
  __ldv_spin_lock(ldv_func_arg1);
#line 7888
  return;
}
}
#line 7981 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7986
  ldv_spin_lock_siglock_of_sighand_struct();
#line 7988
  __ldv_spin_lock(ldv_func_arg1);
#line 7989
  return;
}
}
#line 8033 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static void ldv_spin_lock_19(spinlock_t *lock ) 
{ 


  {
#line 8038
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 8040
  spin_lock(lock);
#line 8041
  return;
}
}
#line 8043 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static void ldv_spin_unlock_20(spinlock_t *lock ) 
{ 


  {
#line 8048
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 8050
  spin_unlock(lock);
#line 8051
  return;
}
}
#line 8053 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_21(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 8058
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 8060
  __ldv_spin_lock(ldv_func_arg1);
#line 8061
  return;
}
}
#line 8063 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static void ldv_spin_unlock_irqrestore_22(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 8069
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 8071
  spin_unlock_irqrestore(lock, flags);
#line 8072
  return;
}
}
#line 8074 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_23(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 8079
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 8081
  __ldv_spin_lock(ldv_func_arg1);
#line 8082
  return;
}
}
#line 8095 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_25(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 8100
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 8102
  __ldv_spin_lock(ldv_func_arg1);
#line 8103
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 139
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_d_lock_of_dentry = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 148
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_d_lock_of_dentry = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_d_lock_of_dentry = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 183
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_d_lock_of_dentry = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 264
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_i_lock_of_inode = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 273
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_i_lock_of_inode = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_i_lock_of_inode = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 308
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_i_lock_of_inode = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 389
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 398
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 433
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_node_size_lock_of_pglist_data  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 514
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_node_size_lock_of_pglist_data = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 523
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 558
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_pool_lock_of_moschip_port  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_pool_lock_of_moschip_port(void) 
{ 


  {
#line 639
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_pool_lock_of_moschip_port = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_pool_lock_of_moschip_port(void) 
{ 


  {
#line 648
  if (ldv_spin_pool_lock_of_moschip_port == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_pool_lock_of_moschip_port = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_pool_lock_of_moschip_port = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_pool_lock_of_moschip_port(void) 
{ 


  {
#line 683
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_pool_lock_of_moschip_port == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_pool_lock_of_moschip_port(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_pool_lock_of_moschip_port();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_pool_lock_of_moschip_port(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_pool_lock_of_moschip_port = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 764
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 764
    ldv_error();
  }
#line 766
  ldv_spin_siglock_of_sighand_struct = 2;
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 773
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 773
    ldv_error();
  }
#line 775
  ldv_spin_siglock_of_sighand_struct = 1;
#line 776
  return;
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 784
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 787
  is_spin_held_by_another_thread = ldv_undef_int();
#line 790
  if (is_spin_held_by_another_thread) {
#line 793
    return (0);
  } else {
#line 798
    ldv_spin_siglock_of_sighand_struct = 2;
#line 800
    return (1);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 808
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 808
    ldv_error();
  }
#line 809
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 817
  is_spin_held_by_another_thread = ldv_undef_int();
#line 820
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 823
    return (0);
  } else {
#line 828
    return (1);
  }
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 836
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 836
  if (tmp) {
#line 836
    tmp___0 = 0;
  } else {
#line 836
    tmp___0 = 1;
  }
#line 836
  return (tmp___0);
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 845
  is_spin_contended = ldv_undef_int();
#line 848
  if (is_spin_contended) {
#line 851
    return (0);
  } else {
#line 856
    return (1);
  }
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 866
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 866
    ldv_error();
  }
#line 869
  atomic_value_after_dec = ldv_undef_int();
#line 872
  if (atomic_value_after_dec == 0) {
#line 875
    ldv_spin_siglock_of_sighand_struct = 2;
#line 877
    return (1);
  } else {

  }
#line 881
  return (0);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 888
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 890
  ldv_spin_d_lock_of_dentry = 1;
#line 892
  ldv_spin_i_lock_of_inode = 1;
#line 894
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 896
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 898
  ldv_spin_pool_lock_of_moschip_port = 1;
#line 900
  ldv_spin_siglock_of_sighand_struct = 1;
#line 901
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 907
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 907
    ldv_error();
  }
#line 909
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 909
    ldv_error();
  }
#line 911
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 911
    ldv_error();
  }
#line 913
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 913
    ldv_error();
  }
#line 915
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 917
    ldv_error();
  }
#line 919
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 919
    ldv_error();
  }
#line 920
  return;
}
}
