/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 15 "include/linux/stddef.h"
enum __anonenum_4 {
    false = 0,
    true = 1
} ;
#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 190 "include/linux/types.h"
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
#line 190 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_7 atomic_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 114 "include/linux/kernel.h"
struct completion;
#line 115
struct pt_regs;
#line 208
struct pid;
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_11 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_12 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_13 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_14 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_10 {
   struct __anonstruct____missing_field_name_11 __annonCompField4 ;
   struct __anonstruct_futex_12 futex ;
   struct __anonstruct_nanosleep_13 nanosleep ;
   struct __anonstruct_poll_14 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_10 __annonCompField5 ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct page;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct task_struct;
#line 21
struct exec_domain;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct mm_struct;
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
union __anonunion____missing_field_name_15 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_15 __annonCompField6 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_18 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_18 pgd_t;
#line 284
struct file;
#line 301
struct seq_file;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_23 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_24 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField8 ;
   struct __anonstruct____missing_field_name_24 __annonCompField9 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_22 __annonCompField10 ;
} __attribute__((__packed__)) ;
#line 144 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct thread_struct;
#line 355
struct raw_spinlock;
#line 88 "include/linux/personality.h"
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_32 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_33 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_31 {
   struct __anonstruct____missing_field_name_32 __annonCompField13 ;
   struct __anonstruct____missing_field_name_33 __annonCompField14 ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_34 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_31 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_34 __annonCompField16 ;
} __attribute__((__aligned__(16))) ;
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 412
struct kmem_cache;
#line 414
struct ds_context;
#line 414 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 614 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_36 {
   unsigned long seg ;
};
#line 614 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_36 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_37 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_37 raw_rwlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 7 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 35 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 39 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[1 + 3 * 4] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
   unsigned long contending_point[4] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 173 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_38 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_38 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_39 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_39 rwlock_t;
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_41 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_41 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mpspec.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 170 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 308
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 318 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_90 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_90 mm_context_t;
#line 9 "include/linux/gfp.h"
struct vm_area_struct;
#line 14 "include/linux/time.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 10 "include/linux/timer.h"
struct tvec_base;
#line 12 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 241
struct hrtimer;
#line 242
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 49 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
#line 15 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 36 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 47 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 70 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 89
struct inode;
#line 89 "include/linux/dcache.h"
union __anonunion_d_u_96 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 89
struct dentry_operations;
#line 89
struct super_block;
#line 89 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_96 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
#line 134 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 99 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 16 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 380 "include/linux/fs.h"
struct export_operations;
#line 382
struct iovec;
#line 384
struct kiocb;
#line 385
struct pipe_inode_info;
#line 386
struct poll_table_struct;
#line 387
struct kstatfs;
#line 390
struct cred;
#line 442 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 106 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 127 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 17 "include/linux/dqblk_qtree.h"
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 197 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 212
struct quota_format_type;
#line 214 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 284 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 321 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 335 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 506 "include/linux/fs.h"
struct address_space;
#line 507
struct writeback_control;
#line 550 "include/linux/fs.h"
union __anonunion_arg_103 {
   char *buf ;
   void *data ;
};
#line 550 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_102 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_103 arg ;
   int error ;
};
#line 550 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_102 read_descriptor_t;
#line 563 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 612
struct backing_dev_info;
#line 613 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 637
struct hd_struct;
#line 637
struct gendisk;
#line 637 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 713
struct inode_operations;
#line 713
struct file_operations;
#line 713
struct file_lock;
#line 713
struct cdev;
#line 713 "include/linux/fs.h"
union __anonunion____missing_field_name_104 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 713 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_104 __annonCompField18 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 864 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 875 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 898 "include/linux/fs.h"
union __anonunion_f_u_105 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 898 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_105 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1017
struct files_struct;
#line 1017 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1019 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1024 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1046 "include/linux/fs.h"
struct fasync_struct;
#line 1046 "include/linux/fs.h"
struct __anonstruct_afs_107 {
   struct list_head link ;
   int state ;
};
#line 1046 "include/linux/fs.h"
union __anonunion_fl_u_106 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_107 afs ;
};
#line 1046 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_106 fl_u ;
};
#line 1270 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1305
struct file_system_type;
#line 1305
struct super_operations;
#line 1305
struct xattr_handler;
#line 1305
struct mtd_info;
#line 1305 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1426 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1478 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1507 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1550 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1733 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2168
struct bio;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 9 "include/linux/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5] ;
   __u16 x_sflag ;
};
#line 12 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 225 "include/linux/tty_driver.h"
struct tty_struct;
#line 226
struct tty_driver;
#line 228 "include/linux/tty_driver.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver *driver , struct inode *inode ,
                                int idx ) ;
   int (*install)(struct tty_driver *driver , struct tty_struct *tty ) ;
   void (*remove)(struct tty_driver *driver , struct tty_struct *tty ) ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   void (*shutdown)(struct tty_struct *tty ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct winsize *ws ) ;
   int (*set_termiox)(struct tty_struct *tty , struct termiox *tnew ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
   struct file_operations  const  *proc_fops ;
};
#line 270
struct proc_dir_entry;
#line 270 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 107 "include/linux/tty_ldisc.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 145 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 57 "include/linux/tty.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
#line 69 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 170
struct signal_struct;
#line 183
struct tty_port;
#line 185 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port *port ) ;
   void (*dtr_rts)(struct tty_port *port , int raise ) ;
};
#line 191 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
   int drain_delay ;
};
#line 223 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 340
struct class;
#line 45 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 43
struct kparam_string;
#line 43
struct kparam_array;
#line 43 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_114 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 43 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_114 __annonCompField19 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 19 "include/linux/marker.h"
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 36 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 41 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
#line 5 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/module.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 223
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230
struct module_sect_attrs;
#line 230
struct module_notes_attrs;
#line 230
struct ftrace_event_call;
#line 230 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 655
struct device_driver;
#line 22 "include/linux/serial.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 35 "include/linux/serial.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 191 "include/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 98 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 146 "include/linux/usb/ch9.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
} __attribute__((__packed__)) ;
#line 215 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 269 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 306 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 324 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 582 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 750
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 757
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 10 "include/linux/irqreturn.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_119 {
   u16 inuse ;
   u16 objects ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_118 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_119 __annonCompField20 ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_121 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_120 {
   struct __anonstruct____missing_field_name_121 __annonCompField22 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_122 {
   unsigned long index ;
   void *freelist ;
};
#line 40 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_118 __annonCompField21 ;
   union __anonunion____missing_field_name_120 __annonCompField23 ;
   union __anonunion____missing_field_name_122 __annonCompField24 ;
   struct list_head lru ;
};
#line 126 "include/linux/mm_types.h"
struct __anonstruct_vm_set_124 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 126 "include/linux/mm_types.h"
union __anonunion_shared_123 {
   struct __anonstruct_vm_set_124 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 126
struct anon_vma;
#line 126
struct vm_operations_struct;
#line 126
struct mempolicy;
#line 126 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_123 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 183 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 188 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 194
struct mmu_notifier_mm;
#line 194 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_125 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_125 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_127 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_128 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_129 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_130 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_131 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_132 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_126 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_127 _kill ;
   struct __anonstruct__timer_128 _timer ;
   struct __anonstruct__rt_129 _rt ;
   struct __anonstruct__sigchld_130 _sigchld ;
   struct __anonstruct__sigfault_131 _sigfault ;
   struct __anonstruct__sigpoll_132 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_126 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_135 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_135 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 26 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 27
struct hrtimer_cpu_base;
#line 43
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 103 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 142 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 171 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 18 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 948 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 79
struct key_type;
#line 81
struct keyring_list;
#line 124
struct key_user;
#line 124 "include/linux/key.h"
union __anonunion_type_data_190 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
#line 124 "include/linux/key.h"
union __anonunion_payload_191 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 124 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_190 type_data ;
   union __anonunion_payload_191 payload ;
};
#line 30 "include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
#line 82 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 115 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 97 "include/linux/sched.h"
struct futex_pi_state;
#line 98
struct robust_list_head;
#line 100
struct fs_struct;
#line 101
struct bts_context;
#line 102
struct perf_counter_context;
#line 148
struct cfs_rq;
#line 149
struct task_group;
#line 351
struct user_namespace;
#line 58 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 15 "include/linux/aio.h"
struct kioctx;
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_193 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_193 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 447 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 454 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 473 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 500 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 513
struct taskstats;
#line 513
struct tty_audit_buf;
#line 513 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 645 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
   atomic_long_t locked_vm ;
};
#line 695
struct reclaim_state;
#line 698 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 714 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 759
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 835 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[0] ;
};
#line 868
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 886 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0] ;
};
#line 987
struct io_context;
#line 996
struct audit_context;
#line 1001
struct rq;
#line 1004 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 1055 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1069 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1130
struct rt_rq;
#line 1130 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1146
struct linux_binfmt;
#line 1146
struct irqaction;
#line 1146
struct css_set;
#line 1146
struct compat_robust_list_head;
#line 1146
struct ftrace_ret_stack;
#line 1146 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_counter_context *perf_counter_ctxp ;
   struct mutex perf_counter_mutex ;
   struct list_head perf_counter_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
};
#line 90 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 19 "include/linux/klist.h"
struct klist_node;
#line 39 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_map_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 31 "include/linux/device.h"
struct device_private;
#line 33
struct driver_private;
#line 35
struct class_private;
#line 36
struct bus_type;
#line 37
struct bus_type_private;
#line 39 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 52
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 154 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 186
struct class_attribute;
#line 186 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 206
struct device_type;
#line 239 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 286 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
#line 296 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 356 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 365
struct dma_coherent_mem;
#line 365 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 24 "include/linux/usb.h"
struct usb_device;
#line 25
struct usb_driver;
#line 26
struct wusb_dev;
#line 45
struct ep_device;
#line 61 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 73 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 86
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 155 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 220 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 272 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 303 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 310
struct mon_bus;
#line 310 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 359
struct usb_tt;
#line 427 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 761 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 780 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 839 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
   unsigned int soft_unbind : 1 ;
};
#line 967 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 974
struct urb;
#line 976 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned int poisoned : 1 ;
};
#line 1159 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 30 "include/linux/usb/serial.h"
enum port_dev_state {
    PORT_UNREGISTERED = 0,
    PORT_REGISTERING = 1,
    PORT_REGISTERED = 2,
    PORT_UNREGISTERING = 3
} ;
#line 75
struct usb_serial;
#line 75 "include/linux/usb/serial.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   int tx_bytes_flight ;
   int urbs_in_flight ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   unsigned long sysrq ;
   struct device dev ;
   enum port_dev_state dev_state ;
};
#line 145
struct usb_serial_driver;
#line 145 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 216 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int max_in_flight_urbs ;
   int (*probe)(struct usb_serial *serial , struct usb_device_id  const  *id ) ;
   int (*attach)(struct usb_serial *serial ) ;
   int (*calc_num_ports)(struct usb_serial *serial ) ;
   void (*disconnect)(struct usb_serial *serial ) ;
   void (*release)(struct usb_serial *serial ) ;
   int (*port_probe)(struct usb_serial_port *port ) ;
   int (*port_remove)(struct usb_serial_port *port ) ;
   int (*suspend)(struct usb_serial *serial , pm_message_t message ) ;
   int (*resume)(struct usb_serial *serial ) ;
   int (*open)(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) ;
   void (*close)(struct usb_serial_port *port ) ;
   int (*write)(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *buf ,
                int count ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct usb_serial_port *port , struct ktermios *old ) ;
   void (*break_ctl)(struct tty_struct *tty , int break_state ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   void (*dtr_rts)(struct usb_serial_port *port , int on ) ;
   int (*carrier_raised)(struct usb_serial_port *port ) ;
   void (*read_int_callback)(struct urb *urb ) ;
   void (*write_int_callback)(struct urb *urb ) ;
   void (*read_bulk_callback)(struct urb *urb ) ;
   void (*write_bulk_callback)(struct urb *urb ) ;
};
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   struct urb *int_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   char zombie ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16] ;
   char busy[16] ;
   bool read_urb_busy ;
};
#line 242 "include/linux/timer.h"
enum hrtimer_restart;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 21 "include/linux/log2.h"
extern  __attribute__((__noreturn__)) int ____ilog2_NaN(void)  __attribute__((__const__)) ;
#line 238 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> (12 - 1);
#line 14
  order = -1;
#line 15
  while (1) {
#line 16
    size = size >> 1;
#line 17
    order = order + 1;
#line 15
    if (size) {

    } else {
#line 15
      break;
    }
  }
#line 19
  return (order);
}
}
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task  __attribute__((__section__(".data.percpu"))) ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (sizeof(per_cpu__current_task)) {
  case 1UL: 
#line 14
  __asm__  ("mov"
            "b "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=q" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 2UL: 
#line 14
  __asm__  ("mov"
            "w "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 4UL: 
#line 14
  __asm__  ("mov"
            "l "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  case 8UL: 
#line 14
  __asm__  ("mov"
            "q "
            "%%"
            "gs"
            ":%P"
            "1"
            ",%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  break;
  default: 
#line 14
  __bad_percpu_size();
  }
#line 14
  return (ret__);
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
#line 87
  tmp___0 = variable_test_bit(flag, (unsigned long *)(& ti->flags));
#line 87
  return (tmp___0);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 35
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 47
extern void _spin_unlock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 135
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 427
extern long interruptible_sleep_on_timeout(wait_queue_head_t *q , long timeout ) ;
#line 433
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 435
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 438
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 226 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask , unsigned int order ) ;
#line 131 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return (kobj->name);
}
}
#line 47 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 47 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 47
  tmp = __builtin_expect(! (! __tracepoint_kmalloc.state), 0);
#line 47
  if (tmp) {
#line 47
    while (1) {
#line 47
      while (1) {
#line 47
        break;
      }
#line 47
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 47
      while (1) {
#line 47
        break;
      }
#line 47
      it_func = _________p1;
#line 47
      if (it_func) {
#line 47
        while (1) {
#line 47
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 47
          it_func = it_func + 1;
#line 47
          if (*it_func) {

          } else {
#line 47
            break;
          }
        }
      } else {

      }
#line 47
      while (1) {
#line 47
        break;
      }
#line 47
      break;
    }
  } else {

  }
#line 47
  return;
}
}
#line 141 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[12 + 2] ;
#line 147 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;

  {
#line 149
  if (! size) {
#line 150
    return (0);
  } else {

  }
#line 152
  if (size <= (size_t )8) {
#line 153
    if (8 < 1) {
#line 153
      tmp = ____ilog2_NaN();
#line 153
      tmp___65 = tmp;
    } else {
#line 153
      if (8ULL & (1ULL << 63)) {
#line 153
        tmp___64 = 63;
      } else {
#line 153
        if (8ULL & (1ULL << 62)) {
#line 153
          tmp___63 = 62;
        } else {
#line 153
          if (8ULL & (1ULL << 61)) {
#line 153
            tmp___62 = 61;
          } else {
#line 153
            if (8ULL & (1ULL << 60)) {
#line 153
              tmp___61 = 60;
            } else {
#line 153
              if (8ULL & (1ULL << 59)) {
#line 153
                tmp___60 = 59;
              } else {
#line 153
                if (8ULL & (1ULL << 58)) {
#line 153
                  tmp___59 = 58;
                } else {
#line 153
                  if (8ULL & (1ULL << 57)) {
#line 153
                    tmp___58 = 57;
                  } else {
#line 153
                    if (8ULL & (1ULL << 56)) {
#line 153
                      tmp___57 = 56;
                    } else {
#line 153
                      if (8ULL & (1ULL << 55)) {
#line 153
                        tmp___56 = 55;
                      } else {
#line 153
                        if (8ULL & (1ULL << 54)) {
#line 153
                          tmp___55 = 54;
                        } else {
#line 153
                          if (8ULL & (1ULL << 53)) {
#line 153
                            tmp___54 = 53;
                          } else {
#line 153
                            if (8ULL & (1ULL << 52)) {
#line 153
                              tmp___53 = 52;
                            } else {
#line 153
                              if (8ULL & (1ULL << 51)) {
#line 153
                                tmp___52 = 51;
                              } else {
#line 153
                                if (8ULL & (1ULL << 50)) {
#line 153
                                  tmp___51 = 50;
                                } else {
#line 153
                                  if (8ULL & (1ULL << 49)) {
#line 153
                                    tmp___50 = 49;
                                  } else {
#line 153
                                    if (8ULL & (1ULL << 48)) {
#line 153
                                      tmp___49 = 48;
                                    } else {
#line 153
                                      if (8ULL & (1ULL << 47)) {
#line 153
                                        tmp___48 = 47;
                                      } else {
#line 153
                                        if (8ULL & (1ULL << 46)) {
#line 153
                                          tmp___47 = 46;
                                        } else {
#line 153
                                          if (8ULL & (1ULL << 45)) {
#line 153
                                            tmp___46 = 45;
                                          } else {
#line 153
                                            if (8ULL & (1ULL << 44)) {
#line 153
                                              tmp___45 = 44;
                                            } else {
#line 153
                                              if (8ULL & (1ULL << 43)) {
#line 153
                                                tmp___44 = 43;
                                              } else {
#line 153
                                                if (8ULL & (1ULL << 42)) {
#line 153
                                                  tmp___43 = 42;
                                                } else {
#line 153
                                                  if (8ULL & (1ULL << 41)) {
#line 153
                                                    tmp___42 = 41;
                                                  } else {
#line 153
                                                    if (8ULL & (1ULL << 40)) {
#line 153
                                                      tmp___41 = 40;
                                                    } else {
#line 153
                                                      if (8ULL & (1ULL << 39)) {
#line 153
                                                        tmp___40 = 39;
                                                      } else {
#line 153
                                                        if (8ULL & (1ULL << 38)) {
#line 153
                                                          tmp___39 = 38;
                                                        } else {
#line 153
                                                          if (8ULL & (1ULL << 37)) {
#line 153
                                                            tmp___38 = 37;
                                                          } else {
#line 153
                                                            if (8ULL & (1ULL << 36)) {
#line 153
                                                              tmp___37 = 36;
                                                            } else {
#line 153
                                                              if (8ULL & (1ULL << 35)) {
#line 153
                                                                tmp___36 = 35;
                                                              } else {
#line 153
                                                                if (8ULL & (1ULL << 34)) {
#line 153
                                                                  tmp___35 = 34;
                                                                } else {
#line 153
                                                                  if (8ULL & (1ULL << 33)) {
#line 153
                                                                    tmp___34 = 33;
                                                                  } else {
#line 153
                                                                    if (8ULL & (1ULL << 32)) {
#line 153
                                                                      tmp___33 = 32;
                                                                    } else {
#line 153
                                                                      if (8ULL & (1ULL << 31)) {
#line 153
                                                                        tmp___32 = 31;
                                                                      } else {
#line 153
                                                                        if (8ULL & (1ULL << 30)) {
#line 153
                                                                          tmp___31 = 30;
                                                                        } else {
#line 153
                                                                          if (8ULL & (1ULL << 29)) {
#line 153
                                                                            tmp___30 = 29;
                                                                          } else {
#line 153
                                                                            if (8ULL & (1ULL << 28)) {
#line 153
                                                                              tmp___29 = 28;
                                                                            } else {
#line 153
                                                                              if (8ULL & (1ULL << 27)) {
#line 153
                                                                                tmp___28 = 27;
                                                                              } else {
#line 153
                                                                                if (8ULL & (1ULL << 26)) {
#line 153
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 153
                                                                                  if (8ULL & (1ULL << 25)) {
#line 153
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 153
                                                                                    if (8ULL & (1ULL << 24)) {
#line 153
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 153
                                                                                      if (8ULL & (1ULL << 23)) {
#line 153
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 153
                                                                                        if (8ULL & (1ULL << 22)) {
#line 153
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 153
                                                                                          if (8ULL & (1ULL << 21)) {
#line 153
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 153
                                                                                            if (8ULL & (1ULL << 20)) {
#line 153
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 153
                                                                                              if (8ULL & (1ULL << 19)) {
#line 153
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 153
                                                                                                if (8ULL & (1ULL << 18)) {
#line 153
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 153
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 153
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 153
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 153
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 153
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 153
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 153
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 153
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 153
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 153
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 153
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 153
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 153
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 153
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 153
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 153
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 153
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 153
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 153
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 153
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 153
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 153
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 153
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 153
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 153
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 153
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 153
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 153
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 153
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 153
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 153
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 153
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 153
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 153
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 153
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 153
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 153
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 153
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 153
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 153
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 153
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 153
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 153
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 153
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 153
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 153
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 153
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 153
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 153
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 153
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 153
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 153
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 153
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 153
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 153
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 153
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 153
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 153
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 153
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 153
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 153
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 153
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 153
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 153
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 153
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 153
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 153
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 153
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 153
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 153
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 153
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 153
                                                                  tmp___35 = tmp___34;
                                                                }
#line 153
                                                                tmp___36 = tmp___35;
                                                              }
#line 153
                                                              tmp___37 = tmp___36;
                                                            }
#line 153
                                                            tmp___38 = tmp___37;
                                                          }
#line 153
                                                          tmp___39 = tmp___38;
                                                        }
#line 153
                                                        tmp___40 = tmp___39;
                                                      }
#line 153
                                                      tmp___41 = tmp___40;
                                                    }
#line 153
                                                    tmp___42 = tmp___41;
                                                  }
#line 153
                                                  tmp___43 = tmp___42;
                                                }
#line 153
                                                tmp___44 = tmp___43;
                                              }
#line 153
                                              tmp___45 = tmp___44;
                                            }
#line 153
                                            tmp___46 = tmp___45;
                                          }
#line 153
                                          tmp___47 = tmp___46;
                                        }
#line 153
                                        tmp___48 = tmp___47;
                                      }
#line 153
                                      tmp___49 = tmp___48;
                                    }
#line 153
                                    tmp___50 = tmp___49;
                                  }
#line 153
                                  tmp___51 = tmp___50;
                                }
#line 153
                                tmp___52 = tmp___51;
                              }
#line 153
                              tmp___53 = tmp___52;
                            }
#line 153
                            tmp___54 = tmp___53;
                          }
#line 153
                          tmp___55 = tmp___54;
                        }
#line 153
                        tmp___56 = tmp___55;
                      }
#line 153
                      tmp___57 = tmp___56;
                    }
#line 153
                    tmp___58 = tmp___57;
                  }
#line 153
                  tmp___59 = tmp___58;
                }
#line 153
                tmp___60 = tmp___59;
              }
#line 153
              tmp___61 = tmp___60;
            }
#line 153
            tmp___62 = tmp___61;
          }
#line 153
          tmp___63 = tmp___62;
        }
#line 153
        tmp___64 = tmp___63;
      }
#line 153
      tmp___65 = tmp___64;
    }
#line 153
    return (tmp___65);
  } else {

  }
#line 156
  if (size > (size_t )64 && size <= (size_t )96) {
#line 157
    return (1);
  } else {

  }
#line 158
  if (size > (size_t )128 && size <= (size_t )192) {
#line 159
    return (2);
  } else {

  }
#line 161
  if (size <= (size_t )8) {
#line 161
    return (3);
  } else {

  }
#line 162
  if (size <= (size_t )16) {
#line 162
    return (4);
  } else {

  }
#line 163
  if (size <= (size_t )32) {
#line 163
    return (5);
  } else {

  }
#line 164
  if (size <= (size_t )64) {
#line 164
    return (6);
  } else {

  }
#line 165
  if (size <= (size_t )128) {
#line 165
    return (7);
  } else {

  }
#line 166
  if (size <= (size_t )256) {
#line 166
    return (8);
  } else {

  }
#line 167
  if (size <= (size_t )512) {
#line 167
    return (9);
  } else {

  }
#line 168
  if (size <= (size_t )1024) {
#line 168
    return (10);
  } else {

  }
#line 169
  if (size <= (size_t )(2 * 1024)) {
#line 169
    return (11);
  } else {

  }
#line 170
  if (size <= (size_t )(4 * 1024)) {
#line 170
    return (12);
  } else {

  }
#line 175
  if (size <= (size_t )(8 * 1024)) {
#line 175
    return (13);
  } else {

  }
#line 176
  if (size <= (size_t )(16 * 1024)) {
#line 176
    return (14);
  } else {

  }
#line 177
  if (size <= (size_t )(32 * 1024)) {
#line 177
    return (15);
  } else {

  }
#line 178
  if (size <= (size_t )(64 * 1024)) {
#line 178
    return (16);
  } else {

  }
#line 179
  if (size <= (size_t )(128 * 1024)) {
#line 179
    return (17);
  } else {

  }
#line 180
  if (size <= (size_t )(256 * 1024)) {
#line 180
    return (18);
  } else {

  }
#line 181
  if (size <= (size_t )(512 * 1024)) {
#line 181
    return (19);
  } else {

  }
#line 182
  if (size <= (size_t )(1024 * 1024)) {
#line 182
    return (20);
  } else {

  }
#line 183
  if (size <= (size_t )((2 * 1024) * 1024)) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 203
  tmp = kmalloc_index(size);
#line 203
  index = tmp;
#line 205
  if (index == 0) {
#line 206
    return ((void *)0);
  } else {

  }
#line 208
  return (& kmalloc_caches[index]);
}
}
#line 219
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 222
extern void *kmem_cache_alloc_notrace(struct kmem_cache *s , gfp_t gfpflags ) ;
#line 231 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large)(size_t size ,
                                                                          gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = tmp;
#line 234
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc((unsigned long )((void *)0), ret, size, (1UL << 12) << order, flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 2UL * (1UL << 12)) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if (! (flags & 1U)) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if (! s) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 306 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 308
  tmp = kmalloc(size, flags | 32768U);
#line 308
  return (tmp);
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 23
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 357 "include/linux/tty.h"
extern void tty_kref_put(struct tty_struct *tty ) ;
#line 396
extern void tty_flip_buffer_push(struct tty_struct *tty ) ;
#line 400
extern speed_t tty_get_baud_rate(struct tty_struct *tty ) ;
#line 416
extern void tty_wakeup(struct tty_struct *tty ) ;
#line 448
extern struct tty_struct *tty_port_tty_get(struct tty_port *port ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct *tty , size_t size ) ;
#line 5
extern int tty_insert_flip_string(struct tty_struct *tty , unsigned char const   *chars ,
                                  size_t size ) ;
#line 199 "include/linux/moduleparam.h"
extern int param_set_bool(char const   *val , struct kernel_param *kp ) ;
#line 200
extern int param_get_bool(char *buffer , struct kernel_param *kp ) ;
#line 67 "include/linux/module.h"
int init_module(void) ;
#line 68
void cleanup_module(void) ;
#line 87
extern struct module __this_module ;
#line 347 "include/linux/sched.h"
extern void schedule(void) ;
#line 2208 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2210
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2210
  return (tmp);
}
}
#line 2234 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 2236
  tmp = test_tsk_thread_flag(p, 2);
#line 2236
  if (tmp) {
#line 2236
    tmp___0 = 1;
  } else {
#line 2236
    tmp___0 = 0;
  }
#line 2236
  tmp___1 = __builtin_expect(tmp___0, 0);
#line 2236
  return (tmp___1);
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 28
extern void unlock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 420 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 422
  tmp = kobject_name(& dev->kobj);
#line 422
  return (tmp);
}
}
#line 447 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 449
  return (dev->driver_data);
}
}
#line 452 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 454
  dev->driver_data = data;
#line 455
  return;
}
}
#line 553
extern char const   *dev_driver_string(struct device  const  *dev ) ;
#line 922 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 924 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 926
  tmp = usb_register_driver(driver, & __this_module, "mos7840");
#line 926
  return (tmp);
}
}
#line 928
extern void usb_deregister(struct usb_driver * ) ;
#line 1210 "include/linux/usb.h"
__inline static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 


  {
#line 1219
  urb->dev = dev;
#line 1220
  urb->pipe = pipe;
#line 1221
  urb->setup_packet = setup_packet;
#line 1222
  urb->transfer_buffer = transfer_buffer;
#line 1223
  urb->transfer_buffer_length = buffer_length;
#line 1224
  urb->complete = complete_fn;
#line 1225
  urb->context = context;
#line 1226
  return;
}
}
#line 1241 "include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
#line 1249
  urb->dev = dev;
#line 1250
  urb->pipe = pipe;
#line 1251
  urb->transfer_buffer = transfer_buffer;
#line 1252
  urb->transfer_buffer_length = buffer_length;
#line 1253
  urb->complete = complete_fn;
#line 1254
  urb->context = context;
#line 1255
  return;
}
}
#line 1275 "include/linux/usb.h"
__inline static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 


  {
#line 1284
  urb->dev = dev;
#line 1285
  urb->pipe = pipe;
#line 1286
  urb->transfer_buffer = transfer_buffer;
#line 1287
  urb->transfer_buffer_length = buffer_length;
#line 1288
  urb->complete = complete_fn;
#line 1289
  urb->context = context;
#line 1290
  if ((unsigned int )dev->speed == (unsigned int )USB_SPEED_HIGH) {
#line 1291
    urb->interval = 1 << (interval - 1);
  } else {
#line 1293
    urb->interval = interval;
  }
#line 1294
  urb->start_frame = -1;
#line 1295
  return;
}
}
#line 1298
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1299
void usb_free_urb(struct urb *urb ) ;
#line 1302
extern int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
#line 1304
extern void usb_kill_urb(struct urb *urb ) ;
#line 1368
extern int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request ,
                           __u8 requesttype , __u16 value , __u16 index , void *data ,
                           __u16 size , int timeout ) ;
#line 1386
extern int usb_clear_halt(struct usb_device *dev , int pipe ) ;
#line 1494 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1497
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 117 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 119
  tmp = dev_get_drvdata(& port->dev);
#line 119
  return (tmp);
}
}
#line 122 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 125
  dev_set_drvdata(& port->dev, data);
#line 126
  return;
}
}
#line 273
extern int usb_serial_register(struct usb_serial_driver *driver ) ;
#line 274
extern void usb_serial_deregister(struct usb_serial_driver *driver ) ;
#line 277
extern int usb_serial_probe(struct usb_interface *iface , struct usb_device_id  const  *id ) ;
#line 279
extern void usb_serial_disconnect(struct usb_interface *iface ) ;
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_port_id_table[5]  = {      {1 | 2, 38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 1367, 8209, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_id_table_combined[5]  __attribute__((__section__(".devinit.data")))  = {      {1 | 2,
      38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      1367, 8209, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 192
extern struct usb_device_id  const  __mod_usb_device_table  __attribute__((__unused__,
__alias__("moschip_id_table_combined"))) ;
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int debug  ;
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 240
  dev = (port->serial)->dev;
#line 241
  val = (int )val & 255;
#line 242
  while (1) {
#line 242
    if (debug) {
#line 242
      printk("<7>%s: mos7840_set_reg_sync offset is %x, value %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             reg, val);
    } else {

    }
#line 242
    break;
  }
#line 244
  tmp = __create_pipe(dev, 0);
#line 244
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 244
  return (tmp___0);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  unsigned int tmp ;

  {
#line 258
  dev = (port->serial)->dev;
#line 259
  ret = 0;
#line 261
  tmp = __create_pipe(dev, 0);
#line 261
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, 0,
                        reg, val, 1, 250 * 5);
#line 264
  while (1) {
#line 264
    if (debug) {
#line 264
      printk("<7>%s: mos7840_get_reg_sync offset is %x, return val %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             reg, *val);
    } else {

    }
#line 264
    break;
  }
#line 265
  *val = (int )*val & 255;
#line 266
  return (ret);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 279
  dev = (port->serial)->dev;
#line 280
  val = (int )val & 255;
#line 283
  if ((int )(port->serial)->num_ports == 4) {
#line 284
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 286
    while (1) {
#line 286
      if (debug) {
#line 286
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 286
      break;
    }
  } else
#line 288
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 289
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 291
    while (1) {
#line 291
      if (debug) {
#line 291
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 291
      break;
    }
  } else {
#line 294
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8);
#line 297
    while (1) {
#line 297
      if (debug) {
#line 297
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 297
      break;
    }
  }
#line 301
  tmp = __create_pipe(dev, 0);
#line 301
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 301
  return (tmp___0);
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  unsigned int tmp ;

  {
#line 315
  dev = (port->serial)->dev;
#line 316
  ret = 0;
#line 322
  if ((int )(port->serial)->num_ports == 4) {
#line 323
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 326
    while (1) {
#line 326
      if (debug) {
#line 326
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 326
      break;
    }
  } else
#line 328
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 329
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 331
    while (1) {
#line 331
      if (debug) {
#line 331
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 331
      break;
    }
  } else {
#line 334
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8;
#line 336
    while (1) {
#line 336
      if (debug) {
#line 336
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 336
      break;
    }
  }
#line 340
  tmp = __create_pipe(dev, 0);
#line 340
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, Wval,
                        reg, val, 1, 250 * 5);
#line 343
  *val = (int )*val & 255;
#line 344
  return (ret);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_dump_serial_port(struct moschip_port *mos7840_port ) 
{ 


  {
#line 350
  while (1) {
#line 350
    if (debug) {
#line 350
      printk("<7>%s: ***************************************\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 350
    break;
  }
#line 351
  while (1) {
#line 351
    if (debug) {
#line 351
      printk("<7>%s: SpRegOffset is %2x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->SpRegOffset);
    } else {

    }
#line 351
    break;
  }
#line 352
  while (1) {
#line 352
    if (debug) {
#line 352
      printk("<7>%s: ControlRegOffset is %2x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->ControlRegOffset);
    } else {

    }
#line 352
    break;
  }
#line 353
  while (1) {
#line 353
    if (debug) {
#line 353
      printk("<7>%s: DCRRegOffset is %2x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->DcrRegOffset);
    } else {

    }
#line 353
    break;
  }
#line 354
  while (1) {
#line 354
    if (debug) {
#line 354
      printk("<7>%s: ***************************************\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 354
    break;
  }
#line 356
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
__inline static void mos7840_set_port_private(struct usb_serial_port *port , struct moschip_port *data ) 
{ 


  {
#line 368
  usb_set_serial_port_data(port, (void *)data);
#line 369
  return;
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
__inline static struct moschip_port *mos7840_get_port_private(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 375
  tmp = usb_get_serial_port_data(port);
#line 375
  return ((struct moschip_port *)tmp);
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;

  {
#line 382
  mos7840_port = port;
#line 383
  icount = & mos7840_port->icount;
#line 384
  if ((int )new_msr & (((16 | 32) | 64) | 128)) {
#line 387
    icount = & mos7840_port->icount;
#line 390
    if ((int )new_msr & 16) {
#line 391
      icount->cts = icount->cts + (__u32 )1;
#line 392
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 394
    if ((int )new_msr & 32) {
#line 395
      icount->dsr = icount->dsr + (__u32 )1;
#line 396
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 398
    if ((int )new_msr & 128) {
#line 399
      icount->dcd = icount->dcd + (__u32 )1;
#line 400
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 402
    if ((int )new_msr & 64) {
#line 403
      icount->rng = icount->rng + (__u32 )1;
#line 404
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 407
  return;
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;

  {
#line 413
  while (1) {
#line 413
    if (debug) {
#line 413
      printk("<7>%s: %s - %02x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_handle_new_lsr", new_lsr);
    } else {

    }
#line 413
    break;
  }
#line 415
  if ((int )new_lsr & 16) {
#line 421
    new_lsr = (int )new_lsr & (int )((__u8 )(2 | 16));
  } else {

  }
#line 425
  icount = & port->icount;
#line 426
  if ((int )new_lsr & 16) {
#line 427
    icount->brk = icount->brk + (__u32 )1;
#line 428
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 430
  if ((int )new_lsr & 2) {
#line 431
    icount->overrun = icount->overrun + (__u32 )1;
#line 432
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 434
  if ((int )new_lsr & 4) {
#line 435
    icount->parity = icount->parity + (__u32 )1;
#line 436
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 438
  if ((int )new_lsr & 8) {
#line 439
    icount->frame = icount->frame + (__u32 )1;
#line 440
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 442
  return;
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  __u8 regval ;
  int result ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 455
  regval = 0;
#line 456
  result = 0;
#line 457
  status = urb->status;
#line 459
  mos7840_port = urb->context;
#line 461
  switch (status) {
  case 0: 
#line 464
  break;
  case -108: 
  case -2: 
  case -104: 
#line 469
  while (1) {
#line 469
    if (debug) {
#line 469
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 469
    break;
  }
#line 471
  return;
  default: 
#line 473
  while (1) {
#line 473
    if (debug) {
#line 473
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 473
    break;
  }
#line 475
  goto exit;
  }
#line 478
  while (1) {
#line 478
    if (debug) {
#line 478
      printk("<7>%s: %s urb buffer size is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", urb->actual_length);
    } else {

    }
#line 478
    break;
  }
#line 479
  while (1) {
#line 479
    if (debug) {
#line 479
      printk("<7>%s: %s mos7840_port->MsrLsr is %d port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
    } else {

    }
#line 479
    break;
  }
#line 481
  data = urb->transfer_buffer;
#line 482
  regval = *(data + 0);
#line 483
  while (1) {
#line 483
    if (debug) {
#line 483
      printk("<7>%s: %s data is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", regval);
    } else {

    }
#line 483
    break;
  }
#line 484
  if (mos7840_port->MsrLsr == 0) {
#line 485
    mos7840_handle_new_msr(mos7840_port, regval);
  } else
#line 486
  if (mos7840_port->MsrLsr == 1) {
#line 487
    mos7840_handle_new_lsr(mos7840_port, regval);
  } else {

  }
  exit: 
#line 490
  _spin_lock(& mos7840_port->pool_lock);
#line 491
  if (! mos7840_port->zombie) {
#line 492
    result = usb_submit_urb(mos7840_port->int_urb, 32U);
  } else {

  }
#line 493
  _spin_unlock(& mos7840_port->pool_lock);
#line 494
  if (result) {
#line 495
    tmp = dev_name(& (urb->dev)->dev);
#line 495
    tmp___0 = dev_driver_string(& (urb->dev)->dev);
#line 495
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_control_callback",
           result);
  } else {

  }
#line 499
  return;
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 504
  dev = ((mcs->port)->serial)->dev;
#line 505
  dr = mcs->dr;
#line 506
  buffer = mcs->ctrl_buf;
#line 509
  dr->bRequestType = 192;
#line 510
  dr->bRequest = 13;
#line 511
  dr->wValue = Wval;
#line 512
  dr->wIndex = reg;
#line 513
  dr->wLength = (__u16 )2;
#line 515
  tmp = __create_pipe(dev, 0);
#line 515
  usb_fill_control_urb(mcs->control_urb, dev, ((unsigned int )(2 << 30) | tmp) | 128U,
                       (unsigned char *)dr, buffer, 2, & mos7840_control_callback,
                       mcs);
#line 518
  (mcs->control_urb)->transfer_buffer_length = 2;
#line 519
  ret = usb_submit_urb(mcs->control_urb, 32U);
#line 520
  return (ret);
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 538
  rv = 0;
#line 539
  wreg = 0;
#line 540
  status = urb->status;
#line 542
  while (1) {
#line 542
    if (debug) {
#line 542
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " : Entering");
    } else {

    }
#line 542
    break;
  }
#line 544
  switch (status) {
  case 0: 
#line 547
  break;
  case -108: 
  case -2: 
  case -104: 
#line 552
  while (1) {
#line 552
    if (debug) {
#line 552
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 552
    break;
  }
#line 554
  return;
  default: 
#line 556
  while (1) {
#line 556
    if (debug) {
#line 556
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 556
    break;
  }
#line 558
  goto exit;
  }
#line 561
  length = urb->actual_length;
#line 562
  data = urb->transfer_buffer;
#line 564
  serial = urb->context;
#line 573
  if (length && length > 5) {
#line 574
    while (1) {
#line 574
      if (debug) {
#line 574
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Wrong data !!!");
      } else {

      }
#line 574
      break;
    }
#line 575
    return;
  } else {

  }
#line 578
  sp[0] = *(data + 0);
#line 579
  sp[1] = *(data + 1);
#line 580
  sp[2] = *(data + 2);
#line 581
  sp[3] = *(data + 3);
#line 582
  st = *(data + 4);
#line 584
  i = 0;
#line 584
  while (1) {
#line 584
    if (i < (int )serial->num_ports) {

    } else {
#line 584
      break;
    }
#line 585
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 586
    wval = (((int )((__u16 )(serial->port[i])->number) - (int )((__u16 )serial->minor)) + 1) << 8;
#line 589
    if (mos7840_port->open) {
#line 590
      if ((int )sp[i] & 1) {
#line 591
        while (1) {
#line 591
          if (debug) {
#line 591
            printk("<7>%s: SP%d No Interrupt !!!\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 591
          break;
        }
      } else {
#line 593
        switch ((int )sp[i] & 15) {
        case 6: 
#line 595
        while (1) {
#line 595
          if (debug) {
#line 595
            printk("<7>%s: Serial Port %d: Receiver status error or \n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 595
          break;
        }
#line 596
        while (1) {
#line 596
          if (debug) {
#line 596
            printk("<7>%s: address bit detected in 9-bit mode\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
          } else {

          }
#line 596
          break;
        }
#line 597
        mos7840_port->MsrLsr = 1;
#line 598
        wreg = (__u16 )5;
#line 599
        break;
        case 0: 
#line 601
        while (1) {
#line 601
          if (debug) {
#line 601
            printk("<7>%s: Serial Port %d: Modem status change\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 601
          break;
        }
#line 602
        mos7840_port->MsrLsr = 0;
#line 603
        wreg = (__u16 )6;
#line 604
        break;
        }
#line 606
        _spin_lock(& mos7840_port->pool_lock);
#line 607
        if (! mos7840_port->zombie) {
#line 608
          rv = mos7840_get_reg(mos7840_port, wval, wreg, & Data);
        } else {
#line 610
          _spin_unlock(& mos7840_port->pool_lock);
#line 611
          return;
        }
#line 613
        _spin_unlock(& mos7840_port->pool_lock);
      }
    } else {

    }
#line 584
    i = i + 1;
  }
#line 617
  if (! (rv < 0)) {
#line 619
    return;
  } else {

  }
  exit: 
#line 621
  result = usb_submit_urb(urb, 32U);
#line 622
  if (result) {
#line 623
    tmp = dev_name(& (urb->dev)->dev);
#line 623
    tmp___0 = dev_driver_string(& (urb->dev)->dev);
#line 623
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_interrupt_callback",
           result);
  } else {

  }
#line 627
  return;
}
}
#line 629 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 


  {
#line 632
  if (! port) {
#line 633
    while (1) {
#line 633
      if (debug) {
#line 633
        printk("<7>%s: %s - port == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 633
      break;
    }
#line 634
    return (-1);
  } else {

  }
#line 636
  if (! port->serial) {
#line 637
    while (1) {
#line 637
      if (debug) {
#line 637
        printk("<7>%s: %s - port->serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 637
      break;
    }
#line 638
    return (-1);
  } else {

  }
#line 641
  return (0);
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 


  {
#line 648
  if (! serial) {
#line 649
    while (1) {
#line 649
      if (debug) {
#line 649
        printk("<7>%s: %s - serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 649
      break;
    }
#line 650
    return (-1);
  } else {

  }
#line 652
  if (! serial->type) {
#line 653
    while (1) {
#line 653
      if (debug) {
#line 653
        printk("<7>%s: %s - serial->type == NULL!\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 653
      break;
    }
#line 654
    return (-1);
  } else {

  }
#line 657
  return (0);
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 664
  if (! port) {
#line 669
    return ((void *)0);
  } else {
#line 664
    tmp = mos7840_port_paranoia_check(port, function);
#line 664
    if (tmp) {
#line 669
      return ((void *)0);
    } else {
#line 664
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 664
      if (tmp___0) {
#line 669
        return ((void *)0);
      } else {

      }
    }
  }
#line 672
  return (port->serial);
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int tmp ;

  {
#line 689
  status = urb->status;
#line 691
  mos7840_port = urb->context;
#line 692
  if (! mos7840_port) {
#line 693
    while (1) {
#line 693
      if (debug) {
#line 693
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "NULL mos7840_port pointer");
      } else {

      }
#line 693
      break;
    }
#line 694
    mos7840_port->read_urb_busy = false;
#line 695
    return;
  } else {

  }
#line 698
  if (status) {
#line 699
    while (1) {
#line 699
      if (debug) {
#line 699
        printk("<7>%s: nonzero read bulk status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 699
      break;
    }
#line 700
    mos7840_port->read_urb_busy = false;
#line 701
    return;
  } else {

  }
#line 704
  port = mos7840_port->port;
#line 705
  tmp = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 705
  if (tmp) {
#line 706
    while (1) {
#line 706
      if (debug) {
#line 706
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 706
      break;
    }
#line 707
    mos7840_port->read_urb_busy = false;
#line 708
    return;
  } else {

  }
#line 711
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 712
  if (! serial) {
#line 713
    while (1) {
#line 713
      if (debug) {
#line 713
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Bad serial pointer");
      } else {

      }
#line 713
      break;
    }
#line 714
    mos7840_port->read_urb_busy = false;
#line 715
    return;
  } else {

  }
#line 718
  while (1) {
#line 718
    if (debug) {
#line 718
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering... ");
    } else {

    }
#line 718
    break;
  }
#line 720
  data = urb->transfer_buffer;
#line 722
  while (1) {
#line 722
    if (debug) {
#line 722
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ...........");
    } else {

    }
#line 722
    break;
  }
#line 724
  if (urb->actual_length) {
#line 725
    tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 726
    if (tty) {
#line 727
      tty_buffer_request_room(tty, urb->actual_length);
#line 728
      tty_insert_flip_string(tty, data, urb->actual_length);
#line 729
      while (1) {
#line 729
        if (debug) {
#line 729
          printk("<7>%s:  %s \n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 data);
        } else {

        }
#line 729
        break;
      }
#line 730
      tty_flip_buffer_push(tty);
#line 731
      tty_kref_put(tty);
    } else {

    }
#line 733
    mos7840_port->icount.rx = mos7840_port->icount.rx + urb->actual_length;
#line 734
    __asm__  volatile   ("": : : "memory");
#line 735
    while (1) {
#line 735
      if (debug) {
#line 735
        printk("<7>%s: mos7840_port->icount.rx is %d:\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               mos7840_port->icount.rx);
      } else {

      }
#line 735
      break;
    }
  } else {

  }
#line 739
  if (! mos7840_port->read_urb) {
#line 740
    while (1) {
#line 740
      if (debug) {
#line 740
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!");
      } else {

      }
#line 740
      break;
    }
#line 741
    mos7840_port->read_urb_busy = false;
#line 742
    return;
  } else {

  }
#line 746
  (mos7840_port->read_urb)->dev = serial->dev;
#line 748
  mos7840_port->read_urb_busy = true;
#line 749
  retval = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 751
  if (retval) {
#line 752
    while (1) {
#line 752
      if (debug) {
#line 752
        printk("<7>%s: usb_submit_urb(read bulk) failed, retval = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               retval);
      } else {

      }
#line 752
      break;
    }
#line 753
    mos7840_port->read_urb_busy = false;
  } else {

  }
#line 755
  return;
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  int tmp ;

  {
#line 767
  status = urb->status;
#line 770
  mos7840_port = urb->context;
#line 771
  _spin_lock(& mos7840_port->pool_lock);
#line 772
  i = 0;
#line 772
  while (1) {
#line 772
    if (i < 16) {

    } else {
#line 772
      break;
    }
#line 773
    if ((unsigned long )urb == (unsigned long )mos7840_port->write_urb_pool[i]) {
#line 774
      mos7840_port->busy[i] = 0;
#line 775
      break;
    } else {

    }
#line 772
    i = i + 1;
  }
#line 778
  _spin_unlock(& mos7840_port->pool_lock);
#line 780
  if (status) {
#line 781
    while (1) {
#line 781
      if (debug) {
#line 781
        printk("<7>%s: nonzero write bulk status received:%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 781
      break;
    }
#line 782
    return;
  } else {

  }
#line 785
  tmp = mos7840_port_paranoia_check(mos7840_port->port, "mos7840_bulk_out_data_callback");
#line 785
  if (tmp) {
#line 786
    while (1) {
#line 786
      if (debug) {
#line 786
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 786
      break;
    }
#line 787
    return;
  } else {

  }
#line 790
  while (1) {
#line 790
    if (debug) {
#line 790
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering .........");
    } else {

    }
#line 790
    break;
  }
#line 792
  tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 793
  if (tty && mos7840_port->open) {
#line 794
    tty_wakeup(tty);
  } else {

  }
#line 795
  tty_kref_put(tty);
#line 797
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  unsigned int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 834
  while (1) {
#line 834
    if (debug) {
#line 834
      printk("<7>%s: %s enter\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_open");
    } else {

    }
#line 834
    break;
  }
#line 836
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 836
  if (tmp) {
#line 837
    while (1) {
#line 837
      if (debug) {
#line 837
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 837
      break;
    }
#line 838
    return (-19);
  } else {

  }
#line 841
  serial = port->serial;
#line 843
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 843
  if (tmp___0) {
#line 844
    while (1) {
#line 844
      if (debug) {
#line 844
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed");
      } else {

      }
#line 844
      break;
    }
#line 845
    return (-19);
  } else {

  }
#line 848
  mos7840_port = mos7840_get_port_private(port);
#line 849
  port0 = mos7840_get_port_private(serial->port[0]);
#line 851
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 852
    return (-19);
  } else {

  }
#line 854
  usb_clear_halt(serial->dev, (port->write_urb)->pipe);
#line 855
  usb_clear_halt(serial->dev, (port->read_urb)->pipe);
#line 856
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 859
  j = 0;
#line 859
  while (1) {
#line 859
    if (j < 16) {

    } else {
#line 859
      break;
    }
#line 860
    urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 861
    mos7840_port->write_urb_pool[j] = urb;
#line 863
    if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 864
      tmp___1 = dev_name(& port->dev);
#line 864
      tmp___2 = dev_driver_string(& port->dev);
#line 864
      printk("<3>%s %s: No more urbs???\n", tmp___2, tmp___1);
#line 865
      goto __Cont;
    } else {

    }
#line 868
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 870
    if (! urb->transfer_buffer) {
#line 871
      usb_free_urb(urb);
#line 872
      mos7840_port->write_urb_pool[j] = (void *)0;
#line 873
      tmp___3 = dev_name(& port->dev);
#line 873
      tmp___4 = dev_driver_string(& port->dev);
#line 873
      printk("<3>%s %s: %s-out of memory for urb buffers.\n", tmp___4, tmp___3, "mos7840_open");
#line 876
      goto __Cont;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 859
    j = j + 1;
  }
#line 894
  Data = 0;
#line 895
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 896
  if (status < 0) {
#line 897
    while (1) {
#line 897
      if (debug) {
#line 897
        printk("<7>%s: Reading Spreg failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 897
      break;
    }
#line 898
    return (-1);
  } else {

  }
#line 900
  Data = (int )Data | 128;
#line 901
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 902
  if (status < 0) {
#line 903
    while (1) {
#line 903
      if (debug) {
#line 903
        printk("<7>%s: writing Spreg failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 903
      break;
    }
#line 904
    return (-1);
  } else {

  }
#line 907
  Data = (int )Data & ~ 128;
#line 908
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 909
  if (status < 0) {
#line 910
    while (1) {
#line 910
      if (debug) {
#line 910
        printk("<7>%s: writing Spreg failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 910
      break;
    }
#line 911
    return (-1);
  } else {

  }
#line 915
  Data = 0;
#line 916
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 918
  if (status < 0) {
#line 919
    while (1) {
#line 919
      if (debug) {
#line 919
        printk("<7>%s: Reading Controlreg failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 919
      break;
    }
#line 920
    return (-1);
  } else {

  }
#line 922
  Data = (int )Data | 8;
#line 923
  Data = (int )Data | 32;
#line 924
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 926
  if (status < 0) {
#line 927
    while (1) {
#line 927
      if (debug) {
#line 927
        printk("<7>%s: writing Controlreg failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 927
      break;
    }
#line 928
    return (-1);
  } else {

  }
#line 935
  Data = 0;
#line 936
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 937
  if (status < 0) {
#line 938
    while (1) {
#line 938
      if (debug) {
#line 938
        printk("<7>%s: disabling interrupts failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 938
      break;
    }
#line 939
    return (-1);
  } else {

  }
#line 942
  Data = 0;
#line 943
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 944
  if (status < 0) {
#line 945
    while (1) {
#line 945
      if (debug) {
#line 945
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 945
      break;
    }
#line 946
    return (-1);
  } else {

  }
#line 949
  Data = 207;
#line 950
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 951
  if (status < 0) {
#line 952
    while (1) {
#line 952
      if (debug) {
#line 952
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 952
      break;
    }
#line 953
    return (-1);
  } else {

  }
#line 956
  Data = 3;
#line 957
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 958
  mos7840_port->shadowLCR = Data;
#line 960
  Data = 11;
#line 961
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 962
  mos7840_port->shadowMCR = Data;
#line 964
  Data = 0;
#line 965
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 966
  mos7840_port->shadowLCR = Data;
#line 968
  Data = (int )Data | (int )((__u16 )128);
#line 969
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 971
  Data = 12;
#line 972
  status = mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 974
  Data = 0;
#line 975
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 977
  Data = 0;
#line 978
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 980
  Data = (int )Data & ~ ((int )((__u16 )128));
#line 981
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 982
  mos7840_port->shadowLCR = Data;
#line 985
  Data = 0;
#line 986
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 988
  Data = (int )Data | 12;
#line 989
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 991
  Data = (int )Data & ~ 12;
#line 992
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 994
  Data = 12;
#line 995
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 998
  Data = 0;
#line 999
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 1001
  Data = (int )Data & ~ 32;
#line 1002
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 1006
  Data = 0;
#line 1007
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 1009
  Data = (int )Data | 16;
#line 1010
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 1016
  if ((int )port0->open_ports == 1) {
#line 1017
    if ((unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((void *)0)) {
#line 1019
      tmp___5 = __create_pipe(serial->dev, (serial->port[0])->interrupt_in_endpointAddress);
#line 1019
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, ((unsigned int )(1 << 30) | tmp___5) | 128U,
                       (serial->port[0])->interrupt_in_buffer, ((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1033
      response = usb_submit_urb((serial->port[0])->interrupt_in_urb, (16U | 64U) | 128U);
#line 1036
      if (response) {
#line 1037
        tmp___6 = dev_name(& port->dev);
#line 1037
        tmp___7 = dev_driver_string(& port->dev);
#line 1037
        printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___7, tmp___6,
               "mos7840_open", response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1049
  while (1) {
#line 1049
    if (debug) {
#line 1049
      printk("<7>%s: port number is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1049
    break;
  }
#line 1050
  while (1) {
#line 1050
    if (debug) {
#line 1050
      printk("<7>%s: serial number is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             (port->serial)->minor);
    } else {

    }
#line 1050
    break;
  }
#line 1051
  while (1) {
#line 1051
    if (debug) {
#line 1051
      printk("<7>%s: Bulkin endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1051
    break;
  }
#line 1052
  while (1) {
#line 1052
    if (debug) {
#line 1052
      printk("<7>%s: BulkOut endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1052
    break;
  }
#line 1053
  while (1) {
#line 1053
    if (debug) {
#line 1053
      printk("<7>%s: Interrupt endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->interrupt_in_endpointAddress);
    } else {

    }
#line 1053
    break;
  }
#line 1054
  while (1) {
#line 1054
    if (debug) {
#line 1054
      printk("<7>%s: port\'s number in the device is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->port_num);
    } else {

    }
#line 1054
    break;
  }
#line 1055
  mos7840_port->read_urb = port->read_urb;
#line 1059
  tmp___8 = __create_pipe(serial->dev, port->bulk_in_endpointAddress);
#line 1059
  usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, ((unsigned int )(3 << 30) | tmp___8) | 128U,
                    port->bulk_in_buffer, (mos7840_port->read_urb)->transfer_buffer_length,
                    & mos7840_bulk_in_callback, mos7840_port);
#line 1067
  while (1) {
#line 1067
    if (debug) {
#line 1067
      printk("<7>%s: mos7840_open: bulkin endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1067
    break;
  }
#line 1069
  mos7840_port->read_urb_busy = true;
#line 1070
  response = usb_submit_urb(mos7840_port->read_urb, (16U | 64U) | 128U);
#line 1071
  if (response) {
#line 1072
    tmp___9 = dev_name(& port->dev);
#line 1072
    tmp___10 = dev_driver_string(& port->dev);
#line 1072
    printk("<3>%s %s: %s - Error %d submitting control urb\n", tmp___10, tmp___9,
           "mos7840_open", response);
#line 1074
    mos7840_port->read_urb_busy = false;
  } else {

  }
#line 1078
  init_waitqueue_head(& mos7840_port->wait_chase);
#line 1079
  init_waitqueue_head(& mos7840_port->delta_msr_wait);
#line 1082
  memset(& mos7840_port->icount, 0, sizeof(mos7840_port->icount));
#line 1086
  mos7840_port->shadowMCR = 8;
#line 1088
  mos7840_port->open = 1;
#line 1090
  mos7840_port->icount.tx = 0;
#line 1091
  mos7840_port->icount.rx = 0;
#line 1093
  while (1) {
#line 1093
    if (debug) {
#line 1093
      printk("<7>%s: usb_serial serial:%p       mos7840_port:%p\n      usb_serial_port port:%p\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             serial, mos7840_port, port);
    } else {

    }
#line 1093
    break;
  }
#line 1096
  while (1) {
#line 1096
    if (debug) {
#line 1096
      printk("<7>%s: %s leave\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_open");
    } else {

    }
#line 1096
    break;
  }
#line 1098
  return (0);
}
}
#line 1112 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int chars ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1114
  port = tty->driver_data;
#line 1116
  chars = 0;
#line 1120
  while (1) {
#line 1120
    if (debug) {
#line 1120
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_chars_in_buffer:entering ...........");
    } else {

    }
#line 1120
    break;
  }
#line 1122
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1122
  if (tmp) {
#line 1123
    while (1) {
#line 1123
      if (debug) {
#line 1123
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1123
      break;
    }
#line 1124
    return (0);
  } else {

  }
#line 1127
  mos7840_port = mos7840_get_port_private(port);
#line 1128
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1129
    while (1) {
#line 1129
      if (debug) {
#line 1129
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1129
      break;
    }
#line 1130
    return (0);
  } else {

  }
#line 1133
  while (1) {
#line 1133
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1133
    break;
  }
#line 1134
  i = 0;
#line 1134
  while (1) {
#line 1134
    if (i < 16) {

    } else {
#line 1134
      break;
    }
#line 1135
    if (mos7840_port->busy[i]) {
#line 1136
      chars = chars + 32;
    } else {

    }
#line 1134
    i = i + 1;
  }
#line 1137
  while (1) {
#line 1137
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1137
    break;
  }
#line 1138
  while (1) {
#line 1138
    if (debug) {
#line 1138
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_chars_in_buffer", chars);
    } else {

    }
#line 1138
    break;
  }
#line 1139
  return (chars);
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_close(struct usb_serial_port *port ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int tmp ;

  {
#line 1156
  while (1) {
#line 1156
    if (debug) {
#line 1156
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_close:entering...");
    } else {

    }
#line 1156
    break;
  }
#line 1158
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1158
  if (tmp) {
#line 1159
    while (1) {
#line 1159
      if (debug) {
#line 1159
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 1159
      break;
    }
#line 1160
    return;
  } else {

  }
#line 1163
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1164
  if (! serial) {
#line 1165
    while (1) {
#line 1165
      if (debug) {
#line 1165
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed");
      } else {

      }
#line 1165
      break;
    }
#line 1166
    return;
  } else {

  }
#line 1169
  mos7840_port = mos7840_get_port_private(port);
#line 1170
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1172
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 1173
    return;
  } else {

  }
#line 1175
  j = 0;
#line 1175
  while (1) {
#line 1175
    if (j < 16) {

    } else {
#line 1175
      break;
    }
#line 1176
    usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1175
    j = j + 1;
  }
#line 1179
  j = 0;
#line 1179
  while (1) {
#line 1179
    if (j < 16) {

    } else {
#line 1179
      break;
    }
#line 1180
    if (mos7840_port->write_urb_pool[j]) {
#line 1181
      if ((mos7840_port->write_urb_pool[j])->transfer_buffer) {
#line 1182
        kfree((mos7840_port->write_urb_pool[j])->transfer_buffer);
      } else {

      }
#line 1185
      usb_free_urb(mos7840_port->write_urb_pool[j]);
    } else {

    }
#line 1179
    j = j + 1;
  }
#line 1191
  if (serial->dev) {
#line 1192
    if (mos7840_port->write_urb) {
#line 1193
      while (1) {
#line 1193
        if (debug) {
#line 1193
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk write");
        } else {

        }
#line 1193
        break;
      }
#line 1194
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1196
    if (mos7840_port->read_urb) {
#line 1197
      while (1) {
#line 1197
        if (debug) {
#line 1197
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk read");
        } else {

        }
#line 1197
        break;
      }
#line 1198
      usb_kill_urb(mos7840_port->read_urb);
#line 1199
      mos7840_port->read_urb_busy = false;
    } else {

    }
#line 1201
    if (& mos7840_port->control_urb) {
#line 1202
      while (1) {
#line 1202
        if (debug) {
#line 1202
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown control read");
        } else {

        }
#line 1202
        break;
      }
    } else {

    }
  } else {

  }
#line 1208
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1209
  while (1) {
#line 1209
    if (debug) {
#line 1209
      printk("<7>%s: mos7840_num_open_ports in close%d:in port%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port0->open_ports, port->number);
    } else {

    }
#line 1209
    break;
  }
#line 1211
  if ((int )port0->open_ports == 0) {
#line 1212
    if ((serial->port[0])->interrupt_in_urb) {
#line 1213
      while (1) {
#line 1213
        if (debug) {
#line 1213
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "Shutdown interrupt_in_urb");
        } else {

        }
#line 1213
        break;
      }
#line 1214
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1218
  if (mos7840_port->write_urb) {
#line 1220
    if ((unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0)) {
#line 1221
      kfree((mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1222
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1225
  Data = 0;
#line 1226
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 1228
  Data = 0;
#line 1229
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1231
  mos7840_port->open = 0;
#line 1233
  while (1) {
#line 1233
    if (debug) {
#line 1233
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Leaving ............");
    } else {

    }
#line 1233
    break;
  }
#line 1234
  return;
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_block_until_chase_response(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1250
  timeout = 1 * 250;
#line 1251
  wait = 10;
#line 1254
  while (1) {
#line 1255
    count = mos7840_chars_in_buffer(tty);
#line 1258
    if (count <= 0) {
#line 1259
      return;
    } else {

    }
#line 1262
    interruptible_sleep_on_timeout(& mos7840_port->wait_chase, timeout);
#line 1265
    wait = wait - 1;
#line 1266
    if (wait == 0) {
#line 1267
      while (1) {
#line 1267
        if (debug) {
#line 1267
          printk("<7>%s: %s - TIMEOUT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_block_until_chase_response");
        } else {

        }
#line 1267
        break;
      }
#line 1268
      return;
    } else {
#line 1271
      wait = 10;
    }
  }
}
}
#line 1281 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_break(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1283
  port = tty->driver_data;
#line 1288
  while (1) {
#line 1288
    if (debug) {
#line 1288
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ...........");
    } else {

    }
#line 1288
    break;
  }
#line 1289
  while (1) {
#line 1289
    if (debug) {
#line 1289
      printk("<7>%s: mos7840_break: Start\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 1289
    break;
  }
#line 1291
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1291
  if (tmp) {
#line 1292
    while (1) {
#line 1292
      if (debug) {
#line 1292
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 1292
      break;
    }
#line 1293
    return;
  } else {

  }
#line 1296
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1297
  if (! serial) {
#line 1298
    while (1) {
#line 1298
      if (debug) {
#line 1298
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed");
      } else {

      }
#line 1298
      break;
    }
#line 1299
    return;
  } else {

  }
#line 1302
  mos7840_port = mos7840_get_port_private(port);
#line 1304
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1305
    return;
  } else {

  }
#line 1307
  if (serial->dev) {
#line 1309
    mos7840_block_until_chase_response(tty, mos7840_port);
  } else {

  }
#line 1311
  if (break_state == -1) {
#line 1312
    data = (int )mos7840_port->shadowLCR | 64;
  } else {
#line 1314
    data = (int )mos7840_port->shadowLCR & ~ 64;
  }
#line 1317
  mos7840_port->shadowLCR = data;
#line 1318
  while (1) {
#line 1318
    if (debug) {
#line 1318
      printk("<7>%s: mcs7840_break mos7840_port->shadowLCR is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 1318
    break;
  }
#line 1320
  mos7840_set_uart_reg(port, (__u16 )3, mos7840_port->shadowLCR);
#line 1323
  return;
}
}
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int room ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1336
  port = tty->driver_data;
#line 1338
  room = 0;
#line 1342
  while (1) {
#line 1342
    if (debug) {
#line 1342
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_write_room:entering ...........");
    } else {

    }
#line 1342
    break;
  }
#line 1344
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1344
  if (tmp) {
#line 1345
    while (1) {
#line 1345
      if (debug) {
#line 1345
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1345
      break;
    }
#line 1346
    while (1) {
#line 1346
      if (debug) {
#line 1346
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               " mos7840_write_room:leaving ...........");
      } else {

      }
#line 1346
      break;
    }
#line 1347
    return (-1);
  } else {

  }
#line 1350
  mos7840_port = mos7840_get_port_private(port);
#line 1351
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1352
    while (1) {
#line 1352
      if (debug) {
#line 1352
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1352
      break;
    }
#line 1353
    return (-1);
  } else {

  }
#line 1356
  while (1) {
#line 1356
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1356
    break;
  }
#line 1357
  i = 0;
#line 1357
  while (1) {
#line 1357
    if (i < 16) {

    } else {
#line 1357
      break;
    }
#line 1358
    if (! mos7840_port->busy[i]) {
#line 1359
      room = room + 32;
    } else {

    }
#line 1357
    i = i + 1;
  }
#line 1361
  while (1) {
#line 1361
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1361
    break;
  }
#line 1363
  room = room == 0 ? 0 : (room - 32) + 1;
#line 1364
  while (1) {
#line 1364
    if (debug) {
#line 1364
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_write_room", room);
    } else {

    }
#line 1364
    break;
  }
#line 1365
  return (room);
}
}
#line 1377 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _min1 ;
  int _min2 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1382
  bytes_sent = 0;
#line 1390
  current_position = data;
#line 1392
  while (1) {
#line 1392
    if (debug) {
#line 1392
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "entering ...........");
    } else {

    }
#line 1392
    break;
  }
#line 1427
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1427
  if (tmp) {
#line 1428
    while (1) {
#line 1428
      if (debug) {
#line 1428
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed");
      } else {

      }
#line 1428
      break;
    }
#line 1429
    return (-1);
  } else {

  }
#line 1432
  serial = port->serial;
#line 1433
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1433
  if (tmp___0) {
#line 1434
    while (1) {
#line 1434
      if (debug) {
#line 1434
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed");
      } else {

      }
#line 1434
      break;
    }
#line 1435
    return (-1);
  } else {

  }
#line 1438
  mos7840_port = mos7840_get_port_private(port);
#line 1439
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1440
    while (1) {
#line 1440
      if (debug) {
#line 1440
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_port is NULL");
      } else {

      }
#line 1440
      break;
    }
#line 1441
    return (-1);
  } else {

  }
#line 1445
  urb = (void *)0;
#line 1447
  while (1) {
#line 1447
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1447
    break;
  }
#line 1448
  i = 0;
#line 1448
  while (1) {
#line 1448
    if (i < 16) {

    } else {
#line 1448
      break;
    }
#line 1449
    if (! mos7840_port->busy[i]) {
#line 1450
      mos7840_port->busy[i] = 1;
#line 1451
      urb = mos7840_port->write_urb_pool[i];
#line 1452
      while (1) {
#line 1452
        if (debug) {
#line 1452
          printk("<7>%s: URB:%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 i);
        } else {

        }
#line 1452
        break;
      }
#line 1453
      break;
    } else {

    }
#line 1448
    i = i + 1;
  }
#line 1456
  while (1) {
#line 1456
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1456
    break;
  }
#line 1458
  if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 1459
    while (1) {
#line 1459
      if (debug) {
#line 1459
        printk("<7>%s: %s - no more free urbs\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_write");
      } else {

      }
#line 1459
      break;
    }
#line 1460
    goto exit;
  } else {

  }
#line 1463
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1464
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 1467
    if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1468
      tmp___1 = dev_name(& port->dev);
#line 1468
      tmp___2 = dev_driver_string(& port->dev);
#line 1468
      printk("<3>%s %s: %s no more kernel memory...\n", tmp___2, tmp___1, "mos7840_write");
#line 1470
      goto exit;
    } else {

    }
  } else {

  }
#line 1473
  _min1 = count;
#line 1473
  _min2 = 32;
#line 1473
  transfer_size = _min1 < _min2 ? _min1 : _min2;
#line 1475
  __len = transfer_size;
#line 1475
  __ret = __builtin_memcpy(urb->transfer_buffer, current_position, __len);
#line 1478
  tmp___3 = __create_pipe(serial->dev, port->bulk_out_endpointAddress);
#line 1478
  usb_fill_bulk_urb(urb, serial->dev, (unsigned int )(3 << 30) | tmp___3, urb->transfer_buffer,
                    transfer_size, & mos7840_bulk_out_data_callback, mos7840_port);
#line 1486
  data1 = urb->transfer_buffer;
#line 1487
  while (1) {
#line 1487
    if (debug) {
#line 1487
      printk("<7>%s: bulkout endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1487
    break;
  }
#line 1490
  status = usb_submit_urb(urb, 32U);
#line 1492
  if (status) {
#line 1493
    mos7840_port->busy[i] = 0;
#line 1494
    tmp___4 = dev_name(& port->dev);
#line 1494
    tmp___5 = dev_driver_string(& port->dev);
#line 1494
    printk("<3>%s %s: %s - usb_submit_urb(write bulk) failed with status = %d\n",
           tmp___5, tmp___4, "mos7840_write", status);
#line 1496
    bytes_sent = status;
#line 1497
    goto exit;
  } else {

  }
#line 1499
  bytes_sent = transfer_size;
#line 1500
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1501
  __asm__  volatile   ("": : : "memory");
#line 1502
  while (1) {
#line 1502
    if (debug) {
#line 1502
      printk("<7>%s: mos7840_port->icount.tx is %d:\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->icount.tx);
    } else {

    }
#line 1502
    break;
  }
  exit: 
#line 1504
  return (bytes_sent);
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_throttle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  int status ;
  int tmp ;
  unsigned char stop_char ;

  {
#line 1516
  port = tty->driver_data;
#line 1520
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1520
  if (tmp) {
#line 1521
    while (1) {
#line 1521
      if (debug) {
#line 1521
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1521
      break;
    }
#line 1522
    return;
  } else {

  }
#line 1525
  while (1) {
#line 1525
    if (debug) {
#line 1525
      printk("<7>%s: - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1525
    break;
  }
#line 1527
  mos7840_port = mos7840_get_port_private(port);
#line 1529
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1530
    return;
  } else {

  }
#line 1532
  if (! mos7840_port->open) {
#line 1533
    while (1) {
#line 1533
      if (debug) {
#line 1533
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "port not opened");
      } else {

      }
#line 1533
      break;
    }
#line 1534
    return;
  } else {

  }
#line 1537
  while (1) {
#line 1537
    if (debug) {
#line 1537
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ..........");
    } else {

    }
#line 1537
    break;
  }
#line 1540
  if ((tty->termios)->c_iflag & 4096U) {
#line 1541
    stop_char = (tty->termios)->c_cc[9];
#line 1542
    status = mos7840_write(tty, port, & stop_char, 1);
#line 1543
    if (status <= 0) {
#line 1544
      return;
    } else {

    }
  } else {

  }
#line 1547
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1548
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 2;
#line 1549
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1551
    if (status < 0) {
#line 1552
      return;
    } else {

    }
  } else {

  }
#line 1555
  return;
}
}
#line 1564 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_unthrottle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int tmp___0 ;
  unsigned char start_char ;

  {
#line 1566
  port = tty->driver_data;
#line 1568
  tmp = mos7840_get_port_private(port);
#line 1568
  mos7840_port = tmp;
#line 1570
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1570
  if (tmp___0) {
#line 1571
    while (1) {
#line 1571
      if (debug) {
#line 1571
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1571
      break;
    }
#line 1572
    return;
  } else {

  }
#line 1575
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1576
    return;
  } else {

  }
#line 1578
  if (! mos7840_port->open) {
#line 1579
    while (1) {
#line 1579
      if (debug) {
#line 1579
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_unthrottle");
      } else {

      }
#line 1579
      break;
    }
#line 1580
    return;
  } else {

  }
#line 1583
  while (1) {
#line 1583
    if (debug) {
#line 1583
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ..........");
    } else {

    }
#line 1583
    break;
  }
#line 1586
  if ((tty->termios)->c_iflag & 4096U) {
#line 1587
    start_char = (tty->termios)->c_cc[8];
#line 1588
    status = mos7840_write(tty, port, & start_char, 1);
#line 1589
    if (status <= 0) {
#line 1590
      return;
    } else {

    }
  } else {

  }
#line 1594
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1595
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 2;
#line 1596
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1598
    if (status < 0) {
#line 1599
      return;
    } else {

    }
  } else {

  }
#line 1601
  return;
}
}
#line 1603 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;

  {
#line 1605
  port = tty->driver_data;
#line 1611
  mos7840_port = mos7840_get_port_private(port);
#line 1613
  while (1) {
#line 1613
    if (debug) {
#line 1613
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", port->number);
    } else {

    }
#line 1613
    break;
  }
#line 1615
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1616
    return (-19);
  } else {

  }
#line 1618
  status = mos7840_get_uart_reg(port, (__u16 )6, & msr);
#line 1619
  status = mos7840_get_uart_reg(port, (__u16 )4, & mcr);
#line 1620
  result = (((((((int )mcr & 1 ? 2 : 0) | ((int )mcr & 2 ? 4 : 0)) | ((int )mcr & 16 ? 32768 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 1628
  while (1) {
#line 1628
    if (debug) {
#line 1628
      printk("<7>%s: %s - 0x%04X\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", result);
    } else {

    }
#line 1628
    break;
  }
#line 1630
  return (result);
}
}
#line 1633 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  int status ;

  {
#line 1636
  port = tty->driver_data;
#line 1641
  while (1) {
#line 1641
    if (debug) {
#line 1641
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmset", port->number);
    } else {

    }
#line 1641
    break;
  }
#line 1643
  mos7840_port = mos7840_get_port_private(port);
#line 1645
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1646
    return (-19);
  } else {

  }
#line 1649
  mcr = mos7840_port->shadowMCR;
#line 1650
  if (clear & 4U) {
#line 1651
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 1652
  if (clear & 2U) {
#line 1653
    mcr = mcr & (unsigned int )(~ 1);
  } else {

  }
#line 1654
  if (clear & 32768U) {
#line 1655
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 1657
  if (set & 4U) {
#line 1658
    mcr = mcr | 2U;
  } else {

  }
#line 1659
  if (set & 2U) {
#line 1660
    mcr = mcr | 1U;
  } else {

  }
#line 1661
  if (set & 32768U) {
#line 1662
    mcr = mcr | 16U;
  } else {

  }
#line 1664
  mos7840_port->shadowMCR = mcr;
#line 1666
  status = mos7840_set_uart_reg(port, (__u16 )4, mcr);
#line 1667
  if (status < 0) {
#line 1668
    while (1) {
#line 1668
      if (debug) {
#line 1668
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1668
      break;
    }
#line 1669
    return (status);
  } else {

  }
#line 1672
  return (0);
}
}
#line 1680 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_baud_rate_divisor(int baudRate , int *divisor , __u16 *clk_sel_val ) 
{ 


  {
#line 1684
  while (1) {
#line 1684
    if (debug) {
#line 1684
      printk("<7>%s: %s - %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_calc_baud_rate_divisor", baudRate);
    } else {

    }
#line 1684
    break;
  }
#line 1686
  if (baudRate <= 115200) {
#line 1687
    *divisor = 115200 / baudRate;
#line 1688
    *clk_sel_val = 0;
  } else {

  }
#line 1690
  if (baudRate > 115200 && baudRate <= 230400) {
#line 1691
    *divisor = 230400 / baudRate;
#line 1692
    *clk_sel_val = 16;
  } else
#line 1693
  if (baudRate > 230400 && baudRate <= 403200) {
#line 1694
    *divisor = 403200 / baudRate;
#line 1695
    *clk_sel_val = 32;
  } else
#line 1696
  if (baudRate > 403200 && baudRate <= 460800) {
#line 1697
    *divisor = 460800 / baudRate;
#line 1698
    *clk_sel_val = 48;
  } else
#line 1699
  if (baudRate > 460800 && baudRate <= 806400) {
#line 1700
    *divisor = 806400 / baudRate;
#line 1701
    *clk_sel_val = 64;
  } else
#line 1702
  if (baudRate > 806400 && baudRate <= 921600) {
#line 1703
    *divisor = 921600 / baudRate;
#line 1704
    *clk_sel_val = 80;
  } else
#line 1705
  if (baudRate > 921600 && baudRate <= 1572864) {
#line 1706
    *divisor = 1572864 / baudRate;
#line 1707
    *clk_sel_val = 96;
  } else
#line 1708
  if (baudRate > 1572864 && baudRate <= 3145728) {
#line 1709
    *divisor = 3145728 / baudRate;
#line 1710
    *clk_sel_val = 112;
  } else {

  }
#line 1712
  return (0);
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 1755
  divisor = 0;
#line 1762
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1763
    return (-1);
  } else {

  }
#line 1765
  port = mos7840_port->port;
#line 1766
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1766
  if (tmp) {
#line 1767
    while (1) {
#line 1767
      if (debug) {
#line 1767
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1767
      break;
    }
#line 1768
    return (-1);
  } else {

  }
#line 1771
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1771
  if (tmp___0) {
#line 1772
    while (1) {
#line 1772
      if (debug) {
#line 1772
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial");
      } else {

      }
#line 1772
      break;
    }
#line 1773
    return (-1);
  } else {

  }
#line 1776
  while (1) {
#line 1776
    if (debug) {
#line 1776
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ..........");
    } else {

    }
#line 1776
    break;
  }
#line 1778
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1780
  while (1) {
#line 1780
    if (debug) {
#line 1780
      printk("<7>%s: %s - port = %d, baud = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_send_cmd_write_baud_rate", (mos7840_port->port)->number, baudRate);
    } else {

    }
#line 1780
    break;
  }
#line 1813
  clk_sel_val = 0;
#line 1814
  Data = 0;
#line 1815
  status = mos7840_calc_baud_rate_divisor(baudRate, & divisor, & clk_sel_val);
#line 1817
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 1819
  if (status < 0) {
#line 1820
    while (1) {
#line 1820
      if (debug) {
#line 1820
        printk("<7>%s: reading spreg failed in set_serial_baud\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1820
      break;
    }
#line 1821
    return (-1);
  } else {

  }
#line 1823
  Data = ((int )Data & 143) | (int )clk_sel_val;
#line 1824
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 1826
  if (status < 0) {
#line 1827
    while (1) {
#line 1827
      if (debug) {
#line 1827
        printk("<7>%s: Writing spreg failed in set_serial_baud\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1827
      break;
    }
#line 1828
    return (-1);
  } else {

  }
#line 1832
  if (status) {
#line 1833
    tmp___1 = dev_name(& port->dev);
#line 1833
    tmp___2 = dev_driver_string(& port->dev);
#line 1833
    printk("<3>%s %s: %s - bad baud rate\n", tmp___2, tmp___1, "mos7840_send_cmd_write_baud_rate");
#line 1834
    return (status);
  } else {

  }
#line 1837
  Data = (int )mos7840_port->shadowLCR | (int )((__u16 )128);
#line 1838
  mos7840_port->shadowLCR = Data;
#line 1839
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1842
  Data = (unsigned char )(divisor & 255);
#line 1843
  while (1) {
#line 1843
    if (debug) {
#line 1843
      printk("<7>%s: set_serial_baud Value to write DLL is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1843
    break;
  }
#line 1844
  mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 1846
  Data = (unsigned char )((divisor & 65280) >> 8);
#line 1847
  while (1) {
#line 1847
    if (debug) {
#line 1847
      printk("<7>%s: set_serial_baud Value to write DLM is %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1847
    break;
  }
#line 1848
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1851
  Data = (int )mos7840_port->shadowLCR & ~ ((int )((__u16 )128));
#line 1852
  mos7840_port->shadowLCR = Data;
#line 1853
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1856
  return (status);
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_change_port_settings(struct tty_struct *tty , struct moschip_port *mos7840_port ,
                                         struct ktermios *old_termios ) 
{ 
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int tmp ;
  int tmp___0 ;
  speed_t tmp___1 ;

  {
#line 1879
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1880
    return;
  } else {

  }
#line 1882
  port = mos7840_port->port;
#line 1884
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1884
  if (tmp) {
#line 1885
    while (1) {
#line 1885
      if (debug) {
#line 1885
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 1885
      break;
    }
#line 1886
    return;
  } else {

  }
#line 1889
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1889
  if (tmp___0) {
#line 1890
    while (1) {
#line 1890
      if (debug) {
#line 1890
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial");
      } else {

      }
#line 1890
      break;
    }
#line 1891
    return;
  } else {

  }
#line 1894
  serial = port->serial;
#line 1896
  while (1) {
#line 1896
    if (debug) {
#line 1896
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", (mos7840_port->port)->number);
    } else {

    }
#line 1896
    break;
  }
#line 1898
  if (! mos7840_port->open) {
#line 1899
    while (1) {
#line 1899
      if (debug) {
#line 1899
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1899
      break;
    }
#line 1900
    return;
  } else {

  }
#line 1903
  while (1) {
#line 1903
    if (debug) {
#line 1903
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering ..........");
    } else {

    }
#line 1903
    break;
  }
#line 1905
  lData = 3;
#line 1906
  lStop = 0;
#line 1907
  lParity = 0;
#line 1909
  cflag = (tty->termios)->c_cflag;
#line 1910
  iflag = (tty->termios)->c_iflag;
#line 1913
  if (cflag & 48U) {
#line 1914
    switch (cflag & 48U) {
    case 0U: 
#line 1916
    lData = 0;
#line 1917
    break;
    case 16U: 
#line 1920
    lData = 1;
#line 1921
    break;
    case 32U: 
#line 1924
    lData = 2;
#line 1925
    break;
    default: 
#line 1928
    lData = 3;
#line 1929
    break;
    }
  } else {

  }
#line 1933
  if (cflag & 256U) {
#line 1934
    if (cflag & 512U) {
#line 1935
      lParity = 8;
#line 1936
      while (1) {
#line 1936
        if (debug) {
#line 1936
          printk("<7>%s: %s - parity = odd\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 1936
        break;
      }
    } else {
#line 1938
      lParity = 24;
#line 1939
      while (1) {
#line 1939
        if (debug) {
#line 1939
          printk("<7>%s: %s - parity = even\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 1939
        break;
      }
    }
  } else {
#line 1943
    while (1) {
#line 1943
      if (debug) {
#line 1943
        printk("<7>%s: %s - parity = none\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1943
      break;
    }
  }
#line 1946
  if (cflag & 1073741824U) {
#line 1947
    lParity = (int )lParity | 32;
  } else {

  }
#line 1950
  if (cflag & 64U) {
#line 1951
    lStop = 4;
#line 1952
    while (1) {
#line 1952
      if (debug) {
#line 1952
        printk("<7>%s: %s - stop bits = 2\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1952
      break;
    }
  } else {
#line 1954
    lStop = 0;
#line 1955
    while (1) {
#line 1955
      if (debug) {
#line 1955
        printk("<7>%s: %s - stop bits = 1\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1955
      break;
    }
  }
#line 1959
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR & ~ ((3 | 4) | 56);
#line 1961
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop);
#line 1963
  while (1) {
#line 1963
    if (debug) {
#line 1963
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is %x\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 1963
    break;
  }
#line 1966
  Data = 0;
#line 1967
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1969
  Data = 0;
#line 1970
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 1972
  Data = 207;
#line 1973
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 1976
  Data = mos7840_port->shadowLCR;
#line 1978
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1980
  Data = 11;
#line 1981
  mos7840_port->shadowMCR = Data;
#line 1982
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 1983
  Data = 11;
#line 1984
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 1988
  mos7840_port->shadowMCR = 8;
#line 1989
  if (cflag & 4111U) {
#line 1990
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | (1 | 2);
  } else {

  }
#line 1992
  if (cflag & 2147483648U) {
#line 1993
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 32;
  } else {
#line 1995
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 32;
  }
#line 1997
  Data = mos7840_port->shadowMCR;
#line 1998
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2001
  tmp___1 = tty_get_baud_rate(tty);
#line 2001
  baud = tmp___1;
#line 2003
  if (! baud) {
#line 2005
    while (1) {
#line 2005
      if (debug) {
#line 2005
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Picked default baud...");
      } else {

      }
#line 2005
      break;
    }
#line 2006
    baud = 9600;
  } else {

  }
#line 2009
  while (1) {
#line 2009
    if (debug) {
#line 2009
      printk("<7>%s: %s - baud rate = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", baud);
    } else {

    }
#line 2009
    break;
  }
#line 2010
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2013
  Data = 12;
#line 2014
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 2016
  if ((int )mos7840_port->read_urb_busy == false) {
#line 2017
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2018
    mos7840_port->read_urb_busy = true;
#line 2019
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2020
    if (status) {
#line 2021
      while (1) {
#line 2021
        if (debug) {
#line 2021
          printk("<7>%s: usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2021
        break;
      }
#line 2023
      mos7840_port->read_urb_busy = false;
    } else {

    }
  } else {

  }
#line 2026
  __wake_up(& mos7840_port->delta_msr_wait, 1 | 2, 1, (void *)0);
#line 2027
  mos7840_port->delta_msr_cond = 1;
#line 2028
  while (1) {
#line 2028
    if (debug) {
#line 2028
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is End %x\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 2028
    break;
  }
#line 2031
  return;
}
}
#line 2040 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  int tmp___0 ;

  {
#line 2048
  while (1) {
#line 2048
    if (debug) {
#line 2048
      printk("<7>%s: mos7840_set_termios: START\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 2048
    break;
  }
#line 2049
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2049
  if (tmp) {
#line 2050
    while (1) {
#line 2050
      if (debug) {
#line 2050
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 2050
      break;
    }
#line 2051
    return;
  } else {

  }
#line 2054
  serial = port->serial;
#line 2056
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2056
  if (tmp___0) {
#line 2057
    while (1) {
#line 2057
      if (debug) {
#line 2057
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial");
      } else {

      }
#line 2057
      break;
    }
#line 2058
    return;
  } else {

  }
#line 2061
  mos7840_port = mos7840_get_port_private(port);
#line 2063
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2064
    return;
  } else {

  }
#line 2066
  if (! mos7840_port->open) {
#line 2067
    while (1) {
#line 2067
      if (debug) {
#line 2067
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_set_termios");
      } else {

      }
#line 2067
      break;
    }
#line 2068
    return;
  } else {

  }
#line 2071
  while (1) {
#line 2071
    if (debug) {
#line 2071
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "setting termios - ");
    } else {

    }
#line 2071
    break;
  }
#line 2073
  cflag = (tty->termios)->c_cflag;
#line 2075
  while (1) {
#line 2075
    if (debug) {
#line 2075
      printk("<7>%s: %s - clfag %08x iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", (tty->termios)->c_cflag, (tty->termios)->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2075
    break;
  }
#line 2077
  while (1) {
#line 2077
    if (debug) {
#line 2077
      printk("<7>%s: %s - old clfag %08x old iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2077
    break;
  }
#line 2079
  while (1) {
#line 2079
    if (debug) {
#line 2079
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", port->number);
    } else {

    }
#line 2079
    break;
  }
#line 2083
  mos7840_change_port_settings(tty, mos7840_port, old_termios);
#line 2085
  if (! mos7840_port->read_urb) {
#line 2086
    while (1) {
#line 2086
      if (debug) {
#line 2086
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!!!");
      } else {

      }
#line 2086
      break;
    }
#line 2087
    return;
  } else {

  }
#line 2090
  if ((int )mos7840_port->read_urb_busy == false) {
#line 2091
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2092
    mos7840_port->read_urb_busy = true;
#line 2093
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2094
    if (status) {
#line 2095
      while (1) {
#line 2095
        if (debug) {
#line 2095
          printk("<7>%s: usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2095
        break;
      }
#line 2097
      mos7840_port->read_urb_busy = false;
    } else {

    }
  } else {

  }
#line 2100
  return;
}
}
#line 2114 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_lsr_info(struct tty_struct *tty , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  unsigned long tmp ;

  {
#line 2118
  result = 0;
#line 2120
  count = mos7840_chars_in_buffer(tty);
#line 2121
  if (count == 0) {
#line 2122
    while (1) {
#line 2122
      if (debug) {
#line 2122
        printk("<7>%s: %s -- Empty\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "mos7840_get_lsr_info");
      } else {

      }
#line 2122
      break;
    }
#line 2123
    result = 1;
  } else {

  }
#line 2126
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2126
  if (tmp) {
#line 2127
    return (-14);
  } else {

  }
#line 2128
  return (0);
}
}
#line 2138 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_modem_info(struct moschip_port *mos7840_port , unsigned int cmd ,
                                  unsigned int *value ) 
{ 
  unsigned int mcr ;
  unsigned int arg ;
  __u16 Data ;
  int status ;
  struct usb_serial_port *port ;
  int tmp ;
  unsigned long tmp___0 ;

  {
#line 2147
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2148
    return (-1);
  } else {

  }
#line 2150
  port = mos7840_port->port;
#line 2151
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_modem_info");
#line 2151
  if (tmp) {
#line 2152
    while (1) {
#line 2152
      if (debug) {
#line 2152
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 2152
      break;
    }
#line 2153
    return (-1);
  } else {

  }
#line 2156
  mcr = mos7840_port->shadowMCR;
#line 2158
  tmp___0 = copy_from_user(& arg, value, sizeof(int ));
#line 2158
  if (tmp___0) {
#line 2159
    return (-14);
  } else {

  }
#line 2161
  switch (cmd) {
  case 21526U: 
#line 2163
  if (arg & 4U) {
#line 2164
    mcr = mcr | 2U;
  } else {

  }
#line 2165
  if (arg & 2U) {
#line 2166
    mcr = mcr | 2U;
  } else {

  }
#line 2167
  if (arg & 32768U) {
#line 2168
    mcr = mcr | 16U;
  } else {

  }
#line 2169
  break;
  case 21527U: 
#line 2172
  if (arg & 4U) {
#line 2173
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2174
  if (arg & 2U) {
#line 2175
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2176
  if (arg & 32768U) {
#line 2177
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 2178
  break;
  case 21528U: 
#line 2183
  mcr = mcr & (unsigned int )(~ ((2 | 1) | 16));
#line 2184
  mcr = mcr | (unsigned int )(arg & 4U ? 2 : 0);
#line 2185
  mcr = mcr | (unsigned int )(arg & 2U ? 1 : 0);
#line 2186
  mcr = mcr | (unsigned int )(arg & 32768U ? 16 : 0);
#line 2187
  break;
  }
#line 2190
  lock_kernel();
#line 2191
  mos7840_port->shadowMCR = mcr;
#line 2193
  Data = mos7840_port->shadowMCR;
#line 2194
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2195
  unlock_kernel();
#line 2196
  if (status < 0) {
#line 2197
    while (1) {
#line 2197
      if (debug) {
#line 2197
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 2197
      break;
    }
#line 2198
    return (-1);
  } else {

  }
#line 2201
  return (0);
}
}
#line 2209 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_modem_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  unsigned int result ;
  __u16 msr ;
  unsigned int mcr ;
  unsigned long tmp ;

  {
#line 2212
  result = 0;
#line 2214
  mcr = mos7840_port->shadowMCR;
#line 2215
  mos7840_get_uart_reg(mos7840_port->port, (__u16 )6, & msr);
#line 2217
  result = (((((mcr & 1U ? 2 : 0) | (mcr & 2U ? 4 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 2224
  while (1) {
#line 2224
    if (debug) {
#line 2224
      printk("<7>%s: %s -- %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_get_modem_info", result);
    } else {

    }
#line 2224
    break;
  }
#line 2226
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2226
  if (tmp) {
#line 2227
    return (-14);
  } else {

  }
#line 2228
  return (0);
}
}
#line 2236 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  unsigned long tmp___0 ;

  {
#line 2241
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2242
    return (-1);
  } else {

  }
#line 2244
  if (! retinfo) {
#line 2245
    return (-14);
  } else {

  }
#line 2247
  memset(& tmp, 0, sizeof(tmp));
#line 2249
  tmp.type = 4;
#line 2250
  tmp.line = ((mos7840_port->port)->serial)->minor;
#line 2251
  tmp.port = (mos7840_port->port)->number;
#line 2252
  tmp.irq = 0;
#line 2253
  tmp.flags = (1U << 6) | (1U << 7);
#line 2254
  tmp.xmit_fifo_size = 16 * 32;
#line 2255
  tmp.baud_base = 9600;
#line 2256
  tmp.close_delay = 5 * 250;
#line 2257
  tmp.closing_wait = 30 * 250;
#line 2259
  tmp___0 = copy_to_user(retinfo, & tmp, sizeof(*retinfo));
#line 2259
  if (tmp___0) {
#line 2260
    return (-14);
  } else {

  }
#line 2261
  return (0);
}
}
#line 2269 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  struct serial_icounter_struct icount ;
  int mosret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  unsigned long tmp___8 ;

  {
#line 2272
  port = tty->driver_data;
#line 2273
  argp = (void *)arg;
#line 2279
  mosret = 0;
#line 2281
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2281
  if (tmp) {
#line 2282
    while (1) {
#line 2282
      if (debug) {
#line 2282
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid port");
      } else {

      }
#line 2282
      break;
    }
#line 2283
    return (-1);
  } else {

  }
#line 2286
  mos7840_port = mos7840_get_port_private(port);
#line 2288
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2289
    return (-1);
  } else {

  }
#line 2291
  while (1) {
#line 2291
    if (debug) {
#line 2291
      printk("<7>%s: %s - port %d, cmd = 0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, cmd);
    } else {

    }
#line 2291
    break;
  }
#line 2293
  switch (cmd) {
  case 21593U: 
#line 2297
  while (1) {
#line 2297
    if (debug) {
#line 2297
      printk("<7>%s: %s (%d) TIOCSERGETLSR\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2297
    break;
  }
#line 2298
  tmp___0 = mos7840_get_lsr_info(tty, argp);
#line 2298
  return (tmp___0);
#line 2299
  return (0);
  case 21528U: 
  case 21527U: 
  case 21526U: 
#line 2305
  while (1) {
#line 2305
    if (debug) {
#line 2305
      printk("<7>%s: %s (%d) TIOCMSET/TIOCMBIC/TIOCMSET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2305
    break;
  }
#line 2307
  mosret = mos7840_set_modem_info(mos7840_port, cmd, argp);
#line 2309
  return (mosret);
  case 21525U: 
#line 2312
  while (1) {
#line 2312
    if (debug) {
#line 2312
      printk("<7>%s: %s (%d) TIOCMGET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2312
    break;
  }
#line 2313
  tmp___1 = mos7840_get_modem_info(mos7840_port, argp);
#line 2313
  return (tmp___1);
  case 21534U: 
#line 2316
  while (1) {
#line 2316
    if (debug) {
#line 2316
      printk("<7>%s: %s (%d) TIOCGSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2316
    break;
  }
#line 2317
  tmp___2 = mos7840_get_serial_info(mos7840_port, argp);
#line 2317
  return (tmp___2);
  case 21535U: 
#line 2320
  while (1) {
#line 2320
    if (debug) {
#line 2320
      printk("<7>%s: %s (%d) TIOCSSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2320
    break;
  }
#line 2321
  break;
  case 21596U: 
#line 2324
  while (1) {
#line 2324
    if (debug) {
#line 2324
      printk("<7>%s: %s (%d) TIOCMIWAIT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2324
    break;
  }
#line 2325
  cprev = mos7840_port->icount;
#line 2326
  while (1) {
#line 2328
    mos7840_port->delta_msr_cond = 0;
#line 2329
    __ret = 0;
#line 2329
    if (! (mos7840_port->delta_msr_cond == 1)) {
#line 2329
      while (1) {
#line 2329
        tmp___3 = get_current();
#line 2329
        __wait.flags = 0U;
#line 2329
        __wait.private = tmp___3;
#line 2329
        __wait.func = & autoremove_wake_function;
#line 2329
        __wait.task_list.next = & __wait.task_list;
#line 2329
        __wait.task_list.prev = & __wait.task_list;
#line 2329
        while (1) {
#line 2329
          prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2329
          if (mos7840_port->delta_msr_cond == 1) {
#line 2329
            break;
          } else {

          }
#line 2329
          tmp___4 = get_current();
#line 2329
          tmp___5 = signal_pending(tmp___4);
#line 2329
          if (tmp___5) {

          } else {
#line 2329
            schedule();
#line 2329
            goto __Cont;
          }
#line 2329
          __ret = -512;
#line 2329
          break;
          __Cont: /* CIL Label */ ;
        }
#line 2329
        finish_wait(& mos7840_port->delta_msr_wait, & __wait);
#line 2329
        break;
      }
    } else {

    }
#line 2334
    tmp___6 = get_current();
#line 2334
    tmp___7 = signal_pending(tmp___6);
#line 2334
    if (tmp___7) {
#line 2335
      return (-512);
    } else {

    }
#line 2336
    cnow = mos7840_port->icount;
#line 2337
    __asm__  volatile   ("": : : "memory");
#line 2338
    if (((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts) {
#line 2340
      return (-5);
    } else {

    }
#line 2341
    if ((((arg & 128UL && cnow.rng != cprev.rng) || (arg & 256UL && cnow.dsr != cprev.dsr)) || (arg & 64UL && cnow.dcd != cprev.dcd)) || (arg & 32UL && cnow.cts != cprev.cts)) {
#line 2345
      return (0);
    } else {

    }
#line 2347
    cprev = cnow;
  }
#line 2350
  break;
  case 21597U: 
#line 2353
  cnow = mos7840_port->icount;
#line 2354
  __asm__  volatile   ("": : : "memory");
#line 2355
  icount.cts = cnow.cts;
#line 2356
  icount.dsr = cnow.dsr;
#line 2357
  icount.rng = cnow.rng;
#line 2358
  icount.dcd = cnow.dcd;
#line 2359
  icount.rx = cnow.rx;
#line 2360
  icount.tx = cnow.tx;
#line 2361
  icount.frame = cnow.frame;
#line 2362
  icount.overrun = cnow.overrun;
#line 2363
  icount.parity = cnow.parity;
#line 2364
  icount.brk = cnow.brk;
#line 2365
  icount.buf_overrun = cnow.buf_overrun;
#line 2367
  while (1) {
#line 2367
    if (debug) {
#line 2367
      printk("<7>%s: %s (%d) TIOCGICOUNT RX=%d, TX=%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, icount.rx, icount.tx);
    } else {

    }
#line 2367
    break;
  }
#line 2369
  tmp___8 = copy_to_user(argp, & icount, sizeof(icount));
#line 2369
  if (tmp___8) {
#line 2370
    return (-14);
  } else {

  }
#line 2371
  return (0);
  default: 
#line 2373
  break;
  }
#line 2375
  return (-515);
}
}
#line 2378 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  int mos7840_num_ports ;
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 2380
  mos7840_num_ports = 0;
#line 2382
  while (1) {
#line 2382
    if (debug) {
#line 2382
      printk("<7>%s: numberofendpoints: cur %d, alt %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             (int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints, (int )((serial->interface)->altsetting)->desc.bNumEndpoints);
    } else {

    }
#line 2382
    break;
  }
#line 2385
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 5) {
#line 2386
    tmp = 2;
#line 2386
    serial->num_ports = tmp;
#line 2386
    mos7840_num_ports = tmp;
  } else
#line 2387
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 9) {
#line 2388
    serial->num_bulk_in = 4;
#line 2389
    serial->num_bulk_out = 4;
#line 2390
    tmp___0 = 4;
#line 2390
    serial->num_ports = tmp___0;
#line 2390
    mos7840_num_ports = tmp___0;
  } else {

  }
#line 2392
  while (1) {
#line 2392
    if (debug) {
#line 2392
      printk("<7>%s: mos7840_num_ports = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             mos7840_num_ports);
    } else {

    }
#line 2392
    break;
  }
#line 2393
  return (mos7840_num_ports);
}
}
#line 2439 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct lock_class_key __key___2  ;
#line 2400 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int mos7840_startup(struct usb_serial *serial ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_device *dev ;
  int i ;
  int status ;
  __u16 Data ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  unsigned int tmp___4 ;

  {
#line 2407
  while (1) {
#line 2407
    if (debug) {
#line 2407
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "mos7840_startup :Entering..........");
    } else {

    }
#line 2407
    break;
  }
#line 2409
  if (! serial) {
#line 2410
    while (1) {
#line 2410
      if (debug) {
#line 2410
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler");
      } else {

      }
#line 2410
      break;
    }
#line 2411
    return (-1);
  } else {

  }
#line 2414
  dev = serial->dev;
#line 2416
  while (1) {
#line 2416
    if (debug) {
#line 2416
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering...");
    } else {

    }
#line 2416
    break;
  }
#line 2417
  while (1) {
#line 2417
    if (debug) {
#line 2417
      printk("<7>%s: mos7840_startup: serial = %p\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             serial);
    } else {

    }
#line 2417
    break;
  }
#line 2423
  i = 0;
#line 2423
  while (1) {
#line 2423
    if (i < (int )serial->num_ports) {

    } else {
#line 2423
      break;
    }
#line 2424
    while (1) {
#line 2424
      if (debug) {
#line 2424
        printk("<7>%s: mos7840_startup: configuring port %d............\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               i);
      } else {

      }
#line 2424
      break;
    }
#line 2425
    tmp = kzalloc(sizeof(struct moschip_port ), (16U | 64U) | 128U);
#line 2425
    mos7840_port = tmp;
#line 2426
    if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2427
      tmp___0 = dev_name(& dev->dev);
#line 2427
      tmp___1 = dev_driver_string(& dev->dev);
#line 2427
      printk("<3>%s %s: %s - Out of memory\n", tmp___1, tmp___0, "mos7840_startup");
#line 2428
      status = -12;
#line 2429
      i = i - 1;
#line 2430
      goto error;
    } else {

    }
#line 2437
    mos7840_port->port = serial->port[i];
#line 2438
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2439
    while (1) {
#line 2439
      __spin_lock_init(& mos7840_port->pool_lock, "&mos7840_port->pool_lock", & __key___2);
#line 2439
      break;
    }
#line 2444
    mos7840_port->port_num = i + 1;
#line 2445
    while (1) {
#line 2445
      if (debug) {
#line 2445
        printk("<7>%s: serial->port[i]->number = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               (serial->port[i])->number);
      } else {

      }
#line 2445
      break;
    }
#line 2446
    while (1) {
#line 2446
      if (debug) {
#line 2446
        printk("<7>%s: serial->port[i]->serial->minor = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               ((serial->port[i])->serial)->minor);
      } else {

      }
#line 2446
      break;
    }
#line 2447
    while (1) {
#line 2447
      if (debug) {
#line 2447
        printk("<7>%s: mos7840_port->port_num = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               mos7840_port->port_num);
      } else {

      }
#line 2447
      break;
    }
#line 2448
    while (1) {
#line 2448
      if (debug) {
#line 2448
        printk("<7>%s: serial->minor = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               serial->minor);
      } else {

      }
#line 2448
      break;
    }
#line 2450
    if (mos7840_port->port_num == 1) {
#line 2451
      mos7840_port->SpRegOffset = 0;
#line 2452
      mos7840_port->ControlRegOffset = 1;
#line 2453
      mos7840_port->DcrRegOffset = 4;
    } else
#line 2454
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 4) {
#line 2456
      mos7840_port->SpRegOffset = 8;
#line 2457
      mos7840_port->ControlRegOffset = 9;
#line 2458
      mos7840_port->DcrRegOffset = 22;
    } else
#line 2459
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 2) {
#line 2461
      mos7840_port->SpRegOffset = 10;
#line 2462
      mos7840_port->ControlRegOffset = 11;
#line 2463
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2464
    if (mos7840_port->port_num == 3 && (int )serial->num_ports == 4) {
#line 2466
      mos7840_port->SpRegOffset = 10;
#line 2467
      mos7840_port->ControlRegOffset = 11;
#line 2468
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2469
    if (mos7840_port->port_num == 4 && (int )serial->num_ports == 4) {
#line 2471
      mos7840_port->SpRegOffset = 12;
#line 2472
      mos7840_port->ControlRegOffset = 13;
#line 2473
      mos7840_port->DcrRegOffset = 28;
    } else {

    }
#line 2475
    mos7840_dump_serial_port(mos7840_port);
#line 2476
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2479
    status = mos7840_get_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  & Data);
#line 2481
    if (status < 0) {
#line 2482
      while (1) {
#line 2482
        if (debug) {
#line 2482
          printk("<7>%s: Reading ControlReg failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2482
        break;
      }
#line 2483
      break;
    } else {
#line 2485
      while (1) {
#line 2485
        if (debug) {
#line 2485
          printk("<7>%s: ControlReg Reading success val is %x, status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 Data, status);
        } else {

        }
#line 2485
        break;
      }
    }
#line 2487
    Data = (int )Data | 8;
#line 2488
    Data = (int )Data | 4;
#line 2492
    status = mos7840_set_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  Data);
#line 2494
    if (status < 0) {
#line 2495
      while (1) {
#line 2495
        if (debug) {
#line 2495
          printk("<7>%s: Writing ControlReg failed(rx_disable) status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2495
        break;
      }
#line 2496
      break;
    } else {
#line 2498
      while (1) {
#line 2498
        if (debug) {
#line 2498
          printk("<7>%s: ControlReg Writing success(rx_disable) status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2498
        break;
      }
    }
#line 2503
    Data = 1;
#line 2504
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 0),
                                  Data);
#line 2506
    if (status < 0) {
#line 2507
      while (1) {
#line 2507
        if (debug) {
#line 2507
          printk("<7>%s: Writing DCR0 failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2507
        break;
      }
#line 2508
      break;
    } else {
#line 2510
      while (1) {
#line 2510
        if (debug) {
#line 2510
          printk("<7>%s: DCR0 Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2510
        break;
      }
    }
#line 2512
    Data = 5;
#line 2513
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 1),
                                  Data);
#line 2515
    if (status < 0) {
#line 2516
      while (1) {
#line 2516
        if (debug) {
#line 2516
          printk("<7>%s: Writing DCR1 failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2516
        break;
      }
#line 2517
      break;
    } else {
#line 2519
      while (1) {
#line 2519
        if (debug) {
#line 2519
          printk("<7>%s: DCR1 Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2519
        break;
      }
    }
#line 2521
    Data = 36;
#line 2522
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 2),
                                  Data);
#line 2524
    if (status < 0) {
#line 2525
      while (1) {
#line 2525
        if (debug) {
#line 2525
          printk("<7>%s: Writing DCR2 failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2525
        break;
      }
#line 2526
      break;
    } else {
#line 2528
      while (1) {
#line 2528
        if (debug) {
#line 2528
          printk("<7>%s: DCR2 Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2528
        break;
      }
    }
#line 2531
    Data = 0;
#line 2532
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )3, Data);
#line 2534
    if (status < 0) {
#line 2535
      while (1) {
#line 2535
        if (debug) {
#line 2535
          printk("<7>%s: Writing CLK_START_VALUE_REGISTER failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2535
        break;
      }
#line 2536
      break;
    } else {
#line 2538
      while (1) {
#line 2538
        if (debug) {
#line 2538
          printk("<7>%s: CLK_START_VALUE_REGISTER Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2538
        break;
      }
    }
#line 2540
    Data = 32;
#line 2541
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )2, Data);
#line 2543
    if (status < 0) {
#line 2544
      while (1) {
#line 2544
        if (debug) {
#line 2544
          printk("<7>%s: Writing CLK_MULTI_REGISTER failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2544
        break;
      }
#line 2546
      goto error;
    } else {
#line 2548
      while (1) {
#line 2548
        if (debug) {
#line 2548
          printk("<7>%s: CLK_MULTI_REGISTER Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2548
        break;
      }
    }
#line 2552
    Data = 0;
#line 2553
    status = mos7840_set_uart_reg(serial->port[i], (__u16 )7, Data);
#line 2555
    if (status < 0) {
#line 2556
      while (1) {
#line 2556
        if (debug) {
#line 2556
          printk("<7>%s: Writing SCRATCH_PAD_REGISTER failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2556
        break;
      }
#line 2558
      break;
    } else {
#line 2560
      while (1) {
#line 2560
        if (debug) {
#line 2560
          printk("<7>%s: SCRATCH_PAD_REGISTER Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2560
        break;
      }
    }
#line 2564
    if (mos7840_port->port_num != 1 && (int )serial->num_ports == 2) {
#line 2567
      Data = 255;
#line 2568
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)),
                                    Data);
#line 2571
      while (1) {
#line 2571
        if (debug) {
#line 2571
          printk("<7>%s: ZLIP offset %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)));
        } else {

        }
#line 2571
        break;
      }
#line 2574
      if (status < 0) {
#line 2575
        while (1) {
#line 2575
          if (debug) {
#line 2575
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2575
          break;
        }
#line 2577
        break;
      } else {
#line 2579
        while (1) {
#line 2579
          if (debug) {
#line 2579
            printk("<7>%s: ZLP_REG%d Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2579
          break;
        }
      }
    } else {
#line 2582
      Data = 255;
#line 2583
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1),
                                    Data);
#line 2586
      while (1) {
#line 2586
        if (debug) {
#line 2586
          printk("<7>%s: ZLIP offset %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                 (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1));
        } else {

        }
#line 2586
        break;
      }
#line 2589
      if (status < 0) {
#line 2590
        while (1) {
#line 2590
          if (debug) {
#line 2590
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2590
          break;
        }
#line 2592
        break;
      } else {
#line 2594
        while (1) {
#line 2594
          if (debug) {
#line 2594
            printk("<7>%s: ZLP_REG%d Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2594
          break;
        }
      }
    }
#line 2598
    mos7840_port->control_urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 2599
    tmp___2 = kmalloc(16, (16U | 64U) | 128U);
#line 2599
    mos7840_port->ctrl_buf = tmp___2;
#line 2600
    tmp___3 = kmalloc(sizeof(struct usb_ctrlrequest ), (16U | 64U) | 128U);
#line 2600
    mos7840_port->dr = tmp___3;
#line 2602
    if ((! mos7840_port->control_urb || ! mos7840_port->ctrl_buf) || ! mos7840_port->dr) {
#line 2604
      status = -12;
#line 2605
      goto error;
    } else {

    }
#line 2423
    i = i + 1;
  }
#line 2608
  while (1) {
#line 2608
    if (debug) {
#line 2608
      printk("<7>%s: mos7840_startup: all ports configured...........\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 2608
    break;
  }
#line 2611
  Data = 15;
#line 2612
  status = mos7840_set_reg_sync(serial->port[0], 62, Data);
#line 2613
  if (status < 0) {
#line 2614
    while (1) {
#line 2614
      if (debug) {
#line 2614
        printk("<7>%s: Writing ZLP_REG5 failed status-0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2614
      break;
    }
#line 2615
    goto error;
  } else {
#line 2617
    while (1) {
#line 2617
      if (debug) {
#line 2617
        printk("<7>%s: ZLP_REG5 Writing success status%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2617
      break;
    }
  }
#line 2620
  tmp___4 = __create_pipe(serial->dev, 0);
#line 2620
  usb_control_msg(serial->dev, (unsigned int )(2 << 30) | tmp___4, (__u8 )3, 0, 1,
                  0, (void *)0, 0, 5 * 250);
#line 2622
  return (0);
  error: 
#line 2624
  while (1) {
#line 2624
    if (i >= 0) {

    } else {
#line 2624
      break;
    }
#line 2625
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2627
    kfree(mos7840_port->dr);
#line 2628
    kfree(mos7840_port->ctrl_buf);
#line 2629
    usb_free_urb(mos7840_port->control_urb);
#line 2630
    kfree(mos7840_port);
#line 2631
    serial->port[i] = (void *)0;
#line 2624
    i = i - 1;
  }
#line 2633
  return (status);
}
}
#line 2641 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_disconnect(struct usb_serial *serial ) 
{ 
  int i ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;

  {
#line 2646
  while (1) {
#line 2646
    if (debug) {
#line 2646
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " disconnect :entering..........");
    } else {

    }
#line 2646
    break;
  }
#line 2648
  if (! serial) {
#line 2649
    while (1) {
#line 2649
      if (debug) {
#line 2649
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler");
      } else {

      }
#line 2649
      break;
    }
#line 2650
    return;
  } else {

  }
#line 2658
  i = 0;
#line 2658
  while (1) {
#line 2658
    if (i < (int )serial->num_ports) {

    } else {
#line 2658
      break;
    }
#line 2659
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2660
    while (1) {
#line 2660
      if (debug) {
#line 2660
        printk("<7>%s: mos7840_port %d = %p\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               i, mos7840_port);
      } else {

      }
#line 2660
      break;
    }
#line 2661
    if (mos7840_port) {
#line 2662
      while (1) {
#line 2662
        flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 2662
        break;
      }
#line 2663
      mos7840_port->zombie = 1;
#line 2664
      while (1) {
#line 2664
        _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 2664
        break;
      }
#line 2665
      usb_kill_urb(mos7840_port->control_urb);
    } else {

    }
#line 2658
    i = i + 1;
  }
#line 2669
  while (1) {
#line 2669
    if (debug) {
#line 2669
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Thank u :: ");
    } else {

    }
#line 2669
    break;
  }
#line 2671
  return;
}
}
#line 2678 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void mos7840_release(struct usb_serial *serial ) 
{ 
  int i ;
  struct moschip_port *mos7840_port ;

  {
#line 2682
  while (1) {
#line 2682
    if (debug) {
#line 2682
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " release :entering..........");
    } else {

    }
#line 2682
    break;
  }
#line 2684
  if (! serial) {
#line 2685
    while (1) {
#line 2685
      if (debug) {
#line 2685
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler");
      } else {

      }
#line 2685
      break;
    }
#line 2686
    return;
  } else {

  }
#line 2694
  i = 0;
#line 2694
  while (1) {
#line 2694
    if (i < (int )serial->num_ports) {

    } else {
#line 2694
      break;
    }
#line 2695
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2696
    while (1) {
#line 2696
      if (debug) {
#line 2696
        printk("<7>%s: mos7840_port %d = %p\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               i, mos7840_port);
      } else {

      }
#line 2696
      break;
    }
#line 2697
    if (mos7840_port) {
#line 2698
      kfree(mos7840_port->ctrl_buf);
#line 2699
      kfree(mos7840_port->dr);
#line 2700
      kfree(mos7840_port);
    } else {

    }
#line 2694
    i = i + 1;
  }
#line 2704
  while (1) {
#line 2704
    if (debug) {
#line 2704
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Thank u :: ");
    } else {

    }
#line 2704
    break;
  }
#line 2706
  return;
}
}
#line 2708 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_driver io_driver  = 
#line 2708
     {"mos7840", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, moschip_id_table_combined,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                      0, 0}, 0}, 1, 0U, 0U};
#line 2716 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct usb_serial_driver moschip7840_4port_device  = 
#line 2716
     {"Moschip 7840/7820 USB Serial Driver", moschip_port_id_table, 4, {0, 0}, {"mos7840",
                                                                              0, & __this_module,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0},
    & io_driver, {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, 0, 0, & mos7840_startup,
    & mos7840_calc_num_ports, & mos7840_disconnect, & mos7840_release, 0, 0, 0, 0,
    & mos7840_open, & mos7840_close, & mos7840_write, & mos7840_write_room, & mos7840_ioctl,
    & mos7840_set_termios, & mos7840_break, & mos7840_chars_in_buffer, & mos7840_throttle,
    & mos7840_unthrottle, & mos7840_tiocmget, & mos7840_tiocmset, 0, 0, & mos7840_interrupt_callback,
    0, & mos7840_bulk_in_callback, 0};
#line 2752
static int moschip7840_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 2752 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int moschip7840_init(void) 
{ 
  int retval ;

  {
#line 2756
  while (1) {
#line 2756
    if (debug) {
#line 2756
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_init :entering..........");
    } else {

    }
#line 2756
    break;
  }
#line 2759
  retval = usb_serial_register(& moschip7840_4port_device);
#line 2761
  if (retval) {
#line 2762
    goto failed_port_device_register;
  } else {

  }
#line 2764
  while (1) {
#line 2764
    if (debug) {
#line 2764
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering...");
    } else {

    }
#line 2764
    break;
  }
#line 2765
  printk("<6>mos7840: 1.3.2:Moschip 7840/7820 USB Serial Driver\n");
#line 2769
  retval = usb_register(& io_driver);
#line 2770
  if (retval == 0) {
#line 2771
    while (1) {
#line 2771
      if (debug) {
#line 2771
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
               "Leaving...");
      } else {

      }
#line 2771
      break;
    }
#line 2772
    return (0);
  } else {

  }
#line 2774
  usb_serial_deregister(& moschip7840_4port_device);
  failed_port_device_register: 
#line 2776
  return (retval);
}
}
#line 2783
static void moschip7840_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 2783 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static void moschip7840_exit(void) 
{ 


  {
#line 2786
  while (1) {
#line 2786
    if (debug) {
#line 2786
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             " mos7840_exit :entering..........");
    } else {

    }
#line 2786
    break;
  }
#line 2788
  usb_deregister(& io_driver);
#line 2790
  usb_serial_deregister(& moschip7840_4port_device);
#line 2792
  while (1) {
#line 2792
    if (debug) {
#line 2792
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c",
             "Entering...");
    } else {

    }
#line 2792
    break;
  }
#line 2793
  return;
}
}
#line 2795 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 2795
  tmp = moschip7840_init();
#line 2795
  return (tmp);
}
}
#line 2796 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
void cleanup_module(void) 
{ 


  {
#line 2796
  moschip7840_exit();
#line 2796
  return;
}
}
#line 2799 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_description2799[48]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2799
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'M',      'o',      's',      'c', 
        'h',      'i',      'p',      ' ', 
        '7',      '8',      '4',      '0', 
        '/',      '7',      '8',      '2', 
        '0',      ' ',      'U',      'S', 
        'B',      ' ',      'S',      'e', 
        'r',      'i',      'a',      'l', 
        ' ',      'D',      'r',      'i', 
        'v',      'e',      'r',      '\000'};
#line 2800 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_license2800[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2800
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 2802 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
#line 2802 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, ((256 | 32) | 4) | 128, 0, & param_set_bool, & param_get_bool,
    {& debug}};
#line 2802 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debugtype2802[20]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2802
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'b', 
        'o',      'o',      'l',      '\000'};
#line 2803 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debug2803[32]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2803
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'D', 
        'e',      'b',      'u',      'g', 
        ' ',      'e',      'n',      'a', 
        'b',      'l',      'e',      'd', 
        ' ',      'o',      'r',      ' ', 
        'n',      'o',      't',      '\000'};
#line 2821
void ldv_check_final_state(void) ;
#line 2824
extern void ldv_check_return_value(int res ) ;
#line 2830
extern void ldv_initialize(void) ;
#line 2833
extern void ldv_handler_precall(void) ;
#line 2836
extern int nondet_int(void) ;
#line 2839 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
int LDV_IN_INTERRUPT  ;
#line 2941 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
static int res_mos7840_open_18  ;
#line 2842 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/usb/serial/mos7840.c"
void main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_mos7840_open_18_p2 ;
  unsigned char const   *var_mos7840_write_24_p2 ;
  int var_mos7840_write_24_p3 ;
  struct usb_serial *var_group3 ;
  struct file *var_group4 ;
  unsigned int var_mos7840_ioctl_37_p2 ;
  unsigned long var_mos7840_ioctl_37_p3 ;
  struct ktermios *var_mos7840_set_termios_32_p2 ;
  int var_mos7840_break_22_p1 ;
  unsigned int var_mos7840_tiocmset_28_p2 ;
  unsigned int var_mos7840_tiocmset_28_p3 ;
  struct urb *var_group5 ;
  int tmp ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4731
  LDV_IN_INTERRUPT = 1;
#line 4740
  ldv_initialize();
#line 4839
  ldv_handler_precall();
#line 4840
  tmp = moschip7840_init();
#line 4840
  if (tmp) {
#line 4841
    goto ldv_final;
  } else {

  }
#line 4842
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 4846
  while (1) {
#line 4846
    tmp___1 = nondet_int();
#line 4846
    if (tmp___1 || ! (ldv_s_moschip7840_4port_device_usb_serial_driver == 0)) {

    } else {
#line 4846
      break;
    }
#line 4850
    tmp___0 = nondet_int();
#line 4850
    switch (tmp___0) {
    case 0: 
#line 4855
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 0) {
#line 4960
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 4966
    break;
    case 1: 
#line 4970
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 1) {
#line 5058
      ldv_handler_precall();
#line 5059
      res_mos7840_open_18 = mos7840_open(var_group1, var_group2, var_mos7840_open_18_p2);
#line 5060
      ldv_check_return_value(res_mos7840_open_18);
#line 5061
      if (res_mos7840_open_18) {
#line 5062
        goto ldv_module_exit;
      } else {

      }
#line 5075
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 5081
    break;
    case 2: 
#line 5085
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 2) {
#line 5173
      ldv_handler_precall();
#line 5174
      mos7840_close(var_group2);
#line 5187
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 5193
    break;
    case 3: 
#line 5197
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 3) {
#line 5293
      ldv_handler_precall();
#line 5294
      mos7840_release(var_group3);
#line 5299
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 5305
    break;
    case 4: 
#line 5309
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 4) {
#line 5405
      ldv_handler_precall();
#line 5406
      mos7840_disconnect(var_group3);
#line 5411
      ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
    } else {

    }
#line 5417
    break;
    case 5: 
#line 5509
    ldv_handler_precall();
#line 5510
    mos7840_write(var_group1, var_group2, var_mos7840_write_24_p2, var_mos7840_write_24_p3);
#line 5527
    break;
    case 6: 
#line 5619
    ldv_handler_precall();
#line 5620
    mos7840_write_room(var_group1);
#line 5639
    break;
    case 7: 
#line 5731
    ldv_handler_precall();
#line 5732
    mos7840_chars_in_buffer(var_group1);
#line 5751
    break;
    case 8: 
#line 5845
    ldv_handler_precall();
#line 5846
    mos7840_throttle(var_group1);
#line 5863
    break;
    case 9: 
#line 5957
    ldv_handler_precall();
#line 5958
    mos7840_unthrottle(var_group1);
#line 5975
    break;
    case 10: 
#line 6075
    ldv_handler_precall();
#line 6076
    mos7840_calc_num_ports(var_group3);
#line 6087
    break;
    case 11: 
#line 6187
    ldv_handler_precall();
#line 6188
    mos7840_ioctl(var_group1, var_group4, var_mos7840_ioctl_37_p2, var_mos7840_ioctl_37_p3);
#line 6199
    break;
    case 12: 
#line 6299
    ldv_handler_precall();
#line 6300
    mos7840_set_termios(var_group1, var_group2, var_mos7840_set_termios_32_p2);
#line 6311
    break;
    case 13: 
#line 6403
    ldv_handler_precall();
#line 6404
    mos7840_break(var_group1, var_mos7840_break_22_p1);
#line 6423
    break;
    case 14: 
#line 6517
    ldv_handler_precall();
#line 6518
    mos7840_tiocmget(var_group1, var_group4);
#line 6535
    break;
    case 15: 
#line 6629
    ldv_handler_precall();
#line 6630
    mos7840_tiocmset(var_group1, var_group4, var_mos7840_tiocmset_28_p2, var_mos7840_tiocmset_28_p3);
#line 6647
    break;
    case 16: 
#line 6747
    ldv_handler_precall();
#line 6748
    mos7840_startup(var_group3);
#line 6759
    break;
    case 17: 
#line 6849
    ldv_handler_precall();
#line 6850
    mos7840_bulk_in_callback(var_group5);
#line 6871
    break;
    case 18: 
#line 6961
    ldv_handler_precall();
#line 6962
    mos7840_interrupt_callback(var_group5);
#line 6983
    break;
    default: 
#line 6984
    break;
    }
  }
  ldv_module_exit: 
#line 7089
  ldv_handler_precall();
#line 7090
  moschip7840_exit();
  ldv_final: 
#line 7093
  ldv_check_final_state();
#line 7096
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    if (! arbitrary_memory) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    if (addr) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    if (! arbitrary_memory) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 


  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    if (urb) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
