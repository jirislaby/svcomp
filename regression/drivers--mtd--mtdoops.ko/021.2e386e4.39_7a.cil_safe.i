/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 88 "include/linux/types.h"
typedef unsigned char u_char;
#line 91 "include/linux/types.h"
typedef unsigned long u_long;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 111 "include/linux/types.h"
typedef __u8 uint8_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 116 "include/linux/types.h"
typedef __u64 uint64_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 188 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 110 "include/linux/kernel.h"
struct completion;
#line 111
struct pt_regs;
#line 210
struct pid;
#line 679
struct timespec;
#line 680
struct compat_timespec;
#line 681 "include/linux/kernel.h"
struct __anonstruct_ldv_1609_9 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 681 "include/linux/kernel.h"
struct __anonstruct_futex_10 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 681 "include/linux/kernel.h"
struct __anonstruct_nanosleep_11 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 681
struct pollfd;
#line 681 "include/linux/kernel.h"
struct __anonstruct_poll_12 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 681 "include/linux/kernel.h"
union __anonunion_ldv_1632_8 {
   struct __anonstruct_ldv_1609_9 ldv_1609 ;
   struct __anonstruct_futex_10 futex ;
   struct __anonstruct_nanosleep_11 nanosleep ;
   struct __anonstruct_poll_12 poll ;
};
#line 681 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1632_8 ldv_1632 ;
};
#line 21 "include/asm-generic/getorder.h"
struct task_struct;
#line 22
struct exec_domain;
#line 23
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1875_13 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1875_13 ldv_1875 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 284
struct file;
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2129_20 {
   unsigned int a ;
   unsigned int b ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2144_21 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2145_19 {
   struct __anonstruct_ldv_2129_20 ldv_2129 ;
   struct __anonstruct_ldv_2144_21 ldv_2144 ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2145_19 ldv_2145 ;
};
#line 121 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct thread_struct;
#line 123
struct cpumask;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct raw_spinlock;
#line 290 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4635_25 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4641_26 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4642_24 {
   struct __anonstruct_ldv_4635_25 ldv_4635 ;
   struct __anonstruct_ldv_4641_26 ldv_4641 ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4651_27 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4642_24 ldv_4642 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4651_27 ldv_4651 ;
};
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct ds_context;
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_29 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_29 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 170 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_31 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_31 spinlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[8U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 643 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 156 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 165 "include/linux/ioport.h"
struct device;
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 36 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 45 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 46 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 215
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 225
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 232
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 239 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 405
struct kobject;
#line 406 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10204_109 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10204_109 ldv_10204 ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 243 "include/linux/moduleparam.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 302 "include/linux/rcupdate.h"
struct tracepoint;
#line 303 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 100 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 70
struct exception_table_entry;
#line 176
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 182
struct module_sect_attrs;
#line 182
struct module_notes_attrs;
#line 182
struct ftrace_event_call;
#line 182 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 535
struct device_driver;
#line 711
struct tty_struct;
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 570 "include/linux/capability.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160
struct prio_tree_node;
#line 160 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 127 "include/linux/mm_types.h"
struct __anonstruct_vm_set_118 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 127 "include/linux/mm_types.h"
union __anonunion_shared_117 {
   struct __anonstruct_vm_set_118 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 127
struct anon_vma;
#line 127
struct vm_operations_struct;
#line 127
struct mempolicy;
#line 127 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_117 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 189 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 195 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 201
struct mmu_notifier_mm;
#line 201 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_119 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_119 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_121 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_122 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_123 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_124 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_125 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_126 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_120 {
   int _pad[28U] ;
   struct __anonstruct__kill_121 _kill ;
   struct __anonstruct__timer_122 _timer ;
   struct __anonstruct__rt_123 _rt ;
   struct __anonstruct__sigchld_124 _sigchld ;
   struct __anonstruct__sigfault_125 _sigfault ;
   struct __anonstruct__sigpoll_126 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_120 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 293
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 21 "include/linux/path.h"
struct pid_namespace;
#line 21 "include/linux/path.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_129 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_129 seccomp_t;
#line 394 "include/linux/rculist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 84
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 89 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 469 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 841 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct cred;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_14146_130 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_131 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_132 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_14146_130 ldv_14146 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_131 type_data ;
   union __anonunion_payload_132 payload ;
};
#line 291
struct audit_context;
#line 70 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 279
struct futex_pi_state;
#line 280
struct robust_list_head;
#line 281
struct bio;
#line 282
struct fs_struct;
#line 283
struct bts_context;
#line 284
struct perf_event_context;
#line 151 "include/linux/sched.h"
struct cfs_rq;
#line 152
struct task_group;
#line 355
struct user_namespace;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 445 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 487 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 495 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 502 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 519 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 555
struct taskstats;
#line 555
struct tty_audit_buf;
#line 555 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 697 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct delayed_work work ;
   atomic_long_t locked_vm ;
};
#line 747
struct backing_dev_info;
#line 748
struct reclaim_state;
#line 749 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 766 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 808
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 891 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int cpu_power ;
   unsigned long cpumask[0U] ;
};
#line 918
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 932 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   unsigned int smt_gain ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0U] ;
};
#line 1030
struct io_context;
#line 1052
struct pipe_inode_info;
#line 1054
struct rq;
#line 1055 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct task_struct * ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1116 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1121 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 avg_running ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1195
struct rt_rq;
#line 1195 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1212
struct linux_binfmt;
#line 1212
struct files_struct;
#line 1212
struct irqaction;
#line 1212
struct css_set;
#line 1212
struct compat_robust_list_head;
#line 1212 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
};
#line 2559
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 33 "include/linux/irq.h"
struct proc_dir_entry;
#line 82 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 623
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 151 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 181
struct class_attribute;
#line 181 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 208
struct device_type;
#line 247 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 279 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 306 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 367 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 376
struct dma_coherent_mem;
#line 376 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 84 "include/mtd/mtd-abi.h"
struct otp_info {
   __u32 start ;
   __u32 length ;
   __u32 locked ;
};
#line 124 "include/mtd/mtd-abi.h"
struct nand_oobfree {
   __u32 offset ;
   __u32 length ;
};
#line 129 "include/mtd/mtd-abi.h"
struct nand_ecclayout {
   __u32 eccbytes ;
   __u32 eccpos[64U] ;
   __u32 oobavail ;
   struct nand_oobfree oobfree[8U] ;
};
#line 141 "include/mtd/mtd-abi.h"
struct mtd_ecc_stats {
   __u32 corrected ;
   __u32 failed ;
   __u32 badblocks ;
   __u32 bbtblocks ;
};
#line 163
struct mtd_info;
#line 163 "include/mtd/mtd-abi.h"
struct erase_info {
   struct mtd_info *mtd ;
   uint64_t addr ;
   uint64_t len ;
   uint64_t fail_addr ;
   u_long time ;
   u_long retries ;
   unsigned int dev ;
   unsigned int cell ;
   void (*callback)(struct erase_info * ) ;
   u_long priv ;
   u_char state ;
   struct erase_info *next ;
};
#line 50 "include/linux/mtd/mtd.h"
struct mtd_erase_region_info {
   uint64_t offset ;
   uint32_t erasesize ;
   uint32_t numblocks ;
   unsigned long *lockmap ;
};
#line 57
enum ldv_14286 {
    MTD_OOB_PLACE = 0,
    MTD_OOB_AUTO = 1,
    MTD_OOB_RAW = 2
} ;
#line 72 "include/linux/mtd/mtd.h"
typedef enum ldv_14286 mtd_oob_mode_t;
#line 73 "include/linux/mtd/mtd.h"
struct mtd_oob_ops {
   mtd_oob_mode_t mode ;
   size_t len ;
   size_t retlen ;
   size_t ooblen ;
   size_t oobretlen ;
   uint32_t ooboffs ;
   uint8_t *datbuf ;
   uint8_t *oobbuf ;
};
#line 103 "include/linux/mtd/mtd.h"
struct mtd_info {
   u_char type ;
   uint32_t flags ;
   uint64_t size ;
   uint32_t erasesize ;
   uint32_t writesize ;
   uint32_t oobsize ;
   uint32_t oobavail ;
   unsigned int erasesize_shift ;
   unsigned int writesize_shift ;
   unsigned int erasesize_mask ;
   unsigned int writesize_mask ;
   char const   *name ;
   int index ;
   struct nand_ecclayout *ecclayout ;
   int numeraseregions ;
   struct mtd_erase_region_info *eraseregions ;
   int (*erase)(struct mtd_info * , struct erase_info * ) ;
   int (*point)(struct mtd_info * , loff_t  , size_t  , size_t * , void ** , resource_size_t * ) ;
   void (*unpoint)(struct mtd_info * , loff_t  , size_t  ) ;
   unsigned long (*get_unmapped_area)(struct mtd_info * , unsigned long  , unsigned long  ,
                                      unsigned long  ) ;
   struct backing_dev_info *backing_dev_info ;
   int (*read)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*write)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char const   * ) ;
   int (*panic_write)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char const   * ) ;
   int (*read_oob)(struct mtd_info * , loff_t  , struct mtd_oob_ops * ) ;
   int (*write_oob)(struct mtd_info * , loff_t  , struct mtd_oob_ops * ) ;
   int (*get_fact_prot_info)(struct mtd_info * , struct otp_info * , size_t  ) ;
   int (*read_fact_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*get_user_prot_info)(struct mtd_info * , struct otp_info * , size_t  ) ;
   int (*read_user_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*write_user_prot_reg)(struct mtd_info * , loff_t  , size_t  , size_t * , u_char * ) ;
   int (*lock_user_prot_reg)(struct mtd_info * , loff_t  , size_t  ) ;
   int (*writev)(struct mtd_info * , struct kvec  const  * , unsigned long  , loff_t  ,
                 size_t * ) ;
   void (*sync)(struct mtd_info * ) ;
   int (*lock)(struct mtd_info * , loff_t  , uint64_t  ) ;
   int (*unlock)(struct mtd_info * , loff_t  , uint64_t  ) ;
   int (*suspend)(struct mtd_info * ) ;
   void (*resume)(struct mtd_info * ) ;
   int (*block_isbad)(struct mtd_info * , loff_t  ) ;
   int (*block_markbad)(struct mtd_info * , loff_t  ) ;
   struct notifier_block reboot_notifier ;
   struct mtd_ecc_stats ecc_stats ;
   int subpage_sft ;
   void *priv ;
   struct module *owner ;
   struct device dev ;
   int usecount ;
   int (*get_device)(struct mtd_info * ) ;
   void (*put_device)(struct mtd_info * ) ;
};
#line 296 "include/linux/mtd/mtd.h"
struct mtd_notifier {
   void (*add)(struct mtd_info * ) ;
   void (*remove)(struct mtd_info * ) ;
   struct list_head list ;
};
#line 316
enum kmsg_dump_reason {
    KMSG_DUMP_OOPS = 0,
    KMSG_DUMP_PANIC = 1
} ;
#line 321 "include/linux/mtd/mtd.h"
struct kmsg_dumper {
   void (*dump)(struct kmsg_dumper * , enum kmsg_dump_reason  , char const   * , unsigned long  ,
                char const   * , unsigned long  ) ;
   struct list_head list ;
   int registered ;
};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
struct mtdoops_context {
   struct kmsg_dumper dump ;
   int mtd_index ;
   struct work_struct work_erase ;
   struct work_struct work_write ;
   struct mtd_info *mtd ;
   int oops_pages ;
   int nextpage ;
   int nextcount ;
   unsigned long *oops_page_used ;
   void *oops_buf ;
};
#line 693 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
typedef int ldv_func_ret_type___1;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 173 "include/linux/kernel.h"
extern unsigned long simple_strtoul(char const   * , char ** , unsigned int  ) ;
#line 241
extern int printk(char const   *  , ...) ;
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1951;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1951;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1951;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1951;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1951: ;
#line 14
  return (ret__);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
__inline static unsigned long __xchg(unsigned long x , void volatile   *ptr , int size ) 
{ 


  {
#line 26
  switch (size) {
  case 1: 
#line 28
  __asm__  volatile   ("xchgb %b0,%1": "=q" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 32
  goto ldv_1967;
  case 2: 
#line 34
  __asm__  volatile   ("xchgw %w0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 38
  goto ldv_1967;
  case 4: 
#line 40
  __asm__  volatile   ("xchgl %k0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 44
  goto ldv_1967;
  case 8: 
#line 46
  __asm__  volatile   ("xchgq %0,%1": "=r" (x): "m" (*((long volatile   *)ptr)), "0" (x): "memory");
#line 50
  goto ldv_1967;
  }
  ldv_1967: ;
#line 52
  return (x);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 15 "include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend , u32 divisor , u32 *remainder ) 
{ 


  {
#line 17
  *remainder = (u32 )(dividend % (u64 )divisor);
#line 18
  return (dividend / (u64 )divisor);
}
}
#line 66 "include/linux/math64.h"
__inline static u64 div_u64(u64 dividend , u32 divisor ) 
{ 
  u32 remainder ;
  u64 tmp ;

  {
#line 69
  tmp = div_u64_rem(dividend, divisor, & remainder);
#line 69
  return (tmp);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 244 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) ;
#line 18
extern void __ldv_spin_unlock(spinlock_t * ) ;
#line 21
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) ;
#line 25
void ldv___ldv_spin_unlock_5(spinlock_t *ldv_func_arg1 ) ;
#line 29
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) ;
#line 33
void ldv___ldv_spin_unlock_8(spinlock_t *ldv_func_arg1 ) ;
#line 35
extern int __ldv_spin_trylock(spinlock_t * ) ;
#line 38
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv_spin_lock_alloc_lock_of_task_struct(void) ;
#line 45
void ldv_spin_unlock_alloc_lock_of_task_struct(void) ;
#line 52
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
#line 53
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
#line 54
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) ;
#line 60
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 61
void ldv_spin_unlock_siglock_of_sighand_struct(void) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 118
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 120
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 209 "include/linux/workqueue.h"
extern void flush_scheduled_work(void) ;
#line 211
extern int schedule_work(struct work_struct * ) ;
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 353 "include/linux/sched.h"
extern void schedule(void) ;
#line 257 "include/linux/mtd/mtd.h"
__inline static uint32_t mtd_div_by_eb(uint64_t sz , struct mtd_info *mtd ) 
{ 
  uint32_t __base ;
  uint32_t __rem ;

  {
#line 259
  if (mtd->erasesize_shift != 0U) {
#line 260
    return ((uint32_t )(sz >> (int )mtd->erasesize_shift));
  } else {

  }
#line 261
  __base = mtd->erasesize;
#line 261
  __rem = (uint32_t )(sz % (uint64_t )__base);
#line 261
  sz = sz / (uint64_t )__base;
#line 262
  return ((uint32_t )sz);
}
}
#line 305
extern void register_mtd_user(struct mtd_notifier * ) ;
#line 306
extern int unregister_mtd_user(struct mtd_notifier * ) ;
#line 40 "include/linux/kmsg_dump.h"
extern int kmsg_dump_register(struct kmsg_dumper * ) ;
#line 42
extern int kmsg_dump_unregister(struct kmsg_dumper * ) ;
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static unsigned long record_size  =    4096UL;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static char mtddev[80U]  ;
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static int dump_oops  =    1;
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static struct mtdoops_context oops_cxt  ;
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mark_page_used(struct mtdoops_context *cxt , int page ) 
{ 


  {
#line 110
  set_bit((unsigned int )page, (unsigned long volatile   *)cxt->oops_page_used);
#line 111
  return;
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mark_page_unused(struct mtdoops_context *cxt , int page ) 
{ 


  {
#line 115
  clear_bit(page, (unsigned long volatile   *)cxt->oops_page_used);
#line 116
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static int page_is_used(struct mtdoops_context *cxt , int page ) 
{ 
  int tmp ;

  {
#line 120
  tmp = variable_test_bit(page, (unsigned long const volatile   *)cxt->oops_page_used);
#line 120
  return (tmp);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_erase_callback(struct erase_info *done ) 
{ 
  wait_queue_head_t *wait_q ;

  {
#line 125
  wait_q = (wait_queue_head_t *)done->priv;
#line 126
  __wake_up(wait_q, 3U, 1, 0);
#line 127
  return;
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static int mtdoops_erase_block(struct mtdoops_context *cxt , int offset ) 
{ 
  struct mtd_info *mtd ;
  u32 start_page_offset ;
  uint32_t tmp ;
  u32 start_page ;
  u32 erase_pages ;
  struct erase_info erase ;
  wait_queue_t wait ;
  struct task_struct *tmp___0 ;
  wait_queue_head_t wait_q ;
  int ret ;
  int page ;
  struct lock_class_key __key ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 131
  mtd = cxt->mtd;
#line 132
  tmp = mtd_div_by_eb((uint64_t )offset, mtd);
#line 132
  start_page_offset = tmp * mtd->erasesize;
#line 133
  start_page = (u32 )((unsigned long )start_page_offset / record_size);
#line 134
  erase_pages = (u32 )((unsigned long )mtd->erasesize / record_size);
#line 136
  tmp___0 = get_current();
#line 136
  wait.flags = 0U;
#line 136
  wait.private = (void *)tmp___0;
#line 136
  wait.func = & default_wake_function;
#line 136
  wait.task_list.next = 0;
#line 136
  wait.task_list.prev = 0;
#line 141
  __init_waitqueue_head(& wait_q, & __key);
#line 142
  erase.mtd = mtd;
#line 143
  erase.callback = & mtdoops_erase_callback;
#line 144
  erase.addr = (uint64_t )offset;
#line 145
  erase.len = (uint64_t )mtd->erasesize;
#line 146
  erase.priv = (unsigned long )(& wait_q);
#line 148
  tmp___1 = get_current();
#line 148
  __xchg(1UL, (void volatile   *)(& tmp___1->state), 8);
#line 149
  add_wait_queue(& wait_q, & wait);
#line 151
  ret = (*(mtd->erase))(mtd, & erase);
#line 152
  if (ret != 0) {
#line 153
    tmp___2 = get_current();
#line 153
    __xchg(0UL, (void volatile   *)(& tmp___2->state), 8);
#line 154
    remove_wait_queue(& wait_q, & wait);
#line 155
    printk("<4>mtdoops: erase of region [0x%llx, 0x%llx] on \"%s\" failed\n", erase.addr,
           erase.len, (char *)(& mtddev));
#line 158
    return (ret);
  } else {

  }
#line 161
  schedule();
#line 162
  remove_wait_queue(& wait_q, & wait);
#line 165
  page = (int )start_page;
#line 165
  goto ldv_17623;
  ldv_17622: 
#line 166
  mark_page_unused(cxt, page);
#line 165
  page = page + 1;
  ldv_17623: ;
#line 165
  if ((u32 )page < start_page + erase_pages) {
#line 166
    goto ldv_17622;
  } else {

  }

#line 168
  return (0);
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_inc_counter(struct mtdoops_context *cxt ) 
{ 
  int tmp ;

  {
#line 173
  cxt->nextpage = cxt->nextpage + 1;
#line 174
  if (cxt->nextpage >= cxt->oops_pages) {
#line 175
    cxt->nextpage = 0;
  } else {

  }
#line 176
  cxt->nextcount = cxt->nextcount + 1;
#line 177
  if (cxt->nextcount == -1) {
#line 178
    cxt->nextcount = 0;
  } else {

  }
#line 180
  tmp = page_is_used(cxt, cxt->nextpage);
#line 180
  if (tmp != 0) {
#line 181
    schedule_work(& cxt->work_erase);
#line 182
    return;
  } else {

  }
#line 185
  printk("<7>mtdoops: ready %d, %d (no erase)\n", cxt->nextpage, cxt->nextcount);
#line 187
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_workfunc_erase(struct work_struct *work ) 
{ 
  struct mtdoops_context *cxt ;
  struct work_struct  const  *__mptr ;
  struct mtd_info *mtd ;
  int i ;
  int j ;
  int ret ;
  int mod ;

  {
#line 193
  __mptr = (struct work_struct  const  *)work;
#line 193
  cxt = (struct mtdoops_context *)__mptr + 0xffffffffffffffd8UL;
#line 194
  mtd = cxt->mtd;
#line 195
  i = 0;
#line 198
  if ((unsigned long )mtd == (unsigned long )((struct mtd_info *)0)) {
#line 199
    return;
  } else {

  }
#line 201
  mod = (int )(((unsigned long )cxt->nextpage * record_size) % (unsigned long )mtd->erasesize);
#line 202
  if (mod != 0) {
#line 203
    cxt->nextpage = (int )((unsigned int )cxt->nextpage + (unsigned int )((unsigned long )(mtd->erasesize - (uint32_t )mod) / record_size));
#line 204
    if (cxt->nextpage >= cxt->oops_pages) {
#line 205
      cxt->nextpage = 0;
    } else {

    }
  } else {

  }
#line 208
  goto ldv_17642;
  ldv_17641: 
#line 209
  ret = (*(mtd->block_isbad))(mtd, (loff_t )((unsigned long )cxt->nextpage * record_size));
#line 210
  if (ret == 0) {
#line 211
    goto ldv_17639;
  } else {

  }
#line 212
  if (ret < 0) {
#line 213
    printk("<3>mtdoops: block_isbad failed, aborting\n");
#line 214
    return;
  } else {

  }
  badblock: 
#line 217
  printk("<4>mtdoops: bad block at %08lx\n", (unsigned long )cxt->nextpage * record_size);
#line 219
  i = i + 1;
#line 220
  cxt->nextpage = (int )((unsigned int )cxt->nextpage + (unsigned int )((unsigned long )mtd->erasesize / record_size));
#line 221
  if (cxt->nextpage >= cxt->oops_pages) {
#line 222
    cxt->nextpage = 0;
  } else {

  }
#line 223
  if ((unsigned long )i == (unsigned long )cxt->oops_pages / ((unsigned long )mtd->erasesize / record_size)) {
#line 224
    printk("<3>mtdoops: all blocks bad!\n");
#line 225
    return;
  } else {

  }
  ldv_17642: ;
#line 208
  if ((unsigned long )mtd->block_isbad != (unsigned long )((int (*)(struct mtd_info * ,
                                                                    loff_t  ))0)) {
#line 209
    goto ldv_17641;
  } else {

  }
  ldv_17639: 
#line 229
  j = 0;
#line 229
  ret = -1;
#line 229
  goto ldv_17644;
  ldv_17643: 
#line 230
  ret = mtdoops_erase_block(cxt, (int )((unsigned int )((unsigned long )cxt->nextpage) * (unsigned int )record_size));
#line 229
  j = j + 1;
  ldv_17644: ;
#line 229
  if (j <= 2 && ret < 0) {
#line 230
    goto ldv_17643;
  } else {

  }

#line 232
  if (ret >= 0) {
#line 233
    printk("<7>mtdoops: ready %d, %d\n", cxt->nextpage, cxt->nextcount);
#line 235
    return;
  } else {

  }
#line 238
  if ((unsigned long )mtd->block_markbad != (unsigned long )((int (*)(struct mtd_info * ,
                                                                      loff_t  ))0) && ret == -5) {
#line 239
    ret = (*(mtd->block_markbad))(mtd, (loff_t )((unsigned long )cxt->nextpage * record_size));
#line 240
    if (ret < 0) {
#line 241
      printk("<3>mtdoops: block_markbad failed, aborting\n");
#line 242
      return;
    } else {

    }
  } else {

  }
#line 245
  goto badblock;
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_write(struct mtdoops_context *cxt , int panic___0 ) 
{ 
  struct mtd_info *mtd ;
  size_t retlen ;
  u32 *hdr ;
  int ret ;

  {
#line 250
  mtd = cxt->mtd;
#line 256
  hdr = (u32 *)cxt->oops_buf;
#line 257
  *hdr = (u32 )cxt->nextcount;
#line 258
  *(hdr + 1UL) = 1560304896U;
#line 260
  if (panic___0 != 0) {
#line 261
    ret = (*(mtd->panic_write))(mtd, (loff_t )((unsigned long )cxt->nextpage * record_size),
                                record_size, & retlen, (u_char const   *)cxt->oops_buf);
  } else {
#line 264
    ret = (*(mtd->write))(mtd, (loff_t )((unsigned long )cxt->nextpage * record_size),
                          record_size, & retlen, (u_char const   *)cxt->oops_buf);
  }
#line 267
  if (retlen != record_size || ret < 0) {
#line 268
    printk("<3>mtdoops: write failure at %ld (%td of %ld written), error %d\n", (unsigned long )cxt->nextpage * record_size,
           retlen, record_size, ret);
  } else {

  }
#line 270
  mark_page_used(cxt, cxt->nextpage);
#line 271
  memset(cxt->oops_buf, 255, record_size);
#line 273
  mtdoops_inc_counter(cxt);
#line 274
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_workfunc_write(struct work_struct *work ) 
{ 
  struct mtdoops_context *cxt ;
  struct work_struct  const  *__mptr ;

  {
#line 279
  __mptr = (struct work_struct  const  *)work;
#line 279
  cxt = (struct mtdoops_context *)__mptr + 0xffffffffffffff90UL;
#line 281
  mtdoops_write(cxt, 0);
#line 282
  return;
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void find_next_position(struct mtdoops_context *cxt ) 
{ 
  struct mtd_info *mtd ;
  int ret ;
  int page ;
  int maxpos ;
  u32 count[2U] ;
  u32 maxcount ;
  size_t retlen ;

  {
#line 286
  mtd = cxt->mtd;
#line 287
  maxpos = 0;
#line 288
  maxcount = 4294967295U;
#line 291
  page = 0;
#line 291
  goto ldv_17672;
  ldv_17671: 
#line 293
  mark_page_used(cxt, page);
#line 294
  ret = (*(mtd->read))(mtd, (loff_t )((unsigned long )page * record_size), 8UL, & retlen,
                       (u_char *)(& count));
#line 296
  if (retlen != 8UL || (ret < 0 && ret != -117)) {
#line 298
    printk("<3>mtdoops: read failure at %ld (%td of %d read), err %d\n", (unsigned long )page * record_size,
           retlen, 8, ret);
#line 301
    goto ldv_17670;
  } else {

  }
#line 304
  if (count[0] == 4294967295U && count[1] == 4294967295U) {
#line 305
    mark_page_unused(cxt, page);
  } else {

  }
#line 306
  if (count[0] == 4294967295U) {
#line 307
    goto ldv_17670;
  } else {

  }
#line 308
  if (maxcount == 4294967295U) {
#line 309
    maxcount = count[0];
#line 310
    maxpos = page;
  } else
#line 311
  if (count[0] <= 1073741823U && maxcount > 3221225472U) {
#line 312
    maxcount = count[0];
#line 313
    maxpos = page;
  } else
#line 314
  if (count[0] > maxcount && count[0] <= 3221225471U) {
#line 315
    maxcount = count[0];
#line 316
    maxpos = page;
  } else
#line 317
  if ((count[0] > maxcount && count[0] > 3221225472U) && maxcount > 2147483648U) {
#line 319
    maxcount = count[0];
#line 320
    maxpos = page;
  } else {

  }
  ldv_17670: 
#line 291
  page = page + 1;
  ldv_17672: ;
#line 291
  if (cxt->oops_pages > page) {
#line 292
    goto ldv_17671;
  } else {

  }

#line 323
  if (maxcount == 4294967295U) {
#line 324
    cxt->nextpage = 0;
#line 325
    cxt->nextcount = 1;
#line 326
    schedule_work(& cxt->work_erase);
#line 327
    return;
  } else {

  }
#line 330
  cxt->nextpage = maxpos;
#line 331
  cxt->nextcount = (int )maxcount;
#line 333
  mtdoops_inc_counter(cxt);
#line 334
  return;
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_do_dump(struct kmsg_dumper *dumper , enum kmsg_dump_reason reason ,
                            char const   *s1 , unsigned long l1 , char const   *s2 ,
                            unsigned long l2 ) 
{ 
  struct mtdoops_context *cxt ;
  struct kmsg_dumper  const  *__mptr ;
  unsigned long s1_start ;
  unsigned long s2_start ;
  unsigned long l1_cpy ;
  unsigned long l2_cpy ;
  char *dst ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long _min1___0 ;
  unsigned long _min2___0 ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 340
  __mptr = (struct kmsg_dumper  const  *)dumper;
#line 340
  cxt = (struct mtdoops_context *)__mptr;
#line 347
  if ((unsigned int )reason == 0U && dump_oops == 0) {
#line 348
    return;
  } else {

  }
#line 350
  dst = (char *)cxt->oops_buf + 8U;
#line 351
  _min1 = l2;
#line 351
  _min2 = record_size - 8UL;
#line 351
  l2_cpy = _min1 < _min2 ? _min1 : _min2;
#line 352
  _min1___0 = l1;
#line 352
  _min2___0 = (record_size - l2_cpy) - 8UL;
#line 352
  l1_cpy = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
#line 354
  s2_start = l2 - l2_cpy;
#line 355
  s1_start = l1 - l1_cpy;
#line 357
  __len = l1_cpy;
#line 357
  __ret = __builtin_memcpy((void *)dst, (void const   *)(s1 + s1_start), __len);
#line 358
  __len___0 = l2_cpy;
#line 358
  __ret___0 = __builtin_memcpy((void *)(dst + l1_cpy), (void const   *)(s2 + s2_start),
                               __len___0);
#line 361
  if ((unsigned int )reason == 1U) {
#line 362
    if ((unsigned long )(cxt->mtd)->panic_write == (unsigned long )((int (*)(struct mtd_info * ,
                                                                             loff_t  ,
                                                                             size_t  ,
                                                                             size_t * ,
                                                                             u_char const   * ))0)) {
#line 363
      printk("<3>mtdoops: Cannot write from panic without panic_write\n");
    } else {
#line 365
      mtdoops_write(cxt, 1);
    }
#line 366
    return;
  } else {

  }
#line 370
  schedule_work(& cxt->work_write);
#line 371
  return;
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_notify_add(struct mtd_info *mtd ) 
{ 
  struct mtdoops_context *cxt ;
  u64 mtdoops_pages ;
  u64 tmp ;
  int err ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 375
  cxt = & oops_cxt;
#line 376
  tmp = div_u64(mtd->size, (u32 )record_size);
#line 376
  mtdoops_pages = tmp;
#line 379
  tmp___0 = strcmp(mtd->name, (char const   *)(& mtddev));
#line 379
  if (tmp___0 == 0) {
#line 380
    cxt->mtd_index = mtd->index;
  } else {

  }
#line 382
  if (mtd->index != cxt->mtd_index || cxt->mtd_index < 0) {
#line 383
    return;
  } else {

  }
#line 385
  if (mtd->size < (uint64_t )(mtd->erasesize * 2U)) {
#line 386
    printk("<3>mtdoops: MTD partition %d not big enough for mtdoops\n", mtd->index);
#line 388
    return;
  } else {

  }
#line 390
  if ((unsigned long )mtd->erasesize < record_size) {
#line 391
    printk("<3>mtdoops: eraseblock size of MTD partition %d too small\n", mtd->index);
#line 393
    return;
  } else {

  }
#line 395
  if (mtd->size > 8388608ULL) {
#line 396
    printk("<3>mtdoops: mtd%d is too large (limit is %d MiB)\n", mtd->index, 8);
#line 398
    return;
  } else {

  }
#line 402
  tmp___1 = vmalloc((unsigned long )((mtdoops_pages + 63ULL) / 64ULL));
#line 402
  cxt->oops_page_used = (unsigned long *)tmp___1;
#line 404
  if ((unsigned long )cxt->oops_page_used == (unsigned long )((unsigned long *)0)) {
#line 405
    printk("<3>mtdoops: could not allocate page array\n");
#line 406
    return;
  } else {

  }
#line 409
  cxt->dump.dump = & mtdoops_do_dump;
#line 410
  err = kmsg_dump_register(& cxt->dump);
#line 411
  if (err != 0) {
#line 412
    printk("<3>mtdoops: registering kmsg dumper failed, error %d\n", err);
#line 413
    vfree((void const   *)cxt->oops_page_used);
#line 414
    cxt->oops_page_used = 0;
#line 415
    return;
  } else {

  }
#line 418
  cxt->mtd = mtd;
#line 419
  cxt->oops_pages = (int )((unsigned long )((int )mtd->size) / record_size);
#line 420
  find_next_position(cxt);
#line 421
  printk("<6>mtdoops: Attached to MTD device %d\n", mtd->index);
#line 422
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_notify_remove(struct mtd_info *mtd ) 
{ 
  struct mtdoops_context *cxt ;
  int tmp ;

  {
#line 426
  cxt = & oops_cxt;
#line 428
  if (mtd->index != cxt->mtd_index || cxt->mtd_index < 0) {
#line 429
    return;
  } else {

  }
#line 431
  tmp = kmsg_dump_unregister(& cxt->dump);
#line 431
  if (tmp < 0) {
#line 432
    printk("<4>mtdoops: could not unregister kmsg_dumper\n");
  } else {

  }
#line 434
  cxt->mtd = 0;
#line 435
  flush_scheduled_work();
#line 436
  return;
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static struct mtd_notifier mtdoops_notifier  =    {& mtdoops_notify_add, & mtdoops_notify_remove, {0, 0}};
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static int mtdoops_init(void) 
{ 
  struct mtdoops_context *cxt ;
  int mtd_index ;
  char *endp ;
  size_t tmp ;
  unsigned long tmp___0 ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  atomic_long_t __constr_expr_1 ;

  {
#line 446
  cxt = & oops_cxt;
#line 450
  tmp = strlen((char const   *)(& mtddev));
#line 450
  if (tmp == 0UL) {
#line 451
    printk("<3>mtdoops: mtd device (mtddev=name/number) must be supplied\n");
#line 452
    return (-22);
  } else {

  }
#line 454
  if ((record_size & 4095UL) != 0UL) {
#line 455
    printk("<3>mtdoops: record_size must be a multiple of 4096\n");
#line 456
    return (-22);
  } else {

  }
#line 458
  if (record_size <= 4095UL) {
#line 459
    printk("<3>mtdoops: record_size must be over 4096 bytes\n");
#line 460
    return (-22);
  } else {

  }
#line 464
  cxt->mtd_index = -1;
#line 465
  tmp___0 = simple_strtoul((char const   *)(& mtddev), & endp, 0U);
#line 465
  mtd_index = (int )tmp___0;
#line 466
  if ((int )((signed char )*endp) == 0) {
#line 467
    cxt->mtd_index = mtd_index;
  } else {

  }
#line 468
  if (cxt->mtd_index > 32) {
#line 469
    printk("<3>mtdoops: invalid mtd device number (%u) given\n", mtd_index);
#line 471
    return (-22);
  } else {

  }
#line 474
  cxt->oops_buf = vmalloc(record_size);
#line 475
  if ((unsigned long )cxt->oops_buf == (unsigned long )((void *)0)) {
#line 476
    printk("<3>mtdoops: failed to allocate buffer workspace\n");
#line 477
    return (-12);
  } else {

  }
#line 479
  memset(cxt->oops_buf, 255, record_size);
#line 481
  __constr_expr_0.counter = 0L;
#line 481
  cxt->work_erase.data = __constr_expr_0;
#line 481
  lockdep_init_map(& cxt->work_erase.lockdep_map, "&cxt->work_erase", & __key, 0);
#line 481
  INIT_LIST_HEAD(& cxt->work_erase.entry);
#line 481
  cxt->work_erase.func = & mtdoops_workfunc_erase;
#line 482
  __constr_expr_1.counter = 0L;
#line 482
  cxt->work_write.data = __constr_expr_1;
#line 482
  lockdep_init_map(& cxt->work_write.lockdep_map, "&cxt->work_write", & __key___0,
                   0);
#line 482
  INIT_LIST_HEAD(& cxt->work_write.entry);
#line 482
  cxt->work_write.func = & mtdoops_workfunc_write;
#line 484
  register_mtd_user(& mtdoops_notifier);
#line 485
  return (0);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
static void mtdoops_exit(void) 
{ 
  struct mtdoops_context *cxt ;

  {
#line 490
  cxt = & oops_cxt;
#line 492
  unregister_mtd_user(& mtdoops_notifier);
#line 493
  vfree((void const   *)cxt->oops_buf);
#line 494
  vfree((void const   *)cxt->oops_page_used);
#line 495
  return;
}
}
#line 521
void ldv_check_final_state(void) ;
#line 530
void ldv_initialize(void) ;
#line 533
extern void ldv_handler_precall(void) ;
#line 536
extern int nondet_int(void) ;
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 542 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct mtd_info *var_group1 ;
  int ldv_s_mtdoops_notifier_mtd_notifier ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 592
  ldv_s_mtdoops_notifier_mtd_notifier = 0;
#line 570
  LDV_IN_INTERRUPT = 1;
#line 579
  ldv_initialize();
#line 589
  ldv_handler_precall();
#line 590
  tmp = mtdoops_init();
#line 590
  if (tmp != 0) {
#line 591
    goto ldv_final;
  } else {

  }
#line 596
  goto ldv_17764;
  ldv_17763: 
#line 600
  tmp___0 = nondet_int();
#line 600
  switch (tmp___0) {
  case 0: ;
#line 605
  if (ldv_s_mtdoops_notifier_mtd_notifier == 0) {
#line 614
    ldv_handler_precall();
#line 615
    mtdoops_notify_remove(var_group1);
#line 616
    ldv_s_mtdoops_notifier_mtd_notifier = 0;
  } else {

  }
#line 622
  goto ldv_17760;
  case 1: 
#line 635
  ldv_handler_precall();
#line 636
  mtdoops_notify_add(var_group1);
#line 643
  goto ldv_17760;
  default: ;
#line 644
  goto ldv_17760;
  }
  ldv_17760: ;
  ldv_17764: 
#line 596
  tmp___1 = nondet_int();
#line 596
  if (tmp___1 != 0 || ldv_s_mtdoops_notifier_mtd_notifier != 0) {
#line 598
    goto ldv_17763;
  } else {

  }

#line 660
  ldv_handler_precall();
#line 661
  mtdoops_exit();
  ldv_final: 
#line 664
  ldv_check_final_state();
#line 667
  return;
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 676
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 678
  __ldv_spin_lock(ldv_func_arg1);
#line 679
  return;
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 686
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 688
  __ldv_spin_unlock(ldv_func_arg1);
#line 689
  return;
}
}
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 696
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 696
  ldv_func_res = tmp;
#line 698
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 698
  return (tmp___0);
#line 700
  return (ldv_func_res);
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 708
  ldv_spin_lock_siglock_of_sighand_struct();
#line 710
  __ldv_spin_lock(ldv_func_arg1);
#line 711
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_unlock_5(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 718
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 720
  __ldv_spin_unlock(ldv_func_arg1);
#line 721
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 728
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 730
  __ldv_spin_lock(ldv_func_arg1);
#line 731
  return;
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 738
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 740
  __ldv_spin_unlock(ldv_func_arg1);
#line 741
  return;
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/mtd/mtdoops.c.prepared"
void ldv___ldv_spin_unlock_8(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 748
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 750
  __ldv_spin_unlock(ldv_func_arg1);
#line 751
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 139
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 148
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 183
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 264
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_siglock_of_sighand_struct = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 273
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_siglock_of_sighand_struct = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_siglock_of_sighand_struct = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 308
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_siglock_of_sighand_struct = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 388
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 390
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 392
  ldv_spin_siglock_of_sighand_struct = 1;
#line 393
  return;
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/mtd/mtdoops.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 399
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 399
    ldv_error();
  }
#line 401
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 401
    ldv_error();
  }
#line 403
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 403
    ldv_error();
  }
#line 404
  return;
}
}
