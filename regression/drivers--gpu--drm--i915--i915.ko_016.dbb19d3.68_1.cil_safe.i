/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 22 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 120 "include/linux/types.h"
typedef __u32 uint32_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 195 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 200 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 7 "include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 50 "include/asm/ds.h"
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
#line 209 "include/asm/ds.h"
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2] ;
   ds_ovfl_callback_t callback[2] ;
   void *buffer[2] ;
   unsigned int pages[2] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
#line 99 "include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 8 "include/asm/math_emu.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 59 "include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 191
struct pid;
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "include/asm/page.h"
struct __anonstruct_pgd_t_9 {
   pgdval_t pgd ;
};
#line 56 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_9 pgd_t;
#line 57 "include/asm/page.h"
struct __anonstruct_pgprot_t_10 {
   pgprotval_t pgprot ;
};
#line 57 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_10 pgprot_t;
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_14 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_15 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "include/asm/desc_defs.h"
union __anonunion____missing_field_name_13 {
   struct __anonstruct____missing_field_name_14 __annonCompField2 ;
   struct __anonstruct____missing_field_name_15 __annonCompField3 ;
};
#line 22 "include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_13 __annonCompField4 ;
} __attribute__((__packed__)) ;
#line 141 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_18 {
   unsigned long bits[((8UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 141 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_18 cpumask_t;
#line 37 "include/asm/paravirt.h"
struct thread_struct;
#line 326
struct raw_spinlock;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 88
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 285 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 301 "include/asm/processor.h"
struct __anonstruct____missing_field_name_22 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "include/asm/processor.h"
struct __anonstruct____missing_field_name_23 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "include/asm/processor.h"
union __anonunion____missing_field_name_21 {
   struct __anonstruct____missing_field_name_22 __annonCompField5 ;
   struct __anonstruct____missing_field_name_23 __annonCompField6 ;
};
#line 301 "include/asm/processor.h"
union __anonunion____missing_field_name_24 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 301 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_21 __annonCompField7 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_24 __annonCompField8 ;
} __attribute__((__aligned__(16))) ;
#line 336 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 356 "include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 362 "include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 368 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 387 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 589 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
#line 589 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_27 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_28 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_29 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_26 {
   struct __anonstruct____missing_field_name_27 __annonCompField9 ;
   struct __anonstruct_futex_28 futex ;
   struct __anonstruct_nanosleep_29 nanosleep ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_26 __annonCompField10 ;
};
#line 24 "include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 8 "include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_30 {
   unsigned int lock ;
};
#line 14 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_30 raw_rwlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 7 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 25 "include/linux/lockdep.h"
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
#line 68 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 72 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 79 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[LOCK_USAGE_STATES] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
};
#line 162 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 201 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_31 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_31 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_32 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_32 rwlock_t;
#line 19 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_33 {
   int counter ;
};
#line 19 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_33 atomic_t;
#line 196 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_34 {
   long counter ;
};
#line 196 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_34 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 14 "include/linux/time.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[(((unsigned long )(1 << 6) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 67 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 665 "include/linux/mmzone.h"
struct file;
#line 37 "include/linux/pm.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 145 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
};
#line 203 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 334
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 344 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_84 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_84 mm_context_t;
#line 237 "include/asm/topology.h"
struct pci_bus;
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 40 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 27 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 64 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute *attr , struct vm_area_struct *vma ) ;
};
#line 76 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
#line 104 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 110 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 117 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 151 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 18 "include/linux/marker.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 35 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
#line 15 "include/asm/tsc.h"
typedef unsigned long long cycles_t;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 9 "include/linux/timer.h"
struct tvec_base;
#line 11 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 181
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 35 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 70 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 6] ;
   struct kmem_cache_cpu *cpu_slab[8] ;
};
#line 10 "include/asm/local.h"
struct __anonstruct_local_t_95 {
   atomic_long_t a ;
};
#line 10 "include/asm/local.h"
typedef struct __anonstruct_local_t_95 local_t;
#line 5 "include/asm/module.h"
struct mod_arch_specific {

};
#line 33 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 47 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 69
struct exception_table_entry;
#line 220 "include/linux/module.h"
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 225
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 232
struct module_param_attrs;
#line 232
struct module_sect_attrs;
#line 232
struct module_notes_attrs;
#line 232 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8] ;
};
#line 562
struct device_driver;
#line 36 "include/linux/miscdevice.h"
struct file_operations;
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 50 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 78
struct dcookie_struct;
#line 82
struct inode;
#line 82 "include/linux/dcache.h"
union __anonunion_d_u_96 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 82
struct dentry_operations;
#line 82
struct super_block;
#line 82 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_96 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
#line 129 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 95 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 95 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 14 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 303 "include/linux/fs.h"
struct export_operations;
#line 305
struct iovec;
#line 307
struct kiocb;
#line 308
struct pipe_inode_info;
#line 309
struct poll_table_struct;
#line 310
struct kstatfs;
#line 355 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 98 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 21 "include/linux/dqblk_v1.h"
struct v1_mem_dqinfo {

};
#line 20 "include/linux/dqblk_v2.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 203
struct quota_format_type;
#line 205 "include/linux/quota.h"
union __anonunion_u_100 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 205 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_100 u ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 275 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 286 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 302 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 316 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 330 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 416 "include/linux/fs.h"
struct address_space;
#line 417
struct writeback_control;
#line 460 "include/linux/fs.h"
union __anonunion_arg_102 {
   char *buf ;
   void *data ;
};
#line 460 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_101 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_102 arg ;
   int error ;
};
#line 460 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_101 read_descriptor_t;
#line 473 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 529
struct backing_dev_info;
#line 530 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 554
struct hd_struct;
#line 554
struct gendisk;
#line 554 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 624
struct inode_operations;
#line 624
struct file_lock;
#line 624
struct cdev;
#line 624 "include/linux/fs.h"
union __anonunion____missing_field_name_103 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 624
struct dnotify_struct;
#line 624 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_103 __annonCompField12 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 779 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 790 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 813 "include/linux/fs.h"
union __anonunion_f_u_104 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 813 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_104 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 932
struct files_struct;
#line 932 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 934 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 939 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 961 "include/linux/fs.h"
struct fasync_struct;
#line 961 "include/linux/fs.h"
struct __anonstruct_afs_106 {
   struct list_head link ;
   int state ;
};
#line 961 "include/linux/fs.h"
union __anonunion_fl_u_105 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_106 afs ;
};
#line 961 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_105 fl_u ;
};
#line 1073 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1108
struct file_system_type;
#line 1108
struct super_operations;
#line 1108
struct xattr_handler;
#line 1108
struct mtd_info;
#line 1108 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1230 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1295 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1325 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1354
struct seq_file;
#line 1368 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1550 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1927
struct bio;
#line 49 "include/linux/proc_fs.h"
typedef int read_proc_t(char *page , char **start , off_t off , int count , int *eof ,
                        void *data );
#line 51 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file *file , char const   *buffer , unsigned long count ,
                         void *data );
#line 54 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 17 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 18 "include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 26
struct pci_dev;
#line 20 "include/linux/klist.h"
struct klist_node;
#line 21 "include/linux/klist.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 40 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 4 "include/asm/device.h"
struct dma_mapping_ops;
#line 4 "include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 32 "include/linux/device.h"
struct driver_private;
#line 33
struct class;
#line 34
struct class_private;
#line 35
struct bus_type;
#line 36
struct bus_type_private;
#line 38 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 51
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 205
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 285 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct pm_ops *pm ;
};
#line 298 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 358 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 367
struct dma_coherent_mem;
#line 367 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 59 "include/linux/pci.h"
struct hotplug_slot;
#line 59 "include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 81 "include/linux/pci.h"
typedef int pci_power_t;
#line 95 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 97
enum pci_channel_state {
    pci_channel_io_normal = (pci_channel_state_t )1,
    pci_channel_io_frozen = (pci_channel_state_t )2,
    pci_channel_io_perm_failure = (pci_channel_state_t )3
} ;
#line 121 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 131 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 143
struct pcie_link_state;
#line 144
struct pci_vpd;
#line 149
struct pci_driver;
#line 149 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12] ;
   unsigned int transparent : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_added : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int block_ucfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12] ;
   struct bin_attribute *res_attr_wc[12] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 282
struct pci_ops;
#line 282 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 328 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus *bus , unsigned int devfn , int where , int size , u32 *val ) ;
   int (*write)(struct pci_bus *bus , unsigned int devfn , int where , int size ,
                u32 val ) ;
};
#line 347 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
   unsigned int use_driver_data : 1 ;
};
#line 360 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 380 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *dev , enum pci_channel_state error ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *dev ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *dev ) ;
   void (*resume)(struct pci_dev *dev ) ;
};
#line 401 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev *dev , struct pci_device_id  const  *id ) ;
   void (*remove)(struct pci_dev *dev ) ;
   int (*suspend)(struct pci_dev *dev , pm_message_t state ) ;
   int (*suspend_late)(struct pci_dev *dev , pm_message_t state ) ;
   int (*resume_early)(struct pci_dev *dev ) ;
   int (*resume)(struct pci_dev *dev ) ;
   void (*shutdown)(struct pci_dev *dev ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 6 "include/asm/scatterlist.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_112 {
   u16 inuse ;
   u16 objects ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_111 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_112 __annonCompField13 ;
};
#line 39 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_114 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_113 {
   struct __anonstruct____missing_field_name_114 __annonCompField15 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 39 "include/linux/mm_types.h"
union __anonunion____missing_field_name_115 {
   unsigned long index ;
   void *freelist ;
};
#line 39 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_111 __annonCompField14 ;
   union __anonunion____missing_field_name_113 __annonCompField16 ;
   union __anonunion____missing_field_name_115 __annonCompField17 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 108 "include/linux/mm_types.h"
struct __anonstruct_vm_set_117 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 108 "include/linux/mm_types.h"
union __anonunion_shared_116 {
   struct __anonstruct_vm_set_117 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 108
struct anon_vma;
#line 108
struct vm_operations_struct;
#line 108
struct mempolicy;
#line 108 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_116 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 165 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 170 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 176
struct kioctx;
#line 176
struct mmu_notifier_mm;
#line 176 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 18) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 20 "include/linux/mm.h"
struct user_struct;
#line 153 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 170 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *area ) ;
   void (*close)(struct vm_area_struct *area ) ;
   int (*fault)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*page_mkwrite)(struct vm_area_struct *vma , struct page *page ) ;
   int (*access)(struct vm_area_struct *vma , unsigned long addr , void *buf , int len ,
                 int write ) ;
   int (*set_policy)(struct vm_area_struct *vma , struct mempolicy *new ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *vma , unsigned long addr ) ;
   int (*migrate)(struct vm_area_struct *vma , nodemask_t const   *from , nodemask_t const   *to ,
                  unsigned long flags ) ;
};
#line 19 "include/asm/dma-mapping.h"
struct dma_mapping_ops {
   int (*mapping_error)(struct device *dev , dma_addr_t dma_addr ) ;
   void *(*alloc_coherent)(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                           gfp_t gfp ) ;
   void (*free_coherent)(struct device *dev , size_t size , void *vaddr , dma_addr_t dma_handle ) ;
   dma_addr_t (*map_single)(struct device *hwdev , phys_addr_t ptr , size_t size ,
                            int direction ) ;
   void (*unmap_single)(struct device *dev , dma_addr_t addr , size_t size , int direction ) ;
   void (*sync_single_for_cpu)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                               int direction ) ;
   void (*sync_single_for_device)(struct device *hwdev , dma_addr_t dma_handle , size_t size ,
                                  int direction ) ;
   void (*sync_single_range_for_cpu)(struct device *hwdev , dma_addr_t dma_handle ,
                                     unsigned long offset , size_t size , int direction ) ;
   void (*sync_single_range_for_device)(struct device *hwdev , dma_addr_t dma_handle ,
                                        unsigned long offset , size_t size , int direction ) ;
   void (*sync_sg_for_cpu)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                           int direction ) ;
   void (*sync_sg_for_device)(struct device *hwdev , struct scatterlist *sg , int nelems ,
                              int direction ) ;
   int (*map_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   void (*unmap_sg)(struct device *hwdev , struct scatterlist *sg , int nents , int direction ) ;
   int (*dma_supported)(struct device *hwdev , u64 mask ) ;
   int is_phys ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "include/asm/signal.h"
struct siginfo;
#line 30 "include/asm/signal.h"
struct __anonstruct_sigset_t_119 {
   unsigned long sig[64 / 64] ;
};
#line 30 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_119 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 165 "include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 172 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_121 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_122 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_123 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_124 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_125 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_126 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_120 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_121 _kill ;
   struct __anonstruct__timer_122 _timer ;
   struct __anonstruct__rt_123 _rt ;
   struct __anonstruct__sigchld_124 _sigchld ;
   struct __anonstruct__sigfault_125 _sigfault ;
   struct __anonstruct__sigpoll_126 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_120 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_129 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_129 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 24 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 25
struct hrtimer_cpu_base;
#line 38
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 60
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_PERCPU = 3,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 4
} ;
#line 122 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 163 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer *t , struct hrtimer_clock_base *b , ktime_t n ) ;
};
#line 199 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 17 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 140
struct cfs_rq;
#line 141
struct task_group;
#line 335
struct nsproxy;
#line 57 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 86 "include/linux/aio.h"
union __anonunion_ki_obj_131 {
   void *user ;
   struct task_struct *tsk ;
};
#line 86 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_131 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 166 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 413 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 435 "include/linux/sched.h"
union __anonunion____missing_field_name_132 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 435 "include/linux/sched.h"
union __anonunion____missing_field_name_133 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 435
struct tty_struct;
#line 435
struct taskstats;
#line 435
struct tty_audit_buf;
#line 435 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion____missing_field_name_132 __annonCompField18 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_133 __annonCompField19 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct list_head cpu_timers[3] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 581 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 622
struct reclaim_state;
#line 625 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 646 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 691
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 735 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 752
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 770 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 847
struct io_context;
#line 850 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
#line 887
struct audit_context;
#line 892
struct rq;
#line 895 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 943 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 957 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1014
struct rt_rq;
#line 1014 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1030
struct linux_binfmt;
#line 1030
struct css_set;
#line 1030
struct compat_robust_list_head;
#line 1030 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48UL] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
};
#line 12 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 95 "include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 15 "include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 150 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 154 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 35 "include/linux/agp_backend.h"
enum chipset_type {
    NOT_SUPPORTED = 0,
    SUPPORTED = 1
} ;
#line 40 "include/linux/agp_backend.h"
struct agp_version {
   u16 major ;
   u16 minor ;
};
#line 45 "include/linux/agp_backend.h"
struct agp_kern_info {
   struct agp_version version ;
   struct pci_dev *device ;
   enum chipset_type chipset ;
   unsigned long mode ;
   unsigned long aper_base ;
   size_t aper_size ;
   int max_memory ;
   int current_memory ;
   bool cant_use_aperture ;
   unsigned long page_mask ;
   struct vm_operations_struct *vm_ops ;
};
#line 67
struct agp_bridge_data;
#line 33 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 19 "include/linux/irqreturn.h"
typedef int irqreturn_t;
#line 63 "include/drm/drm.h"
typedef unsigned int drm_handle_t;
#line 65 "include/drm/drm.h"
typedef unsigned int drm_drawable_t;
#line 66 "include/drm/drm.h"
typedef unsigned int drm_magic_t;
#line 95 "include/drm/drm.h"
struct drm_tex_region {
   unsigned char next ;
   unsigned char prev ;
   unsigned char in_use ;
   unsigned char padding ;
   unsigned int age ;
};
#line 110 "include/drm/drm.h"
struct drm_hw_lock {
   unsigned int volatile   lock ;
   char padding[60] ;
};
#line 169
enum drm_map_type {
    _DRM_FRAME_BUFFER = 0,
    _DRM_REGISTERS = 1,
    _DRM_SHM = 2,
    _DRM_AGP = 3,
    _DRM_SCATTER_GATHER = 4,
    _DRM_CONSISTENT = 5
} ;
#line 181
enum drm_map_flags {
    _DRM_RESTRICTED = 1,
    _DRM_READ_ONLY = 2,
    _DRM_LOCKED = 4,
    _DRM_KERNEL = 8,
    _DRM_WRITE_COMBINING = 16,
    _DRM_CONTAINS_LOCK = 32,
    _DRM_REMOVABLE = 64,
    _DRM_DRIVER = 128
} ;
#line 203 "include/drm/drm.h"
struct drm_map {
   unsigned long offset ;
   unsigned long size ;
   enum drm_map_type type ;
   enum drm_map_flags flags ;
   void *handle ;
   int mtrr ;
};
#line 226
enum drm_stat_type {
    _DRM_STAT_LOCK = 0,
    _DRM_STAT_OPENS = 1,
    _DRM_STAT_CLOSES = 2,
    _DRM_STAT_IOCTLS = 3,
    _DRM_STAT_LOCKS = 4,
    _DRM_STAT_UNLOCKS = 5,
    _DRM_STAT_VALUE = 6,
    _DRM_STAT_BYTE = 7,
    _DRM_STAT_COUNT = 8,
    _DRM_STAT_IRQ = 9,
    _DRM_STAT_PRIMARY = 10,
    _DRM_STAT_SECONDARY = 11,
    _DRM_STAT_DMA = 12,
    _DRM_STAT_SPECIAL = 13,
    _DRM_STAT_MISSED = 14
} ;
#line 391
enum drm_ctx_flags {
    _DRM_CONTEXT_PRESERVED = 1,
    _DRM_CONTEXT_2DONLY = 2
} ;
#line 566 "include/drm/drm.h"
struct drm_set_version {
   int drm_di_major ;
   int drm_di_minor ;
   int drm_dd_major ;
   int drm_dd_minor ;
};
#line 51 "include/linux/idr.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[1 << 6] ;
   int count ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 84 "include/drm/drmP.h"
struct drm_file;
#line 85
struct drm_device;
#line 45 "include/drm/drm_hashtab.h"
struct drm_open_hash {
   unsigned int size ;
   unsigned int order ;
   unsigned int fill ;
   struct hlist_head *table ;
   int use_vmalloc ;
};
#line 270 "include/drm/drmP.h"
typedef int drm_ioctl_t(struct drm_device *dev , void *data , struct drm_file *file_priv );
#line 280 "include/drm/drmP.h"
struct drm_ioctl_desc {
   unsigned int cmd ;
   drm_ioctl_t *func ;
   int flags ;
};
#line 308
enum __anonenum_list_144 {
    DRM_LIST_NONE = 0,
    DRM_LIST_FREE = 1,
    DRM_LIST_WAIT = 2,
    DRM_LIST_PEND = 3,
    DRM_LIST_PRIO = 4,
    DRM_LIST_RECLAIM = 5
} ;
#line 308 "include/drm/drmP.h"
struct drm_buf {
   int idx ;
   int total ;
   int order ;
   int used ;
   unsigned long offset ;
   void *address ;
   unsigned long bus_address ;
   struct drm_buf *next ;
   int volatile   waiting ;
   int volatile   pending ;
   wait_queue_head_t dma_wait ;
   struct drm_file *file_priv ;
   int context ;
   int while_locked ;
   enum __anonenum_list_144 list ;
   int dev_priv_size ;
   void *dev_private ;
};
#line 337 "include/drm/drmP.h"
struct drm_waitlist {
   int count ;
   struct drm_buf **bufs ;
   struct drm_buf **rp ;
   struct drm_buf **wp ;
   struct drm_buf **end ;
   spinlock_t read_lock ;
   spinlock_t write_lock ;
};
#line 347 "include/drm/drmP.h"
struct drm_freelist {
   int initialized ;
   atomic_t count ;
   struct drm_buf *next ;
   wait_queue_head_t waiting ;
   int low_mark ;
   int high_mark ;
   atomic_t wfh ;
   spinlock_t lock ;
};
#line 359 "include/drm/drmP.h"
struct drm_dma_handle {
   dma_addr_t busaddr ;
   void *vaddr ;
   size_t size ;
};
#line 359 "include/drm/drmP.h"
typedef struct drm_dma_handle drm_dma_handle_t;
#line 368 "include/drm/drmP.h"
struct drm_buf_entry {
   int buf_size ;
   int buf_count ;
   struct drm_buf *buflist ;
   int seg_count ;
   int page_order ;
   struct drm_dma_handle **seglist ;
   struct drm_freelist freelist ;
};
#line 380
struct drm_minor;
#line 380 "include/drm/drmP.h"
struct drm_file {
   int authenticated ;
   int master ;
   pid_t pid ;
   uid_t uid ;
   drm_magic_t magic ;
   unsigned long ioctl_count ;
   struct list_head lhead ;
   struct drm_minor *minor ;
   int remove_auth_on_close ;
   unsigned long lock_count ;
   struct idr object_idr ;
   spinlock_t table_lock ;
   struct file *filp ;
   void *driver_priv ;
};
#line 400 "include/drm/drmP.h"
struct drm_queue {
   atomic_t use_count ;
   atomic_t finalization ;
   atomic_t block_count ;
   atomic_t block_read ;
   wait_queue_head_t read_queue ;
   atomic_t block_write ;
   wait_queue_head_t write_queue ;
   atomic_t total_queued ;
   atomic_t total_flushed ;
   atomic_t total_locks ;
   enum drm_ctx_flags flags ;
   struct drm_waitlist waitlist ;
   wait_queue_head_t flush_queue ;
};
#line 419 "include/drm/drmP.h"
struct drm_lock_data {
   struct drm_hw_lock *hw_lock ;
   struct drm_file *file_priv ;
   wait_queue_head_t lock_queue ;
   unsigned long lock_time ;
   spinlock_t spinlock ;
   uint32_t kernel_waiters ;
   uint32_t user_waiters ;
   int idle_has_lock ;
};
#line 434
enum __anonenum_flags_145 {
    _DRM_DMA_USE_AGP = 1,
    _DRM_DMA_USE_SG = 2,
    _DRM_DMA_USE_FB = 4,
    _DRM_DMA_USE_PCI_RO = 8
} ;
#line 434 "include/drm/drmP.h"
struct drm_device_dma {
   struct drm_buf_entry bufs[22 + 1] ;
   int buf_count ;
   struct drm_buf **buflist ;
   int seg_count ;
   int page_count ;
   unsigned long *pagelist ;
   unsigned long byte_count ;
   enum __anonenum_flags_145 flags ;
};
#line 468 "include/drm/drmP.h"
struct drm_agp_head {
   struct agp_kern_info agp_info ;
   struct list_head memory ;
   unsigned long mode ;
   struct agp_bridge_data *bridge ;
   int enabled ;
   int acquired ;
   unsigned long base ;
   int agp_mtrr ;
   int cant_use_aperture ;
   unsigned long page_mask ;
};
#line 484 "include/drm/drmP.h"
struct drm_sg_mem {
   unsigned long handle ;
   void *virtual ;
   int pages ;
   struct page **pagelist ;
   dma_addr_t *busaddr ;
};
#line 492 "include/drm/drmP.h"
struct drm_sigdata {
   int context ;
   struct drm_hw_lock *lock ;
};
#line 502
struct drm_mm;
#line 512 "include/drm/drmP.h"
struct drm_mm {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
};
#line 528 "include/drm/drmP.h"
typedef struct drm_map drm_local_map_t;
#line 569 "include/drm/drmP.h"
struct drm_gem_object {
   struct kref refcount ;
   struct kref handlecount ;
   struct drm_device *dev ;
   struct file *filp ;
   size_t size ;
   int name ;
   uint32_t read_domains ;
   uint32_t write_domain ;
   uint32_t pending_read_domains ;
   uint32_t pending_write_domain ;
   void *driver_private ;
};
#line 620 "include/drm/drmP.h"
struct drm_driver {
   int (*load)(struct drm_device * , unsigned long flags ) ;
   int (*firstopen)(struct drm_device * ) ;
   int (*open)(struct drm_device * , struct drm_file * ) ;
   void (*preclose)(struct drm_device * , struct drm_file *file_priv ) ;
   void (*postclose)(struct drm_device * , struct drm_file * ) ;
   void (*lastclose)(struct drm_device * ) ;
   int (*unload)(struct drm_device * ) ;
   int (*suspend)(struct drm_device * , pm_message_t state ) ;
   int (*resume)(struct drm_device * ) ;
   int (*dma_ioctl)(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
   void (*dma_ready)(struct drm_device * ) ;
   int (*dma_quiescent)(struct drm_device * ) ;
   int (*context_ctor)(struct drm_device *dev , int context ) ;
   int (*context_dtor)(struct drm_device *dev , int context ) ;
   int (*kernel_context_switch)(struct drm_device *dev , int old , int new ) ;
   void (*kernel_context_switch_unlock)(struct drm_device *dev ) ;
   int (*dri_library_name)(struct drm_device *dev , char *buf ) ;
   u32 (*get_vblank_counter)(struct drm_device *dev , int crtc ) ;
   int (*enable_vblank)(struct drm_device *dev , int crtc ) ;
   void (*disable_vblank)(struct drm_device *dev , int crtc ) ;
   int (*device_is_agp)(struct drm_device *dev ) ;
   irqreturn_t (*irq_handler)(int irq , void *arg ) ;
   void (*irq_preinstall)(struct drm_device *dev ) ;
   int (*irq_postinstall)(struct drm_device *dev ) ;
   void (*irq_uninstall)(struct drm_device *dev ) ;
   void (*reclaim_buffers)(struct drm_device *dev , struct drm_file *file_priv ) ;
   void (*reclaim_buffers_locked)(struct drm_device *dev , struct drm_file *file_priv ) ;
   void (*reclaim_buffers_idlelocked)(struct drm_device *dev , struct drm_file *file_priv ) ;
   unsigned long (*get_map_ofs)(struct drm_map *map ) ;
   unsigned long (*get_reg_ofs)(struct drm_device *dev ) ;
   void (*set_version)(struct drm_device *dev , struct drm_set_version *sv ) ;
   int (*proc_init)(struct drm_minor *minor ) ;
   void (*proc_cleanup)(struct drm_minor *minor ) ;
   int (*gem_init_object)(struct drm_gem_object *obj ) ;
   void (*gem_free_object)(struct drm_gem_object *obj ) ;
   int major ;
   int minor ;
   int patchlevel ;
   char *name ;
   char *desc ;
   char *date ;
   u32 driver_features ;
   int dev_priv_size ;
   struct drm_ioctl_desc *ioctls ;
   int num_ioctls ;
   struct file_operations fops ;
   struct pci_driver pci_driver ;
};
#line 748 "include/drm/drmP.h"
struct drm_minor {
   int index ;
   int type ;
   dev_t device ;
   struct device kdev ;
   struct drm_device *dev ;
   struct proc_dir_entry *dev_root ;
};
#line 761 "include/drm/drmP.h"
struct drm_device {
   char *unique ;
   int unique_len ;
   char *devname ;
   int if_version ;
   int blocked ;
   spinlock_t count_lock ;
   struct mutex struct_mutex ;
   int open_count ;
   atomic_t ioctl_count ;
   atomic_t vma_count ;
   int buf_use ;
   atomic_t buf_alloc ;
   unsigned long counters ;
   enum drm_stat_type types[15] ;
   atomic_t counts[15] ;
   struct list_head filelist ;
   struct drm_open_hash magiclist ;
   struct list_head magicfree ;
   struct list_head maplist ;
   int map_count ;
   struct drm_open_hash map_hash ;
   struct list_head ctxlist ;
   int ctx_count ;
   struct mutex ctxlist_mutex ;
   struct idr ctx_idr ;
   struct list_head vmalist ;
   struct drm_lock_data lock ;
   int queue_count ;
   int queue_reserved ;
   int queue_slots ;
   struct drm_queue **queuelist ;
   struct drm_device_dma *dma ;
   int irq ;
   int irq_enabled ;
   long volatile   context_flag ;
   long volatile   interrupt_flag ;
   long volatile   dma_flag ;
   struct timer_list timer ;
   wait_queue_head_t context_wait ;
   int last_checked ;
   int last_context ;
   unsigned long last_switch ;
   struct work_struct work ;
   int vblank_disable_allowed ;
   wait_queue_head_t *vbl_queue ;
   atomic_t *_vblank_count ;
   spinlock_t vbl_lock ;
   struct list_head *vbl_sigs ;
   atomic_t vbl_signal_pending ;
   atomic_t *vblank_refcount ;
   u32 *last_vblank ;
   int *vblank_enabled ;
   int *vblank_inmodeset ;
   struct timer_list vblank_disable_timer ;
   u32 max_vblank_count ;
   spinlock_t tasklet_lock ;
   void (*locked_tasklet_func)(struct drm_device *dev ) ;
   cycles_t ctx_start ;
   cycles_t lck_start ;
   struct fasync_struct *buf_async ;
   wait_queue_head_t buf_readers ;
   wait_queue_head_t buf_writers ;
   struct drm_agp_head *agp ;
   struct pci_dev *pdev ;
   int pci_vendor ;
   int pci_device ;
   struct drm_sg_mem *sg ;
   int num_crtcs ;
   void *dev_private ;
   struct drm_sigdata sigdata ;
   sigset_t sigmask ;
   struct drm_driver *driver ;
   drm_local_map_t *agp_buffer_map ;
   unsigned int agp_buffer_token ;
   struct drm_minor *primary ;
   spinlock_t drw_lock ;
   struct idr drw_idr ;
   spinlock_t object_name_lock ;
   struct idr object_name_idr ;
   atomic_t object_count ;
   atomic_t object_memory ;
   atomic_t pin_count ;
   atomic_t pin_memory ;
   atomic_t gtt_count ;
   atomic_t gtt_memory ;
   uint32_t gtt_total ;
   uint32_t invalidate_domains ;
   uint32_t flush_domains ;
};
#line 66 "include/drm/i915_drm.h"
struct _drm_i915_sarea {
   struct drm_tex_region texList[255 + 1] ;
   int last_upload ;
   int last_enqueue ;
   int last_dispatch ;
   int ctxOwner ;
   int texAge ;
   int pf_enabled ;
   int pf_active ;
   int pf_current_page ;
   int perf_boxes ;
   int width ;
   int height ;
   drm_handle_t front_handle ;
   int front_offset ;
   int front_size ;
   drm_handle_t back_handle ;
   int back_offset ;
   int back_size ;
   drm_handle_t depth_handle ;
   int depth_offset ;
   int depth_size ;
   drm_handle_t tex_handle ;
   int tex_offset ;
   int tex_size ;
   int log_tex_granularity ;
   int pitch ;
   int rotation ;
   int rotated_offset ;
   int rotated_size ;
   int rotated_pitch ;
   int virtualX ;
   int virtualY ;
   unsigned int front_tiled ;
   unsigned int back_tiled ;
   unsigned int depth_tiled ;
   unsigned int rotated_tiled ;
   unsigned int rotated2_tiled ;
   int pipeA_x ;
   int pipeA_y ;
   int pipeA_w ;
   int pipeA_h ;
   int pipeB_x ;
   int pipeB_y ;
   int pipeB_w ;
   int pipeB_h ;
};
#line 66 "include/drm/i915_drm.h"
typedef struct _drm_i915_sarea drm_i915_sarea_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct _drm_i915_ring_buffer {
   int tail_mask ;
   unsigned long Size ;
   u8 *virtual_start ;
   int head ;
   int tail ;
   int space ;
   drm_local_map_t map ;
   struct drm_gem_object *ring_obj ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_ring_buffer drm_i915_ring_buffer_t;
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct mem_block {
   struct mem_block *next ;
   struct mem_block *prev ;
   int start ;
   int size ;
   struct drm_file *file_priv ;
};
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct _drm_i915_vbl_swap {
   struct list_head head ;
   drm_drawable_t drw_id ;
   unsigned int plane ;
   unsigned int sequence ;
};
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_vbl_swap drm_i915_vbl_swap_t;
#line 97
struct opregion_header;
#line 98
struct opregion_acpi;
#line 99
struct opregion_swsci;
#line 100
struct opregion_asle;
#line 102 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_opregion {
   struct opregion_header *header ;
   struct opregion_acpi *acpi ;
   struct opregion_swsci *swsci ;
   struct opregion_asle *asle ;
   int enabled ;
};
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_147 {
   struct drm_mm gtt_space ;
   struct list_head active_list ;
   struct list_head flushing_list ;
   struct list_head inactive_list ;
   struct list_head request_list ;
   struct delayed_work retire_work ;
   struct work_struct vblank_work ;
   uint32_t next_gem_seqno ;
   uint32_t waiting_gem_seqno ;
   uint32_t irq_gem_seqno ;
   int suspended ;
   int wedged ;
   uint32_t bit_6_swizzle_x ;
   uint32_t bit_6_swizzle_y ;
};
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_private {
   struct drm_device *dev ;
   drm_local_map_t *sarea ;
   drm_local_map_t *mmio_map ;
   drm_i915_sarea_t *sarea_priv ;
   drm_i915_ring_buffer_t ring ;
   drm_dma_handle_t *status_page_dmah ;
   void *hw_status_page ;
   dma_addr_t dma_status_page ;
   uint32_t counter ;
   unsigned int status_gfx_addr ;
   drm_local_map_t hws_map ;
   struct drm_gem_object *hws_obj ;
   unsigned int cpp ;
   int back_offset ;
   int front_offset ;
   int current_page ;
   int page_flipping ;
   wait_queue_head_t irq_queue ;
   atomic_t irq_received ;
   spinlock_t user_irq_lock ;
   int user_irq_refcount ;
   u32 irq_mask_reg ;
   int tex_lru_log_granularity ;
   int allow_batchbuffer ;
   struct mem_block *agp_heap ;
   unsigned int sr01 ;
   unsigned int adpa ;
   unsigned int ppcr ;
   unsigned int dvob ;
   unsigned int dvoc ;
   unsigned int lvds ;
   int vblank_pipe ;
   spinlock_t swaps_lock ;
   drm_i915_vbl_swap_t vbl_swaps ;
   unsigned int swaps_pending ;
   struct intel_opregion opregion ;
   u8 saveLBB ;
   u32 saveDSPACNTR ;
   u32 saveDSPBCNTR ;
   u32 saveDSPARB ;
   u32 savePIPEACONF ;
   u32 savePIPEBCONF ;
   u32 savePIPEASRC ;
   u32 savePIPEBSRC ;
   u32 saveFPA0 ;
   u32 saveFPA1 ;
   u32 saveDPLL_A ;
   u32 saveDPLL_A_MD ;
   u32 saveHTOTAL_A ;
   u32 saveHBLANK_A ;
   u32 saveHSYNC_A ;
   u32 saveVTOTAL_A ;
   u32 saveVBLANK_A ;
   u32 saveVSYNC_A ;
   u32 saveBCLRPAT_A ;
   u32 savePIPEASTAT ;
   u32 saveDSPASTRIDE ;
   u32 saveDSPASIZE ;
   u32 saveDSPAPOS ;
   u32 saveDSPAADDR ;
   u32 saveDSPASURF ;
   u32 saveDSPATILEOFF ;
   u32 savePFIT_PGM_RATIOS ;
   u32 saveBLC_PWM_CTL ;
   u32 saveBLC_PWM_CTL2 ;
   u32 saveFPB0 ;
   u32 saveFPB1 ;
   u32 saveDPLL_B ;
   u32 saveDPLL_B_MD ;
   u32 saveHTOTAL_B ;
   u32 saveHBLANK_B ;
   u32 saveHSYNC_B ;
   u32 saveVTOTAL_B ;
   u32 saveVBLANK_B ;
   u32 saveVSYNC_B ;
   u32 saveBCLRPAT_B ;
   u32 savePIPEBSTAT ;
   u32 saveDSPBSTRIDE ;
   u32 saveDSPBSIZE ;
   u32 saveDSPBPOS ;
   u32 saveDSPBADDR ;
   u32 saveDSPBSURF ;
   u32 saveDSPBTILEOFF ;
   u32 saveVGA0 ;
   u32 saveVGA1 ;
   u32 saveVGA_PD ;
   u32 saveVGACNTRL ;
   u32 saveADPA ;
   u32 saveLVDS ;
   u32 savePP_ON_DELAYS ;
   u32 savePP_OFF_DELAYS ;
   u32 saveDVOA ;
   u32 saveDVOB ;
   u32 saveDVOC ;
   u32 savePP_ON ;
   u32 savePP_OFF ;
   u32 savePP_CONTROL ;
   u32 savePP_DIVISOR ;
   u32 savePFIT_CONTROL ;
   u32 save_palette_a[256] ;
   u32 save_palette_b[256] ;
   u32 saveFBC_CFB_BASE ;
   u32 saveFBC_LL_BASE ;
   u32 saveFBC_CONTROL ;
   u32 saveFBC_CONTROL2 ;
   u32 saveIER ;
   u32 saveIIR ;
   u32 saveIMR ;
   u32 saveCACHE_MODE_0 ;
   u32 saveD_STATE ;
   u32 saveCG_2D_DIS ;
   u32 saveMI_ARB_STATE ;
   u32 saveSWF0[16] ;
   u32 saveSWF1[16] ;
   u32 saveSWF2[3] ;
   u8 saveMSR ;
   u8 saveSR[8] ;
   u8 saveGR[25] ;
   u8 saveAR_INDEX ;
   u8 saveAR[21] ;
   u8 saveDACMASK ;
   u8 saveDACDATA[256 * 3] ;
   u8 saveCR[37] ;
   struct __anonstruct_mm_147 mm ;
};
#line 123 "include/linux/types.h"
typedef __u64 uint64_t;
#line 11 "include/asm/pda.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 368 "include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100] ;
};
#line 77 "include/drm/drm.h"
struct drm_clip_rect {
   unsigned short x1 ;
   unsigned short y1 ;
   unsigned short x2 ;
   unsigned short y2 ;
};
#line 42 "include/drm/i915_drm.h"
enum __anonenum_func_146 {
    I915_INIT_DMA = 1,
    I915_CLEANUP_DMA = 2,
    I915_RESUME_DMA = 3
} ;
#line 42 "include/drm/i915_drm.h"
struct _drm_i915_init {
   enum __anonenum_func_146 func ;
   unsigned int mmio_offset ;
   int sarea_priv_offset ;
   unsigned int ring_start ;
   unsigned int ring_end ;
   unsigned int ring_size ;
   unsigned int front_offset ;
   unsigned int back_offset ;
   unsigned int depth_offset ;
   unsigned int w ;
   unsigned int h ;
   unsigned int pitch ;
   unsigned int pitch_bits ;
   unsigned int back_pitch ;
   unsigned int depth_pitch ;
   unsigned int cpp ;
   unsigned int chipset ;
};
#line 42 "include/drm/i915_drm.h"
typedef struct _drm_i915_init drm_i915_init_t;
#line 197 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 197 "include/drm/i915_drm.h"
typedef struct _drm_i915_batchbuffer drm_i915_batchbuffer_t;
#line 209 "include/drm/i915_drm.h"
struct _drm_i915_cmdbuffer {
   char *buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 209 "include/drm/i915_drm.h"
typedef struct _drm_i915_cmdbuffer drm_i915_cmdbuffer_t;
#line 236 "include/drm/i915_drm.h"
struct drm_i915_getparam {
   int param ;
   int *value ;
};
#line 236 "include/drm/i915_drm.h"
typedef struct drm_i915_getparam drm_i915_getparam_t;
#line 247 "include/drm/i915_drm.h"
struct drm_i915_setparam {
   int param ;
   int value ;
};
#line 247 "include/drm/i915_drm.h"
typedef struct drm_i915_setparam drm_i915_setparam_t;
#line 298 "include/drm/i915_drm.h"
struct drm_i915_hws_addr {
   uint64_t addr ;
};
#line 298 "include/drm/i915_drm.h"
typedef struct drm_i915_hws_addr drm_i915_hws_addr_t;
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct drm_i915_private drm_i915_private_t;
#line 406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_148 {
   uint32_t last_gem_seqno ;
   uint32_t last_gem_throttle_seqno ;
};
#line 406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_file_private {
   struct __anonstruct_mm_148 mm ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 87 "include/drm/drm.h"
struct drm_drawable_info {
   unsigned int num_rects ;
   struct drm_clip_rect *rects ;
};
#line 454
enum drm_vblank_seq_type {
    _DRM_VBLANK_ABSOLUTE = 0,
    _DRM_VBLANK_RELATIVE = 1,
    _DRM_VBLANK_FLIP = 134217728,
    _DRM_VBLANK_NEXTONMISS = 268435456,
    _DRM_VBLANK_SECONDARY = 536870912,
    _DRM_VBLANK_SIGNAL = 1073741824
} ;
#line 220 "include/drm/i915_drm.h"
struct drm_i915_irq_emit {
   int *irq_seq ;
};
#line 220 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_emit drm_i915_irq_emit_t;
#line 224 "include/drm/i915_drm.h"
struct drm_i915_irq_wait {
   int irq_seq ;
};
#line 224 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_wait drm_i915_irq_wait_t;
#line 286 "include/drm/i915_drm.h"
struct drm_i915_vblank_pipe {
   int pipe ;
};
#line 286 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_pipe drm_i915_vblank_pipe_t;
#line 292 "include/drm/i915_drm.h"
struct drm_i915_vblank_swap {
   drm_drawable_t drawable ;
   enum drm_vblank_seq_type seqtype ;
   unsigned int sequence ;
};
#line 292 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_swap drm_i915_vblank_swap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 256 "include/drm/i915_drm.h"
struct drm_i915_mem_alloc {
   int region ;
   int alignment ;
   int size ;
   int *region_offset ;
};
#line 256 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_alloc drm_i915_mem_alloc_t;
#line 263 "include/drm/i915_drm.h"
struct drm_i915_mem_free {
   int region ;
   int region_offset ;
};
#line 263 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_free drm_i915_mem_free_t;
#line 268 "include/drm/i915_drm.h"
struct drm_i915_mem_init_heap {
   int region ;
   int size ;
   int start ;
};
#line 268 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_init_heap drm_i915_mem_init_heap_t;
#line 277 "include/drm/i915_drm.h"
struct drm_i915_mem_destroy_heap {
   int region ;
};
#line 277 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_destroy_heap drm_i915_mem_destroy_heap_t;
#line 50 "include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 978 "include/acpi/actypes.h"
#pragma pack(1)
#line 1226
#pragma pack()
#line 65 "include/acpi/actbl.h"
#pragma pack(1)
#line 287
#pragma pack()
#line 89 "include/acpi/actbl1.h"
#pragma pack(1)
#line 1301
#pragma pack()
#line 60 "include/acpi/acobject.h"
#pragma pack(8)
#line 421
#pragma pack()
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_header {
   u8 signature[16] ;
   u32 size ;
   u32 opregion_ver ;
   u8 bios_ver[32] ;
   u8 vbios_ver[16] ;
   u8 driver_ver[16] ;
   u32 mboxes ;
   u8 reserved[164] ;
} __attribute__((__packed__)) ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_acpi {
   u32 drdy ;
   u32 csts ;
   u32 cevt ;
   u8 rsvd1[20] ;
   u32 didl[8] ;
   u32 cpdl[8] ;
   u32 cadl[8] ;
   u32 nadl[8] ;
   u32 aslp ;
   u32 tidx ;
   u32 chpd ;
   u32 clid ;
   u32 cdck ;
   u32 sxsw ;
   u32 evts ;
   u32 cnot ;
   u32 nrdy ;
   u8 rsvd2[60] ;
} __attribute__((__packed__)) ;
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_swsci {
   u32 scic ;
   u32 parm ;
   u32 dslp ;
   u8 rsvd[244] ;
} __attribute__((__packed__)) ;
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
struct opregion_asle {
   u32 ardy ;
   u32 aslc ;
   u32 tche ;
   u32 alsi ;
   u32 bclp ;
   u32 pfit ;
   u32 cblv ;
   u16 bclm[20] ;
   u32 cpfm ;
   u32 epfm ;
   u8 plut[74] ;
   u32 pfmb ;
   u8 rsvd[102] ;
} __attribute__((__packed__)) ;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
enum pipe {
    PIPE_A = 0,
    PIPE_B = 1
} ;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 40 "include/linux/types.h"
typedef unsigned long uintptr_t;
#line 114 "include/linux/types.h"
typedef __s32 int32_t;
#line 118 "include/linux/types.h"
typedef __u8 uint8_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 69 "include/linux/agp_backend.h"
struct agp_memory {
   struct agp_memory *next ;
   struct agp_memory *prev ;
   struct agp_bridge_data *bridge ;
   unsigned long *memory ;
   size_t page_count ;
   int key ;
   int num_scratch_pages ;
   off_t pg_start ;
   u32 type ;
   u32 physical ;
   bool is_bound ;
   bool is_flushed ;
   bool vmalloc_flag ;
   struct list_head mapped_list ;
};
#line 201 "include/linux/pagemap.h"
typedef int filler_t(void * , struct page * );
#line 502 "include/drm/drmP.h"
struct drm_mm_node {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
   int free ;
   unsigned long start ;
   unsigned long size ;
   struct drm_mm *mm ;
   void *private ;
};
#line 302 "include/drm/i915_drm.h"
struct drm_i915_gem_init {
   uint64_t gtt_start ;
   uint64_t gtt_end ;
};
#line 315 "include/drm/i915_drm.h"
struct drm_i915_gem_create {
   uint64_t size ;
   uint32_t handle ;
   uint32_t pad ;
};
#line 331 "include/drm/i915_drm.h"
struct drm_i915_gem_pread {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 347 "include/drm/i915_drm.h"
struct drm_i915_gem_pwrite {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 363 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t addr_ptr ;
};
#line 383 "include/drm/i915_drm.h"
struct drm_i915_gem_set_domain {
   uint32_t handle ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 394 "include/drm/i915_drm.h"
struct drm_i915_gem_sw_finish {
   uint32_t handle ;
};
#line 399 "include/drm/i915_drm.h"
struct drm_i915_gem_relocation_entry {
   uint32_t target_handle ;
   uint32_t delta ;
   uint64_t offset ;
   uint64_t presumed_offset ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 467 "include/drm/i915_drm.h"
struct drm_i915_gem_exec_object {
   uint32_t handle ;
   uint32_t relocation_count ;
   uint64_t relocs_ptr ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 492 "include/drm/i915_drm.h"
struct drm_i915_gem_execbuffer {
   uint64_t buffers_ptr ;
   uint32_t buffer_count ;
   uint32_t batch_start_offset ;
   uint32_t batch_len ;
   uint32_t DR1 ;
   uint32_t DR4 ;
   uint32_t num_cliprects ;
   uint64_t cliprects_ptr ;
};
#line 517 "include/drm/i915_drm.h"
struct drm_i915_gem_pin {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 535 "include/drm/i915_drm.h"
struct drm_i915_gem_busy {
   uint32_t handle ;
   uint32_t busy ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_object {
   struct drm_gem_object *obj ;
   struct drm_mm_node *gtt_space ;
   struct list_head list ;
   int active ;
   int dirty ;
   struct agp_memory *agp_mem ;
   struct page **page_list ;
   uint32_t gtt_offset ;
   int gtt_bound ;
   int pin_count ;
   uint32_t last_rendering_seqno ;
   uint32_t tiling_mode ;
   uint8_t *page_cpu_valid ;
};
#line 393 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_request {
   uint32_t seqno ;
   unsigned long emitted_jiffies ;
   uint32_t flush_domains ;
   struct list_head list ;
};
#line 86 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 1778 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
struct drm_i915_relocation_entry;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
struct drm_proc_list {
   char const   *name ;
   int (*f)(char * , char ** , off_t  , int  , int * , void * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 555 "include/drm/i915_drm.h"
struct drm_i915_gem_set_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t swizzle_mode ;
};
#line 586 "include/drm/i915_drm.h"
struct drm_i915_gem_get_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t swizzle_mode ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 273 "include/drm/drmP.h"
typedef int drm_ioctl_compat_t(struct file *filp , unsigned int cmd , unsigned long arg );
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct _drm_i915_batchbuffer32 {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct _drm_i915_batchbuffer32 drm_i915_batchbuffer32_t;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct _drm_i915_cmdbuffer32 {
   u32 buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct _drm_i915_cmdbuffer32 drm_i915_cmdbuffer32_t;
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_irq_emit32 {
   u32 irq_seq ;
};
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_irq_emit32 drm_i915_irq_emit32_t;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_getparam32 {
   int param ;
   u32 value ;
};
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_getparam32 drm_i915_getparam32_t;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
struct drm_i915_mem_alloc32 {
   int region ;
   int alignment ;
   int size ;
   u32 region_offset ;
};
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
typedef struct drm_i915_mem_alloc32 drm_i915_mem_alloc32_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 211 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 265 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 302 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 320 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 399 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 567
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 574
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 24 "include/linux/usb.h"
struct usb_device;
#line 26
struct wusb_dev;
#line 45
struct ep_device;
#line 61 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 73 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 86
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 148 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 209 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 261 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 292 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 299
struct mon_bus;
#line 299 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 349
struct usb_tt;
#line 414 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 1125 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1132
struct urb;
#line 1134 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1316 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 197 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 65 "include/linux/module.h"
int init_module(void) ;
#line 66
void cleanup_module(void) ;
#line 84
extern struct module __this_module ;
#line 599 "include/linux/pci.h"
extern int ( __attribute__((__warn_unused_result__)) pci_enable_device)(struct pci_dev *dev ) ;
#line 611
extern void pci_disable_device(struct pci_dev *dev ) ;
#line 612
extern void pci_set_master(struct pci_dev *dev ) ;
#line 639
extern int pci_save_state(struct pci_dev *dev ) ;
#line 640
extern int pci_restore_state(struct pci_dev *dev ) ;
#line 641
extern int pci_set_power_state(struct pci_dev *dev , pci_power_t state ) ;
#line 982 "include/drm/drmP.h"
extern int drm_init(struct drm_driver *driver ) ;
#line 983
extern void drm_exit(struct drm_driver *driver ) ;
#line 984
extern int drm_ioctl(struct inode *inode , struct file *filp , unsigned int cmd ,
                     unsigned long arg ) ;
#line 991
extern int drm_open(struct inode *inode , struct file *filp ) ;
#line 993
extern int drm_fasync(int fd , struct file *filp , int on ) ;
#line 994
extern int drm_release(struct inode *inode , struct file *filp ) ;
#line 997
extern int drm_mmap(struct file *filp , struct vm_area_struct *vma ) ;
#line 998
extern unsigned long drm_core_get_map_ofs(struct drm_map *map ) ;
#line 999
extern unsigned long drm_core_get_reg_ofs(struct drm_device *dev ) ;
#line 1000
extern unsigned int drm_poll(struct file *filp , struct poll_table_struct *wait ) ;
#line 1130
extern void drm_core_reclaim_buffers(struct drm_device *dev , struct drm_file *filp ) ;
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_ioctl_desc i915_ioctls[35] ;
#line 414
int i915_max_ioctl ;
#line 418
int i915_driver_load(struct drm_device *dev , unsigned long flags ) ;
#line 419
int i915_driver_unload(struct drm_device *dev ) ;
#line 420
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 421
void i915_driver_lastclose(struct drm_device *dev ) ;
#line 422
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 424
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 426
int i915_driver_device_is_agp(struct drm_device *dev ) ;
#line 427
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 442
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) ;
#line 443
void i915_driver_irq_preinstall(struct drm_device *dev ) ;
#line 444
int i915_driver_irq_postinstall(struct drm_device *dev ) ;
#line 445
void i915_driver_irq_uninstall(struct drm_device *dev ) ;
#line 450
int i915_enable_vblank(struct drm_device *dev , int plane ) ;
#line 451
void i915_disable_vblank(struct drm_device *dev , int plane ) ;
#line 452
u32 i915_get_vblank_counter(struct drm_device *dev , int plane ) ;
#line 503
int i915_gem_proc_init(struct drm_minor *minor ) ;
#line 504
void i915_gem_proc_cleanup(struct drm_minor *minor ) ;
#line 505
int i915_gem_init_object(struct drm_gem_object *obj ) ;
#line 506
void i915_gem_free_object(struct drm_gem_object *obj ) ;
#line 532
int i915_save_state(struct drm_device *dev ) ;
#line 533
int i915_restore_state(struct drm_device *dev ) ;
#line 540
int intel_opregion_init(struct drm_device *dev ) ;
#line 541
void intel_opregion_free(struct drm_device *dev ) ;
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static struct pci_device_id pciidlist[24]  = 
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
  {      {32902, 13687, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 9570, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 13698, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 9586, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 9602, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 9610, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 9618, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10098, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10146, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10158, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10610, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10626, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10642, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10658, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10674, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10690, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10706, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10754, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10770, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 10818, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 11778, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 11794, ~ 0, ~ 0, 0, 0, 0}, 
        {32902, 11810, ~ 0, ~ 0, 0, 0, 0}, 
        {0, 0, 0, 0U, 0U, 0U, 0UL}};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_suspend(struct drm_device *dev , pm_message_t state ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 44
  dev_priv = dev->dev_private;
#line 46
  if (! dev || ! dev_priv) {
#line 47
    printk("<3>dev: %p, dev_priv: %p\n", dev, dev_priv);
#line 48
    printk("<3>DRM not initialized, aborting suspend.\n");
#line 49
    return (-19);
  } else {

  }
#line 52
  if (state.event == 8) {
#line 53
    return (0);
  } else {

  }
#line 55
  pci_save_state(dev->pdev);
#line 57
  i915_save_state(dev);
#line 59
  intel_opregion_free(dev);
#line 61
  if (state.event == 2) {
#line 63
    pci_disable_device(dev->pdev);
#line 64
    pci_set_power_state(dev->pdev, 3);
  } else {

  }
#line 67
  return (0);
}
}
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_resume(struct drm_device *dev ) 
{ 
  int tmp ;

  {
#line 72
  pci_set_power_state(dev->pdev, 0);
#line 73
  pci_restore_state(dev->pdev);
#line 74
  tmp = pci_enable_device(dev->pdev);
#line 74
  if (tmp) {
#line 75
    return (-1);
  } else {

  }
#line 76
  pci_set_master(dev->pdev);
#line 78
  i915_restore_state(dev);
#line 80
  intel_opregion_init(dev);
#line 82
  return (0);
}
}
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static struct drm_driver driver  = 
#line 85
     {& i915_driver_load, 0, & i915_driver_open, & i915_driver_preclose, & i915_driver_postclose,
    & i915_driver_lastclose, & i915_driver_unload, & i915_suspend, & i915_resume,
    0, 0, 0, 0, 0, 0, 0, 0, & i915_get_vblank_counter, & i915_enable_vblank, & i915_disable_vblank,
    & i915_driver_device_is_agp, & i915_driver_irq_handler, & i915_driver_irq_preinstall,
    & i915_driver_irq_postinstall, & i915_driver_irq_uninstall, & drm_core_reclaim_buffers,
    0, 0, & drm_core_get_map_ofs, & drm_core_get_reg_ofs, 0, & i915_gem_proc_init,
    & i915_gem_proc_cleanup, & i915_gem_init_object, & i915_gem_free_object, 1, 6,
    0, "i915", "Intel Graphics", "20080730", (((1 | 2) | 64) | 128) | 4096, 0, i915_ioctls,
    0, {& __this_module, 0, 0, 0, 0, 0, 0, & drm_poll, & drm_ioctl, 0, & i915_compat_ioctl,
        & drm_mmap, & drm_open, 0, & drm_release, 0, 0, & drm_fasync, 0, 0, 0, 0,
        0, 0, 0, 0, 0}, {{0, 0}, "i915", pciidlist, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0},
                         {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}, 0U}}};
#line 142
static int i915_init(void)  __attribute__((__section__(".init.text"))) ;
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static int i915_init(void) 
{ 
  int tmp ;

  {
#line 144
  driver.num_ioctls = i915_max_ioctl;
#line 145
  tmp = drm_init(& driver);
#line 145
  return (tmp);
}
}
#line 148
static void i915_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static void i915_exit(void) 
{ 


  {
#line 150
  drm_exit(& driver);
#line 151
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 153
  tmp = i915_init();
#line 153
  return (tmp);
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
void cleanup_module(void) 
{ 


  {
#line 154
  i915_exit();
#line 154
  return;
}
}
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_author156[31]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 156
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'T', 
        'u',      'n',      'g',      's', 
        't',      'e',      'n',      ' ', 
        'G',      'r',      'a',      'p', 
        'h',      'i',      'c',      's', 
        ',',      ' ',      'I',      'n', 
        'c',      '.',      '\000'};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_description157[27]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 157
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'I',      'n',      't',      'e', 
        'l',      ' ',      'G',      'r', 
        'a',      'p',      'h',      'i', 
        'c',      's',      '\000'};
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
static char const   __mod_license158[34]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 158
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      ' ', 
        'a',      'n',      'd',      ' ', 
        'a',      'd',      'd',      'i', 
        't',      'i',      'o',      'n', 
        'a',      'l',      ' ',      'r', 
        'i',      'g',      'h',      't', 
        's',      '\000'};
#line 176
void ldv_check_final_state(void) ;
#line 185
extern void ldv_initialize(void) ;
#line 188
extern void ldv_handler_precall(void) ;
#line 191
extern int nondet_int(void) ;
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
int LDV_IN_INTERRUPT  ;
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_drv.c"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_device *var_group1 ;
  pm_message_t var_i915_suspend_0_p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 227
  LDV_IN_INTERRUPT = 1;
#line 236
  ldv_initialize();
#line 245
  ldv_handler_precall();
#line 246
  tmp = i915_init();
#line 246
  if (tmp) {
#line 247
    goto ldv_final;
  } else {

  }
#line 251
  while (1) {
#line 251
    tmp___1 = nondet_int();
#line 251
    if (tmp___1) {

    } else {
#line 251
      break;
    }
#line 254
    tmp___0 = nondet_int();
#line 254
    switch (tmp___0) {
    case 0: 
#line 264
    ldv_handler_precall();
#line 265
    i915_suspend(var_group1, var_i915_suspend_0_p1);
#line 276
    break;
    case 1: 
#line 285
    ldv_handler_precall();
#line 286
    i915_resume(var_group1);
#line 297
    break;
    default: 
#line 298
    break;
    }
  }
#line 313
  ldv_handler_precall();
#line 314
  i915_exit();
  ldv_final: 
#line 317
  ldv_check_final_state();
#line 320
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 51 "include/asm/pda.h"
extern  __attribute__((__noreturn__)) void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 205 "include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (sizeof(_proxy_pda.kernelstack)) {
  case 2UL: 
#line 208
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  case 4UL: 
#line 208
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  case 8UL: 
#line 208
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->kernelstack)),
            "m" (_proxy_pda.kernelstack));
#line 208
  break;
  default: 
#line 208
  __bad_pda_field();
  }
#line 208
  ti = (void *)((ret__ + (unsigned long )(5 * 8)) - ((1UL << 12) << 1));
#line 209
  return (ti);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 125 "include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex *lock , unsigned int subclass ) ;
#line 149
extern void mutex_unlock(struct mutex *lock ) ;
#line 47 "include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int msecs ) ;
#line 101 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 20 "include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 20
  __asm__  volatile   ("mov"
                       "l"
                       " %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("mov"
                       "l"
                       " %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 28
  return;
}
}
#line 759 "include/linux/pci.h"
extern int pci_enable_msi(struct pci_dev *dev ) ;
#line 761
extern void pci_disable_msi(struct pci_dev *dev ) ;
#line 18 "include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_user_generic)(void *to ,
                                                                                  void const   *from ,
                                                                                  unsigned int len ) ;
#line 21
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 28 "include/asm/uaccess_64.h"
__inline static int ( __attribute__((__warn_unused_result__, __always_inline__)) __copy_from_user)(void *dst ,
                                                                                                   void const   *src ,
                                                                                                   unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 31
  ret = 0;
#line 33
  tmp = copy_user_generic(dst, (void *)src, size);
#line 33
  return (tmp);
#line 34
  switch (size) {
  case 1U: 
#line 35
  __asm__  volatile   ("1:\tmov"
                       "b"
                       " %2,%"
                       "b"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "b"
                       " %"
                       "b"
                       "1,%"
                       "b"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=q" (*((u8 *)dst)): "m" (*((struct __large_struct *)((u8 *)src))),
                       "i" (1), "0" (ret));
#line 37
  return (ret);
  case 2U: 
#line 38
  __asm__  volatile   ("1:\tmov"
                       "w"
                       " %2,%"
                       "w"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "w"
                       " %"
                       "w"
                       "1,%"
                       "w"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u16 *)dst)): "m" (*((struct __large_struct *)((u16 *)src))),
                       "i" (2), "0" (ret));
#line 40
  return (ret);
  case 4U: 
#line 41
  __asm__  volatile   ("1:\tmov"
                       "l"
                       " %2,%"
                       "k"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "l"
                       " %"
                       "k"
                       "1,%"
                       "k"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u32 *)dst)): "m" (*((struct __large_struct *)((u32 *)src))),
                       "i" (4), "0" (ret));
#line 43
  return (ret);
  case 8U: 
#line 44
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (8), "0" (ret));
#line 46
  return (ret);
  case 10U: 
#line 48
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (16), "0" (ret));
#line 50
  tmp___0 = __builtin_expect(! (! ret), 0);
#line 50
  if (tmp___0) {
#line 51
    return (ret);
  } else {

  }
#line 52
  __asm__  volatile   ("1:\tmov"
                       "w"
                       " %2,%"
                       "w"
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "w"
                       " %"
                       "w"
                       "1,%"
                       "w"
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u16 *)((char *)dst + 8))): "m" (*((struct __large_struct *)((u16 *)((char *)src + 8)))),
                       "i" (2), "0" (ret));
#line 55
  return (ret);
  case 16U: 
#line 57
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)((u64 *)src))),
                       "i" (16), "0" (ret));
#line 59
  tmp___1 = __builtin_expect(! (! ret), 0);
#line 59
  if (tmp___1) {
#line 60
    return (ret);
  } else {

  }
#line 61
  __asm__  volatile   ("1:\tmov"
                       "q"
                       " %2,%"
                       ""
                       "1\n"
                       "2:\n"
                       ".section .fixup,\"ax\"\n"
                       "3:\tmov %3,%0\n"
                       "\txor"
                       "q"
                       " %"
                       ""
                       "1,%"
                       ""
                       "1\n"
                       "\tjmp 2b\n"
                       ".previous\n"
                       " .section __ex_table,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "1b"
                       ","
                       "3b"
                       "\n"
                       " .previous\n": "=r" (ret), "=r" (*((u64 *)((char *)dst + 8))): "m" (*((struct __large_struct *)((u64 *)((char *)src + 8)))),
                       "i" (8), "0" (ret));
#line 64
  return (ret);
  default: 
#line 66
  tmp___2 = copy_user_generic(dst, (void *)src, size);
#line 66
  return (tmp___2);
  }
}
}
#line 1101 "include/drm/drmP.h"
extern int drm_addmap(struct drm_device *dev , unsigned int offset , unsigned int size ,
                      enum drm_map_type type , enum drm_map_flags flags , drm_local_map_t **map_ptr ) ;
#line 1106
extern int drm_rmmap(struct drm_device *dev , drm_local_map_t *map ) ;
#line 1121
extern unsigned long drm_get_resource_start(struct drm_device *dev , unsigned int resource ) ;
#line 1123
extern unsigned long drm_get_resource_len(struct drm_device *dev , unsigned int resource ) ;
#line 1138
extern int drm_irq_uninstall(struct drm_device *dev ) ;
#line 1195
extern unsigned int drm_debug ;
#line 1202
extern drm_local_map_t *drm_getsarea(struct drm_device *dev ) ;
#line 1223
extern drm_dma_handle_t *drm_pci_alloc(struct drm_device *dev , size_t size , size_t align ,
                                       dma_addr_t maxaddr ) ;
#line 1226
extern void drm_pci_free(struct drm_device *dev , drm_dma_handle_t *dmah ) ;
#line 1311
extern void drm_core_ioremap(struct drm_map *map , struct drm_device *dev ) ;
#line 1313
extern void drm_core_ioremapfree(struct drm_map *map , struct drm_device *dev ) ;
#line 1349 "include/drm/drmP.h"
__inline static void *drm_alloc(size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1351
  tmp = kmalloc(size, (16U | 64U) | 128U);
#line 1351
  return (tmp);
}
}
#line 1355 "include/drm/drmP.h"
__inline static void drm_free(void *pt , size_t size , int area ) 
{ 


  {
#line 1357
  kfree(pt);
#line 1358
  return;
}
}
#line 417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_kernel_lost_context(struct drm_device *dev ) ;
#line 429
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) ;
#line 434
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 436
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 446
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 448
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 453
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 458
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 460
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 462
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 464
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 466
void i915_mem_takedown(struct mem_block **heap ) ;
#line 467
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) ;
#line 470
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 472
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 474
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 476
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 478
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 480
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 482
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 484
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 486
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 488
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 490
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 492
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 494
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 496
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 498
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 500
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 502
void i915_gem_load(struct drm_device *dev ) ;
#line 509
void i915_gem_lastclose(struct drm_device *dev ) ;
#line 611
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) ;
#line 39 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  u32 acthd_reg ;
  u32 last_acthd ;
  unsigned int tmp ;
  u32 acthd ;
  u32 last_head ;
  unsigned int tmp___0 ;
  int i ;
  unsigned int tmp___1 ;

  {
#line 41
  dev_priv = dev->dev_private;
#line 42
  ring = & dev_priv->ring;
#line 43
  acthd_reg = ((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810 ? 8308 : 8392;
#line 44
  tmp = readl((dev_priv->mmio_map)->handle + acthd_reg);
#line 44
  last_acthd = tmp;
#line 46
  tmp___0 = readl((dev_priv->mmio_map)->handle + 8244);
#line 46
  last_head = tmp___0 & 2097148U;
#line 49
  i = 0;
#line 49
  while (1) {
#line 49
    if (i < 100000) {

    } else {
#line 49
      break;
    }
#line 50
    tmp___1 = readl((dev_priv->mmio_map)->handle + 8244);
#line 50
    ring->head = tmp___1 & 2097148U;
#line 51
    acthd = readl((dev_priv->mmio_map)->handle + acthd_reg);
#line 52
    ring->space = ring->head - (ring->tail + 8);
#line 53
    if (ring->space < 0) {
#line 54
      ring->space = (unsigned long )ring->space + ring->Size;
    } else {

    }
#line 55
    if (ring->space >= n) {
#line 56
      return (0);
    } else {

    }
#line 58
    if (dev_priv->sarea_priv) {
#line 59
      (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
    } else {

    }
#line 61
    if ((u32 )ring->head != last_head) {
#line 62
      i = 0;
    } else {

    }
#line 63
    if (acthd != last_acthd) {
#line 64
      i = 0;
    } else {

    }
#line 66
    last_head = ring->head;
#line 67
    last_acthd = acthd;
#line 68
    msleep_interruptible(10);
#line 49
    i = i + 1;
  }
#line 72
  return (-16);
}
}
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_init_phys_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 81
  dev_priv = dev->dev_private;
#line 83
  dev_priv->status_page_dmah = drm_pci_alloc(dev, 1UL << 12, 1UL << 12, 4294967295U);
#line 86
  if (! dev_priv->status_page_dmah) {
#line 87
    printk("<3>[drm:%s] *ERROR* Can not allocate hardware status page\n", "i915_init_phys_hws");
#line 88
    return (-12);
  } else {

  }
#line 90
  dev_priv->hw_status_page = (dev_priv->status_page_dmah)->vaddr;
#line 91
  dev_priv->dma_status_page = (dev_priv->status_page_dmah)->busaddr;
#line 93
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 95
  writel(dev_priv->dma_status_page, (dev_priv->mmio_map)->handle + 8320);
#line 96
  while (1) {
#line 96
    if (drm_debug) {
#line 96
      printk("<7>[drm:%s] Enabled hardware status page\n", "i915_init_phys_hws");
    } else {

    }
#line 96
    break;
  }
#line 97
  return (0);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_free_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 106
  dev_priv = dev->dev_private;
#line 107
  if (dev_priv->status_page_dmah) {
#line 108
    drm_pci_free(dev, dev_priv->status_page_dmah);
#line 109
    dev_priv->status_page_dmah = (void *)0;
  } else {

  }
#line 112
  if (dev_priv->status_gfx_addr) {
#line 113
    dev_priv->status_gfx_addr = 0;
#line 114
    drm_core_ioremapfree(& dev_priv->hws_map, dev);
  } else {

  }
#line 118
  writel(536866816, (dev_priv->mmio_map)->handle + 8320);
#line 119
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_kernel_lost_context(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 123
  dev_priv = dev->dev_private;
#line 124
  ring = & dev_priv->ring;
#line 126
  tmp = readl((dev_priv->mmio_map)->handle + 8244);
#line 126
  ring->head = tmp & 2097148U;
#line 127
  tmp___0 = readl((dev_priv->mmio_map)->handle + 8240);
#line 127
  ring->tail = tmp___0 & 2097144U;
#line 128
  ring->space = ring->head - (ring->tail + 8);
#line 129
  if (ring->space < 0) {
#line 130
    ring->space = (unsigned long )ring->space + ring->Size;
  } else {

  }
#line 132
  if (ring->head == ring->tail && dev_priv->sarea_priv) {
#line 133
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 1;
  } else {

  }
#line 134
  return;
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_cleanup(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 138
  dev_priv = dev->dev_private;
#line 143
  if (dev->irq_enabled) {
#line 144
    drm_irq_uninstall(dev);
  } else {

  }
#line 146
  if (dev_priv->ring.virtual_start) {
#line 147
    drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 148
    dev_priv->ring.virtual_start = 0;
#line 149
    dev_priv->ring.map.handle = 0;
#line 150
    dev_priv->ring.map.size = 0;
  } else {

  }
#line 154
  if ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 155
    i915_free_hws(dev);
  } else {

  }
#line 157
  return (0);
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_initialize(struct drm_device *dev , drm_i915_init_t *init ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 162
  dev_priv = dev->dev_private;
#line 164
  dev_priv->sarea = drm_getsarea(dev);
#line 165
  if (! dev_priv->sarea) {
#line 166
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_initialize");
#line 167
    i915_dma_cleanup(dev);
#line 168
    return (-22);
  } else {

  }
#line 171
  dev_priv->sarea_priv = (drm_i915_sarea_t *)((u8 *)(dev_priv->sarea)->handle + init->sarea_priv_offset);
#line 174
  if (init->ring_size != 0U) {
#line 175
    if ((unsigned long )dev_priv->ring.ring_obj != (unsigned long )((void *)0)) {
#line 176
      i915_dma_cleanup(dev);
#line 177
      printk("<3>[drm:%s] *ERROR* Client tried to initialize ringbuffer in GEM mode\n",
             "i915_initialize");
#line 179
      return (-22);
    } else {

    }
#line 182
    dev_priv->ring.Size = init->ring_size;
#line 183
    dev_priv->ring.tail_mask = dev_priv->ring.Size - 1UL;
#line 185
    dev_priv->ring.map.offset = init->ring_start;
#line 186
    dev_priv->ring.map.size = init->ring_size;
#line 187
    dev_priv->ring.map.type = 0;
#line 188
    dev_priv->ring.map.flags = 0;
#line 189
    dev_priv->ring.map.mtrr = 0;
#line 191
    drm_core_ioremap(& dev_priv->ring.map, dev);
#line 193
    if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 194
      i915_dma_cleanup(dev);
#line 195
      printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
             "i915_initialize");
#line 197
      return (-12);
    } else {

    }
  } else {

  }
#line 201
  dev_priv->ring.virtual_start = dev_priv->ring.map.handle;
#line 203
  dev_priv->cpp = init->cpp;
#line 204
  dev_priv->back_offset = init->back_offset;
#line 205
  dev_priv->front_offset = init->front_offset;
#line 206
  dev_priv->current_page = 0;
#line 207
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 211
  dev_priv->allow_batchbuffer = 1;
#line 213
  return (0);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_resume(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 218
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 220
  while (1) {
#line 220
    if (drm_debug) {
#line 220
      printk("<7>[drm:%s] %s\n", "i915_dma_resume", "i915_dma_resume");
    } else {

    }
#line 220
    break;
  }
#line 222
  if (! dev_priv->sarea) {
#line 223
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_dma_resume");
#line 224
    return (-22);
  } else {

  }
#line 227
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 228
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_dma_resume");
#line 230
    return (-12);
  } else {

  }
#line 234
  if (! dev_priv->hw_status_page) {
#line 235
    printk("<3>[drm:%s] *ERROR* Can not find hardware status page\n", "i915_dma_resume");
#line 236
    return (-22);
  } else {

  }
#line 238
  while (1) {
#line 238
    if (drm_debug) {
#line 238
      printk("<7>[drm:%s] hw status page @ %p\n", "i915_dma_resume", dev_priv->hw_status_page);
    } else {

    }
#line 238
    break;
  }
#line 240
  if (dev_priv->status_gfx_addr != 0U) {
#line 241
    writel(dev_priv->status_gfx_addr, (dev_priv->mmio_map)->handle + 8320);
  } else {
#line 243
    writel(dev_priv->dma_status_page, (dev_priv->mmio_map)->handle + 8320);
  }
#line 244
  while (1) {
#line 244
    if (drm_debug) {
#line 244
      printk("<7>[drm:%s] Enabled hardware status page\n", "i915_dma_resume");
    } else {

    }
#line 244
    break;
  }
#line 246
  return (0);
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dma_init(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_init_t *init ;
  int retcode ;

  {
#line 252
  init = data;
#line 253
  retcode = 0;
#line 255
  switch ((unsigned int )init->func) {
  case (unsigned int )I915_INIT_DMA: 
#line 257
  retcode = i915_initialize(dev, init);
#line 258
  break;
  case (unsigned int )I915_CLEANUP_DMA: 
#line 260
  retcode = i915_dma_cleanup(dev);
#line 261
  break;
  case (unsigned int )I915_RESUME_DMA: 
#line 263
  retcode = i915_dma_resume(dev);
#line 264
  break;
  default: 
#line 266
  retcode = -22;
#line 267
  break;
  }
#line 270
  return (retcode);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int do_validate_cmd(int cmd ) 
{ 


  {
#line 284
  switch ((cmd >> 29) & 7) {
  case 0: 
#line 286
  switch ((cmd >> 23) & 63) {
  case 0: 
#line 288
  return (1);
  case 4: 
#line 290
  return (1);
  default: 
#line 292
  return (0);
  }
#line 294
  break;
  case 1: 
#line 296
  return (0);
  case 2: 
#line 298
  return ((cmd & 255) + 2);
  case 3: 
#line 300
  if (((cmd >> 24) & 31) <= 24) {
#line 301
    return (1);
  } else {

  }
#line 303
  switch ((cmd >> 24) & 31) {
  case 28: 
#line 305
  return (1);
  case 29: 
#line 307
  switch ((cmd >> 16) & 255) {
  case 3: 
#line 309
  return ((cmd & 31) + 2);
  case 4: 
#line 311
  return ((cmd & 15) + 2);
  default: 
#line 313
  return ((cmd & 65535) + 2);
  }
  case 30: 
#line 316
  if (cmd & (1 << 23)) {
#line 317
    return ((cmd & 65535) + 1);
  } else {
#line 319
    return (1);
  }
  case 31: 
#line 321
  if ((cmd & (1 << 23)) == 0) {
#line 322
    return ((cmd & 131071) + 2);
  } else
#line 323
  if (cmd & (1 << 17)) {
#line 324
    if ((cmd & 65535) == 0) {
#line 325
      return (0);
    } else {
#line 327
      return (((cmd & 65535) + 1) / 2 + 1);
    }
  } else {
#line 329
    return (2);
  }
  default: 
#line 331
  return (0);
  }
  default: 
#line 334
  return (0);
  }
#line 337
  return (0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int validate_cmd(int cmd ) 
{ 
  int ret ;
  int tmp ;

  {
#line 342
  tmp = do_validate_cmd(cmd);
#line 342
  ret = tmp;
#line 346
  return (ret);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_emit_cmds(struct drm_device *dev , int *buffer , int dwords ) 
{ 
  drm_i915_private_t *dev_priv ;
  int i ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int cmd ;
  int sz ;
  int tmp ;
  int tmp___0 ;

  {
#line 351
  dev_priv = dev->dev_private;
#line 355
  if ((unsigned long )(dwords + 1) * sizeof(int ) >= dev_priv->ring.Size - 8UL) {
#line 356
    return (-22);
  } else {

  }
#line 358
  while (1) {
#line 358
    if (dev_priv->ring.space < ((dwords + 1) & ~ 1) * 4) {
#line 358
      i915_wait_ring(dev, ((dwords + 1) & ~ 1) * 4, "i915_emit_cmds");
    } else {

    }
#line 358
    outcount = 0;
#line 358
    outring = dev_priv->ring.tail;
#line 358
    ringmask = dev_priv->ring.tail_mask;
#line 358
    virt = dev_priv->ring.virtual_start;
#line 358
    break;
  }
#line 360
  i = 0;
#line 360
  while (1) {
#line 360
    if (i < dwords) {

    } else {
#line 360
      break;
    }
#line 363
    tmp = __copy_from_user(& cmd, buffer + i, sizeof(cmd));
#line 363
    if (tmp) {
#line 364
      return (-22);
    } else {

    }
#line 366
    sz = validate_cmd(cmd);
#line 366
    if (sz == 0 || i + sz > dwords) {
#line 367
      return (-22);
    } else {

    }
#line 369
    while (1) {
#line 369
      *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 369
      outcount = outcount + 1U;
#line 369
      outring = outring + 4U;
#line 369
      outring = outring & ringmask;
#line 369
      break;
    }
#line 371
    while (1) {
#line 371
      i = i + 1;
#line 371
      sz = sz - 1;
#line 371
      if (sz) {

      } else {
#line 371
        break;
      }
#line 372
      tmp___0 = __copy_from_user(& cmd, buffer + i, sizeof(cmd));
#line 372
      if (tmp___0) {
#line 374
        return (-22);
      } else {

      }
#line 376
      while (1) {
#line 376
        *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 376
        outcount = outcount + 1U;
#line 376
        outring = outring + 4U;
#line 376
        outring = outring & ringmask;
#line 376
        break;
      }
    }
  }
#line 380
  if (dwords & 1) {
#line 381
    while (1) {
#line 381
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 381
      outcount = outcount + 1U;
#line 381
      outring = outring + 4U;
#line 381
      outring = outring & ringmask;
#line 381
      break;
    }
  } else {

  }
#line 383
  while (1) {
#line 383
    dev_priv->ring.tail = outring;
#line 383
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 383
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 383
    break;
  }
#line 385
  return (0);
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect box ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int tmp ;

  {
#line 393
  dev_priv = dev->dev_private;
#line 397
  tmp = __copy_from_user(& box, boxes + i, sizeof(box));
#line 397
  if (tmp) {
#line 398
    return (-14);
  } else {

  }
#line 401
  if ((((int )box.y2 <= (int )box.y1 || (int )box.x2 <= (int )box.x1) || (int )box.y2 <= 0) || (int )box.x2 <= 0) {
#line 402
    printk("<3>[drm:%s] *ERROR* Bad box %d,%d..%d,%d\n", "i915_emit_box", box.x1,
           box.y1, box.x2, box.y2);
#line 404
    return (-22);
  } else {

  }
#line 407
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 408
    while (1) {
#line 408
      if (dev_priv->ring.space < 4 * 4) {
#line 408
        i915_wait_ring(dev, 4 * 4, "i915_emit_box");
      } else {

      }
#line 408
      outcount = 0;
#line 408
      outring = dev_priv->ring.tail;
#line 408
      ringmask = dev_priv->ring.tail_mask;
#line 408
      virt = dev_priv->ring.virtual_start;
#line 408
      break;
    }
#line 409
    while (1) {
#line 409
      *((unsigned int volatile   *)(virt + outring)) = (30976 << 16) | 2;
#line 409
      outcount = outcount + 1U;
#line 409
      outring = outring + 4U;
#line 409
      outring = outring & ringmask;
#line 409
      break;
    }
#line 410
    while (1) {
#line 410
      *((unsigned int volatile   *)(virt + outring)) = ((int )box.x1 & 65535) | ((int )box.y1 << 16);
#line 410
      outcount = outcount + 1U;
#line 410
      outring = outring + 4U;
#line 410
      outring = outring & ringmask;
#line 410
      break;
    }
#line 411
    while (1) {
#line 411
      *((unsigned int volatile   *)(virt + outring)) = (((int )box.x2 - 1) & 65535) | (((int )box.y2 - 1) << 16);
#line 411
      outcount = outcount + 1U;
#line 411
      outring = outring + 4U;
#line 411
      outring = outring & ringmask;
#line 411
      break;
    }
#line 412
    while (1) {
#line 412
      *((unsigned int volatile   *)(virt + outring)) = DR4;
#line 412
      outcount = outcount + 1U;
#line 412
      outring = outring + 4U;
#line 412
      outring = outring & ringmask;
#line 412
      break;
    }
#line 413
    while (1) {
#line 413
      dev_priv->ring.tail = outring;
#line 413
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 413
      writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 413
      break;
    }
  } else {
#line 415
    while (1) {
#line 415
      if (dev_priv->ring.space < 6 * 4) {
#line 415
        i915_wait_ring(dev, 6 * 4, "i915_emit_box");
      } else {

      }
#line 415
      outcount = 0;
#line 415
      outring = dev_priv->ring.tail;
#line 415
      ringmask = dev_priv->ring.tail_mask;
#line 415
      virt = dev_priv->ring.virtual_start;
#line 415
      break;
    }
#line 416
    while (1) {
#line 416
      *((unsigned int volatile   *)(virt + outring)) = (((3 << 29) | (29 << 24)) | (128 << 16)) | 3;
#line 416
      outcount = outcount + 1U;
#line 416
      outring = outring + 4U;
#line 416
      outring = outring & ringmask;
#line 416
      break;
    }
#line 417
    while (1) {
#line 417
      *((unsigned int volatile   *)(virt + outring)) = DR1;
#line 417
      outcount = outcount + 1U;
#line 417
      outring = outring + 4U;
#line 417
      outring = outring & ringmask;
#line 417
      break;
    }
#line 418
    while (1) {
#line 418
      *((unsigned int volatile   *)(virt + outring)) = ((int )box.x1 & 65535) | ((int )box.y1 << 16);
#line 418
      outcount = outcount + 1U;
#line 418
      outring = outring + 4U;
#line 418
      outring = outring & ringmask;
#line 418
      break;
    }
#line 419
    while (1) {
#line 419
      *((unsigned int volatile   *)(virt + outring)) = (((int )box.x2 - 1) & 65535) | (((int )box.y2 - 1) << 16);
#line 419
      outcount = outcount + 1U;
#line 419
      outring = outring + 4U;
#line 419
      outring = outring & ringmask;
#line 419
      break;
    }
#line 420
    while (1) {
#line 420
      *((unsigned int volatile   *)(virt + outring)) = DR4;
#line 420
      outcount = outcount + 1U;
#line 420
      outring = outring + 4U;
#line 420
      outring = outring & ringmask;
#line 420
      break;
    }
#line 421
    while (1) {
#line 421
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 421
      outcount = outcount + 1U;
#line 421
      outring = outring + 4U;
#line 421
      outring = outring & ringmask;
#line 421
      break;
    }
#line 422
    while (1) {
#line 422
      dev_priv->ring.tail = outring;
#line 422
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 422
      writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 422
      break;
    }
  }
#line 425
  return (0);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static void i915_emit_breadcrumb(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 434
  dev_priv = dev->dev_private;
#line 437
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 438
  if ((unsigned long )dev_priv->counter > 2147483647UL) {
#line 439
    dev_priv->counter = 0;
  } else {

  }
#line 440
  if (dev_priv->sarea_priv) {
#line 441
    (dev_priv->sarea_priv)->last_enqueue = dev_priv->counter;
  } else {

  }
#line 443
  while (1) {
#line 443
    if (dev_priv->ring.space < 4 * 4) {
#line 443
      i915_wait_ring(dev, 4 * 4, "i915_emit_breadcrumb");
    } else {

    }
#line 443
    outcount = 0;
#line 443
    outring = dev_priv->ring.tail;
#line 443
    ringmask = dev_priv->ring.tail_mask;
#line 443
    virt = dev_priv->ring.virtual_start;
#line 443
    break;
  }
#line 444
  while (1) {
#line 444
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 444
    outcount = outcount + 1U;
#line 444
    outring = outring + 4U;
#line 444
    outring = outring & ringmask;
#line 444
    break;
  }
#line 445
  while (1) {
#line 445
    *((unsigned int volatile   *)(virt + outring)) = 5 << 2;
#line 445
    outcount = outcount + 1U;
#line 445
    outring = outring + 4U;
#line 445
    outring = outring & ringmask;
#line 445
    break;
  }
#line 446
  while (1) {
#line 446
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 446
    outcount = outcount + 1U;
#line 446
    outring = outring + 4U;
#line 446
    outring = outring & ringmask;
#line 446
    break;
  }
#line 447
  while (1) {
#line 447
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 447
    outcount = outcount + 1U;
#line 447
    outring = outring + 4U;
#line 447
    outring = outring & ringmask;
#line 447
    break;
  }
#line 448
  while (1) {
#line 448
    dev_priv->ring.tail = outring;
#line 448
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 448
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 448
    break;
  }
#line 449
  return;
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_cmdbuffer(struct drm_device *dev , drm_i915_cmdbuffer_t *cmd ) 
{ 
  int nbox ;
  int i ;
  int count ;
  int ret ;

  {
#line 454
  nbox = cmd->num_cliprects;
#line 455
  i = 0;
#line 457
  if (cmd->sz & 3) {
#line 458
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_cmdbuffer");
#line 459
    return (-22);
  } else {

  }
#line 462
  i915_kernel_lost_context(dev);
#line 464
  count = nbox ? nbox : 1;
#line 466
  i = 0;
#line 466
  while (1) {
#line 466
    if (i < count) {

    } else {
#line 466
      break;
    }
#line 467
    if (i < nbox) {
#line 468
      ret = i915_emit_box(dev, cmd->cliprects, i, cmd->DR1, cmd->DR4);
#line 470
      if (ret) {
#line 471
        return (ret);
      } else {

      }
    } else {

    }
#line 474
    ret = i915_emit_cmds(dev, (int *)cmd->buf, cmd->sz / 4);
#line 475
    if (ret) {
#line 476
      return (ret);
    } else {

    }
#line 466
    i = i + 1;
  }
#line 479
  i915_emit_breadcrumb(dev);
#line 480
  return (0);
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_batchbuffer(struct drm_device *dev , drm_i915_batchbuffer_t *batch ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 486
  dev_priv = dev->dev_private;
#line 487
  boxes = batch->cliprects;
#line 488
  nbox = batch->num_cliprects;
#line 489
  i = 0;
#line 492
  if ((batch->start | batch->used) & 7) {
#line 493
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_batchbuffer");
#line 494
    return (-22);
  } else {

  }
#line 497
  i915_kernel_lost_context(dev);
#line 499
  count = nbox ? nbox : 1;
#line 501
  i = 0;
#line 501
  while (1) {
#line 501
    if (i < count) {

    } else {
#line 501
      break;
    }
#line 502
    if (i < nbox) {
#line 503
      tmp = i915_emit_box(dev, boxes, i, batch->DR1, batch->DR4);
#line 503
      ret = tmp;
#line 505
      if (ret) {
#line 506
        return (ret);
      } else {

      }
    } else {

    }
#line 509
    if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 510
      while (1) {
#line 510
        if (dev_priv->ring.space < 2 * 4) {
#line 510
          i915_wait_ring(dev, 2 * 4, "i915_dispatch_batchbuffer");
        } else {

        }
#line 510
        outcount = 0;
#line 510
        outring = dev_priv->ring.tail;
#line 510
        ringmask = dev_priv->ring.tail_mask;
#line 510
        virt = dev_priv->ring.virtual_start;
#line 510
        break;
      }
#line 511
      if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 512
        while (1) {
#line 512
          *((unsigned int volatile   *)(virt + outring)) = (((49 << 23) | 0) | (2 << 6)) | (1 << 8);
#line 512
          outcount = outcount + 1U;
#line 512
          outring = outring + 4U;
#line 512
          outring = outring & ringmask;
#line 512
          break;
        }
#line 513
        while (1) {
#line 513
          *((unsigned int volatile   *)(virt + outring)) = batch->start;
#line 513
          outcount = outcount + 1U;
#line 513
          outring = outring + 4U;
#line 513
          outring = outring & ringmask;
#line 513
          break;
        }
      } else {
#line 515
        while (1) {
#line 515
          *((unsigned int volatile   *)(virt + outring)) = ((49 << 23) | 0) | (2 << 6);
#line 515
          outcount = outcount + 1U;
#line 515
          outring = outring + 4U;
#line 515
          outring = outring & ringmask;
#line 515
          break;
        }
#line 516
        while (1) {
#line 516
          *((unsigned int volatile   *)(virt + outring)) = batch->start | 1;
#line 516
          outcount = outcount + 1U;
#line 516
          outring = outring + 4U;
#line 516
          outring = outring & ringmask;
#line 516
          break;
        }
      }
#line 518
      while (1) {
#line 518
        dev_priv->ring.tail = outring;
#line 518
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 518
        writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 518
        break;
      }
    } else {
#line 520
      while (1) {
#line 520
        if (dev_priv->ring.space < 4 * 4) {
#line 520
          i915_wait_ring(dev, 4 * 4, "i915_dispatch_batchbuffer");
        } else {

        }
#line 520
        outcount = 0;
#line 520
        outring = dev_priv->ring.tail;
#line 520
        ringmask = dev_priv->ring.tail_mask;
#line 520
        virt = dev_priv->ring.virtual_start;
#line 520
        break;
      }
#line 521
      while (1) {
#line 521
        *((unsigned int volatile   *)(virt + outring)) = (48 << 23) | 1;
#line 521
        outcount = outcount + 1U;
#line 521
        outring = outring + 4U;
#line 521
        outring = outring & ringmask;
#line 521
        break;
      }
#line 522
      while (1) {
#line 522
        *((unsigned int volatile   *)(virt + outring)) = batch->start | 1;
#line 522
        outcount = outcount + 1U;
#line 522
        outring = outring + 4U;
#line 522
        outring = outring & ringmask;
#line 522
        break;
      }
#line 523
      while (1) {
#line 523
        *((unsigned int volatile   *)(virt + outring)) = (batch->start + batch->used) - 4;
#line 523
        outcount = outcount + 1U;
#line 523
        outring = outring + 4U;
#line 523
        outring = outring & ringmask;
#line 523
        break;
      }
#line 524
      while (1) {
#line 524
        *((unsigned int volatile   *)(virt + outring)) = 0;
#line 524
        outcount = outcount + 1U;
#line 524
        outring = outring + 4U;
#line 524
        outring = outring & ringmask;
#line 524
        break;
      }
#line 525
      while (1) {
#line 525
        dev_priv->ring.tail = outring;
#line 525
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 525
        writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 525
        break;
      }
    }
#line 501
    i = i + 1;
  }
#line 529
  i915_emit_breadcrumb(dev);
#line 531
  return (0);
}
}
#line 534 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_dispatch_flip(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  uint32_t tmp ;

  {
#line 536
  dev_priv = dev->dev_private;
#line 539
  if (! dev_priv->sarea_priv) {
#line 540
    return (-22);
  } else {

  }
#line 542
  while (1) {
#line 542
    if (drm_debug) {
#line 542
      printk("<7>[drm:%s] %s: page=%d pfCurrentPage=%d\n", "i915_dispatch_flip", "i915_dispatch_flip",
             dev_priv->current_page, (dev_priv->sarea_priv)->pf_current_page);
    } else {

    }
#line 542
    break;
  }
#line 547
  i915_kernel_lost_context(dev);
#line 549
  while (1) {
#line 549
    if (dev_priv->ring.space < 2 * 4) {
#line 549
      i915_wait_ring(dev, 2 * 4, "i915_dispatch_flip");
    } else {

    }
#line 549
    outcount = 0;
#line 549
    outring = dev_priv->ring.tail;
#line 549
    ringmask = dev_priv->ring.tail_mask;
#line 549
    virt = dev_priv->ring.virtual_start;
#line 549
    break;
  }
#line 550
  while (1) {
#line 550
    *((unsigned int volatile   *)(virt + outring)) = ((4 << 23) | 0) | (1 << 0);
#line 550
    outcount = outcount + 1U;
#line 550
    outring = outring + 4U;
#line 550
    outring = outring & ringmask;
#line 550
    break;
  }
#line 551
  while (1) {
#line 551
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 551
    outcount = outcount + 1U;
#line 551
    outring = outring + 4U;
#line 551
    outring = outring & ringmask;
#line 551
    break;
  }
#line 552
  while (1) {
#line 552
    dev_priv->ring.tail = outring;
#line 552
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 552
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 552
    break;
  }
#line 554
  while (1) {
#line 554
    if (dev_priv->ring.space < 6 * 4) {
#line 554
      i915_wait_ring(dev, 6 * 4, "i915_dispatch_flip");
    } else {

    }
#line 554
    outcount = 0;
#line 554
    outring = dev_priv->ring.tail;
#line 554
    ringmask = dev_priv->ring.tail_mask;
#line 554
    virt = dev_priv->ring.virtual_start;
#line 554
    break;
  }
#line 555
  while (1) {
#line 555
    *((unsigned int volatile   *)(virt + outring)) = (((0 << 29) | (20 << 23)) | 2) | (1 << 22);
#line 555
    outcount = outcount + 1U;
#line 555
    outring = outring + 4U;
#line 555
    outring = outring & ringmask;
#line 555
    break;
  }
#line 556
  while (1) {
#line 556
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 556
    outcount = outcount + 1U;
#line 556
    outring = outring + 4U;
#line 556
    outring = outring & ringmask;
#line 556
    break;
  }
#line 557
  if (dev_priv->current_page == 0) {
#line 558
    while (1) {
#line 558
      *((unsigned int volatile   *)(virt + outring)) = dev_priv->back_offset;
#line 558
      outcount = outcount + 1U;
#line 558
      outring = outring + 4U;
#line 558
      outring = outring & ringmask;
#line 558
      break;
    }
#line 559
    dev_priv->current_page = 1;
  } else {
#line 561
    while (1) {
#line 561
      *((unsigned int volatile   *)(virt + outring)) = dev_priv->front_offset;
#line 561
      outcount = outcount + 1U;
#line 561
      outring = outring + 4U;
#line 561
      outring = outring & ringmask;
#line 561
      break;
    }
#line 562
    dev_priv->current_page = 0;
  }
#line 564
  while (1) {
#line 564
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 564
    outcount = outcount + 1U;
#line 564
    outring = outring + 4U;
#line 564
    outring = outring & ringmask;
#line 564
    break;
  }
#line 565
  while (1) {
#line 565
    dev_priv->ring.tail = outring;
#line 565
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 565
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 565
    break;
  }
#line 567
  while (1) {
#line 567
    if (dev_priv->ring.space < 2 * 4) {
#line 567
      i915_wait_ring(dev, 2 * 4, "i915_dispatch_flip");
    } else {

    }
#line 567
    outcount = 0;
#line 567
    outring = dev_priv->ring.tail;
#line 567
    ringmask = dev_priv->ring.tail_mask;
#line 567
    virt = dev_priv->ring.virtual_start;
#line 567
    break;
  }
#line 568
  while (1) {
#line 568
    *((unsigned int volatile   *)(virt + outring)) = ((3 << 23) | 0) | (1 << 2);
#line 568
    outcount = outcount + 1U;
#line 568
    outring = outring + 4U;
#line 568
    outring = outring & ringmask;
#line 568
    break;
  }
#line 569
  while (1) {
#line 569
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 569
    outcount = outcount + 1U;
#line 569
    outring = outring + 4U;
#line 569
    outring = outring & ringmask;
#line 569
    break;
  }
#line 570
  while (1) {
#line 570
    dev_priv->ring.tail = outring;
#line 570
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 570
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 570
    break;
  }
#line 572
  tmp = dev_priv->counter;
#line 572
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 572
  (dev_priv->sarea_priv)->last_enqueue = tmp;
#line 574
  while (1) {
#line 574
    if (dev_priv->ring.space < 4 * 4) {
#line 574
      i915_wait_ring(dev, 4 * 4, "i915_dispatch_flip");
    } else {

    }
#line 574
    outcount = 0;
#line 574
    outring = dev_priv->ring.tail;
#line 574
    ringmask = dev_priv->ring.tail_mask;
#line 574
    virt = dev_priv->ring.virtual_start;
#line 574
    break;
  }
#line 575
  while (1) {
#line 575
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 575
    outcount = outcount + 1U;
#line 575
    outring = outring + 4U;
#line 575
    outring = outring & ringmask;
#line 575
    break;
  }
#line 576
  while (1) {
#line 576
    *((unsigned int volatile   *)(virt + outring)) = 5 << 2;
#line 576
    outcount = outcount + 1U;
#line 576
    outring = outring + 4U;
#line 576
    outring = outring & ringmask;
#line 576
    break;
  }
#line 577
  while (1) {
#line 577
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 577
    outcount = outcount + 1U;
#line 577
    outring = outring + 4U;
#line 577
    outring = outring & ringmask;
#line 577
    break;
  }
#line 578
  while (1) {
#line 578
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 578
    outcount = outcount + 1U;
#line 578
    outring = outring + 4U;
#line 578
    outring = outring & ringmask;
#line 578
    break;
  }
#line 579
  while (1) {
#line 579
    dev_priv->ring.tail = outring;
#line 579
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 579
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 579
    break;
  }
#line 581
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 582
  return (0);
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_quiescent(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 587
  dev_priv = dev->dev_private;
#line 589
  i915_kernel_lost_context(dev);
#line 590
  tmp = i915_wait_ring(dev, dev_priv->ring.Size - 8UL, "i915_quiescent");
#line 590
  return (tmp);
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_flush_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 598
  while (1) {
#line 598
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 598
      while (1) {
#line 598
        if (! ((dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 598
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_flush_ioctl", "i915_flush_ioctl", (dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 dev->lock.file_priv, file_priv);
#line 598
          return (-22);
        } else {

        }
#line 598
        break;
      }
    } else {

    }
#line 598
    break;
  }
#line 600
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 601
  ret = i915_quiescent(dev);
#line 602
  mutex_unlock(& dev->struct_mutex);
#line 604
  return (ret);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_batchbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 *hw_status ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_batchbuffer_t *batch ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 610
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 611
  hw_status = dev_priv->hw_status_page;
#line 612
  sarea_priv = dev_priv->sarea_priv;
#line 614
  batch = data;
#line 617
  if (! dev_priv->allow_batchbuffer) {
#line 618
    printk("<3>[drm:%s] *ERROR* Batchbuffer ioctl disabled\n", "i915_batchbuffer");
#line 619
    return (-22);
  } else {

  }
#line 622
  while (1) {
#line 622
    if (drm_debug) {
#line 622
      printk("<7>[drm:%s] i915 batchbuffer, start %x used %d cliprects %d\n", "i915_batchbuffer",
             batch->start, batch->used, batch->num_cliprects);
    } else {

    }
#line 622
    break;
  }
#line 625
  while (1) {
#line 625
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 625
      while (1) {
#line 625
        if (! ((dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 625
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_batchbuffer", "i915_batchbuffer", (dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 dev->lock.file_priv, file_priv);
#line 625
          return (-22);
        } else {

        }
#line 625
        break;
      }
    } else {

    }
#line 625
    break;
  }
#line 627
  if (batch->num_cliprects) {
#line 627
    tmp = current_thread_info();
#line 627
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batch->cliprects),
              "g" ((long )((unsigned long )batch->num_cliprects * sizeof(struct drm_clip_rect ))),
              "rm" (tmp->addr_limit.seg));
#line 627
    if (flag == 0UL) {
#line 627
      tmp___0 = 1;
    } else {
#line 627
      tmp___0 = 0;
    }
#line 627
    tmp___1 = __builtin_expect(tmp___0, 1);
#line 627
    if (tmp___1 ? 0 : -14) {
#line 630
      return (-14);
    } else {

    }
  } else {

  }
#line 632
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 633
  ret = i915_dispatch_batchbuffer(dev, batch);
#line 634
  mutex_unlock(& dev->struct_mutex);
#line 636
  if (sarea_priv) {
#line 637
    sarea_priv->last_dispatch = (int )*(hw_status + 5);
  } else {

  }
#line 638
  return (ret);
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_cmdbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 *hw_status ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_cmdbuffer_t *cmdbuf ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 644
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 645
  hw_status = dev_priv->hw_status_page;
#line 646
  sarea_priv = dev_priv->sarea_priv;
#line 648
  cmdbuf = data;
#line 651
  while (1) {
#line 651
    if (drm_debug) {
#line 651
      printk("<7>[drm:%s] i915 cmdbuffer, buf %p sz %d cliprects %d\n", "i915_cmdbuffer",
             cmdbuf->buf, cmdbuf->sz, cmdbuf->num_cliprects);
    } else {

    }
#line 651
    break;
  }
#line 654
  while (1) {
#line 654
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 654
      while (1) {
#line 654
        if (! ((dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 654
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_cmdbuffer", "i915_cmdbuffer", (dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 dev->lock.file_priv, file_priv);
#line 654
          return (-22);
        } else {

        }
#line 654
        break;
      }
    } else {

    }
#line 654
    break;
  }
#line 657
  if (cmdbuf->num_cliprects) {
#line 657
    tmp = current_thread_info();
#line 657
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuf->cliprects),
              "g" ((long )((unsigned long )cmdbuf->num_cliprects * sizeof(struct drm_clip_rect ))),
              "rm" (tmp->addr_limit.seg));
#line 657
    if (flag == 0UL) {
#line 657
      tmp___0 = 1;
    } else {
#line 657
      tmp___0 = 0;
    }
#line 657
    tmp___1 = __builtin_expect(tmp___0, 1);
#line 657
    if (tmp___1 ? 0 : -14) {
#line 660
      printk("<3>[drm:%s] *ERROR* Fault accessing cliprects\n", "i915_cmdbuffer");
#line 661
      return (-14);
    } else {

    }
  } else {

  }
#line 664
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 665
  ret = i915_dispatch_cmdbuffer(dev, cmdbuf);
#line 666
  mutex_unlock(& dev->struct_mutex);
#line 667
  if (ret) {
#line 668
    printk("<3>[drm:%s] *ERROR* i915_dispatch_cmdbuffer failed\n", "i915_cmdbuffer");
#line 669
    return (ret);
  } else {

  }
#line 672
  if (sarea_priv) {
#line 673
    sarea_priv->last_dispatch = (int )*(hw_status + 5);
  } else {

  }
#line 674
  return (0);
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_flip_bufs(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 682
  while (1) {
#line 682
    if (drm_debug) {
#line 682
      printk("<7>[drm:%s] %s\n", "i915_flip_bufs", "i915_flip_bufs");
    } else {

    }
#line 682
    break;
  }
#line 684
  while (1) {
#line 684
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 684
      while (1) {
#line 684
        if (! ((dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 684
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_flip_bufs", "i915_flip_bufs", (dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 dev->lock.file_priv, file_priv);
#line 684
          return (-22);
        } else {

        }
#line 684
        break;
      }
    } else {

    }
#line 684
    break;
  }
#line 686
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 687
  ret = i915_dispatch_flip(dev);
#line 688
  mutex_unlock(& dev->struct_mutex);
#line 690
  return (ret);
}
}
#line 693 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_getparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_getparam_t *param ;
  int value ;
  unsigned long tmp ;

  {
#line 696
  dev_priv = dev->dev_private;
#line 697
  param = data;
#line 700
  if (! dev_priv) {
#line 701
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_getparam");
#line 702
    return (-22);
  } else {

  }
#line 705
  switch (param->param) {
  case 1: 
#line 707
  value = (dev->pdev)->irq ? 1 : 0;
#line 708
  break;
  case 2: 
#line 710
  value = dev_priv->allow_batchbuffer ? 1 : 0;
#line 711
  break;
  case 3: 
#line 713
  value = *((u32 volatile   *)dev_priv->hw_status_page + 5);
#line 714
  break;
  case 4: 
#line 716
  value = dev->pci_device;
#line 717
  break;
  case 5: 
#line 719
  value = 1;
#line 720
  break;
  default: 
#line 722
  printk("<3>[drm:%s] *ERROR* Unknown parameter %d\n", "i915_getparam", param->param);
#line 723
  return (-22);
  }
#line 726
  tmp = copy_to_user(param->value, & value, sizeof(int ));
#line 726
  if (tmp) {
#line 727
    printk("<3>[drm:%s] *ERROR* DRM_COPY_TO_USER failed\n", "i915_getparam");
#line 728
    return (-14);
  } else {

  }
#line 731
  return (0);
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_setparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_setparam_t *param ;

  {
#line 737
  dev_priv = dev->dev_private;
#line 738
  param = data;
#line 740
  if (! dev_priv) {
#line 741
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_setparam");
#line 742
    return (-22);
  } else {

  }
#line 745
  switch (param->param) {
  case 1: 
#line 747
  break;
  case 2: 
#line 749
  dev_priv->tex_lru_log_granularity = param->value;
#line 750
  break;
  case 3: 
#line 752
  dev_priv->allow_batchbuffer = param->value;
#line 753
  break;
  default: 
#line 755
  printk("<3>[drm:%s] *ERROR* unknown parameter %d\n", "i915_setparam", param->param);
#line 756
  return (-22);
  }
#line 759
  return (0);
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static int i915_set_status_page(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_hws_addr_t *hws ;

  {
#line 765
  dev_priv = dev->dev_private;
#line 766
  hws = data;
#line 768
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810))) {
#line 769
    return (-22);
  } else {

  }
#line 771
  if (! dev_priv) {
#line 772
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_set_status_page");
#line 773
    return (-22);
  } else {

  }
#line 776
  printk("<7>set status page addr 0x%08x\n", (u32 )hws->addr);
#line 778
  dev_priv->status_gfx_addr = hws->addr & (unsigned long long )(131071 << 12);
#line 780
  dev_priv->hws_map.offset = (uint64_t )(dev->agp)->base + hws->addr;
#line 781
  dev_priv->hws_map.size = 4 * 1024;
#line 782
  dev_priv->hws_map.type = 0;
#line 783
  dev_priv->hws_map.flags = 0;
#line 784
  dev_priv->hws_map.mtrr = 0;
#line 786
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 787
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 788
    i915_dma_cleanup(dev);
#line 789
    dev_priv->status_gfx_addr = 0;
#line 790
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for G33 hw status page\n",
           "i915_set_status_page");
#line 792
    return (-12);
  } else {

  }
#line 794
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 796
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 797
  writel(dev_priv->status_gfx_addr, (dev_priv->mmio_map)->handle + 8320);
#line 798
  while (1) {
#line 798
    if (drm_debug) {
#line 798
      printk("<7>[drm:%s] load hws HWS_PGA with gfx mem 0x%x\n", "i915_set_status_page",
             dev_priv->status_gfx_addr);
    } else {

    }
#line 798
    break;
  }
#line 800
  while (1) {
#line 800
    if (drm_debug) {
#line 800
      printk("<7>[drm:%s] load hws at %p\n", "i915_set_status_page", dev_priv->hw_status_page);
    } else {

    }
#line 800
    break;
  }
#line 801
  return (0);
}
}
#line 856 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
static struct lock_class_key __key___1  ;
#line 804 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_load(struct drm_device *dev , unsigned long flags ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long base ;
  unsigned long size ;
  int ret ;
  int mmio_bar ;
  void *tmp ;
  int tmp___0 ;

  {
#line 806
  dev_priv = dev->dev_private;
#line 808
  ret = 0;
#line 808
  mmio_bar = (((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) ? 0 : 1;
#line 811
  dev->counters = dev->counters + 4UL;
#line 812
  dev->types[6] = _DRM_STAT_IRQ;
#line 813
  dev->types[7] = _DRM_STAT_PRIMARY;
#line 814
  dev->types[8] = _DRM_STAT_SECONDARY;
#line 815
  dev->types[9] = _DRM_STAT_DMA;
#line 817
  tmp = drm_alloc(sizeof(drm_i915_private_t ), 2);
#line 817
  dev_priv = tmp;
#line 818
  if ((unsigned long )dev_priv == (unsigned long )((void *)0)) {
#line 819
    return (-12);
  } else {

  }
#line 821
  memset(dev_priv, 0, sizeof(drm_i915_private_t ));
#line 823
  dev->dev_private = (void *)dev_priv;
#line 824
  dev_priv->dev = dev;
#line 827
  base = drm_get_resource_start(dev, mmio_bar);
#line 828
  size = drm_get_resource_len(dev, mmio_bar);
#line 830
  ret = drm_addmap(dev, base, size, _DRM_REGISTERS, _DRM_KERNEL | _DRM_DRIVER, & dev_priv->mmio_map);
#line 834
  i915_gem_load(dev);
#line 837
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810))) {
#line 838
    ret = i915_init_phys_hws(dev);
#line 839
    if (ret != 0) {
#line 840
      return (ret);
    } else {

    }
  } else {

  }
#line 850
  if (! (dev->pci_device == 10098) && ! (dev->pci_device == 10146 || dev->pci_device == 10158)) {
#line 851
    tmp___0 = pci_enable_msi(dev->pdev);
#line 851
    if (tmp___0) {
#line 852
      printk("<3>[drm:%s] *ERROR* failed to enable MSI\n", "i915_driver_load");
    } else {

    }
  } else {

  }
#line 854
  intel_opregion_init(dev);
#line 856
  while (1) {
#line 856
    __spin_lock_init(& dev_priv->user_irq_lock, "&dev_priv->user_irq_lock", & __key___1);
#line 856
    break;
  }
#line 858
  return (ret);
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_unload(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 863
  dev_priv = dev->dev_private;
#line 865
  if ((dev->pdev)->msi_enabled) {
#line 866
    pci_disable_msi(dev->pdev);
  } else {

  }
#line 868
  i915_free_hws(dev);
#line 870
  if (dev_priv->mmio_map) {
#line 871
    drm_rmmap(dev, dev_priv->mmio_map);
  } else {

  }
#line 873
  intel_opregion_free(dev);
#line 875
  drm_free(dev->dev_private, sizeof(drm_i915_private_t ), 2);
#line 878
  return (0);
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  void *tmp ;

  {
#line 885
  while (1) {
#line 885
    if (drm_debug) {
#line 885
      printk("<7>[drm:%s] \n", "i915_driver_open");
    } else {

    }
#line 885
    break;
  }
#line 886
  tmp = drm_alloc(sizeof(*i915_file_priv), 10);
#line 886
  i915_file_priv = (struct drm_i915_file_private *)tmp;
#line 889
  if (! i915_file_priv) {
#line 890
    return (-12);
  } else {

  }
#line 892
  file_priv->driver_priv = i915_file_priv;
#line 894
  i915_file_priv->mm.last_gem_seqno = 0;
#line 895
  i915_file_priv->mm.last_gem_throttle_seqno = 0;
#line 897
  return (0);
}
}
#line 900 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_lastclose(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 902
  dev_priv = dev->dev_private;
#line 904
  if (! dev_priv) {
#line 905
    return;
  } else {

  }
#line 907
  i915_gem_lastclose(dev);
#line 909
  if (dev_priv->agp_heap) {
#line 910
    i915_mem_takedown(& dev_priv->agp_heap);
  } else {

  }
#line 912
  i915_dma_cleanup(dev);
#line 913
  return;
}
}
#line 915 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 917
  dev_priv = dev->dev_private;
#line 918
  i915_mem_release(dev, file_priv, dev_priv->agp_heap);
#line 919
  return;
}
}
#line 921 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;

  {
#line 923
  i915_file_priv = file_priv->driver_priv;
#line 925
  drm_free(i915_file_priv, sizeof(*i915_file_priv), 10);
#line 926
  return;
}
}
#line 928 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
struct drm_ioctl_desc i915_ioctls[35]  = 
#line 928
  {      {0, & i915_dma_init, (1 | 2) | 4}, 
        {1, & i915_flush_ioctl, 1}, 
        {2, & i915_flip_bufs, 1}, 
        {3, & i915_batchbuffer, 1}, 
        {4, & i915_irq_emit, 1}, 
        {5, & i915_irq_wait, 1}, 
        {6, & i915_getparam, 1}, 
        {7, & i915_setparam, (1 | 2) | 4}, 
        {8, & i915_mem_alloc, 1}, 
        {9, & i915_mem_free, 1}, 
        {10, & i915_mem_init_heap, (1 | 2) | 4}, 
        {11, & i915_cmdbuffer, 1}, 
        {12, & i915_mem_destroy_heap, (1 | 2) | 4}, 
        {13, & i915_vblank_pipe_set, (1 | 2) | 4}, 
        {14, & i915_vblank_pipe_get, 1}, 
        {15, & i915_vblank_swap, 1}, 
        {0U, 0, 0}, 
        {17, & i915_set_status_page, 1}, 
        {0U, 0, 0}, 
        {19, & i915_gem_init_ioctl, 1}, 
        {20, & i915_gem_execbuffer, 1}, 
        {21, & i915_gem_pin_ioctl, 1 | 4}, 
        {22, & i915_gem_unpin_ioctl, 1 | 4}, 
        {23, & i915_gem_busy_ioctl, 1}, 
        {24, & i915_gem_throttle_ioctl, 1}, 
        {25, & i915_gem_entervt_ioctl, 1}, 
        {26, & i915_gem_leavevt_ioctl, 1}, 
        {27, & i915_gem_create_ioctl, 0}, 
        {28, & i915_gem_pread_ioctl, 0}, 
        {29, & i915_gem_pwrite_ioctl, 0}, 
        {30, & i915_gem_mmap_ioctl, 0}, 
        {31, & i915_gem_set_domain_ioctl, 0}, 
        {32, & i915_gem_sw_finish_ioctl, 0}, 
        {33, & i915_gem_set_tiling, 0}, 
        {34, & i915_gem_get_tiling, 0}};
#line 964 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_max_ioctl  =    sizeof(i915_ioctls) / sizeof(i915_ioctls[0]) + (sizeof(char [1 - 2 * 0]) - 1UL);
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_dma.c"
int i915_driver_device_is_agp(struct drm_device *dev ) 
{ 


  {
#line 979
  return (1);
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 301 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 23 "include/asm/current.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (sizeof(_proxy_pda.pcurrent)) {
  case 2UL: 
#line 25
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 4UL: 
#line 25
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  case 8UL: 
#line 25
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 25
  break;
  default: 
#line 25
  __bad_pda_field();
  }
#line 25
  return (ret__);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head *new , struct list_head *prev , struct list_head *next ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 110
extern void list_del(struct list_head *entry ) ;
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
#line 78
  tmp___0 = variable_test_bit(flag, & ti->flags);
#line 78
  return (tmp___0);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 35
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 47
extern void _spin_unlock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                 void *key ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 111
extern void add_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 113
extern void remove_wait_queue(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 135
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies  __attribute__((__section__(".data"))) ;
#line 192 "include/linux/workqueue.h"
extern int schedule_work(struct work_struct *work ) ;
#line 182 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 184
  if (size != (size_t )0 && n > ~ 0UL / size) {
#line 185
    return ((void *)0);
  } else {

  }
#line 186
  tmp = __kmalloc(n * size, flags | 32768U);
#line 186
  return (tmp);
}
}
#line 329 "include/linux/sched.h"
extern long schedule_timeout(long timeout ) ;
#line 2000 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2002
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2002
  return (tmp);
}
}
#line 2020 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 2022
  tmp = test_tsk_thread_flag(p, 2);
#line 2022
  if (tmp) {
#line 2022
    tmp___0 = 1;
  } else {
#line 2022
    tmp___0 = 0;
  }
#line 2022
  tmp___1 = __builtin_expect(tmp___0, 0);
#line 2022
  return (tmp___1);
}
}
#line 1068 "include/drm/drmP.h"
extern struct drm_drawable_info *drm_get_drawable_info(struct drm_device *dev , drm_drawable_t id ) ;
#line 1143
extern int drm_vblank_init(struct drm_device *dev , int num_crtcs ) ;
#line 1147
extern void drm_locked_tasklet(struct drm_device *dev , void (*func)(struct drm_device * ) ) ;
#line 1149
extern u32 drm_vblank_count(struct drm_device *dev , int crtc ) ;
#line 1150
extern void drm_handle_vblank(struct drm_device *dev , int crtc ) ;
#line 1151
extern int drm_vblank_get(struct drm_device *dev , int crtc ) ;
#line 1152
extern void drm_vblank_put(struct drm_device *dev , int crtc ) ;
#line 1361 "include/drm/drmP.h"
__inline static void *drm_calloc(size_t nmemb , size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1363
  tmp = kcalloc(nmemb, size, (16U | 64U) | 128U);
#line 1363
  return (tmp);
}
}
#line 438 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_user_irq_get(struct drm_device *dev ) ;
#line 439
void i915_user_irq_put(struct drm_device *dev ) ;
#line 441
void i915_gem_vblank_work_handler(struct work_struct *work ) ;
#line 455
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) ;
#line 510
uint32_t i915_get_gem_seqno(struct drm_device *dev ) ;
#line 542
void opregion_asle_intr(struct drm_device *dev ) ;
#line 543
void opregion_enable_asle(struct drm_device *dev ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 45
  if ((dev_priv->irq_mask_reg & mask) != 0U) {
#line 46
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & ~ mask;
#line 47
    writel(dev_priv->irq_mask_reg, (dev_priv->mmio_map)->handle + 8360);
#line 48
    readl((dev_priv->mmio_map)->handle + 8360);
  } else {

  }
#line 50
  return;
}
}
#line 52 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
__inline static void i915_disable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 55
  if ((dev_priv->irq_mask_reg & mask) != mask) {
#line 56
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg | mask;
#line 57
    writel(dev_priv->irq_mask_reg, (dev_priv->mmio_map)->handle + 8360);
#line 58
    readl((dev_priv->mmio_map)->handle + 8360);
  } else {

  }
#line 60
  return;
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_get_pipe(struct drm_device *dev , int plane ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 dspcntr ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 74
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 77
  if (plane) {
#line 77
    tmp = readl((dev_priv->mmio_map)->handle + 463232);
#line 77
    dspcntr = tmp;
  } else {
#line 77
    tmp___0 = readl((dev_priv->mmio_map)->handle + 459136);
#line 77
    dspcntr = tmp___0;
  }
#line 79
  return (dspcntr & (unsigned int )(1 << 24) ? 1 : 0);
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_get_plane(struct drm_device *dev , int pipe ) 
{ 
  int tmp ;

  {
#line 94
  tmp = i915_get_pipe(dev, 0);
#line 94
  if (tmp == pipe) {
#line 95
    return (0);
  } else {

  }
#line 96
  return (1);
}
}
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_pipe_enabled(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long pipeconf ;
  unsigned int tmp ;

  {
#line 111
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 112
  pipeconf = pipe ? 462856 : 458760;
#line 114
  tmp = readl((dev_priv->mmio_map)->handle + pipeconf);
#line 114
  if (tmp & (unsigned int )(1 << 31)) {
#line 115
    return (1);
  } else {

  }
#line 117
  return (0);
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static void i915_vblank_tasklet(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;
  struct list_head *list ;
  struct list_head *tmp ;
  struct list_head hits ;
  struct list_head *hit ;
  int nhits ;
  int nrects ;
  int slice[2] ;
  int upper[2] ;
  int lower[2] ;
  int i ;
  unsigned int counter[2] ;
  struct drm_drawable_info *drw ;
  drm_i915_sarea_t *sarea_priv ;
  u32 cpp ;
  u32 cmd ;
  u32 src_pitch ;
  u32 dst_pitch ;
  u32 ropcpp ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  drm_i915_vbl_swap_t *vbl_swap ;
  struct list_head  const  *__mptr ;
  int pipe ;
  int tmp___0 ;
  drm_i915_vbl_swap_t *swap_cmp ;
  struct list_head  const  *__mptr___0 ;
  struct drm_drawable_info *drw_cmp ;
  struct drm_drawable_info *tmp___1 ;
  int _max1 ;
  int _max2 ;
  int _max1___0 ;
  int _max2___0 ;
  drm_i915_vbl_swap_t *swap_hit ;
  struct list_head  const  *__mptr___1 ;
  struct drm_clip_rect *rect ;
  int num_rects ;
  int plane ;
  unsigned short top ;
  unsigned short bottom ;
  int y1 ;
  unsigned short _max1___1 ;
  unsigned short _max2___1 ;
  int y2 ;
  unsigned short _min1 ;
  unsigned short _min2 ;
  int tmp___2 ;
  int tmp___3 ;
  drm_i915_vbl_swap_t *swap_hit___0 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 127
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 133
  sarea_priv = dev_priv->sarea_priv;
#line 134
  cpp = dev_priv->cpp;
#line 135
  cmd = cpp == (u32 )4 ? ((((2 << 29) | (83 << 22)) | 6) | (1 << 21)) | (1 << 20) : ((2 << 29) | (83 << 22)) | 6;
#line 139
  src_pitch = (u32 )sarea_priv->pitch * cpp;
#line 140
  dst_pitch = (u32 )sarea_priv->pitch * cpp;
#line 141
  ropcpp = (unsigned int )(204 << 16) | ((cpp - (u32 )1) << 24);
#line 144
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && sarea_priv->front_tiled) {
#line 145
    cmd = cmd | (unsigned int )(1 << 11);
#line 146
    dst_pitch = dst_pitch >> 2;
  } else {

  }
#line 148
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && sarea_priv->back_tiled) {
#line 149
    cmd = cmd | (unsigned int )(1 << 15);
#line 150
    src_pitch = src_pitch >> 2;
  } else {

  }
#line 153
  counter[0] = drm_vblank_count(dev, 0);
#line 154
  counter[1] = drm_vblank_count(dev, 1);
#line 156
  while (1) {
#line 156
    if (drm_debug) {
#line 156
      printk("<7>[drm:%s] \n", "i915_vblank_tasklet");
    } else {

    }
#line 156
    break;
  }
#line 158
  INIT_LIST_HEAD(& hits);
#line 160
  nrects = 0;
#line 160
  nhits = nrects;
#line 162
  while (1) {
#line 162
    irqflags = _spin_lock_irqsave(& dev_priv->swaps_lock);
#line 162
    break;
  }
#line 165
  list = dev_priv->vbl_swaps.head.next;
#line 165
  tmp = list->next;
#line 165
  while (1) {
#line 165
    if ((unsigned long )list != (unsigned long )(& dev_priv->vbl_swaps.head)) {

    } else {
#line 165
      break;
    }
#line 167
    __mptr = list;
#line 167
    vbl_swap = (drm_i915_vbl_swap_t *)((char *)__mptr - (unsigned int )(& ((drm_i915_vbl_swap_t *)0)->head));
#line 168
    tmp___0 = i915_get_pipe(dev, vbl_swap->plane);
#line 168
    pipe = tmp___0;
#line 170
    if (counter[pipe] - vbl_swap->sequence > (unsigned int )(1 << 23)) {
#line 171
      goto __Cont;
    } else {

    }
#line 173
    list_del(list);
#line 174
    dev_priv->swaps_pending = dev_priv->swaps_pending - 1U;
#line 175
    drm_vblank_put(dev, pipe);
#line 177
    _spin_unlock(& dev_priv->swaps_lock);
#line 178
    _spin_lock(& dev->drw_lock);
#line 180
    drw = drm_get_drawable_info(dev, vbl_swap->drw_id);
#line 182
    if (! drw) {
#line 183
      _spin_unlock(& dev->drw_lock);
#line 184
      drm_free(vbl_swap, sizeof(*vbl_swap), 2);
#line 185
      _spin_lock(& dev_priv->swaps_lock);
#line 186
      goto __Cont;
    } else {

    }
#line 189
    hit = hits.next;
#line 189
    while (1) {
#line 189
      __builtin_prefetch(hit->next);
#line 189
      if ((unsigned long )hit != (unsigned long )(& hits)) {

      } else {
#line 189
        break;
      }
#line 191
      __mptr___0 = hit;
#line 191
      swap_cmp = (drm_i915_vbl_swap_t *)((char *)__mptr___0 - (unsigned int )(& ((drm_i915_vbl_swap_t *)0)->head));
#line 192
      tmp___1 = drm_get_drawable_info(dev, swap_cmp->drw_id);
#line 192
      drw_cmp = tmp___1;
#line 195
      if (drw_cmp && (int )(drw_cmp->rects + 0)->y1 > (int )(drw->rects + 0)->y1) {
#line 197
        list_add_tail(list, hit);
#line 198
        break;
      } else {

      }
#line 189
      hit = hit->next;
    }
#line 202
    _spin_unlock(& dev->drw_lock);
#line 205
    if ((unsigned long )hit == (unsigned long )(& hits)) {
#line 206
      list_add_tail(list, hits.prev);
    } else {

    }
#line 208
    nhits = nhits + 1;
#line 210
    _spin_lock(& dev_priv->swaps_lock);
    __Cont: /* CIL Label */ 
#line 165
    list = tmp;
#line 165
    tmp = list->next;
  }
#line 213
  if (nhits == 0) {
#line 214
    while (1) {
#line 214
      _spin_unlock_irqrestore(& dev_priv->swaps_lock, irqflags);
#line 214
      break;
    }
#line 215
    return;
  } else {

  }
#line 218
  _spin_unlock(& dev_priv->swaps_lock);
#line 220
  i915_kernel_lost_context(dev);
#line 222
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 223
    while (1) {
#line 223
      if (dev_priv->ring.space < 4 * 4) {
#line 223
        i915_wait_ring(dev, 4 * 4, "i915_vblank_tasklet");
      } else {

      }
#line 223
      outcount = 0;
#line 223
      outring = dev_priv->ring.tail;
#line 223
      ringmask = dev_priv->ring.tail_mask;
#line 223
      virt = dev_priv->ring.virtual_start;
#line 223
      break;
    }
#line 225
    while (1) {
#line 225
      *((unsigned int volatile   *)(virt + outring)) = (30976 << 16) | 2;
#line 225
      outcount = outcount + 1U;
#line 225
      outring = outring + 4U;
#line 225
      outring = outring & ringmask;
#line 225
      break;
    }
#line 226
    while (1) {
#line 226
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 226
      outcount = outcount + 1U;
#line 226
      outring = outring + 4U;
#line 226
      outring = outring & ringmask;
#line 226
      break;
    }
#line 227
    while (1) {
#line 227
      *((unsigned int volatile   *)(virt + outring)) = ((sarea_priv->width - 1) & 65535) | ((sarea_priv->height - 1) << 16);
#line 227
      outcount = outcount + 1U;
#line 227
      outring = outring + 4U;
#line 227
      outring = outring & ringmask;
#line 227
      break;
    }
#line 228
    while (1) {
#line 228
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 228
      outcount = outcount + 1U;
#line 228
      outring = outring + 4U;
#line 228
      outring = outring & ringmask;
#line 228
      break;
    }
#line 229
    while (1) {
#line 229
      dev_priv->ring.tail = outring;
#line 229
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 229
      writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 229
      break;
    }
  } else {
#line 231
    while (1) {
#line 231
      if (dev_priv->ring.space < 6 * 4) {
#line 231
        i915_wait_ring(dev, 6 * 4, "i915_vblank_tasklet");
      } else {

      }
#line 231
      outcount = 0;
#line 231
      outring = dev_priv->ring.tail;
#line 231
      ringmask = dev_priv->ring.tail_mask;
#line 231
      virt = dev_priv->ring.virtual_start;
#line 231
      break;
    }
#line 233
    while (1) {
#line 233
      *((unsigned int volatile   *)(virt + outring)) = (((3 << 29) | (29 << 24)) | (128 << 16)) | 3;
#line 233
      outcount = outcount + 1U;
#line 233
      outring = outring + 4U;
#line 233
      outring = outring & ringmask;
#line 233
      break;
    }
#line 234
    while (1) {
#line 234
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 234
      outcount = outcount + 1U;
#line 234
      outring = outring + 4U;
#line 234
      outring = outring & ringmask;
#line 234
      break;
    }
#line 235
    while (1) {
#line 235
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 235
      outcount = outcount + 1U;
#line 235
      outring = outring + 4U;
#line 235
      outring = outring & ringmask;
#line 235
      break;
    }
#line 236
    while (1) {
#line 236
      *((unsigned int volatile   *)(virt + outring)) = sarea_priv->width | (sarea_priv->height << 16);
#line 236
      outcount = outcount + 1U;
#line 236
      outring = outring + 4U;
#line 236
      outring = outring & ringmask;
#line 236
      break;
    }
#line 237
    while (1) {
#line 237
      *((unsigned int volatile   *)(virt + outring)) = sarea_priv->width | (sarea_priv->height << 16);
#line 237
      outcount = outcount + 1U;
#line 237
      outring = outring + 4U;
#line 237
      outring = outring & ringmask;
#line 237
      break;
    }
#line 238
    while (1) {
#line 238
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 238
      outcount = outcount + 1U;
#line 238
      outring = outring + 4U;
#line 238
      outring = outring & ringmask;
#line 238
      break;
    }
#line 240
    while (1) {
#line 240
      dev_priv->ring.tail = outring;
#line 240
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 240
      writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 240
      break;
    }
  }
#line 243
  sarea_priv->ctxOwner = 0;
#line 245
  upper[1] = 0;
#line 245
  upper[0] = upper[1];
#line 246
  _max1 = sarea_priv->pipeA_h / nhits;
#line 246
  _max2 = 1;
#line 246
  slice[0] = _max1 > _max2 ? _max1 : _max2;
#line 247
  _max1___0 = sarea_priv->pipeB_h / nhits;
#line 247
  _max2___0 = 1;
#line 247
  slice[1] = _max1___0 > _max2___0 ? _max1___0 : _max2___0;
#line 248
  lower[0] = sarea_priv->pipeA_y + slice[0];
#line 249
  lower[1] = sarea_priv->pipeB_y + slice[0];
#line 251
  _spin_lock(& dev->drw_lock);
#line 258
  i = 0;
#line 258
  while (1) {
#line 258
    tmp___3 = i;
#line 258
    i = i + 1;
#line 258
    if (tmp___3 < nhits) {

    } else {
#line 258
      break;
    }
#line 261
    if (i == nhits) {
#line 262
      lower[1] = sarea_priv->height;
#line 262
      lower[0] = lower[1];
    } else {

    }
#line 264
    hit = hits.next;
#line 264
    while (1) {
#line 264
      __builtin_prefetch(hit->next);
#line 264
      if ((unsigned long )hit != (unsigned long )(& hits)) {

      } else {
#line 264
        break;
      }
#line 266
      __mptr___1 = hit;
#line 266
      swap_hit = (drm_i915_vbl_swap_t *)((char *)__mptr___1 - (unsigned int )(& ((drm_i915_vbl_swap_t *)0)->head));
#line 271
      drw = drm_get_drawable_info(dev, swap_hit->drw_id);
#line 273
      if (! drw) {
#line 274
        goto __Cont___0;
      } else {

      }
#line 276
      rect = drw->rects;
#line 277
      plane = swap_hit->plane;
#line 278
      top = upper[plane];
#line 279
      bottom = lower[plane];
#line 281
      num_rects = drw->num_rects;
#line 281
      while (1) {
#line 281
        tmp___2 = num_rects;
#line 281
        num_rects = num_rects - 1;
#line 281
        if (tmp___2) {

        } else {
#line 281
          break;
        }
#line 282
        _max1___1 = rect->y1;
#line 282
        _max2___1 = top;
#line 282
        y1 = (int )_max1___1 > (int )_max2___1 ? _max1___1 : _max2___1;
#line 283
        _min1 = rect->y2;
#line 283
        _min2 = bottom;
#line 283
        y2 = (int )_min1 < (int )_min2 ? _min1 : _min2;
#line 285
        if (y1 >= y2) {
#line 286
          goto __Cont___1;
        } else {

        }
#line 288
        while (1) {
#line 288
          if (dev_priv->ring.space < 8 * 4) {
#line 288
            i915_wait_ring(dev, 8 * 4, "i915_vblank_tasklet");
          } else {

          }
#line 288
          outcount = 0;
#line 288
          outring = dev_priv->ring.tail;
#line 288
          ringmask = dev_priv->ring.tail_mask;
#line 288
          virt = dev_priv->ring.virtual_start;
#line 288
          break;
        }
#line 290
        while (1) {
#line 290
          *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 290
          outcount = outcount + 1U;
#line 290
          outring = outring + 4U;
#line 290
          outring = outring & ringmask;
#line 290
          break;
        }
#line 291
        while (1) {
#line 291
          *((unsigned int volatile   *)(virt + outring)) = ropcpp | dst_pitch;
#line 291
          outcount = outcount + 1U;
#line 291
          outring = outring + 4U;
#line 291
          outring = outring & ringmask;
#line 291
          break;
        }
#line 292
        while (1) {
#line 292
          *((unsigned int volatile   *)(virt + outring)) = (y1 << 16) | (int )rect->x1;
#line 292
          outcount = outcount + 1U;
#line 292
          outring = outring + 4U;
#line 292
          outring = outring & ringmask;
#line 292
          break;
        }
#line 293
        while (1) {
#line 293
          *((unsigned int volatile   *)(virt + outring)) = (y2 << 16) | (int )rect->x2;
#line 293
          outcount = outcount + 1U;
#line 293
          outring = outring + 4U;
#line 293
          outring = outring & ringmask;
#line 293
          break;
        }
#line 294
        while (1) {
#line 294
          *((unsigned int volatile   *)(virt + outring)) = sarea_priv->front_offset;
#line 294
          outcount = outcount + 1U;
#line 294
          outring = outring + 4U;
#line 294
          outring = outring & ringmask;
#line 294
          break;
        }
#line 295
        while (1) {
#line 295
          *((unsigned int volatile   *)(virt + outring)) = (y1 << 16) | (int )rect->x1;
#line 295
          outcount = outcount + 1U;
#line 295
          outring = outring + 4U;
#line 295
          outring = outring & ringmask;
#line 295
          break;
        }
#line 296
        while (1) {
#line 296
          *((unsigned int volatile   *)(virt + outring)) = src_pitch;
#line 296
          outcount = outcount + 1U;
#line 296
          outring = outring + 4U;
#line 296
          outring = outring & ringmask;
#line 296
          break;
        }
#line 297
        while (1) {
#line 297
          *((unsigned int volatile   *)(virt + outring)) = sarea_priv->back_offset;
#line 297
          outcount = outcount + 1U;
#line 297
          outring = outring + 4U;
#line 297
          outring = outring & ringmask;
#line 297
          break;
        }
#line 299
        while (1) {
#line 299
          dev_priv->ring.tail = outring;
#line 299
          dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 299
          writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 299
          break;
        }
        __Cont___1: /* CIL Label */ 
#line 281
        rect = rect + 1;
      }
      __Cont___0: /* CIL Label */ 
#line 264
      hit = hit->next;
    }
#line 258
    upper[0] = lower[0];
#line 258
    lower[0] = lower[0] + slice[0];
#line 258
    upper[1] = lower[1];
#line 258
    lower[1] = lower[1] + slice[1];
  }
#line 304
  while (1) {
#line 304
    _spin_unlock_irqrestore(& dev->drw_lock, irqflags);
#line 304
    break;
  }
#line 306
  hit = hits.next;
#line 306
  tmp = hit->next;
#line 306
  while (1) {
#line 306
    if ((unsigned long )hit != (unsigned long )(& hits)) {

    } else {
#line 306
      break;
    }
#line 308
    __mptr___2 = hit;
#line 308
    swap_hit___0 = (drm_i915_vbl_swap_t *)((char *)__mptr___2 - (unsigned int )(& ((drm_i915_vbl_swap_t *)0)->head));
#line 310
    list_del(hit);
#line 312
    drm_free(swap_hit___0, sizeof(*swap_hit___0), 2);
#line 306
    hit = tmp;
#line 306
    tmp = hit->next;
  }
#line 314
  return;
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
u32 i915_get_vblank_counter(struct drm_device *dev , int plane ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long high_frame ;
  unsigned long low_frame ;
  u32 high1 ;
  u32 high2 ;
  u32 low ;
  u32 count ;
  int pipe ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 318
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 324
  pipe = i915_get_pipe(dev, plane);
#line 325
  high_frame = pipe ? 462912 : 458816;
#line 326
  low_frame = pipe ? 462916 : 458820;
#line 328
  tmp = i915_pipe_enabled(dev, pipe);
#line 328
  if (tmp) {

  } else {
#line 329
    printk("<3>[drm:%s] *ERROR* trying to get vblank count for disabled pipe %d\n",
           "i915_get_vblank_counter", pipe);
#line 330
    return (0);
  }
#line 338
  while (1) {
#line 339
    tmp___0 = readl((dev_priv->mmio_map)->handle + high_frame);
#line 339
    high1 = (tmp___0 & 65535U) >> 0;
#line 341
    tmp___1 = readl((dev_priv->mmio_map)->handle + low_frame);
#line 341
    low = (tmp___1 & 4278190080U) >> 24;
#line 343
    tmp___2 = readl((dev_priv->mmio_map)->handle + high_frame);
#line 343
    high2 = (tmp___2 & 65535U) >> 0;
#line 338
    if (high1 != high2) {

    } else {
#line 338
      break;
    }
  }
#line 347
  count = (high1 << 8) | low;
#line 349
  return (count);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_gem_vblank_work_handler(struct work_struct *work ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_device *dev ;
  struct work_struct  const  *__mptr ;

  {
#line 358
  __mptr = work;
#line 358
  dev_priv = (drm_i915_private_t *)((char *)__mptr - (unsigned int )(& ((drm_i915_private_t *)0)->mm.vblank_work));
#line 360
  dev = dev_priv->dev;
#line 362
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 363
  i915_vblank_tasklet(dev);
#line 364
  mutex_unlock(& dev->struct_mutex);
#line 365
  return;
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  u32 iir ;
  u32 pipea_stats ;
  u32 pipeb_stats ;
  int vblank ;
  int tmp ;
  int tmp___0 ;

  {
#line 369
  dev = (struct drm_device *)arg;
#line 370
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 373
  vblank = 0;
#line 375
  if ((dev->pdev)->msi_enabled) {
#line 376
    writel(~ 0, (dev_priv->mmio_map)->handle + 8360);
  } else {

  }
#line 377
  iir = readl((dev_priv->mmio_map)->handle + 8356);
#line 379
  if (iir == (u32 )0) {
#line 380
    if ((dev->pdev)->msi_enabled) {
#line 381
      writel(dev_priv->irq_mask_reg, (dev_priv->mmio_map)->handle + 8360);
#line 382
      readl((dev_priv->mmio_map)->handle + 8360);
    } else {

    }
#line 384
    return (0);
  } else {

  }
#line 391
  if (iir & (unsigned int )(1 << 6)) {
#line 392
    pipea_stats = readl((dev_priv->mmio_map)->handle + 458788);
#line 393
    if (! (dev_priv->vblank_pipe & 1)) {
#line 394
      pipea_stats = (unsigned long )pipea_stats & ~ ((1UL << 18) | (1UL << 17));
    } else
#line 396
    if ((unsigned long )pipea_stats & ((1UL << 2) | (1UL << 1))) {
#line 398
      vblank = vblank + 1;
#line 399
      tmp = i915_get_plane(dev, 0);
#line 399
      drm_handle_vblank(dev, tmp);
    } else {

    }
#line 402
    writel(pipea_stats, (dev_priv->mmio_map)->handle + 458788);
  } else {

  }
#line 404
  if (iir & (unsigned int )(1 << 4)) {
#line 405
    pipeb_stats = readl((dev_priv->mmio_map)->handle + 462884);
#line 407
    writel(pipeb_stats, (dev_priv->mmio_map)->handle + 462884);
#line 411
    if (! (dev_priv->vblank_pipe & 2)) {
#line 412
      pipeb_stats = (unsigned long )pipeb_stats & ~ ((1UL << 18) | (1UL << 17));
    } else
#line 414
    if ((unsigned long )pipeb_stats & ((1UL << 2) | (1UL << 1))) {
#line 416
      vblank = vblank + 1;
#line 417
      tmp___0 = i915_get_plane(dev, 1);
#line 417
      drm_handle_vblank(dev, tmp___0);
    } else {

    }
#line 420
    if ((unsigned long )pipeb_stats & (1UL << 6)) {
#line 421
      opregion_asle_intr(dev);
    } else {

    }
#line 422
    writel(pipeb_stats, (dev_priv->mmio_map)->handle + 462884);
  } else {

  }
#line 425
  writel(iir, (dev_priv->mmio_map)->handle + 8356);
#line 426
  if ((dev->pdev)->msi_enabled) {
#line 427
    writel(dev_priv->irq_mask_reg, (dev_priv->mmio_map)->handle + 8360);
  } else {

  }
#line 428
  readl((dev_priv->mmio_map)->handle + 8356);
#line 430
  if (dev_priv->sarea_priv) {
#line 431
    (dev_priv->sarea_priv)->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 5);
  } else {

  }
#line 434
  if (iir & (unsigned int )(1 << 1)) {
#line 435
    dev_priv->mm.irq_gem_seqno = i915_get_gem_seqno(dev);
#line 436
    __wake_up(& dev_priv->irq_queue, 1, 1, (void *)0);
  } else {

  }
#line 439
  if (iir & (unsigned int )(1 << 0)) {
#line 440
    opregion_asle_intr(dev);
  } else {

  }
#line 442
  if (vblank && dev_priv->swaps_pending > 0U) {
#line 443
    if ((unsigned long )dev_priv->ring.ring_obj == (unsigned long )((void *)0)) {
#line 444
      drm_locked_tasklet(dev, & i915_vblank_tasklet);
    } else {
#line 446
      schedule_work(& dev_priv->mm.vblank_work);
    }
  } else {

  }
#line 449
  return (1);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_emit_irq(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 454
  dev_priv = dev->dev_private;
#line 457
  i915_kernel_lost_context(dev);
#line 459
  while (1) {
#line 459
    if (drm_debug) {
#line 459
      printk("<7>[drm:%s] \n", "i915_emit_irq");
    } else {

    }
#line 459
    break;
  }
#line 461
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 462
  if ((unsigned long )dev_priv->counter > 2147483647UL) {
#line 463
    dev_priv->counter = 1;
  } else {

  }
#line 464
  if (dev_priv->sarea_priv) {
#line 465
    (dev_priv->sarea_priv)->last_enqueue = dev_priv->counter;
  } else {

  }
#line 467
  while (1) {
#line 467
    if (dev_priv->ring.space < 6 * 4) {
#line 467
      i915_wait_ring(dev, 6 * 4, "i915_emit_irq");
    } else {

    }
#line 467
    outcount = 0;
#line 467
    outring = dev_priv->ring.tail;
#line 467
    ringmask = dev_priv->ring.tail_mask;
#line 467
    virt = dev_priv->ring.virtual_start;
#line 467
    break;
  }
#line 468
  while (1) {
#line 468
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 468
    outcount = outcount + 1U;
#line 468
    outring = outring + 4U;
#line 468
    outring = outring & ringmask;
#line 468
    break;
  }
#line 469
  while (1) {
#line 469
    *((unsigned int volatile   *)(virt + outring)) = 5 << 2;
#line 469
    outcount = outcount + 1U;
#line 469
    outring = outring + 4U;
#line 469
    outring = outring & ringmask;
#line 469
    break;
  }
#line 470
  while (1) {
#line 470
    *((unsigned int volatile   *)(virt + outring)) = dev_priv->counter;
#line 470
    outcount = outcount + 1U;
#line 470
    outring = outring + 4U;
#line 470
    outring = outring & ringmask;
#line 470
    break;
  }
#line 471
  while (1) {
#line 471
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 471
    outcount = outcount + 1U;
#line 471
    outring = outring + 4U;
#line 471
    outring = outring & ringmask;
#line 471
    break;
  }
#line 472
  while (1) {
#line 472
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 472
    outcount = outcount + 1U;
#line 472
    outring = outring + 4U;
#line 472
    outring = outring & ringmask;
#line 472
    break;
  }
#line 473
  while (1) {
#line 473
    *((unsigned int volatile   *)(virt + outring)) = (2 << 23) | 0;
#line 473
    outcount = outcount + 1U;
#line 473
    outring = outring + 4U;
#line 473
    outring = outring & ringmask;
#line 473
    break;
  }
#line 474
  while (1) {
#line 474
    dev_priv->ring.tail = outring;
#line 474
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 474
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 474
    break;
  }
#line 476
  return (dev_priv->counter);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_user_irq_get(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 481
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 483
  _spin_lock(& dev_priv->user_irq_lock);
#line 484
  if (dev->irq_enabled) {
#line 484
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount + 1;
#line 484
    if (dev_priv->user_irq_refcount == 1) {
#line 485
      i915_enable_irq(dev_priv, 1 << 1);
    } else {

    }
  } else {

  }
#line 486
  _spin_unlock(& dev_priv->user_irq_lock);
#line 487
  return;
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_user_irq_put(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  long tmp ;

  {
#line 491
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 493
  _spin_lock(& dev_priv->user_irq_lock);
#line 494
  while (1) {
#line 494
    tmp = __builtin_expect(! (! (dev->irq_enabled && dev_priv->user_irq_refcount <= 0)),
                           0);
#line 494
    if (tmp) {
#line 494
      while (1) {
#line 494
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"),
                             "i" (494), "i" (sizeof(struct bug_entry )));
#line 494
        while (1) {

        }
#line 494
        break;
      }
    } else {

    }
#line 494
    break;
  }
#line 495
  if (dev->irq_enabled) {
#line 495
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount - 1;
#line 495
    if (dev_priv->user_irq_refcount == 0) {
#line 496
      i915_disable_irq(dev_priv, 1 << 1);
    } else {

    }
  } else {

  }
#line 497
  _spin_unlock(& dev_priv->user_irq_lock);
#line 498
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static int i915_wait_irq(struct drm_device *dev , int irq_nr ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 502
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 503
  ret = 0;
#line 505
  while (1) {
#line 505
    if (drm_debug) {
#line 505
      printk("<7>[drm:%s] irq_nr=%d breadcrumb=%d\n", "i915_wait_irq", irq_nr, *((u32 volatile   *)dev_priv->hw_status_page + 5));
    } else {

    }
#line 505
    break;
  }
#line 508
  if (*((u32 volatile   *)dev_priv->hw_status_page + 5) >= (u32 volatile   )irq_nr) {
#line 509
    if (dev_priv->sarea_priv) {
#line 510
      (dev_priv->sarea_priv)->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 5);
    } else {

    }
#line 513
    return (0);
  } else {

  }
#line 516
  if (dev_priv->sarea_priv) {
#line 517
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 519
  i915_user_irq_get(dev);
#line 520
  while (1) {
#line 520
    tmp = get_current();
#line 520
    entry.flags = 0U;
#line 520
    entry.private = tmp;
#line 520
    entry.func = & default_wake_function;
#line 520
    entry.task_list.next = (void *)0;
#line 520
    entry.task_list.prev = (void *)0;
#line 520
    end = jiffies + (unsigned long volatile   )(3 * 250);
#line 520
    add_wait_queue(& dev_priv->irq_queue, & entry);
#line 520
    while (1) {
#line 520
      while (1) {
#line 520
        tmp___0 = get_current();
#line 520
        tmp___0->state = 1;
#line 520
        break;
      }
#line 520
      if (*((u32 volatile   *)dev_priv->hw_status_page + 5) >= (u32 volatile   )irq_nr) {
#line 520
        break;
      } else {

      }
#line 520
      if ((long )jiffies - (long )end >= 0L) {
#line 520
        ret = -16;
#line 520
        break;
      } else {

      }
#line 520
      schedule_timeout(250 / 100 > 1 ? 250 / 100 : 1);
#line 520
      tmp___1 = get_current();
#line 520
      tmp___2 = signal_pending(tmp___1);
#line 520
      if (tmp___2) {
#line 520
        ret = -4;
#line 520
        break;
      } else {

      }
    }
#line 520
    while (1) {
#line 520
      tmp___3 = get_current();
#line 520
      tmp___3->state = 0;
#line 520
      break;
    }
#line 520
    remove_wait_queue(& dev_priv->irq_queue, & entry);
#line 520
    break;
  }
#line 522
  i915_user_irq_put(dev);
#line 524
  if (ret == -16) {
#line 525
    printk("<3>[drm:%s] *ERROR* EBUSY -- rec: %d emitted: %d\n", "i915_wait_irq",
           *((u32 volatile   *)dev_priv->hw_status_page + 5), (int )dev_priv->counter);
  } else {

  }
#line 529
  if (dev_priv->sarea_priv) {
#line 530
    (dev_priv->sarea_priv)->last_dispatch = *((u32 volatile   *)dev_priv->hw_status_page + 5);
  } else {

  }
#line 533
  return (ret);
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_emit_t *emit ;
  int result ;
  unsigned long tmp ;

  {
#line 541
  dev_priv = dev->dev_private;
#line 542
  emit = data;
#line 545
  while (1) {
#line 545
    if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((void *)0)) {
#line 545
      while (1) {
#line 545
        if (! ((dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U) || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 545
          printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
                 "i915_irq_emit", "i915_irq_emit", (dev->lock.hw_lock)->lock & (unsigned int volatile   )2147483648U,
                 dev->lock.file_priv, file_priv);
#line 545
          return (-22);
        } else {

        }
#line 545
        break;
      }
    } else {

    }
#line 545
    break;
  }
#line 547
  if (! dev_priv) {
#line 548
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_emit");
#line 549
    return (-22);
  } else {

  }
#line 551
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 552
  result = i915_emit_irq(dev);
#line 553
  mutex_unlock(& dev->struct_mutex);
#line 555
  tmp = copy_to_user(emit->irq_seq, & result, sizeof(int ));
#line 555
  if (tmp) {
#line 556
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_irq_emit");
#line 557
    return (-14);
  } else {

  }
#line 560
  return (0);
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_wait_t *irqwait ;
  int tmp ;

  {
#line 568
  dev_priv = dev->dev_private;
#line 569
  irqwait = data;
#line 571
  if (! dev_priv) {
#line 572
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_wait");
#line 573
    return (-22);
  } else {

  }
#line 576
  tmp = i915_wait_irq(dev, irqwait->irq_seq);
#line 576
  return (tmp);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_enable_vblank(struct drm_device *dev , int plane ) 
{ 
  drm_i915_private_t *dev_priv ;
  int pipe ;
  int tmp ;
  u32 pipestat_reg ;
  u32 pipestat ;

  {
#line 581
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 582
  tmp = i915_get_pipe(dev, plane);
#line 582
  pipe = tmp;
#line 583
  pipestat_reg = 0;
#line 586
  switch (pipe) {
  case 0: 
#line 588
  pipestat_reg = 458788;
#line 589
  i915_enable_irq(dev_priv, 1 << 6);
#line 590
  break;
  case 1: 
#line 592
  pipestat_reg = 462884;
#line 593
  i915_enable_irq(dev_priv, 1 << 4);
#line 594
  break;
  default: 
#line 596
  printk("<3>[drm:%s] *ERROR* tried to enable vblank on non-existent pipe %d\n", "i915_enable_vblank",
         pipe);
#line 598
  break;
  }
#line 601
  if (pipestat_reg) {
#line 602
    pipestat = readl((dev_priv->mmio_map)->handle + pipestat_reg);
#line 603
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 604
      pipestat = (unsigned long )pipestat | (1UL << 18);
    } else {
#line 606
      pipestat = (unsigned long )pipestat | (1UL << 17);
    }
#line 608
    pipestat = (unsigned long )pipestat | ((1UL << 2) | (1UL << 1));
#line 610
    writel(pipestat, (dev_priv->mmio_map)->handle + pipestat_reg);
  } else {

  }
#line 613
  return (0);
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_disable_vblank(struct drm_device *dev , int plane ) 
{ 
  drm_i915_private_t *dev_priv ;
  int pipe ;
  int tmp ;
  u32 pipestat_reg ;
  u32 pipestat ;

  {
#line 618
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 619
  tmp = i915_get_pipe(dev, plane);
#line 619
  pipe = tmp;
#line 620
  pipestat_reg = 0;
#line 623
  switch (pipe) {
  case 0: 
#line 625
  pipestat_reg = 458788;
#line 626
  i915_disable_irq(dev_priv, 1 << 6);
#line 627
  break;
  case 1: 
#line 629
  pipestat_reg = 462884;
#line 630
  i915_disable_irq(dev_priv, 1 << 4);
#line 631
  break;
  default: 
#line 633
  printk("<3>[drm:%s] *ERROR* tried to disable vblank on non-existent pipe %d\n",
         "i915_disable_vblank", pipe);
#line 635
  break;
  }
#line 638
  if (pipestat_reg) {
#line 639
    pipestat = readl((dev_priv->mmio_map)->handle + pipestat_reg);
#line 640
    pipestat = (unsigned long )pipestat & ~ ((1UL << 18) | (1UL << 17));
#line 643
    pipestat = (unsigned long )pipestat | ((1UL << 2) | (1UL << 1));
#line 645
    writel(pipestat, (dev_priv->mmio_map)->handle + pipestat_reg);
  } else {

  }
#line 647
  return;
}
}
#line 651 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 654
  dev_priv = dev->dev_private;
#line 656
  if (! dev_priv) {
#line 657
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_set");
#line 658
    return (-22);
  } else {

  }
#line 661
  return (0);
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;

  {
#line 667
  dev_priv = dev->dev_private;
#line 668
  pipe = data;
#line 670
  if (! dev_priv) {
#line 671
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_get");
#line 672
    return (-22);
  } else {

  }
#line 675
  pipe->pipe = 1 | 2;
#line 677
  return (0);
}
}
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_swap_t *swap ;
  drm_i915_vbl_swap_t *vbl_swap ;
  unsigned int pipe ;
  unsigned int seqtype ;
  unsigned int curseq ;
  unsigned int plane ;
  unsigned long irqflags ;
  struct list_head *list ;
  int ret ;
  int tmp ;
  struct drm_drawable_info *tmp___0 ;
  struct list_head  const  *__mptr ;
  void *tmp___1 ;

  {
#line 686
  dev_priv = dev->dev_private;
#line 687
  swap = data;
#line 694
  if (! dev_priv || ! dev_priv->sarea_priv) {
#line 695
    printk("<3>[drm:%s] *ERROR* %s called with no initialization\n", "i915_vblank_swap",
           "i915_vblank_swap");
#line 696
    return (-22);
  } else {

  }
#line 699
  if ((dev_priv->sarea_priv)->rotation) {
#line 700
    while (1) {
#line 700
      if (drm_debug) {
#line 700
        printk("<7>[drm:%s] Rotation not supported\n", "i915_vblank_swap");
      } else {

      }
#line 700
      break;
    }
#line 701
    return (-22);
  } else {

  }
#line 704
  if ((unsigned int )swap->seqtype & (unsigned int )(~ (((_DRM_VBLANK_RELATIVE | _DRM_VBLANK_ABSOLUTE) | _DRM_VBLANK_SECONDARY) | _DRM_VBLANK_NEXTONMISS))) {
#line 706
    printk("<3>[drm:%s] *ERROR* Invalid sequence type 0x%x\n", "i915_vblank_swap",
           swap->seqtype);
#line 707
    return (-22);
  } else {

  }
#line 710
  plane = (unsigned int )swap->seqtype & (unsigned int )_DRM_VBLANK_SECONDARY ? 1 : 0;
#line 711
  tmp = i915_get_pipe(dev, plane);
#line 711
  pipe = tmp;
#line 713
  seqtype = (unsigned int )swap->seqtype & (unsigned int )(_DRM_VBLANK_RELATIVE | _DRM_VBLANK_ABSOLUTE);
#line 715
  if (! (dev_priv->vblank_pipe & (1 << pipe))) {
#line 716
    printk("<3>[drm:%s] *ERROR* Invalid pipe %d\n", "i915_vblank_swap", pipe);
#line 717
    return (-22);
  } else {

  }
#line 720
  while (1) {
#line 720
    irqflags = _spin_lock_irqsave(& dev->drw_lock);
#line 720
    break;
  }
#line 722
  tmp___0 = drm_get_drawable_info(dev, swap->drawable);
#line 722
  if (tmp___0) {

  } else {
#line 723
    while (1) {
#line 723
      _spin_unlock_irqrestore(& dev->drw_lock, irqflags);
#line 723
      break;
    }
#line 724
    while (1) {
#line 724
      if (drm_debug) {
#line 724
        printk("<7>[drm:%s] Invalid drawable ID %d\n", "i915_vblank_swap", swap->drawable);
      } else {

      }
#line 724
      break;
    }
#line 725
    return (-22);
  }
#line 728
  while (1) {
#line 728
    _spin_unlock_irqrestore(& dev->drw_lock, irqflags);
#line 728
    break;
  }
#line 734
  ret = drm_vblank_get(dev, pipe);
#line 735
  if (ret) {
#line 736
    return (ret);
  } else {

  }
#line 737
  curseq = drm_vblank_count(dev, pipe);
#line 739
  if (seqtype == (unsigned int )_DRM_VBLANK_RELATIVE) {
#line 740
    swap->sequence = swap->sequence + curseq;
  } else {

  }
#line 742
  if (curseq - swap->sequence <= (unsigned int )(1 << 23)) {
#line 743
    if ((unsigned int )swap->seqtype & (unsigned int )_DRM_VBLANK_NEXTONMISS) {
#line 744
      swap->sequence = curseq + 1U;
    } else {
#line 746
      while (1) {
#line 746
        if (drm_debug) {
#line 746
          printk("<7>[drm:%s] Missed target sequence\n", "i915_vblank_swap");
        } else {

        }
#line 746
        break;
      }
#line 747
      drm_vblank_put(dev, pipe);
#line 748
      return (-22);
    }
  } else {

  }
#line 752
  while (1) {
#line 752
    irqflags = _spin_lock_irqsave(& dev_priv->swaps_lock);
#line 752
    break;
  }
#line 754
  list = dev_priv->vbl_swaps.head.next;
#line 754
  while (1) {
#line 754
    __builtin_prefetch(list->next);
#line 754
    if ((unsigned long )list != (unsigned long )(& dev_priv->vbl_swaps.head)) {

    } else {
#line 754
      break;
    }
#line 755
    __mptr = list;
#line 755
    vbl_swap = (drm_i915_vbl_swap_t *)((char *)__mptr - (unsigned int )(& ((drm_i915_vbl_swap_t *)0)->head));
#line 757
    if ((vbl_swap->drw_id == swap->drawable && vbl_swap->plane == plane) && vbl_swap->sequence == swap->sequence) {
#line 760
      while (1) {
#line 760
        _spin_unlock_irqrestore(& dev_priv->swaps_lock, irqflags);
#line 760
        break;
      }
#line 761
      while (1) {
#line 761
        if (drm_debug) {
#line 761
          printk("<7>[drm:%s] Already scheduled\n", "i915_vblank_swap");
        } else {

        }
#line 761
        break;
      }
#line 762
      return (0);
    } else {

    }
#line 754
    list = list->next;
  }
#line 766
  while (1) {
#line 766
    _spin_unlock_irqrestore(& dev_priv->swaps_lock, irqflags);
#line 766
    break;
  }
#line 768
  if (dev_priv->swaps_pending >= 100U) {
#line 769
    while (1) {
#line 769
      if (drm_debug) {
#line 769
        printk("<7>[drm:%s] Too many swaps queued\n", "i915_vblank_swap");
      } else {

      }
#line 769
      break;
    }
#line 770
    drm_vblank_put(dev, pipe);
#line 771
    return (-16);
  } else {

  }
#line 774
  tmp___1 = drm_calloc(1, sizeof(*vbl_swap), 2);
#line 774
  vbl_swap = tmp___1;
#line 776
  if (! vbl_swap) {
#line 777
    printk("<3>[drm:%s] *ERROR* Failed to allocate memory to queue swap\n", "i915_vblank_swap");
#line 778
    drm_vblank_put(dev, pipe);
#line 779
    return (-12);
  } else {

  }
#line 782
  while (1) {
#line 782
    if (drm_debug) {
#line 782
      printk("<7>[drm:%s] \n", "i915_vblank_swap");
    } else {

    }
#line 782
    break;
  }
#line 784
  vbl_swap->drw_id = swap->drawable;
#line 785
  vbl_swap->plane = plane;
#line 786
  vbl_swap->sequence = swap->sequence;
#line 788
  while (1) {
#line 788
    irqflags = _spin_lock_irqsave(& dev_priv->swaps_lock);
#line 788
    break;
  }
#line 790
  list_add_tail(& vbl_swap->head, & dev_priv->vbl_swaps.head);
#line 791
  dev_priv->swaps_pending = dev_priv->swaps_pending + 1U;
#line 793
  while (1) {
#line 793
    _spin_unlock_irqrestore(& dev_priv->swaps_lock, irqflags);
#line 793
    break;
  }
#line 795
  return (0);
}
}
#line 800 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_driver_irq_preinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 802
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 804
  writel(61438, (dev_priv->mmio_map)->handle + 8344);
#line 805
  writel(4294967295U, (dev_priv->mmio_map)->handle + 8360);
#line 806
  writel(0, (dev_priv->mmio_map)->handle + 8352);
#line 807
  return;
}
}
#line 814 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
static struct lock_class_key __key___2  ;
#line 809 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
int i915_driver_irq_postinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int num_pipes ;

  {
#line 811
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 812
  num_pipes = 2;
#line 814
  while (1) {
#line 814
    __spin_lock_init(& dev_priv->swaps_lock, "&dev_priv->swaps_lock", & __key___2);
#line 814
    break;
  }
#line 815
  INIT_LIST_HEAD(& dev_priv->vbl_swaps.head);
#line 816
  dev_priv->swaps_pending = 0;
#line 819
  dev_priv->irq_mask_reg = ~ 0;
#line 821
  ret = drm_vblank_init(dev, num_pipes);
#line 822
  if (ret) {
#line 823
    return (ret);
  } else {

  }
#line 825
  dev_priv->vblank_pipe = 1 | 2;
#line 826
  dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & (unsigned int )(~ (1 << 7));
#line 827
  dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & (unsigned int )(~ (1 << 5));
#line 829
  dev->max_vblank_count = 16777215;
#line 831
  dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & (unsigned int )((((1 << 1) | (1 << 0)) | (1 << 6)) | (1 << 4));
#line 833
  writel(dev_priv->irq_mask_reg, (dev_priv->mmio_map)->handle + 8360);
#line 834
  writel((((1 << 1) | (1 << 0)) | (1 << 6)) | (1 << 4), (dev_priv->mmio_map)->handle + 8352);
#line 835
  readl((dev_priv->mmio_map)->handle + 8352);
#line 837
  opregion_enable_asle(dev);
#line 838
  init_waitqueue_head(& dev_priv->irq_queue);
#line 840
  return (0);
}
}
#line 843 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_irq.c"
void i915_driver_irq_uninstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 temp ;

  {
#line 845
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 848
  if (! dev_priv) {
#line 849
    return;
  } else {

  }
#line 851
  dev_priv->vblank_pipe = 0;
#line 853
  writel(4294967295U, (dev_priv->mmio_map)->handle + 8344);
#line 854
  writel(4294967295U, (dev_priv->mmio_map)->handle + 8360);
#line 855
  writel(0, (dev_priv->mmio_map)->handle + 8352);
#line 857
  temp = readl((dev_priv->mmio_map)->handle + 458788);
#line 858
  writel(temp, (dev_priv->mmio_map)->handle + 458788);
#line 859
  temp = readl((dev_priv->mmio_map)->handle + 462884);
#line 860
  writel(temp, (dev_priv->mmio_map)->handle + 462884);
#line 861
  temp = readl((dev_priv->mmio_map)->handle + 8356);
#line 862
  writel(temp, (dev_priv->mmio_map)->handle + 8356);
#line 863
  return;
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static void mark_block(struct drm_device *dev , struct mem_block *p , int in_use ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_sarea_t *sarea_priv ;
  struct drm_tex_region *list ;
  unsigned int shift ;
  unsigned int nr ;
  unsigned int start ;
  unsigned int end ;
  unsigned int i ;
  int age ;

  {
#line 48
  dev_priv = dev->dev_private;
#line 49
  sarea_priv = dev_priv->sarea_priv;
#line 57
  shift = dev_priv->tex_lru_log_granularity;
#line 58
  nr = 255;
#line 60
  start = p->start >> shift;
#line 61
  end = ((p->start + p->size) - 1) >> shift;
#line 63
  sarea_priv->texAge = sarea_priv->texAge + 1;
#line 63
  age = sarea_priv->texAge;
#line 64
  list = sarea_priv->texList;
#line 69
  i = start;
#line 69
  while (1) {
#line 69
    if (i <= end) {

    } else {
#line 69
      break;
    }
#line 70
    (list + i)->in_use = in_use;
#line 71
    (list + i)->age = age;
#line 75
    (list + (unsigned int )(list + i)->next)->prev = (list + i)->prev;
#line 76
    (list + (unsigned int )(list + i)->prev)->next = (list + i)->next;
#line 80
    (list + i)->prev = nr;
#line 81
    (list + i)->next = (list + nr)->next;
#line 82
    (list + (unsigned int )(list + nr)->next)->prev = i;
#line 83
    (list + nr)->next = i;
#line 69
    i = i + 1U;
  }
#line 85
  return;
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *split_block(struct mem_block *p , int start , int size ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *newblock ;
  void *tmp ;
  struct mem_block *newblock___0 ;
  void *tmp___0 ;

  {
#line 95
  if (start > p->start) {
#line 96
    tmp = drm_alloc(sizeof(*newblock), 14);
#line 96
    newblock = tmp;
#line 98
    if (! newblock) {
#line 99
      goto out;
    } else {

    }
#line 100
    newblock->start = start;
#line 101
    newblock->size = p->size - (start - p->start);
#line 102
    newblock->file_priv = (void *)0;
#line 103
    newblock->next = p->next;
#line 104
    newblock->prev = p;
#line 105
    (p->next)->prev = newblock;
#line 106
    p->next = newblock;
#line 107
    p->size = p->size - newblock->size;
#line 108
    p = newblock;
  } else {

  }
#line 112
  if (size < p->size) {
#line 113
    tmp___0 = drm_alloc(sizeof(*newblock___0), 14);
#line 113
    newblock___0 = tmp___0;
#line 115
    if (! newblock___0) {
#line 116
      goto out;
    } else {

    }
#line 117
    newblock___0->start = start + size;
#line 118
    newblock___0->size = p->size - size;
#line 119
    newblock___0->file_priv = (void *)0;
#line 120
    newblock___0->next = p->next;
#line 121
    newblock___0->prev = p;
#line 122
    (p->next)->prev = newblock___0;
#line 123
    p->next = newblock___0;
#line 124
    p->size = size;
  } else {

  }
  out: 
#line 129
  p->file_priv = file_priv;
#line 130
  return (p);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *alloc_block(struct mem_block *heap , int size , int align2 ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *p ;
  int mask ;
  int start ;
  struct mem_block *tmp ;

  {
#line 137
  mask = (1 << align2) - 1;
#line 139
  p = heap->next;
#line 139
  while (1) {
#line 139
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 139
      break;
    }
#line 140
    start = (p->start + mask) & ~ mask;
#line 141
    if ((unsigned long )p->file_priv == (unsigned long )((void *)0) && start + size <= p->start + p->size) {
#line 142
      tmp = split_block(p, start, size, file_priv);
#line 142
      return (tmp);
    } else {

    }
#line 139
    p = p->next;
  }
#line 145
  return ((void *)0);
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block *find_block(struct mem_block *heap , int start ) 
{ 
  struct mem_block *p ;

  {
#line 152
  p = heap->next;
#line 152
  while (1) {
#line 152
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 152
      break;
    }
#line 153
    if (p->start == start) {
#line 154
      return (p);
    } else {

    }
#line 152
    p = p->next;
  }
#line 156
  return ((void *)0);
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static void free_block(struct mem_block *p ) 
{ 
  struct mem_block *q ;
  struct mem_block *q___0 ;

  {
#line 161
  p->file_priv = (void *)0;
#line 166
  if ((unsigned long )(p->next)->file_priv == (unsigned long )((void *)0)) {
#line 167
    q = p->next;
#line 168
    p->size = p->size + q->size;
#line 169
    p->next = q->next;
#line 170
    (p->next)->prev = p;
#line 171
    drm_free(q, sizeof(*q), 14);
  } else {

  }
#line 174
  if ((unsigned long )(p->prev)->file_priv == (unsigned long )((void *)0)) {
#line 175
    q___0 = p->prev;
#line 176
    q___0->size = q___0->size + p->size;
#line 177
    q___0->next = p->next;
#line 178
    (q___0->next)->prev = q___0;
#line 179
    drm_free(p, sizeof(*q___0), 14);
  } else {

  }
#line 181
  return;
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static int init_heap(struct mem_block **heap , int start , int size ) 
{ 
  struct mem_block *blocks ;
  void *tmp ;
  void *tmp___0 ;
  struct mem_block *tmp___1 ;
  struct mem_block *tmp___2 ;

  {
#line 187
  tmp = drm_alloc(sizeof(*blocks), 14);
#line 187
  blocks = tmp;
#line 189
  if (! blocks) {
#line 190
    return (-12);
  } else {

  }
#line 192
  tmp___0 = drm_alloc(sizeof(*(*heap)), 14);
#line 192
  *heap = tmp___0;
#line 193
  if (! *heap) {
#line 194
    drm_free(blocks, sizeof(*blocks), 14);
#line 195
    return (-12);
  } else {

  }
#line 198
  blocks->start = start;
#line 199
  blocks->size = size;
#line 200
  blocks->file_priv = (void *)0;
#line 201
  tmp___1 = *heap;
#line 201
  blocks->prev = tmp___1;
#line 201
  blocks->next = tmp___1;
#line 203
  memset(*heap, 0, sizeof(*(*heap)));
#line 204
  (*heap)->file_priv = (struct drm_file *)-1;
#line 205
  tmp___2 = blocks;
#line 205
  (*heap)->prev = tmp___2;
#line 205
  (*heap)->next = tmp___2;
#line 206
  return (0);
}
}
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 216
  if (! heap || ! heap->next) {
#line 217
    return;
  } else {

  }
#line 219
  p = heap->next;
#line 219
  while (1) {
#line 219
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 219
      break;
    }
#line 220
    if ((unsigned long )p->file_priv == (unsigned long )file_priv) {
#line 221
      p->file_priv = (void *)0;
#line 222
      mark_block(dev, p, 0);
    } else {

    }
#line 219
    p = p->next;
  }
#line 229
  p = heap->next;
#line 229
  while (1) {
#line 229
    if ((unsigned long )p != (unsigned long )heap) {

    } else {
#line 229
      break;
    }
#line 230
    while (1) {
#line 230
      if ((unsigned long )p->file_priv == (unsigned long )((void *)0) && (unsigned long )(p->next)->file_priv == (unsigned long )((void *)0)) {

      } else {
#line 230
        break;
      }
#line 231
      q = p->next;
#line 232
      p->size = p->size + q->size;
#line 233
      p->next = q->next;
#line 234
      (p->next)->prev = p;
#line 235
      drm_free(q, sizeof(*q), 14);
    }
#line 229
    p = p->next;
  }
#line 238
  return;
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
void i915_mem_takedown(struct mem_block **heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 246
  if (! *heap) {
#line 247
    return;
  } else {

  }
#line 249
  p = (*heap)->next;
#line 249
  while (1) {
#line 249
    if ((unsigned long )p != (unsigned long )*heap) {

    } else {
#line 249
      break;
    }
#line 250
    q = p;
#line 251
    p = p->next;
#line 252
    drm_free(q, sizeof(*q), 14);
  }
#line 255
  drm_free(*heap, sizeof(*(*heap)), 14);
#line 256
  *heap = (void *)0;
#line 257
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
static struct mem_block **get_heap(drm_i915_private_t *dev_priv , int region ) 
{ 


  {
#line 261
  switch (region) {
  case 1: 
#line 263
  return (& dev_priv->agp_heap);
  default: 
#line 265
  return ((void *)0);
  }
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_alloc_t *alloc ;
  struct mem_block *block ;
  struct mem_block **heap ;
  unsigned long tmp ;

  {
#line 274
  dev_priv = dev->dev_private;
#line 275
  alloc = data;
#line 278
  if (! dev_priv) {
#line 279
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_alloc");
#line 280
    return (-22);
  } else {

  }
#line 283
  heap = get_heap(dev_priv, alloc->region);
#line 284
  if (! heap || ! *heap) {
#line 285
    return (-14);
  } else {

  }
#line 290
  if (alloc->alignment < 12) {
#line 291
    alloc->alignment = 12;
  } else {

  }
#line 293
  block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
#line 295
  if (! block) {
#line 296
    return (-12);
  } else {

  }
#line 298
  mark_block(dev, block, 1);
#line 300
  tmp = copy_to_user(alloc->region_offset, & block->start, sizeof(int ));
#line 300
  if (tmp) {
#line 302
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_mem_alloc");
#line 303
    return (-14);
  } else {

  }
#line 306
  return (0);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_free_t *memfree ;
  struct mem_block *block ;
  struct mem_block **heap ;

  {
#line 312
  dev_priv = dev->dev_private;
#line 313
  memfree = data;
#line 316
  if (! dev_priv) {
#line 317
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_free");
#line 318
    return (-22);
  } else {

  }
#line 321
  heap = get_heap(dev_priv, memfree->region);
#line 322
  if (! heap || ! *heap) {
#line 323
    return (-14);
  } else {

  }
#line 325
  block = find_block(*heap, memfree->region_offset);
#line 326
  if (! block) {
#line 327
    return (-14);
  } else {

  }
#line 329
  if ((unsigned long )block->file_priv != (unsigned long )file_priv) {
#line 330
    return (-1);
  } else {

  }
#line 332
  mark_block(dev, block, 0);
#line 333
  free_block(block);
#line 334
  return (0);
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_init_heap_t *initheap ;
  struct mem_block **heap ;
  int tmp ;

  {
#line 340
  dev_priv = dev->dev_private;
#line 341
  initheap = data;
#line 344
  if (! dev_priv) {
#line 345
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_init_heap");
#line 346
    return (-22);
  } else {

  }
#line 349
  heap = get_heap(dev_priv, initheap->region);
#line 350
  if (! heap) {
#line 351
    return (-14);
  } else {

  }
#line 353
  if (*heap) {
#line 354
    printk("<3>[drm:%s] *ERROR* heap already initialized?", "i915_mem_init_heap");
#line 355
    return (-14);
  } else {

  }
#line 358
  tmp = init_heap(heap, initheap->start, initheap->size);
#line 358
  return (tmp);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_mem.c"
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_destroy_heap_t *destroyheap ;
  struct mem_block **heap ;

  {
#line 364
  dev_priv = dev->dev_private;
#line 365
  destroyheap = data;
#line 368
  if (! dev_priv) {
#line 369
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_destroy_heap");
#line 370
    return (-22);
  } else {

  }
#line 373
  heap = get_heap(dev_priv, destroyheap->region);
#line 374
  if (! heap) {
#line 375
    printk("<3>[drm:%s] *ERROR* get_heap failed", "i915_mem_destroy_heap");
#line 376
    return (-14);
  } else {

  }
#line 379
  if (! *heap) {
#line 380
    printk("<3>[drm:%s] *ERROR* heap not initialized?", "i915_mem_destroy_heap");
#line 381
    return (-14);
  } else {

  }
#line 384
  i915_mem_takedown(heap);
#line 385
  return (0);
}
}
#line 52 "include/asm/string_64.h"
extern int memcmp(void const   *cs , void const   *ct , unsigned long count ) ;
#line 328 "include/acpi/acpi_bus.h"
extern int register_acpi_notifier(struct notifier_block * ) ;
#line 329
extern int unregister_acpi_notifier(struct notifier_block * ) ;
#line 563 "include/linux/pci.h"
extern int pci_bus_read_config_dword(struct pci_bus *bus , unsigned int devfn , int where ,
                                     u32 *val ) ;
#line 569
extern int pci_bus_write_config_dword(struct pci_bus *bus , unsigned int devfn , int where ,
                                      u32 val ) ;
#line 580 "include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev *dev , int where , u32 *val ) 
{ 
  int tmp ;

  {
#line 583
  tmp = pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
#line 583
  return (tmp);
}
}
#line 593 "include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev *dev , int where , u32 val ) 
{ 
  int tmp ;

  {
#line 596
  tmp = pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
#line 596
  return (tmp);
}
}
#line 173 "include/asm/io_64.h"
extern void *ioremap_nocache(resource_size_t offset , unsigned long size ) ;
#line 181 "include/asm/io_64.h"
__inline static void *ioremap(resource_size_t offset , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 183
  tmp = ioremap_nocache(offset, size);
#line 183
  return (tmp);
}
}
#line 186
extern void iounmap(void volatile   *addr ) ;
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_backlight(struct drm_device *dev , u32 bclp ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 blc_pwm_ctl ;
  u32 blc_pwm_ctl2 ;

  {
#line 142
  dev_priv = dev->dev_private;
#line 143
  asle = dev_priv->opregion.asle;
#line 146
  if (! (bclp & (unsigned int )(1 << 31))) {
#line 147
    return (2 << 12);
  } else {

  }
#line 149
  bclp = bclp & (unsigned int )(~ (1 << 31));
#line 150
  if (bclp < (u32 )0 || bclp > (u32 )255) {
#line 151
    return (2 << 12);
  } else {

  }
#line 153
  blc_pwm_ctl = readl((dev_priv->mmio_map)->handle + 397908);
#line 154
  blc_pwm_ctl = blc_pwm_ctl & (unsigned int )(~ 65535);
#line 155
  blc_pwm_ctl2 = readl((dev_priv->mmio_map)->handle + 397904);
#line 157
  if (blc_pwm_ctl2 & (unsigned int )(1 << 30)) {
#line 158
    pci_write_config_dword(dev->pdev, 244, bclp);
  } else {
#line 160
    writel(blc_pwm_ctl | (bclp * (u32 )257 - (u32 )1), (dev_priv->mmio_map)->handle + 397908);
  }
#line 162
  asle->cblv = (bclp * (u32 )100) / (u32 )255 | (unsigned int )(1 << 31);
#line 164
  return (0);
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_als_illum(struct drm_device *dev , u32 alsi ) 
{ 


  {
#line 171
  return (0);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_pwm_freq(struct drm_device *dev , u32 pfmb ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;
  u32 pwm ;

  {
#line 176
  dev_priv = dev->dev_private;
#line 177
  if (pfmb & (unsigned int )(1 << 31)) {
#line 178
    tmp = readl((dev_priv->mmio_map)->handle + 397908);
#line 178
    blc_pwm_ctl = tmp;
#line 179
    pwm = pfmb & 2147483136U;
#line 180
    blc_pwm_ctl = blc_pwm_ctl & 65535U;
#line 181
    pwm = pwm >> 9;
  } else {

  }
#line 184
  return (0);
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static u32 asle_set_pfit(struct drm_device *dev , u32 pfit ) 
{ 


  {
#line 191
  if (! (pfit & (unsigned int )(1 << 31))) {
#line 192
    return (2 << 14);
  } else {

  }
#line 193
  return (0);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
void opregion_asle_intr(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 asle_stat ;
  u32 asle_req ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
#line 198
  dev_priv = dev->dev_private;
#line 199
  asle = dev_priv->opregion.asle;
#line 200
  asle_stat = 0;
#line 203
  if (! asle) {
#line 204
    return;
  } else {

  }
#line 206
  asle_req = asle->aslc & 15U;
#line 208
  if (! asle_req) {
#line 209
    while (1) {
#line 209
      if (drm_debug) {
#line 209
        printk("<7>[drm:%s] non asle set request??\n", "opregion_asle_intr");
      } else {

      }
#line 209
      break;
    }
#line 210
    return;
  } else {

  }
#line 213
  if (asle_req & (unsigned int )(1 << 0)) {
#line 214
    tmp = asle_set_als_illum(dev, asle->alsi);
#line 214
    asle_stat = asle_stat | tmp;
  } else {

  }
#line 216
  if (asle_req & (unsigned int )(1 << 1)) {
#line 217
    tmp___0 = asle_set_backlight(dev, asle->bclp);
#line 217
    asle_stat = asle_stat | tmp___0;
  } else {

  }
#line 219
  if (asle_req & (unsigned int )(1 << 2)) {
#line 220
    tmp___1 = asle_set_pfit(dev, asle->pfit);
#line 220
    asle_stat = asle_stat | tmp___1;
  } else {

  }
#line 222
  if (asle_req & (unsigned int )(1 << 3)) {
#line 223
    tmp___2 = asle_set_pwm_freq(dev, asle->pfmb);
#line 223
    asle_stat = asle_stat | tmp___2;
  } else {

  }
#line 225
  asle->aslc = asle_stat;
#line 226
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
void opregion_enable_asle(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 pipeb_stats ;
  unsigned int tmp ;

  {
#line 235
  dev_priv = dev->dev_private;
#line 236
  asle = dev_priv->opregion.asle;
#line 238
  if (asle) {
#line 239
    tmp = readl((dev_priv->mmio_map)->handle + 462884);
#line 239
    pipeb_stats = tmp;
#line 240
    if (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 244
      pipeb_stats = (unsigned long )pipeb_stats | (1UL << 22);
#line 244
      writel(pipeb_stats, (dev_priv->mmio_map)->handle + 462884);
#line 246
      i915_enable_irq(dev_priv, (1 << 0) | (1 << 4));
    } else {
#line 249
      i915_enable_irq(dev_priv, 1 << 0);
    }
#line 251
    asle->tche = (((1 << 0) | (1 << 1)) | (1 << 2)) | (1 << 3);
#line 253
    asle->ardy = 1;
  } else {

  }
#line 255
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static struct intel_opregion *system_opregion  ;
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
int intel_opregion_video_event(struct notifier_block *nb , unsigned long val , void *data ) 
{ 
  struct opregion_acpi *acpi ;

  {
#line 275
  if (! system_opregion) {
#line 276
    return (0);
  } else {

  }
#line 278
  acpi = system_opregion->acpi;
#line 279
  acpi->csts = 0;
#line 281
  return (1);
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
static struct notifier_block intel_opregion_notifier  =    {& intel_opregion_video_event, 0, 0};
#line 288 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
int intel_opregion_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;
  void *base ;
  u32 asls ;
  u32 mboxes ;
  int err ;
  int tmp ;

  {
#line 290
  dev_priv = dev->dev_private;
#line 291
  opregion = & dev_priv->opregion;
#line 294
  err = 0;
#line 296
  pci_read_config_dword(dev->pdev, 252, & asls);
#line 297
  while (1) {
#line 297
    if (drm_debug) {
#line 297
      printk("<7>[drm:%s] graphic opregion physical addr: 0x%x\n", "intel_opregion_init",
             asls);
    } else {

    }
#line 297
    break;
  }
#line 298
  if (asls == (u32 )0) {
#line 299
    while (1) {
#line 299
      if (drm_debug) {
#line 299
        printk("<7>[drm:%s] ACPI OpRegion not supported!\n", "intel_opregion_init");
      } else {

      }
#line 299
      break;
    }
#line 300
    return (-524);
  } else {

  }
#line 303
  base = ioremap(asls, 8 * 1024);
#line 304
  if (! base) {
#line 305
    return (-12);
  } else {

  }
#line 307
  opregion->header = base;
#line 308
  tmp = memcmp((opregion->header)->signature, "IntelGraphicsMem", 16);
#line 308
  if (tmp) {
#line 309
    while (1) {
#line 309
      if (drm_debug) {
#line 309
        printk("<7>[drm:%s] opregion signature mismatch\n", "intel_opregion_init");
      } else {

      }
#line 309
      break;
    }
#line 310
    err = -22;
#line 311
    goto err_out;
  } else {

  }
#line 314
  mboxes = (opregion->header)->mboxes;
#line 315
  if (mboxes & (unsigned int )(1 << 0)) {
#line 316
    while (1) {
#line 316
      if (drm_debug) {
#line 316
        printk("<7>[drm:%s] Public ACPI methods supported\n", "intel_opregion_init");
      } else {

      }
#line 316
      break;
    }
#line 317
    opregion->acpi = base + 256;
  } else {
#line 319
    while (1) {
#line 319
      if (drm_debug) {
#line 319
        printk("<7>[drm:%s] Public ACPI methods not supported\n", "intel_opregion_init");
      } else {

      }
#line 319
      break;
    }
#line 320
    err = -524;
#line 321
    goto err_out;
  }
#line 323
  opregion->enabled = 1;
#line 325
  if (mboxes & (unsigned int )(1 << 1)) {
#line 326
    while (1) {
#line 326
      if (drm_debug) {
#line 326
        printk("<7>[drm:%s] SWSCI supported\n", "intel_opregion_init");
      } else {

      }
#line 326
      break;
    }
#line 327
    opregion->swsci = base + 512;
  } else {

  }
#line 329
  if (mboxes & (unsigned int )(1 << 2)) {
#line 330
    while (1) {
#line 330
      if (drm_debug) {
#line 330
        printk("<7>[drm:%s] ASLE supported\n", "intel_opregion_init");
      } else {

      }
#line 330
      break;
    }
#line 331
    opregion->asle = base + 768;
  } else {

  }
#line 337
  (opregion->acpi)->csts = 0;
#line 338
  (opregion->acpi)->drdy = 1;
#line 340
  system_opregion = opregion;
#line 341
  register_acpi_notifier(& intel_opregion_notifier);
#line 343
  return (0);
  err_out: 
#line 346
  iounmap(opregion->header);
#line 347
  opregion->header = (void *)0;
#line 348
  return (err);
}
}
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
void intel_opregion_free(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;

  {
#line 353
  dev_priv = dev->dev_private;
#line 354
  opregion = & dev_priv->opregion;
#line 356
  if (! opregion->enabled) {
#line 357
    return;
  } else {

  }
#line 359
  (opregion->acpi)->drdy = 0;
#line 361
  system_opregion = (void *)0;
#line 362
  unregister_acpi_notifier(& intel_opregion_notifier);
#line 365
  iounmap(opregion->header);
#line 366
  opregion->header = (void *)0;
#line 367
  opregion->acpi = (void *)0;
#line 368
  opregion->swsci = (void *)0;
#line 369
  opregion->asle = (void *)0;
#line 371
  opregion->enabled = 0;
#line 372
  return;
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_opregion.c"
void ldv_main4_sequence_infinite_withcheck_stateful(void) 
{ 
  struct notifier_block *var_group1 ;
  unsigned long var_intel_opregion_video_event_6_p1 ;
  void *var_intel_opregion_video_event_6_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 474
  LDV_IN_INTERRUPT = 1;
#line 483
  ldv_initialize();
#line 487
  while (1) {
#line 487
    tmp___0 = nondet_int();
#line 487
    if (tmp___0) {

    } else {
#line 487
      break;
    }
#line 490
    tmp = nondet_int();
#line 490
    switch (tmp) {
    case 0: 
#line 541
    ldv_handler_precall();
#line 542
    intel_opregion_video_event(var_group1, var_intel_opregion_video_event_6_p1, var_intel_opregion_video_event_6_p2);
#line 549
    break;
    default: 
#line 550
    break;
    }
  }
#line 559
  ldv_check_final_state();
#line 562
  return;
}
}
#line 11 "include/asm/delay.h"
extern void __bad_udelay(void) ;
#line 16
extern void __const_udelay(unsigned long xloops ) ;
#line 559 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus *bus , unsigned int devfn , int where ,
                                    u8 *val ) ;
#line 565
extern int pci_bus_write_config_byte(struct pci_bus *bus , unsigned int devfn , int where ,
                                     u8 val ) ;
#line 572 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 574
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 574
  return (tmp);
}
}
#line 585 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 587
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, val);
#line 587
  return (tmp);
}
}
#line 18 "include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 18
  __asm__  volatile   ("mov"
                       "b"
                       " %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 18
  return (ret);
}
}
#line 26 "include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 26
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 26
  return;
}
}
#line 32 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static bool i915_pipe_enabled___0(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 34
  dev_priv = dev->dev_private;
#line 36
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 37
    tmp = readl((dev_priv->mmio_map)->handle + 24596);
#line 37
    return (tmp & (unsigned int )(1 << 31));
  } else {
#line 39
    tmp___0 = readl((dev_priv->mmio_map)->handle + 24600);
#line 39
    return (tmp___0 & (unsigned int )(1 << 31));
  }
}
}
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_save_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;

  {
#line 44
  dev_priv = dev->dev_private;
#line 45
  reg = (unsigned int )pipe == (unsigned int )PIPE_A ? 40960 : 43008;
#line 49
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 49
  if (tmp) {

  } else {
#line 50
    return;
  }
#line 52
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 53
    array = dev_priv->save_palette_a;
  } else {
#line 55
    array = dev_priv->save_palette_b;
  }
#line 57
  i = 0;
#line 57
  while (1) {
#line 57
    if (i < 256) {

    } else {
#line 57
      break;
    }
#line 58
    *(array + i) = readl((dev_priv->mmio_map)->handle + (reg + (unsigned long )(i << 2)));
#line 57
    i = i + 1;
  }
#line 59
  return;
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_restore_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;

  {
#line 63
  dev_priv = dev->dev_private;
#line 64
  reg = (unsigned int )pipe == (unsigned int )PIPE_A ? 40960 : 43008;
#line 68
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 68
  if (tmp) {

  } else {
#line 69
    return;
  }
#line 71
  if ((unsigned int )pipe == (unsigned int )PIPE_A) {
#line 72
    array = dev_priv->save_palette_a;
  } else {
#line 74
    array = dev_priv->save_palette_b;
  }
#line 76
  i = 0;
#line 76
  while (1) {
#line 76
    if (i < 256) {

    } else {
#line 76
      break;
    }
#line 77
    writel(*(array + i), (dev_priv->mmio_map)->handle + (reg + (unsigned long )(i << 2)));
#line 76
    i = i + 1;
  }
#line 78
  return;
}
}
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static u8 i915_read_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                            u8 reg ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 82
  dev_priv = dev->dev_private;
#line 84
  writeb(reg, (dev_priv->mmio_map)->handle + (int )index_port);
#line 85
  tmp = readb((dev_priv->mmio_map)->handle + (int )data_port);
#line 85
  return (tmp);
}
}
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static u8 i915_read_ar(struct drm_device *dev , u16 st01 , u8 reg , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 90
  dev_priv = dev->dev_private;
#line 92
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 93
  writeb((int )palette_enable | (int )reg, (dev_priv->mmio_map)->handle + 960);
#line 94
  tmp = readb((dev_priv->mmio_map)->handle + 961);
#line 94
  return (tmp);
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_write_ar(struct drm_device *dev , u16 st01 , u8 reg , u8 val , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 99
  dev_priv = dev->dev_private;
#line 101
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 102
  writeb((int )palette_enable | (int )reg, (dev_priv->mmio_map)->handle + 960);
#line 103
  writeb(val, (dev_priv->mmio_map)->handle + 960);
#line 104
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_write_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                               u8 reg , u8 val ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 108
  dev_priv = dev->dev_private;
#line 110
  writeb(reg, (dev_priv->mmio_map)->handle + (int )index_port);
#line 111
  writeb(val, (dev_priv->mmio_map)->handle + (int )data_port);
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_save_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;
  u8 tmp ;

  {
#line 116
  dev_priv = dev->dev_private;
#line 121
  dev_priv->saveDACMASK = readb((dev_priv->mmio_map)->handle + 966);
#line 123
  writeb(0, (dev_priv->mmio_map)->handle + 967);
#line 125
  i = 0;
#line 125
  while (1) {
#line 125
    if (i < 256 * 3) {

    } else {
#line 125
      break;
    }
#line 126
    dev_priv->saveDACDATA[i] = readb((dev_priv->mmio_map)->handle + 969);
#line 125
    i = i + 1;
  }
#line 129
  dev_priv->saveMSR = readb((dev_priv->mmio_map)->handle + 972);
#line 130
  if ((int )dev_priv->saveMSR & (1 << 0)) {
#line 131
    cr_index = 980;
#line 132
    cr_data = 981;
#line 133
    st01 = 986;
  } else {
#line 135
    cr_index = 948;
#line 136
    cr_data = 949;
#line 137
    st01 = 954;
  }
#line 141
  tmp = i915_read_indexed(dev, cr_index, cr_data, 17);
#line 141
  i915_write_indexed(dev, cr_index, cr_data, 17, (int )tmp & ~ 128);
#line 144
  i = 0;
#line 144
  while (1) {
#line 144
    if (i <= 36) {

    } else {
#line 144
      break;
    }
#line 145
    dev_priv->saveCR[i] = i915_read_indexed(dev, cr_index, cr_data, i);
#line 144
    i = i + 1;
  }
#line 148
  dev_priv->saveCR[17] = (int )dev_priv->saveCR[17] & ~ 128;
#line 151
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 152
  dev_priv->saveAR_INDEX = readb((dev_priv->mmio_map)->handle + 960);
#line 153
  i = 0;
#line 153
  while (1) {
#line 153
    if (i <= 20) {

    } else {
#line 153
      break;
    }
#line 154
    dev_priv->saveAR[i] = i915_read_ar(dev, st01, i, 0);
#line 153
    i = i + 1;
  }
#line 155
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 156
  writeb(dev_priv->saveAR_INDEX, (dev_priv->mmio_map)->handle + 960);
#line 157
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 160
  i = 0;
#line 160
  while (1) {
#line 160
    if (i < 9) {

    } else {
#line 160
      break;
    }
#line 161
    dev_priv->saveGR[i] = i915_read_indexed(dev, 974, 975, i);
#line 160
    i = i + 1;
  }
#line 164
  dev_priv->saveGR[16] = i915_read_indexed(dev, 974, 975, 16);
#line 166
  dev_priv->saveGR[17] = i915_read_indexed(dev, 974, 975, 17);
#line 168
  dev_priv->saveGR[24] = i915_read_indexed(dev, 974, 975, 24);
#line 172
  i = 0;
#line 172
  while (1) {
#line 172
    if (i < 8) {

    } else {
#line 172
      break;
    }
#line 173
    dev_priv->saveSR[i] = i915_read_indexed(dev, 964, 965, i);
#line 172
    i = i + 1;
  }
#line 175
  return;
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
static void i915_restore_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;

  {
#line 179
  dev_priv = dev->dev_private;
#line 184
  writeb(dev_priv->saveMSR, (dev_priv->mmio_map)->handle + 962);
#line 185
  if ((int )dev_priv->saveMSR & (1 << 0)) {
#line 186
    cr_index = 980;
#line 187
    cr_data = 981;
#line 188
    st01 = 986;
  } else {
#line 190
    cr_index = 948;
#line 191
    cr_data = 949;
#line 192
    st01 = 954;
  }
#line 196
  i = 0;
#line 196
  while (1) {
#line 196
    if (i < 7) {

    } else {
#line 196
      break;
    }
#line 197
    i915_write_indexed(dev, 964, 965, i, dev_priv->saveSR[i]);
#line 196
    i = i + 1;
  }
#line 202
  i915_write_indexed(dev, cr_index, cr_data, 17, dev_priv->saveCR[17]);
#line 203
  i = 0;
#line 203
  while (1) {
#line 203
    if (i <= 36) {

    } else {
#line 203
      break;
    }
#line 204
    i915_write_indexed(dev, cr_index, cr_data, i, dev_priv->saveCR[i]);
#line 203
    i = i + 1;
  }
#line 207
  i = 0;
#line 207
  while (1) {
#line 207
    if (i < 9) {

    } else {
#line 207
      break;
    }
#line 208
    i915_write_indexed(dev, 974, 975, i, dev_priv->saveGR[i]);
#line 207
    i = i + 1;
  }
#line 211
  i915_write_indexed(dev, 974, 975, 16, dev_priv->saveGR[16]);
#line 213
  i915_write_indexed(dev, 974, 975, 17, dev_priv->saveGR[17]);
#line 215
  i915_write_indexed(dev, 974, 975, 24, dev_priv->saveGR[24]);
#line 219
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 220
  i = 0;
#line 220
  while (1) {
#line 220
    if (i <= 20) {

    } else {
#line 220
      break;
    }
#line 221
    i915_write_ar(dev, st01, i, dev_priv->saveAR[i], 0);
#line 220
    i = i + 1;
  }
#line 222
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 223
  writeb((int )dev_priv->saveAR_INDEX | 32, (dev_priv->mmio_map)->handle + 960);
#line 224
  readb((dev_priv->mmio_map)->handle + (int )st01);
#line 227
  writeb(dev_priv->saveDACMASK, (dev_priv->mmio_map)->handle + 966);
#line 229
  writeb(0, (dev_priv->mmio_map)->handle + 968);
#line 231
  i = 0;
#line 231
  while (1) {
#line 231
    if (i < 256 * 3) {

    } else {
#line 231
      break;
    }
#line 232
    writeb(dev_priv->saveDACDATA[i], (dev_priv->mmio_map)->handle + 969);
#line 231
    i = i + 1;
  }
#line 234
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
int i915_save_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;

  {
#line 238
  dev_priv = dev->dev_private;
#line 241
  pci_read_config_byte(dev->pdev, 244, & dev_priv->saveLBB);
#line 244
  dev_priv->saveDSPARB = readl((dev_priv->mmio_map)->handle + 458800);
#line 247
  dev_priv->savePIPEACONF = readl((dev_priv->mmio_map)->handle + 458760);
#line 248
  dev_priv->savePIPEASRC = readl((dev_priv->mmio_map)->handle + 393244);
#line 249
  dev_priv->saveFPA0 = readl((dev_priv->mmio_map)->handle + 24640);
#line 250
  dev_priv->saveFPA1 = readl((dev_priv->mmio_map)->handle + 24644);
#line 251
  dev_priv->saveDPLL_A = readl((dev_priv->mmio_map)->handle + 24596);
#line 252
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 253
    dev_priv->saveDPLL_A_MD = readl((dev_priv->mmio_map)->handle + 24604);
  } else {

  }
#line 254
  dev_priv->saveHTOTAL_A = readl((dev_priv->mmio_map)->handle + 393216);
#line 255
  dev_priv->saveHBLANK_A = readl((dev_priv->mmio_map)->handle + 393220);
#line 256
  dev_priv->saveHSYNC_A = readl((dev_priv->mmio_map)->handle + 393224);
#line 257
  dev_priv->saveVTOTAL_A = readl((dev_priv->mmio_map)->handle + 393228);
#line 258
  dev_priv->saveVBLANK_A = readl((dev_priv->mmio_map)->handle + 393232);
#line 259
  dev_priv->saveVSYNC_A = readl((dev_priv->mmio_map)->handle + 393236);
#line 260
  dev_priv->saveBCLRPAT_A = readl((dev_priv->mmio_map)->handle + 393248);
#line 262
  dev_priv->saveDSPACNTR = readl((dev_priv->mmio_map)->handle + 459136);
#line 263
  dev_priv->saveDSPASTRIDE = readl((dev_priv->mmio_map)->handle + 459144);
#line 264
  dev_priv->saveDSPASIZE = readl((dev_priv->mmio_map)->handle + 459152);
#line 265
  dev_priv->saveDSPAPOS = readl((dev_priv->mmio_map)->handle + 459148);
#line 266
  dev_priv->saveDSPAADDR = readl((dev_priv->mmio_map)->handle + 459140);
#line 267
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 268
    dev_priv->saveDSPASURF = readl((dev_priv->mmio_map)->handle + 459164);
#line 269
    dev_priv->saveDSPATILEOFF = readl((dev_priv->mmio_map)->handle + 459172);
  } else {

  }
#line 271
  i915_save_palette(dev, PIPE_A);
#line 272
  dev_priv->savePIPEASTAT = readl((dev_priv->mmio_map)->handle + 458788);
#line 275
  dev_priv->savePIPEBCONF = readl((dev_priv->mmio_map)->handle + 462856);
#line 276
  dev_priv->savePIPEBSRC = readl((dev_priv->mmio_map)->handle + 397340);
#line 277
  dev_priv->saveFPB0 = readl((dev_priv->mmio_map)->handle + 24648);
#line 278
  dev_priv->saveFPB1 = readl((dev_priv->mmio_map)->handle + 24652);
#line 279
  dev_priv->saveDPLL_B = readl((dev_priv->mmio_map)->handle + 24600);
#line 280
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 281
    dev_priv->saveDPLL_B_MD = readl((dev_priv->mmio_map)->handle + 24608);
  } else {

  }
#line 282
  dev_priv->saveHTOTAL_B = readl((dev_priv->mmio_map)->handle + 397312);
#line 283
  dev_priv->saveHBLANK_B = readl((dev_priv->mmio_map)->handle + 397316);
#line 284
  dev_priv->saveHSYNC_B = readl((dev_priv->mmio_map)->handle + 397320);
#line 285
  dev_priv->saveVTOTAL_B = readl((dev_priv->mmio_map)->handle + 397324);
#line 286
  dev_priv->saveVBLANK_B = readl((dev_priv->mmio_map)->handle + 397328);
#line 287
  dev_priv->saveVSYNC_B = readl((dev_priv->mmio_map)->handle + 397332);
#line 288
  dev_priv->saveBCLRPAT_A = readl((dev_priv->mmio_map)->handle + 393248);
#line 290
  dev_priv->saveDSPBCNTR = readl((dev_priv->mmio_map)->handle + 463232);
#line 291
  dev_priv->saveDSPBSTRIDE = readl((dev_priv->mmio_map)->handle + 463240);
#line 292
  dev_priv->saveDSPBSIZE = readl((dev_priv->mmio_map)->handle + 463248);
#line 293
  dev_priv->saveDSPBPOS = readl((dev_priv->mmio_map)->handle + 463244);
#line 294
  dev_priv->saveDSPBADDR = readl((dev_priv->mmio_map)->handle + 463236);
#line 295
  if (dev->pci_device == 10754 || dev->pci_device == 10818) {
#line 296
    dev_priv->saveDSPBSURF = readl((dev_priv->mmio_map)->handle + 463260);
#line 297
    dev_priv->saveDSPBTILEOFF = readl((dev_priv->mmio_map)->handle + 463268);
  } else {

  }
#line 299
  i915_save_palette(dev, PIPE_B);
#line 300
  dev_priv->savePIPEBSTAT = readl((dev_priv->mmio_map)->handle + 462884);
#line 303
  dev_priv->saveADPA = readl((dev_priv->mmio_map)->handle + 397568);
#line 306
  dev_priv->savePP_CONTROL = readl((dev_priv->mmio_map)->handle + 397828);
#line 307
  dev_priv->savePFIT_PGM_RATIOS = readl((dev_priv->mmio_map)->handle + 397876);
#line 308
  dev_priv->saveBLC_PWM_CTL = readl((dev_priv->mmio_map)->handle + 397908);
#line 309
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 310
    dev_priv->saveBLC_PWM_CTL2 = readl((dev_priv->mmio_map)->handle + 397904);
  } else {

  }
#line 311
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && ! (dev->pci_device == 13687)) {
#line 312
    dev_priv->saveLVDS = readl((dev_priv->mmio_map)->handle + 397696);
  } else {

  }
#line 313
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 314
    dev_priv->savePFIT_CONTROL = readl((dev_priv->mmio_map)->handle + 397872);
  } else {

  }
#line 315
  dev_priv->savePP_ON_DELAYS = readl((dev_priv->mmio_map)->handle + 397832);
#line 316
  dev_priv->savePP_OFF_DELAYS = readl((dev_priv->mmio_map)->handle + 397836);
#line 317
  dev_priv->savePP_DIVISOR = readl((dev_priv->mmio_map)->handle + 397840);
#line 322
  dev_priv->saveFBC_CFB_BASE = readl((dev_priv->mmio_map)->handle + 12800);
#line 323
  dev_priv->saveFBC_LL_BASE = readl((dev_priv->mmio_map)->handle + 12804);
#line 324
  dev_priv->saveFBC_CONTROL2 = readl((dev_priv->mmio_map)->handle + 12820);
#line 325
  dev_priv->saveFBC_CONTROL = readl((dev_priv->mmio_map)->handle + 12808);
#line 328
  dev_priv->saveIIR = readl((dev_priv->mmio_map)->handle + 8356);
#line 329
  dev_priv->saveIER = readl((dev_priv->mmio_map)->handle + 8352);
#line 330
  dev_priv->saveIMR = readl((dev_priv->mmio_map)->handle + 8360);
#line 333
  dev_priv->saveVGA0 = readl((dev_priv->mmio_map)->handle + 24576);
#line 334
  dev_priv->saveVGA1 = readl((dev_priv->mmio_map)->handle + 24580);
#line 335
  dev_priv->saveVGA_PD = readl((dev_priv->mmio_map)->handle + 24592);
#line 336
  dev_priv->saveVGACNTRL = readl((dev_priv->mmio_map)->handle + 463872);
#line 339
  dev_priv->saveD_STATE = readl((dev_priv->mmio_map)->handle + 24836);
#line 340
  dev_priv->saveCG_2D_DIS = readl((dev_priv->mmio_map)->handle + 25088);
#line 343
  dev_priv->saveCACHE_MODE_0 = readl((dev_priv->mmio_map)->handle + 8480);
#line 346
  dev_priv->saveMI_ARB_STATE = readl((dev_priv->mmio_map)->handle + 8420);
#line 349
  i = 0;
#line 349
  while (1) {
#line 349
    if (i < 16) {

    } else {
#line 349
      break;
    }
#line 350
    dev_priv->saveSWF0[i] = readl((dev_priv->mmio_map)->handle + (463888 + (i << 2)));
#line 351
    dev_priv->saveSWF1[i] = readl((dev_priv->mmio_map)->handle + (459792 + (i << 2)));
#line 349
    i = i + 1;
  }
#line 353
  i = 0;
#line 353
  while (1) {
#line 353
    if (i < 3) {

    } else {
#line 353
      break;
    }
#line 354
    dev_priv->saveSWF2[i] = readl((dev_priv->mmio_map)->handle + (467988 + (i << 2)));
#line 353
    i = i + 1;
  }
#line 356
  i915_save_vga(dev);
#line 358
  return (0);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_suspend.c"
int i915_restore_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 363
  dev_priv = dev->dev_private;
#line 366
  pci_write_config_byte(dev->pdev, 244, dev_priv->saveLBB);
#line 368
  writel(dev_priv->saveDSPARB, (dev_priv->mmio_map)->handle + 458800);
#line 372
  if (dev_priv->saveDPLL_A & (unsigned int )(1 << 31)) {
#line 373
    writel(dev_priv->saveDPLL_A & (unsigned int )(~ (1 << 31)), (dev_priv->mmio_map)->handle + 24596);
#line 375
    if (150 > 20000) {
#line 375
      __bad_udelay();
    } else {
#line 375
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 377
  writel(dev_priv->saveFPA0, (dev_priv->mmio_map)->handle + 24640);
#line 378
  writel(dev_priv->saveFPA1, (dev_priv->mmio_map)->handle + 24644);
#line 380
  writel(dev_priv->saveDPLL_A, (dev_priv->mmio_map)->handle + 24596);
#line 381
  if (150 > 20000) {
#line 381
    __bad_udelay();
  } else {
#line 381
    __const_udelay(150UL * 4295UL);
  }
#line 382
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 383
    writel(dev_priv->saveDPLL_A_MD, (dev_priv->mmio_map)->handle + 24604);
  } else {

  }
#line 384
  if (150 > 20000) {
#line 384
    __bad_udelay();
  } else {
#line 384
    __const_udelay(150UL * 4295UL);
  }
#line 387
  writel(dev_priv->saveHTOTAL_A, (dev_priv->mmio_map)->handle + 393216);
#line 388
  writel(dev_priv->saveHBLANK_A, (dev_priv->mmio_map)->handle + 393220);
#line 389
  writel(dev_priv->saveHSYNC_A, (dev_priv->mmio_map)->handle + 393224);
#line 390
  writel(dev_priv->saveVTOTAL_A, (dev_priv->mmio_map)->handle + 393228);
#line 391
  writel(dev_priv->saveVBLANK_A, (dev_priv->mmio_map)->handle + 393232);
#line 392
  writel(dev_priv->saveVSYNC_A, (dev_priv->mmio_map)->handle + 393236);
#line 393
  writel(dev_priv->saveBCLRPAT_A, (dev_priv->mmio_map)->handle + 393248);
#line 396
  writel(dev_priv->saveDSPASIZE, (dev_priv->mmio_map)->handle + 459152);
#line 397
  writel(dev_priv->saveDSPAPOS, (dev_priv->mmio_map)->handle + 459148);
#line 398
  writel(dev_priv->savePIPEASRC, (dev_priv->mmio_map)->handle + 393244);
#line 399
  writel(dev_priv->saveDSPAADDR, (dev_priv->mmio_map)->handle + 459140);
#line 400
  writel(dev_priv->saveDSPASTRIDE, (dev_priv->mmio_map)->handle + 459144);
#line 401
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 402
    writel(dev_priv->saveDSPASURF, (dev_priv->mmio_map)->handle + 459164);
#line 403
    writel(dev_priv->saveDSPATILEOFF, (dev_priv->mmio_map)->handle + 459172);
  } else {

  }
#line 406
  writel(dev_priv->savePIPEACONF, (dev_priv->mmio_map)->handle + 458760);
#line 408
  i915_restore_palette(dev, PIPE_A);
#line 410
  writel(dev_priv->saveDSPACNTR, (dev_priv->mmio_map)->handle + 459136);
#line 411
  tmp = readl((dev_priv->mmio_map)->handle + 459140);
#line 411
  writel(tmp, (dev_priv->mmio_map)->handle + 459140);
#line 414
  if (dev_priv->saveDPLL_B & (unsigned int )(1 << 31)) {
#line 415
    writel(dev_priv->saveDPLL_B & (unsigned int )(~ (1 << 31)), (dev_priv->mmio_map)->handle + 24600);
#line 417
    if (150 > 20000) {
#line 417
      __bad_udelay();
    } else {
#line 417
      __const_udelay(150UL * 4295UL);
    }
  } else {

  }
#line 419
  writel(dev_priv->saveFPB0, (dev_priv->mmio_map)->handle + 24648);
#line 420
  writel(dev_priv->saveFPB1, (dev_priv->mmio_map)->handle + 24652);
#line 422
  writel(dev_priv->saveDPLL_B, (dev_priv->mmio_map)->handle + 24600);
#line 423
  if (150 > 20000) {
#line 423
    __bad_udelay();
  } else {
#line 423
    __const_udelay(150UL * 4295UL);
  }
#line 424
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 425
    writel(dev_priv->saveDPLL_B_MD, (dev_priv->mmio_map)->handle + 24608);
  } else {

  }
#line 426
  if (150 > 20000) {
#line 426
    __bad_udelay();
  } else {
#line 426
    __const_udelay(150UL * 4295UL);
  }
#line 429
  writel(dev_priv->saveHTOTAL_B, (dev_priv->mmio_map)->handle + 397312);
#line 430
  writel(dev_priv->saveHBLANK_B, (dev_priv->mmio_map)->handle + 397316);
#line 431
  writel(dev_priv->saveHSYNC_B, (dev_priv->mmio_map)->handle + 397320);
#line 432
  writel(dev_priv->saveVTOTAL_B, (dev_priv->mmio_map)->handle + 397324);
#line 433
  writel(dev_priv->saveVBLANK_B, (dev_priv->mmio_map)->handle + 397328);
#line 434
  writel(dev_priv->saveVSYNC_B, (dev_priv->mmio_map)->handle + 397332);
#line 435
  writel(dev_priv->saveBCLRPAT_B, (dev_priv->mmio_map)->handle + 397344);
#line 438
  writel(dev_priv->saveDSPBSIZE, (dev_priv->mmio_map)->handle + 463248);
#line 439
  writel(dev_priv->saveDSPBPOS, (dev_priv->mmio_map)->handle + 463244);
#line 440
  writel(dev_priv->savePIPEBSRC, (dev_priv->mmio_map)->handle + 397340);
#line 441
  writel(dev_priv->saveDSPBADDR, (dev_priv->mmio_map)->handle + 463236);
#line 442
  writel(dev_priv->saveDSPBSTRIDE, (dev_priv->mmio_map)->handle + 463240);
#line 443
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 444
    writel(dev_priv->saveDSPBSURF, (dev_priv->mmio_map)->handle + 463260);
#line 445
    writel(dev_priv->saveDSPBTILEOFF, (dev_priv->mmio_map)->handle + 463268);
  } else {

  }
#line 448
  writel(dev_priv->savePIPEBCONF, (dev_priv->mmio_map)->handle + 462856);
#line 450
  i915_restore_palette(dev, PIPE_B);
#line 452
  writel(dev_priv->saveDSPBCNTR, (dev_priv->mmio_map)->handle + 463232);
#line 453
  tmp___0 = readl((dev_priv->mmio_map)->handle + 463236);
#line 453
  writel(tmp___0, (dev_priv->mmio_map)->handle + 463236);
#line 456
  writel(dev_priv->saveADPA, (dev_priv->mmio_map)->handle + 397568);
#line 459
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 460
    writel(dev_priv->saveBLC_PWM_CTL2, (dev_priv->mmio_map)->handle + 397904);
  } else {

  }
#line 461
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && ! (dev->pci_device == 13687)) {
#line 462
    writel(dev_priv->saveLVDS, (dev_priv->mmio_map)->handle + 397696);
  } else {

  }
#line 463
  if (! (dev->pci_device == 13687) && ! (dev->pci_device == 9570)) {
#line 464
    writel(dev_priv->savePFIT_CONTROL, (dev_priv->mmio_map)->handle + 397872);
  } else {

  }
#line 466
  writel(dev_priv->savePFIT_PGM_RATIOS, (dev_priv->mmio_map)->handle + 397876);
#line 467
  writel(dev_priv->saveBLC_PWM_CTL, (dev_priv->mmio_map)->handle + 397908);
#line 468
  writel(dev_priv->savePP_ON_DELAYS, (dev_priv->mmio_map)->handle + 397832);
#line 469
  writel(dev_priv->savePP_OFF_DELAYS, (dev_priv->mmio_map)->handle + 397836);
#line 470
  writel(dev_priv->savePP_DIVISOR, (dev_priv->mmio_map)->handle + 397840);
#line 471
  writel(dev_priv->savePP_CONTROL, (dev_priv->mmio_map)->handle + 397828);
#line 476
  writel(dev_priv->saveFBC_CFB_BASE, (dev_priv->mmio_map)->handle + 12800);
#line 477
  writel(dev_priv->saveFBC_LL_BASE, (dev_priv->mmio_map)->handle + 12804);
#line 478
  writel(dev_priv->saveFBC_CONTROL2, (dev_priv->mmio_map)->handle + 12820);
#line 479
  writel(dev_priv->saveFBC_CONTROL, (dev_priv->mmio_map)->handle + 12808);
#line 482
  writel(dev_priv->saveVGACNTRL, (dev_priv->mmio_map)->handle + 463872);
#line 483
  writel(dev_priv->saveVGA0, (dev_priv->mmio_map)->handle + 24576);
#line 484
  writel(dev_priv->saveVGA1, (dev_priv->mmio_map)->handle + 24580);
#line 485
  writel(dev_priv->saveVGA_PD, (dev_priv->mmio_map)->handle + 24592);
#line 486
  if (150 > 20000) {
#line 486
    __bad_udelay();
  } else {
#line 486
    __const_udelay(150UL * 4295UL);
  }
#line 489
  writel(dev_priv->saveD_STATE, (dev_priv->mmio_map)->handle + 24836);
#line 490
  writel(dev_priv->saveCG_2D_DIS, (dev_priv->mmio_map)->handle + 25088);
#line 493
  writel(dev_priv->saveCACHE_MODE_0 | 4294901760U, (dev_priv->mmio_map)->handle + 8480);
#line 496
  writel(dev_priv->saveMI_ARB_STATE | 4294901760U, (dev_priv->mmio_map)->handle + 8420);
#line 498
  i = 0;
#line 498
  while (1) {
#line 498
    if (i < 16) {

    } else {
#line 498
      break;
    }
#line 499
    writel(dev_priv->saveSWF0[i], (dev_priv->mmio_map)->handle + (463888 + (i << 2)));
#line 500
    writel(dev_priv->saveSWF1[i + 7], (dev_priv->mmio_map)->handle + (459792 + (i << 2)));
#line 498
    i = i + 1;
  }
#line 502
  i = 0;
#line 502
  while (1) {
#line 502
    if (i < 3) {

    } else {
#line 502
      break;
    }
#line 503
    writel(dev_priv->saveSWF2[i], (dev_priv->mmio_map)->handle + (467988 + (i << 2)));
#line 502
    i = i + 1;
  }
#line 505
  i915_restore_vga(dev);
#line 507
  return (0);
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )head->next == (unsigned long )head);
}
}
#line 264 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map *lock , char const   *name , struct lock_class_key *key ,
                             int subclass ) ;
#line 49 "include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 51
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "addl %1,%0": "=m" (v->counter): "ir" (i), "m" (v->counter));
#line 54
  return;
}
}
#line 63 "include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 65
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "subl %1,%0": "=m" (v->counter): "ir" (i), "m" (v->counter));
#line 68
  return;
}
}
#line 95 "include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 108 "include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 110
  __asm__  volatile   (".section .smp_locks,\"a\"\n"
                       " "
                       ".balign 8"
                       " "
                       "\n"
                       " "
                       ".quad"
                       " "
                       "661f\n"
                       ".previous\n"
                       "661:\n\tlock; "
                       "decl %0": "=m" (v->counter): "m" (v->counter));
#line 113
  return;
}
}
#line 431 "include/linux/wait.h"
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 433
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 434
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 115 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 


  {
#line 117
  return (lock->count.counter != 1);
}
}
#line 38 "include/linux/rwsem.h"
extern void down_write(struct rw_semaphore *sem ) ;
#line 53
extern void up_write(struct rw_semaphore *sem ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int msecs ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref *kref ) ;
#line 28
extern int kref_put(struct kref *kref , void (*release)(struct kref *kref ) ) ;
#line 40 "include/linux/timer.h"
extern void init_timer(struct timer_list *timer ) ;
#line 194 "include/linux/workqueue.h"
extern int schedule_delayed_work(struct delayed_work *work , unsigned long delay ) ;
#line 1361 "include/linux/fs.h"
extern ssize_t vfs_read(struct file * , char * , size_t  , loff_t * ) ;
#line 1362
extern ssize_t vfs_write(struct file * , char const   * , size_t  , loff_t * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect(! (! ((unsigned long )ptr >= 0xfffffffffffff001UL)), 0);
#line 34
  return (tmp);
}
}
#line 310 "include/linux/mm.h"
extern void put_page(struct page *page ) ;
#line 818
extern int set_page_dirty(struct page *page ) ;
#line 1105
extern unsigned long do_mmap_pgoff(struct file *file , unsigned long addr , unsigned long len ,
                                   unsigned long prot , unsigned long flag , unsigned long pgoff ) ;
#line 1113 "include/linux/mm.h"
__inline static unsigned long do_mmap(struct file *file , unsigned long addr , unsigned long len ,
                                      unsigned long prot , unsigned long flag , unsigned long offset ) 
{ 
  unsigned long ret ;

  {
#line 1117
  ret = -22;
#line 1118
  if (offset + ((len + ((1UL << 12) - 1UL)) & ~ ((1UL << 12) - 1UL)) < offset) {
#line 1119
    goto out;
  } else {

  }
#line 1120
  if (! (offset & ~ (~ ((1UL << 12) - 1UL)))) {
#line 1121
    ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> 12);
  } else {

  }
  out: 
#line 1123
  return (ret);
}
}
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 23 "include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 232 "include/linux/pagemap.h"
extern struct page *read_cache_page(struct address_space *mapping , unsigned long index ,
                                    filler_t *filler , void *data ) ;
#line 246 "include/linux/pagemap.h"
__inline static struct page *read_mapping_page(struct address_space *mapping , unsigned long index ,
                                               void *data ) 
{ 
  filler_t *filler ;
  struct page *tmp ;

  {
#line 249
  filler = (filler_t *)(mapping->a_ops)->readpage;
#line 250
  tmp = read_cache_page(mapping, index, filler, data);
#line 250
  return (tmp);
}
}
#line 1010 "include/drm/drmP.h"
extern int drm_free_agp(struct agp_memory *handle , int pages ) ;
#line 1012
extern struct agp_memory *drm_agp_bind_pages(struct drm_device *dev , struct page **pages ,
                                             unsigned long num_pages , uint32_t gtt_offset ) ;
#line 1016
extern int drm_unbind_agp(struct agp_memory *handle ) ;
#line 1079
extern void drm_clflush_pages(struct page **pages , unsigned long num_pages ) ;
#line 1137
extern int drm_irq_install(struct drm_device *dev ) ;
#line 1188
extern void drm_agp_chipset_flush(struct drm_device *dev ) ;
#line 1238
extern struct drm_mm_node *drm_mm_get_block(struct drm_mm_node *parent , unsigned long size ,
                                            unsigned int alignment ) ;
#line 1241
extern void drm_mm_put_block(struct drm_mm_node *cur ) ;
#line 1242
extern struct drm_mm_node *drm_mm_search_free(struct drm_mm  const  *mm , unsigned long size ,
                                              unsigned int alignment , int best_match ) ;
#line 1244
extern int drm_mm_init(struct drm_mm *mm , unsigned long start , unsigned long size ) ;
#line 1253
extern void drm_gem_object_free(struct kref *kref ) ;
#line 1254
extern struct drm_gem_object *drm_gem_object_alloc(struct drm_device *dev , size_t size ) ;
#line 1256
extern void drm_gem_object_handle_free(struct kref *kref ) ;
#line 1258 "include/drm/drmP.h"
__inline static void drm_gem_object_reference(struct drm_gem_object *obj ) 
{ 


  {
#line 1261
  kref_get(& obj->refcount);
#line 1262
  return;
}
}
#line 1264 "include/drm/drmP.h"
__inline static void drm_gem_object_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1267
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 1268
    return;
  } else {

  }
#line 1270
  kref_put(& obj->refcount, & drm_gem_object_free);
#line 1271
  return;
}
}
#line 1273
extern int drm_gem_handle_create(struct drm_file *file_priv , struct drm_gem_object *obj ,
                                 int *handlep ) ;
#line 1284 "include/drm/drmP.h"
__inline static void drm_gem_object_handle_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1287
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 1288
    return;
  } else {

  }
#line 1295
  kref_put(& obj->handlecount, & drm_gem_object_handle_free);
#line 1296
  drm_gem_object_unreference(obj);
#line 1297
  return;
}
}
#line 1299
extern struct drm_gem_object *drm_gem_object_lookup(struct drm_device *dev , struct drm_file *filp ,
                                                    int handle ) ;
#line 507 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) ;
#line 508
void i915_gem_object_unpin(struct drm_gem_object *obj ) ;
#line 511
void i915_gem_retire_requests(struct drm_device *dev ) ;
#line 512
void i915_gem_retire_work_handler(struct work_struct *work ) ;
#line 513
void i915_gem_clflush_object(struct drm_gem_object *obj ) ;
#line 516
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) ;
#line 177 "include/linux/swap.h"
extern void mark_page_accessed(struct page * ) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_set_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                      uint32_t write_domain ) ;
#line 38
static int i915_gem_object_set_domain_range(struct drm_gem_object *obj , uint64_t offset ,
                                            uint64_t size , uint32_t read_domains ,
                                            uint32_t write_domain ) ;
#line 44
static int i915_gem_set_domain(struct drm_gem_object *obj , struct drm_file *file_priv ,
                               uint32_t read_domains , uint32_t write_domain ) ;
#line 49
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) ;
#line 50
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) ;
#line 51
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_init *args ;

  {
#line 57
  dev_priv = dev->dev_private;
#line 58
  args = data;
#line 60
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 62
  if ((args->gtt_start >= args->gtt_end || (args->gtt_start & (unsigned long long )((1UL << 12) - 1UL)) != 0ULL) || (args->gtt_end & (unsigned long long )((1UL << 12) - 1UL)) != 0ULL) {
#line 65
    mutex_unlock(& dev->struct_mutex);
#line 66
    return (-22);
  } else {

  }
#line 69
  drm_mm_init(& dev_priv->mm.gtt_space, args->gtt_start, args->gtt_end - args->gtt_start);
#line 72
  dev->gtt_total = (uint32_t )(args->gtt_end - args->gtt_start);
#line 74
  mutex_unlock(& dev->struct_mutex);
#line 76
  return (0);
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_create *args ;
  struct drm_gem_object *obj ;
  int handle ;
  int ret ;

  {
#line 87
  args = data;
#line 91
  args->size = ((args->size + (uint64_t )((1UL << 12) - 1UL)) / (uint64_t )(1UL << 12)) * (uint64_t )(1UL << 12);
#line 94
  obj = drm_gem_object_alloc(dev, args->size);
#line 95
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 96
    return (-12);
  } else {

  }
#line 98
  ret = drm_gem_handle_create(file_priv, obj, & handle);
#line 99
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 100
  drm_gem_object_handle_unreference(obj);
#line 101
  mutex_unlock(& dev->struct_mutex);
#line 103
  if (ret) {
#line 104
    return (ret);
  } else {

  }
#line 106
  args->handle = handle;
#line 108
  return (0);
}
}
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pread *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  ssize_t read ;
  loff_t offset ;
  int ret ;

  {
#line 120
  args = data;
#line 127
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 128
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 129
    return (-9);
  } else {

  }
#line 130
  obj_priv = obj->driver_private;
#line 136
  if ((args->offset > (uint64_t )obj->size || args->size > (uint64_t )obj->size) || args->offset + args->size > (uint64_t )obj->size) {
#line 138
    drm_gem_object_unreference(obj);
#line 139
    return (-22);
  } else {

  }
#line 142
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 144
  ret = i915_gem_object_set_domain_range(obj, args->offset, args->size, 1, 0);
#line 146
  if (ret != 0) {
#line 147
    drm_gem_object_unreference(obj);
#line 148
    mutex_unlock(& dev->struct_mutex);
  } else {

  }
#line 151
  offset = args->offset;
#line 153
  read = vfs_read(obj->filp, (char *)((uintptr_t )args->data_ptr), args->size, & offset);
#line 155
  if ((uint64_t )read != args->size) {
#line 156
    drm_gem_object_unreference(obj);
#line 157
    mutex_unlock(& dev->struct_mutex);
#line 158
    if (read < (ssize_t )0) {
#line 159
      return (read);
    } else {
#line 161
      return (-22);
    }
  } else {

  }
#line 164
  drm_gem_object_unreference(obj);
#line 165
  mutex_unlock(& dev->struct_mutex);
#line 167
  return (0);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_gtt_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                               struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  ssize_t remain ;
  loff_t offset ;
  char *user_data ;
  char *vaddr ;
  int i ;
  int o ;
  int l ;
  int ret ;
  unsigned long pfn ;
  unsigned long unwritten ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;

  {
#line 175
  obj_priv = obj->driver_private;
#line 181
  ret = 0;
#line 185
  user_data = (char *)((uintptr_t )args->data_ptr);
#line 186
  remain = args->size;
#line 187
  tmp = current_thread_info();
#line 187
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (user_data),
            "g" (remain), "rm" (tmp->addr_limit.seg));
#line 187
  if (flag == 0UL) {
#line 187
    tmp___0 = 1;
  } else {
#line 187
    tmp___0 = 0;
  }
#line 187
  tmp___1 = __builtin_expect(tmp___0, 1);
#line 187
  if (tmp___1) {

  } else {
#line 188
    return (-14);
  }
#line 191
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 192
  ret = i915_gem_object_pin(obj, 0);
#line 193
  if (ret) {
#line 194
    mutex_unlock(& dev->struct_mutex);
#line 195
    return (ret);
  } else {

  }
#line 197
  ret = i915_gem_set_domain(obj, file_priv, 64, 64);
#line 199
  if (ret) {
#line 200
    goto fail;
  } else {

  }
#line 202
  obj_priv = obj->driver_private;
#line 203
  offset = (uint64_t )obj_priv->gtt_offset + args->offset;
#line 204
  obj_priv->dirty = 1;
#line 206
  while (1) {
#line 206
    if (remain > (ssize_t )0) {

    } else {
#line 206
      break;
    }
#line 213
    i = offset >> 12;
#line 214
    o = offset & (long long )((1UL << 12) - 1UL);
#line 215
    l = remain;
#line 216
    if ((unsigned long )(o + l) > 1UL << 12) {
#line 217
      l = (1UL << 12) - (unsigned long )o;
    } else {

    }
#line 219
    pfn = ((dev->agp)->base >> 12) + (unsigned long )i;
#line 236
    tmp___2 = ioremap(pfn << 12, 1UL << 12);
#line 236
    vaddr = tmp___2;
#line 242
    if ((unsigned long )vaddr == (unsigned long )((void *)0)) {
#line 243
      ret = -14;
#line 244
      goto fail;
    } else {

    }
#line 246
    tmp___3 = __copy_from_user(vaddr + o, user_data, l);
#line 246
    unwritten = tmp___3;
#line 250
    iounmap(vaddr);
#line 251
    if (unwritten) {
#line 252
      ret = -14;
#line 253
      goto fail;
    } else {

    }
#line 257
    remain = remain - (ssize_t )l;
#line 258
    user_data = user_data + l;
#line 259
    offset = offset + (loff_t )l;
  }
  fail: 
#line 268
  i915_gem_object_unpin(obj);
#line 269
  mutex_unlock(& dev->struct_mutex);
#line 271
  return (ret);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_shmem_pwrite(struct drm_device *dev , struct drm_gem_object *obj , struct drm_i915_gem_pwrite *args ,
                          struct drm_file *file_priv ) 
{ 
  int ret ;
  loff_t offset ;
  ssize_t written ;

  {
#line 283
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 285
  ret = i915_gem_set_domain(obj, file_priv, 1, 1);
#line 287
  if (ret) {
#line 288
    mutex_unlock(& dev->struct_mutex);
#line 289
    return (ret);
  } else {

  }
#line 292
  offset = args->offset;
#line 294
  written = vfs_write(obj->filp, (char *)((uintptr_t )args->data_ptr), args->size,
                      & offset);
#line 297
  if ((uint64_t )written != args->size) {
#line 298
    mutex_unlock(& dev->struct_mutex);
#line 299
    if (written < (ssize_t )0) {
#line 300
      return (written);
    } else {
#line 302
      return (-22);
    }
  } else {

  }
#line 305
  mutex_unlock(& dev->struct_mutex);
#line 307
  return (0);
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pwrite *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 319
  args = data;
#line 322
  ret = 0;
#line 324
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 325
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 326
    return (-9);
  } else {

  }
#line 327
  obj_priv = obj->driver_private;
#line 333
  if ((args->offset > (uint64_t )obj->size || args->size > (uint64_t )obj->size) || args->offset + args->size > (uint64_t )obj->size) {
#line 335
    drm_gem_object_unreference(obj);
#line 336
    return (-22);
  } else {

  }
#line 345
  if (obj_priv->tiling_mode == (uint32_t )0 && dev->gtt_total != (uint32_t )0) {
#line 347
    ret = i915_gem_gtt_pwrite(dev, obj, args, file_priv);
  } else {
#line 349
    ret = i915_gem_shmem_pwrite(dev, obj, args, file_priv);
  }
#line 356
  drm_gem_object_unreference(obj);
#line 358
  return (ret);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_domain *args ;
  struct drm_gem_object *obj ;
  int ret ;

  {
#line 368
  args = data;
#line 372
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 373
    return (-19);
  } else {

  }
#line 375
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 376
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 377
    return (-9);
  } else {

  }
#line 379
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 384
  ret = i915_gem_set_domain(obj, file_priv, args->read_domains, args->write_domain);
#line 386
  drm_gem_object_unreference(obj);
#line 387
  mutex_unlock(& dev->struct_mutex);
#line 388
  return (ret);
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_sw_finish *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 398
  args = data;
#line 401
  ret = 0;
#line 403
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 404
    return (-19);
  } else {

  }
#line 406
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 407
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 408
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 409
    mutex_unlock(& dev->struct_mutex);
#line 410
    return (-9);
  } else {

  }
#line 417
  obj_priv = obj->driver_private;
#line 420
  if (obj->write_domain & 1U && obj_priv->pin_count) {
#line 421
    i915_gem_clflush_object(obj);
#line 422
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 424
  drm_gem_object_unreference(obj);
#line 425
  mutex_unlock(& dev->struct_mutex);
#line 426
  return (ret);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap *args ;
  struct drm_gem_object *obj ;
  loff_t offset ;
  unsigned long addr ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;

  {
#line 440
  args = data;
#line 445
  if (! ((dev->driver)->driver_features & 4096U)) {
#line 446
    return (-19);
  } else {

  }
#line 448
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 449
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 450
    return (-9);
  } else {

  }
#line 452
  offset = args->offset;
#line 454
  tmp = get_current();
#line 454
  down_write(& (tmp->mm)->mmap_sem);
#line 455
  addr = do_mmap(obj->filp, 0, args->size, 1 | 2, 1, args->offset);
#line 458
  tmp___0 = get_current();
#line 458
  up_write(& (tmp___0->mm)->mmap_sem);
#line 459
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 460
  drm_gem_object_unreference(obj);
#line 461
  mutex_unlock(& dev->struct_mutex);
#line 462
  tmp___1 = IS_ERR((void *)addr);
#line 462
  if (tmp___1) {
#line 463
    return (addr);
  } else {

  }
#line 465
  args->addr_ptr = (uint64_t )addr;
#line 467
  return (0);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;

  {
#line 473
  obj_priv = obj->driver_private;
#line 474
  page_count___0 = obj->size / (1UL << 12);
#line 477
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 478
    return;
  } else {

  }
#line 481
  i = 0;
#line 481
  while (1) {
#line 481
    if (i < page_count___0) {

    } else {
#line 481
      break;
    }
#line 482
    if ((unsigned long )*(obj_priv->page_list + i) != (unsigned long )((void *)0)) {
#line 483
      if (obj_priv->dirty) {
#line 484
        set_page_dirty(*(obj_priv->page_list + i));
      } else {

      }
#line 485
      mark_page_accessed(*(obj_priv->page_list + i));
#line 486
      put_page(*(obj_priv->page_list + i));
    } else {

    }
#line 481
    i = i + 1;
  }
#line 488
  obj_priv->dirty = 0;
#line 490
  drm_free(obj_priv->page_list, (unsigned long )page_count___0 * sizeof(struct page *),
           2);
#line 493
  obj_priv->page_list = (void *)0;
#line 494
  return;
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_move_to_active(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 499
  dev = obj->dev;
#line 500
  dev_priv = dev->dev_private;
#line 501
  obj_priv = obj->driver_private;
#line 504
  if (! obj_priv->active) {
#line 505
    drm_gem_object_reference(obj);
#line 506
    obj_priv->active = 1;
  } else {

  }
#line 509
  list_move_tail(& obj_priv->list, & dev_priv->mm.active_list);
#line 511
  return;
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_object_move_to_inactive(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 517
  dev = obj->dev;
#line 518
  dev_priv = dev->dev_private;
#line 519
  obj_priv = obj->driver_private;
#line 522
  if (obj_priv->pin_count != 0) {
#line 523
    list_del_init(& obj_priv->list);
  } else {
#line 525
    list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
  }
#line 527
  if (obj_priv->active) {
#line 528
    obj_priv->active = 0;
#line 529
    drm_gem_object_unreference(obj);
  } else {

  }
#line 532
  return;
}
}
#line 542 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static uint32_t i915_add_request(struct drm_device *dev , uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *request ;
  uint32_t seqno ;
  int was_empty ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  void *tmp ;

  {
#line 545
  dev_priv = dev->dev_private;
#line 551
  tmp = drm_calloc(1, sizeof(*request), 2);
#line 551
  request = tmp;
#line 552
  if ((unsigned long )request == (unsigned long )((void *)0)) {
#line 553
    return (0);
  } else {

  }
#line 558
  seqno = dev_priv->mm.next_gem_seqno;
#line 559
  dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
#line 560
  if (dev_priv->mm.next_gem_seqno == (uint32_t )0) {
#line 561
    dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
  } else {

  }
#line 563
  while (1) {
#line 563
    if (dev_priv->ring.space < 4 * 4) {
#line 563
      i915_wait_ring(dev, 4 * 4, "i915_add_request");
    } else {

    }
#line 563
    outcount = 0;
#line 563
    outring = dev_priv->ring.tail;
#line 563
    ringmask = dev_priv->ring.tail_mask;
#line 563
    virt = dev_priv->ring.virtual_start;
#line 563
    break;
  }
#line 564
  while (1) {
#line 564
    *((unsigned int volatile   *)(virt + outring)) = (33 << 23) | 1;
#line 564
    outcount = outcount + 1U;
#line 564
    outring = outring + 4U;
#line 564
    outring = outring & ringmask;
#line 564
    break;
  }
#line 565
  while (1) {
#line 565
    *((unsigned int volatile   *)(virt + outring)) = 16 << 2;
#line 565
    outcount = outcount + 1U;
#line 565
    outring = outring + 4U;
#line 565
    outring = outring & ringmask;
#line 565
    break;
  }
#line 566
  while (1) {
#line 566
    *((unsigned int volatile   *)(virt + outring)) = seqno;
#line 566
    outcount = outcount + 1U;
#line 566
    outring = outring + 4U;
#line 566
    outring = outring & ringmask;
#line 566
    break;
  }
#line 568
  while (1) {
#line 568
    *((unsigned int volatile   *)(virt + outring)) = (2 << 23) | 0;
#line 568
    outcount = outcount + 1U;
#line 568
    outring = outring + 4U;
#line 568
    outring = outring & ringmask;
#line 568
    break;
  }
#line 569
  while (1) {
#line 569
    dev_priv->ring.tail = outring;
#line 569
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 569
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 569
    break;
  }
#line 571
  while (1) {
#line 571
    if (drm_debug) {
#line 571
      printk("<7>[drm:%s] %d\n", "i915_add_request", seqno);
    } else {

    }
#line 571
    break;
  }
#line 573
  request->seqno = seqno;
#line 574
  request->emitted_jiffies = jiffies;
#line 575
  request->flush_domains = flush_domains;
#line 576
  was_empty = list_empty(& dev_priv->mm.request_list);
#line 577
  list_add_tail(& request->list, & dev_priv->mm.request_list);
#line 579
  if (was_empty) {
#line 580
    schedule_delayed_work(& dev_priv->mm.retire_work, 250);
  } else {

  }
#line 581
  return (seqno);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
uint32_t i915_retire_commands(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  uint32_t flush_domains ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 593
  dev_priv = dev->dev_private;
#line 594
  cmd = ((4 << 23) | 0) | (1 << 2);
#line 595
  flush_domains = 0;
#line 599
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 600
    flush_domains = flush_domains | 4U;
  } else {

  }
#line 601
  while (1) {
#line 601
    if (dev_priv->ring.space < 2 * 4) {
#line 601
      i915_wait_ring(dev, 2 * 4, "i915_retire_commands");
    } else {

    }
#line 601
    outcount = 0;
#line 601
    outring = dev_priv->ring.tail;
#line 601
    ringmask = dev_priv->ring.tail_mask;
#line 601
    virt = dev_priv->ring.virtual_start;
#line 601
    break;
  }
#line 602
  while (1) {
#line 602
    *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 602
    outcount = outcount + 1U;
#line 602
    outring = outring + 4U;
#line 602
    outring = outring & ringmask;
#line 602
    break;
  }
#line 603
  while (1) {
#line 603
    *((unsigned int volatile   *)(virt + outring)) = 0;
#line 603
    outcount = outcount + 1U;
#line 603
    outring = outring + 4U;
#line 603
    outring = outring & ringmask;
#line 603
    break;
  }
#line 604
  while (1) {
#line 604
    dev_priv->ring.tail = outring;
#line 604
    dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 604
    writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 604
    break;
  }
#line 605
  return (flush_domains);
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_retire_request(struct drm_device *dev , struct drm_i915_gem_request *request ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct drm_i915_gem_object *obj_priv___0 ;
  struct drm_i915_gem_object *next ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct drm_gem_object *obj___0 ;

  {
#line 616
  dev_priv = dev->dev_private;
#line 621
  while (1) {
#line 621
    tmp = list_empty(& dev_priv->mm.active_list);
#line 621
    if (tmp) {
#line 621
      break;
    } else {

    }
#line 625
    __mptr = dev_priv->mm.active_list.next;
#line 625
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 628
    obj = obj_priv->obj;
#line 634
    if (obj_priv->last_rendering_seqno != request->seqno) {
#line 635
      return;
    } else {

    }
#line 641
    if (obj->write_domain != (uint32_t )0) {
#line 642
      list_move_tail(& obj_priv->list, & dev_priv->mm.flushing_list);
    } else {
#line 645
      i915_gem_object_move_to_inactive(obj);
    }
  }
#line 649
  if (request->flush_domains != (uint32_t )0) {
#line 655
    __mptr___0 = dev_priv->mm.flushing_list.next;
#line 655
    obj_priv___0 = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 655
    __mptr___1 = obj_priv___0->list.next;
#line 655
    next = (struct drm_i915_gem_object *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 655
    while (1) {
#line 655
      if ((unsigned long )(& obj_priv___0->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {

      } else {
#line 655
        break;
      }
#line 657
      obj___0 = obj_priv___0->obj;
#line 659
      if (obj___0->write_domain & request->flush_domains) {
#line 660
        obj___0->write_domain = 0;
#line 661
        i915_gem_object_move_to_inactive(obj___0);
      } else {

      }
#line 655
      obj_priv___0 = next;
#line 655
      __mptr___2 = next->list.next;
#line 655
      next = (struct drm_i915_gem_object *)((char *)__mptr___2 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
    }
  } else {

  }
#line 666
  return;
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_seqno_passed(uint32_t seq1 , uint32_t seq2 ) 
{ 


  {
#line 674
  return ((int32_t )(seq1 - seq2) >= 0);
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
uint32_t i915_get_gem_seqno(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 680
  dev_priv = dev->dev_private;
#line 682
  return (*((u32 volatile   *)dev_priv->hw_status_page + 16));
}
}
#line 688 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_retire_requests(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  struct drm_i915_gem_request *request ;
  uint32_t retiring_seqno ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 691
  dev_priv = dev->dev_private;
#line 694
  seqno = i915_get_gem_seqno(dev);
#line 696
  while (1) {
#line 696
    tmp___0 = list_empty(& dev_priv->mm.request_list);
#line 696
    if (tmp___0) {
#line 696
      break;
    } else {

    }
#line 700
    __mptr = dev_priv->mm.request_list.next;
#line 700
    request = (struct drm_i915_gem_request *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 703
    retiring_seqno = request->seqno;
#line 705
    tmp = i915_seqno_passed(seqno, retiring_seqno);
#line 705
    if (tmp || dev_priv->mm.wedged) {
#line 707
      i915_gem_retire_request(dev, request);
#line 709
      list_del(& request->list);
#line 710
      drm_free(request, sizeof(*request), 2);
    } else {
#line 712
      break;
    }
  }
#line 714
  return;
}
}
#line 716 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_retire_work_handler(struct work_struct *work ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_device *dev ;
  struct work_struct  const  *__mptr ;
  int tmp ;

  {
#line 722
  __mptr = work;
#line 722
  dev_priv = (drm_i915_private_t *)((char *)__mptr - (unsigned int )(& ((drm_i915_private_t *)0)->mm.retire_work.work));
#line 724
  dev = dev_priv->dev;
#line 726
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 727
  i915_gem_retire_requests(dev);
#line 728
  tmp = list_empty(& dev_priv->mm.request_list);
#line 728
  if (tmp) {

  } else {
#line 729
    schedule_delayed_work(& dev_priv->mm.retire_work, 250);
  }
#line 730
  mutex_unlock(& dev->struct_mutex);
#line 731
  return;
}
}
#line 737 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_wait_request(struct drm_device *dev , uint32_t seqno ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  long tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  uint32_t tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  uint32_t tmp___5 ;
  int tmp___6 ;
  uint32_t tmp___7 ;
  int tmp___8 ;
  uint32_t tmp___9 ;

  {
#line 740
  dev_priv = dev->dev_private;
#line 741
  ret = 0;
#line 743
  while (1) {
#line 743
    tmp = __builtin_expect(! (! (seqno == (uint32_t )0)), 0);
#line 743
    if (tmp) {
#line 743
      while (1) {
#line 743
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (743), "i" (sizeof(struct bug_entry )));
#line 743
        while (1) {

        }
#line 743
        break;
      }
    } else {

    }
#line 743
    break;
  }
#line 745
  tmp___7 = i915_get_gem_seqno(dev);
#line 745
  tmp___8 = i915_seqno_passed(tmp___7, seqno);
#line 745
  if (tmp___8) {

  } else {
#line 746
    dev_priv->mm.waiting_gem_seqno = seqno;
#line 747
    i915_user_irq_get(dev);
#line 748
    __ret = 0;
#line 748
    tmp___5 = i915_get_gem_seqno(dev);
#line 748
    tmp___6 = i915_seqno_passed(tmp___5, seqno);
#line 748
    if (tmp___6 || dev_priv->mm.wedged) {

    } else {
#line 748
      while (1) {
#line 748
        tmp___0 = get_current();
#line 748
        __wait.flags = 0U;
#line 748
        __wait.private = tmp___0;
#line 748
        __wait.func = & autoremove_wake_function;
#line 748
        __wait.task_list.next = & __wait.task_list;
#line 748
        __wait.task_list.prev = & __wait.task_list;
#line 748
        while (1) {
#line 748
          prepare_to_wait(& dev_priv->irq_queue, & __wait, 1);
#line 748
          tmp___1 = i915_get_gem_seqno(dev);
#line 748
          tmp___2 = i915_seqno_passed(tmp___1, seqno);
#line 748
          if (tmp___2 || dev_priv->mm.wedged) {
#line 748
            break;
          } else {

          }
#line 748
          tmp___3 = get_current();
#line 748
          tmp___4 = signal_pending(tmp___3);
#line 748
          if (tmp___4) {

          } else {
#line 748
            schedule();
#line 748
            goto __Cont;
          }
#line 748
          __ret = -512;
#line 748
          break;
          __Cont: /* CIL Label */ ;
        }
#line 748
        finish_wait(& dev_priv->irq_queue, & __wait);
#line 748
        break;
      }
    }
#line 748
    ret = __ret;
#line 752
    i915_user_irq_put(dev);
#line 753
    dev_priv->mm.waiting_gem_seqno = 0;
  }
#line 755
  if (dev_priv->mm.wedged) {
#line 756
    ret = -5;
  } else {

  }
#line 758
  if (ret && ret != -512) {
#line 759
    tmp___9 = i915_get_gem_seqno(dev);
#line 759
    printk("<3>[drm:%s] *ERROR* %s returns %d (awaiting %d at %d)\n", "i915_wait_request",
           "i915_wait_request", ret, seqno, tmp___9);
  } else {

  }
#line 767
  if (ret == 0) {
#line 768
    i915_gem_retire_requests(dev);
  } else {

  }
#line 770
  return (ret);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_flush(struct drm_device *dev , uint32_t invalidate_domains ,
                           uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 778
  dev_priv = dev->dev_private;
#line 787
  if (flush_domains & 1U) {
#line 788
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 790
  if ((invalidate_domains | flush_domains) & (unsigned int )(~ (1 | 64))) {
#line 820
    cmd = ((4 << 23) | 0) | (1 << 2);
#line 821
    if ((invalidate_domains | flush_domains) & 2U) {
#line 823
      cmd = cmd & (unsigned int )(~ (1 << 2));
    } else {

    }
#line 824
    if (! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 829
      if (invalidate_domains & 4U) {
#line 830
        cmd = cmd | (unsigned int )(1 << 0);
      } else {

      }
    } else {

    }
#line 832
    if (invalidate_domains & 16U) {
#line 833
      cmd = cmd | (unsigned int )(1 << 1);
    } else {

    }
#line 838
    while (1) {
#line 838
      if (dev_priv->ring.space < 2 * 4) {
#line 838
        i915_wait_ring(dev, 2 * 4, "i915_gem_flush");
      } else {

      }
#line 838
      outcount = 0;
#line 838
      outring = dev_priv->ring.tail;
#line 838
      ringmask = dev_priv->ring.tail_mask;
#line 838
      virt = dev_priv->ring.virtual_start;
#line 838
      break;
    }
#line 839
    while (1) {
#line 839
      *((unsigned int volatile   *)(virt + outring)) = cmd;
#line 839
      outcount = outcount + 1U;
#line 839
      outring = outring + 4U;
#line 839
      outring = outring & ringmask;
#line 839
      break;
    }
#line 840
    while (1) {
#line 840
      *((unsigned int volatile   *)(virt + outring)) = 0;
#line 840
      outcount = outcount + 1U;
#line 840
      outring = outring + 4U;
#line 840
      outring = outring & ringmask;
#line 840
      break;
    }
#line 841
    while (1) {
#line 841
      dev_priv->ring.tail = outring;
#line 841
      dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 841
      writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 841
      break;
    }
  } else {

  }
#line 843
  return;
}
}
#line 849 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  uint32_t write_domain ;
  long tmp ;

  {
#line 852
  dev = obj->dev;
#line 853
  obj_priv = obj->driver_private;
#line 859
  if (obj->write_domain & (unsigned int )(~ (1 | 64))) {
#line 860
    write_domain = obj->write_domain;
#line 865
    i915_gem_flush(dev, 0, write_domain);
#line 867
    i915_gem_object_move_to_active(obj);
#line 868
    obj_priv->last_rendering_seqno = i915_add_request(dev, write_domain);
#line 870
    while (1) {
#line 870
      tmp = __builtin_expect(! (! (obj_priv->last_rendering_seqno == (uint32_t )0)),
                             0);
#line 870
      if (tmp) {
#line 870
        while (1) {
#line 870
          __asm__  volatile   ("1:\tud2\n"
                               ".pushsection __bug_table,\"a\"\n"
                               "2:\t.quad 1b, %c0\n"
                               "\t.word %c1, 0\n"
                               "\t.org 2b+%c2\n"
                               ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                               "i" (870), "i" (sizeof(struct bug_entry )));
#line 870
          while (1) {

          }
#line 870
          break;
        }
      } else {

      }
#line 870
      break;
    }
  } else {

  }
#line 879
  if (obj_priv->active) {
#line 884
    ret = i915_wait_request(dev, obj_priv->last_rendering_seqno);
#line 885
    if (ret != 0) {
#line 886
      return (ret);
    } else {

    }
  } else {

  }
#line 889
  return (0);
}
}
#line 895 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_unbind(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;
  int tmp___0 ;

  {
#line 898
  dev = obj->dev;
#line 899
  obj_priv = obj->driver_private;
#line 900
  ret = 0;
#line 906
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 907
    return (0);
  } else {

  }
#line 909
  if (obj_priv->pin_count != 0) {
#line 910
    printk("<3>[drm:%s] *ERROR* Attempting to unbind pinned buffer\n", "i915_gem_object_unbind");
#line 911
    return (-22);
  } else {

  }
#line 916
  ret = i915_gem_object_wait_rendering(obj);
#line 917
  if (ret) {
#line 918
    printk("<3>[drm:%s] *ERROR* wait_rendering failed: %d\n", "i915_gem_object_unbind",
           ret);
#line 919
    return (ret);
  } else {

  }
#line 928
  ret = i915_gem_object_set_domain(obj, 1, 1);
#line 930
  if (ret) {
#line 931
    printk("<3>[drm:%s] *ERROR* set_domain failed: %d\n", "i915_gem_object_unbind",
           ret);
#line 932
    return (ret);
  } else {

  }
#line 935
  if ((unsigned long )obj_priv->agp_mem != (unsigned long )((void *)0)) {
#line 936
    drm_unbind_agp(obj_priv->agp_mem);
#line 937
    drm_free_agp(obj_priv->agp_mem, obj->size / (1UL << 12));
#line 938
    obj_priv->agp_mem = (void *)0;
  } else {

  }
#line 941
  while (1) {
#line 941
    tmp = __builtin_expect(! (! obj_priv->active), 0);
#line 941
    if (tmp) {
#line 941
      while (1) {
#line 941
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (941), "i" (sizeof(struct bug_entry )));
#line 941
        while (1) {

        }
#line 941
        break;
      }
    } else {

    }
#line 941
    break;
  }
#line 943
  i915_gem_object_free_page_list(obj);
#line 945
  if (obj_priv->gtt_space) {
#line 946
    atomic_dec(& dev->gtt_count);
#line 947
    atomic_sub(obj->size, & dev->gtt_memory);
#line 949
    drm_mm_put_block(obj_priv->gtt_space);
#line 950
    obj_priv->gtt_space = (void *)0;
  } else {

  }
#line 954
  tmp___0 = list_empty(& obj_priv->list);
#line 954
  if (tmp___0) {

  } else {
#line 955
    list_del_init(& obj_priv->list);
  }
#line 957
  return (0);
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_evict_something(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct drm_i915_gem_request *request ;
  struct list_head  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 963
  dev_priv = dev->dev_private;
#line 966
  ret = 0;
#line 968
  while (1) {
#line 972
    tmp___1 = list_empty(& dev_priv->mm.inactive_list);
#line 972
    if (tmp___1) {

    } else {
#line 973
      __mptr = dev_priv->mm.inactive_list.next;
#line 973
      obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 976
      obj = obj_priv->obj;
#line 977
      while (1) {
#line 977
        tmp = __builtin_expect(! (! (obj_priv->pin_count != 0)), 0);
#line 977
        if (tmp) {
#line 977
          while (1) {
#line 977
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                                 "i" (977), "i" (sizeof(struct bug_entry )));
#line 977
            while (1) {

            }
#line 977
            break;
          }
        } else {

        }
#line 977
        break;
      }
#line 981
      while (1) {
#line 981
        tmp___0 = __builtin_expect(! (! obj_priv->active), 0);
#line 981
        if (tmp___0) {
#line 981
          while (1) {
#line 981
            __asm__  volatile   ("1:\tud2\n"
                                 ".pushsection __bug_table,\"a\"\n"
                                 "2:\t.quad 1b, %c0\n"
                                 "\t.word %c1, 0\n"
                                 "\t.org 2b+%c2\n"
                                 ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                                 "i" (981), "i" (sizeof(struct bug_entry )));
#line 981
            while (1) {

            }
#line 981
            break;
          }
        } else {

        }
#line 981
        break;
      }
#line 984
      ret = i915_gem_object_unbind(obj);
#line 985
      break;
    }
#line 992
    tmp___3 = list_empty(& dev_priv->mm.request_list);
#line 992
    if (tmp___3) {

    } else {
#line 995
      __mptr___0 = dev_priv->mm.request_list.next;
#line 995
      request = (struct drm_i915_gem_request *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 999
      ret = i915_wait_request(dev, request->seqno);
#line 1000
      if (ret) {
#line 1001
        break;
      } else {

      }
#line 1008
      tmp___2 = list_empty(& dev_priv->mm.inactive_list);
#line 1008
      if (tmp___2) {

      } else {
#line 1009
        goto __Cont;
      }
#line 1010
      break;
    }
#line 1018
    tmp___4 = list_empty(& dev_priv->mm.flushing_list);
#line 1018
    if (tmp___4) {

    } else {
#line 1019
      __mptr___1 = dev_priv->mm.flushing_list.next;
#line 1019
      obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___1 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 1022
      obj = obj_priv->obj;
#line 1024
      i915_gem_flush(dev, obj->write_domain, obj->write_domain);
#line 1027
      i915_add_request(dev, obj->write_domain);
#line 1029
      obj = (void *)0;
#line 1030
      goto __Cont;
    }
#line 1033
    tmp___5 = list_empty(& dev_priv->mm.flushing_list);
#line 1033
    tmp___6 = list_empty(& dev_priv->mm.request_list);
#line 1033
    tmp___7 = list_empty(& dev_priv->mm.inactive_list);
#line 1033
    printk("<3>[drm:%s] *ERROR* inactive empty %d request empty %d flushing empty %d\n",
           "i915_gem_evict_something", tmp___7, tmp___6, tmp___5);
#line 1041
    return (-12);
    __Cont: /* CIL Label */ ;
  }
#line 1043
  return (ret);
}
}
#line 1046 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct page *page ;
  int ret ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 1049
  obj_priv = obj->driver_private;
#line 1056
  if (obj_priv->page_list) {
#line 1057
    return (0);
  } else {

  }
#line 1062
  page_count___0 = obj->size / (1UL << 12);
#line 1063
  while (1) {
#line 1063
    tmp = __builtin_expect(! (! ((unsigned long )obj_priv->page_list != (unsigned long )((void *)0))),
                           0);
#line 1063
    if (tmp) {
#line 1063
      while (1) {
#line 1063
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1063), "i" (sizeof(struct bug_entry )));
#line 1063
        while (1) {

        }
#line 1063
        break;
      }
    } else {

    }
#line 1063
    break;
  }
#line 1064
  tmp___0 = drm_calloc(page_count___0, sizeof(struct page *), 2);
#line 1064
  obj_priv->page_list = tmp___0;
#line 1066
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 1067
    printk("<3>[drm:%s] *ERROR* Faled to allocate page list\n", "i915_gem_object_get_page_list");
#line 1068
    return (-12);
  } else {

  }
#line 1071
  inode = ((obj->filp)->f_path.dentry)->d_inode;
#line 1072
  mapping = inode->i_mapping;
#line 1073
  i = 0;
#line 1073
  while (1) {
#line 1073
    if (i < page_count___0) {

    } else {
#line 1073
      break;
    }
#line 1074
    page = read_mapping_page(mapping, i, (void *)0);
#line 1075
    tmp___2 = IS_ERR(page);
#line 1075
    if (tmp___2) {
#line 1076
      tmp___1 = PTR_ERR(page);
#line 1076
      ret = tmp___1;
#line 1077
      printk("<3>[drm:%s] *ERROR* read_mapping_page failed: %d\n", "i915_gem_object_get_page_list",
             ret);
#line 1078
      i915_gem_object_free_page_list(obj);
#line 1079
      return (ret);
    } else {

    }
#line 1081
    *(obj_priv->page_list + i) = page;
#line 1073
    i = i + 1;
  }
#line 1083
  return (0);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_mm_node *free_space ;
  int page_count___0 ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 1092
  dev = obj->dev;
#line 1093
  dev_priv = dev->dev_private;
#line 1094
  obj_priv = obj->driver_private;
#line 1098
  if (alignment == 0U) {
#line 1099
    alignment = 1UL << 12;
  } else {

  }
#line 1100
  if ((unsigned long )alignment & ((1UL << 12) - 1UL)) {
#line 1101
    printk("<3>[drm:%s] *ERROR* Invalid object alignment requested %u\n", "i915_gem_object_bind_to_gtt",
           alignment);
#line 1102
    return (-22);
  } else {

  }
  search_free: 
#line 1106
  free_space = drm_mm_search_free(& dev_priv->mm.gtt_space, obj->size, alignment,
                                  0);
#line 1108
  if ((unsigned long )free_space != (unsigned long )((void *)0)) {
#line 1109
    obj_priv->gtt_space = drm_mm_get_block(free_space, obj->size, alignment);
#line 1111
    if ((unsigned long )obj_priv->gtt_space != (unsigned long )((void *)0)) {
#line 1112
      (obj_priv->gtt_space)->private = obj;
#line 1113
      obj_priv->gtt_offset = (obj_priv->gtt_space)->start;
    } else {

    }
  } else {

  }
#line 1116
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1123
    tmp = list_empty(& dev_priv->mm.inactive_list);
#line 1123
    if (tmp) {
#line 1123
      tmp___0 = list_empty(& dev_priv->mm.flushing_list);
#line 1123
      if (tmp___0) {
#line 1123
        tmp___1 = list_empty(& dev_priv->mm.active_list);
#line 1123
        if (tmp___1) {
#line 1126
          printk("<3>[drm:%s] *ERROR* GTT full, but LRU list empty\n", "i915_gem_object_bind_to_gtt");
#line 1127
          return (-12);
        } else {

        }
      } else {

      }
    } else {

    }
#line 1130
    ret = i915_gem_evict_something(dev);
#line 1131
    if (ret != 0) {
#line 1132
      printk("<3>[drm:%s] *ERROR* Failed to evict a buffer %d\n", "i915_gem_object_bind_to_gtt",
             ret);
#line 1133
      return (ret);
    } else {

    }
#line 1135
    goto search_free;
  } else {

  }
#line 1142
  ret = i915_gem_object_get_page_list(obj);
#line 1143
  if (ret) {
#line 1144
    drm_mm_put_block(obj_priv->gtt_space);
#line 1145
    obj_priv->gtt_space = (void *)0;
#line 1146
    return (ret);
  } else {

  }
#line 1149
  page_count___0 = obj->size / (1UL << 12);
#line 1153
  obj_priv->agp_mem = drm_agp_bind_pages(dev, obj_priv->page_list, page_count___0,
                                         obj_priv->gtt_offset);
#line 1157
  if ((unsigned long )obj_priv->agp_mem == (unsigned long )((void *)0)) {
#line 1158
    i915_gem_object_free_page_list(obj);
#line 1159
    drm_mm_put_block(obj_priv->gtt_space);
#line 1160
    obj_priv->gtt_space = (void *)0;
#line 1161
    return (-12);
  } else {

  }
#line 1163
  atomic_inc(& dev->gtt_count);
#line 1164
  atomic_add(obj->size, & dev->gtt_memory);
#line 1170
  while (1) {
#line 1170
    tmp___2 = __builtin_expect(! (! (obj->read_domains & (unsigned int )(~ (1 | 64)))),
                               0);
#line 1170
    if (tmp___2) {
#line 1170
      while (1) {
#line 1170
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1170), "i" (sizeof(struct bug_entry )));
#line 1170
        while (1) {

        }
#line 1170
        break;
      }
    } else {

    }
#line 1170
    break;
  }
#line 1171
  while (1) {
#line 1171
    tmp___3 = __builtin_expect(! (! (obj->write_domain & (unsigned int )(~ (1 | 64)))),
                               0);
#line 1171
    if (tmp___3) {
#line 1171
      while (1) {
#line 1171
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1171), "i" (sizeof(struct bug_entry )));
#line 1171
        while (1) {

        }
#line 1171
        break;
      }
    } else {

    }
#line 1171
    break;
  }
#line 1173
  return (0);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_clflush_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1179
  obj_priv = obj->driver_private;
#line 1185
  if ((unsigned long )obj_priv->page_list == (unsigned long )((void *)0)) {
#line 1186
    return;
  } else {

  }
#line 1188
  drm_clflush_pages(obj_priv->page_list, obj->size / (1UL << 12));
#line 1189
  return;
}
}
#line 1302 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_set_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                      uint32_t write_domain ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  uint32_t invalidate_domains ;
  uint32_t flush_domains ;
  int ret ;

  {
#line 1307
  dev = obj->dev;
#line 1308
  obj_priv = obj->driver_private;
#line 1309
  invalidate_domains = 0;
#line 1310
  flush_domains = 0;
#line 1323
  if (write_domain == (uint32_t )0) {
#line 1324
    read_domains = read_domains | obj->read_domains;
  } else {
#line 1326
    obj_priv->dirty = 1;
  }
#line 1334
  if (obj->write_domain && obj->write_domain != read_domains) {
#line 1335
    flush_domains = flush_domains | obj->write_domain;
#line 1336
    invalidate_domains = invalidate_domains | (read_domains & ~ obj->write_domain);
  } else {

  }
#line 1342
  invalidate_domains = invalidate_domains | (read_domains & ~ obj->read_domains);
#line 1343
  if ((flush_domains | invalidate_domains) & 1U) {
#line 1353
    if (invalidate_domains & 1U && flush_domains & (unsigned int )(~ (1 | 64))) {
#line 1356
      ret = i915_gem_object_wait_rendering(obj);
#line 1357
      if (ret) {
#line 1358
        return (ret);
      } else {

      }
    } else {

    }
#line 1360
    i915_gem_clflush_object(obj);
  } else {

  }
#line 1363
  if ((write_domain | flush_domains) != 0U) {
#line 1364
    obj->write_domain = write_domain;
  } else {

  }
#line 1369
  if ((unsigned long )obj_priv->page_cpu_valid != (unsigned long )((void *)0) && (write_domain != (uint32_t )0 || read_domains & 1U)) {
#line 1372
    drm_free(obj_priv->page_cpu_valid, obj->size / (1UL << 12), 2);
#line 1374
    obj_priv->page_cpu_valid = (void *)0;
  } else {

  }
#line 1376
  obj->read_domains = read_domains;
#line 1378
  dev->invalidate_domains = dev->invalidate_domains | invalidate_domains;
#line 1379
  dev->flush_domains = dev->flush_domains | flush_domains;
#line 1386
  return (0);
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_set_domain_range(struct drm_gem_object *obj , uint64_t offset ,
                                            uint64_t size , uint32_t read_domains ,
                                            uint32_t write_domain ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  int i ;
  int tmp ;
  void *tmp___0 ;

  {
#line 1402
  obj_priv = obj->driver_private;
#line 1405
  if (obj->read_domains & 1U) {
#line 1406
    return (0);
  } else {

  }
#line 1408
  if (read_domains != (uint32_t )1 || write_domain != (uint32_t )0) {
#line 1410
    tmp = i915_gem_object_set_domain(obj, read_domains, write_domain);
#line 1410
    return (tmp);
  } else {

  }
#line 1414
  if (obj->write_domain & (unsigned int )(~ (1 | 64))) {
#line 1415
    ret = i915_gem_object_wait_rendering(obj);
#line 1416
    if (ret) {
#line 1417
      return (ret);
    } else {

    }
  } else {

  }
#line 1420
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((void *)0)) {
#line 1421
    tmp___0 = drm_calloc(1, obj->size / (1UL << 12), 2);
#line 1421
    obj_priv->page_cpu_valid = tmp___0;
  } else {

  }
#line 1428
  i = offset / (uint64_t )(1UL << 12);
#line 1428
  while (1) {
#line 1428
    if ((uint64_t )i <= ((offset + size) - (uint64_t )1) / (uint64_t )(1UL << 12)) {

    } else {
#line 1428
      break;
    }
#line 1429
    if (*(obj_priv->page_cpu_valid + i)) {
#line 1430
      goto __Cont;
    } else {

    }
#line 1432
    drm_clflush_pages(obj_priv->page_list + i, 1);
#line 1434
    *(obj_priv->page_cpu_valid + i) = 1;
    __Cont: /* CIL Label */ 
#line 1428
    i = i + 1;
  }
#line 1437
  return (0);
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static uint32_t i915_gem_dev_set_domain(struct drm_device *dev ) 
{ 
  uint32_t flush_domains ;

  {
#line 1449
  flush_domains = dev->flush_domains;
#line 1455
  if (dev->invalidate_domains | dev->flush_domains) {
#line 1462
    i915_gem_flush(dev, dev->invalidate_domains, dev->flush_domains);
#line 1465
    dev->invalidate_domains = 0;
#line 1466
    dev->flush_domains = 0;
  } else {

  }
#line 1469
  return (flush_domains);
}
}
#line 1475 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_object_pin_and_relocate(struct drm_gem_object *obj , struct drm_file *file_priv ,
                                            struct drm_i915_gem_exec_object *entry ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_relocation_entry reloc ;
  struct drm_i915_gem_relocation_entry *relocs ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  uint32_t last_reloc_offset ;
  void *reloc_page ;
  struct drm_gem_object *target_obj ;
  struct drm_i915_gem_object *target_obj_priv ;
  uint32_t reloc_val ;
  uint32_t reloc_offset ;
  uint32_t *reloc_entry ;
  int ret___0 ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 1480
  dev = obj->dev;
#line 1483
  obj_priv = obj->driver_private;
#line 1485
  last_reloc_offset = -1;
#line 1486
  reloc_page = (void *)0;
#line 1489
  ret = i915_gem_object_pin(obj, (uint32_t )entry->alignment);
#line 1490
  if (ret) {
#line 1491
    return (ret);
  } else {

  }
#line 1493
  entry->offset = obj_priv->gtt_offset;
#line 1495
  relocs = (struct drm_i915_gem_relocation_entry *)((uintptr_t )entry->relocs_ptr);
#line 1500
  i = 0;
#line 1500
  while (1) {
#line 1500
    if ((uint32_t )i < entry->relocation_count) {

    } else {
#line 1500
      break;
    }
#line 1506
    tmp = copy_from_user(& reloc, relocs + i, sizeof(reloc));
#line 1506
    ret___0 = tmp;
#line 1507
    if (ret___0 != 0) {
#line 1508
      i915_gem_object_unpin(obj);
#line 1509
      return (ret___0);
    } else {

    }
#line 1512
    target_obj = drm_gem_object_lookup(obj->dev, file_priv, reloc.target_handle);
#line 1514
    if ((unsigned long )target_obj == (unsigned long )((void *)0)) {
#line 1515
      i915_gem_object_unpin(obj);
#line 1516
      return (-9);
    } else {

    }
#line 1518
    target_obj_priv = target_obj->driver_private;
#line 1523
    if ((unsigned long )target_obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1524
      printk("<3>[drm:%s] *ERROR* No GTT space found for object %d\n", "i915_gem_object_pin_and_relocate",
             reloc.target_handle);
#line 1526
      drm_gem_object_unreference(target_obj);
#line 1527
      i915_gem_object_unpin(obj);
#line 1528
      return (-22);
    } else {

    }
#line 1531
    if (reloc.offset > (uint64_t )(obj->size - (size_t )4)) {
#line 1532
      printk("<3>[drm:%s] *ERROR* Relocation beyond object bounds: obj %p target %d offset %d size %d.\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
             (int )obj->size);
#line 1536
      drm_gem_object_unreference(target_obj);
#line 1537
      i915_gem_object_unpin(obj);
#line 1538
      return (-22);
    } else {

    }
#line 1540
    if (reloc.offset & 3ULL) {
#line 1541
      printk("<3>[drm:%s] *ERROR* Relocation not 4-byte aligned: obj %p target %d offset %d.\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset);
#line 1545
      drm_gem_object_unreference(target_obj);
#line 1546
      i915_gem_object_unpin(obj);
#line 1547
      return (-22);
    } else {

    }
#line 1550
    if ((reloc.write_domain && target_obj->pending_write_domain) && reloc.write_domain != target_obj->pending_write_domain) {
#line 1552
      printk("<3>[drm:%s] *ERROR* Write domain conflict: obj %p target %d offset %d new %08x old %08x\n",
             "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
             reloc.write_domain, target_obj->pending_write_domain);
#line 1559
      drm_gem_object_unreference(target_obj);
#line 1560
      i915_gem_object_unpin(obj);
#line 1561
      return (-22);
    } else {

    }
#line 1579
    target_obj->pending_read_domains = target_obj->pending_read_domains | reloc.read_domains;
#line 1580
    target_obj->pending_write_domain = target_obj->pending_write_domain | reloc.write_domain;
#line 1585
    if ((uint64_t )target_obj_priv->gtt_offset == reloc.presumed_offset) {
#line 1586
      drm_gem_object_unreference(target_obj);
#line 1587
      goto __Cont;
    } else {

    }
#line 1594
    i915_gem_object_wait_rendering(obj);
#line 1599
    if (obj->write_domain & 1U) {
#line 1600
      i915_gem_clflush_object(obj);
#line 1601
      drm_agp_chipset_flush(dev);
#line 1602
      obj->write_domain = 0;
    } else {

    }
#line 1608
    reloc_offset = (uint64_t )obj_priv->gtt_offset + reloc.offset;
#line 1609
    if ((unsigned long )reloc_page == (unsigned long )((void *)0) || ((unsigned long )last_reloc_offset & ~ ((1UL << 12) - 1UL)) != ((unsigned long )reloc_offset & ~ ((1UL << 12) - 1UL))) {
#line 1612
      if ((unsigned long )reloc_page != (unsigned long )((void *)0)) {
#line 1613
        iounmap(reloc_page);
      } else {

      }
#line 1615
      reloc_page = ioremap((dev->agp)->base + ((unsigned long )reloc_offset & ~ ((1UL << 12) - 1UL)),
                           1UL << 12);
#line 1618
      last_reloc_offset = reloc_offset;
#line 1619
      if ((unsigned long )reloc_page == (unsigned long )((void *)0)) {
#line 1620
        drm_gem_object_unreference(target_obj);
#line 1621
        i915_gem_object_unpin(obj);
#line 1622
        return (-12);
      } else {

      }
    } else {

    }
#line 1626
    reloc_entry = (uint32_t *)((char *)reloc_page + ((unsigned long )reloc_offset & ((1UL << 12) - 1UL)));
#line 1628
    reloc_val = target_obj_priv->gtt_offset + reloc.delta;
#line 1635
    writel(reloc_val, reloc_entry);
#line 1640
    reloc.presumed_offset = target_obj_priv->gtt_offset;
#line 1641
    tmp___0 = copy_to_user(relocs + i, & reloc, sizeof(reloc));
#line 1641
    ret___0 = tmp___0;
#line 1642
    if (ret___0 != 0) {
#line 1643
      drm_gem_object_unreference(target_obj);
#line 1644
      i915_gem_object_unpin(obj);
#line 1645
      return (ret___0);
    } else {

    }
#line 1648
    drm_gem_object_unreference(target_obj);
    __Cont: /* CIL Label */ 
#line 1500
    i = i + 1;
  }
#line 1651
  if ((unsigned long )reloc_page != (unsigned long )((void *)0)) {
#line 1652
    iounmap(reloc_page);
  } else {

  }
#line 1658
  return (0);
}
}
#line 1663 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_dispatch_gem_execbuffer(struct drm_device *dev , struct drm_i915_gem_execbuffer *exec ,
                                        uint64_t exec_offset ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  uint32_t exec_start ;
  uint32_t exec_len ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 1668
  dev_priv = dev->dev_private;
#line 1669
  boxes = (struct drm_clip_rect *)((uintptr_t )exec->cliprects_ptr);
#line 1671
  nbox = exec->num_cliprects;
#line 1672
  i = 0;
#line 1676
  exec_start = (uint32_t )exec_offset + exec->batch_start_offset;
#line 1677
  exec_len = exec->batch_len;
#line 1679
  if ((exec_start | exec_len) & 7U) {
#line 1680
    printk("<3>[drm:%s] *ERROR* alignment\n", "i915_dispatch_gem_execbuffer");
#line 1681
    return (-22);
  } else {

  }
#line 1684
  if (! exec_start) {
#line 1685
    return (-22);
  } else {

  }
#line 1687
  count = nbox ? nbox : 1;
#line 1689
  i = 0;
#line 1689
  while (1) {
#line 1689
    if (i < count) {

    } else {
#line 1689
      break;
    }
#line 1690
    if (i < nbox) {
#line 1691
      tmp = i915_emit_box(dev, boxes, i, exec->DR1, exec->DR4);
#line 1691
      ret = tmp;
#line 1693
      if (ret) {
#line 1694
        return (ret);
      } else {

      }
    } else {

    }
#line 1697
    if (dev->pci_device == 13687 || dev->pci_device == 9570) {
#line 1698
      while (1) {
#line 1698
        if (dev_priv->ring.space < 4 * 4) {
#line 1698
          i915_wait_ring(dev, 4 * 4, "i915_dispatch_gem_execbuffer");
        } else {

        }
#line 1698
        outcount = 0;
#line 1698
        outring = dev_priv->ring.tail;
#line 1698
        ringmask = dev_priv->ring.tail_mask;
#line 1698
        virt = dev_priv->ring.virtual_start;
#line 1698
        break;
      }
#line 1699
      while (1) {
#line 1699
        *((unsigned int volatile   *)(virt + outring)) = (48 << 23) | 1;
#line 1699
        outcount = outcount + 1U;
#line 1699
        outring = outring + 4U;
#line 1699
        outring = outring & ringmask;
#line 1699
        break;
      }
#line 1700
      while (1) {
#line 1700
        *((unsigned int volatile   *)(virt + outring)) = exec_start | 1U;
#line 1700
        outcount = outcount + 1U;
#line 1700
        outring = outring + 4U;
#line 1700
        outring = outring & ringmask;
#line 1700
        break;
      }
#line 1701
      while (1) {
#line 1701
        *((unsigned int volatile   *)(virt + outring)) = (exec_start + exec_len) - (uint32_t )4;
#line 1701
        outcount = outcount + 1U;
#line 1701
        outring = outring + 4U;
#line 1701
        outring = outring & ringmask;
#line 1701
        break;
      }
#line 1702
      while (1) {
#line 1702
        *((unsigned int volatile   *)(virt + outring)) = 0;
#line 1702
        outcount = outcount + 1U;
#line 1702
        outring = outring + 4U;
#line 1702
        outring = outring & ringmask;
#line 1702
        break;
      }
#line 1703
      while (1) {
#line 1703
        dev_priv->ring.tail = outring;
#line 1703
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 1703
        writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 1703
        break;
      }
    } else {
#line 1705
      while (1) {
#line 1705
        if (dev_priv->ring.space < 2 * 4) {
#line 1705
          i915_wait_ring(dev, 2 * 4, "i915_dispatch_gem_execbuffer");
        } else {

        }
#line 1705
        outcount = 0;
#line 1705
        outring = dev_priv->ring.tail;
#line 1705
        ringmask = dev_priv->ring.tail_mask;
#line 1705
        virt = dev_priv->ring.virtual_start;
#line 1705
        break;
      }
#line 1706
      if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1707
        while (1) {
#line 1707
          *((unsigned int volatile   *)(virt + outring)) = (((49 << 23) | 0) | (2 << 6)) | (1 << 8);
#line 1707
          outcount = outcount + 1U;
#line 1707
          outring = outring + 4U;
#line 1707
          outring = outring & ringmask;
#line 1707
          break;
        }
#line 1710
        while (1) {
#line 1710
          *((unsigned int volatile   *)(virt + outring)) = exec_start;
#line 1710
          outcount = outcount + 1U;
#line 1710
          outring = outring + 4U;
#line 1710
          outring = outring & ringmask;
#line 1710
          break;
        }
      } else {
#line 1712
        while (1) {
#line 1712
          *((unsigned int volatile   *)(virt + outring)) = ((49 << 23) | 0) | (2 << 6);
#line 1712
          outcount = outcount + 1U;
#line 1712
          outring = outring + 4U;
#line 1712
          outring = outring & ringmask;
#line 1712
          break;
        }
#line 1714
        while (1) {
#line 1714
          *((unsigned int volatile   *)(virt + outring)) = exec_start | 1U;
#line 1714
          outcount = outcount + 1U;
#line 1714
          outring = outring + 4U;
#line 1714
          outring = outring & ringmask;
#line 1714
          break;
        }
      }
#line 1716
      while (1) {
#line 1716
        dev_priv->ring.tail = outring;
#line 1716
        dev_priv->ring.space = (unsigned int )dev_priv->ring.space - outcount * 4U;
#line 1716
        writel(outring, (dev_priv->mmio_map)->handle + 8240);
#line 1716
        break;
      }
    }
#line 1689
    i = i + 1;
  }
#line 1721
  return (0);
}
}
#line 1730 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_ring_throttle(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  int ret ;
  uint32_t seqno ;

  {
#line 1733
  i915_file_priv = file_priv->driver_priv;
#line 1734
  ret = 0;
#line 1737
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 1738
  seqno = i915_file_priv->mm.last_gem_throttle_seqno;
#line 1739
  i915_file_priv->mm.last_gem_throttle_seqno = i915_file_priv->mm.last_gem_seqno;
#line 1741
  if (seqno) {
#line 1742
    ret = i915_wait_request(dev, seqno);
  } else {

  }
#line 1743
  mutex_unlock(& dev->struct_mutex);
#line 1744
  return (ret);
}
}
#line 1747 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_file_private *i915_file_priv ;
  struct drm_i915_gem_execbuffer *args ;
  struct drm_i915_gem_exec_object *exec_list ;
  struct drm_gem_object **object_list ;
  struct drm_gem_object *batch_obj ;
  int ret ;
  int i ;
  int pinned ;
  uint64_t exec_offset ;
  uint32_t seqno ;
  uint32_t flush_domains ;
  void *tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp___2 ;
  struct drm_gem_object *obj___0 ;
  struct drm_i915_gem_object *obj_priv___0 ;
  unsigned long tmp___3 ;

  {
#line 1751
  dev_priv = dev->dev_private;
#line 1752
  i915_file_priv = file_priv->driver_priv;
#line 1753
  args = data;
#line 1754
  exec_list = (void *)0;
#line 1755
  object_list = (void *)0;
#line 1757
  pinned = 0;
#line 1767
  tmp = drm_calloc(sizeof(*exec_list), args->buffer_count, 2);
#line 1767
  exec_list = tmp;
#line 1769
  tmp___0 = drm_calloc(sizeof(*object_list), args->buffer_count, 2);
#line 1769
  object_list = tmp___0;
#line 1771
  if ((unsigned long )exec_list == (unsigned long )((void *)0) || (unsigned long )object_list == (unsigned long )((void *)0)) {
#line 1772
    printk("<3>[drm:%s] *ERROR* Failed to allocate exec or object list for %d buffers\n",
           "i915_gem_execbuffer", args->buffer_count);
#line 1775
    ret = -12;
#line 1776
    goto pre_mutex_err;
  } else {

  }
#line 1778
  tmp___1 = copy_from_user(exec_list, (struct drm_i915_relocation_entry *)((uintptr_t )args->buffers_ptr),
                           sizeof(*exec_list) * (unsigned long )args->buffer_count);
#line 1778
  ret = tmp___1;
#line 1782
  if (ret != 0) {
#line 1783
    printk("<3>[drm:%s] *ERROR* copy %d exec entries failed %d\n", "i915_gem_execbuffer",
           args->buffer_count, ret);
#line 1785
    goto pre_mutex_err;
  } else {

  }
#line 1788
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 1792
  if (dev_priv->mm.wedged) {
#line 1793
    printk("<3>[drm:%s] *ERROR* Execbuf while wedged\n", "i915_gem_execbuffer");
#line 1794
    mutex_unlock(& dev->struct_mutex);
#line 1795
    return (-5);
  } else {

  }
#line 1798
  if (dev_priv->mm.suspended) {
#line 1799
    printk("<3>[drm:%s] *ERROR* Execbuf while VT-switched.\n", "i915_gem_execbuffer");
#line 1800
    mutex_unlock(& dev->struct_mutex);
#line 1801
    return (-16);
  } else {

  }
#line 1808
  dev->invalidate_domains = 0;
#line 1809
  dev->flush_domains = 0;
#line 1812
  i = 0;
#line 1812
  while (1) {
#line 1812
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 1812
      break;
    }
#line 1813
    *(object_list + i) = drm_gem_object_lookup(dev, file_priv, (exec_list + i)->handle);
#line 1815
    if ((unsigned long )*(object_list + i) == (unsigned long )((void *)0)) {
#line 1816
      printk("<3>[drm:%s] *ERROR* Invalid object handle %d at index %d\n", "i915_gem_execbuffer",
             (exec_list + i)->handle, i);
#line 1818
      ret = -9;
#line 1819
      goto err;
    } else {

    }
#line 1822
    (*(object_list + i))->pending_read_domains = 0;
#line 1823
    (*(object_list + i))->pending_write_domain = 0;
#line 1824
    ret = i915_gem_object_pin_and_relocate(*(object_list + i), file_priv, exec_list + i);
#line 1827
    if (ret) {
#line 1828
      printk("<3>[drm:%s] *ERROR* object bind and relocate failed %d\n", "i915_gem_execbuffer",
             ret);
#line 1829
      goto err;
    } else {

    }
#line 1831
    pinned = i + 1;
#line 1812
    i = i + 1;
  }
#line 1835
  batch_obj = *(object_list + (args->buffer_count - (uint32_t )1));
#line 1836
  batch_obj->pending_read_domains = 8;
#line 1837
  batch_obj->pending_write_domain = 0;
#line 1841
  i = 0;
#line 1841
  while (1) {
#line 1841
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 1841
      break;
    }
#line 1842
    obj = *(object_list + i);
#line 1843
    obj_priv = obj->driver_private;
#line 1845
    if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1851
      ret = -12;
#line 1852
      goto err;
    } else {

    }
#line 1856
    ret = i915_gem_object_set_domain(obj, obj->pending_read_domains, obj->pending_write_domain);
#line 1859
    if (ret) {
#line 1860
      goto err;
    } else {

    }
#line 1841
    i = i + 1;
  }
#line 1866
  flush_domains = i915_gem_dev_set_domain(dev);
#line 1877
  exec_offset = (exec_list + (args->buffer_count - (uint32_t )1))->offset;
#line 1886
  i915_add_request(dev, flush_domains);
#line 1889
  ret = i915_dispatch_gem_execbuffer(dev, args, exec_offset);
#line 1890
  if (ret) {
#line 1891
    printk("<3>[drm:%s] *ERROR* dispatch failed %d\n", "i915_gem_execbuffer", ret);
#line 1892
    goto err;
  } else {

  }
#line 1899
  flush_domains = i915_retire_commands(dev);
#line 1910
  seqno = i915_add_request(dev, flush_domains);
#line 1911
  while (1) {
#line 1911
    tmp___2 = __builtin_expect(! (! (seqno == (uint32_t )0)), 0);
#line 1911
    if (tmp___2) {
#line 1911
      while (1) {
#line 1911
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (1911), "i" (sizeof(struct bug_entry )));
#line 1911
        while (1) {

        }
#line 1911
        break;
      }
    } else {

    }
#line 1911
    break;
  }
#line 1912
  i915_file_priv->mm.last_gem_seqno = seqno;
#line 1913
  i = 0;
#line 1913
  while (1) {
#line 1913
    if ((uint32_t )i < args->buffer_count) {

    } else {
#line 1913
      break;
    }
#line 1914
    obj___0 = *(object_list + i);
#line 1915
    obj_priv___0 = obj___0->driver_private;
#line 1917
    i915_gem_object_move_to_active(obj___0);
#line 1918
    obj_priv___0->last_rendering_seqno = seqno;
#line 1913
    i = i + 1;
  }
#line 1930
  tmp___3 = copy_to_user((struct drm_i915_relocation_entry *)((uintptr_t )args->buffers_ptr),
                         exec_list, sizeof(*exec_list) * (unsigned long )args->buffer_count);
#line 1930
  ret = tmp___3;
#line 1934
  if (ret) {
#line 1935
    printk("<3>[drm:%s] *ERROR* failed to copy %d exec entries back to user (%d)\n",
           "i915_gem_execbuffer", args->buffer_count, ret);
  } else {

  }
  err: 
#line 1939
  if ((unsigned long )object_list != (unsigned long )((void *)0)) {
#line 1940
    i = 0;
#line 1940
    while (1) {
#line 1940
      if (i < pinned) {

      } else {
#line 1940
        break;
      }
#line 1941
      i915_gem_object_unpin(*(object_list + i));
#line 1940
      i = i + 1;
    }
#line 1943
    i = 0;
#line 1943
    while (1) {
#line 1943
      if ((uint32_t )i < args->buffer_count) {

      } else {
#line 1943
        break;
      }
#line 1944
      drm_gem_object_unreference(*(object_list + i));
#line 1943
      i = i + 1;
    }
  } else {

  }
#line 1946
  mutex_unlock(& dev->struct_mutex);
  pre_mutex_err: 
#line 1949
  drm_free(object_list, sizeof(*object_list) * (unsigned long )args->buffer_count,
           2);
#line 1951
  drm_free(exec_list, sizeof(*exec_list) * (unsigned long )args->buffer_count, 2);
#line 1954
  return (ret);
}
}
#line 1957 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  int tmp ;

  {
#line 1960
  dev = obj->dev;
#line 1961
  obj_priv = obj->driver_private;
#line 1965
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0)) {
#line 1966
    ret = i915_gem_object_bind_to_gtt(obj, alignment);
#line 1967
    if (ret != 0) {
#line 1968
      printk("<3>[drm:%s] *ERROR* Failure to bind: %d", "i915_gem_object_pin", ret);
#line 1969
      return (ret);
    } else {

    }
  } else {

  }
#line 1972
  obj_priv->pin_count = obj_priv->pin_count + 1;
#line 1977
  if (obj_priv->pin_count == 1) {
#line 1978
    atomic_inc(& dev->pin_count);
#line 1979
    atomic_add(obj->size, & dev->pin_memory);
#line 1980
    if (! obj_priv->active && (obj->write_domain & (unsigned int )(~ (1 | 64))) == 0U) {
#line 1980
      tmp = list_empty(& obj_priv->list);
#line 1980
      if (tmp) {

      } else {
#line 1984
        list_del_init(& obj_priv->list);
      }
    } else {

    }
  } else {

  }
#line 1988
  return (0);
}
}
#line 1991 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_object_unpin(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 1994
  dev = obj->dev;
#line 1995
  dev_priv = dev->dev_private;
#line 1996
  obj_priv = obj->driver_private;
#line 1999
  obj_priv->pin_count = obj_priv->pin_count - 1;
#line 2000
  while (1) {
#line 2000
    tmp = __builtin_expect(! (! (obj_priv->pin_count < 0)), 0);
#line 2000
    if (tmp) {
#line 2000
      while (1) {
#line 2000
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2000), "i" (sizeof(struct bug_entry )));
#line 2000
        while (1) {

        }
#line 2000
        break;
      }
    } else {

    }
#line 2000
    break;
  }
#line 2001
  while (1) {
#line 2001
    tmp___0 = __builtin_expect(! (! ((unsigned long )obj_priv->gtt_space == (unsigned long )((void *)0))),
                               0);
#line 2001
    if (tmp___0) {
#line 2001
      while (1) {
#line 2001
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2001), "i" (sizeof(struct bug_entry )));
#line 2001
        while (1) {

        }
#line 2001
        break;
      }
    } else {

    }
#line 2001
    break;
  }
#line 2007
  if (obj_priv->pin_count == 0) {
#line 2008
    if (! obj_priv->active && (obj->write_domain & (unsigned int )(~ (1 | 64))) == 0U) {
#line 2011
      list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
    } else {

    }
#line 2013
    atomic_dec(& dev->pin_count);
#line 2014
    atomic_sub(obj->size, & dev->pin_memory);
  } else {

  }
#line 2017
  return;
}
}
#line 2019 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2023
  args = data;
#line 2028
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2030
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2031
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2032
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2034
    mutex_unlock(& dev->struct_mutex);
#line 2035
    return (-9);
  } else {

  }
#line 2037
  obj_priv = obj->driver_private;
#line 2039
  ret = i915_gem_object_pin(obj, args->alignment);
#line 2040
  if (ret != 0) {
#line 2041
    drm_gem_object_unreference(obj);
#line 2042
    mutex_unlock(& dev->struct_mutex);
#line 2043
    return (ret);
  } else {

  }
#line 2049
  if (obj->write_domain & 1U) {
#line 2050
    i915_gem_clflush_object(obj);
#line 2051
    drm_agp_chipset_flush(dev);
#line 2052
    obj->write_domain = 0;
  } else {

  }
#line 2054
  args->offset = obj_priv->gtt_offset;
#line 2055
  drm_gem_object_unreference(obj);
#line 2056
  mutex_unlock(& dev->struct_mutex);
#line 2058
  return (0);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;

  {
#line 2065
  args = data;
#line 2068
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2070
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2071
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2072
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_unpin_ioctl(): %d\n", "i915_gem_unpin_ioctl",
           args->handle);
#line 2074
    mutex_unlock(& dev->struct_mutex);
#line 2075
    return (-9);
  } else {

  }
#line 2078
  i915_gem_object_unpin(obj);
#line 2080
  drm_gem_object_unreference(obj);
#line 2081
  mutex_unlock(& dev->struct_mutex);
#line 2082
  return (0);
}
}
#line 2085 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_busy *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2089
  args = data;
#line 2093
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2094
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 2095
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2096
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_busy_ioctl(): %d\n", "i915_gem_busy_ioctl",
           args->handle);
#line 2098
    mutex_unlock(& dev->struct_mutex);
#line 2099
    return (-9);
  } else {

  }
#line 2102
  obj_priv = obj->driver_private;
#line 2103
  args->busy = obj_priv->active;
#line 2105
  drm_gem_object_unreference(obj);
#line 2106
  mutex_unlock(& dev->struct_mutex);
#line 2107
  return (0);
}
}
#line 2110 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 2114
  tmp = i915_gem_ring_throttle(dev, file_priv);
#line 2114
  return (tmp);
}
}
#line 2117 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_init_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  void *tmp ;

  {
#line 2121
  tmp = drm_calloc(1, sizeof(*obj_priv), 2);
#line 2121
  obj_priv = tmp;
#line 2122
  if ((unsigned long )obj_priv == (unsigned long )((void *)0)) {
#line 2123
    return (-12);
  } else {

  }
#line 2131
  obj->write_domain = 1;
#line 2132
  obj->read_domains = 1;
#line 2134
  obj->driver_private = obj_priv;
#line 2135
  obj_priv->obj = obj;
#line 2136
  INIT_LIST_HEAD(& obj_priv->list);
#line 2137
  return (0);
}
}
#line 2140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_free_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2142
  obj_priv = obj->driver_private;
#line 2144
  while (1) {
#line 2144
    if (obj_priv->pin_count > 0) {

    } else {
#line 2144
      break;
    }
#line 2145
    i915_gem_object_unpin(obj);
  }
#line 2147
  i915_gem_object_unbind(obj);
#line 2149
  drm_free(obj_priv->page_cpu_valid, 1, 2);
#line 2150
  drm_free(obj->driver_private, 1, 2);
#line 2151
  return;
}
}
#line 2153 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_set_domain(struct drm_gem_object *obj , struct drm_file *file_priv ,
                               uint32_t read_domains , uint32_t write_domain ) 
{ 
  struct drm_device *dev ;
  int ret ;
  uint32_t flush_domains ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 2159
  dev = obj->dev;
#line 2163
  while (1) {
#line 2163
    tmp = mutex_is_locked(& dev->struct_mutex);
#line 2163
    if (tmp) {
#line 2163
      tmp___0 = 0;
    } else {
#line 2163
      tmp___0 = 1;
    }
#line 2163
    tmp___1 = __builtin_expect(tmp___0, 0);
#line 2163
    if (tmp___1) {
#line 2163
      while (1) {
#line 2163
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2163), "i" (sizeof(struct bug_entry )));
#line 2163
        while (1) {

        }
#line 2163
        break;
      }
    } else {

    }
#line 2163
    break;
  }
#line 2165
  ret = i915_gem_object_set_domain(obj, read_domains, write_domain);
#line 2166
  if (ret) {
#line 2167
    return (ret);
  } else {

  }
#line 2168
  flush_domains = i915_gem_dev_set_domain(obj->dev);
#line 2170
  if (flush_domains & (unsigned int )(~ (1 | 64))) {
#line 2171
    i915_add_request(dev, flush_domains);
  } else {

  }
#line 2173
  return (0);
}
}
#line 2177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_evict_from_list(struct drm_device *dev , struct list_head *head ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 2184
  while (1) {
#line 2184
    tmp = list_empty(head);
#line 2184
    if (tmp) {
#line 2184
      break;
    } else {

    }
#line 2185
    __mptr = head->next;
#line 2185
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 2188
    obj = obj_priv->obj;
#line 2190
    if (obj_priv->pin_count != 0) {
#line 2191
      printk("<3>[drm:%s] *ERROR* Pinned object in unbind list\n", "i915_gem_evict_from_list");
#line 2192
      mutex_unlock(& dev->struct_mutex);
#line 2193
      return (-22);
    } else {

    }
#line 2196
    ret = i915_gem_object_unbind(obj);
#line 2197
    if (ret != 0) {
#line 2198
      printk("<3>[drm:%s] *ERROR* Error unbinding object in LeaveVT: %d\n", "i915_gem_evict_from_list",
             ret);
#line 2200
      mutex_unlock(& dev->struct_mutex);
#line 2201
      return (ret);
    } else {

    }
  }
#line 2206
  return (0);
}
}
#line 2209 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_idle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  uint32_t cur_seqno ;
  uint32_t last_seqno ;
  int stuck ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  long tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  long tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  long tmp___21 ;

  {
#line 2212
  dev_priv = dev->dev_private;
#line 2216
  if (dev_priv->mm.suspended) {
#line 2217
    return (0);
  } else {

  }
#line 2222
  dev_priv->mm.suspended = 1;
#line 2224
  i915_kernel_lost_context(dev);
#line 2228
  i915_gem_flush(dev, ~ (1 | 64), ~ (1 | 64));
#line 2230
  seqno = i915_add_request(dev, ~ (1 | 64));
#line 2233
  if (seqno == (uint32_t )0) {
#line 2234
    mutex_unlock(& dev->struct_mutex);
#line 2235
    return (-12);
  } else {

  }
#line 2238
  dev_priv->mm.waiting_gem_seqno = seqno;
#line 2239
  last_seqno = 0;
#line 2240
  stuck = 0;
#line 2241
  while (1) {
#line 2242
    cur_seqno = i915_get_gem_seqno(dev);
#line 2243
    tmp = i915_seqno_passed(cur_seqno, seqno);
#line 2243
    if (tmp) {
#line 2244
      break;
    } else {

    }
#line 2245
    if (last_seqno == cur_seqno) {
#line 2246
      tmp___0 = stuck;
#line 2246
      stuck = stuck + 1;
#line 2246
      if (tmp___0 > 100) {
#line 2247
        printk("<3>[drm:%s] *ERROR* hardware wedged\n", "i915_gem_idle");
#line 2248
        dev_priv->mm.wedged = 1;
#line 2249
        __wake_up(& dev_priv->irq_queue, 1, 1, (void *)0);
#line 2250
        break;
      } else {

      }
    } else {

    }
#line 2253
    msleep(10);
#line 2254
    last_seqno = cur_seqno;
  }
#line 2256
  dev_priv->mm.waiting_gem_seqno = 0;
#line 2258
  i915_gem_retire_requests(dev);
#line 2263
  while (1) {
#line 2263
    tmp___1 = list_empty(& dev_priv->mm.active_list);
#line 2263
    if (tmp___1) {
#line 2263
      tmp___2 = 0;
    } else {
#line 2263
      tmp___2 = 1;
    }
#line 2263
    tmp___3 = __builtin_expect(tmp___2, 0);
#line 2263
    if (tmp___3) {
#line 2263
      while (1) {
#line 2263
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2263), "i" (sizeof(struct bug_entry )));
#line 2263
        while (1) {

        }
#line 2263
        break;
      }
    } else {

    }
#line 2263
    break;
  }
#line 2264
  while (1) {
#line 2264
    tmp___4 = list_empty(& dev_priv->mm.flushing_list);
#line 2264
    if (tmp___4) {
#line 2264
      tmp___5 = 0;
    } else {
#line 2264
      tmp___5 = 1;
    }
#line 2264
    tmp___6 = __builtin_expect(tmp___5, 0);
#line 2264
    if (tmp___6) {
#line 2264
      while (1) {
#line 2264
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2264), "i" (sizeof(struct bug_entry )));
#line 2264
        while (1) {

        }
#line 2264
        break;
      }
    } else {

    }
#line 2264
    break;
  }
#line 2269
  while (1) {
#line 2269
    tmp___7 = list_empty(& dev_priv->mm.request_list);
#line 2269
    if (tmp___7) {
#line 2269
      tmp___8 = 0;
    } else {
#line 2269
      tmp___8 = 1;
    }
#line 2269
    tmp___9 = __builtin_expect(tmp___8, 0);
#line 2269
    if (tmp___9) {
#line 2269
      while (1) {
#line 2269
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2269), "i" (sizeof(struct bug_entry )));
#line 2269
        while (1) {

        }
#line 2269
        break;
      }
    } else {

    }
#line 2269
    break;
  }
#line 2272
  ret = i915_gem_evict_from_list(dev, & dev_priv->mm.inactive_list);
#line 2273
  if (ret) {
#line 2274
    return (ret);
  } else {

  }
#line 2276
  while (1) {
#line 2276
    tmp___10 = list_empty(& dev_priv->mm.active_list);
#line 2276
    if (tmp___10) {
#line 2276
      tmp___11 = 0;
    } else {
#line 2276
      tmp___11 = 1;
    }
#line 2276
    tmp___12 = __builtin_expect(tmp___11, 0);
#line 2276
    if (tmp___12) {
#line 2276
      while (1) {
#line 2276
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2276), "i" (sizeof(struct bug_entry )));
#line 2276
        while (1) {

        }
#line 2276
        break;
      }
    } else {

    }
#line 2276
    break;
  }
#line 2277
  while (1) {
#line 2277
    tmp___13 = list_empty(& dev_priv->mm.flushing_list);
#line 2277
    if (tmp___13) {
#line 2277
      tmp___14 = 0;
    } else {
#line 2277
      tmp___14 = 1;
    }
#line 2277
    tmp___15 = __builtin_expect(tmp___14, 0);
#line 2277
    if (tmp___15) {
#line 2277
      while (1) {
#line 2277
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2277), "i" (sizeof(struct bug_entry )));
#line 2277
        while (1) {

        }
#line 2277
        break;
      }
    } else {

    }
#line 2277
    break;
  }
#line 2278
  while (1) {
#line 2278
    tmp___16 = list_empty(& dev_priv->mm.inactive_list);
#line 2278
    if (tmp___16) {
#line 2278
      tmp___17 = 0;
    } else {
#line 2278
      tmp___17 = 1;
    }
#line 2278
    tmp___18 = __builtin_expect(tmp___17, 0);
#line 2278
    if (tmp___18) {
#line 2278
      while (1) {
#line 2278
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2278), "i" (sizeof(struct bug_entry )));
#line 2278
        while (1) {

        }
#line 2278
        break;
      }
    } else {

    }
#line 2278
    break;
  }
#line 2279
  while (1) {
#line 2279
    tmp___19 = list_empty(& dev_priv->mm.request_list);
#line 2279
    if (tmp___19) {
#line 2279
      tmp___20 = 0;
    } else {
#line 2279
      tmp___20 = 1;
    }
#line 2279
    tmp___21 = __builtin_expect(tmp___20, 0);
#line 2279
    if (tmp___21) {
#line 2279
      while (1) {
#line 2279
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2279), "i" (sizeof(struct bug_entry )));
#line 2279
        while (1) {

        }
#line 2279
        break;
      }
    } else {

    }
#line 2279
    break;
  }
#line 2280
  return (0);
}
}
#line 2283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_init_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2286
  dev_priv = dev->dev_private;
#line 2294
  if (! ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810))) {
#line 2295
    return (0);
  } else {

  }
#line 2297
  obj = drm_gem_object_alloc(dev, 4096);
#line 2298
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2299
    printk("<3>[drm:%s] *ERROR* Failed to allocate status page\n", "i915_gem_init_hws");
#line 2300
    return (-12);
  } else {

  }
#line 2302
  obj_priv = obj->driver_private;
#line 2304
  ret = i915_gem_object_pin(obj, 4096);
#line 2305
  if (ret != 0) {
#line 2306
    drm_gem_object_unreference(obj);
#line 2307
    return (ret);
  } else {

  }
#line 2310
  dev_priv->status_gfx_addr = obj_priv->gtt_offset;
#line 2311
  dev_priv->hws_map.offset = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
#line 2312
  dev_priv->hws_map.size = 4096;
#line 2313
  dev_priv->hws_map.type = 0;
#line 2314
  dev_priv->hws_map.flags = 0;
#line 2315
  dev_priv->hws_map.mtrr = 0;
#line 2317
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 2318
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 2319
    printk("<3>[drm:%s] *ERROR* Failed to map status page.\n", "i915_gem_init_hws");
#line 2320
    memset(& dev_priv->hws_map, 0, sizeof(dev_priv->hws_map));
#line 2321
    drm_gem_object_unreference(obj);
#line 2322
    return (-22);
  } else {

  }
#line 2324
  dev_priv->hws_obj = obj;
#line 2325
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 2326
  memset(dev_priv->hw_status_page, 0, 1UL << 12);
#line 2327
  writel(dev_priv->status_gfx_addr, (dev_priv->mmio_map)->handle + 8320);
#line 2328
  while (1) {
#line 2328
    if (drm_debug) {
#line 2328
      printk("<7>[drm:%s] hws offset: 0x%08x\n", "i915_gem_init_hws", dev_priv->status_gfx_addr);
    } else {

    }
#line 2328
    break;
  }
#line 2330
  return (0);
}
}
#line 2333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static int i915_gem_init_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2336
  dev_priv = dev->dev_private;
#line 2341
  ret = i915_gem_init_hws(dev);
#line 2342
  if (ret != 0) {
#line 2343
    return (ret);
  } else {

  }
#line 2345
  obj = drm_gem_object_alloc(dev, 128 * 1024);
#line 2346
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 2347
    printk("<3>[drm:%s] *ERROR* Failed to allocate ringbuffer\n", "i915_gem_init_ringbuffer");
#line 2348
    return (-12);
  } else {

  }
#line 2350
  obj_priv = obj->driver_private;
#line 2352
  ret = i915_gem_object_pin(obj, 4096);
#line 2353
  if (ret != 0) {
#line 2354
    drm_gem_object_unreference(obj);
#line 2355
    return (ret);
  } else {

  }
#line 2359
  dev_priv->ring.Size = obj->size;
#line 2360
  dev_priv->ring.tail_mask = obj->size - (size_t )1;
#line 2362
  dev_priv->ring.map.offset = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
#line 2363
  dev_priv->ring.map.size = obj->size;
#line 2364
  dev_priv->ring.map.type = 0;
#line 2365
  dev_priv->ring.map.flags = 0;
#line 2366
  dev_priv->ring.map.mtrr = 0;
#line 2368
  drm_core_ioremap(& dev_priv->ring.map, dev);
#line 2369
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 2370
    printk("<3>[drm:%s] *ERROR* Failed to map ringbuffer.\n", "i915_gem_init_ringbuffer");
#line 2371
    memset(& dev_priv->ring, 0, sizeof(dev_priv->ring));
#line 2372
    drm_gem_object_unreference(obj);
#line 2373
    return (-22);
  } else {

  }
#line 2375
  dev_priv->ring.ring_obj = obj;
#line 2376
  dev_priv->ring.virtual_start = dev_priv->ring.map.handle;
#line 2379
  writel(0, (dev_priv->mmio_map)->handle + 8252);
#line 2380
  writel(0, (dev_priv->mmio_map)->handle + 8244);
#line 2381
  writel(0, (dev_priv->mmio_map)->handle + 8240);
#line 2382
  writel(0, (dev_priv->mmio_map)->handle + 8248);
#line 2385
  writel(obj_priv->gtt_offset, (dev_priv->mmio_map)->handle + 8248);
#line 2386
  writel((((obj->size - (size_t )4096) & 2093056UL) | 0UL) | 1UL, (dev_priv->mmio_map)->handle + 8252);
#line 2392
  i915_kernel_lost_context(dev);
#line 2394
  return (0);
}
}
#line 2397 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 2400
  dev_priv = dev->dev_private;
#line 2402
  if ((unsigned long )dev_priv->ring.ring_obj == (unsigned long )((void *)0)) {
#line 2403
    return;
  } else {

  }
#line 2405
  drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 2407
  i915_gem_object_unpin(dev_priv->ring.ring_obj);
#line 2408
  drm_gem_object_unreference(dev_priv->ring.ring_obj);
#line 2409
  dev_priv->ring.ring_obj = (void *)0;
#line 2410
  memset(& dev_priv->ring, 0, sizeof(dev_priv->ring));
#line 2412
  if ((unsigned long )dev_priv->hws_obj != (unsigned long )((void *)0)) {
#line 2413
    i915_gem_object_unpin(dev_priv->hws_obj);
#line 2414
    drm_gem_object_unreference(dev_priv->hws_obj);
#line 2415
    dev_priv->hws_obj = (void *)0;
#line 2416
    memset(& dev_priv->hws_map, 0, sizeof(dev_priv->hws_map));
#line 2419
    writel(536866816, (dev_priv->mmio_map)->handle + 8320);
  } else {

  }
#line 2421
  return;
}
}
#line 2423 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;

  {
#line 2427
  dev_priv = dev->dev_private;
#line 2430
  if (dev_priv->mm.wedged) {
#line 2431
    printk("<3>[drm:%s] *ERROR* Reenabling wedged hardware, good luck\n", "i915_gem_entervt_ioctl");
#line 2432
    dev_priv->mm.wedged = 0;
  } else {

  }
#line 2435
  ret = i915_gem_init_ringbuffer(dev);
#line 2436
  if (ret != 0) {
#line 2437
    return (ret);
  } else {

  }
#line 2439
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2440
  while (1) {
#line 2440
    tmp = list_empty(& dev_priv->mm.active_list);
#line 2440
    if (tmp) {
#line 2440
      tmp___0 = 0;
    } else {
#line 2440
      tmp___0 = 1;
    }
#line 2440
    tmp___1 = __builtin_expect(tmp___0, 0);
#line 2440
    if (tmp___1) {
#line 2440
      while (1) {
#line 2440
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2440), "i" (sizeof(struct bug_entry )));
#line 2440
        while (1) {

        }
#line 2440
        break;
      }
    } else {

    }
#line 2440
    break;
  }
#line 2441
  while (1) {
#line 2441
    tmp___2 = list_empty(& dev_priv->mm.flushing_list);
#line 2441
    if (tmp___2) {
#line 2441
      tmp___3 = 0;
    } else {
#line 2441
      tmp___3 = 1;
    }
#line 2441
    tmp___4 = __builtin_expect(tmp___3, 0);
#line 2441
    if (tmp___4) {
#line 2441
      while (1) {
#line 2441
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2441), "i" (sizeof(struct bug_entry )));
#line 2441
        while (1) {

        }
#line 2441
        break;
      }
    } else {

    }
#line 2441
    break;
  }
#line 2442
  while (1) {
#line 2442
    tmp___5 = list_empty(& dev_priv->mm.inactive_list);
#line 2442
    if (tmp___5) {
#line 2442
      tmp___6 = 0;
    } else {
#line 2442
      tmp___6 = 1;
    }
#line 2442
    tmp___7 = __builtin_expect(tmp___6, 0);
#line 2442
    if (tmp___7) {
#line 2442
      while (1) {
#line 2442
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2442), "i" (sizeof(struct bug_entry )));
#line 2442
        while (1) {

        }
#line 2442
        break;
      }
    } else {

    }
#line 2442
    break;
  }
#line 2443
  while (1) {
#line 2443
    tmp___8 = list_empty(& dev_priv->mm.request_list);
#line 2443
    if (tmp___8) {
#line 2443
      tmp___9 = 0;
    } else {
#line 2443
      tmp___9 = 1;
    }
#line 2443
    tmp___10 = __builtin_expect(tmp___9, 0);
#line 2443
    if (tmp___10) {
#line 2443
      while (1) {
#line 2443
        __asm__  volatile   ("1:\tud2\n"
                             ".pushsection __bug_table,\"a\"\n"
                             "2:\t.quad 1b, %c0\n"
                             "\t.word %c1, 0\n"
                             "\t.org 2b+%c2\n"
                             ".popsection": : "i" ("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"),
                             "i" (2443), "i" (sizeof(struct bug_entry )));
#line 2443
        while (1) {

        }
#line 2443
        break;
      }
    } else {

    }
#line 2443
    break;
  }
#line 2444
  dev_priv->mm.suspended = 0;
#line 2445
  mutex_unlock(& dev->struct_mutex);
#line 2447
  drm_irq_install(dev);
#line 2449
  return (0);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 2458
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2459
  ret = i915_gem_idle(dev);
#line 2460
  if (ret == 0) {
#line 2461
    i915_gem_cleanup_ringbuffer(dev);
  } else {

  }
#line 2462
  mutex_unlock(& dev->struct_mutex);
#line 2464
  drm_irq_uninstall(dev);
#line 2466
  return (0);
}
}
#line 2469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_lastclose(struct drm_device *dev ) 
{ 
  int ret ;
  drm_i915_private_t *dev_priv ;

  {
#line 2473
  dev_priv = dev->dev_private;
#line 2475
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 2477
  if ((unsigned long )dev_priv->ring.ring_obj != (unsigned long )((void *)0)) {
#line 2478
    ret = i915_gem_idle(dev);
#line 2479
    if (ret) {
#line 2480
      printk("<3>[drm:%s] *ERROR* failed to idle hardware: %d\n", "i915_gem_lastclose",
             ret);
    } else {

    }
#line 2482
    i915_gem_cleanup_ringbuffer(dev);
  } else {

  }
#line 2485
  mutex_unlock(& dev->struct_mutex);
#line 2486
  return;
}
}
#line 2497 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static struct lock_class_key __key___3  ;
#line 2499 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
static struct lock_class_key __key___4  ;
#line 2488 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem.c"
void i915_gem_load(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  atomic_long_t __constr_expr_0 ;
  atomic_long_t __constr_expr_1 ;

  {
#line 2491
  dev_priv = dev->dev_private;
#line 2493
  INIT_LIST_HEAD(& dev_priv->mm.active_list);
#line 2494
  INIT_LIST_HEAD(& dev_priv->mm.flushing_list);
#line 2495
  INIT_LIST_HEAD(& dev_priv->mm.inactive_list);
#line 2496
  INIT_LIST_HEAD(& dev_priv->mm.request_list);
#line 2497
  while (1) {
#line 2497
    while (1) {
#line 2497
      __constr_expr_0.counter = 0;
#line 2497
      dev_priv->mm.retire_work.work.data = __constr_expr_0;
#line 2497
      lockdep_init_map(& dev_priv->mm.retire_work.work.lockdep_map, "&(&dev_priv->mm.retire_work)->work",
                       & __key___3, 0);
#line 2497
      INIT_LIST_HEAD(& dev_priv->mm.retire_work.work.entry);
#line 2497
      while (1) {
#line 2497
        dev_priv->mm.retire_work.work.func = & i915_gem_retire_work_handler;
#line 2497
        break;
      }
#line 2497
      break;
    }
#line 2497
    init_timer(& dev_priv->mm.retire_work.timer);
#line 2497
    break;
  }
#line 2499
  while (1) {
#line 2499
    __constr_expr_1.counter = 0;
#line 2499
    dev_priv->mm.vblank_work.data = __constr_expr_1;
#line 2499
    lockdep_init_map(& dev_priv->mm.vblank_work.lockdep_map, "&dev_priv->mm.vblank_work",
                     & __key___4, 0);
#line 2499
    INIT_LIST_HEAD(& dev_priv->mm.vblank_work.entry);
#line 2499
    while (1) {
#line 2499
      dev_priv->mm.vblank_work.func = & i915_gem_vblank_work_handler;
#line 2499
      break;
    }
#line 2499
    break;
  }
#line 2501
  dev_priv->mm.next_gem_seqno = 1;
#line 2503
  i915_gem_detect_bit_6_swizzle(dev);
#line 2504
  return;
}
}
#line 163 "include/linux/kernel.h"
extern int ( /* format attribute */  sprintf)(char *buf , char const   *fmt  , ...) ;
#line 118 "include/linux/proc_fs.h"
extern struct proc_dir_entry *create_proc_entry(char const   *name , mode_t mode ,
                                                struct proc_dir_entry *parent ) ;
#line 124
extern void remove_proc_entry(char const   *name , struct proc_dir_entry *parent ) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_active_info(char *buf , char **start , off_t offset , int request ,
                                int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 37
  minor = (struct drm_minor *)data;
#line 38
  dev = minor->dev;
#line 39
  dev_priv = dev->dev_private;
#line 41
  len = 0;
#line 43
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 44
    *eof = 1;
#line 45
    return (0);
  } else {

  }
#line 48
  *start = buf + offset;
#line 49
  *eof = 0;
#line 50
  tmp = sprintf(buf + len, "Active:\n");
#line 50
  len = len + tmp;
#line 50
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 50
    *eof = 1;
#line 50
    return ((off_t )len - offset);
  } else {

  }
#line 51
  __mptr = dev_priv->mm.active_list.next;
#line 51
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 51
  while (1) {
#line 51
    __builtin_prefetch(obj_priv->list.next);
#line 51
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.active_list)) {

    } else {
#line 51
      break;
    }
#line 54
    obj = obj_priv->obj;
#line 55
    if (obj->name) {
#line 56
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 56
      len = len + tmp___0;
#line 56
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 56
        *eof = 1;
#line 56
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 61
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 61
      len = len + tmp___1;
#line 61
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 61
        *eof = 1;
#line 61
        return ((off_t )len - offset);
      } else {

      }
    }
#line 51
    __mptr___0 = obj_priv->list.next;
#line 51
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 67
  if ((off_t )len > (off_t )request + offset) {
#line 68
    return (request);
  } else {

  }
#line 69
  *eof = 1;
#line 70
  return ((off_t )len - offset);
}
}
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_flushing_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 76
  minor = (struct drm_minor *)data;
#line 77
  dev = minor->dev;
#line 78
  dev_priv = dev->dev_private;
#line 80
  len = 0;
#line 82
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 83
    *eof = 1;
#line 84
    return (0);
  } else {

  }
#line 87
  *start = buf + offset;
#line 88
  *eof = 0;
#line 89
  tmp = sprintf(buf + len, "Flushing:\n");
#line 89
  len = len + tmp;
#line 89
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 89
    *eof = 1;
#line 89
    return ((off_t )len - offset);
  } else {

  }
#line 90
  __mptr = dev_priv->mm.flushing_list.next;
#line 90
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 90
  while (1) {
#line 90
    __builtin_prefetch(obj_priv->list.next);
#line 90
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {

    } else {
#line 90
      break;
    }
#line 93
    obj = obj_priv->obj;
#line 94
    if (obj->name) {
#line 95
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 95
      len = len + tmp___0;
#line 95
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 95
        *eof = 1;
#line 95
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 100
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 100
      len = len + tmp___1;
#line 100
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 100
        *eof = 1;
#line 100
        return ((off_t )len - offset);
      } else {

      }
    }
#line 90
    __mptr___0 = obj_priv->list.next;
#line 90
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 105
  if ((off_t )len > (off_t )request + offset) {
#line 106
    return (request);
  } else {

  }
#line 107
  *eof = 1;
#line 108
  return ((off_t )len - offset);
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_inactive_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 114
  minor = (struct drm_minor *)data;
#line 115
  dev = minor->dev;
#line 116
  dev_priv = dev->dev_private;
#line 118
  len = 0;
#line 120
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 121
    *eof = 1;
#line 122
    return (0);
  } else {

  }
#line 125
  *start = buf + offset;
#line 126
  *eof = 0;
#line 127
  tmp = sprintf(buf + len, "Inactive:\n");
#line 127
  len = len + tmp;
#line 127
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 127
    *eof = 1;
#line 127
    return ((off_t )len - offset);
  } else {

  }
#line 128
  __mptr = dev_priv->mm.inactive_list.next;
#line 128
  obj_priv = (struct drm_i915_gem_object *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
#line 128
  while (1) {
#line 128
    __builtin_prefetch(obj_priv->list.next);
#line 128
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.inactive_list)) {

    } else {
#line 128
      break;
    }
#line 131
    obj = obj_priv->obj;
#line 132
    if (obj->name) {
#line 133
      tmp___0 = sprintf(buf + len, "    %p(%d): %08x %08x %d\n", obj, obj->name, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 133
      len = len + tmp___0;
#line 133
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 133
        *eof = 1;
#line 133
        return ((off_t )len - offset);
      } else {

      }
    } else {
#line 138
      tmp___1 = sprintf(buf + len, "       %p: %08x %08x %d\n", obj, obj->read_domains,
                        obj->write_domain, obj_priv->last_rendering_seqno);
#line 138
      len = len + tmp___1;
#line 138
      if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 138
        *eof = 1;
#line 138
        return ((off_t )len - offset);
      } else {

      }
    }
#line 128
    __mptr___0 = obj_priv->list.next;
#line 128
    obj_priv = (struct drm_i915_gem_object *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_object *)0)->list));
  }
#line 143
  if ((off_t )len > (off_t )request + offset) {
#line 144
    return (request);
  } else {

  }
#line 145
  *eof = 1;
#line 146
  return ((off_t )len - offset);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_request_info(char *buf , char **start , off_t offset , int request ,
                                 int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *gem_request ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;

  {
#line 152
  minor = (struct drm_minor *)data;
#line 153
  dev = minor->dev;
#line 154
  dev_priv = dev->dev_private;
#line 156
  len = 0;
#line 158
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 159
    *eof = 1;
#line 160
    return (0);
  } else {

  }
#line 163
  *start = buf + offset;
#line 164
  *eof = 0;
#line 165
  tmp = sprintf(buf + len, "Request:\n");
#line 165
  len = len + tmp;
#line 165
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 165
    *eof = 1;
#line 165
    return ((off_t )len - offset);
  } else {

  }
#line 166
  __mptr = dev_priv->mm.request_list.next;
#line 166
  gem_request = (struct drm_i915_gem_request *)((char *)__mptr - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
#line 166
  while (1) {
#line 166
    __builtin_prefetch(gem_request->list.next);
#line 166
    if ((unsigned long )(& gem_request->list) != (unsigned long )(& dev_priv->mm.request_list)) {

    } else {
#line 166
      break;
    }
#line 169
    tmp___0 = sprintf(buf + len, "    %d @ %d %08x\n", gem_request->seqno, (int )(jiffies - (unsigned long volatile   )gem_request->emitted_jiffies),
                      gem_request->flush_domains);
#line 169
    len = len + tmp___0;
#line 169
    if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 169
      *eof = 1;
#line 169
      return ((off_t )len - offset);
    } else {

    }
#line 166
    __mptr___0 = gem_request->list.next;
#line 166
    gem_request = (struct drm_i915_gem_request *)((char *)__mptr___0 - (unsigned int )(& ((struct drm_i915_gem_request *)0)->list));
  }
#line 174
  if ((off_t )len > (off_t )request + offset) {
#line 175
    return (request);
  } else {

  }
#line 176
  *eof = 1;
#line 177
  return ((off_t )len - offset);
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_gem_seqno_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  uint32_t tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 183
  minor = (struct drm_minor *)data;
#line 184
  dev = minor->dev;
#line 185
  dev_priv = dev->dev_private;
#line 186
  len = 0;
#line 188
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 189
    *eof = 1;
#line 190
    return (0);
  } else {

  }
#line 193
  *start = buf + offset;
#line 194
  *eof = 0;
#line 195
  tmp = i915_get_gem_seqno(dev);
#line 195
  tmp___0 = sprintf(buf + len, "Current sequence: %d\n", tmp);
#line 195
  len = len + tmp___0;
#line 195
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 195
    *eof = 1;
#line 195
    return ((off_t )len - offset);
  } else {

  }
#line 196
  tmp___1 = sprintf(buf + len, "Waiter sequence:  %d\n", dev_priv->mm.waiting_gem_seqno);
#line 196
  len = len + tmp___1;
#line 196
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 196
    *eof = 1;
#line 196
    return ((off_t )len - offset);
  } else {

  }
#line 198
  tmp___2 = sprintf(buf + len, "IRQ sequence:     %d\n", dev_priv->mm.irq_gem_seqno);
#line 198
  len = len + tmp___2;
#line 198
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 198
    *eof = 1;
#line 198
    return ((off_t )len - offset);
  } else {

  }
#line 199
  if ((off_t )len > (off_t )request + offset) {
#line 200
    return (request);
  } else {

  }
#line 201
  *eof = 1;
#line 202
  return ((off_t )len - offset);
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static int i915_interrupt_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  int tmp___6 ;
  unsigned int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  uint32_t tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 209
  minor = (struct drm_minor *)data;
#line 210
  dev = minor->dev;
#line 211
  dev_priv = dev->dev_private;
#line 212
  len = 0;
#line 214
  if ((unsigned long )offset > (1UL << 12) - 80UL) {
#line 215
    *eof = 1;
#line 216
    return (0);
  } else {

  }
#line 219
  *start = buf + offset;
#line 220
  *eof = 0;
#line 221
  tmp = readl((dev_priv->mmio_map)->handle + 8352);
#line 221
  tmp___0 = sprintf(buf + len, "Interrupt enable:    %08x\n", tmp);
#line 221
  len = len + tmp___0;
#line 221
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 221
    *eof = 1;
#line 221
    return ((off_t )len - offset);
  } else {

  }
#line 223
  tmp___1 = readl((dev_priv->mmio_map)->handle + 8356);
#line 223
  tmp___2 = sprintf(buf + len, "Interrupt identity:  %08x\n", tmp___1);
#line 223
  len = len + tmp___2;
#line 223
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 223
    *eof = 1;
#line 223
    return ((off_t )len - offset);
  } else {

  }
#line 225
  tmp___3 = readl((dev_priv->mmio_map)->handle + 8360);
#line 225
  tmp___4 = sprintf(buf + len, "Interrupt mask:      %08x\n", tmp___3);
#line 225
  len = len + tmp___4;
#line 225
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 225
    *eof = 1;
#line 225
    return ((off_t )len - offset);
  } else {

  }
#line 227
  tmp___5 = readl((dev_priv->mmio_map)->handle + 458788);
#line 227
  tmp___6 = sprintf(buf + len, "Pipe A stat:         %08x\n", tmp___5);
#line 227
  len = len + tmp___6;
#line 227
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 227
    *eof = 1;
#line 227
    return ((off_t )len - offset);
  } else {

  }
#line 229
  tmp___7 = readl((dev_priv->mmio_map)->handle + 462884);
#line 229
  tmp___8 = sprintf(buf + len, "Pipe B stat:         %08x\n", tmp___7);
#line 229
  len = len + tmp___8;
#line 229
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 229
    *eof = 1;
#line 229
    return ((off_t )len - offset);
  } else {

  }
#line 231
  tmp___9 = sprintf(buf + len, "Interrupts received: %d\n", dev_priv->irq_received.counter);
#line 231
  len = len + tmp___9;
#line 231
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 231
    *eof = 1;
#line 231
    return ((off_t )len - offset);
  } else {

  }
#line 233
  tmp___10 = i915_get_gem_seqno(dev);
#line 233
  tmp___11 = sprintf(buf + len, "Current sequence:    %d\n", tmp___10);
#line 233
  len = len + tmp___11;
#line 233
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 233
    *eof = 1;
#line 233
    return ((off_t )len - offset);
  } else {

  }
#line 235
  tmp___12 = sprintf(buf + len, "Waiter sequence:     %d\n", dev_priv->mm.waiting_gem_seqno);
#line 235
  len = len + tmp___12;
#line 235
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 235
    *eof = 1;
#line 235
    return ((off_t )len - offset);
  } else {

  }
#line 237
  tmp___13 = sprintf(buf + len, "IRQ sequence:        %d\n", dev_priv->mm.irq_gem_seqno);
#line 237
  len = len + tmp___13;
#line 237
  if ((unsigned long )len > (1UL << 12) - 80UL) {
#line 237
    *eof = 1;
#line 237
    return ((off_t )len - offset);
  } else {

  }
#line 239
  if ((off_t )len > (off_t )request + offset) {
#line 240
    return (request);
  } else {

  }
#line 241
  *eof = 1;
#line 242
  return ((off_t )len - offset);
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
static struct drm_proc_list i915_gem_proc_list[6]  = {      {"i915_gem_active", & i915_gem_active_info}, 
        {"i915_gem_flushing", & i915_gem_flushing_info}, 
        {"i915_gem_inactive", & i915_gem_inactive_info}, 
        {"i915_gem_request", & i915_gem_request_info}, 
        {"i915_gem_seqno", & i915_gem_seqno_info}, 
        {"i915_gem_interrupt", & i915_interrupt_info}};
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
int i915_gem_proc_init(struct drm_minor *minor ) 
{ 
  struct proc_dir_entry *ent ;
  int i ;
  int j ;

  {
#line 266
  i = 0;
#line 266
  while (1) {
#line 266
    if ((unsigned long )i < sizeof(i915_gem_proc_list) / sizeof(i915_gem_proc_list[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 266
      break;
    }
#line 267
    ent = create_proc_entry(i915_gem_proc_list[i].name, 32768 | ((256 | 32) | 4),
                            minor->dev_root);
#line 269
    if (! ent) {
#line 270
      printk("<3>[drm:%s] *ERROR* Cannot create /proc/dri/.../%s\n", "i915_gem_proc_init",
             i915_gem_proc_list[i].name);
#line 272
      j = 0;
#line 272
      while (1) {
#line 272
        if (j < i) {

        } else {
#line 272
          break;
        }
#line 273
        remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 272
        j = j + 1;
      }
#line 275
      return (-1);
    } else {

    }
#line 277
    ent->read_proc = i915_gem_proc_list[i].f;
#line 278
    ent->data = minor;
#line 266
    i = i + 1;
  }
#line 280
  return (0);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_proc.c"
void i915_gem_proc_cleanup(struct drm_minor *minor ) 
{ 
  int i ;

  {
#line 287
  if (! minor->dev_root) {
#line 288
    return;
  } else {

  }
#line 290
  i = 0;
#line 290
  while (1) {
#line 290
    if ((unsigned long )i < sizeof(i915_gem_proc_list) / sizeof(i915_gem_proc_list[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 290
      break;
    }
#line 291
    remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 290
    i = i + 1;
  }
#line 292
  return;
}
}
#line 19 "include/asm/io.h"
__inline static unsigned short readw(void const volatile   *addr ) 
{ 
  unsigned short ret ;

  {
#line 19
  __asm__  volatile   ("mov"
                       "w"
                       " %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
#line 19
  return (ret);
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t swizzle_x ;
  uint32_t swizzle_y ;
  uint32_t dcc ;
  unsigned short tmp ;
  unsigned short tmp___0 ;

  {
#line 89
  dev_priv = dev->dev_private;
#line 90
  swizzle_x = 5;
#line 91
  swizzle_y = 5;
#line 93
  if (! ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 97
    swizzle_x = 0;
#line 98
    swizzle_y = 0;
  } else
#line 99
  if (! (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10754) {
#line 109
    dcc = readl((dev_priv->mmio_map)->handle + 66048);
#line 110
    switch (dcc & (unsigned int )(3 << 0)) {
    case (unsigned int )(1 << 0): 
    case (unsigned int )(0 << 0): 
#line 113
    swizzle_x = 0;
#line 114
    swizzle_y = 0;
#line 115
    break;
    case (unsigned int )(2 << 0): 
#line 117
    if (((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dcc & (unsigned int )(1 << 10)) {
#line 119
      swizzle_x = 2;
#line 120
      swizzle_y = 1;
    } else
#line 121
    if (dev->pci_device == 10754) {
#line 125
      swizzle_x = 4;
#line 126
      swizzle_y = 3;
    } else {
#line 129
      swizzle_x = 5;
#line 130
      swizzle_y = 5;
    }
#line 132
    break;
    }
#line 134
    if (dcc == 4294967295U) {
#line 135
      printk("<3>[drm:%s] *ERROR* Couldn\'t read from MCHBAR.  Disabling tiling.\n",
             "i915_gem_detect_bit_6_swizzle");
#line 137
      swizzle_x = 5;
#line 138
      swizzle_y = 5;
    } else {

    }
  } else {
#line 161
    tmp = readw((dev_priv->mmio_map)->handle + 66054);
#line 161
    tmp___0 = readw((dev_priv->mmio_map)->handle + 67078);
#line 161
    if ((int )tmp != (int )tmp___0) {
#line 162
      swizzle_x = 0;
#line 163
      swizzle_y = 0;
    } else {
#line 165
      swizzle_x = 2;
#line 166
      swizzle_y = 1;
    }
  }
#line 170
  dev_priv->mm.bit_6_swizzle_x = swizzle_x;
#line 171
  dev_priv->mm.bit_6_swizzle_y = swizzle_y;
#line 172
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 182
  args = data;
#line 183
  dev_priv = dev->dev_private;
#line 187
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 188
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 189
    return (-22);
  } else {

  }
#line 190
  obj_priv = obj->driver_private;
#line 192
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 194
  if (args->tiling_mode == (uint32_t )0) {
#line 195
    obj_priv->tiling_mode = 0;
#line 196
    args->swizzle_mode = 0;
  } else {
#line 198
    if (args->tiling_mode == (uint32_t )1) {
#line 199
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
    } else {
#line 201
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
    }
#line 203
    if (args->swizzle_mode == (uint32_t )5) {
#line 204
      args->tiling_mode = 0;
#line 205
      args->swizzle_mode = 0;
    } else {

    }
  }
#line 208
  obj_priv->tiling_mode = args->tiling_mode;
#line 210
  mutex_unlock(& dev->struct_mutex);
#line 212
  drm_gem_object_unreference(obj);
#line 214
  return (0);
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_gem_tiling.c"
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 224
  args = data;
#line 225
  dev_priv = dev->dev_private;
#line 229
  obj = drm_gem_object_lookup(dev, file_priv, args->handle);
#line 230
  if ((unsigned long )obj == (unsigned long )((void *)0)) {
#line 231
    return (-22);
  } else {

  }
#line 232
  obj_priv = obj->driver_private;
#line 234
  mutex_lock_nested(& dev->struct_mutex, 0);
#line 236
  args->tiling_mode = obj_priv->tiling_mode;
#line 237
  switch (obj_priv->tiling_mode) {
  case (uint32_t )1: 
#line 239
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
#line 240
  break;
  case (uint32_t )2: 
#line 242
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
#line 243
  break;
  case (uint32_t )0: 
#line 245
  args->swizzle_mode = 0;
#line 246
  break;
  default: 
#line 248
  printk("<3>[drm:%s] *ERROR* unknown tiling mode\n", "i915_gem_get_tiling");
  }
#line 251
  mutex_unlock(& dev->struct_mutex);
#line 253
  drm_gem_object_unreference(obj);
#line 255
  return (0);
}
}
#line 207 "include/asm/compat.h"
__inline static void *compat_alloc_user_space(long len ) 
{ 
  struct pt_regs *regs ;
  struct task_struct *tmp ;

  {
#line 209
  tmp = get_current();
#line 209
  regs = (struct pt_regs *)tmp->thread.sp0 - 1;
#line 210
  return ((void *)regs->sp - len);
}
}
#line 73 "include/asm-generic/ioctl.h"
extern unsigned int __invalid_size_argument_for_IOC ;
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 28
extern void unlock_kernel(void)  __attribute__((__section__(".spinlock.text"))) ;
#line 210 "include/asm/uaccess.h"
extern void __put_user_bad(void) ;
#line 986 "include/drm/drmP.h"
extern long drm_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_batchbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_batchbuffer32_t batchbuffer32 ;
  drm_i915_batchbuffer_t *batchbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___4 ;

  {
#line 53
  tmp = copy_from_user(& batchbuffer32, (void *)arg, sizeof(batchbuffer32));
#line 53
  if (tmp) {
#line 55
    return (-14);
  } else {

  }
#line 57
  tmp___0 = compat_alloc_user_space(sizeof(*batchbuffer));
#line 57
  batchbuffer = tmp___0;
#line 58
  tmp___1 = current_thread_info();
#line 58
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batchbuffer),
            "g" ((long )sizeof(*batchbuffer)), "rm" (tmp___1->addr_limit.seg));
#line 58
  if (flag == 0UL) {
#line 58
    tmp___2 = 1;
  } else {
#line 58
    tmp___2 = 0;
  }
#line 58
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 65
  if (tmp___3) {
#line 59
    while (1) {
#line 59
      __pu_err = 0;
#line 59
      switch (sizeof(batchbuffer->start)) {
      case 1UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 2UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 4UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      case 8UL: 
#line 59
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (batchbuffer32.start),
                           "m" (*((struct __large_struct *)(& batchbuffer->start))),
                           "i" (-14), "0" (__pu_err));
#line 59
      break;
      default: 
#line 59
      __put_user_bad();
      }
#line 59
      break;
    }
#line 65
    if (__pu_err) {
#line 67
      return (-14);
    } else {
#line 60
      while (1) {
#line 60
        __pu_err___0 = 0;
#line 60
        switch (sizeof(batchbuffer->used)) {
        case 1UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 2UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 4UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        case 8UL: 
#line 60
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (batchbuffer32.used),
                             "m" (*((struct __large_struct *)(& batchbuffer->used))),
                             "i" (-14), "0" (__pu_err___0));
#line 60
        break;
        default: 
#line 60
        __put_user_bad();
        }
#line 60
        break;
      }
#line 65
      if (__pu_err___0) {
#line 67
        return (-14);
      } else {
#line 61
        while (1) {
#line 61
          __pu_err___1 = 0;
#line 61
          switch (sizeof(batchbuffer->DR1)) {
          case 1UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 2UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 4UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          case 8UL: 
#line 61
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (batchbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 61
          break;
          default: 
#line 61
          __put_user_bad();
          }
#line 61
          break;
        }
#line 65
        if (__pu_err___1) {
#line 67
          return (-14);
        } else {
#line 62
          while (1) {
#line 62
            __pu_err___2 = 0;
#line 62
            switch (sizeof(batchbuffer->DR4)) {
            case 1UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 2UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 4UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            case 8UL: 
#line 62
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" (batchbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 62
            break;
            default: 
#line 62
            __put_user_bad();
            }
#line 62
            break;
          }
#line 65
          if (__pu_err___2) {
#line 67
            return (-14);
          } else {
#line 63
            while (1) {
#line 63
              __pu_err___3 = 0;
#line 63
              switch (sizeof(batchbuffer->num_cliprects)) {
              case 1UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "b"
                                   " %"
                                   "b"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "iq" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 2UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "w"
                                   " %"
                                   "w"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 4UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "l"
                                   " %"
                                   "k"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              case 8UL: 
#line 63
              __asm__  volatile   ("1:\tmov"
                                   "q"
                                   " %"
                                   ""
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "Zr" (batchbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 63
              break;
              default: 
#line 63
              __put_user_bad();
              }
#line 63
              break;
            }
#line 65
            if (__pu_err___3) {
#line 67
              return (-14);
            } else {
#line 65
              while (1) {
#line 65
                __pu_err___4 = 0;
#line 65
                switch (sizeof(batchbuffer->cliprects)) {
                case 1UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "b"
                                     " %"
                                     "b"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 2UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "w"
                                     " %"
                                     "w"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 4UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "l"
                                     " %"
                                     "k"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                case 8UL: 
#line 65
                __asm__  volatile   ("1:\tmov"
                                     "q"
                                     " %"
                                     ""
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((int *)((unsigned long )batchbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 65
                break;
                default: 
#line 65
                __put_user_bad();
                }
#line 65
                break;
              }
#line 65
              if (__pu_err___4) {
#line 67
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  } else {
#line 67
    return (-14);
  }
#line 69
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )(((1U << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 3) << 0)) | ((sizeof(drm_i915_batchbuffer_t ) == sizeof(drm_i915_batchbuffer_t [1]) && sizeof(drm_i915_batchbuffer_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_batchbuffer_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )batchbuffer);
#line 69
  return (tmp___4);
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_cmdbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_cmdbuffer32_t cmdbuffer32 ;
  drm_i915_cmdbuffer_t *cmdbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___4 ;

  {
#line 89
  tmp = copy_from_user(& cmdbuffer32, (void *)arg, sizeof(cmdbuffer32));
#line 89
  if (tmp) {
#line 91
    return (-14);
  } else {

  }
#line 93
  tmp___0 = compat_alloc_user_space(sizeof(*cmdbuffer));
#line 93
  cmdbuffer = tmp___0;
#line 94
  tmp___1 = current_thread_info();
#line 94
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuffer),
            "g" ((long )sizeof(*cmdbuffer)), "rm" (tmp___1->addr_limit.seg));
#line 94
  if (flag == 0UL) {
#line 94
    tmp___2 = 1;
  } else {
#line 94
    tmp___2 = 0;
  }
#line 94
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 101
  if (tmp___3) {
#line 95
    while (1) {
#line 95
      __pu_err = 0;
#line 95
      switch (sizeof(cmdbuffer->buf)) {
      case 1UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 2UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 4UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      case 8UL: 
#line 95
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" ((char *)((int *)((unsigned long )cmdbuffer32.buf))),
                           "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                           "0" (__pu_err));
#line 95
      break;
      default: 
#line 95
      __put_user_bad();
      }
#line 95
      break;
    }
#line 101
    if (__pu_err) {
#line 103
      return (-14);
    } else {
#line 97
      while (1) {
#line 97
        __pu_err___0 = 0;
#line 97
        switch (sizeof(cmdbuffer->sz)) {
        case 1UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 2UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 4UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        case 8UL: 
#line 97
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (cmdbuffer32.sz),
                             "m" (*((struct __large_struct *)(& cmdbuffer->sz))),
                             "i" (-14), "0" (__pu_err___0));
#line 97
        break;
        default: 
#line 97
        __put_user_bad();
        }
#line 97
        break;
      }
#line 101
      if (__pu_err___0) {
#line 103
        return (-14);
      } else {
#line 98
        while (1) {
#line 98
          __pu_err___1 = 0;
#line 98
          switch (sizeof(cmdbuffer->DR1)) {
          case 1UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 2UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 4UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          case 8UL: 
#line 98
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (cmdbuffer32.DR1),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                               "i" (-14), "0" (__pu_err___1));
#line 98
          break;
          default: 
#line 98
          __put_user_bad();
          }
#line 98
          break;
        }
#line 101
        if (__pu_err___1) {
#line 103
          return (-14);
        } else {
#line 99
          while (1) {
#line 99
            __pu_err___2 = 0;
#line 99
            switch (sizeof(cmdbuffer->DR4)) {
            case 1UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 2UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 4UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            case 8UL: 
#line 99
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" (cmdbuffer32.DR4),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                                 "i" (-14), "0" (__pu_err___2));
#line 99
            break;
            default: 
#line 99
            __put_user_bad();
            }
#line 99
            break;
          }
#line 101
          if (__pu_err___2) {
#line 103
            return (-14);
          } else {
#line 100
            while (1) {
#line 100
              __pu_err___3 = 0;
#line 100
              switch (sizeof(cmdbuffer->num_cliprects)) {
              case 1UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "b"
                                   " %"
                                   "b"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "iq" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 2UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "w"
                                   " %"
                                   "w"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 4UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "l"
                                   " %"
                                   "k"
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              case 8UL: 
#line 100
              __asm__  volatile   ("1:\tmov"
                                   "q"
                                   " %"
                                   ""
                                   "1,%2\n"
                                   "2:\n"
                                   ".section .fixup,\"ax\"\n"
                                   "3:\tmov %3,%0\n"
                                   "\tjmp 2b\n"
                                   ".previous\n"
                                   " .section __ex_table,\"a\"\n"
                                   " "
                                   ".balign 8"
                                   " "
                                   "\n"
                                   " "
                                   ".quad"
                                   " "
                                   "1b"
                                   ","
                                   "3b"
                                   "\n"
                                   " .previous\n": "=r" (__pu_err___3): "Zr" (cmdbuffer32.num_cliprects),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                   "i" (-14), "0" (__pu_err___3));
#line 100
              break;
              default: 
#line 100
              __put_user_bad();
              }
#line 100
              break;
            }
#line 101
            if (__pu_err___3) {
#line 103
              return (-14);
            } else {
#line 101
              while (1) {
#line 101
                __pu_err___4 = 0;
#line 101
                switch (sizeof(cmdbuffer->cliprects)) {
                case 1UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "b"
                                     " %"
                                     "b"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 2UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "w"
                                     " %"
                                     "w"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 4UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "l"
                                     " %"
                                     "k"
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                case 8UL: 
#line 101
                __asm__  volatile   ("1:\tmov"
                                     "q"
                                     " %"
                                     ""
                                     "1,%2\n"
                                     "2:\n"
                                     ".section .fixup,\"ax\"\n"
                                     "3:\tmov %3,%0\n"
                                     "\tjmp 2b\n"
                                     ".previous\n"
                                     " .section __ex_table,\"a\"\n"
                                     " "
                                     ".balign 8"
                                     " "
                                     "\n"
                                     " "
                                     ".quad"
                                     " "
                                     "1b"
                                     ","
                                     "3b"
                                     "\n"
                                     " .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((int *)((unsigned long )cmdbuffer32.cliprects))),
                                     "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                     "i" (-14), "0" (__pu_err___4));
#line 101
                break;
                default: 
#line 101
                __put_user_bad();
                }
#line 101
                break;
              }
#line 101
              if (__pu_err___4) {
#line 103
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  } else {
#line 103
    return (-14);
  }
#line 105
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )(((1U << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 11) << 0)) | ((sizeof(drm_i915_cmdbuffer_t ) == sizeof(drm_i915_cmdbuffer_t [1]) && sizeof(drm_i915_cmdbuffer_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_cmdbuffer_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )cmdbuffer);
#line 105
  return (tmp___4);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_irq_emit(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_irq_emit32_t req32 ;
  drm_i915_irq_emit_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  int tmp___4 ;

  {
#line 119
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 119
  if (tmp) {
#line 120
    return (-14);
  } else {

  }
#line 122
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 122
  request = tmp___0;
#line 123
  tmp___1 = current_thread_info();
#line 123
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 123
  if (flag == 0UL) {
#line 123
    tmp___2 = 1;
  } else {
#line 123
    tmp___2 = 0;
  }
#line 123
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 124
  if (tmp___3) {
#line 124
    while (1) {
#line 124
      __pu_err = 0;
#line 124
      switch (sizeof(request->irq_seq)) {
      case 1UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 2UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 4UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      case 8UL: 
#line 124
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" ((int *)((unsigned long )req32.irq_seq)),
                           "m" (*((struct __large_struct *)(& request->irq_seq))),
                           "i" (-14), "0" (__pu_err));
#line 124
      break;
      default: 
#line 124
      __put_user_bad();
      }
#line 124
      break;
    }
#line 124
    if (__pu_err) {
#line 126
      return (-14);
    } else {

    }
  } else {
#line 126
    return (-14);
  }
#line 128
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 4) << 0)) | ((sizeof(drm_i915_irq_emit_t ) == sizeof(drm_i915_irq_emit_t [1]) && sizeof(drm_i915_irq_emit_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_irq_emit_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 128
  return (tmp___4);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_getparam(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_getparam32_t req32 ;
  drm_i915_getparam_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  int tmp___4 ;

  {
#line 142
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 142
  if (tmp) {
#line 143
    return (-14);
  } else {

  }
#line 145
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 145
  request = tmp___0;
#line 146
  tmp___1 = current_thread_info();
#line 146
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 146
  if (flag == 0UL) {
#line 146
    tmp___2 = 1;
  } else {
#line 146
    tmp___2 = 0;
  }
#line 146
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 148
  if (tmp___3) {
#line 147
    while (1) {
#line 147
      __pu_err = 0;
#line 147
      switch (sizeof(request->param)) {
      case 1UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 2UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 4UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      case 8UL: 
#line 147
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (req32.param), "m" (*((struct __large_struct *)(& request->param))),
                           "i" (-14), "0" (__pu_err));
#line 147
      break;
      default: 
#line 147
      __put_user_bad();
      }
#line 147
      break;
    }
#line 148
    if (__pu_err) {
#line 150
      return (-14);
    } else {
#line 148
      while (1) {
#line 148
        __pu_err___0 = 0;
#line 148
        switch (sizeof(request->value)) {
        case 1UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 2UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 4UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        case 8UL: 
#line 148
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" ((int *)((void *)((unsigned long )req32.value))),
                             "m" (*((struct __large_struct *)(& request->value))),
                             "i" (-14), "0" (__pu_err___0));
#line 148
        break;
        default: 
#line 148
        __put_user_bad();
        }
#line 148
        break;
      }
#line 148
      if (__pu_err___0) {
#line 150
        return (-14);
      } else {

      }
    }
  } else {
#line 150
    return (-14);
  }
#line 152
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 6) << 0)) | ((sizeof(drm_i915_getparam_t ) == sizeof(drm_i915_getparam_t [1]) && sizeof(drm_i915_getparam_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_getparam_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 152
  return (tmp___4);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
static int compat_i915_alloc(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_mem_alloc32_t req32 ;
  drm_i915_mem_alloc_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  int tmp___4 ;

  {
#line 169
  tmp = copy_from_user(& req32, (void *)arg, sizeof(req32));
#line 169
  if (tmp) {
#line 170
    return (-14);
  } else {

  }
#line 172
  tmp___0 = compat_alloc_user_space(sizeof(*request));
#line 172
  request = tmp___0;
#line 173
  tmp___1 = current_thread_info();
#line 173
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" ((long )sizeof(*request)), "rm" (tmp___1->addr_limit.seg));
#line 173
  if (flag == 0UL) {
#line 173
    tmp___2 = 1;
  } else {
#line 173
    tmp___2 = 0;
  }
#line 173
  tmp___3 = __builtin_expect(tmp___2, 1);
#line 177
  if (tmp___3) {
#line 174
    while (1) {
#line 174
      __pu_err = 0;
#line 174
      switch (sizeof(request->region)) {
      case 1UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "b"
                           " %"
                           "b"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "iq" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 2UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "w"
                           " %"
                           "w"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 4UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "l"
                           " %"
                           "k"
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "ir" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      case 8UL: 
#line 174
      __asm__  volatile   ("1:\tmov"
                           "q"
                           " %"
                           ""
                           "1,%2\n"
                           "2:\n"
                           ".section .fixup,\"ax\"\n"
                           "3:\tmov %3,%0\n"
                           "\tjmp 2b\n"
                           ".previous\n"
                           " .section __ex_table,\"a\"\n"
                           " "
                           ".balign 8"
                           " "
                           "\n"
                           " "
                           ".quad"
                           " "
                           "1b"
                           ","
                           "3b"
                           "\n"
                           " .previous\n": "=r" (__pu_err): "Zr" (req32.region), "m" (*((struct __large_struct *)(& request->region))),
                           "i" (-14), "0" (__pu_err));
#line 174
      break;
      default: 
#line 174
      __put_user_bad();
      }
#line 174
      break;
    }
#line 177
    if (__pu_err) {
#line 179
      return (-14);
    } else {
#line 175
      while (1) {
#line 175
        __pu_err___0 = 0;
#line 175
        switch (sizeof(request->alignment)) {
        case 1UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "b"
                             " %"
                             "b"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "iq" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 2UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "w"
                             " %"
                             "w"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 4UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "l"
                             " %"
                             "k"
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        case 8UL: 
#line 175
        __asm__  volatile   ("1:\tmov"
                             "q"
                             " %"
                             ""
                             "1,%2\n"
                             "2:\n"
                             ".section .fixup,\"ax\"\n"
                             "3:\tmov %3,%0\n"
                             "\tjmp 2b\n"
                             ".previous\n"
                             " .section __ex_table,\"a\"\n"
                             " "
                             ".balign 8"
                             " "
                             "\n"
                             " "
                             ".quad"
                             " "
                             "1b"
                             ","
                             "3b"
                             "\n"
                             " .previous\n": "=r" (__pu_err___0): "Zr" (req32.alignment),
                             "m" (*((struct __large_struct *)(& request->alignment))),
                             "i" (-14), "0" (__pu_err___0));
#line 175
        break;
        default: 
#line 175
        __put_user_bad();
        }
#line 175
        break;
      }
#line 177
      if (__pu_err___0) {
#line 179
        return (-14);
      } else {
#line 176
        while (1) {
#line 176
          __pu_err___1 = 0;
#line 176
          switch (sizeof(request->size)) {
          case 1UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "b"
                               " %"
                               "b"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "iq" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 2UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "w"
                               " %"
                               "w"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 4UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "l"
                               " %"
                               "k"
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          case 8UL: 
#line 176
          __asm__  volatile   ("1:\tmov"
                               "q"
                               " %"
                               ""
                               "1,%2\n"
                               "2:\n"
                               ".section .fixup,\"ax\"\n"
                               "3:\tmov %3,%0\n"
                               "\tjmp 2b\n"
                               ".previous\n"
                               " .section __ex_table,\"a\"\n"
                               " "
                               ".balign 8"
                               " "
                               "\n"
                               " "
                               ".quad"
                               " "
                               "1b"
                               ","
                               "3b"
                               "\n"
                               " .previous\n": "=r" (__pu_err___1): "Zr" (req32.size),
                               "m" (*((struct __large_struct *)(& request->size))),
                               "i" (-14), "0" (__pu_err___1));
#line 176
          break;
          default: 
#line 176
          __put_user_bad();
          }
#line 176
          break;
        }
#line 177
        if (__pu_err___1) {
#line 179
          return (-14);
        } else {
#line 177
          while (1) {
#line 177
            __pu_err___2 = 0;
#line 177
            switch (sizeof(request->region_offset)) {
            case 1UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "b"
                                 " %"
                                 "b"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "iq" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 2UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "w"
                                 " %"
                                 "w"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 4UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "l"
                                 " %"
                                 "k"
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "ir" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            case 8UL: 
#line 177
            __asm__  volatile   ("1:\tmov"
                                 "q"
                                 " %"
                                 ""
                                 "1,%2\n"
                                 "2:\n"
                                 ".section .fixup,\"ax\"\n"
                                 "3:\tmov %3,%0\n"
                                 "\tjmp 2b\n"
                                 ".previous\n"
                                 " .section __ex_table,\"a\"\n"
                                 " "
                                 ".balign 8"
                                 " "
                                 "\n"
                                 " "
                                 ".quad"
                                 " "
                                 "1b"
                                 ","
                                 "3b"
                                 "\n"
                                 " .previous\n": "=r" (__pu_err___2): "Zr" ((int *)((void *)((unsigned long )req32.region_offset))),
                                 "m" (*((struct __large_struct *)(& request->region_offset))),
                                 "i" (-14), "0" (__pu_err___2));
#line 177
            break;
            default: 
#line 177
            __put_user_bad();
            }
#line 177
            break;
          }
#line 177
          if (__pu_err___2) {
#line 179
            return (-14);
          } else {

          }
        }
      }
    }
  } else {
#line 179
    return (-14);
  }
#line 181
  tmp___4 = drm_ioctl((file->f_path.dentry)->d_inode, file, (unsigned long )((((2U | 1U) << (((0 + 8) + 8) + 14)) | (unsigned int )('d' << (0 + 8))) | (unsigned int )((64 + 8) << 0)) | ((sizeof(drm_i915_mem_alloc_t ) == sizeof(drm_i915_mem_alloc_t [1]) && sizeof(drm_i915_mem_alloc_t ) < (unsigned long )(1 << 14) ? sizeof(drm_i915_mem_alloc_t ) : __invalid_size_argument_for_IOC) << ((0 + 8) + 8)),
                      (unsigned long )request);
#line 181
  return (tmp___4);
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
drm_ioctl_compat_t *i915_compat_ioctls[12]  = 
#line 185
  {      0,      0,      0,      & compat_i915_batchbuffer, 
        & compat_i915_irq_emit,      0,      & compat_i915_getparam,      0, 
        & compat_i915_alloc,      0,      0,      & compat_i915_cmdbuffer};
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/68_1/drivers/gpu/drm/i915/i915_ioc32.c"
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  unsigned int nr ;
  drm_ioctl_compat_t *fn ;
  int ret ;
  long tmp ;

  {
#line 204
  nr = (cmd >> 0) & (unsigned int )((1 << 8) - 1);
#line 205
  fn = (void *)0;
#line 208
  if (nr < 64U) {
#line 209
    tmp = drm_compat_ioctl(filp, cmd, arg);
#line 209
    return (tmp);
  } else {

  }
#line 211
  if ((unsigned long )nr < 64UL + (sizeof(i915_compat_ioctls) / sizeof(i915_compat_ioctls[0]) + (sizeof(char [1 - 2 * 0]) - 1UL))) {
#line 212
    fn = i915_compat_ioctls[nr - 64U];
  } else {

  }
#line 214
  lock_kernel();
#line 215
  if ((unsigned long )fn != (unsigned long )((void *)0)) {
#line 216
    ret = (*fn)(filp, cmd, arg);
  } else {
#line 218
    ret = drm_ioctl((filp->f_path.dentry)->d_inode, filp, cmd, arg);
  }
#line 219
  unlock_kernel();
#line 221
  return (ret);
}
}
#line 1455 "include/linux/usb.h"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1456
void usb_free_urb(struct urb *urb ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_stop(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    if (! arbitrary_memory) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    if (addr) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    if (! arbitrary_memory) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 


  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    if (urb) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
