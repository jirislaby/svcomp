/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 22 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 120 "include/linux/types.h"
typedef __u32 uint32_t;
#line 123 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 193 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 196 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 201 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 37 "include/linux/dynamic_printk.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "include/linux/kernel.h"
struct completion;
#line 103
struct pt_regs;
#line 191
struct pid;
#line 507
struct timespec;
#line 508
struct compat_timespec;
#line 509 "include/linux/kernel.h"
struct __anonstruct_ldv_1569_4 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 509 "include/linux/kernel.h"
struct __anonstruct_futex_5 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 509 "include/linux/kernel.h"
struct __anonstruct_nanosleep_6 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 509
struct pollfd;
#line 509 "include/linux/kernel.h"
struct __anonstruct_poll_7 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 509 "include/linux/kernel.h"
union __anonunion_ldv_1591_3 {
   struct __anonstruct_ldv_1569_4 ldv_1569 ;
   struct __anonstruct_futex_5 futex ;
   struct __anonstruct_nanosleep_6 nanosleep ;
   struct __anonstruct_poll_7 poll ;
};
#line 509 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1591_3 ldv_1591 ;
};
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgd_t_9 {
   pgdval_t pgd ;
};
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgd_t_9 pgd_t;
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgprot_t_10 {
   pgprotval_t pgprot ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgprot_t_10 pgprot_t;
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_1703_14 {
   unsigned int a ;
   unsigned int b ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_1718_15 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
union __anonunion_ldv_1719_13 {
   struct __anonstruct_ldv_1703_14 ldv_1703 ;
   struct __anonstruct_ldv_1718_15 ldv_1718 ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1719_13 ldv_1719 ;
};
#line 289 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[1U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1102
struct thread_struct;
#line 1104
struct mm_struct;
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct raw_spinlock;
#line 21 "include/asm-generic/page.h"
struct task_struct;
#line 22
struct exec_domain;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4559_18 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4565_19 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4566_17 {
   struct __anonstruct_ldv_4559_18 ldv_4559 ;
   struct __anonstruct_ldv_4565_19 ldv_4565 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4575_20 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4566_17 ldv_4566 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4575_20 ldv_4575 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 386 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_21 {
   unsigned long seg ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_21 mm_segment_t;
#line 935 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 9 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_22 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_22 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 31 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 156 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 192 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_23 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_23 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_24 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_24 rwlock_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic_t_25 {
   int counter ;
};
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_25 atomic_t;
#line 198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_26 {
   long counter ;
};
#line 198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_26 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 219 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_28 {
   unsigned long bits[1U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_28 nodemask_t;
#line 630 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 150
struct rw_semaphore;
#line 152 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 740 "include/linux/mmzone.h"
struct file;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 155 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 212
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 222 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_76 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_76 mm_context_t;
#line 237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 1081 "include/linux/mmzone.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 404
struct kobject;
#line 405 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 40 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 103 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 109 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 116 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 133 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 215 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 194
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 272 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 86 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 275 "include/linux/rcupdate.h"
struct tracepoint;
#line 276 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_87 {
   atomic_long_t a ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_87 local_t;
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 226
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 232
struct module_sect_attrs;
#line 232
struct module_notes_attrs;
#line 232 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8U] ;
};
#line 463
struct device_driver;
#line 593
struct file_operations;
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_88 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_88 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 368 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
struct prio_tree_node;
#line 191 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 519 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 36 "include/linux/fiemap.h"
struct export_operations;
#line 38
struct iovec;
#line 39
struct kiocb;
#line 40
struct pipe_inode_info;
#line 41
struct poll_table_struct;
#line 42
struct kstatfs;
#line 328 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 378 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 109 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 142 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 199
struct quota_format_type;
#line 200 "include/linux/quota.h"
union __anonunion_u_90 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 200 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_90 u ;
};
#line 245 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 268 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 284 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 300 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 315 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 352
struct address_space;
#line 353
struct writeback_control;
#line 474 "include/linux/fs.h"
union __anonunion_arg_92 {
   char *buf ;
   void *data ;
};
#line 474 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_91 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_92 arg ;
   int error ;
};
#line 474 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_91 read_descriptor_t;
#line 477 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 525
struct backing_dev_info;
#line 526 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 547
struct hd_struct;
#line 547
struct gendisk;
#line 547 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 611
struct inode_operations;
#line 611
struct file_lock;
#line 611
struct cdev;
#line 611 "include/linux/fs.h"
union __anonunion_ldv_11089_93 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 611
struct dnotify_struct;
#line 611 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_11089_93 ldv_11089 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 777 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 785 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 808 "include/linux/fs.h"
union __anonunion_f_u_94 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 808 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_94 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 931
struct files_struct;
#line 931 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 932 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 937 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_96 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_95 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_96 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_95 fl_u ;
};
#line 1039 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1103
struct file_system_type;
#line 1103
struct super_operations;
#line 1103
struct xattr_handler;
#line 1103
struct mtd_info;
#line 1103 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1225 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1269 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1310 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1338
struct seq_file;
#line 1352 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1535 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1914
struct bio;
#line 49 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 51 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 52 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 446 "include/linux/mod_devicetable.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 25 "include/linux/ioport.h"
struct pci_dev;
#line 178
struct klist_node;
#line 179 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 69
struct dma_mapping_ops;
#line 69 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct driver_private;
#line 15
struct class;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 179
struct class_attribute;
#line 179 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 204
struct device_type;
#line 235 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 267 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 296 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 357 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 366
struct dma_coherent_mem;
#line 366 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 69 "include/linux/io.h"
struct hotplug_slot;
#line 69 "include/linux/io.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 87 "include/linux/pci.h"
typedef int pci_power_t;
#line 101 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 102
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 127 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 137 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 148
struct pcie_link_state;
#line 149
struct pci_vpd;
#line 150
struct pci_driver;
#line 150 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12U] ;
   struct bin_attribute *res_attr_wc[12U] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 270
struct pci_ops;
#line 270 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16U] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 318 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 353 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 366 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 375 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 403 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 723 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 805 "include/linux/pci.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_15155_99 {
   u16 inuse ;
   u16 objects ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15156_98 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15155_99 ldv_15155 ;
};
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_15161_101 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15165_100 {
   struct __anonstruct_ldv_15161_101 ldv_15161 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15169_102 {
   unsigned long index ;
   void *freelist ;
};
#line 28 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_15156_98 ldv_15156 ;
   union __anonunion_ldv_15165_100 ldv_15165 ;
   union __anonunion_ldv_15169_102 ldv_15169 ;
   struct list_head lru ;
};
#line 82 "include/linux/mm_types.h"
struct __anonstruct_vm_set_104 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 82 "include/linux/mm_types.h"
union __anonunion_shared_103 {
   struct __anonstruct_vm_set_104 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 82
struct anon_vma;
#line 82
struct vm_operations_struct;
#line 82
struct mempolicy;
#line 82 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_103 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 160 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 166 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 172
struct kioctx;
#line 172
struct mmu_notifier_mm;
#line 172 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[42U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 259
struct user_struct;
#line 144 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 165 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct page * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
struct dma_mapping_ops {
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_single)(struct device * , phys_addr_t  , size_t  , int  ) ;
   void (*unmap_single)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , int  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , int  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_105 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_105 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 171 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 183 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_107 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_108 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_109 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_110 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_111 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_112 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_106 {
   int _pad[28U] ;
   struct __anonstruct__kill_107 _kill ;
   struct __anonstruct__timer_108 _timer ;
   struct __anonstruct__rt_109 _rt ;
   struct __anonstruct__sigchld_110 _sigchld ;
   struct __anonstruct__sigfault_111 _sigfault ;
   struct __anonstruct__sigpoll_112 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_106 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_115 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_115 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE_PERCPU = 1,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 2
} ;
#line 92 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   enum hrtimer_cb_mode cb_mode ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 151 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 175 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 488 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 138 "include/linux/sched.h"
struct cfs_rq;
#line 139
struct task_group;
#line 334
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_116 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_116 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 393 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 428 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 436 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 453 "include/linux/sched.h"
struct thread_group_cputime {
   struct task_cputime *totals ;
};
#line 469 "include/linux/sched.h"
union __anonunion_ldv_18746_117 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 469 "include/linux/sched.h"
union __anonunion_ldv_18751_118 {
   pid_t session ;
   pid_t __session ;
};
#line 469
struct tty_struct;
#line 469
struct taskstats;
#line 469
struct tty_audit_buf;
#line 469 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputime cputime ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_18746_117 ldv_18746 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_18751_118 ldv_18751 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   struct rlimit rlim[16U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 620 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 666
struct reclaim_state;
#line 667 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 685 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 727
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 734 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 794
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 808 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 878
struct io_context;
#line 879 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 930
struct audit_context;
#line 932
struct rq;
#line 933 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 986 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 991 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1057
struct rt_rq;
#line 1057 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1073
struct linux_binfmt;
#line 1073
struct css_set;
#line 1073
struct compat_robust_list_head;
#line 1073 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
};
#line 41 "include/linux/smp_lock.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 149 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 153 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
enum chipset_type {
    NOT_SUPPORTED = 0,
    SUPPORTED = 1
} ;
#line 160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct agp_version {
   u16 major ;
   u16 minor ;
};
#line 44 "include/linux/agp_backend.h"
struct agp_kern_info {
   struct agp_version version ;
   struct pci_dev *device ;
   enum chipset_type chipset ;
   unsigned long mode ;
   unsigned long aper_base ;
   size_t aper_size ;
   int max_memory ;
   int current_memory ;
   bool cant_use_aperture ;
   unsigned long page_mask ;
   struct vm_operations_struct *vm_ops ;
};
#line 58
struct agp_bridge_data;
#line 108 "include/linux/agp_backend.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 19 "include/linux/irqreturn.h"
typedef int irqreturn_t;
#line 66 "include/drm/drm.h"
typedef unsigned int drm_magic_t;
#line 102 "include/drm/drm.h"
struct drm_hw_lock {
   unsigned int volatile   lock ;
   char padding[60U] ;
};
#line 165
enum drm_map_type {
    _DRM_FRAME_BUFFER = 0,
    _DRM_REGISTERS = 1,
    _DRM_SHM = 2,
    _DRM_AGP = 3,
    _DRM_SCATTER_GATHER = 4,
    _DRM_CONSISTENT = 5,
    _DRM_GEM = 6
} ;
#line 175
enum drm_map_flags {
    _DRM_RESTRICTED = 1,
    _DRM_READ_ONLY = 2,
    _DRM_LOCKED = 4,
    _DRM_KERNEL = 8,
    _DRM_WRITE_COMBINING = 16,
    _DRM_CONTAINS_LOCK = 32,
    _DRM_REMOVABLE = 64,
    _DRM_DRIVER = 128
} ;
#line 197 "include/drm/drm.h"
struct drm_map {
   unsigned long offset ;
   unsigned long size ;
   enum drm_map_type type ;
   enum drm_map_flags flags ;
   void *handle ;
   int mtrr ;
};
#line 226
enum drm_stat_type {
    _DRM_STAT_LOCK = 0,
    _DRM_STAT_OPENS = 1,
    _DRM_STAT_CLOSES = 2,
    _DRM_STAT_IOCTLS = 3,
    _DRM_STAT_LOCKS = 4,
    _DRM_STAT_UNLOCKS = 5,
    _DRM_STAT_VALUE = 6,
    _DRM_STAT_BYTE = 7,
    _DRM_STAT_COUNT = 8,
    _DRM_STAT_IRQ = 9,
    _DRM_STAT_PRIMARY = 10,
    _DRM_STAT_SECONDARY = 11,
    _DRM_STAT_DMA = 12,
    _DRM_STAT_SPECIAL = 13,
    _DRM_STAT_MISSED = 14
} ;
#line 391
enum drm_ctx_flags {
    _DRM_CONTEXT_PRESERVED = 1,
    _DRM_CONTEXT_2DONLY = 2
} ;
#line 563 "include/drm/drm.h"
struct drm_set_version {
   int drm_di_major ;
   int drm_di_minor ;
   int drm_dd_major ;
   int drm_dd_minor ;
};
#line 217 "include/drm/drm_mode.h"
struct drm_mode_fb_cmd {
   uint32_t fb_id ;
   uint32_t width ;
   uint32_t height ;
   uint32_t pitch ;
   uint32_t bpp ;
   uint32_t depth ;
   uint32_t handle ;
};
#line 270 "include/drm/drm_mode.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 145
struct drm_file;
#line 146
struct drm_device;
#line 467 "include/linux/interrupt.h"
struct drm_hash_item {
   struct hlist_node head ;
   unsigned long key ;
};
#line 44 "include/drm/drm_hashtab.h"
struct drm_open_hash {
   unsigned int size ;
   unsigned int order ;
   unsigned int fill ;
   struct hlist_head *table ;
   int use_vmalloc ;
};
#line 271 "include/drm/drmP.h"
typedef int drm_ioctl_t(struct drm_device * , void * , struct drm_file * );
#line 275 "include/drm/drmP.h"
struct drm_ioctl_desc {
   unsigned int cmd ;
   drm_ioctl_t *func ;
   int flags ;
};
#line 306
enum ldv_18290 {
    DRM_LIST_NONE = 0,
    DRM_LIST_FREE = 1,
    DRM_LIST_WAIT = 2,
    DRM_LIST_PEND = 3,
    DRM_LIST_PRIO = 4,
    DRM_LIST_RECLAIM = 5
} ;
#line 315 "include/drm/drmP.h"
struct drm_buf {
   int idx ;
   int total ;
   int order ;
   int used ;
   unsigned long offset ;
   void *address ;
   unsigned long bus_address ;
   struct drm_buf *next ;
   int volatile   waiting ;
   int volatile   pending ;
   wait_queue_head_t dma_wait ;
   struct drm_file *file_priv ;
   int context ;
   int while_locked ;
   enum ldv_18290 list ;
   int dev_priv_size ;
   void *dev_private ;
};
#line 337 "include/drm/drmP.h"
struct drm_waitlist {
   int count ;
   struct drm_buf **bufs ;
   struct drm_buf **rp ;
   struct drm_buf **wp ;
   struct drm_buf **end ;
   spinlock_t read_lock ;
   spinlock_t write_lock ;
};
#line 348 "include/drm/drmP.h"
struct drm_freelist {
   int initialized ;
   atomic_t count ;
   struct drm_buf *next ;
   wait_queue_head_t waiting ;
   int low_mark ;
   int high_mark ;
   atomic_t wfh ;
   spinlock_t lock ;
};
#line 360 "include/drm/drmP.h"
struct drm_dma_handle {
   dma_addr_t busaddr ;
   void *vaddr ;
   size_t size ;
};
#line 365 "include/drm/drmP.h"
typedef struct drm_dma_handle drm_dma_handle_t;
#line 366 "include/drm/drmP.h"
struct drm_buf_entry {
   int buf_size ;
   int buf_count ;
   struct drm_buf *buflist ;
   int seg_count ;
   int page_order ;
   struct drm_dma_handle **seglist ;
   struct drm_freelist freelist ;
};
#line 380
struct drm_minor;
#line 380
struct drm_master;
#line 380 "include/drm/drmP.h"
struct drm_file {
   int authenticated ;
   pid_t pid ;
   uid_t uid ;
   drm_magic_t magic ;
   unsigned long ioctl_count ;
   struct list_head lhead ;
   struct drm_minor *minor ;
   unsigned long lock_count ;
   struct idr object_idr ;
   spinlock_t table_lock ;
   struct file *filp ;
   void *driver_priv ;
   int is_master ;
   struct drm_master *master ;
   struct list_head fbs ;
};
#line 405 "include/drm/drmP.h"
struct drm_queue {
   atomic_t use_count ;
   atomic_t finalization ;
   atomic_t block_count ;
   atomic_t block_read ;
   wait_queue_head_t read_queue ;
   atomic_t block_write ;
   wait_queue_head_t write_queue ;
   atomic_t total_queued ;
   atomic_t total_flushed ;
   atomic_t total_locks ;
   enum drm_ctx_flags flags ;
   struct drm_waitlist waitlist ;
   wait_queue_head_t flush_queue ;
};
#line 422 "include/drm/drmP.h"
struct drm_lock_data {
   struct drm_hw_lock *hw_lock ;
   struct drm_file *file_priv ;
   wait_queue_head_t lock_queue ;
   unsigned long lock_time ;
   spinlock_t spinlock ;
   uint32_t kernel_waiters ;
   uint32_t user_waiters ;
   int idle_has_lock ;
};
#line 437
enum ldv_18310 {
    _DRM_DMA_USE_AGP = 1,
    _DRM_DMA_USE_SG = 2,
    _DRM_DMA_USE_FB = 4,
    _DRM_DMA_USE_PCI_RO = 8
} ;
#line 444 "include/drm/drmP.h"
struct drm_device_dma {
   struct drm_buf_entry bufs[23U] ;
   int buf_count ;
   struct drm_buf **buflist ;
   int seg_count ;
   int page_count ;
   unsigned long *pagelist ;
   unsigned long byte_count ;
   enum ldv_18310 flags ;
};
#line 469 "include/drm/drmP.h"
struct drm_agp_head {
   struct agp_kern_info agp_info ;
   struct list_head memory ;
   unsigned long mode ;
   struct agp_bridge_data *bridge ;
   int enabled ;
   int acquired ;
   unsigned long base ;
   int agp_mtrr ;
   int cant_use_aperture ;
   unsigned long page_mask ;
};
#line 487 "include/drm/drmP.h"
struct drm_sg_mem {
   unsigned long handle ;
   void *virtual ;
   int pages ;
   struct page **pagelist ;
   dma_addr_t *busaddr ;
};
#line 498 "include/drm/drmP.h"
struct drm_sigdata {
   int context ;
   struct drm_hw_lock *lock ;
};
#line 503
struct drm_mm;
#line 503 "include/drm/drmP.h"
struct drm_mm_node {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
   int free ;
   unsigned long start ;
   unsigned long size ;
   struct drm_mm *mm ;
   void *private ;
};
#line 518 "include/drm/drmP.h"
struct drm_mm {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
};
#line 523 "include/drm/drmP.h"
struct drm_map_list {
   struct list_head head ;
   struct drm_hash_item hash ;
   struct drm_map *map ;
   uint64_t user_token ;
   struct drm_master *master ;
   struct drm_mm_node *file_offset_node ;
};
#line 537 "include/drm/drmP.h"
typedef struct drm_map drm_local_map_t;
#line 581 "include/drm/drmP.h"
struct drm_gem_object {
   struct kref refcount ;
   struct kref handlecount ;
   struct drm_device *dev ;
   struct file *filp ;
   struct drm_map_list map_list ;
   size_t size ;
   int name ;
   uint32_t read_domains ;
   uint32_t write_domain ;
   uint32_t pending_read_domains ;
   uint32_t pending_write_domain ;
   void *driver_private ;
};
#line 1102 "include/linux/fb.h"
struct drm_framebuffer;
#line 1103 "include/linux/fb.h"
struct drm_mode_object {
   uint32_t id ;
   uint32_t type ;
};
#line 52 "include/drm/drm_crtc.h"
enum drm_mode_status {
    MODE_OK = 0,
    MODE_HSYNC = 1,
    MODE_VSYNC = 2,
    MODE_H_ILLEGAL = 3,
    MODE_V_ILLEGAL = 4,
    MODE_BAD_WIDTH = 5,
    MODE_NOMODE = 6,
    MODE_NO_INTERLACE = 7,
    MODE_NO_DBLESCAN = 8,
    MODE_NO_VSCAN = 9,
    MODE_MEM = 10,
    MODE_VIRTUAL_X = 11,
    MODE_VIRTUAL_Y = 12,
    MODE_MEM_VIRT = 13,
    MODE_NOCLOCK = 14,
    MODE_CLOCK_HIGH = 15,
    MODE_CLOCK_LOW = 16,
    MODE_CLOCK_RANGE = 17,
    MODE_BAD_HVALUE = 18,
    MODE_BAD_VVALUE = 19,
    MODE_BAD_VSCAN = 20,
    MODE_HSYNC_NARROW = 21,
    MODE_HSYNC_WIDE = 22,
    MODE_HBLANK_NARROW = 23,
    MODE_HBLANK_WIDE = 24,
    MODE_VSYNC_NARROW = 25,
    MODE_VSYNC_WIDE = 26,
    MODE_VBLANK_NARROW = 27,
    MODE_VBLANK_WIDE = 28,
    MODE_PANEL = 29,
    MODE_INTERLACE_WIDTH = 30,
    MODE_ONE_WIDTH = 31,
    MODE_ONE_HEIGHT = 32,
    MODE_ONE_SIZE = 33,
    MODE_NO_REDUCED = 34,
    MODE_UNVERIFIED = -3,
    MODE_BAD = -2,
    MODE_ERROR = -1
} ;
#line 93 "include/drm/drm_crtc.h"
struct drm_display_mode {
   struct list_head head ;
   struct drm_mode_object base ;
   char name[32U] ;
   int connector_count ;
   enum drm_mode_status status ;
   int type ;
   int clock ;
   int hdisplay ;
   int hsync_start ;
   int hsync_end ;
   int htotal ;
   int hskew ;
   int vdisplay ;
   int vsync_start ;
   int vsync_end ;
   int vtotal ;
   int vscan ;
   unsigned int flags ;
   int width_mm ;
   int height_mm ;
   int clock_index ;
   int synth_clock ;
   int crtc_hdisplay ;
   int crtc_hblank_start ;
   int crtc_hblank_end ;
   int crtc_hsync_start ;
   int crtc_hsync_end ;
   int crtc_htotal ;
   int crtc_hskew ;
   int crtc_vdisplay ;
   int crtc_vblank_start ;
   int crtc_vblank_end ;
   int crtc_vsync_start ;
   int crtc_vsync_end ;
   int crtc_vtotal ;
   int crtc_hadjusted ;
   int crtc_vadjusted ;
   int private_size ;
   int *private ;
   int private_flags ;
   int vrefresh ;
   float hsync ;
};
#line 239 "include/drm/drm_crtc.h"
struct drm_framebuffer_funcs {
   void (*destroy)(struct drm_framebuffer * ) ;
   int (*create_handle)(struct drm_framebuffer * , struct drm_file * , unsigned int * ) ;
};
#line 244 "include/drm/drm_crtc.h"
struct drm_framebuffer {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   struct drm_framebuffer_funcs  const  *funcs ;
   unsigned int pitch ;
   unsigned int width ;
   unsigned int height ;
   unsigned int depth ;
   int bits_per_pixel ;
   int flags ;
   void *fbdev ;
   u32 pseudo_palette[17U] ;
   struct list_head filp_head ;
};
#line 276 "include/drm/drm_crtc.h"
struct drm_property {
   struct list_head head ;
   struct drm_mode_object base ;
   uint32_t flags ;
   char name[32U] ;
   uint32_t num_values ;
   uint64_t *values ;
   struct list_head enum_blob_list ;
};
#line 502 "include/drm/drm_crtc.h"
struct drm_mode_config_funcs {
   struct drm_framebuffer *(*fb_create)(struct drm_device * , struct drm_file * ,
                                        struct drm_mode_fb_cmd * ) ;
   int (*fb_changed)(struct drm_device * ) ;
};
#line 516 "include/drm/drm_crtc.h"
struct drm_mode_group {
   uint32_t num_crtcs ;
   uint32_t num_encoders ;
   uint32_t num_connectors ;
   uint32_t *id_list ;
};
#line 525 "include/drm/drm_crtc.h"
struct drm_mode_config {
   struct mutex mutex ;
   struct idr crtc_idr ;
   int num_fb ;
   struct list_head fb_list ;
   int num_connector ;
   struct list_head connector_list ;
   int num_encoder ;
   struct list_head encoder_list ;
   int num_crtc ;
   struct list_head crtc_list ;
   struct list_head property_list ;
   struct list_head fb_kernel_list ;
   int min_width ;
   int min_height ;
   int max_width ;
   int max_height ;
   struct drm_mode_config_funcs *funcs ;
   unsigned long fb_base ;
   struct list_head property_blob_list ;
   struct drm_property *edid_property ;
   struct drm_property *dpms_property ;
   struct drm_property *dvi_i_subconnector_property ;
   struct drm_property *dvi_i_select_subconnector_property ;
   struct drm_property *tv_subconnector_property ;
   struct drm_property *tv_select_subconnector_property ;
   struct drm_property *tv_mode_property ;
   struct drm_property *tv_left_margin_property ;
   struct drm_property *tv_right_margin_property ;
   struct drm_property *tv_top_margin_property ;
   struct drm_property *tv_bottom_margin_property ;
   struct drm_property *scaling_mode_property ;
   struct drm_property *dithering_mode_property ;
};
#line 732 "include/drm/drm_crtc.h"
struct drm_master {
   struct kref refcount ;
   struct list_head head ;
   struct drm_minor *minor ;
   char *unique ;
   int unique_len ;
   int unique_size ;
   int blocked ;
   struct drm_open_hash magiclist ;
   struct list_head magicfree ;
   struct drm_lock_data lock ;
   void *driver_priv ;
};
#line 661 "include/drm/drmP.h"
struct drm_driver {
   int (*load)(struct drm_device * , unsigned long  ) ;
   int (*firstopen)(struct drm_device * ) ;
   int (*open)(struct drm_device * , struct drm_file * ) ;
   void (*preclose)(struct drm_device * , struct drm_file * ) ;
   void (*postclose)(struct drm_device * , struct drm_file * ) ;
   void (*lastclose)(struct drm_device * ) ;
   int (*unload)(struct drm_device * ) ;
   int (*suspend)(struct drm_device * , pm_message_t  ) ;
   int (*resume)(struct drm_device * ) ;
   int (*dma_ioctl)(struct drm_device * , void * , struct drm_file * ) ;
   void (*dma_ready)(struct drm_device * ) ;
   int (*dma_quiescent)(struct drm_device * ) ;
   int (*context_ctor)(struct drm_device * , int  ) ;
   int (*context_dtor)(struct drm_device * , int  ) ;
   int (*kernel_context_switch)(struct drm_device * , int  , int  ) ;
   void (*kernel_context_switch_unlock)(struct drm_device * ) ;
   int (*dri_library_name)(struct drm_device * , char * ) ;
   u32 (*get_vblank_counter)(struct drm_device * , int  ) ;
   int (*enable_vblank)(struct drm_device * , int  ) ;
   void (*disable_vblank)(struct drm_device * , int  ) ;
   int (*device_is_agp)(struct drm_device * ) ;
   irqreturn_t (*irq_handler)(int  , void * ) ;
   void (*irq_preinstall)(struct drm_device * ) ;
   int (*irq_postinstall)(struct drm_device * ) ;
   void (*irq_uninstall)(struct drm_device * ) ;
   void (*reclaim_buffers)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_locked)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_idlelocked)(struct drm_device * , struct drm_file * ) ;
   unsigned long (*get_map_ofs)(struct drm_map * ) ;
   unsigned long (*get_reg_ofs)(struct drm_device * ) ;
   void (*set_version)(struct drm_device * , struct drm_set_version * ) ;
   int (*master_create)(struct drm_device * , struct drm_master * ) ;
   void (*master_destroy)(struct drm_device * , struct drm_master * ) ;
   int (*proc_init)(struct drm_minor * ) ;
   void (*proc_cleanup)(struct drm_minor * ) ;
   int (*gem_init_object)(struct drm_gem_object * ) ;
   void (*gem_free_object)(struct drm_gem_object * ) ;
   struct vm_operations_struct *gem_vm_ops ;
   int major ;
   int minor ;
   int patchlevel ;
   char *name ;
   char *desc ;
   char *date ;
   u32 driver_features ;
   int dev_priv_size ;
   struct drm_ioctl_desc *ioctls ;
   int num_ioctls ;
   struct file_operations fops ;
   struct pci_driver pci_driver ;
   struct list_head device_list ;
};
#line 797 "include/drm/drmP.h"
struct drm_minor {
   int index ;
   int type ;
   dev_t device ;
   struct device kdev ;
   struct drm_device *dev ;
   struct proc_dir_entry *dev_root ;
   struct drm_master *master ;
   struct list_head master_list ;
   struct drm_mode_group mode_group ;
};
#line 817 "include/drm/drmP.h"
struct drm_device {
   struct list_head driver_item ;
   char *devname ;
   int if_version ;
   spinlock_t count_lock ;
   struct mutex struct_mutex ;
   int open_count ;
   atomic_t ioctl_count ;
   atomic_t vma_count ;
   int buf_use ;
   atomic_t buf_alloc ;
   unsigned long counters ;
   enum drm_stat_type types[15U] ;
   atomic_t counts[15U] ;
   struct list_head filelist ;
   struct list_head maplist ;
   int map_count ;
   struct drm_open_hash map_hash ;
   struct list_head ctxlist ;
   int ctx_count ;
   struct mutex ctxlist_mutex ;
   struct idr ctx_idr ;
   struct list_head vmalist ;
   int queue_count ;
   int queue_reserved ;
   int queue_slots ;
   struct drm_queue **queuelist ;
   struct drm_device_dma *dma ;
   int irq_enabled ;
   long volatile   context_flag ;
   long volatile   interrupt_flag ;
   long volatile   dma_flag ;
   struct timer_list timer ;
   wait_queue_head_t context_wait ;
   int last_checked ;
   int last_context ;
   unsigned long last_switch ;
   struct work_struct work ;
   int vblank_disable_allowed ;
   wait_queue_head_t *vbl_queue ;
   atomic_t *_vblank_count ;
   spinlock_t vbl_lock ;
   struct list_head *vbl_sigs ;
   atomic_t vbl_signal_pending ;
   atomic_t *vblank_refcount ;
   u32 *last_vblank ;
   int *vblank_enabled ;
   int *vblank_inmodeset ;
   struct timer_list vblank_disable_timer ;
   u32 max_vblank_count ;
   cycles_t ctx_start ;
   cycles_t lck_start ;
   struct fasync_struct *buf_async ;
   wait_queue_head_t buf_readers ;
   wait_queue_head_t buf_writers ;
   struct drm_agp_head *agp ;
   struct pci_dev *pdev ;
   int pci_vendor ;
   int pci_device ;
   struct drm_sg_mem *sg ;
   int num_crtcs ;
   void *dev_private ;
   void *mm_private ;
   struct address_space *dev_mapping ;
   struct drm_sigdata sigdata ;
   sigset_t sigmask ;
   struct drm_driver *driver ;
   drm_local_map_t *agp_buffer_map ;
   unsigned int agp_buffer_token ;
   struct drm_minor *control ;
   struct drm_minor *primary ;
   spinlock_t drw_lock ;
   struct idr drw_idr ;
   struct drm_mode_config mode_config ;
   spinlock_t object_name_lock ;
   struct idr object_name_idr ;
   atomic_t object_count ;
   atomic_t object_memory ;
   atomic_t pin_count ;
   atomic_t pin_memory ;
   atomic_t gtt_count ;
   atomic_t gtt_memory ;
   uint32_t gtt_total ;
   uint32_t invalidate_domains ;
   uint32_t flush_domains ;
};
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/iomap.h"
struct io_mapping;
#line 127 "include/linux/io-mapping.h"
struct _drm_i915_ring_buffer {
   int tail_mask ;
   unsigned long Size ;
   u8 *virtual_start ;
   int head ;
   int tail ;
   int space ;
   drm_local_map_t map ;
   struct drm_gem_object *ring_obj ;
};
#line 84 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_ring_buffer drm_i915_ring_buffer_t;
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct mem_block {
   struct mem_block *next ;
   struct mem_block *prev ;
   int start ;
   int size ;
   struct drm_file *file_priv ;
};
#line 93
struct opregion_header;
#line 94
struct opregion_acpi;
#line 95
struct opregion_swsci;
#line 96
struct opregion_asle;
#line 97 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_opregion {
   struct opregion_header *header ;
   struct opregion_acpi *acpi ;
   struct opregion_swsci *swsci ;
   struct opregion_asle *asle ;
   int enabled ;
};
#line 111 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_fence_reg {
   struct drm_gem_object *obj ;
};
#line 116 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_124 {
   struct drm_mm gtt_space ;
   struct io_mapping *gtt_mapping ;
   struct list_head active_list ;
   struct list_head flushing_list ;
   struct list_head inactive_list ;
   struct list_head request_list ;
   struct delayed_work retire_work ;
   uint32_t next_gem_seqno ;
   uint32_t waiting_gem_seqno ;
   uint32_t irq_gem_seqno ;
   int suspended ;
   int wedged ;
   uint32_t bit_6_swizzle_x ;
   uint32_t bit_6_swizzle_y ;
};
#line 116 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_private {
   struct drm_device *dev ;
   int has_gem ;
   void *regs ;
   drm_i915_ring_buffer_t ring ;
   drm_dma_handle_t *status_page_dmah ;
   void *hw_status_page ;
   dma_addr_t dma_status_page ;
   uint32_t counter ;
   unsigned int status_gfx_addr ;
   drm_local_map_t hws_map ;
   struct drm_gem_object *hws_obj ;
   unsigned int cpp ;
   int back_offset ;
   int front_offset ;
   int current_page ;
   int page_flipping ;
   wait_queue_head_t irq_queue ;
   atomic_t irq_received ;
   spinlock_t user_irq_lock ;
   int user_irq_refcount ;
   u32 irq_mask_reg ;
   u32 pipestat[2U] ;
   int tex_lru_log_granularity ;
   int allow_batchbuffer ;
   struct mem_block *agp_heap ;
   unsigned int sr01 ;
   unsigned int adpa ;
   unsigned int ppcr ;
   unsigned int dvob ;
   unsigned int dvoc ;
   unsigned int lvds ;
   int vblank_pipe ;
   bool cursor_needs_physical ;
   struct drm_mm vram ;
   int irq_enabled ;
   struct intel_opregion opregion ;
   int backlight_duty_cycle ;
   bool panel_wants_dither ;
   struct drm_display_mode *panel_fixed_mode ;
   struct drm_display_mode *vbt_mode ;
   unsigned char int_tv_support : 1 ;
   unsigned char lvds_dither : 1 ;
   unsigned char lvds_vbt : 1 ;
   unsigned char int_crt_support : 1 ;
   struct drm_i915_fence_reg fence_regs[16U] ;
   int fence_reg_start ;
   int num_fence_regs ;
   u8 saveLBB ;
   u32 saveDSPACNTR ;
   u32 saveDSPBCNTR ;
   u32 saveDSPARB ;
   u32 saveRENDERSTANDBY ;
   u32 saveHWS ;
   u32 savePIPEACONF ;
   u32 savePIPEBCONF ;
   u32 savePIPEASRC ;
   u32 savePIPEBSRC ;
   u32 saveFPA0 ;
   u32 saveFPA1 ;
   u32 saveDPLL_A ;
   u32 saveDPLL_A_MD ;
   u32 saveHTOTAL_A ;
   u32 saveHBLANK_A ;
   u32 saveHSYNC_A ;
   u32 saveVTOTAL_A ;
   u32 saveVBLANK_A ;
   u32 saveVSYNC_A ;
   u32 saveBCLRPAT_A ;
   u32 savePIPEASTAT ;
   u32 saveDSPASTRIDE ;
   u32 saveDSPASIZE ;
   u32 saveDSPAPOS ;
   u32 saveDSPAADDR ;
   u32 saveDSPASURF ;
   u32 saveDSPATILEOFF ;
   u32 savePFIT_PGM_RATIOS ;
   u32 saveBLC_PWM_CTL ;
   u32 saveBLC_PWM_CTL2 ;
   u32 saveFPB0 ;
   u32 saveFPB1 ;
   u32 saveDPLL_B ;
   u32 saveDPLL_B_MD ;
   u32 saveHTOTAL_B ;
   u32 saveHBLANK_B ;
   u32 saveHSYNC_B ;
   u32 saveVTOTAL_B ;
   u32 saveVBLANK_B ;
   u32 saveVSYNC_B ;
   u32 saveBCLRPAT_B ;
   u32 savePIPEBSTAT ;
   u32 saveDSPBSTRIDE ;
   u32 saveDSPBSIZE ;
   u32 saveDSPBPOS ;
   u32 saveDSPBADDR ;
   u32 saveDSPBSURF ;
   u32 saveDSPBTILEOFF ;
   u32 saveVGA0 ;
   u32 saveVGA1 ;
   u32 saveVGA_PD ;
   u32 saveVGACNTRL ;
   u32 saveADPA ;
   u32 saveLVDS ;
   u32 savePP_ON_DELAYS ;
   u32 savePP_OFF_DELAYS ;
   u32 saveDVOA ;
   u32 saveDVOB ;
   u32 saveDVOC ;
   u32 savePP_ON ;
   u32 savePP_OFF ;
   u32 savePP_CONTROL ;
   u32 savePP_DIVISOR ;
   u32 savePFIT_CONTROL ;
   u32 save_palette_a[256U] ;
   u32 save_palette_b[256U] ;
   u32 saveFBC_CFB_BASE ;
   u32 saveFBC_LL_BASE ;
   u32 saveFBC_CONTROL ;
   u32 saveFBC_CONTROL2 ;
   u32 saveIER ;
   u32 saveIIR ;
   u32 saveIMR ;
   u32 saveCACHE_MODE_0 ;
   u32 saveD_STATE ;
   u32 saveCG_2D_DIS ;
   u32 saveMI_ARB_STATE ;
   u32 saveSWF0[16U] ;
   u32 saveSWF1[16U] ;
   u32 saveSWF2[3U] ;
   u8 saveMSR ;
   u8 saveSR[8U] ;
   u8 saveGR[25U] ;
   u8 saveAR_INDEX ;
   u8 saveAR[21U] ;
   u8 saveDACMASK ;
   u8 saveDACDATA[768U] ;
   u8 saveCR[37U] ;
   struct __anonstruct_mm_124 mm ;
};
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
typedef int ldv_func_ret_type___1;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/sigcontext.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 220 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100U] ;
};
#line 63 "include/drm/drm.h"
typedef unsigned int drm_handle_t;
#line 67 "include/drm/drm.h"
struct drm_clip_rect {
   unsigned short x1 ;
   unsigned short y1 ;
   unsigned short x2 ;
   unsigned short y2 ;
};
#line 91 "include/drm/drm.h"
struct drm_tex_region {
   unsigned char next ;
   unsigned char prev ;
   unsigned char in_use ;
   unsigned char padding ;
   unsigned int age ;
};
#line 143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
enum ldv_19328 {
    I915_INIT_DMA = 1,
    I915_CLEANUP_DMA = 2,
    I915_RESUME_DMA = 3
} ;
#line 149 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct _drm_i915_init {
   enum ldv_19328 func ;
   unsigned int mmio_offset ;
   int sarea_priv_offset ;
   unsigned int ring_start ;
   unsigned int ring_end ;
   unsigned int ring_size ;
   unsigned int front_offset ;
   unsigned int back_offset ;
   unsigned int depth_offset ;
   unsigned int w ;
   unsigned int h ;
   unsigned int pitch ;
   unsigned int pitch_bits ;
   unsigned int back_pitch ;
   unsigned int depth_pitch ;
   unsigned int cpp ;
   unsigned int chipset ;
};
#line 64 "include/drm/i915_drm.h"
typedef struct _drm_i915_init drm_i915_init_t;
#line 65 "include/drm/i915_drm.h"
struct _drm_i915_sarea {
   struct drm_tex_region texList[256U] ;
   int last_upload ;
   int last_enqueue ;
   int last_dispatch ;
   int ctxOwner ;
   int texAge ;
   int pf_enabled ;
   int pf_active ;
   int pf_current_page ;
   int perf_boxes ;
   int width ;
   int height ;
   drm_handle_t front_handle ;
   int front_offset ;
   int front_size ;
   drm_handle_t back_handle ;
   int back_offset ;
   int back_size ;
   drm_handle_t depth_handle ;
   int depth_offset ;
   int depth_size ;
   drm_handle_t tex_handle ;
   int tex_offset ;
   int tex_size ;
   int log_tex_granularity ;
   int pitch ;
   int rotation ;
   int rotated_offset ;
   int rotated_size ;
   int rotated_pitch ;
   int virtualX ;
   int virtualY ;
   unsigned int front_tiled ;
   unsigned int back_tiled ;
   unsigned int depth_tiled ;
   unsigned int rotated_tiled ;
   unsigned int rotated2_tiled ;
   int pipeA_x ;
   int pipeA_y ;
   int pipeA_w ;
   int pipeA_h ;
   int pipeB_x ;
   int pipeB_y ;
   int pipeB_w ;
   int pipeB_h ;
   drm_handle_t unused_handle ;
   uint32_t unused1 ;
   uint32_t unused2 ;
   uint32_t unused3 ;
   uint32_t front_bo_handle ;
   uint32_t back_bo_handle ;
   uint32_t unused_bo_handle ;
   uint32_t depth_bo_handle ;
};
#line 129 "include/drm/i915_drm.h"
typedef struct _drm_i915_sarea drm_i915_sarea_t;
#line 130 "include/drm/i915_drm.h"
struct drm_i915_batchbuffer {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 233 "include/drm/i915_drm.h"
typedef struct drm_i915_batchbuffer drm_i915_batchbuffer_t;
#line 234 "include/drm/i915_drm.h"
struct _drm_i915_cmdbuffer {
   char *buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 245 "include/drm/i915_drm.h"
typedef struct _drm_i915_cmdbuffer drm_i915_cmdbuffer_t;
#line 256 "include/drm/i915_drm.h"
struct drm_i915_getparam {
   int param ;
   int *value ;
};
#line 268 "include/drm/i915_drm.h"
typedef struct drm_i915_getparam drm_i915_getparam_t;
#line 269 "include/drm/i915_drm.h"
struct drm_i915_setparam {
   int param ;
   int value ;
};
#line 279 "include/drm/i915_drm.h"
typedef struct drm_i915_setparam drm_i915_setparam_t;
#line 326 "include/drm/i915_drm.h"
struct drm_i915_hws_addr {
   uint64_t addr ;
};
#line 329 "include/drm/i915_drm.h"
typedef struct drm_i915_hws_addr drm_i915_hws_addr_t;
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_master_private {
   drm_local_map_t *sarea ;
   struct _drm_i915_sarea *sarea_priv ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct drm_i915_private drm_i915_private_t;
#line 460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_125 {
   uint32_t last_gem_seqno ;
   uint32_t last_gem_throttle_seqno ;
};
#line 460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_file_private {
   struct __anonstruct_mm_125 mm ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 246 "include/drm/i915_drm.h"
struct drm_i915_irq_emit {
   int *irq_seq ;
};
#line 251 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_emit drm_i915_irq_emit_t;
#line 252 "include/drm/i915_drm.h"
struct drm_i915_irq_wait {
   int irq_seq ;
};
#line 255 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_wait drm_i915_irq_wait_t;
#line 309 "include/drm/i915_drm.h"
struct drm_i915_vblank_pipe {
   int pipe ;
};
#line 317 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_pipe drm_i915_vblank_pipe_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 280 "include/drm/i915_drm.h"
struct drm_i915_mem_alloc {
   int region ;
   int alignment ;
   int size ;
   int *region_offset ;
};
#line 290 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_alloc drm_i915_mem_alloc_t;
#line 291 "include/drm/i915_drm.h"
struct drm_i915_mem_free {
   int region ;
   int region_offset ;
};
#line 295 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_free drm_i915_mem_free_t;
#line 296 "include/drm/i915_drm.h"
struct drm_i915_mem_init_heap {
   int region ;
   int size ;
   int start ;
};
#line 301 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_init_heap drm_i915_mem_init_heap_t;
#line 302 "include/drm/i915_drm.h"
struct drm_i915_mem_destroy_heap {
   int region ;
};
#line 308 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_destroy_heap drm_i915_mem_destroy_heap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 122 "include/linux/io-mapping.h"
enum pipe {
    PIPE_A = 0,
    PIPE_B = 1
} ;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 118 "include/linux/types.h"
typedef __u8 uint8_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 59 "include/linux/agp_backend.h"
struct agp_memory {
   struct agp_memory *next ;
   struct agp_memory *prev ;
   struct agp_bridge_data *bridge ;
   unsigned long *memory ;
   size_t page_count ;
   int key ;
   int num_scratch_pages ;
   off_t pg_start ;
   u32 type ;
   u32 physical ;
   bool is_bound ;
   bool is_flushed ;
   bool vmalloc_flag ;
   struct list_head mapped_list ;
};
#line 229 "include/linux/pagemap.h"
typedef int filler_t(void * , struct page * );
#line 573 "include/drm/drmP.h"
struct drm_gem_mm {
   struct drm_mm offset_manager ;
   struct drm_open_hash offset_hash ;
};
#line 330 "include/drm/i915_drm.h"
struct drm_i915_gem_init {
   uint64_t gtt_start ;
   uint64_t gtt_end ;
};
#line 343 "include/drm/i915_drm.h"
struct drm_i915_gem_create {
   uint64_t size ;
   uint32_t handle ;
   uint32_t pad ;
};
#line 359 "include/drm/i915_drm.h"
struct drm_i915_gem_pread {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 375 "include/drm/i915_drm.h"
struct drm_i915_gem_pwrite {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 391 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t addr_ptr ;
};
#line 411 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap_gtt {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
};
#line 423 "include/drm/i915_drm.h"
struct drm_i915_gem_set_domain {
   uint32_t handle ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 434 "include/drm/i915_drm.h"
struct drm_i915_gem_sw_finish {
   uint32_t handle ;
};
#line 439 "include/drm/i915_drm.h"
struct drm_i915_gem_relocation_entry {
   uint32_t target_handle ;
   uint32_t delta ;
   uint64_t offset ;
   uint64_t presumed_offset ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 484 "include/drm/i915_drm.h"
struct drm_i915_gem_exec_object {
   uint32_t handle ;
   uint32_t relocation_count ;
   uint64_t relocs_ptr ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 532 "include/drm/i915_drm.h"
struct drm_i915_gem_execbuffer {
   uint64_t buffers_ptr ;
   uint32_t buffer_count ;
   uint32_t batch_start_offset ;
   uint32_t batch_len ;
   uint32_t DR1 ;
   uint32_t DR4 ;
   uint32_t num_cliprects ;
   uint64_t cliprects_ptr ;
};
#line 557 "include/drm/i915_drm.h"
struct drm_i915_gem_pin {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 575 "include/drm/i915_drm.h"
struct drm_i915_gem_busy {
   uint32_t handle ;
   uint32_t busy ;
};
#line 643 "include/drm/i915_drm.h"
struct drm_i915_gem_get_aperture {
   uint64_t aper_size ;
   uint64_t aper_available_size ;
};
#line 363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_object {
   struct drm_gem_object *obj ;
   struct drm_mm_node *gtt_space ;
   struct list_head list ;
   int active ;
   int dirty ;
   struct agp_memory *agp_mem ;
   struct page **page_list ;
   uint32_t gtt_offset ;
   uint32_t gtt_alignment ;
   uint64_t mmap_offset ;
   int fence_reg ;
   int gtt_bound ;
   int pin_count ;
   uint32_t last_rendering_seqno ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t agp_type ;
   uint8_t *page_cpu_valid ;
   uint32_t user_pin_count ;
   struct drm_file *pin_filp ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_request {
   uint32_t seqno ;
   unsigned long emitted_jiffies ;
   struct list_head list ;
};
#line 82 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
struct drm_proc_list {
   char const   *name ;
   int (*f)(char * , char ** , off_t  , int  , int * , void * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 583 "include/drm/i915_drm.h"
struct drm_i915_gem_set_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t swizzle_mode ;
};
#line 626 "include/drm/i915_drm.h"
struct drm_i915_gem_get_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t swizzle_mode ;
};
#line 119 "include/linux/types.h"
typedef __u16 uint16_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 389 "include/linux/mod_devicetable.h"
struct i2c_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 39 "include/linux/i2c.h"
struct i2c_msg;
#line 40
struct i2c_algorithm;
#line 41
struct i2c_adapter;
#line 42
struct i2c_client;
#line 43
struct i2c_driver;
#line 44
union i2c_smbus_data;
#line 45
struct i2c_board_info;
#line 94
struct i2c_client_address_data;
#line 94 "include/linux/i2c.h"
struct i2c_driver {
   int id ;
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*detach_client)(struct i2c_client * ) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t  ) ;
   int (*resume)(struct i2c_client * ) ;
   int (*command)(struct i2c_client * , unsigned int  , void * ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , int  , struct i2c_board_info * ) ;
   struct i2c_client_address_data  const  *address_data ;
   struct list_head clients ;
};
#line 181 "include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head list ;
   struct list_head detected ;
   struct completion released ;
};
#line 235 "include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   int irq ;
};
#line 311 "include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter * , struct i2c_msg * , int  ) ;
   int (*smbus_xfer)(struct i2c_adapter * , u16  , unsigned short  , char  , u8  ,
                     int  , union i2c_smbus_data * ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
#line 343 "include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int id ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   int (*client_register)(struct i2c_client * ) ;
   int (*client_unregister)(struct i2c_client * ) ;
   u8 level ;
   struct mutex bus_lock ;
   struct mutex clist_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   struct list_head clients ;
   char name[48U] ;
   struct completion dev_released ;
};
#line 384 "include/linux/i2c.h"
struct i2c_client_address_data {
   unsigned short const   *normal_i2c ;
   unsigned short const   *probe ;
   unsigned short const   *ignore ;
   unsigned short const   * const  *forces ;
};
#line 476 "include/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 527 "include/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 1101 "include/linux/fb.h"
struct drm_mode_set;
#line 170 "include/drm/drm_crtc.h"
enum drm_connector_status {
    connector_status_connected = 1,
    connector_status_disconnected = 2,
    connector_status_unknown = 3
} ;
#line 176
enum subpixel_order {
    SubPixelUnknown = 0,
    SubPixelHorizontalRGB = 1,
    SubPixelHorizontalBGR = 2,
    SubPixelVerticalRGB = 3,
    SubPixelVerticalBGR = 4,
    SubPixelNone = 5
} ;
#line 185
enum ldv_18719 {
    monochrome = 0,
    rgb = 1,
    other = 2,
    unknown = 3
} ;
#line 192 "include/drm/drm_crtc.h"
struct drm_display_info {
   char name[32U] ;
   bool serration_vsync ;
   bool sync_on_green ;
   bool composite_sync ;
   bool separate_syncs ;
   bool blank_to_black ;
   unsigned char video_level ;
   bool digital ;
   unsigned int width_mm ;
   unsigned int height_mm ;
   unsigned char gamma ;
   bool gtf_supported ;
   bool standard_color ;
   enum ldv_18719 display_type ;
   bool active_off_supported ;
   bool suspend_supported ;
   bool standby_supported ;
   unsigned short redx ;
   unsigned short redy ;
   unsigned short greenx ;
   unsigned short greeny ;
   unsigned short bluex ;
   unsigned short bluey ;
   unsigned short whitex ;
   unsigned short whitey ;
   unsigned int min_vfreq ;
   unsigned int max_vfreq ;
   unsigned int min_hfreq ;
   unsigned int max_hfreq ;
   unsigned int pixel_clock ;
   unsigned int wpx1 ;
   unsigned int wpy1 ;
   unsigned int wpgamma1 ;
   unsigned int wpx2 ;
   unsigned int wpy2 ;
   unsigned int wpgamma2 ;
   enum subpixel_order subpixel_order ;
   char *raw_edid ;
};
#line 263 "include/drm/drm_crtc.h"
struct drm_property_blob {
   struct drm_mode_object base ;
   struct list_head head ;
   unsigned int length ;
   void *data ;
};
#line 287
struct drm_crtc;
#line 288
struct drm_connector;
#line 289
struct drm_encoder;
#line 290 "include/drm/drm_crtc.h"
struct drm_crtc_funcs {
   void (*save)(struct drm_crtc * ) ;
   void (*restore)(struct drm_crtc * ) ;
   int (*cursor_set)(struct drm_crtc * , struct drm_file * , uint32_t  , uint32_t  ,
                     uint32_t  ) ;
   int (*cursor_move)(struct drm_crtc * , int  , int  ) ;
   void (*gamma_set)(struct drm_crtc * , u16 * , u16 * , u16 * , uint32_t  ) ;
   void (*destroy)(struct drm_crtc * ) ;
   int (*set_config)(struct drm_mode_set * ) ;
};
#line 335 "include/drm/drm_crtc.h"
struct drm_crtc {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   struct drm_framebuffer *fb ;
   bool enabled ;
   struct drm_display_mode mode ;
   int x ;
   int y ;
   struct drm_display_mode *desired_mode ;
   int desired_x ;
   int desired_y ;
   struct drm_crtc_funcs  const  *funcs ;
   uint32_t gamma_size ;
   uint16_t *gamma_store ;
   void *helper_private ;
};
#line 374 "include/drm/drm_crtc.h"
struct drm_connector_funcs {
   void (*dpms)(struct drm_connector * , int  ) ;
   void (*save)(struct drm_connector * ) ;
   void (*restore)(struct drm_connector * ) ;
   enum drm_connector_status (*detect)(struct drm_connector * ) ;
   void (*fill_modes)(struct drm_connector * , uint32_t  , uint32_t  ) ;
   int (*set_property)(struct drm_connector * , struct drm_property * , uint64_t  ) ;
   void (*destroy)(struct drm_connector * ) ;
};
#line 403 "include/drm/drm_crtc.h"
struct drm_encoder_funcs {
   void (*destroy)(struct drm_encoder * ) ;
};
#line 407 "include/drm/drm_crtc.h"
struct drm_encoder {
   struct drm_device *dev ;
   struct list_head head ;
   struct drm_mode_object base ;
   int encoder_type ;
   uint32_t possible_crtcs ;
   uint32_t possible_clones ;
   struct drm_crtc *crtc ;
   struct drm_encoder_funcs  const  *funcs ;
   void *helper_private ;
};
#line 429 "include/drm/drm_crtc.h"
struct drm_connector {
   struct drm_device *dev ;
   struct device kdev ;
   struct device_attribute *attr ;
   struct list_head head ;
   struct drm_mode_object base ;
   int connector_type ;
   int connector_type_id ;
   bool interlace_allowed ;
   bool doublescan_allowed ;
   struct list_head modes ;
   int initial_x ;
   int initial_y ;
   enum drm_connector_status status ;
   struct list_head probed_modes ;
   struct drm_display_info display_info ;
   struct drm_connector_funcs  const  *funcs ;
   struct list_head user_modes ;
   struct drm_property_blob *edid_blob_ptr ;
   u32 property_ids[16U] ;
   uint64_t property_values[16U] ;
   void *helper_private ;
   uint32_t encoder_ids[2U] ;
   uint32_t force_encoder_id ;
   struct drm_encoder *encoder ;
};
#line 480 "include/drm/drm_crtc.h"
struct drm_mode_set {
   struct list_head head ;
   struct drm_framebuffer *fb ;
   struct drm_crtc *crtc ;
   struct drm_display_mode *mode ;
   uint32_t x ;
   uint32_t y ;
   struct drm_connector **connectors ;
   size_t num_connectors ;
};
#line 1441 "include/drm/drmP.h"
struct i2c_algo_bit_data {
   void *data ;
   void (*setsda)(void * , int  ) ;
   void (*setscl)(void * , int  ) ;
   int (*getsda)(void * ) ;
   int (*getscl)(void * ) ;
   int udelay ;
   int timeout ;
};
#line 50 "include/linux/i2c-algo-bit.h"
struct drm_crtc_helper_funcs {
   void (*dpms)(struct drm_crtc * , int  ) ;
   void (*prepare)(struct drm_crtc * ) ;
   void (*commit)(struct drm_crtc * ) ;
   bool (*mode_fixup)(struct drm_crtc * , struct drm_display_mode * , struct drm_display_mode * ) ;
   void (*mode_set)(struct drm_crtc * , struct drm_display_mode * , struct drm_display_mode * ,
                    int  , int  ) ;
   void (*mode_set_base)(struct drm_crtc * , int  , int  ) ;
};
#line 63 "include/drm/drm_crtc_helper.h"
struct drm_encoder_helper_funcs {
   void (*dpms)(struct drm_encoder * , int  ) ;
   void (*save)(struct drm_encoder * ) ;
   void (*restore)(struct drm_encoder * ) ;
   bool (*mode_fixup)(struct drm_encoder * , struct drm_display_mode * , struct drm_display_mode * ) ;
   void (*prepare)(struct drm_encoder * ) ;
   void (*commit)(struct drm_encoder * ) ;
   void (*mode_set)(struct drm_encoder * , struct drm_display_mode * , struct drm_display_mode * ) ;
   enum drm_connector_status (*detect)(struct drm_encoder * , struct drm_connector * ) ;
};
#line 121 "include/drm/drm_crtc_helper.h"
struct intel_i2c_chan {
   struct drm_device *drm_dev ;
   u32 reg ;
   struct i2c_adapter adapter ;
   struct i2c_algo_bit_data algo ;
   u8 slave_addr ;
};
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_framebuffer {
   struct drm_framebuffer base ;
   struct drm_gem_object *obj ;
};
#line 74 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_output {
   struct drm_connector base ;
   struct drm_encoder enc ;
   int type ;
   struct intel_i2c_chan *i2c_bus ;
   struct intel_i2c_chan *ddc_bus ;
   bool load_detect_temp ;
   void *dev_priv ;
};
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_crtc {
   struct drm_crtc base ;
   int pipe ;
   int plane ;
   uint32_t cursor_addr ;
   u8 lut_r[256U] ;
   u8 lut_g[256U] ;
   u8 lut_b[256U] ;
   int dpms_mode ;
   struct intel_framebuffer *fbdev_fb ;
   struct drm_mode_set mode_set ;
};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct __anonstruct_intel_clock_t_126 {
   int n ;
   int m1 ;
   int m2 ;
   int p1 ;
   int p2 ;
   int dot ;
   int vco ;
   int m ;
   int p ;
};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
typedef struct __anonstruct_intel_clock_t_126 intel_clock_t;
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct __anonstruct_intel_range_t_127 {
   int min ;
   int max ;
};
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
typedef struct __anonstruct_intel_range_t_127 intel_range_t;
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct __anonstruct_intel_p2_t_128 {
   int dot_limit ;
   int p2_slow ;
   int p2_fast ;
};
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
typedef struct __anonstruct_intel_p2_t_128 intel_p2_t;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct __anonstruct_intel_limit_t_129 {
   intel_range_t dot ;
   intel_range_t vco ;
   intel_range_t n ;
   intel_range_t m ;
   intel_range_t m1 ;
   intel_range_t m2 ;
   intel_range_t p ;
   intel_range_t p1 ;
   intel_p2_t p2 ;
};
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
typedef struct __anonstruct_intel_limit_t_129 intel_limit_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 80 "include/drm/drm_crtc_helper.h"
struct drm_connector_helper_funcs {
   int (*get_modes)(struct drm_connector * ) ;
   int (*mode_valid)(struct drm_connector * , struct drm_display_mode * ) ;
   struct drm_encoder *(*best_encoder)(struct drm_connector * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 182
enum hrtimer_restart;
#line 654 "include/drm/i915_drm.h"
struct vbt_header {
   u8 signature[20U] ;
   u16 version ;
   u16 header_size ;
   u16 vbt_size ;
   u8 vbt_checksum ;
   u8 reserved0 ;
   u32 bdb_offset ;
   u32 aim_offset[4U] ;
};
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_header {
   u8 signature[16U] ;
   u16 version ;
   u16 header_size ;
   u16 bdb_size ;
};
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_general_features {
   unsigned char panel_fitting : 2 ;
   unsigned char flexaim : 1 ;
   unsigned char msg_enable : 1 ;
   unsigned char clear_screen : 3 ;
   unsigned char color_flip : 1 ;
   unsigned char download_ext_vbt : 1 ;
   unsigned char enable_ssc : 1 ;
   unsigned char ssc_freq : 1 ;
   unsigned char enable_lfp_on_override : 1 ;
   unsigned char disable_ssc_ddt : 1 ;
   unsigned char rsvd8 : 3 ;
   unsigned char disable_smooth_vision : 1 ;
   unsigned char single_dvi : 1 ;
   unsigned char rsvd9 : 6 ;
   u8 legacy_monitor_detect ;
   unsigned char int_crt_support : 1 ;
   unsigned char int_tv_support : 1 ;
   unsigned char rsvd11 : 6 ;
};
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_options {
   u8 panel_type ;
   u8 rsvd1 ;
   unsigned char rsvd2 : 1 ;
   unsigned char lvds_edid : 1 ;
   unsigned char pixel_dither : 1 ;
   unsigned char pfit_ratio_auto : 1 ;
   unsigned char pfit_gfx_mode_enhanced : 1 ;
   unsigned char pfit_text_mode_enhanced : 1 ;
   unsigned char pfit_mode : 2 ;
   u8 rsvd4 ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_fp_timing {
   u16 x_res ;
   u16 y_res ;
   u32 lvds_reg ;
   u32 lvds_reg_val ;
   u32 pp_on_reg ;
   u32 pp_on_reg_val ;
   u32 pp_off_reg ;
   u32 pp_off_reg_val ;
   u32 pp_cycle_reg ;
   u32 pp_cycle_reg_val ;
   u32 pfit_reg ;
   u32 pfit_reg_val ;
   u16 terminator ;
};
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_dvo_timing {
   u16 clock ;
   u8 hactive_lo ;
   u8 hblank_lo ;
   unsigned char hblank_hi : 4 ;
   unsigned char hactive_hi : 4 ;
   u8 vactive_lo ;
   u8 vblank_lo ;
   unsigned char vblank_hi : 4 ;
   unsigned char vactive_hi : 4 ;
   u8 hsync_off_lo ;
   u8 hsync_pulse_width ;
   unsigned char vsync_pulse_width : 4 ;
   unsigned char vsync_off : 4 ;
   unsigned char rsvd0 : 6 ;
   unsigned char hsync_off_hi : 2 ;
   u8 h_image ;
   u8 v_image ;
   u8 max_hv ;
   u8 h_border ;
   u8 v_border ;
   unsigned char rsvd1 : 3 ;
   unsigned char digital : 2 ;
   unsigned char vsync_positive : 1 ;
   unsigned char hsync_positive : 1 ;
   unsigned char rsvd2 : 1 ;
};
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct lvds_pnp_id {
   u16 mfg_name ;
   u16 product_code ;
   u32 serial ;
   u8 mfg_week ;
   u8 mfg_year ;
};
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_lfp_data_entry {
   struct lvds_fp_timing fp_timing ;
   struct lvds_dvo_timing dvo_timing ;
   struct lvds_pnp_id pnp_id ;
};
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
struct bdb_lvds_lfp_data {
   struct bdb_lvds_lfp_data_entry data[16U] ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 720 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_sdvo_caps {
   u8 vendor_id ;
   u8 device_id ;
   u8 device_rev_id ;
   u8 sdvo_version_major ;
   u8 sdvo_version_minor ;
   unsigned char sdvo_inputs_mask : 2 ;
   unsigned char smooth_scaling : 1 ;
   unsigned char sharp_scaling : 1 ;
   unsigned char up_scaling : 1 ;
   unsigned char down_scaling : 1 ;
   unsigned char stall_support : 1 ;
   unsigned char pad : 1 ;
   u16 output_flags ;
};
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct __anonstruct_part1_126 {
   u16 clock ;
   u8 h_active ;
   u8 h_blank ;
   u8 h_high ;
   u8 v_active ;
   u8 v_blank ;
   u8 v_high ;
};
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct __anonstruct_part2_127 {
   u8 h_sync_off ;
   u8 h_sync_width ;
   u8 v_sync_off_width ;
   u8 sync_off_width_high ;
   u8 dtd_flags ;
   u8 sdvo_flags ;
   u8 v_sync_off_high ;
   u8 reserved ;
};
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_dtd {
   struct __anonstruct_part1_126 part1 ;
   struct __anonstruct_part2_127 part2 ;
};
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_pixel_clock_range {
   u16 min ;
   u16 max ;
};
#line 104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_get_trained_inputs_response {
   unsigned char input0_trained : 1 ;
   unsigned char input1_trained : 1 ;
   unsigned char pad : 6 ;
};
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_set_target_input_args {
   unsigned char target_1 : 1 ;
   unsigned char pad : 7 ;
};
#line 224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_sdvo_regs.h"
struct intel_sdvo_priv {
   struct intel_i2c_chan *i2c_bus ;
   int slaveaddr ;
   int output_device ;
   u16 active_outputs ;
   struct intel_sdvo_caps caps ;
   int pixel_clock_min ;
   int pixel_clock_max ;
   int save_sdvo_mult ;
   u16 save_active_outputs ;
   struct intel_sdvo_dtd save_input_dtd_1 ;
   struct intel_sdvo_dtd save_input_dtd_2 ;
   struct intel_sdvo_dtd save_output_dtd[16U] ;
   u32 save_SDVOX ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 613 "include/drm/drm_crtc.h"
struct edid;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 144 "include/linux/kernel.h"
struct atomic_notifier_head;
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 55 "include/linux/notifier.h"
struct atomic_notifier_head {
   spinlock_t lock ;
   struct notifier_block *head ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 35 "include/linux/cdev.h"
struct tty_driver;
#line 36 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*read_proc)(char * , char ** , off_t  , int  , int * , void * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
};
#line 269 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 320 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 68 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 78 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 196 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 487 "include/linux/tty.h"
struct sysrq_key_op {
   void (*handler)(int  , struct tty_struct * ) ;
   char *help_msg ;
   char *action_msg ;
   int enable_mask ;
};
#line 577 "include/linux/i2c.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3U] ;
};
#line 171 "include/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 183 "include/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5U] ;
};
#line 269 "include/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 325 "include/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 338 "include/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 347 "include/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 359 "include/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 375 "include/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 384
struct backlight_device;
#line 385
struct fb_info;
#line 386 "include/linux/fb.h"
struct backlight_ops {
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
#line 43 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
};
#line 56 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 442 "include/linux/fb.h"
struct fb_videomode;
#line 442 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   unsigned char gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 545 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 556 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info * , void * , void * , unsigned int  ) ;
   void (*readio)(struct fb_info * , void * , void * , unsigned int  ) ;
};
#line 585 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info * , struct list_head * ) ;
};
#line 595 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info * , int  ) ;
   int (*fb_release)(struct fb_info * , int  ) ;
   ssize_t (*fb_read)(struct fb_info * , char * , size_t  , loff_t * ) ;
   ssize_t (*fb_write)(struct fb_info * , char const   * , size_t  , loff_t * ) ;
   int (*fb_check_var)(struct fb_var_screeninfo * , struct fb_info * ) ;
   int (*fb_set_par)(struct fb_info * ) ;
   int (*fb_setcolreg)(unsigned int  , unsigned int  , unsigned int  , unsigned int  ,
                       unsigned int  , struct fb_info * ) ;
   int (*fb_setcmap)(struct fb_cmap * , struct fb_info * ) ;
   int (*fb_blank)(int  , struct fb_info * ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo * , struct fb_info * ) ;
   void (*fb_fillrect)(struct fb_info * , struct fb_fillrect  const  * ) ;
   void (*fb_copyarea)(struct fb_info * , struct fb_copyarea  const  * ) ;
   void (*fb_imageblit)(struct fb_info * , struct fb_image  const  * ) ;
   int (*fb_cursor)(struct fb_info * , struct fb_cursor * ) ;
   void (*fb_rotate)(struct fb_info * , int  ) ;
   int (*fb_sync)(struct fb_info * ) ;
   int (*fb_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_compat_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_mmap)(struct fb_info * , struct vm_area_struct * ) ;
   void (*fb_save_state)(struct fb_info * ) ;
   void (*fb_restore_state)(struct fb_info * ) ;
   void (*fb_get_caps)(struct fb_info * , struct fb_blit_caps * , struct fb_var_screeninfo * ) ;
};
#line 675 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 692 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 704 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 713 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 724 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 733 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info * , struct fb_tilemap * ) ;
   void (*fb_tilecopy)(struct fb_info * , struct fb_tilearea * ) ;
   void (*fb_tilefill)(struct fb_info * , struct fb_tilerect * ) ;
   void (*fb_tileblit)(struct fb_info * , struct fb_tileblit * ) ;
   void (*fb_tilecursor)(struct fb_info * , struct fb_tilecursor * ) ;
   int (*fb_get_tilemax)(struct fb_info * ) ;
};
#line 752 "include/linux/fb.h"
struct fb_info {
   int node ;
   int flags ;
   struct mutex lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
};
#line 1074 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 720 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intelfb_par {
   struct drm_device *dev ;
   struct drm_display_mode *our_mode ;
   struct intel_framebuffer *intel_fb ;
   int crtc_count ;
   uint32_t crtc_ids[2U] ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 727 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_tv_priv {
   int type ;
   char *tv_format ;
   int margin[4U] ;
   u32 save_TV_H_CTL_1 ;
   u32 save_TV_H_CTL_2 ;
   u32 save_TV_H_CTL_3 ;
   u32 save_TV_V_CTL_1 ;
   u32 save_TV_V_CTL_2 ;
   u32 save_TV_V_CTL_3 ;
   u32 save_TV_V_CTL_4 ;
   u32 save_TV_V_CTL_5 ;
   u32 save_TV_V_CTL_6 ;
   u32 save_TV_V_CTL_7 ;
   u32 save_TV_SC_CTL_1 ;
   u32 save_TV_SC_CTL_2 ;
   u32 save_TV_SC_CTL_3 ;
   u32 save_TV_CSC_Y ;
   u32 save_TV_CSC_Y2 ;
   u32 save_TV_CSC_U ;
   u32 save_TV_CSC_U2 ;
   u32 save_TV_CSC_V ;
   u32 save_TV_CSC_V2 ;
   u32 save_TV_CLR_KNOBS ;
   u32 save_TV_CLR_LEVEL ;
   u32 save_TV_WIN_POS ;
   u32 save_TV_WIN_SIZE ;
   u32 save_TV_FILTER_CTL_1 ;
   u32 save_TV_FILTER_CTL_2 ;
   u32 save_TV_FILTER_CTL_3 ;
   u32 save_TV_H_LUMA[60U] ;
   u32 save_TV_H_CHROMA[60U] ;
   u32 save_TV_V_LUMA[43U] ;
   u32 save_TV_V_CHROMA[43U] ;
   u32 save_TV_DAC ;
   u32 save_TV_CTL ;
};
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
struct video_levels {
   int blank ;
   int black ;
   int burst ;
};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
struct color_conversion {
   u16 ry ;
   u16 gy ;
   u16 by ;
   u16 ay ;
   u16 ru ;
   u16 gu ;
   u16 bu ;
   u16 au ;
   u16 rv ;
   u16 gv ;
   u16 bv ;
   u16 av ;
};
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
struct tv_mode {
   char *name ;
   int clock ;
   int refresh ;
   u32 oversample ;
   int hsync_end ;
   int hblank_start ;
   int hblank_end ;
   int htotal ;
   bool progressive ;
   bool trilevel_sync ;
   bool component_only ;
   int vsync_start_f1 ;
   int vsync_start_f2 ;
   int vsync_len ;
   bool veq_ena ;
   int veq_start_f1 ;
   int veq_start_f2 ;
   int veq_len ;
   int vi_end_f1 ;
   int vi_end_f2 ;
   int nbr_end ;
   bool burst_ena ;
   int hburst_start ;
   int hburst_len ;
   int vburst_start_f1 ;
   int vburst_end_f1 ;
   int vburst_start_f2 ;
   int vburst_end_f2 ;
   int vburst_start_f3 ;
   int vburst_end_f3 ;
   int vburst_start_f4 ;
   int vburst_end_f4 ;
   int dda2_size ;
   int dda3_size ;
   int dda1_inc ;
   int dda2_inc ;
   int dda3_inc ;
   u32 sc_reset ;
   bool pal_burst ;
   struct video_levels  const  *composite_levels ;
   struct video_levels  const  *svideo_levels ;
   struct color_conversion  const  *composite_color ;
   struct color_conversion  const  *svideo_color ;
   u32 const   *filter_table ;
   int max_srcw ;
};
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
struct input_res {
   char *name ;
   int w ;
   int h ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 720 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_dvo_dev_ops;
#line 720 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_dvo_device {
   char *name ;
   int type ;
   u32 dvo_reg ;
   u32 gpio ;
   int slave_addr ;
   struct intel_i2c_chan *i2c_bus ;
   struct intel_dvo_dev_ops  const  *dev_ops ;
   void *dev_priv ;
   struct drm_display_mode *panel_fixed_mode ;
   bool panel_wants_dither ;
};
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_dev_ops {
   bool (*init)(struct intel_dvo_device * , struct intel_i2c_chan * ) ;
   void (*create_resources)(struct intel_dvo_device * ) ;
   void (*dpms)(struct intel_dvo_device * , int  ) ;
   void (*save)(struct intel_dvo_device * ) ;
   void (*restore)(struct intel_dvo_device * ) ;
   int (*mode_valid)(struct intel_dvo_device * , struct drm_display_mode * ) ;
   bool (*mode_fixup)(struct intel_dvo_device * , struct drm_display_mode * , struct drm_display_mode * ) ;
   void (*prepare)(struct intel_dvo_device * ) ;
   void (*commit)(struct intel_dvo_device * ) ;
   void (*mode_set)(struct intel_dvo_device * , struct drm_display_mode * , struct drm_display_mode * ) ;
   enum drm_connector_status (*detect)(struct intel_dvo_device * ) ;
   struct drm_display_mode *(*get_modes)(struct intel_dvo_device * ) ;
   void (*destroy)(struct intel_dvo_device * ) ;
   void (*dump_regs)(struct intel_dvo_device * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct ch7xxx_id_struct {
   uint8_t vid ;
   char *name ;
};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
struct ch7xxx_reg_state {
   uint8_t regs[76U] ;
};
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
struct ch7xxx_priv {
   bool quiet ;
   struct ch7xxx_reg_state save_reg ;
   struct ch7xxx_reg_state mode_reg ;
   uint8_t save_TCTL ;
   uint8_t save_TPCP ;
   uint8_t save_TPD ;
   uint8_t save_TPVT ;
   uint8_t save_TLPF ;
   uint8_t save_TCT ;
   uint8_t save_PM ;
   uint8_t save_IDF ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct ch7017_priv {
   uint8_t save_hapi ;
   uint8_t save_vali ;
   uint8_t save_valo ;
   uint8_t save_ailo ;
   uint8_t save_lvds_pll_vco ;
   uint8_t save_feedback_div ;
   uint8_t save_lvds_control_2 ;
   uint8_t save_outputs_enable ;
   uint8_t save_lvds_power_down ;
   uint8_t save_power_management ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct ivch_priv {
   bool quiet ;
   uint16_t width ;
   uint16_t height ;
   uint16_t save_VR01 ;
   uint16_t save_VR40 ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct tfp410_save_rec {
   uint8_t ctl1 ;
   uint8_t ctl2 ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct tfp410_priv {
   bool quiet ;
   struct tfp410_save_rec saved_reg ;
   struct tfp410_save_rec mode_reg ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct sil164_save_rec {
   uint8_t reg8 ;
   uint8_t reg9 ;
   uint8_t regc ;
};
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
struct sil164_priv {
   bool quiet ;
   struct sil164_save_rec save_regs ;
   struct sil164_save_rec mode_regs ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 720 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct opregion_header {
   u8 signature[16U] ;
   u32 size ;
   u32 opregion_ver ;
   u8 bios_ver[32U] ;
   u8 vbios_ver[16U] ;
   u8 driver_ver[16U] ;
   u32 mboxes ;
   u8 reserved[164U] ;
};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_acpi {
   u32 drdy ;
   u32 csts ;
   u32 cevt ;
   u8 rsvd1[20U] ;
   u32 didl[8U] ;
   u32 cpdl[8U] ;
   u32 cadl[8U] ;
   u32 nadl[8U] ;
   u32 aslp ;
   u32 tidx ;
   u32 chpd ;
   u32 clid ;
   u32 cdck ;
   u32 sxsw ;
   u32 evts ;
   u32 cnot ;
   u32 nrdy ;
   u8 rsvd2[60U] ;
};
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_swsci {
   u32 scic ;
   u32 parm ;
   u32 dslp ;
   u8 rsvd[244U] ;
};
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_asle {
   u32 ardy ;
   u32 aslc ;
   u32 tche ;
   u32 alsi ;
   u32 bclp ;
   u32 pfit ;
   u32 cblv ;
   u16 bclm[20U] ;
   u32 cpfm ;
   u32 epfm ;
   u8 plut[74U] ;
   u32 pfmb ;
   u8 rsvd[102U] ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 274 "include/drm/drmP.h"
typedef int drm_ioctl_compat_t(struct file * , unsigned int  , unsigned long  );
#line 654 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer32 {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_batchbuffer32 drm_i915_batchbuffer32_t;
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct _drm_i915_cmdbuffer32 {
   u32 buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_cmdbuffer32 drm_i915_cmdbuffer32_t;
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_irq_emit32 {
   u32 irq_seq ;
};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_irq_emit32 drm_i915_irq_emit32_t;
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_getparam32 {
   int param ;
   u32 value ;
};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_getparam32 drm_i915_getparam32_t;
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_mem_alloc32 {
   int region ;
   int alignment ;
   int size ;
   u32 region_offset ;
};
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_mem_alloc32 drm_i915_mem_alloc32_t;
#line 221 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) ;
#line 38
extern void __ldv_spin_unlock(spinlock_t * ) ;
#line 41
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) ;
#line 75
extern int __ldv_spin_trylock(spinlock_t * ) ;
#line 78
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) ;
#line 84
void ldv_spin_lock_alloc_lock_of_task_struct(void) ;
#line 85
void ldv_spin_unlock_alloc_lock_of_task_struct(void) ;
#line 92
void ldv_spin_lock_d_lock_of_dentry(void) ;
#line 93
void ldv_spin_unlock_d_lock_of_dentry(void) ;
#line 100
void ldv_spin_lock_dcache_lock(void) ;
#line 101
void ldv_spin_unlock_dcache_lock(void) ;
#line 108
void ldv_spin_lock_i_lock_of_inode(void) ;
#line 109
void ldv_spin_unlock_i_lock_of_inode(void) ;
#line 116
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
#line 117
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
#line 118
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) ;
#line 124
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 125
void ldv_spin_unlock_siglock_of_sighand_struct(void) ;
#line 86 "include/linux/module.h"
extern struct module __this_module ;
#line 613 "include/linux/pci.h"
extern int pci_enable_device(struct pci_dev * ) ;
#line 625
extern void pci_disable_device(struct pci_dev * ) ;
#line 626
extern void pci_set_master(struct pci_dev * ) ;
#line 657
extern int pci_save_state(struct pci_dev * ) ;
#line 658
extern int pci_restore_state(struct pci_dev * ) ;
#line 659
extern int pci_set_power_state(struct pci_dev * , pci_power_t  ) ;
#line 1042 "include/drm/drmP.h"
extern int drm_init(struct drm_driver * ) ;
#line 1043
extern void drm_exit(struct drm_driver * ) ;
#line 1044
extern int drm_ioctl(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
#line 1051
extern int drm_open(struct inode * , struct file * ) ;
#line 1053
extern int drm_fasync(int  , struct file * , int  ) ;
#line 1054
extern int drm_release(struct inode * , struct file * ) ;
#line 1060
extern unsigned long drm_core_get_map_ofs(struct drm_map * ) ;
#line 1061
extern unsigned long drm_core_get_reg_ofs(struct drm_device * ) ;
#line 1062
extern unsigned int drm_poll(struct file * , struct poll_table_struct * ) ;
#line 1193
extern void drm_core_reclaim_buffers(struct drm_device * , struct drm_file * ) ;
#line 1332
extern int drm_gem_mmap(struct file * , struct vm_area_struct * ) ;
#line 475 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_ioctl_desc i915_ioctls[37U] ;
#line 476
int i915_max_ioctl ;
#line 477
unsigned int i915_fbpercrtc ;
#line 479
int i915_master_create(struct drm_device *dev , struct drm_master *master ) ;
#line 480
void i915_master_destroy(struct drm_device *dev , struct drm_master *master ) ;
#line 484
int i915_driver_load(struct drm_device *dev , unsigned long flags ) ;
#line 485
int i915_driver_unload(struct drm_device *dev ) ;
#line 486
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 487
void i915_driver_lastclose(struct drm_device *dev ) ;
#line 488
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 490
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 492
int i915_driver_device_is_agp(struct drm_device *dev ) ;
#line 493
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 508
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) ;
#line 509
void i915_driver_irq_preinstall(struct drm_device *dev ) ;
#line 510
int i915_driver_irq_postinstall(struct drm_device *dev ) ;
#line 511
void i915_driver_irq_uninstall(struct drm_device *dev ) ;
#line 516
int i915_enable_vblank(struct drm_device *dev , int pipe ) ;
#line 517
void i915_disable_vblank(struct drm_device *dev , int pipe ) ;
#line 518
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) ;
#line 580
int i915_gem_proc_init(struct drm_minor *minor ) ;
#line 581
void i915_gem_proc_cleanup(struct drm_minor *minor ) ;
#line 582
int i915_gem_init_object(struct drm_gem_object *obj ) ;
#line 583
void i915_gem_free_object(struct drm_gem_object *obj ) ;
#line 598
int i915_gem_fault(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
#line 619
int i915_save_state(struct drm_device *dev ) ;
#line 620
int i915_restore_state(struct drm_device *dev ) ;
#line 628
int intel_opregion_init(struct drm_device *dev ) ;
#line 629
void intel_opregion_free(struct drm_device *dev ) ;
#line 157 "include/linux/console.h"
extern bool vgacon_text_force(void) ;
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static unsigned int i915_modeset  =    4294967295U;
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
unsigned int i915_fbpercrtc  =    0U;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct pci_device_id pciidlist[24U]  = 
#line 112
  {      {32902U, 13687U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9570U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 13698U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9586U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9602U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9610U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9618U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10098U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10146U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10158U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10610U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10626U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10642U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10658U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10674U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10690U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10706U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10754U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10770U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10818U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11778U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11794U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11810U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
struct pci_device_id  const  __mod_pci_device_table  ;
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_suspend(struct drm_device *dev , pm_message_t state ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 122
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 124
  if ((unsigned long )dev == (unsigned long )((struct drm_device *)0) || (unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 125
    printk("<3>dev: %p, dev_priv: %p\n", dev, dev_priv);
#line 126
    printk("<3>DRM not initialized, aborting suspend.\n");
#line 127
    return (-19);
  } else {

  }
#line 130
  if (state.event == 8) {
#line 131
    return (0);
  } else {

  }
#line 133
  pci_save_state(dev->pdev);
#line 135
  i915_save_state(dev);
#line 137
  intel_opregion_free(dev);
#line 139
  if (state.event == 2) {
#line 141
    pci_disable_device(dev->pdev);
#line 142
    pci_set_power_state(dev->pdev, 3);
  } else {

  }
#line 145
  return (0);
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_resume(struct drm_device *dev ) 
{ 
  int tmp ;

  {
#line 150
  pci_set_power_state(dev->pdev, 0);
#line 151
  pci_restore_state(dev->pdev);
#line 152
  tmp = pci_enable_device(dev->pdev);
#line 152
  if (tmp != 0) {
#line 153
    return (-1);
  } else {

  }
#line 154
  pci_set_master(dev->pdev);
#line 156
  i915_restore_state(dev);
#line 158
  intel_opregion_init(dev);
#line 160
  return (0);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct vm_operations_struct i915_gem_vm_ops  = 
#line 163
     {0, 0, & i915_gem_fault, 0, 0, 0, 0, 0};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct drm_driver driver  = 
#line 167
     {& i915_driver_load, 0, & i915_driver_open, & i915_driver_preclose, & i915_driver_postclose,
    & i915_driver_lastclose, & i915_driver_unload, & i915_suspend, & i915_resume,
    0, 0, 0, 0, 0, 0, 0, 0, & i915_get_vblank_counter, & i915_enable_vblank, & i915_disable_vblank,
    & i915_driver_device_is_agp, & i915_driver_irq_handler, & i915_driver_irq_preinstall,
    & i915_driver_irq_postinstall, & i915_driver_irq_uninstall, & drm_core_reclaim_buffers,
    0, 0, & drm_core_get_map_ofs, & drm_core_get_reg_ofs, 0, & i915_master_create,
    & i915_master_destroy, & i915_gem_proc_init, & i915_gem_proc_cleanup, & i915_gem_init_object,
    & i915_gem_free_object, & i915_gem_vm_ops, 1, 6, 0, (char *)"i915", (char *)"Intel Graphics",
    (char *)"20080730", 4291U, 0, (struct drm_ioctl_desc *)(& i915_ioctls), 0, {& __this_module,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                & drm_poll,
                                                                                & drm_ioctl,
                                                                                0,
                                                                                & i915_compat_ioctl,
                                                                                & drm_gem_mmap,
                                                                                & drm_open,
                                                                                0,
                                                                                & drm_release,
                                                                                0,
                                                                                0,
                                                                                & drm_fasync,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0,
                                                                                0},
    {{0, 0}, (char *)"i915", (struct pci_device_id  const  *)(& pciidlist), 0, 0,
     0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {{{0U}, 0U, 0U, 0,
                                                                  {0, 0, 0, 0}}, {0,
                                                                                  0}}},
    {0, 0}};
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_init(void) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
#line 229
  driver.num_ioctls = i915_max_ioctl;
#line 241
  if (i915_modeset != 0U) {
#line 242
    driver.driver_features = driver.driver_features | 8192U;
  } else {

  }
#line 244
  if (i915_modeset == 1U) {
#line 245
    driver.driver_features = driver.driver_features | 8192U;
  } else {

  }
#line 248
  tmp = vgacon_text_force();
#line 248
  if ((int )tmp && i915_modeset == 4294967295U) {
#line 249
    driver.driver_features = driver.driver_features & 4294959103U;
  } else {

  }
#line 252
  tmp___0 = drm_init(& driver);
#line 252
  return (tmp___0);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_exit(void) 
{ 


  {
#line 257
  drm_exit(& driver);
#line 258
  return;
}
}
#line 283
void ldv_check_final_state(void) ;
#line 292
void ldv_initialize(void) ;
#line 295
extern void ldv_handler_precall(void) ;
#line 298
extern int nondet_int(void) ;
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void main(void) 
{ 
  struct drm_device *var_group1 ;
  pm_message_t var_i915_suspend_0_p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 348
  LDV_IN_INTERRUPT = 1;
#line 357
  ldv_initialize();
#line 368
  ldv_handler_precall();
#line 369
  tmp = i915_init();
#line 369
  if (tmp != 0) {
#line 370
    goto ldv_final;
  } else {

  }
#line 374
  goto ldv_25919;
  ldv_25918: 
#line 377
  tmp___0 = nondet_int();
#line 377
  switch (tmp___0) {
  case 0: 
#line 390
  ldv_handler_precall();
#line 391
  i915_suspend(var_group1, var_i915_suspend_0_p1);
#line 406
  goto ldv_25915;
  case 1: 
#line 418
  ldv_handler_precall();
#line 419
  i915_resume(var_group1);
#line 434
  goto ldv_25915;
  default: ;
#line 435
  goto ldv_25915;
  }
  ldv_25915: ;
  ldv_25919: 
#line 374
  tmp___1 = nondet_int();
#line 374
  if (tmp___1 != 0) {
#line 375
    goto ldv_25918;
  } else {

  }

#line 456
  ldv_handler_precall();
#line 457
  i915_exit();
  ldv_final: 
#line 460
  ldv_check_final_state();
#line 463
  return;
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 472
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 474
  __ldv_spin_lock(ldv_func_arg1);
#line 475
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 482
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 484
  __ldv_spin_unlock(ldv_func_arg1);
#line 485
  return;
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 492
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 492
  ldv_func_res = tmp;
#line 494
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 494
  return (tmp___0);
#line 496
  return (ldv_func_res);
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 504
  ldv_spin_lock_dcache_lock();
#line 506
  __ldv_spin_lock(ldv_func_arg1);
#line 507
  return;
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 514
  ldv_spin_lock_d_lock_of_dentry();
#line 516
  __ldv_spin_lock(ldv_func_arg1);
#line 517
  return;
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 524
  ldv_spin_unlock_d_lock_of_dentry();
#line 526
  __ldv_spin_unlock(ldv_func_arg1);
#line 527
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 534
  ldv_spin_unlock_dcache_lock();
#line 536
  __ldv_spin_unlock(ldv_func_arg1);
#line 537
  return;
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 544
  ldv_spin_lock_d_lock_of_dentry();
#line 546
  __ldv_spin_lock(ldv_func_arg1);
#line 547
  return;
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 554
  ldv_spin_unlock_d_lock_of_dentry();
#line 556
  __ldv_spin_unlock(ldv_func_arg1);
#line 557
  return;
}
}
#line 559 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 564
  ldv_spin_lock_i_lock_of_inode();
#line 566
  __ldv_spin_lock(ldv_func_arg1);
#line 567
  return;
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 574
  ldv_spin_unlock_i_lock_of_inode();
#line 576
  __ldv_spin_unlock(ldv_func_arg1);
#line 577
  return;
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 584
  ldv_spin_lock_d_lock_of_dentry();
#line 586
  __ldv_spin_lock(ldv_func_arg1);
#line 587
  return;
}
}
#line 589 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 594
  ldv_spin_unlock_d_lock_of_dentry();
#line 596
  __ldv_spin_unlock(ldv_func_arg1);
#line 597
  return;
}
}
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 604
  ldv_spin_lock_siglock_of_sighand_struct();
#line 606
  __ldv_spin_lock(ldv_func_arg1);
#line 607
  return;
}
}
#line 609 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 614
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 616
  __ldv_spin_unlock(ldv_func_arg1);
#line 617
  return;
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 624
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 626
  __ldv_spin_lock(ldv_func_arg1);
#line 627
  return;
}
}
#line 629 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 634
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 636
  __ldv_spin_unlock(ldv_func_arg1);
#line 637
  return;
}
}
#line 639 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 644
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 646
  __ldv_spin_unlock(ldv_func_arg1);
#line 647
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 37 "include/asm-generic/bug.h"
extern void warn_slowpath(char const   * , int const    , char const   *  , ...) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 105 "include/linux/string.h"
extern char *kstrdup(char const   * , gfp_t  ) ;
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (8UL) {
  case 2UL: 
#line 208
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4834;
  case 4UL: 
#line 208
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4834;
  case 8UL: 
#line 208
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4834;
  default: 
#line 208
  __bad_pda_field();
  }
  ldv_4834: 
#line 208
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 209
  return (ti);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_37(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_41(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_38(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_42(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_43(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_45(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_47(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_49(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_51(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_53(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_54(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_39(spinlock_t *ldv_func_arg1 ) ;
#line 125 "include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 149
extern void mutex_unlock(struct mutex * ) ;
#line 47 "include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int  ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 210 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 212
  if (size != 0UL && 0xffffffffffffffffUL / size < n) {
#line 213
    return (0);
  } else {

  }
#line 214
  tmp = __kmalloc(n * size, flags | 32768U);
#line 214
  return (tmp);
}
}
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 20
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 29
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
extern void *ioremap_nocache(resource_size_t  , unsigned long  ) ;
#line 181 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void *ioremap(resource_size_t offset , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 183
  tmp = ioremap_nocache(offset, size);
#line 183
  return (tmp);
}
}
#line 186
extern void iounmap(void volatile   * ) ;
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
extern void *ioremap_wc(unsigned long  , unsigned long  ) ;
#line 532 "include/linux/pci.h"
extern void pci_dev_put(struct pci_dev * ) ;
#line 569
extern struct pci_dev *pci_get_bus_and_slot(unsigned int  , unsigned int  ) ;
#line 575
extern int pci_bus_read_config_word(struct pci_bus * , unsigned int  , int  , u16 * ) ;
#line 590 "include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev *dev , int where , u16 *val ) 
{ 
  int tmp ;

  {
#line 592
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
#line 592
  return (tmp);
}
}
#line 778
extern int pci_enable_msi(struct pci_dev * ) ;
#line 780
extern void pci_disable_msi(struct pci_dev * ) ;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_user_generic(void * , void const   * , unsigned int  ) ;
#line 22
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_from_user(void *dst , void const   *src , unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 31
  ret = 0;
#line 33
  tmp = copy_user_generic(dst, src, size);
#line 33
  return ((int )tmp);
#line 34
  switch (size) {
  case 1U: 
#line 35
  __asm__  volatile   ("1:\tmovb %2,%b1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=q" (*((u8 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (1), "0" (ret));
#line 37
  return (ret);
  case 2U: 
#line 38
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (2), "0" (ret));
#line 40
  return (ret);
  case 4U: 
#line 41
  __asm__  volatile   ("1:\tmovl %2,%k1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u32 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (4), "0" (ret));
#line 43
  return (ret);
  case 8U: 
#line 44
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (8), "0" (ret));
#line 46
  return (ret);
  case 10U: 
#line 48
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (10), "0" (ret));
#line 50
  tmp___0 = __builtin_expect(ret != 0, 0L);
#line 50
  if (tmp___0 != 0L) {
#line 51
    return (ret);
  } else {

  }
#line 52
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (2), "0" (ret));
#line 55
  return (ret);
  case 16U: 
#line 57
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (16), "0" (ret));
#line 59
  tmp___1 = __builtin_expect(ret != 0, 0L);
#line 59
  if (tmp___1 != 0L) {
#line 60
    return (ret);
  } else {

  }
#line 61
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (8), "0" (ret));
#line 64
  return (ret);
  default: 
#line 66
  tmp___2 = copy_user_generic(dst, src, size);
#line 66
  return ((int )tmp___2);
  }
}
}
#line 978 "include/drm/drmP.h"
__inline static int drm_core_check_feature(struct drm_device *dev , int feature ) 
{ 


  {
#line 981
  return (((dev->driver)->driver_features & (u32 )feature) != 0U);
}
}
#line 1184
extern unsigned long drm_get_resource_start(struct drm_device * , unsigned int  ) ;
#line 1186
extern unsigned long drm_get_resource_len(struct drm_device * , unsigned int  ) ;
#line 1200
extern int drm_irq_install(struct drm_device * ) ;
#line 1201
extern int drm_irq_uninstall(struct drm_device * ) ;
#line 1206
extern int drm_vblank_init(struct drm_device * , int  ) ;
#line 1265
extern unsigned int drm_debug ;
#line 1293
extern drm_dma_handle_t *drm_pci_alloc(struct drm_device * , size_t  , size_t  , dma_addr_t  ) ;
#line 1296
extern void drm_pci_free(struct drm_device * , drm_dma_handle_t * ) ;
#line 1318
extern int drm_mm_init(struct drm_mm * , unsigned long  , unsigned long  ) ;
#line 1319
extern void drm_mm_takedown(struct drm_mm * ) ;
#line 1387
extern void drm_core_ioremap(struct drm_map * , struct drm_device * ) ;
#line 1389
extern void drm_core_ioremapfree(struct drm_map * , struct drm_device * ) ;
#line 1425 "include/drm/drmP.h"
__inline static void *drm_alloc(size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1427
  tmp = kmalloc(size, 208U);
#line 1427
  return (tmp);
}
}
#line 1431 "include/drm/drmP.h"
__inline static void drm_free(void *pt , size_t size , int area ) 
{ 


  {
#line 1433
  kfree((void const   *)pt);
#line 1434
  return;
}
}
#line 1437 "include/drm/drmP.h"
__inline static void *drm_calloc(size_t nmemb , size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1439
  tmp = kcalloc(nmemb, size, 208U);
#line 1439
  return (tmp);
}
}
#line 92 "include/drm/drm_crtc_helper.h"
extern bool drm_helper_initial_config(struct drm_device * , bool  ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
void intelfb_restore(void) ;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_bios.h"
bool intel_init_bios(struct drm_device *dev ) ;
#line 88 "include/linux/io-mapping.h"
__inline static struct io_mapping *io_mapping_create_wc(unsigned long base , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 90
  tmp = ioremap_wc(base, size);
#line 90
  return ((struct io_mapping *)tmp);
}
}
#line 94 "include/linux/io-mapping.h"
__inline static void io_mapping_free(struct io_mapping *mapping ) 
{ 


  {
#line 96
  iounmap((void volatile   *)mapping);
#line 97
  return;
}
}
#line 483 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_kernel_lost_context(struct drm_device *dev ) ;
#line 495
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) ;
#line 500
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 502
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 512
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 514
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 519
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 531
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 533
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 535
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 537
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 539
void i915_mem_takedown(struct mem_block **heap ) ;
#line 540
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) ;
#line 543
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 545
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 547
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 549
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 551
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 553
int i915_gem_mmap_gtt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 555
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 557
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 559
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 561
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 563
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 565
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 567
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 569
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 571
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 573
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 575
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 577
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 579
void i915_gem_load(struct drm_device *dev ) ;
#line 586
void i915_gem_lastclose(struct drm_device *dev ) ;
#line 594
int i915_gem_init_ringbuffer(struct drm_device *dev ) ;
#line 595
void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) ;
#line 596
int i915_gem_do_init(struct drm_device *dev , unsigned long start , unsigned long end ) ;
#line 640
void intel_modeset_init(struct drm_device *dev ) ;
#line 641
void intel_modeset_cleanup(struct drm_device *dev ) ;
#line 719
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) ;
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_ring_buffer_t *ring ;
  u32 acthd_reg ;
  u32 last_acthd ;
  unsigned int tmp ;
  u32 acthd ;
  u32 last_head ;
  unsigned int tmp___0 ;
  int i ;
  unsigned int tmp___1 ;

  {
#line 110
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 111
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 112
  ring = & dev_priv->ring;
#line 113
  acthd_reg = ((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810 ? 8308U : 8392U;
#line 114
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )acthd_reg);
#line 114
  last_acthd = tmp;
#line 116
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 116
  last_head = tmp___0 & 2097148U;
#line 119
  i = 0;
#line 119
  goto ldv_25869;
  ldv_25868: 
#line 120
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 120
  ring->head = (int )tmp___1 & 2097148;
#line 121
  acthd = readl((void const volatile   *)dev_priv->regs + (unsigned long )acthd_reg);
#line 122
  ring->space = ring->head + (-8 - ring->tail);
#line 123
  if (ring->space < 0) {
#line 124
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 125
  if (ring->space >= n) {
#line 126
    return (0);
  } else {

  }
#line 128
  if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 129
    (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 131
  if ((u32 )ring->head != last_head) {
#line 132
    i = 0;
  } else {

  }
#line 133
  if (acthd != last_acthd) {
#line 134
    i = 0;
  } else {

  }
#line 136
  last_head = (u32 )ring->head;
#line 137
  last_acthd = acthd;
#line 138
  msleep_interruptible(10U);
#line 119
  i = i + 1;
  ldv_25869: ;
#line 119
  if (i <= 99999) {
#line 120
    goto ldv_25868;
  } else {

  }

#line 142
  return (-16);
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_init_phys_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 151
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 153
  dev_priv->status_page_dmah = drm_pci_alloc(dev, 4096UL, 4096UL, 4294967295ULL);
#line 156
  if ((unsigned long )dev_priv->status_page_dmah == (unsigned long )((drm_dma_handle_t *)0)) {
#line 157
    printk("<3>[drm:%s] *ERROR* Can not allocate hardware status page\n", "i915_init_phys_hws");
#line 158
    return (-12);
  } else {

  }
#line 160
  dev_priv->hw_status_page = (dev_priv->status_page_dmah)->vaddr;
#line 161
  dev_priv->dma_status_page = (dev_priv->status_page_dmah)->busaddr;
#line 163
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 165
  writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)dev_priv->regs + 8320U);
#line 166
  if (drm_debug != 0U) {
#line 166
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_init_phys_hws");
  } else {

  }
#line 167
  return (0);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static void i915_free_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 176
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 177
  if ((unsigned long )dev_priv->status_page_dmah != (unsigned long )((drm_dma_handle_t *)0)) {
#line 178
    drm_pci_free(dev, dev_priv->status_page_dmah);
#line 179
    dev_priv->status_page_dmah = 0;
  } else {

  }
#line 182
  if (dev_priv->status_gfx_addr != 0U) {
#line 183
    dev_priv->status_gfx_addr = 0U;
#line 184
    drm_core_ioremapfree(& dev_priv->hws_map, dev);
  } else {

  }
#line 188
  writel(536866816U, (void volatile   *)dev_priv->regs + 8320U);
#line 189
  return;
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_kernel_lost_context(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_ring_buffer_t *ring ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 193
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 195
  ring = & dev_priv->ring;
#line 201
  tmp = drm_core_check_feature(dev, 8192);
#line 201
  if (tmp != 0) {
#line 202
    return;
  } else {

  }
#line 204
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 204
  ring->head = (int )tmp___0 & 2097148;
#line 205
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 205
  ring->tail = (int )tmp___1 & 2097144;
#line 206
  ring->space = ring->head + (-8 - ring->tail);
#line 207
  if (ring->space < 0) {
#line 208
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 210
  if ((unsigned long )(dev->primary)->master == (unsigned long )((struct drm_master *)0)) {
#line 211
    return;
  } else {

  }
#line 213
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 214
  if (ring->head == ring->tail && (unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 215
    (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 1;
  } else {

  }
#line 216
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_cleanup(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 220
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 225
  if (dev->irq_enabled != 0) {
#line 226
    drm_irq_uninstall(dev);
  } else {

  }
#line 228
  if ((unsigned long )dev_priv->ring.virtual_start != (unsigned long )((u8 *)0)) {
#line 229
    drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 230
    dev_priv->ring.virtual_start = 0;
#line 231
    dev_priv->ring.map.handle = 0;
#line 232
    dev_priv->ring.map.size = 0UL;
  } else {

  }
#line 236
  if ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818)) {
#line 237
    i915_free_hws(dev);
  } else {

  }
#line 239
  return (0);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_initialize(struct drm_device *dev , drm_i915_init_t *init ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;

  {
#line 244
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 245
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 247
  if (init->ring_size != 0U) {
#line 248
    if ((unsigned long )dev_priv->ring.ring_obj != (unsigned long )((struct drm_gem_object *)0)) {
#line 249
      i915_dma_cleanup(dev);
#line 250
      printk("<3>[drm:%s] *ERROR* Client tried to initialize ringbuffer in GEM mode\n",
             "i915_initialize");
#line 252
      return (-22);
    } else {

    }
#line 255
    dev_priv->ring.Size = (unsigned long )init->ring_size;
#line 256
    dev_priv->ring.tail_mask = (int )((unsigned int )dev_priv->ring.Size - 1U);
#line 258
    dev_priv->ring.map.offset = (unsigned long )init->ring_start;
#line 259
    dev_priv->ring.map.size = (unsigned long )init->ring_size;
#line 260
    dev_priv->ring.map.type = _DRM_FRAME_BUFFER;
#line 261
    dev_priv->ring.map.flags = 0;
#line 262
    dev_priv->ring.map.mtrr = 0;
#line 264
    drm_core_ioremap(& dev_priv->ring.map, dev);
#line 266
    if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 267
      i915_dma_cleanup(dev);
#line 268
      printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
             "i915_initialize");
#line 270
      return (-12);
    } else {

    }
  } else {

  }
#line 274
  dev_priv->ring.virtual_start = (u8 *)dev_priv->ring.map.handle;
#line 276
  dev_priv->cpp = init->cpp;
#line 277
  dev_priv->back_offset = (int )init->back_offset;
#line 278
  dev_priv->front_offset = (int )init->front_offset;
#line 279
  dev_priv->current_page = 0;
#line 280
  if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 281
    (master_priv->sarea_priv)->pf_current_page = 0;
  } else {

  }
#line 285
  dev_priv->allow_batchbuffer = 1;
#line 287
  return (0);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_resume(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 292
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 294
  if (drm_debug != 0U) {
#line 294
    printk("<7>[drm:%s] %s\n", "i915_dma_resume", "i915_dma_resume");
  } else {

  }
#line 296
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 297
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_dma_resume");
#line 299
    return (-12);
  } else {

  }
#line 303
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 304
    printk("<3>[drm:%s] *ERROR* Can not find hardware status page\n", "i915_dma_resume");
#line 305
    return (-22);
  } else {

  }
#line 307
  if (drm_debug != 0U) {
#line 307
    printk("<7>[drm:%s] hw status page @ %p\n", "i915_dma_resume", dev_priv->hw_status_page);
  } else {

  }
#line 309
  if (dev_priv->status_gfx_addr != 0U) {
#line 310
    writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
  } else {
#line 312
    writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)dev_priv->regs + 8320U);
  }
#line 313
  if (drm_debug != 0U) {
#line 313
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_dma_resume");
  } else {

  }
#line 315
  return (0);
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_init(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_init_t *init ;
  int retcode ;

  {
#line 321
  init = (drm_i915_init_t *)data;
#line 322
  retcode = 0;
#line 324
  switch ((unsigned int )init->func) {
  case 1U: 
#line 326
  retcode = i915_initialize(dev, init);
#line 327
  goto ldv_25910;
  case 2U: 
#line 329
  retcode = i915_dma_cleanup(dev);
#line 330
  goto ldv_25910;
  case 3U: 
#line 332
  retcode = i915_dma_resume(dev);
#line 333
  goto ldv_25910;
  default: 
#line 335
  retcode = -22;
#line 336
  goto ldv_25910;
  }
  ldv_25910: ;
#line 339
  return (retcode);
}
}
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int do_validate_cmd(int cmd ) 
{ 


  {
#line 353
  switch ((int )((unsigned int )cmd >> 29)) {
  case 0: ;
#line 355
  switch ((cmd >> 23) & 63) {
  case 0: ;
#line 357
  return (1);
  case 4: ;
#line 359
  return (1);
  default: ;
#line 361
  return (0);
  }
#line 363
  goto ldv_25921;
  case 1: ;
#line 365
  return (0);
  case 2: ;
#line 367
  return ((cmd & 255) + 2);
  case 3: ;
#line 369
  if (((cmd >> 24) & 31) <= 24) {
#line 370
    return (1);
  } else {

  }
#line 372
  switch ((cmd >> 24) & 31) {
  case 28: ;
#line 374
  return (1);
  case 29: ;
#line 376
  switch ((cmd >> 16) & 255) {
  case 3: ;
#line 378
  return ((cmd & 31) + 2);
  case 4: ;
#line 380
  return ((cmd & 15) + 2);
  default: ;
#line 382
  return ((cmd & 65535) + 2);
  }
  case 30: ;
#line 385
  if ((cmd & 8388608) != 0) {
#line 386
    return ((cmd & 65535) + 1);
  } else {
#line 388
    return (1);
  }
  case 31: ;
#line 390
  if ((cmd & 8388608) == 0) {
#line 391
    return ((cmd & 131071) + 2);
  } else
#line 392
  if ((cmd & 131072) != 0) {
#line 393
    if ((cmd & 65535) == 0) {
#line 394
      return (0);
    } else {
#line 396
      return (((cmd & 65535) + 1) / 2 + 1);
    }
  } else {
#line 398
    return (2);
  }
  default: ;
#line 400
  return (0);
  }
  default: ;
#line 403
  return (0);
  }
  ldv_25921: ;
#line 406
  return (0);
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int validate_cmd(int cmd ) 
{ 
  int ret ;
  int tmp ;

  {
#line 411
  tmp = do_validate_cmd(cmd);
#line 411
  ret = tmp;
#line 415
  return (ret);
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_emit_cmds(struct drm_device *dev , int *buffer , int dwords ) 
{ 
  drm_i915_private_t *dev_priv ;
  int i ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int cmd ;
  int sz ;
  int tmp ;
  int tmp___0 ;

  {
#line 420
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 424
  if ((unsigned long )(dwords + 1) * 4UL >= dev_priv->ring.Size - 8UL) {
#line 425
    return (-22);
  } else {

  }
#line 427
  if (dev_priv->ring.space < ((dwords + 1) & -2) * 4) {
#line 427
    i915_wait_ring(dev, ((dwords + 1) & -2) * 4, "i915_emit_cmds");
  } else {

  }
#line 427
  outcount = 0U;
#line 427
  outring = (unsigned int )dev_priv->ring.tail;
#line 427
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 427
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 429
  i = 0;
#line 429
  goto ldv_25956;
  ldv_25955: 
#line 432
  tmp = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                         4U);
#line 432
  if (tmp != 0) {
#line 433
    return (-22);
  } else {

  }
#line 435
  sz = validate_cmd(cmd);
#line 435
  if (sz == 0 || i + sz > dwords) {
#line 436
    return (-22);
  } else {

  }
#line 438
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 438
  outcount = outcount + 1U;
#line 438
  outring = outring + 4U;
#line 438
  outring = outring & ringmask;
#line 440
  goto ldv_25953;
  ldv_25952: 
#line 441
  tmp___0 = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                             4U);
#line 441
  if (tmp___0 != 0) {
#line 443
    return (-22);
  } else {

  }
#line 445
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 445
  outcount = outcount + 1U;
#line 445
  outring = outring + 4U;
#line 445
  outring = outring & ringmask;
  ldv_25953: 
#line 440
  i = i + 1;
#line 440
  sz = sz - 1;
#line 440
  if (sz != 0) {
#line 441
    goto ldv_25952;
  } else {

  }

  ldv_25956: ;
#line 429
  if (i < dwords) {
#line 430
    goto ldv_25955;
  } else {

  }

#line 449
  if (dwords & 1) {
#line 450
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 450
    outcount = outcount + 1U;
#line 450
    outring = outring + 4U;
#line 450
    outring = outring & ringmask;
  } else {

  }
#line 452
  dev_priv->ring.tail = (int )outring;
#line 452
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 452
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 454
  return (0);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect box ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int tmp ;

  {
#line 462
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 466
  tmp = __copy_from_user((void *)(& box), (void const   *)boxes + (unsigned long )i,
                         8U);
#line 466
  if (tmp != 0) {
#line 467
    return (-14);
  } else {

  }
#line 470
  if ((((int )box.y2 <= (int )box.y1 || (int )box.x2 <= (int )box.x1) || (unsigned int )box.y2 == 0U) || (unsigned int )box.x2 == 0U) {
#line 471
    printk("<3>[drm:%s] *ERROR* Bad box %d,%d..%d,%d\n", "i915_emit_box", (int )box.x1,
           (int )box.y1, (int )box.x2, (int )box.y2);
#line 473
    return (-22);
  } else {

  }
#line 476
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 477
    if (dev_priv->ring.space <= 15) {
#line 477
      i915_wait_ring(dev, 16, "i915_emit_box");
    } else {

    }
#line 477
    outcount = 0U;
#line 477
    outring = (unsigned int )dev_priv->ring.tail;
#line 477
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 477
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 478
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2030043138U;
#line 478
    outcount = outcount + 1U;
#line 478
    outring = outring + 4U;
#line 478
    outring = outring & ringmask;
#line 479
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 479
    outcount = outcount + 1U;
#line 479
    outring = outring + 4U;
#line 479
    outring = outring & ringmask;
#line 480
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 480
    outcount = outcount + 1U;
#line 480
    outring = outring + 4U;
#line 480
    outring = outring & ringmask;
#line 481
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 481
    outcount = outcount + 1U;
#line 481
    outring = outring + 4U;
#line 481
    outring = outring & ringmask;
#line 482
    dev_priv->ring.tail = (int )outring;
#line 482
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 482
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 484
    if (dev_priv->ring.space <= 23) {
#line 484
      i915_wait_ring(dev, 24, "i915_emit_box");
    } else {

    }
#line 484
    outcount = 0U;
#line 484
    outring = (unsigned int )dev_priv->ring.tail;
#line 484
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 484
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 485
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2105540611U;
#line 485
    outcount = outcount + 1U;
#line 485
    outring = outring + 4U;
#line 485
    outring = outring & ringmask;
#line 486
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR1;
#line 486
    outcount = outcount + 1U;
#line 486
    outring = outring + 4U;
#line 486
    outring = outring & ringmask;
#line 487
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 487
    outcount = outcount + 1U;
#line 487
    outring = outring + 4U;
#line 487
    outring = outring & ringmask;
#line 488
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 488
    outcount = outcount + 1U;
#line 488
    outring = outring + 4U;
#line 488
    outring = outring & ringmask;
#line 489
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 489
    outcount = outcount + 1U;
#line 489
    outring = outring + 4U;
#line 489
    outring = outring & ringmask;
#line 490
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 490
    outcount = outcount + 1U;
#line 490
    outring = outring + 4U;
#line 490
    outring = outring & ringmask;
#line 491
    dev_priv->ring.tail = (int )outring;
#line 491
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 491
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 494
  return (0);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static void i915_emit_breadcrumb(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 503
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 504
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 507
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 508
  if ((int )dev_priv->counter < 0) {
#line 509
    dev_priv->counter = 0U;
  } else {

  }
#line 510
  if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 511
    (master_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
  } else {

  }
#line 513
  if (dev_priv->ring.space <= 15) {
#line 513
    i915_wait_ring(dev, 16, "i915_emit_breadcrumb");
  } else {

  }
#line 513
  outcount = 0U;
#line 513
  outring = (unsigned int )dev_priv->ring.tail;
#line 513
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 513
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 514
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 514
  outcount = outcount + 1U;
#line 514
  outring = outring + 4U;
#line 514
  outring = outring & ringmask;
#line 515
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 515
  outcount = outcount + 1U;
#line 515
  outring = outring + 4U;
#line 515
  outring = outring & ringmask;
#line 516
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 516
  outcount = outcount + 1U;
#line 516
  outring = outring + 4U;
#line 516
  outring = outring & ringmask;
#line 517
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 517
  outcount = outcount + 1U;
#line 517
  outring = outring + 4U;
#line 517
  outring = outring & ringmask;
#line 518
  dev_priv->ring.tail = (int )outring;
#line 518
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 518
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 519
  return;
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_cmdbuffer(struct drm_device *dev , drm_i915_cmdbuffer_t *cmd ) 
{ 
  int nbox ;
  int i ;
  int count ;
  int ret ;

  {
#line 524
  nbox = cmd->num_cliprects;
#line 525
  i = 0;
#line 527
  if ((cmd->sz & 3) != 0) {
#line 528
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_cmdbuffer");
#line 529
    return (-22);
  } else {

  }
#line 532
  i915_kernel_lost_context(dev);
#line 534
  count = nbox != 0 ? nbox : 1;
#line 536
  i = 0;
#line 536
  goto ldv_25992;
  ldv_25991: ;
#line 537
  if (i < nbox) {
#line 538
    ret = i915_emit_box(dev, cmd->cliprects, i, cmd->DR1, cmd->DR4);
#line 540
    if (ret != 0) {
#line 541
      return (ret);
    } else {

    }
  } else {

  }
#line 544
  ret = i915_emit_cmds(dev, (int *)cmd->buf, cmd->sz / 4);
#line 545
  if (ret != 0) {
#line 546
    return (ret);
  } else {

  }
#line 536
  i = i + 1;
  ldv_25992: ;
#line 536
  if (i < count) {
#line 537
    goto ldv_25991;
  } else {

  }
#line 549
  i915_emit_breadcrumb(dev);
#line 550
  return (0);
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_batchbuffer(struct drm_device *dev , drm_i915_batchbuffer_t *batch ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 556
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 557
  boxes = batch->cliprects;
#line 558
  nbox = batch->num_cliprects;
#line 559
  i = 0;
#line 562
  if (((batch->start | batch->used) & 7) != 0) {
#line 563
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_batchbuffer");
#line 564
    return (-22);
  } else {

  }
#line 567
  i915_kernel_lost_context(dev);
#line 569
  count = nbox != 0 ? nbox : 1;
#line 571
  i = 0;
#line 571
  goto ldv_26010;
  ldv_26009: ;
#line 572
  if (i < nbox) {
#line 573
    tmp = i915_emit_box(dev, boxes, i, batch->DR1, batch->DR4);
#line 573
    ret = tmp;
#line 575
    if (ret != 0) {
#line 576
      return (ret);
    } else {

    }
  } else {

  }
#line 579
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 580
    if (dev_priv->ring.space <= 7) {
#line 580
      i915_wait_ring(dev, 8, "i915_dispatch_batchbuffer");
    } else {

    }
#line 580
    outcount = 0U;
#line 580
    outring = (unsigned int )dev_priv->ring.tail;
#line 580
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 580
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 581
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 582
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411042176U;
#line 582
      outcount = outcount + 1U;
#line 582
      outring = outring + 4U;
#line 582
      outring = outring & ringmask;
#line 583
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )batch->start;
#line 583
      outcount = outcount + 1U;
#line 583
      outring = outring + 4U;
#line 583
      outring = outring & ringmask;
    } else {
#line 585
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411041920U;
#line 585
      outcount = outcount + 1U;
#line 585
      outring = outring + 4U;
#line 585
      outring = outring & ringmask;
#line 586
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 586
      outcount = outcount + 1U;
#line 586
      outring = outring + 4U;
#line 586
      outring = outring & ringmask;
    }
#line 588
    dev_priv->ring.tail = (int )outring;
#line 588
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 588
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 590
    if (dev_priv->ring.space <= 15) {
#line 590
      i915_wait_ring(dev, 16, "i915_dispatch_batchbuffer");
    } else {

    }
#line 590
    outcount = 0U;
#line 590
    outring = (unsigned int )dev_priv->ring.tail;
#line 590
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 590
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 591
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 402653185U;
#line 591
    outcount = outcount + 1U;
#line 591
    outring = outring + 4U;
#line 591
    outring = outring & ringmask;
#line 592
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 592
    outcount = outcount + 1U;
#line 592
    outring = outring + 4U;
#line 592
    outring = outring & ringmask;
#line 593
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((batch->start + batch->used) + -4);
#line 593
    outcount = outcount + 1U;
#line 593
    outring = outring + 4U;
#line 593
    outring = outring & ringmask;
#line 594
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 594
    outcount = outcount + 1U;
#line 594
    outring = outring + 4U;
#line 594
    outring = outring & ringmask;
#line 595
    dev_priv->ring.tail = (int )outring;
#line 595
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 595
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 571
  i = i + 1;
  ldv_26010: ;
#line 571
  if (i < count) {
#line 572
    goto ldv_26009;
  } else {

  }
#line 599
  i915_emit_breadcrumb(dev);
#line 601
  return (0);
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_flip(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  uint32_t tmp ;

  {
#line 606
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 607
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 611
  if ((unsigned long )master_priv->sarea_priv == (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 612
    return (-22);
  } else {

  }
#line 614
  if (drm_debug != 0U) {
#line 614
    printk("<7>[drm:%s] %s: page=%d pfCurrentPage=%d\n", "i915_dispatch_flip", "i915_dispatch_flip",
           dev_priv->current_page, (master_priv->sarea_priv)->pf_current_page);
  } else {

  }
#line 619
  i915_kernel_lost_context(dev);
#line 621
  if (dev_priv->ring.space <= 7) {
#line 621
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 621
  outcount = 0U;
#line 621
  outring = (unsigned int )dev_priv->ring.tail;
#line 621
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 621
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 622
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 33554433U;
#line 622
  outcount = outcount + 1U;
#line 622
  outring = outring + 4U;
#line 622
  outring = outring & ringmask;
#line 623
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 623
  outcount = outcount + 1U;
#line 623
  outring = outring + 4U;
#line 623
  outring = outring & ringmask;
#line 624
  dev_priv->ring.tail = (int )outring;
#line 624
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 624
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 626
  if (dev_priv->ring.space <= 23) {
#line 626
    i915_wait_ring(dev, 24, "i915_dispatch_flip");
  } else {

  }
#line 626
  outcount = 0U;
#line 626
  outring = (unsigned int )dev_priv->ring.tail;
#line 626
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 626
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 627
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 171966466U;
#line 627
  outcount = outcount + 1U;
#line 627
  outring = outring + 4U;
#line 627
  outring = outring & ringmask;
#line 628
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 628
  outcount = outcount + 1U;
#line 628
  outring = outring + 4U;
#line 628
  outring = outring & ringmask;
#line 629
  if (dev_priv->current_page == 0) {
#line 630
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->back_offset;
#line 630
    outcount = outcount + 1U;
#line 630
    outring = outring + 4U;
#line 630
    outring = outring & ringmask;
#line 631
    dev_priv->current_page = 1;
  } else {
#line 633
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->front_offset;
#line 633
    outcount = outcount + 1U;
#line 633
    outring = outring + 4U;
#line 633
    outring = outring & ringmask;
#line 634
    dev_priv->current_page = 0;
  }
#line 636
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 636
  outcount = outcount + 1U;
#line 636
  outring = outring + 4U;
#line 636
  outring = outring & ringmask;
#line 637
  dev_priv->ring.tail = (int )outring;
#line 637
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 637
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 639
  if (dev_priv->ring.space <= 7) {
#line 639
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 639
  outcount = 0U;
#line 639
  outring = (unsigned int )dev_priv->ring.tail;
#line 639
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 639
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 640
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 25165828U;
#line 640
  outcount = outcount + 1U;
#line 640
  outring = outring + 4U;
#line 640
  outring = outring & ringmask;
#line 641
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 641
  outcount = outcount + 1U;
#line 641
  outring = outring + 4U;
#line 641
  outring = outring & ringmask;
#line 642
  dev_priv->ring.tail = (int )outring;
#line 642
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 642
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 644
  tmp = dev_priv->counter;
#line 644
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 644
  (master_priv->sarea_priv)->last_enqueue = (int )tmp;
#line 646
  if (dev_priv->ring.space <= 15) {
#line 646
    i915_wait_ring(dev, 16, "i915_dispatch_flip");
  } else {

  }
#line 646
  outcount = 0U;
#line 646
  outring = (unsigned int )dev_priv->ring.tail;
#line 646
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 646
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 647
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 647
  outcount = outcount + 1U;
#line 647
  outring = outring + 4U;
#line 647
  outring = outring & ringmask;
#line 648
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 648
  outcount = outcount + 1U;
#line 648
  outring = outring + 4U;
#line 648
  outring = outring & ringmask;
#line 649
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 649
  outcount = outcount + 1U;
#line 649
  outring = outring + 4U;
#line 649
  outring = outring & ringmask;
#line 650
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 650
  outcount = outcount + 1U;
#line 650
  outring = outring + 4U;
#line 650
  outring = outring & ringmask;
#line 651
  dev_priv->ring.tail = (int )outring;
#line 651
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 651
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 653
  (master_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 654
  return (0);
}
}
#line 657 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_quiescent(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 659
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 661
  i915_kernel_lost_context(dev);
#line 662
  tmp = i915_wait_ring(dev, (int )((unsigned int )dev_priv->ring.Size - 8U), "i915_quiescent");
#line 662
  return (tmp);
}
}
#line 665 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flush_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 670
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 670
    if ((int )((file_priv->master)->lock.hw_lock)->lock >= 0 || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 670
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_flush_ioctl", "i915_flush_ioctl", (unsigned int )((file_priv->master)->lock.hw_lock)->lock & 2147483648U,
             (file_priv->master)->lock.file_priv, file_priv);
#line 670
      return (-22);
    } else {

    }
  } else {

  }
#line 672
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 673
  ret = i915_quiescent(dev);
#line 674
  mutex_unlock(& dev->struct_mutex);
#line 676
  return (ret);
}
}
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_batchbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_batchbuffer_t *batch ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 682
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 683
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 684
  sarea_priv = master_priv->sarea_priv;
#line 686
  batch = (drm_i915_batchbuffer_t *)data;
#line 689
  if (dev_priv->allow_batchbuffer == 0) {
#line 690
    printk("<3>[drm:%s] *ERROR* Batchbuffer ioctl disabled\n", "i915_batchbuffer");
#line 691
    return (-22);
  } else {

  }
#line 694
  if (drm_debug != 0U) {
#line 694
    printk("<7>[drm:%s] i915 batchbuffer, start %x used %d cliprects %d\n", "i915_batchbuffer",
           batch->start, batch->used, batch->num_cliprects);
  } else {

  }
#line 697
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 697
    if ((int )((file_priv->master)->lock.hw_lock)->lock >= 0 || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 697
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_batchbuffer", "i915_batchbuffer", (unsigned int )((file_priv->master)->lock.hw_lock)->lock & 2147483648U,
             (file_priv->master)->lock.file_priv, file_priv);
#line 697
      return (-22);
    } else {

    }
  } else {

  }
#line 699
  if (batch->num_cliprects != 0) {
#line 699
    tmp = current_thread_info();
#line 699
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batch->cliprects),
              "g" ((long )((unsigned long )batch->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 699
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 699
    if (tmp___0 == 0L) {
#line 702
      return (-14);
    } else {

    }
  } else {

  }
#line 704
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 705
  ret = i915_dispatch_batchbuffer(dev, batch);
#line 706
  mutex_unlock(& dev->struct_mutex);
#line 708
  if ((unsigned long )sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 709
    sarea_priv->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 710
  return (ret);
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_cmdbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_cmdbuffer_t *cmdbuf ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 716
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 717
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 718
  sarea_priv = master_priv->sarea_priv;
#line 720
  cmdbuf = (drm_i915_cmdbuffer_t *)data;
#line 723
  if (drm_debug != 0U) {
#line 723
    printk("<7>[drm:%s] i915 cmdbuffer, buf %p sz %d cliprects %d\n", "i915_cmdbuffer",
           cmdbuf->buf, cmdbuf->sz, cmdbuf->num_cliprects);
  } else {

  }
#line 726
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 726
    if ((int )((file_priv->master)->lock.hw_lock)->lock >= 0 || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 726
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_cmdbuffer", "i915_cmdbuffer", (unsigned int )((file_priv->master)->lock.hw_lock)->lock & 2147483648U,
             (file_priv->master)->lock.file_priv, file_priv);
#line 726
      return (-22);
    } else {

    }
  } else {

  }
#line 729
  if (cmdbuf->num_cliprects != 0) {
#line 729
    tmp = current_thread_info();
#line 729
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuf->cliprects),
              "g" ((long )((unsigned long )cmdbuf->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 729
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 729
    if (tmp___0 == 0L) {
#line 732
      printk("<3>[drm:%s] *ERROR* Fault accessing cliprects\n", "i915_cmdbuffer");
#line 733
      return (-14);
    } else {

    }
  } else {

  }
#line 736
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 737
  ret = i915_dispatch_cmdbuffer(dev, cmdbuf);
#line 738
  mutex_unlock(& dev->struct_mutex);
#line 739
  if (ret != 0) {
#line 740
    printk("<3>[drm:%s] *ERROR* i915_dispatch_cmdbuffer failed\n", "i915_cmdbuffer");
#line 741
    return (ret);
  } else {

  }
#line 744
  if ((unsigned long )sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 745
    sarea_priv->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 746
  return (0);
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flip_bufs(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 754
  if (drm_debug != 0U) {
#line 754
    printk("<7>[drm:%s] %s\n", "i915_flip_bufs", "i915_flip_bufs");
  } else {

  }
#line 756
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 756
    if ((int )((file_priv->master)->lock.hw_lock)->lock >= 0 || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 756
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_flip_bufs", "i915_flip_bufs", (unsigned int )((file_priv->master)->lock.hw_lock)->lock & 2147483648U,
             (file_priv->master)->lock.file_priv, file_priv);
#line 756
      return (-22);
    } else {

    }
  } else {

  }
#line 758
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 759
  ret = i915_dispatch_flip(dev);
#line 760
  mutex_unlock(& dev->struct_mutex);
#line 762
  return (ret);
}
}
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_getparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_getparam_t *param ;
  int value ;
  unsigned long tmp ;

  {
#line 768
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 769
  param = (drm_i915_getparam_t *)data;
#line 772
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 773
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_getparam");
#line 774
    return (-22);
  } else {

  }
#line 777
  switch (param->param) {
  case 1: 
#line 779
  value = (dev->pdev)->irq != 0U;
#line 780
  goto ldv_26079;
  case 2: 
#line 782
  value = dev_priv->allow_batchbuffer != 0;
#line 783
  goto ldv_26079;
  case 3: 
#line 785
  value = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
#line 786
  goto ldv_26079;
  case 4: 
#line 788
  value = dev->pci_device;
#line 789
  goto ldv_26079;
  case 5: 
#line 791
  value = dev_priv->has_gem;
#line 792
  goto ldv_26079;
  default: 
#line 794
  printk("<3>[drm:%s] *ERROR* Unknown parameter %d\n", "i915_getparam", param->param);
#line 795
  return (-22);
  }
  ldv_26079: 
#line 798
  tmp = copy_to_user((void *)param->value, (void const   *)(& value), 4U);
#line 798
  if (tmp != 0UL) {
#line 799
    printk("<3>[drm:%s] *ERROR* DRM_COPY_TO_USER failed\n", "i915_getparam");
#line 800
    return (-14);
  } else {

  }
#line 803
  return (0);
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_setparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_setparam_t *param ;

  {
#line 809
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 810
  param = (drm_i915_setparam_t *)data;
#line 812
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 813
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_setparam");
#line 814
    return (-22);
  } else {

  }
#line 817
  switch (param->param) {
  case 1: ;
#line 819
  goto ldv_26094;
  case 2: 
#line 821
  dev_priv->tex_lru_log_granularity = param->value;
#line 822
  goto ldv_26094;
  case 3: 
#line 824
  dev_priv->allow_batchbuffer = param->value;
#line 825
  goto ldv_26094;
  default: 
#line 827
  printk("<3>[drm:%s] *ERROR* unknown parameter %d\n", "i915_setparam", param->param);
#line 828
  return (-22);
  }
  ldv_26094: ;
#line 831
  return (0);
}
}
#line 834 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_set_status_page(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_hws_addr_t *hws ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 837
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 838
  hws = (drm_i915_hws_addr_t *)data;
#line 840
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && (((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810) && dev->pci_device != 10818)) {
#line 841
    return (-22);
  } else {

  }
#line 843
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 844
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_set_status_page");
#line 845
    return (-22);
  } else {

  }
#line 848
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 848
  if (tmp___0 != 0) {
#line 849
    __ret_warn_on = 1;
#line 849
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 849
    if (tmp != 0L) {
#line 849
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared",
                    849, "tried to set status page when mode setting active\n");
    } else {

    }
#line 849
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 850
    return (0);
  } else {

  }
#line 853
  printk("<7>set status page addr 0x%08x\n", (unsigned int )hws->addr);
#line 855
  dev_priv->status_gfx_addr = (unsigned int )hws->addr & 536866816U;
#line 857
  dev_priv->hws_map.offset = (unsigned long )((unsigned long long )(dev->agp)->base + hws->addr);
#line 858
  dev_priv->hws_map.size = 4096UL;
#line 859
  dev_priv->hws_map.type = _DRM_FRAME_BUFFER;
#line 860
  dev_priv->hws_map.flags = 0;
#line 861
  dev_priv->hws_map.mtrr = 0;
#line 863
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 864
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 865
    i915_dma_cleanup(dev);
#line 866
    dev_priv->status_gfx_addr = 0U;
#line 867
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for G33 hw status page\n",
           "i915_set_status_page");
#line 869
    return (-12);
  } else {

  }
#line 871
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 873
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 874
  writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
#line 875
  if (drm_debug != 0U) {
#line 875
    printk("<7>[drm:%s] load hws HWS_PGA with gfx mem 0x%x\n", "i915_set_status_page",
           dev_priv->status_gfx_addr);
  } else {

  }
#line 877
  if (drm_debug != 0U) {
#line 877
    printk("<7>[drm:%s] load hws at %p\n", "i915_set_status_page", dev_priv->hw_status_page);
  } else {

  }
#line 878
  return (0);
}
}
#line 891 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_probe_agp(struct drm_device *dev , unsigned long *aperture_size ,
                          unsigned long *preallocated_size ) 
{ 
  struct pci_dev *bridge_dev ;
  u16 tmp ;
  unsigned long overhead ;

  {
#line 895
  tmp = 0U;
#line 898
  bridge_dev = pci_get_bus_and_slot(0U, 0U);
#line 899
  if ((unsigned long )bridge_dev == (unsigned long )((struct pci_dev *)0)) {
#line 900
    printk("<3>[drm:%s] *ERROR* bridge device not found\n", "i915_probe_agp");
#line 901
    return (-1);
  } else {

  }
#line 905
  pci_read_config_word(bridge_dev, 82, & tmp);
#line 906
  pci_dev_put(bridge_dev);
#line 908
  *aperture_size = 1048576UL;
#line 909
  *preallocated_size = 1048576UL;
#line 911
  switch ((int )(dev->pdev)->device) {
  case 13687: ;
  case 9570: ;
  case 13698: ;
  case 9586: ;
#line 916
  if ((int )tmp & 1) {
#line 917
    *aperture_size = *aperture_size * 64UL;
  } else {
#line 919
    *aperture_size = *aperture_size * 128UL;
  }
#line 920
  goto ldv_26121;
  default: 
#line 923
  *aperture_size = (dev->pdev)->resource[2].start != 0ULL || (dev->pdev)->resource[2].end != (dev->pdev)->resource[2].start ? (unsigned long )(((dev->pdev)->resource[2].end - (dev->pdev)->resource[2].start) + 1ULL) : 0UL;
#line 924
  goto ldv_26121;
  }
  ldv_26121: ;
#line 931
  if (((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810) || dev->pci_device == 10818) {
#line 932
    overhead = 4096UL;
  } else {
#line 934
    overhead = *aperture_size / 1024UL + 4096UL;
  }
#line 936
  switch ((int )tmp & 112) {
  case 16: ;
#line 938
  goto ldv_26124;
  case 32: 
#line 940
  *preallocated_size = *preallocated_size * 4UL;
#line 941
  goto ldv_26124;
  case 48: 
#line 943
  *preallocated_size = *preallocated_size * 8UL;
#line 944
  goto ldv_26124;
  case 64: 
#line 946
  *preallocated_size = *preallocated_size * 16UL;
#line 947
  goto ldv_26124;
  case 80: 
#line 949
  *preallocated_size = *preallocated_size * 32UL;
#line 950
  goto ldv_26124;
  case 96: 
#line 952
  *preallocated_size = *preallocated_size * 48UL;
#line 953
  goto ldv_26124;
  case 112: 
#line 955
  *preallocated_size = *preallocated_size * 64UL;
#line 956
  goto ldv_26124;
  case 0: 
#line 958
  printk("<3>[drm:%s] *ERROR* video memory is disabled\n", "i915_probe_agp");
#line 959
  return (-1);
  default: 
#line 961
  printk("<3>[drm:%s] *ERROR* unexpected GMCH_GMS value: 0x%02x\n", "i915_probe_agp",
         (int )tmp & 112);
#line 963
  return (-1);
  }
  ldv_26124: 
#line 965
  *preallocated_size = *preallocated_size - overhead;
#line 967
  return (0);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_load_modeset_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long agp_size ;
  unsigned long prealloc_size ;
  int fb_bar ;
  int ret ;
  unsigned long tmp ;
  bool tmp___0 ;

  {
#line 972
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 974
  fb_bar = (((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) ? 2 : 0;
#line 975
  ret = 0;
#line 977
  tmp = drm_get_resource_start(dev, (unsigned int )fb_bar);
#line 977
  dev->mode_config.fb_base = tmp & 4278190080UL;
#line 980
  if (drm_debug != 0U) {
#line 980
    printk("<7>[drm:%s] *** fb base 0x%08lx\n", "i915_load_modeset_init", dev->mode_config.fb_base);
  } else {

  }
#line 982
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) || ((((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706))) {
#line 983
    dev_priv->cursor_needs_physical = 1;
  } else {
#line 985
    dev_priv->cursor_needs_physical = 0;
  }
#line 987
  i915_probe_agp(dev, & agp_size, & prealloc_size);
#line 990
  drm_mm_init(& dev_priv->vram, 0UL, prealloc_size);
#line 993
  i915_gem_do_init(dev, prealloc_size, agp_size);
#line 995
  ret = i915_gem_init_ringbuffer(dev);
#line 996
  if (ret != 0) {
#line 997
    goto out;
  } else {

  }
#line 999
  dev_priv->mm.gtt_mapping = io_mapping_create_wc((dev->agp)->base, (dev->agp)->agp_info.aper_size * 1048576UL);
#line 1005
  dev_priv->allow_batchbuffer = 1;
#line 1007
  tmp___0 = intel_init_bios(dev);
#line 1007
  ret = (int )tmp___0;
#line 1008
  if (ret != 0) {
#line 1009
    printk("<6>[drm] failed to find VBIOS tables\n");
  } else {

  }
#line 1011
  ret = drm_irq_install(dev);
#line 1012
  if (ret != 0) {
#line 1013
    goto destroy_ringbuffer;
  } else {

  }
#line 1024
  dev->vblank_disable_allowed = 1;
#line 1030
  writel(2097184U, (void volatile   *)dev_priv->regs + 8384U);
#line 1032
  intel_modeset_init(dev);
#line 1034
  drm_helper_initial_config(dev, 0);
#line 1036
  dev->devname = kstrdup("i915", 208U);
#line 1037
  if ((unsigned long )dev->devname == (unsigned long )((char *)0)) {
#line 1038
    ret = -12;
#line 1039
    goto modeset_cleanup;
  } else {

  }
#line 1042
  return (0);
  modeset_cleanup: 
#line 1045
  intel_modeset_cleanup(dev);
  destroy_ringbuffer: 
#line 1047
  i915_gem_cleanup_ringbuffer(dev);
  out: ;
#line 1049
  return (ret);
}
}
#line 1052 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_master_create(struct drm_device *dev , struct drm_master *master ) 
{ 
  struct drm_i915_master_private *master_priv ;
  void *tmp ;

  {
#line 1056
  tmp = drm_calloc(1UL, 16UL, 2);
#line 1056
  master_priv = (struct drm_i915_master_private *)tmp;
#line 1057
  if ((unsigned long )master_priv == (unsigned long )((struct drm_i915_master_private *)0)) {
#line 1058
    return (-12);
  } else {

  }
#line 1060
  master->driver_priv = (void *)master_priv;
#line 1061
  return (0);
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_master_destroy(struct drm_device *dev , struct drm_master *master ) 
{ 
  struct drm_i915_master_private *master_priv ;

  {
#line 1066
  master_priv = (struct drm_i915_master_private *)master->driver_priv;
#line 1068
  if ((unsigned long )master_priv == (unsigned long )((struct drm_i915_master_private *)0)) {
#line 1069
    return;
  } else {

  }
#line 1071
  drm_free((void *)master_priv, 16UL, 2);
#line 1073
  master->driver_priv = 0;
#line 1074
  return;
}
}
#line 1095 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_load(struct drm_device *dev , unsigned long flags ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long base ;
  unsigned long size ;
  int ret ;
  int mmio_bar ;
  void *tmp ;
  struct lock_class_key __key ;
  int tmp___0 ;

  {
#line 1097
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1099
  ret = 0;
#line 1099
  mmio_bar = (((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706);
#line 1102
  dev->counters = dev->counters + 4UL;
#line 1103
  dev->types[6] = _DRM_STAT_IRQ;
#line 1104
  dev->types[7] = _DRM_STAT_PRIMARY;
#line 1105
  dev->types[8] = _DRM_STAT_SECONDARY;
#line 1106
  dev->types[9] = _DRM_STAT_DMA;
#line 1108
  tmp = drm_alloc(4304UL, 2);
#line 1108
  dev_priv = (struct drm_i915_private *)tmp;
#line 1109
  if ((unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 1110
    return (-12);
  } else {

  }
#line 1112
  memset((void *)dev_priv, 0, 4304UL);
#line 1114
  dev->dev_private = (void *)dev_priv;
#line 1115
  dev_priv->dev = dev;
#line 1118
  base = drm_get_resource_start(dev, (unsigned int )mmio_bar);
#line 1119
  size = drm_get_resource_len(dev, (unsigned int )mmio_bar);
#line 1121
  dev_priv->regs = ioremap((resource_size_t )base, size);
#line 1122
  if ((unsigned long )dev_priv->regs == (unsigned long )((void *)0)) {
#line 1123
    printk("<3>[drm:%s] *ERROR* failed to map registers\n", "i915_driver_load");
#line 1124
    ret = -5;
#line 1125
    goto free_priv;
  } else {

  }
#line 1133
  dev_priv->has_gem = 1;
#line 1136
  i915_gem_load(dev);
#line 1139
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && (((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810) && dev->pci_device != 10818)) {
#line 1140
    ret = i915_init_phys_hws(dev);
#line 1141
    if (ret != 0) {
#line 1142
      goto out_rmmap;
    } else {

    }
  } else {

  }
#line 1156
  if (dev->pci_device != 10098 && (dev->pci_device != 10146 && dev->pci_device != 10158)) {
#line 1157
    pci_enable_msi(dev->pdev);
  } else {

  }
#line 1159
  intel_opregion_init(dev);
#line 1161
  __spin_lock_init(& dev_priv->user_irq_lock, "&dev_priv->user_irq_lock", & __key);
#line 1162
  dev_priv->user_irq_refcount = 0;
#line 1164
  ret = drm_vblank_init(dev, 2);
#line 1166
  if (ret != 0) {
#line 1167
    i915_driver_unload(dev);
#line 1168
    return (ret);
  } else {

  }
#line 1171
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 1171
  if (tmp___0 != 0) {
#line 1172
    ret = i915_load_modeset_init(dev);
#line 1173
    if (ret < 0) {
#line 1174
      printk("<3>[drm:%s] *ERROR* failed to init modeset\n", "i915_driver_load");
#line 1175
      goto out_rmmap;
    } else {

    }
  } else {

  }
#line 1179
  return (0);
  out_rmmap: 
#line 1182
  iounmap((void volatile   *)dev_priv->regs);
  free_priv: 
#line 1184
  drm_free((void *)dev_priv, 4304UL, 2);
#line 1185
  return (ret);
}
}
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_unload(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int tmp ;
  int tmp___0 ;

  {
#line 1190
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1192
  tmp = drm_core_check_feature(dev, 8192);
#line 1192
  if (tmp != 0) {
#line 1193
    io_mapping_free(dev_priv->mm.gtt_mapping);
#line 1194
    drm_irq_uninstall(dev);
  } else {

  }
#line 1197
  if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 1198
    pci_disable_msi(dev->pdev);
  } else {

  }
#line 1200
  if ((unsigned long )dev_priv->regs != (unsigned long )((void *)0)) {
#line 1201
    iounmap((void volatile   *)dev_priv->regs);
  } else {

  }
#line 1203
  intel_opregion_free(dev);
#line 1205
  tmp___0 = drm_core_check_feature(dev, 8192);
#line 1205
  if (tmp___0 != 0) {
#line 1206
    intel_modeset_cleanup(dev);
#line 1208
    mutex_lock_nested(& dev->struct_mutex, 0U);
#line 1209
    i915_gem_cleanup_ringbuffer(dev);
#line 1210
    mutex_unlock(& dev->struct_mutex);
#line 1211
    drm_mm_takedown(& dev_priv->vram);
#line 1212
    i915_gem_lastclose(dev);
  } else {

  }
#line 1215
  drm_free(dev->dev_private, 4304UL, 2);
#line 1218
  return (0);
}
}
#line 1221 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  void *tmp ;

  {
#line 1225
  if (drm_debug != 0U) {
#line 1225
    printk("<7>[drm:%s] \n", "i915_driver_open");
  } else {

  }
#line 1226
  tmp = drm_alloc(8UL, 10);
#line 1226
  i915_file_priv = (struct drm_i915_file_private *)tmp;
#line 1229
  if ((unsigned long )i915_file_priv == (unsigned long )((struct drm_i915_file_private *)0)) {
#line 1230
    return (-12);
  } else {

  }
#line 1232
  file_priv->driver_priv = (void *)i915_file_priv;
#line 1234
  i915_file_priv->mm.last_gem_seqno = 0U;
#line 1235
  i915_file_priv->mm.last_gem_throttle_seqno = 0U;
#line 1237
  return (0);
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_lastclose(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 1254
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1256
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 1257
    intelfb_restore();
#line 1258
    return;
  } else {
#line 1256
    tmp = drm_core_check_feature(dev, 8192);
#line 1256
    if (tmp != 0) {
#line 1257
      intelfb_restore();
#line 1258
      return;
    } else {

    }
  }
#line 1261
  i915_gem_lastclose(dev);
#line 1263
  if ((unsigned long )dev_priv->agp_heap != (unsigned long )((struct mem_block *)0)) {
#line 1264
    i915_mem_takedown(& dev_priv->agp_heap);
  } else {

  }
#line 1266
  i915_dma_cleanup(dev);
#line 1267
  return;
}
}
#line 1269 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 1271
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1272
  tmp = drm_core_check_feature(dev, 8192);
#line 1272
  if (tmp == 0) {
#line 1273
    i915_mem_release(dev, file_priv, dev_priv->agp_heap);
  } else {

  }
#line 1274
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;

  {
#line 1278
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 1280
  drm_free((void *)i915_file_priv, 8UL, 10);
#line 1281
  return;
}
}
#line 1283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
struct drm_ioctl_desc i915_ioctls[37U]  = 
#line 1283
  {      {0U, & i915_dma_init, 7}, 
        {1U, & i915_flush_ioctl, 1}, 
        {2U, & i915_flip_bufs, 1}, 
        {3U, & i915_batchbuffer, 1}, 
        {4U, & i915_irq_emit, 1}, 
        {5U, & i915_irq_wait, 1}, 
        {6U, & i915_getparam, 1}, 
        {7U, & i915_setparam, 7}, 
        {8U, & i915_mem_alloc, 1}, 
        {9U, & i915_mem_free, 1}, 
        {10U, & i915_mem_init_heap, 7}, 
        {11U, & i915_cmdbuffer, 1}, 
        {12U, & i915_mem_destroy_heap, 7}, 
        {13U, & i915_vblank_pipe_set, 7}, 
        {14U, & i915_vblank_pipe_get, 1}, 
        {15U, & i915_vblank_swap, 1}, 
        {0U, 0, 0}, 
        {17U, & i915_set_status_page, 7}, 
        {0U, 0, 0}, 
        {19U, & i915_gem_init_ioctl, 7}, 
        {20U, & i915_gem_execbuffer, 1}, 
        {21U, & i915_gem_pin_ioctl, 5}, 
        {22U, & i915_gem_unpin_ioctl, 5}, 
        {23U, & i915_gem_busy_ioctl, 1}, 
        {24U, & i915_gem_throttle_ioctl, 1}, 
        {25U, & i915_gem_entervt_ioctl, 7}, 
        {26U, & i915_gem_leavevt_ioctl, 7}, 
        {27U, & i915_gem_create_ioctl, 0}, 
        {28U, & i915_gem_pread_ioctl, 0}, 
        {29U, & i915_gem_pwrite_ioctl, 0}, 
        {30U, & i915_gem_mmap_ioctl, 0}, 
        {31U, & i915_gem_set_domain_ioctl, 0}, 
        {32U, & i915_gem_sw_finish_ioctl, 0}, 
        {33U, & i915_gem_set_tiling, 0}, 
        {34U, & i915_gem_get_tiling, 0}, 
        {35U, & i915_gem_get_aperture_ioctl, 0}, 
        {36U, & i915_gem_mmap_gtt_ioctl, 0}};
#line 1321 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_max_ioctl  =    37;
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_device_is_agp(struct drm_device *dev ) 
{ 


  {
#line 1336
  return (1);
}
}
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_37(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1344
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1346
  __ldv_spin_lock(ldv_func_arg1);
#line 1347
  return;
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_38(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1354
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1356
  __ldv_spin_unlock(ldv_func_arg1);
#line 1357
  return;
}
}
#line 1359 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int ldv___ldv_spin_trylock_39(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1364
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1364
  ldv_func_res = tmp;
#line 1366
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1366
  return (tmp___0);
#line 1368
  return (ldv_func_res);
}
}
#line 1371 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1376
  ldv_spin_lock_dcache_lock();
#line 1378
  __ldv_spin_lock(ldv_func_arg1);
#line 1379
  return;
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_41(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1386
  ldv_spin_lock_d_lock_of_dentry();
#line 1388
  __ldv_spin_lock(ldv_func_arg1);
#line 1389
  return;
}
}
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_42(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1396
  ldv_spin_unlock_d_lock_of_dentry();
#line 1398
  __ldv_spin_unlock(ldv_func_arg1);
#line 1399
  return;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_43(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1406
  ldv_spin_unlock_dcache_lock();
#line 1408
  __ldv_spin_unlock(ldv_func_arg1);
#line 1409
  return;
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1416
  ldv_spin_lock_d_lock_of_dentry();
#line 1418
  __ldv_spin_lock(ldv_func_arg1);
#line 1419
  return;
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_45(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1426
  ldv_spin_unlock_d_lock_of_dentry();
#line 1428
  __ldv_spin_unlock(ldv_func_arg1);
#line 1429
  return;
}
}
#line 1431 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1436
  ldv_spin_lock_i_lock_of_inode();
#line 1438
  __ldv_spin_lock(ldv_func_arg1);
#line 1439
  return;
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_47(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1446
  ldv_spin_unlock_i_lock_of_inode();
#line 1448
  __ldv_spin_unlock(ldv_func_arg1);
#line 1449
  return;
}
}
#line 1451 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1456
  ldv_spin_lock_d_lock_of_dentry();
#line 1458
  __ldv_spin_lock(ldv_func_arg1);
#line 1459
  return;
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_49(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1466
  ldv_spin_unlock_d_lock_of_dentry();
#line 1468
  __ldv_spin_unlock(ldv_func_arg1);
#line 1469
  return;
}
}
#line 1471 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1476
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1478
  __ldv_spin_lock(ldv_func_arg1);
#line 1479
  return;
}
}
#line 1481 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_51(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1486
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1488
  __ldv_spin_unlock(ldv_func_arg1);
#line 1489
  return;
}
}
#line 1491 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1496
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1498
  __ldv_spin_lock(ldv_func_arg1);
#line 1499
  return;
}
}
#line 1501 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_53(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1506
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1508
  __ldv_spin_unlock(ldv_func_arg1);
#line 1509
  return;
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_54(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1516
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1518
  __ldv_spin_unlock(ldv_func_arg1);
#line 1519
  return;
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (8UL) {
  case 2UL: 
#line 25
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4169;
  case 4UL: 
#line 25
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4169;
  case 8UL: 
#line 25
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4169;
  default: 
#line 25
  __bad_pda_field();
  }
  ldv_4169: ;
#line 25
  return (ret__);
}
}
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 86
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 86
  return (tmp);
}
}
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1 ) ;
#line 48
void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1 ) ;
#line 52
void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1 ) ;
#line 56
void ldv___ldv_spin_lock_99(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_74(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_78(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) ;
#line 77
void ldv___ldv_spin_unlock_83(spinlock_t *ldv_func_arg1 ) ;
#line 81
void ldv___ldv_spin_unlock_85(spinlock_t *ldv_func_arg1 ) ;
#line 85
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) ;
#line 89
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) ;
#line 93
void ldv___ldv_spin_unlock_90(spinlock_t *ldv_func_arg1 ) ;
#line 97
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) ;
#line 101
void ldv___ldv_spin_unlock_94(spinlock_t *ldv_func_arg1 ) ;
#line 105
void ldv___ldv_spin_unlock_96(spinlock_t *ldv_func_arg1 ) ;
#line 109
void ldv___ldv_spin_unlock_98(spinlock_t *ldv_func_arg1 ) ;
#line 113
void ldv___ldv_spin_unlock_100(spinlock_t *ldv_func_arg1 ) ;
#line 118
int ldv___ldv_spin_trylock_75(spinlock_t *ldv_func_arg1 ) ;
#line 172
void ldv_spin_lock_user_irq_lock_of_drm_i915_private(void) ;
#line 173
void ldv_spin_unlock_user_irq_lock_of_drm_i915_private(void) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 111
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 113
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 135
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 329 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2054 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2056
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2056
  return (tmp);
}
}
#line 2074 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2076
  tmp = test_tsk_thread_flag(p, 2);
#line 2076
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2076
  return ((int )tmp___0);
}
}
#line 1211 "include/drm/drmP.h"
extern void drm_handle_vblank(struct drm_device * , int  ) ;
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_user_irq_get(struct drm_device *dev ) ;
#line 505
void i915_user_irq_put(struct drm_device *dev ) ;
#line 506
void i915_enable_interrupt(struct drm_device *dev ) ;
#line 521
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) ;
#line 524
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 527
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 587
uint32_t i915_get_gem_seqno(struct drm_device *dev ) ;
#line 630
void opregion_asle_intr(struct drm_device *dev ) ;
#line 631
void opregion_enable_asle(struct drm_device *dev ) ;
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 134
  if ((dev_priv->irq_mask_reg & mask) != 0U) {
#line 135
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & ~ mask;
#line 136
    writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 137
    readl((void const volatile   *)dev_priv->regs + 8360U);
  } else {

  }
#line 139
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static void i915_disable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 144
  if ((dev_priv->irq_mask_reg & mask) != mask) {
#line 145
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg | mask;
#line 146
    writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 147
    readl((void const volatile   *)dev_priv->regs + 8360U);
  } else {

  }
#line 149
  return;
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static u32 i915_pipestat(int pipe ) 
{ 


  {
#line 154
  if (pipe == 0) {
#line 155
    return (458788U);
  } else {

  }
#line 156
  if (pipe == 1) {
#line 157
    return (462884U);
  } else {

  }
#line 158
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"),
                       "i" (158), "i" (24UL));
  ldv_25906: ;
#line 158
  goto ldv_25906;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 164
  if ((dev_priv->pipestat[pipe] & mask) != mask) {
#line 165
    tmp = i915_pipestat(pipe);
#line 165
    reg = tmp;
#line 167
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] | mask;
#line 169
    writel(dev_priv->pipestat[pipe] | (mask >> 16), (void volatile   *)dev_priv->regs + (unsigned long )reg);
#line 170
    readl((void const volatile   *)dev_priv->regs + (unsigned long )reg);
  } else {

  }
#line 172
  return;
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 177
  if ((dev_priv->pipestat[pipe] & mask) != 0U) {
#line 178
    tmp = i915_pipestat(pipe);
#line 178
    reg = tmp;
#line 180
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] & ~ mask;
#line 181
    writel(dev_priv->pipestat[pipe], (void volatile   *)dev_priv->regs + (unsigned long )reg);
#line 182
    readl((void const volatile   *)dev_priv->regs + (unsigned long )reg);
  } else {

  }
#line 184
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_pipe_enabled(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long pipeconf ;
  unsigned int tmp ;

  {
#line 198
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 199
  pipeconf = pipe != 0 ? 462856UL : 458760UL;
#line 201
  tmp = readl((void const volatile   *)(dev_priv->regs + pipeconf));
#line 201
  if ((int )tmp < 0) {
#line 202
    return (1);
  } else {

  }
#line 204
  return (0);
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long high_frame ;
  unsigned long low_frame ;
  u32 high1 ;
  u32 high2 ;
  u32 low ;
  u32 count ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 212
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 217
  high_frame = pipe != 0 ? 462912UL : 458816UL;
#line 218
  low_frame = pipe != 0 ? 462916UL : 458820UL;
#line 220
  tmp = i915_pipe_enabled(dev, pipe);
#line 220
  if (tmp == 0) {
#line 221
    printk("<3>[drm:%s] *ERROR* trying to get vblank count for disabled pipe %d\n",
           "i915_get_vblank_counter", pipe);
#line 222
    return (0U);
  } else {

  }
  ldv_25937: 
#line 231
  tmp___0 = readl((void const volatile   *)(dev_priv->regs + high_frame));
#line 231
  high1 = tmp___0 & 65535U;
#line 233
  tmp___1 = readl((void const volatile   *)(dev_priv->regs + low_frame));
#line 233
  low = tmp___1 >> 24;
#line 235
  tmp___2 = readl((void const volatile   *)(dev_priv->regs + high_frame));
#line 235
  high2 = tmp___2 & 65535U;
#line 237
  if (high1 != high2) {
#line 238
    goto ldv_25937;
  } else {

  }
#line 239
  count = (high1 << 8) | low;
#line 241
  return (count);
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  u32 iir ;
  u32 new_iir ;
  u32 pipea_stats ;
  u32 pipeb_stats ;
  u32 vblank_status ;
  u32 vblank_enable ;
  int vblank ;
  int irq_received ;
  int ret ;

  {
#line 246
  dev = (struct drm_device *)arg;
#line 247
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 253
  vblank = 0;
#line 256
  ret = 0;
#line 258
  atomic_inc(& dev_priv->irq_received);
#line 260
  iir = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 262
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 263
    vblank_status = 4U;
#line 264
    vblank_enable = 262144U;
  } else {
#line 266
    vblank_status = 2U;
#line 267
    vblank_enable = 131072U;
  }
  ldv_25957: 
#line 271
  irq_received = iir != 0U;
#line 278
  ldv___ldv_spin_lock_91(& dev_priv->user_irq_lock);
#line 279
  pipea_stats = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 280
  pipeb_stats = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 285
  if ((pipea_stats & 2147549183U) != 0U) {
#line 286
    writel(pipea_stats, (void volatile   *)dev_priv->regs + 458788U);
#line 287
    irq_received = 1;
  } else {

  }
#line 290
  if ((pipeb_stats & 2147549183U) != 0U) {
#line 291
    writel(pipeb_stats, (void volatile   *)dev_priv->regs + 462884U);
#line 292
    irq_received = 1;
  } else {

  }
#line 294
  ldv___ldv_spin_unlock_92(& dev_priv->user_irq_lock);
#line 296
  if (irq_received == 0) {
#line 297
    goto ldv_25956;
  } else {

  }
#line 299
  ret = 1;
#line 301
  writel(iir, (void volatile   *)dev_priv->regs + 8356U);
#line 302
  new_iir = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 304
  if ((unsigned long )(dev->primary)->master != (unsigned long )((struct drm_master *)0)) {
#line 305
    master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 306
    if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 307
      (master_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
    } else {

    }
  } else {

  }
#line 311
  if ((iir & 2U) != 0U) {
#line 312
    dev_priv->mm.irq_gem_seqno = i915_get_gem_seqno(dev);
#line 313
    __wake_up(& dev_priv->irq_queue, 1U, 1, 0);
  } else {

  }
#line 316
  if ((pipea_stats & vblank_status) != 0U) {
#line 317
    vblank = vblank + 1;
#line 318
    drm_handle_vblank(dev, 0);
  } else {

  }
#line 321
  if ((pipeb_stats & vblank_status) != 0U) {
#line 322
    vblank = vblank + 1;
#line 323
    drm_handle_vblank(dev, 1);
  } else {

  }
#line 326
  if (((unsigned long )pipeb_stats & 64UL) != 0UL || (int )iir & 1) {
#line 328
    opregion_asle_intr(dev);
  } else {

  }
#line 345
  iir = new_iir;
#line 346
  goto ldv_25957;
  ldv_25956: ;
#line 348
  return (ret);
}
}
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_emit_irq(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 353
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 354
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 357
  i915_kernel_lost_context(dev);
#line 359
  if (drm_debug != 0U) {
#line 359
    printk("<7>[drm:%s] \n", "i915_emit_irq");
  } else {

  }
#line 361
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 362
  if ((int )dev_priv->counter < 0) {
#line 363
    dev_priv->counter = 1U;
  } else {

  }
#line 364
  if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 365
    (master_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
  } else {

  }
#line 367
  if (dev_priv->ring.space <= 15) {
#line 367
    i915_wait_ring(dev, 16, "i915_emit_irq");
  } else {

  }
#line 367
  outcount = 0U;
#line 367
  outring = (unsigned int )dev_priv->ring.tail;
#line 367
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 367
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 368
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 368
  outcount = outcount + 1U;
#line 368
  outring = outring + 4U;
#line 368
  outring = outring & ringmask;
#line 369
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 369
  outcount = outcount + 1U;
#line 369
  outring = outring + 4U;
#line 369
  outring = outring & ringmask;
#line 370
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 370
  outcount = outcount + 1U;
#line 370
  outring = outring + 4U;
#line 370
  outring = outring & ringmask;
#line 371
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 16777216U;
#line 371
  outcount = outcount + 1U;
#line 371
  outring = outring + 4U;
#line 371
  outring = outring & ringmask;
#line 372
  dev_priv->ring.tail = (int )outring;
#line 372
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 372
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 374
  return ((int )dev_priv->counter);
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_user_irq_get(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 379
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 382
  ldv___ldv_spin_lock_93(& dev_priv->user_irq_lock);
#line 383
  if (dev->irq_enabled != 0) {
#line 383
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount + 1;
#line 383
    if (dev_priv->user_irq_refcount == 1) {
#line 384
      i915_enable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 385
  ldv___ldv_spin_unlock_94(& dev_priv->user_irq_lock);
#line 386
  return;
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_user_irq_put(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 390
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 393
  ldv___ldv_spin_lock_95(& dev_priv->user_irq_lock);
#line 394
  tmp = __builtin_expect(dev->irq_enabled != 0, 0L);
#line 394
  if (tmp != 0L) {
#line 394
    tmp___0 = __builtin_expect(dev_priv->user_irq_refcount <= 0, 0L);
#line 394
    if (tmp___0 != 0L) {
#line 394
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"),
                           "i" (394), "i" (24UL));
      ldv_25978: ;
#line 394
      goto ldv_25978;
    } else {

    }
  } else {

  }
#line 395
  if (dev->irq_enabled != 0) {
#line 395
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount - 1;
#line 395
    if (dev_priv->user_irq_refcount == 0) {
#line 396
      i915_disable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 397
  ldv___ldv_spin_unlock_96(& dev_priv->user_irq_lock);
#line 398
  return;
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_wait_irq(struct drm_device *dev , int irq_nr ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 402
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 403
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 404
  ret = 0;
#line 406
  if (drm_debug != 0U) {
#line 406
    printk("<7>[drm:%s] irq_nr=%d breadcrumb=%d\n", "i915_wait_irq", irq_nr, *((u32 volatile   *)dev_priv->hw_status_page + 33UL));
  } else {

  }
#line 409
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL) >= (unsigned int )irq_nr) {
#line 410
    if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 411
      (master_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
    } else {

    }
#line 412
    return (0);
  } else {

  }
#line 415
  if ((unsigned long )master_priv->sarea_priv != (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 416
    (master_priv->sarea_priv)->perf_boxes = (master_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 418
  i915_user_irq_get(dev);
#line 419
  tmp = get_current();
#line 419
  entry.flags = 0U;
#line 419
  entry.private = (void *)tmp;
#line 419
  entry.func = & default_wake_function;
#line 419
  entry.task_list.next = 0;
#line 419
  entry.task_list.prev = 0;
#line 419
  end = (unsigned long )jiffies + 750UL;
#line 419
  add_wait_queue(& dev_priv->irq_queue, & entry);
  ldv_25996: 
#line 419
  tmp___0 = get_current();
#line 419
  tmp___0->state = 1L;
#line 419
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL) >= (unsigned int )irq_nr) {
#line 419
    goto ldv_25989;
  } else {

  }
#line 419
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )end >= 0L) {
#line 419
    ret = -16;
#line 419
    goto ldv_25989;
  } else {

  }
#line 419
  schedule_timeout(2L);
#line 419
  tmp___1 = get_current();
#line 419
  tmp___2 = signal_pending(tmp___1);
#line 419
  if (tmp___2 != 0) {
#line 419
    ret = -4;
#line 419
    goto ldv_25989;
  } else {

  }
#line 419
  goto ldv_25996;
  ldv_25989: 
#line 419
  tmp___3 = get_current();
#line 419
  tmp___3->state = 0L;
#line 419
  remove_wait_queue(& dev_priv->irq_queue, & entry);
#line 421
  i915_user_irq_put(dev);
#line 423
  if (ret == -16) {
#line 424
    printk("<3>[drm:%s] *ERROR* EBUSY -- rec: %d emitted: %d\n", "i915_wait_irq",
           *((u32 volatile   *)dev_priv->hw_status_page + 33UL), (int )dev_priv->counter);
  } else {

  }
#line 428
  return (ret);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_emit_t *emit ;
  int result ;
  unsigned long tmp ;

  {
#line 436
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 437
  emit = (drm_i915_irq_emit_t *)data;
#line 440
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 440
    if ((int )((file_priv->master)->lock.hw_lock)->lock >= 0 || (unsigned long )(file_priv->master)->lock.file_priv != (unsigned long )file_priv) {
#line 440
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_irq_emit", "i915_irq_emit", (unsigned int )((file_priv->master)->lock.hw_lock)->lock & 2147483648U,
             (file_priv->master)->lock.file_priv, file_priv);
#line 440
      return (-22);
    } else {

    }
  } else {

  }
#line 442
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 443
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_emit");
#line 444
    return (-22);
  } else {

  }
#line 446
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 447
  result = i915_emit_irq(dev);
#line 448
  mutex_unlock(& dev->struct_mutex);
#line 450
  tmp = copy_to_user((void *)emit->irq_seq, (void const   *)(& result), 4U);
#line 450
  if (tmp != 0UL) {
#line 451
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_irq_emit");
#line 452
    return (-14);
  } else {

  }
#line 455
  return (0);
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_wait_t *irqwait ;
  int tmp ;

  {
#line 463
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 464
  irqwait = (drm_i915_irq_wait_t *)data;
#line 466
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 467
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_wait");
#line 468
    return (-22);
  } else {

  }
#line 471
  tmp = i915_wait_irq(dev, irqwait->irq_seq);
#line 471
  return (tmp);
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_enable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 479
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 482
  ldv___ldv_spin_lock_97(& dev_priv->user_irq_lock);
#line 483
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 484
    i915_enable_pipestat(dev_priv, pipe, 262144U);
  } else {
#line 487
    i915_enable_pipestat(dev_priv, pipe, 131072U);
  }
#line 489
  ldv___ldv_spin_unlock_98(& dev_priv->user_irq_lock);
#line 490
  return (0);
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_disable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 498
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 501
  ldv___ldv_spin_lock_99(& dev_priv->user_irq_lock);
#line 502
  i915_disable_pipestat(dev_priv, pipe, 393216U);
#line 505
  ldv___ldv_spin_unlock_100(& dev_priv->user_irq_lock);
#line 506
  return;
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_enable_interrupt(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 510
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 511
  opregion_enable_asle(dev);
#line 512
  dev_priv->irq_enabled = 1;
#line 513
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 521
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 523
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 524
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_set");
#line 525
    return (-22);
  } else {

  }
#line 528
  return (0);
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;

  {
#line 534
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 535
  pipe = (drm_i915_vblank_pipe_t *)data;
#line 537
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 538
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_get");
#line 539
    return (-22);
  } else {

  }
#line 542
  pipe->pipe = 3;
#line 544
  return (0);
}
}
#line 550 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 


  {
#line 567
  return (-22);
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_preinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 574
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 576
  dev_priv->irq_received.counter = 0;
#line 578
  writel(61438U, (void volatile   *)dev_priv->regs + 8344U);
#line 579
  writel(0U, (void volatile   *)dev_priv->regs + 458788U);
#line 580
  writel(0U, (void volatile   *)dev_priv->regs + 462884U);
#line 581
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8360U);
#line 582
  writel(0U, (void volatile   *)dev_priv->regs + 8352U);
#line 583
  readl((void const volatile   *)dev_priv->regs + 8352U);
#line 584
  return;
}
}
#line 586 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_driver_irq_postinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 588
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 590
  dev_priv->vblank_pipe = 3;
#line 592
  dev->max_vblank_count = 16777215U;
#line 595
  dev_priv->irq_mask_reg = 4294967214U;
#line 597
  dev_priv->pipestat[0] = 0U;
#line 598
  dev_priv->pipestat[1] = 0U;
#line 601
  tmp = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 601
  writel(tmp & 2147549183U, (void volatile   *)dev_priv->regs + 458788U);
#line 602
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 602
  writel(tmp___0 & 2147549183U, (void volatile   *)dev_priv->regs + 462884U);
#line 604
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 604
  writel(tmp___1, (void volatile   *)dev_priv->regs + 8356U);
#line 606
  writel(83U, (void volatile   *)dev_priv->regs + 8352U);
#line 607
  writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 608
  readl((void const volatile   *)dev_priv->regs + 8352U);
#line 610
  opregion_enable_asle(dev);
#line 611
  init_waitqueue_head(& dev_priv->irq_queue);
#line 613
  return (0);
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_uninstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 618
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 620
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 621
    return;
  } else {

  }
#line 623
  dev_priv->vblank_pipe = 0;
#line 625
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8344U);
#line 626
  writel(0U, (void volatile   *)dev_priv->regs + 458788U);
#line 627
  writel(0U, (void volatile   *)dev_priv->regs + 462884U);
#line 628
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8360U);
#line 629
  writel(0U, (void volatile   *)dev_priv->regs + 8352U);
#line 631
  tmp = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 631
  writel(tmp & 2147549183U, (void volatile   *)dev_priv->regs + 458788U);
#line 632
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 632
  writel(tmp___0 & 2147549183U, (void volatile   *)dev_priv->regs + 462884U);
#line 633
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 633
  writel(tmp___1, (void volatile   *)dev_priv->regs + 8356U);
#line 634
  return;
}
}
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 641
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 643
  __ldv_spin_lock(ldv_func_arg1);
#line 644
  return;
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_74(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 651
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 653
  __ldv_spin_unlock(ldv_func_arg1);
#line 654
  return;
}
}
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int ldv___ldv_spin_trylock_75(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 661
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 661
  ldv_func_res = tmp;
#line 663
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 663
  return (tmp___0);
#line 665
  return (ldv_func_res);
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 673
  ldv_spin_lock_dcache_lock();
#line 675
  __ldv_spin_lock(ldv_func_arg1);
#line 676
  return;
}
}
#line 678 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 683
  ldv_spin_lock_d_lock_of_dentry();
#line 685
  __ldv_spin_lock(ldv_func_arg1);
#line 686
  return;
}
}
#line 688 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_78(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 693
  ldv_spin_unlock_d_lock_of_dentry();
#line 695
  __ldv_spin_unlock(ldv_func_arg1);
#line 696
  return;
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 703
  ldv_spin_unlock_dcache_lock();
#line 705
  __ldv_spin_unlock(ldv_func_arg1);
#line 706
  return;
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 713
  ldv_spin_lock_d_lock_of_dentry();
#line 715
  __ldv_spin_lock(ldv_func_arg1);
#line 716
  return;
}
}
#line 718 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 723
  ldv_spin_unlock_d_lock_of_dentry();
#line 725
  __ldv_spin_unlock(ldv_func_arg1);
#line 726
  return;
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 733
  ldv_spin_lock_i_lock_of_inode();
#line 735
  __ldv_spin_lock(ldv_func_arg1);
#line 736
  return;
}
}
#line 738 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_83(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 743
  ldv_spin_unlock_i_lock_of_inode();
#line 745
  __ldv_spin_unlock(ldv_func_arg1);
#line 746
  return;
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 753
  ldv_spin_lock_d_lock_of_dentry();
#line 755
  __ldv_spin_lock(ldv_func_arg1);
#line 756
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_85(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 763
  ldv_spin_unlock_d_lock_of_dentry();
#line 765
  __ldv_spin_unlock(ldv_func_arg1);
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 773
  ldv_spin_lock_siglock_of_sighand_struct();
#line 775
  __ldv_spin_lock(ldv_func_arg1);
#line 776
  return;
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 783
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 785
  __ldv_spin_unlock(ldv_func_arg1);
#line 786
  return;
}
}
#line 788 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 793
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 795
  __ldv_spin_lock(ldv_func_arg1);
#line 796
  return;
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 803
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 805
  __ldv_spin_unlock(ldv_func_arg1);
#line 806
  return;
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_90(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 813
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 815
  __ldv_spin_unlock(ldv_func_arg1);
#line 816
  return;
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 823
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 825
  __ldv_spin_lock(ldv_func_arg1);
#line 826
  return;
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 833
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 835
  __ldv_spin_unlock(ldv_func_arg1);
#line 836
  return;
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 843
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 845
  __ldv_spin_lock(ldv_func_arg1);
#line 846
  return;
}
}
#line 848 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_94(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 853
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 855
  __ldv_spin_unlock(ldv_func_arg1);
#line 856
  return;
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 863
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 865
  __ldv_spin_lock(ldv_func_arg1);
#line 866
  return;
}
}
#line 868 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_96(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 873
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 875
  __ldv_spin_unlock(ldv_func_arg1);
#line 876
  return;
}
}
#line 878 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 883
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 885
  __ldv_spin_lock(ldv_func_arg1);
#line 886
  return;
}
}
#line 888 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_98(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 893
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 895
  __ldv_spin_unlock(ldv_func_arg1);
#line 896
  return;
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_99(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 903
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 905
  __ldv_spin_lock(ldv_func_arg1);
#line 906
  return;
}
}
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_100(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 913
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 915
  __ldv_spin_unlock(ldv_func_arg1);
#line 916
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_129(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_132(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_133(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_136(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_138(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_140(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_142(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_144(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_130(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_134(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_135(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_137(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_139(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_141(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_143(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_145(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_146(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_131(spinlock_t *ldv_func_arg1 ) ;
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void mark_block(struct drm_device *dev , struct mem_block *p , int in_use ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  drm_i915_sarea_t *sarea_priv ;
  struct drm_tex_region *list ;
  unsigned int shift ;
  unsigned int nr ;
  unsigned int start ;
  unsigned int end ;
  unsigned int i ;
  int age ;

  {
#line 115
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 116
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 117
  sarea_priv = master_priv->sarea_priv;
#line 125
  shift = (unsigned int )dev_priv->tex_lru_log_granularity;
#line 126
  nr = 255U;
#line 128
  start = (unsigned int )(p->start >> (int )shift);
#line 129
  end = (unsigned int )(((p->start + p->size) + -1) >> (int )shift);
#line 131
  sarea_priv->texAge = sarea_priv->texAge + 1;
#line 131
  age = sarea_priv->texAge;
#line 132
  list = (struct drm_tex_region *)(& sarea_priv->texList);
#line 137
  i = start;
#line 137
  goto ldv_25662;
  ldv_25661: 
#line 138
  (list + (unsigned long )i)->in_use = (unsigned char )in_use;
#line 139
  (list + (unsigned long )i)->age = (unsigned int )age;
#line 143
  (list + (unsigned long )(list + (unsigned long )i)->next)->prev = (list + (unsigned long )i)->prev;
#line 144
  (list + (unsigned long )(list + (unsigned long )i)->prev)->next = (list + (unsigned long )i)->next;
#line 148
  (list + (unsigned long )i)->prev = (unsigned char )nr;
#line 149
  (list + (unsigned long )i)->next = (list + (unsigned long )nr)->next;
#line 150
  (list + (unsigned long )(list + (unsigned long )nr)->next)->prev = (unsigned char )i;
#line 151
  (list + (unsigned long )nr)->next = (unsigned char )i;
#line 137
  i = i + 1U;
  ldv_25662: ;
#line 137
  if (i <= end) {
#line 138
    goto ldv_25661;
  } else {

  }

#line 142
  return;
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *split_block(struct mem_block *p , int start , int size ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *newblock ;
  void *tmp ;
  struct mem_block *newblock___0 ;
  void *tmp___0 ;

  {
#line 163
  if (p->start < start) {
#line 164
    tmp = drm_alloc(32UL, 14);
#line 164
    newblock = (struct mem_block *)tmp;
#line 166
    if ((unsigned long )newblock == (unsigned long )((struct mem_block *)0)) {
#line 167
      goto out;
    } else {

    }
#line 168
    newblock->start = start;
#line 169
    newblock->size = p->size + (p->start - start);
#line 170
    newblock->file_priv = 0;
#line 171
    newblock->next = p->next;
#line 172
    newblock->prev = p;
#line 173
    (p->next)->prev = newblock;
#line 174
    p->next = newblock;
#line 175
    p->size = p->size - newblock->size;
#line 176
    p = newblock;
  } else {

  }
#line 180
  if (p->size > size) {
#line 181
    tmp___0 = drm_alloc(32UL, 14);
#line 181
    newblock___0 = (struct mem_block *)tmp___0;
#line 183
    if ((unsigned long )newblock___0 == (unsigned long )((struct mem_block *)0)) {
#line 184
      goto out;
    } else {

    }
#line 185
    newblock___0->start = start + size;
#line 186
    newblock___0->size = p->size - size;
#line 187
    newblock___0->file_priv = 0;
#line 188
    newblock___0->next = p->next;
#line 189
    newblock___0->prev = p;
#line 190
    (p->next)->prev = newblock___0;
#line 191
    p->next = newblock___0;
#line 192
    p->size = size;
  } else {

  }
  out: 
#line 197
  p->file_priv = file_priv;
#line 198
  return (p);
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *alloc_block(struct mem_block *heap , int size , int align2 ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *p ;
  int mask ;
  int start ;
  struct mem_block *tmp ;

  {
#line 205
  mask = (1 << align2) + -1;
#line 207
  p = heap->next;
#line 207
  goto ldv_25683;
  ldv_25682: 
#line 208
  start = (p->start + mask) & ~ mask;
#line 209
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && start + size <= p->start + p->size) {
#line 210
    tmp = split_block(p, start, size, file_priv);
#line 210
    return (tmp);
  } else {

  }
#line 207
  p = p->next;
  ldv_25683: ;
#line 207
  if ((unsigned long )p != (unsigned long )heap) {
#line 208
    goto ldv_25682;
  } else {

  }

#line 213
  return (0);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *find_block(struct mem_block *heap , int start ) 
{ 
  struct mem_block *p ;

  {
#line 220
  p = heap->next;
#line 220
  goto ldv_25691;
  ldv_25690: ;
#line 221
  if (p->start == start) {
#line 222
    return (p);
  } else {

  }
#line 220
  p = p->next;
  ldv_25691: ;
#line 220
  if ((unsigned long )p != (unsigned long )heap) {
#line 221
    goto ldv_25690;
  } else {

  }

#line 224
  return (0);
}
}
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void free_block(struct mem_block *p ) 
{ 
  struct mem_block *q ;
  struct mem_block *q___0 ;

  {
#line 229
  p->file_priv = 0;
#line 234
  if ((unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 235
    q = p->next;
#line 236
    p->size = p->size + q->size;
#line 237
    p->next = q->next;
#line 238
    (p->next)->prev = p;
#line 239
    drm_free((void *)q, 32UL, 14);
  } else {

  }
#line 242
  if ((unsigned long )(p->prev)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 243
    q___0 = p->prev;
#line 244
    q___0->size = q___0->size + p->size;
#line 245
    q___0->next = p->next;
#line 246
    (q___0->next)->prev = q___0;
#line 247
    drm_free((void *)p, 32UL, 14);
  } else {

  }
#line 249
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static int init_heap(struct mem_block **heap , int start , int size ) 
{ 
  struct mem_block *blocks ;
  void *tmp ;
  void *tmp___0 ;
  struct mem_block *tmp___1 ;
  struct mem_block *tmp___2 ;

  {
#line 255
  tmp = drm_alloc(32UL, 14);
#line 255
  blocks = (struct mem_block *)tmp;
#line 257
  if ((unsigned long )blocks == (unsigned long )((struct mem_block *)0)) {
#line 258
    return (-12);
  } else {

  }
#line 260
  tmp___0 = drm_alloc(32UL, 14);
#line 260
  *heap = (struct mem_block *)tmp___0;
#line 261
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 262
    drm_free((void *)blocks, 32UL, 14);
#line 263
    return (-12);
  } else {

  }
#line 266
  blocks->start = start;
#line 267
  blocks->size = size;
#line 268
  blocks->file_priv = 0;
#line 269
  tmp___1 = *heap;
#line 269
  blocks->prev = tmp___1;
#line 269
  blocks->next = tmp___1;
#line 271
  memset((void *)*heap, 0, 32UL);
#line 272
  (*heap)->file_priv = 0xffffffffffffffffUL;
#line 273
  tmp___2 = blocks;
#line 273
  (*heap)->prev = tmp___2;
#line 273
  (*heap)->next = tmp___2;
#line 274
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 284
  if ((unsigned long )heap == (unsigned long )((struct mem_block *)0) || (unsigned long )heap->next == (unsigned long )((struct mem_block *)0)) {
#line 285
    return;
  } else {

  }
#line 287
  p = heap->next;
#line 287
  goto ldv_25711;
  ldv_25710: ;
#line 288
  if ((unsigned long )p->file_priv == (unsigned long )file_priv) {
#line 289
    p->file_priv = 0;
#line 290
    mark_block(dev, p, 0);
  } else {

  }
#line 287
  p = p->next;
  ldv_25711: ;
#line 287
  if ((unsigned long )p != (unsigned long )heap) {
#line 288
    goto ldv_25710;
  } else {

  }
#line 297
  p = heap->next;
#line 297
  goto ldv_25718;
  ldv_25717: ;
#line 298
  goto ldv_25715;
  ldv_25714: 
#line 299
  q = p->next;
#line 300
  p->size = p->size + q->size;
#line 301
  p->next = q->next;
#line 302
  (p->next)->prev = p;
#line 303
  drm_free((void *)q, 32UL, 14);
  ldv_25715: ;
#line 298
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && (unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 299
    goto ldv_25714;
  } else {

  }
#line 297
  p = p->next;
  ldv_25718: ;
#line 297
  if ((unsigned long )p != (unsigned long )heap) {
#line 298
    goto ldv_25717;
  } else {

  }

#line 302
  return;
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_takedown(struct mem_block **heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 314
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 315
    return;
  } else {

  }
#line 317
  p = (*heap)->next;
#line 317
  goto ldv_25726;
  ldv_25725: 
#line 318
  q = p;
#line 319
  p = p->next;
#line 320
  drm_free((void *)q, 32UL, 14);
  ldv_25726: ;
#line 317
  if ((unsigned long )*heap != (unsigned long )p) {
#line 318
    goto ldv_25725;
  } else {

  }
#line 323
  drm_free((void *)*heap, 32UL, 14);
#line 324
  *heap = 0;
#line 325
  return;
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block **get_heap(drm_i915_private_t *dev_priv , int region ) 
{ 


  {
#line 329
  switch (region) {
  case 1: ;
#line 331
  return (& dev_priv->agp_heap);
  default: ;
#line 333
  return (0);
  }
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_alloc_t *alloc ;
  struct mem_block *block ;
  struct mem_block **heap ;
  unsigned long tmp ;

  {
#line 342
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 343
  alloc = (drm_i915_mem_alloc_t *)data;
#line 346
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 347
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_alloc");
#line 348
    return (-22);
  } else {

  }
#line 351
  heap = get_heap(dev_priv, alloc->region);
#line 352
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 353
    return (-14);
  } else {

  }
#line 358
  if (alloc->alignment <= 11) {
#line 359
    alloc->alignment = 12;
  } else {

  }
#line 361
  block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
#line 363
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 364
    return (-12);
  } else {

  }
#line 366
  mark_block(dev, block, 1);
#line 368
  tmp = copy_to_user((void *)alloc->region_offset, (void const   *)(& block->start),
                     4U);
#line 368
  if (tmp != 0UL) {
#line 370
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_mem_alloc");
#line 371
    return (-14);
  } else {

  }
#line 374
  return (0);
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_free_t *memfree ;
  struct mem_block *block ;
  struct mem_block **heap ;

  {
#line 380
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 381
  memfree = (drm_i915_mem_free_t *)data;
#line 384
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 385
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_free");
#line 386
    return (-22);
  } else {

  }
#line 389
  heap = get_heap(dev_priv, memfree->region);
#line 390
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 391
    return (-14);
  } else {

  }
#line 393
  block = find_block(*heap, memfree->region_offset);
#line 394
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 395
    return (-14);
  } else {

  }
#line 397
  if ((unsigned long )block->file_priv != (unsigned long )file_priv) {
#line 398
    return (-1);
  } else {

  }
#line 400
  mark_block(dev, block, 0);
#line 401
  free_block(block);
#line 402
  return (0);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_init_heap_t *initheap ;
  struct mem_block **heap ;
  int tmp ;

  {
#line 408
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 409
  initheap = (drm_i915_mem_init_heap_t *)data;
#line 412
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 413
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_init_heap");
#line 414
    return (-22);
  } else {

  }
#line 417
  heap = get_heap(dev_priv, initheap->region);
#line 418
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 419
    return (-14);
  } else {

  }
#line 421
  if ((unsigned long )*heap != (unsigned long )((struct mem_block *)0)) {
#line 422
    printk("<3>[drm:%s] *ERROR* heap already initialized?", "i915_mem_init_heap");
#line 423
    return (-14);
  } else {

  }
#line 426
  tmp = init_heap(heap, initheap->start, initheap->size);
#line 426
  return (tmp);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_destroy_heap_t *destroyheap ;
  struct mem_block **heap ;

  {
#line 432
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 433
  destroyheap = (drm_i915_mem_destroy_heap_t *)data;
#line 436
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 437
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_destroy_heap");
#line 438
    return (-22);
  } else {

  }
#line 441
  heap = get_heap(dev_priv, destroyheap->region);
#line 442
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 443
    printk("<3>[drm:%s] *ERROR* get_heap failed", "i915_mem_destroy_heap");
#line 444
    return (-14);
  } else {

  }
#line 447
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 448
    printk("<3>[drm:%s] *ERROR* heap not initialized?", "i915_mem_destroy_heap");
#line 449
    return (-14);
  } else {

  }
#line 452
  i915_mem_takedown(heap);
#line 453
  return (0);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_129(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 461
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 463
  __ldv_spin_lock(ldv_func_arg1);
#line 464
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_130(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 471
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 473
  __ldv_spin_unlock(ldv_func_arg1);
#line 474
  return;
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int ldv___ldv_spin_trylock_131(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 481
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 481
  ldv_func_res = tmp;
#line 483
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 483
  return (tmp___0);
#line 485
  return (ldv_func_res);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_132(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 493
  ldv_spin_lock_dcache_lock();
#line 495
  __ldv_spin_lock(ldv_func_arg1);
#line 496
  return;
}
}
#line 498 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_133(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 503
  ldv_spin_lock_d_lock_of_dentry();
#line 505
  __ldv_spin_lock(ldv_func_arg1);
#line 506
  return;
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_134(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 513
  ldv_spin_unlock_d_lock_of_dentry();
#line 515
  __ldv_spin_unlock(ldv_func_arg1);
#line 516
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_135(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 523
  ldv_spin_unlock_dcache_lock();
#line 525
  __ldv_spin_unlock(ldv_func_arg1);
#line 526
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_136(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 533
  ldv_spin_lock_d_lock_of_dentry();
#line 535
  __ldv_spin_lock(ldv_func_arg1);
#line 536
  return;
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_137(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 543
  ldv_spin_unlock_d_lock_of_dentry();
#line 545
  __ldv_spin_unlock(ldv_func_arg1);
#line 546
  return;
}
}
#line 548 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_138(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 553
  ldv_spin_lock_i_lock_of_inode();
#line 555
  __ldv_spin_lock(ldv_func_arg1);
#line 556
  return;
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_139(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 563
  ldv_spin_unlock_i_lock_of_inode();
#line 565
  __ldv_spin_unlock(ldv_func_arg1);
#line 566
  return;
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_140(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 573
  ldv_spin_lock_d_lock_of_dentry();
#line 575
  __ldv_spin_lock(ldv_func_arg1);
#line 576
  return;
}
}
#line 578 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_141(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 583
  ldv_spin_unlock_d_lock_of_dentry();
#line 585
  __ldv_spin_unlock(ldv_func_arg1);
#line 586
  return;
}
}
#line 588 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_142(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 593
  ldv_spin_lock_siglock_of_sighand_struct();
#line 595
  __ldv_spin_lock(ldv_func_arg1);
#line 596
  return;
}
}
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_143(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 603
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 605
  __ldv_spin_unlock(ldv_func_arg1);
#line 606
  return;
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_144(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 613
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 615
  __ldv_spin_lock(ldv_func_arg1);
#line 616
  return;
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_145(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 623
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 625
  __ldv_spin_unlock(ldv_func_arg1);
#line 626
  return;
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_146(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 633
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 635
  __ldv_spin_unlock(ldv_func_arg1);
#line 636
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_165(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_168(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_169(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_172(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_174(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_176(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_178(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_180(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_166(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_170(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_171(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_173(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_175(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_177(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_179(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_181(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_182(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_167(spinlock_t *ldv_func_arg1 ) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 18
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 18
  return (ret);
}
}
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 26
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 27
  return;
}
}
#line 573 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus * , unsigned int  , int  , u8 * ) ;
#line 579
extern int pci_bus_write_config_byte(struct pci_bus * , unsigned int  , int  , u8  ) ;
#line 586 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 588
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 588
  return (tmp);
}
}
#line 599 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 601
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, (int )val);
#line 601
  return (tmp);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static bool i915_pipe_enabled___0(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 101
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 103
  if ((unsigned int )pipe == 0U) {
#line 104
    tmp = readl((void const volatile   *)dev_priv->regs + 24596U);
#line 104
    return ((tmp & 2147483648U) != 0U);
  } else {
#line 106
    tmp___0 = readl((void const volatile   *)dev_priv->regs + 24600U);
#line 106
    return ((tmp___0 & 2147483648U) != 0U);
  }
}
}
#line 109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_save_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 111
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 112
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 116
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 116
  if (tmp) {
#line 116
    tmp___0 = 0;
  } else {
#line 116
    tmp___0 = 1;
  }
#line 116
  if (tmp___0) {
#line 117
    return;
  } else {

  }
#line 119
  if ((unsigned int )pipe == 0U) {
#line 120
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 122
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 124
  i = 0;
#line 124
  goto ldv_25660;
  ldv_25659: 
#line 125
  *(array + (unsigned long )i) = readl((void const volatile   *)(dev_priv->regs + ((unsigned long )(i << 2) + reg)));
#line 124
  i = i + 1;
  ldv_25660: ;
#line 124
  if (i <= 255) {
#line 125
    goto ldv_25659;
  } else {

  }

#line 129
  return;
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_restore_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 130
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 131
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 135
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 135
  if (tmp) {
#line 135
    tmp___0 = 0;
  } else {
#line 135
    tmp___0 = 1;
  }
#line 135
  if (tmp___0) {
#line 136
    return;
  } else {

  }
#line 138
  if ((unsigned int )pipe == 0U) {
#line 139
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 141
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 143
  i = 0;
#line 143
  goto ldv_25671;
  ldv_25670: 
#line 144
  writel(*(array + (unsigned long )i), (void volatile   *)(dev_priv->regs + ((unsigned long )(i << 2) + reg)));
#line 143
  i = i + 1;
  ldv_25671: ;
#line 143
  if (i <= 255) {
#line 144
    goto ldv_25670;
  } else {

  }

#line 148
  return;
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static u8 i915_read_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                            u8 reg ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 149
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 151
  writeb((int )reg, (void volatile   *)dev_priv->regs + (unsigned long )index_port);
#line 152
  tmp = readb((void const volatile   *)dev_priv->regs + (unsigned long )data_port);
#line 152
  return (tmp);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static u8 i915_read_ar(struct drm_device *dev , u16 st01 , u8 reg , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 157
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 159
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 160
  writeb((int )((unsigned char )palette_enable) | (int )reg, (void volatile   *)dev_priv->regs + 960U);
#line 161
  tmp = readb((void const volatile   *)dev_priv->regs + 961U);
#line 161
  return (tmp);
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_write_ar(struct drm_device *dev , u16 st01 , u8 reg , u8 val , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 166
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 168
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 169
  writeb((int )((unsigned char )palette_enable) | (int )reg, (void volatile   *)dev_priv->regs + 960U);
#line 170
  writeb((int )val, (void volatile   *)dev_priv->regs + 960U);
#line 171
  return;
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_write_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                               u8 reg , u8 val ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 175
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 177
  writeb((int )reg, (void volatile   *)dev_priv->regs + (unsigned long )index_port);
#line 178
  writeb((int )val, (void volatile   *)dev_priv->regs + (unsigned long )data_port);
#line 179
  return;
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_save_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;
  u8 tmp ;

  {
#line 183
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 188
  dev_priv->saveDACMASK = readb((void const volatile   *)dev_priv->regs + 966U);
#line 190
  writeb(0, (void volatile   *)dev_priv->regs + 967U);
#line 192
  i = 0;
#line 192
  goto ldv_25712;
  ldv_25711: 
#line 193
  dev_priv->saveDACDATA[i] = readb((void const volatile   *)dev_priv->regs + 969U);
#line 192
  i = i + 1;
  ldv_25712: ;
#line 192
  if (i <= 767) {
#line 193
    goto ldv_25711;
  } else {

  }
#line 196
  dev_priv->saveMSR = readb((void const volatile   *)dev_priv->regs + 972U);
#line 197
  if ((int )dev_priv->saveMSR & 1) {
#line 198
    cr_index = 980U;
#line 199
    cr_data = 981U;
#line 200
    st01 = 986U;
  } else {
#line 202
    cr_index = 948U;
#line 203
    cr_data = 949U;
#line 204
    st01 = 954U;
  }
#line 208
  tmp = i915_read_indexed(dev, (int )cr_index, (int )cr_data, 17);
#line 208
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, 17, (int )tmp & 127);
#line 211
  i = 0;
#line 211
  goto ldv_25715;
  ldv_25714: 
#line 212
  dev_priv->saveCR[i] = i915_read_indexed(dev, (int )cr_index, (int )cr_data, (int )((u8 )i));
#line 211
  i = i + 1;
  ldv_25715: ;
#line 211
  if (i <= 36) {
#line 212
    goto ldv_25714;
  } else {

  }
#line 215
  dev_priv->saveCR[17] = (unsigned int )dev_priv->saveCR[17] & 127U;
#line 218
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 219
  dev_priv->saveAR_INDEX = readb((void const volatile   *)dev_priv->regs + 960U);
#line 220
  i = 0;
#line 220
  goto ldv_25718;
  ldv_25717: 
#line 221
  dev_priv->saveAR[i] = i915_read_ar(dev, (int )st01, (int )((u8 )i), 0);
#line 220
  i = i + 1;
  ldv_25718: ;
#line 220
  if (i <= 20) {
#line 221
    goto ldv_25717;
  } else {

  }
#line 222
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 223
  writeb((int )dev_priv->saveAR_INDEX, (void volatile   *)dev_priv->regs + 960U);
#line 224
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 227
  i = 0;
#line 227
  goto ldv_25721;
  ldv_25720: 
#line 228
  dev_priv->saveGR[i] = i915_read_indexed(dev, 974, 975, (int )((u8 )i));
#line 227
  i = i + 1;
  ldv_25721: ;
#line 227
  if (i <= 8) {
#line 228
    goto ldv_25720;
  } else {

  }
#line 231
  dev_priv->saveGR[16] = i915_read_indexed(dev, 974, 975, 16);
#line 233
  dev_priv->saveGR[17] = i915_read_indexed(dev, 974, 975, 17);
#line 235
  dev_priv->saveGR[24] = i915_read_indexed(dev, 974, 975, 24);
#line 239
  i = 0;
#line 239
  goto ldv_25724;
  ldv_25723: 
#line 240
  dev_priv->saveSR[i] = i915_read_indexed(dev, 964, 965, (int )((u8 )i));
#line 239
  i = i + 1;
  ldv_25724: ;
#line 239
  if (i <= 7) {
#line 240
    goto ldv_25723;
  } else {

  }

#line 244
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_restore_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;

  {
#line 246
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 251
  writeb((int )dev_priv->saveMSR, (void volatile   *)dev_priv->regs + 962U);
#line 252
  if ((int )dev_priv->saveMSR & 1) {
#line 253
    cr_index = 980U;
#line 254
    cr_data = 981U;
#line 255
    st01 = 986U;
  } else {
#line 257
    cr_index = 948U;
#line 258
    cr_data = 949U;
#line 259
    st01 = 954U;
  }
#line 263
  i = 0;
#line 263
  goto ldv_25735;
  ldv_25734: 
#line 264
  i915_write_indexed(dev, 964, 965, (int )((u8 )i), (int )dev_priv->saveSR[i]);
#line 263
  i = i + 1;
  ldv_25735: ;
#line 263
  if (i <= 6) {
#line 264
    goto ldv_25734;
  } else {

  }
#line 269
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, 17, (int )dev_priv->saveCR[17]);
#line 270
  i = 0;
#line 270
  goto ldv_25738;
  ldv_25737: 
#line 271
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, (int )((u8 )i), (int )dev_priv->saveCR[i]);
#line 270
  i = i + 1;
  ldv_25738: ;
#line 270
  if (i <= 36) {
#line 271
    goto ldv_25737;
  } else {

  }
#line 274
  i = 0;
#line 274
  goto ldv_25741;
  ldv_25740: 
#line 275
  i915_write_indexed(dev, 974, 975, (int )((u8 )i), (int )dev_priv->saveGR[i]);
#line 274
  i = i + 1;
  ldv_25741: ;
#line 274
  if (i <= 8) {
#line 275
    goto ldv_25740;
  } else {

  }
#line 278
  i915_write_indexed(dev, 974, 975, 16, (int )dev_priv->saveGR[16]);
#line 280
  i915_write_indexed(dev, 974, 975, 17, (int )dev_priv->saveGR[17]);
#line 282
  i915_write_indexed(dev, 974, 975, 24, (int )dev_priv->saveGR[24]);
#line 286
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 287
  i = 0;
#line 287
  goto ldv_25744;
  ldv_25743: 
#line 288
  i915_write_ar(dev, (int )st01, (int )((u8 )i), (int )dev_priv->saveAR[i], 0);
#line 287
  i = i + 1;
  ldv_25744: ;
#line 287
  if (i <= 20) {
#line 288
    goto ldv_25743;
  } else {

  }
#line 289
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 290
  writeb((int )((unsigned int )dev_priv->saveAR_INDEX | 32U), (void volatile   *)dev_priv->regs + 960U);
#line 291
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 294
  writeb((int )dev_priv->saveDACMASK, (void volatile   *)dev_priv->regs + 966U);
#line 296
  writeb(0, (void volatile   *)dev_priv->regs + 968U);
#line 298
  i = 0;
#line 298
  goto ldv_25747;
  ldv_25746: 
#line 299
  writeb((int )dev_priv->saveDACDATA[i], (void volatile   *)dev_priv->regs + 969U);
#line 298
  i = i + 1;
  ldv_25747: ;
#line 298
  if (i <= 767) {
#line 299
    goto ldv_25746;
  } else {

  }

#line 303
  return;
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
int i915_save_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;

  {
#line 305
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 308
  pci_read_config_byte(dev->pdev, 244, & dev_priv->saveLBB);
#line 311
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 312
    dev_priv->saveRENDERSTANDBY = readl((void const volatile   *)dev_priv->regs + 70072U);
  } else {

  }
#line 315
  dev_priv->saveHWS = readl((void const volatile   *)dev_priv->regs + 8320U);
#line 318
  dev_priv->saveDSPARB = readl((void const volatile   *)dev_priv->regs + 458800U);
#line 321
  dev_priv->savePIPEACONF = readl((void const volatile   *)dev_priv->regs + 458760U);
#line 322
  dev_priv->savePIPEASRC = readl((void const volatile   *)dev_priv->regs + 393244U);
#line 323
  dev_priv->saveFPA0 = readl((void const volatile   *)dev_priv->regs + 24640U);
#line 324
  dev_priv->saveFPA1 = readl((void const volatile   *)dev_priv->regs + 24644U);
#line 325
  dev_priv->saveDPLL_A = readl((void const volatile   *)dev_priv->regs + 24596U);
#line 326
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 327
    dev_priv->saveDPLL_A_MD = readl((void const volatile   *)dev_priv->regs + 24604U);
  } else {

  }
#line 328
  dev_priv->saveHTOTAL_A = readl((void const volatile   *)dev_priv->regs + 393216U);
#line 329
  dev_priv->saveHBLANK_A = readl((void const volatile   *)dev_priv->regs + 393220U);
#line 330
  dev_priv->saveHSYNC_A = readl((void const volatile   *)dev_priv->regs + 393224U);
#line 331
  dev_priv->saveVTOTAL_A = readl((void const volatile   *)dev_priv->regs + 393228U);
#line 332
  dev_priv->saveVBLANK_A = readl((void const volatile   *)dev_priv->regs + 393232U);
#line 333
  dev_priv->saveVSYNC_A = readl((void const volatile   *)dev_priv->regs + 393236U);
#line 334
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)dev_priv->regs + 393248U);
#line 336
  dev_priv->saveDSPACNTR = readl((void const volatile   *)dev_priv->regs + 459136U);
#line 337
  dev_priv->saveDSPASTRIDE = readl((void const volatile   *)dev_priv->regs + 459144U);
#line 338
  dev_priv->saveDSPASIZE = readl((void const volatile   *)dev_priv->regs + 459152U);
#line 339
  dev_priv->saveDSPAPOS = readl((void const volatile   *)dev_priv->regs + 459148U);
#line 340
  dev_priv->saveDSPAADDR = readl((void const volatile   *)dev_priv->regs + 459140U);
#line 341
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 342
    dev_priv->saveDSPASURF = readl((void const volatile   *)dev_priv->regs + 459164U);
#line 343
    dev_priv->saveDSPATILEOFF = readl((void const volatile   *)dev_priv->regs + 459172U);
  } else {

  }
#line 345
  i915_save_palette(dev, PIPE_A);
#line 346
  dev_priv->savePIPEASTAT = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 349
  dev_priv->savePIPEBCONF = readl((void const volatile   *)dev_priv->regs + 462856U);
#line 350
  dev_priv->savePIPEBSRC = readl((void const volatile   *)dev_priv->regs + 397340U);
#line 351
  dev_priv->saveFPB0 = readl((void const volatile   *)dev_priv->regs + 24648U);
#line 352
  dev_priv->saveFPB1 = readl((void const volatile   *)dev_priv->regs + 24652U);
#line 353
  dev_priv->saveDPLL_B = readl((void const volatile   *)dev_priv->regs + 24600U);
#line 354
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 355
    dev_priv->saveDPLL_B_MD = readl((void const volatile   *)dev_priv->regs + 24608U);
  } else {

  }
#line 356
  dev_priv->saveHTOTAL_B = readl((void const volatile   *)dev_priv->regs + 397312U);
#line 357
  dev_priv->saveHBLANK_B = readl((void const volatile   *)dev_priv->regs + 397316U);
#line 358
  dev_priv->saveHSYNC_B = readl((void const volatile   *)dev_priv->regs + 397320U);
#line 359
  dev_priv->saveVTOTAL_B = readl((void const volatile   *)dev_priv->regs + 397324U);
#line 360
  dev_priv->saveVBLANK_B = readl((void const volatile   *)dev_priv->regs + 397328U);
#line 361
  dev_priv->saveVSYNC_B = readl((void const volatile   *)dev_priv->regs + 397332U);
#line 362
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)dev_priv->regs + 393248U);
#line 364
  dev_priv->saveDSPBCNTR = readl((void const volatile   *)dev_priv->regs + 463232U);
#line 365
  dev_priv->saveDSPBSTRIDE = readl((void const volatile   *)dev_priv->regs + 463240U);
#line 366
  dev_priv->saveDSPBSIZE = readl((void const volatile   *)dev_priv->regs + 463248U);
#line 367
  dev_priv->saveDSPBPOS = readl((void const volatile   *)dev_priv->regs + 463244U);
#line 368
  dev_priv->saveDSPBADDR = readl((void const volatile   *)dev_priv->regs + 463236U);
#line 369
  if (dev->pci_device == 10754 || dev->pci_device == 10818) {
#line 370
    dev_priv->saveDSPBSURF = readl((void const volatile   *)dev_priv->regs + 463260U);
#line 371
    dev_priv->saveDSPBTILEOFF = readl((void const volatile   *)dev_priv->regs + 463268U);
  } else {

  }
#line 373
  i915_save_palette(dev, PIPE_B);
#line 374
  dev_priv->savePIPEBSTAT = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 377
  dev_priv->saveADPA = readl((void const volatile   *)dev_priv->regs + 397568U);
#line 380
  dev_priv->savePP_CONTROL = readl((void const volatile   *)dev_priv->regs + 397828U);
#line 381
  dev_priv->savePFIT_PGM_RATIOS = readl((void const volatile   *)dev_priv->regs + 397876U);
#line 382
  dev_priv->saveBLC_PWM_CTL = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 383
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 384
    dev_priv->saveBLC_PWM_CTL2 = readl((void const volatile   *)dev_priv->regs + 397904U);
  } else {

  }
#line 385
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 386
    dev_priv->saveLVDS = readl((void const volatile   *)dev_priv->regs + 397696U);
  } else {

  }
#line 387
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 388
    dev_priv->savePFIT_CONTROL = readl((void const volatile   *)dev_priv->regs + 397872U);
  } else {

  }
#line 389
  dev_priv->savePP_ON_DELAYS = readl((void const volatile   *)dev_priv->regs + 397832U);
#line 390
  dev_priv->savePP_OFF_DELAYS = readl((void const volatile   *)dev_priv->regs + 397836U);
#line 391
  dev_priv->savePP_DIVISOR = readl((void const volatile   *)dev_priv->regs + 397840U);
#line 396
  dev_priv->saveFBC_CFB_BASE = readl((void const volatile   *)dev_priv->regs + 12800U);
#line 397
  dev_priv->saveFBC_LL_BASE = readl((void const volatile   *)dev_priv->regs + 12804U);
#line 398
  dev_priv->saveFBC_CONTROL2 = readl((void const volatile   *)dev_priv->regs + 12820U);
#line 399
  dev_priv->saveFBC_CONTROL = readl((void const volatile   *)dev_priv->regs + 12808U);
#line 402
  dev_priv->saveIIR = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 403
  dev_priv->saveIER = readl((void const volatile   *)dev_priv->regs + 8352U);
#line 404
  dev_priv->saveIMR = readl((void const volatile   *)dev_priv->regs + 8360U);
#line 407
  dev_priv->saveVGA0 = readl((void const volatile   *)dev_priv->regs + 24576U);
#line 408
  dev_priv->saveVGA1 = readl((void const volatile   *)dev_priv->regs + 24580U);
#line 409
  dev_priv->saveVGA_PD = readl((void const volatile   *)dev_priv->regs + 24592U);
#line 410
  dev_priv->saveVGACNTRL = readl((void const volatile   *)dev_priv->regs + 463872U);
#line 413
  dev_priv->saveD_STATE = readl((void const volatile   *)dev_priv->regs + 24836U);
#line 414
  dev_priv->saveCG_2D_DIS = readl((void const volatile   *)dev_priv->regs + 25088U);
#line 417
  dev_priv->saveCACHE_MODE_0 = readl((void const volatile   *)dev_priv->regs + 8480U);
#line 420
  dev_priv->saveMI_ARB_STATE = readl((void const volatile   *)dev_priv->regs + 8420U);
#line 423
  i = 0;
#line 423
  goto ldv_25755;
  ldv_25754: 
#line 424
  dev_priv->saveSWF0[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 463888));
#line 425
  dev_priv->saveSWF1[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 459792));
#line 423
  i = i + 1;
  ldv_25755: ;
#line 423
  if (i <= 15) {
#line 424
    goto ldv_25754;
  } else {

  }
#line 427
  i = 0;
#line 427
  goto ldv_25758;
  ldv_25757: 
#line 428
  dev_priv->saveSWF2[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 467988));
#line 427
  i = i + 1;
  ldv_25758: ;
#line 427
  if (i <= 2) {
#line 428
    goto ldv_25757;
  } else {

  }
#line 430
  i915_save_vga(dev);
#line 432
  return (0);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
int i915_restore_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 437
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 440
  pci_write_config_byte(dev->pdev, 244, (int )dev_priv->saveLBB);
#line 443
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 444
    writel(dev_priv->saveRENDERSTANDBY, (void volatile   *)dev_priv->regs + 70072U);
  } else {

  }
#line 447
  writel(dev_priv->saveHWS, (void volatile   *)dev_priv->regs + 8320U);
#line 450
  writel(dev_priv->saveDSPARB, (void volatile   *)dev_priv->regs + 458800U);
#line 454
  if ((int )dev_priv->saveDPLL_A < 0) {
#line 455
    writel(dev_priv->saveDPLL_A & 2147483647U, (void volatile   *)dev_priv->regs + 24596U);
#line 457
    __const_udelay(644250UL);
  } else {

  }
#line 459
  writel(dev_priv->saveFPA0, (void volatile   *)dev_priv->regs + 24640U);
#line 460
  writel(dev_priv->saveFPA1, (void volatile   *)dev_priv->regs + 24644U);
#line 462
  writel(dev_priv->saveDPLL_A, (void volatile   *)dev_priv->regs + 24596U);
#line 463
  __const_udelay(644250UL);
#line 464
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 465
    writel(dev_priv->saveDPLL_A_MD, (void volatile   *)dev_priv->regs + 24604U);
  } else {

  }
#line 466
  __const_udelay(644250UL);
#line 469
  writel(dev_priv->saveHTOTAL_A, (void volatile   *)dev_priv->regs + 393216U);
#line 470
  writel(dev_priv->saveHBLANK_A, (void volatile   *)dev_priv->regs + 393220U);
#line 471
  writel(dev_priv->saveHSYNC_A, (void volatile   *)dev_priv->regs + 393224U);
#line 472
  writel(dev_priv->saveVTOTAL_A, (void volatile   *)dev_priv->regs + 393228U);
#line 473
  writel(dev_priv->saveVBLANK_A, (void volatile   *)dev_priv->regs + 393232U);
#line 474
  writel(dev_priv->saveVSYNC_A, (void volatile   *)dev_priv->regs + 393236U);
#line 475
  writel(dev_priv->saveBCLRPAT_A, (void volatile   *)dev_priv->regs + 393248U);
#line 478
  writel(dev_priv->saveDSPASIZE, (void volatile   *)dev_priv->regs + 459152U);
#line 479
  writel(dev_priv->saveDSPAPOS, (void volatile   *)dev_priv->regs + 459148U);
#line 480
  writel(dev_priv->savePIPEASRC, (void volatile   *)dev_priv->regs + 393244U);
#line 481
  writel(dev_priv->saveDSPAADDR, (void volatile   *)dev_priv->regs + 459140U);
#line 482
  writel(dev_priv->saveDSPASTRIDE, (void volatile   *)dev_priv->regs + 459144U);
#line 483
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 484
    writel(dev_priv->saveDSPASURF, (void volatile   *)dev_priv->regs + 459164U);
#line 485
    writel(dev_priv->saveDSPATILEOFF, (void volatile   *)dev_priv->regs + 459172U);
  } else {

  }
#line 488
  writel(dev_priv->savePIPEACONF, (void volatile   *)dev_priv->regs + 458760U);
#line 490
  i915_restore_palette(dev, PIPE_A);
#line 492
  writel(dev_priv->saveDSPACNTR, (void volatile   *)dev_priv->regs + 459136U);
#line 493
  tmp = readl((void const volatile   *)dev_priv->regs + 459140U);
#line 493
  writel(tmp, (void volatile   *)dev_priv->regs + 459140U);
#line 496
  if ((int )dev_priv->saveDPLL_B < 0) {
#line 497
    writel(dev_priv->saveDPLL_B & 2147483647U, (void volatile   *)dev_priv->regs + 24600U);
#line 499
    __const_udelay(644250UL);
  } else {

  }
#line 501
  writel(dev_priv->saveFPB0, (void volatile   *)dev_priv->regs + 24648U);
#line 502
  writel(dev_priv->saveFPB1, (void volatile   *)dev_priv->regs + 24652U);
#line 504
  writel(dev_priv->saveDPLL_B, (void volatile   *)dev_priv->regs + 24600U);
#line 505
  __const_udelay(644250UL);
#line 506
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 507
    writel(dev_priv->saveDPLL_B_MD, (void volatile   *)dev_priv->regs + 24608U);
  } else {

  }
#line 508
  __const_udelay(644250UL);
#line 511
  writel(dev_priv->saveHTOTAL_B, (void volatile   *)dev_priv->regs + 397312U);
#line 512
  writel(dev_priv->saveHBLANK_B, (void volatile   *)dev_priv->regs + 397316U);
#line 513
  writel(dev_priv->saveHSYNC_B, (void volatile   *)dev_priv->regs + 397320U);
#line 514
  writel(dev_priv->saveVTOTAL_B, (void volatile   *)dev_priv->regs + 397324U);
#line 515
  writel(dev_priv->saveVBLANK_B, (void volatile   *)dev_priv->regs + 397328U);
#line 516
  writel(dev_priv->saveVSYNC_B, (void volatile   *)dev_priv->regs + 397332U);
#line 517
  writel(dev_priv->saveBCLRPAT_B, (void volatile   *)dev_priv->regs + 397344U);
#line 520
  writel(dev_priv->saveDSPBSIZE, (void volatile   *)dev_priv->regs + 463248U);
#line 521
  writel(dev_priv->saveDSPBPOS, (void volatile   *)dev_priv->regs + 463244U);
#line 522
  writel(dev_priv->savePIPEBSRC, (void volatile   *)dev_priv->regs + 397340U);
#line 523
  writel(dev_priv->saveDSPBADDR, (void volatile   *)dev_priv->regs + 463236U);
#line 524
  writel(dev_priv->saveDSPBSTRIDE, (void volatile   *)dev_priv->regs + 463240U);
#line 525
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 526
    writel(dev_priv->saveDSPBSURF, (void volatile   *)dev_priv->regs + 463260U);
#line 527
    writel(dev_priv->saveDSPBTILEOFF, (void volatile   *)dev_priv->regs + 463268U);
  } else {

  }
#line 530
  writel(dev_priv->savePIPEBCONF, (void volatile   *)dev_priv->regs + 462856U);
#line 532
  i915_restore_palette(dev, PIPE_B);
#line 534
  writel(dev_priv->saveDSPBCNTR, (void volatile   *)dev_priv->regs + 463232U);
#line 535
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 463236U);
#line 535
  writel(tmp___0, (void volatile   *)dev_priv->regs + 463236U);
#line 538
  writel(dev_priv->saveADPA, (void volatile   *)dev_priv->regs + 397568U);
#line 541
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 542
    writel(dev_priv->saveBLC_PWM_CTL2, (void volatile   *)dev_priv->regs + 397904U);
  } else {

  }
#line 543
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 544
    writel(dev_priv->saveLVDS, (void volatile   *)dev_priv->regs + 397696U);
  } else {

  }
#line 545
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 546
    writel(dev_priv->savePFIT_CONTROL, (void volatile   *)dev_priv->regs + 397872U);
  } else {

  }
#line 548
  writel(dev_priv->savePFIT_PGM_RATIOS, (void volatile   *)dev_priv->regs + 397876U);
#line 549
  writel(dev_priv->saveBLC_PWM_CTL, (void volatile   *)dev_priv->regs + 397908U);
#line 550
  writel(dev_priv->savePP_ON_DELAYS, (void volatile   *)dev_priv->regs + 397832U);
#line 551
  writel(dev_priv->savePP_OFF_DELAYS, (void volatile   *)dev_priv->regs + 397836U);
#line 552
  writel(dev_priv->savePP_DIVISOR, (void volatile   *)dev_priv->regs + 397840U);
#line 553
  writel(dev_priv->savePP_CONTROL, (void volatile   *)dev_priv->regs + 397828U);
#line 558
  writel(dev_priv->saveFBC_CFB_BASE, (void volatile   *)dev_priv->regs + 12800U);
#line 559
  writel(dev_priv->saveFBC_LL_BASE, (void volatile   *)dev_priv->regs + 12804U);
#line 560
  writel(dev_priv->saveFBC_CONTROL2, (void volatile   *)dev_priv->regs + 12820U);
#line 561
  writel(dev_priv->saveFBC_CONTROL, (void volatile   *)dev_priv->regs + 12808U);
#line 564
  writel(dev_priv->saveVGACNTRL, (void volatile   *)dev_priv->regs + 463872U);
#line 565
  writel(dev_priv->saveVGA0, (void volatile   *)dev_priv->regs + 24576U);
#line 566
  writel(dev_priv->saveVGA1, (void volatile   *)dev_priv->regs + 24580U);
#line 567
  writel(dev_priv->saveVGA_PD, (void volatile   *)dev_priv->regs + 24592U);
#line 568
  __const_udelay(644250UL);
#line 571
  writel(dev_priv->saveD_STATE, (void volatile   *)dev_priv->regs + 24836U);
#line 572
  writel(dev_priv->saveCG_2D_DIS, (void volatile   *)dev_priv->regs + 25088U);
#line 575
  writel(dev_priv->saveCACHE_MODE_0 | 4294901760U, (void volatile   *)dev_priv->regs + 8480U);
#line 578
  writel(dev_priv->saveMI_ARB_STATE | 4294901760U, (void volatile   *)dev_priv->regs + 8420U);
#line 580
  i = 0;
#line 580
  goto ldv_25766;
  ldv_25765: 
#line 581
  writel(dev_priv->saveSWF0[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 463888));
#line 582
  writel(dev_priv->saveSWF1[i + 7], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 459792));
#line 580
  i = i + 1;
  ldv_25766: ;
#line 580
  if (i <= 15) {
#line 581
    goto ldv_25765;
  } else {

  }
#line 584
  i = 0;
#line 584
  goto ldv_25769;
  ldv_25768: 
#line 585
  writel(dev_priv->saveSWF2[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 467988));
#line 584
  i = i + 1;
  ldv_25769: ;
#line 584
  if (i <= 2) {
#line 585
    goto ldv_25768;
  } else {

  }
#line 587
  i915_restore_vga(dev);
#line 589
  return (0);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_165(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 597
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 599
  __ldv_spin_lock(ldv_func_arg1);
#line 600
  return;
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_166(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 607
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 609
  __ldv_spin_unlock(ldv_func_arg1);
#line 610
  return;
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
int ldv___ldv_spin_trylock_167(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 617
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 617
  ldv_func_res = tmp;
#line 619
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 619
  return (tmp___0);
#line 621
  return (ldv_func_res);
}
}
#line 624 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_168(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 629
  ldv_spin_lock_dcache_lock();
#line 631
  __ldv_spin_lock(ldv_func_arg1);
#line 632
  return;
}
}
#line 634 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_169(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 639
  ldv_spin_lock_d_lock_of_dentry();
#line 641
  __ldv_spin_lock(ldv_func_arg1);
#line 642
  return;
}
}
#line 644 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_170(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 649
  ldv_spin_unlock_d_lock_of_dentry();
#line 651
  __ldv_spin_unlock(ldv_func_arg1);
#line 652
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_171(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 659
  ldv_spin_unlock_dcache_lock();
#line 661
  __ldv_spin_unlock(ldv_func_arg1);
#line 662
  return;
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_172(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 669
  ldv_spin_lock_d_lock_of_dentry();
#line 671
  __ldv_spin_lock(ldv_func_arg1);
#line 672
  return;
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_173(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 679
  ldv_spin_unlock_d_lock_of_dentry();
#line 681
  __ldv_spin_unlock(ldv_func_arg1);
#line 682
  return;
}
}
#line 684 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_174(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 689
  ldv_spin_lock_i_lock_of_inode();
#line 691
  __ldv_spin_lock(ldv_func_arg1);
#line 692
  return;
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_175(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 699
  ldv_spin_unlock_i_lock_of_inode();
#line 701
  __ldv_spin_unlock(ldv_func_arg1);
#line 702
  return;
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_176(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 709
  ldv_spin_lock_d_lock_of_dentry();
#line 711
  __ldv_spin_lock(ldv_func_arg1);
#line 712
  return;
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_177(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 719
  ldv_spin_unlock_d_lock_of_dentry();
#line 721
  __ldv_spin_unlock(ldv_func_arg1);
#line 722
  return;
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_178(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 729
  ldv_spin_lock_siglock_of_sighand_struct();
#line 731
  __ldv_spin_lock(ldv_func_arg1);
#line 732
  return;
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_179(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 739
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 741
  __ldv_spin_unlock(ldv_func_arg1);
#line 742
  return;
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_lock_180(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 749
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 751
  __ldv_spin_lock(ldv_func_arg1);
#line 752
  return;
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_181(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 759
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 761
  __ldv_spin_unlock(ldv_func_arg1);
#line 762
  return;
}
}
#line 764 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
void ldv___ldv_spin_unlock_182(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 769
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 771
  __ldv_spin_unlock(ldv_func_arg1);
#line 772
  return;
}
}
#line 36 "include/asm-generic/bug.h"
extern void warn_on_slowpath(char const   * , int const    ) ;
#line 120 "include/linux/kernel.h"
extern void __might_sleep(char * , int  ) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_3872: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_3872;
  } else {

  }

#line 19
  return (order);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 264 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 51
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 54
  return;
}
}
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 65
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 68
  return;
}
}
#line 108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 110
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
#line 113
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_201(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_204(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_205(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_208(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_210(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_212(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_214(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_216(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_206(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_207(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_209(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_211(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_213(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_215(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_217(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_218(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_203(spinlock_t *ldv_func_arg1 ) ;
#line 431 "include/linux/wait.h"
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 433
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 434
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 38 "include/linux/rwsem.h"
extern void down_write(struct rw_semaphore * ) ;
#line 53
extern void up_write(struct rw_semaphore * ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref * ) ;
#line 28
extern int kref_put(struct kref * , void (*)(struct kref * ) ) ;
#line 40 "include/linux/timer.h"
extern void init_timer(struct timer_list * ) ;
#line 196 "include/linux/workqueue.h"
extern int schedule_delayed_work(struct delayed_work * , unsigned long  ) ;
#line 226
extern int cancel_delayed_work_sync(struct delayed_work * ) ;
#line 1347 "include/linux/fs.h"
extern ssize_t vfs_read(struct file * , char * , size_t  , loff_t * ) ;
#line 1348
extern ssize_t vfs_write(struct file * , char const   * , size_t  , loff_t * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val , void volatile   *addr ) 
{ 


  {
#line 50
  __asm__  volatile   ("movq %0,%1": : "r" (val), "m" (*((unsigned long volatile   *)addr)): "memory");
#line 51
  return;
}
}
#line 315 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 589 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 591
  return ((void *)((unsigned long )(((long )page + 32985348833280L) / 96L << 12) + 0xffff880000000000UL));
}
}
#line 782
extern void unmap_mapping_range(struct address_space * , loff_t const    , loff_t const    ,
                                int  ) ;
#line 823
extern int set_page_dirty(struct page * ) ;
#line 1110
extern unsigned long do_mmap_pgoff(struct file * , unsigned long  , unsigned long  ,
                                   unsigned long  , unsigned long  , unsigned long  ) ;
#line 1118 "include/linux/mm.h"
__inline static unsigned long do_mmap(struct file *file , unsigned long addr , unsigned long len ,
                                      unsigned long prot , unsigned long flag , unsigned long offset ) 
{ 
  unsigned long ret ;

  {
#line 1122
  ret = 0xffffffffffffffeaUL;
#line 1123
  if (((len + 4095UL) & 0xfffffffffffff000UL) + offset < offset) {
#line 1124
    goto out;
  } else {

  }
#line 1125
  if ((offset & 4095UL) == 0UL) {
#line 1126
    ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> 12);
  } else {

  }
  out: ;
#line 1128
  return (ret);
}
}
#line 1205
extern int vm_insert_pfn(struct vm_area_struct * , unsigned long  , unsigned long  ) ;
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 182
extern long __copy_user_nocache(void * , void const   * , unsigned int  , int  ) ;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_from_user_inatomic_nocache(void *dst , void const   *src ,
                                                      unsigned int size ) 
{ 
  long tmp ;

  {
#line 196
  tmp = __copy_user_nocache(dst, src, size, 0);
#line 196
  return ((int )tmp);
}
}
#line 39 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 41
  __might_sleep((char *)"include/linux/highmem.h", 41);
#line 42
  tmp = lowmem_page_address(page);
#line 42
  return (tmp);
}
}
#line 260 "include/linux/pagemap.h"
extern struct page *read_cache_page(struct address_space * , unsigned long  , filler_t * ,
                                    void * ) ;
#line 274 "include/linux/pagemap.h"
__inline static struct page *read_mapping_page(struct address_space *mapping , unsigned long index ,
                                               void *data ) 
{ 
  filler_t *filler ;
  struct page *tmp ;

  {
#line 277
  filler = (filler_t *)(mapping->a_ops)->readpage;
#line 278
  tmp = read_cache_page(mapping, index, filler, data);
#line 278
  return (tmp);
}
}
#line 55 "include/drm/drm_hashtab.h"
extern int drm_ht_insert_item(struct drm_open_hash * , struct drm_hash_item * ) ;
#line 63
extern int drm_ht_remove_item(struct drm_open_hash * , struct drm_hash_item * ) ;
#line 1072 "include/drm/drmP.h"
extern int drm_free_agp(struct agp_memory * , int  ) ;
#line 1074
extern struct agp_memory *drm_agp_bind_pages(struct drm_device * , struct page ** ,
                                             unsigned long  , uint32_t  , uint32_t  ) ;
#line 1079
extern int drm_unbind_agp(struct agp_memory * ) ;
#line 1142
extern void drm_clflush_pages(struct page ** , unsigned long  ) ;
#line 1251
extern void drm_agp_chipset_flush(struct drm_device * ) ;
#line 1312
extern struct drm_mm_node *drm_mm_get_block(struct drm_mm_node * , unsigned long  ,
                                            unsigned int  ) ;
#line 1315
extern void drm_mm_put_block(struct drm_mm_node * ) ;
#line 1316
extern struct drm_mm_node *drm_mm_search_free(struct drm_mm  const  * , unsigned long  ,
                                              unsigned int  , int  ) ;
#line 1328
extern void drm_gem_object_free(struct kref * ) ;
#line 1329
extern struct drm_gem_object *drm_gem_object_alloc(struct drm_device * , size_t  ) ;
#line 1331
extern void drm_gem_object_handle_free(struct kref * ) ;
#line 1335 "include/drm/drmP.h"
__inline static void drm_gem_object_reference(struct drm_gem_object *obj ) 
{ 


  {
#line 1337
  kref_get(& obj->refcount);
#line 1338
  return;
}
}
#line 1341 "include/drm/drmP.h"
__inline static void drm_gem_object_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1343
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1344
    return;
  } else {

  }
#line 1346
  kref_put(& obj->refcount, & drm_gem_object_free);
#line 1347
  return;
}
}
#line 1349
extern int drm_gem_handle_create(struct drm_file * , struct drm_gem_object * , int * ) ;
#line 1361 "include/drm/drmP.h"
__inline static void drm_gem_object_handle_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1363
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1364
    return;
  } else {

  }
#line 1371
  kref_put(& obj->handlecount, & drm_gem_object_handle_free);
#line 1372
  drm_gem_object_unreference(obj);
#line 1373
  return;
}
}
#line 1375
extern struct drm_gem_object *drm_gem_object_lookup(struct drm_device * , struct drm_file * ,
                                                    int  ) ;
#line 1388
extern void drm_core_ioremap_wc(struct drm_map * , struct drm_device * ) ;
#line 101 "include/linux/io-mapping.h"
__inline static void *io_mapping_map_atomic_wc(struct io_mapping *mapping , unsigned long offset ) 
{ 


  {
#line 103
  return ((void *)mapping + offset);
}
}
#line 107 "include/linux/io-mapping.h"
__inline static void io_mapping_unmap_atomic(void *vaddr ) 
{ 


  {
#line 109
  return;
}
}
#line 584 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) ;
#line 585
void i915_gem_object_unpin(struct drm_gem_object *obj ) ;
#line 588
void i915_gem_retire_requests(struct drm_device *dev ) ;
#line 589
void i915_gem_retire_work_handler(struct work_struct *work ) ;
#line 590
void i915_gem_clflush_object(struct drm_gem_object *obj ) ;
#line 599
int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) ;
#line 603
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) ;
#line 180 "include/linux/swap.h"
extern void mark_page_accessed(struct page * ) ;
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) ;
#line 108
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) ;
#line 109
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) ;
#line 110
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) ;
#line 111
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) ;
#line 113
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) ;
#line 116
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) ;
#line 117
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) ;
#line 118
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) ;
#line 119
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) ;
#line 120
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) ;
#line 122
static void i915_gem_object_get_fence_reg(struct drm_gem_object *obj ) ;
#line 123
static void i915_gem_clear_fence_reg(struct drm_gem_object *obj ) ;
#line 124
static int i915_gem_evict_something(struct drm_device *dev ) ;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_do_init(struct drm_device *dev , unsigned long start , unsigned long end ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 129
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 131
  if ((start >= end || (start & 4095UL) != 0UL) || (end & 4095UL) != 0UL) {
#line 134
    return (-22);
  } else {

  }
#line 137
  drm_mm_init(& dev_priv->mm.gtt_space, start, end - start);
#line 140
  dev->gtt_total = (unsigned int )end - (unsigned int )start;
#line 142
  return (0);
}
}
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_init *args ;
  int ret ;

  {
#line 149
  args = (struct drm_i915_gem_init *)data;
#line 152
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 153
  ret = i915_gem_do_init(dev, (unsigned long )args->gtt_start, (unsigned long )args->gtt_end);
#line 154
  mutex_unlock(& dev->struct_mutex);
#line 156
  return (ret);
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_aperture *args ;

  {
#line 163
  args = (struct drm_i915_gem_get_aperture *)data;
#line 165
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 166
    return (-19);
  } else {

  }
#line 168
  args->aper_size = (uint64_t )dev->gtt_total;
#line 169
  args->aper_available_size = args->aper_size - (uint64_t )dev->pin_memory.counter;
#line 172
  return (0);
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_create *args ;
  struct drm_gem_object *obj ;
  int handle ;
  int ret ;

  {
#line 183
  args = (struct drm_i915_gem_create *)data;
#line 187
  args->size = ((args->size + 4095ULL) / 4096ULL) * 4096ULL;
#line 190
  obj = drm_gem_object_alloc(dev, (size_t )args->size);
#line 191
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 192
    return (-12);
  } else {

  }
#line 194
  ret = drm_gem_handle_create(file_priv, obj, & handle);
#line 195
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 196
  drm_gem_object_handle_unreference(obj);
#line 197
  mutex_unlock(& dev->struct_mutex);
#line 199
  if (ret != 0) {
#line 200
    return (ret);
  } else {

  }
#line 202
  args->handle = (uint32_t )handle;
#line 204
  return (0);
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pread *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  ssize_t read ;
  loff_t offset ;
  int ret ;

  {
#line 216
  args = (struct drm_i915_gem_pread *)data;
#line 223
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 224
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 225
    return (-9);
  } else {

  }
#line 226
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 232
  if ((args->offset > (unsigned long long )obj->size || args->size > (unsigned long long )obj->size) || args->offset + args->size > (unsigned long long )obj->size) {
#line 234
    drm_gem_object_unreference(obj);
#line 235
    return (-22);
  } else {

  }
#line 238
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 240
  ret = i915_gem_object_set_cpu_read_domain_range(obj, args->offset, args->size);
#line 242
  if (ret != 0) {
#line 243
    drm_gem_object_unreference(obj);
#line 244
    mutex_unlock(& dev->struct_mutex);
#line 245
    return (ret);
  } else {

  }
#line 248
  offset = (loff_t )args->offset;
#line 250
  read = vfs_read(obj->filp, (char *)args->data_ptr, (size_t )args->size, & offset);
#line 252
  if ((unsigned long long )read != args->size) {
#line 253
    drm_gem_object_unreference(obj);
#line 254
    mutex_unlock(& dev->struct_mutex);
#line 255
    if (read < 0L) {
#line 256
      return ((int )read);
    } else {
#line 258
      return (-22);
    }
  } else {

  }
#line 261
  drm_gem_object_unreference(obj);
#line 262
  mutex_unlock(& dev->struct_mutex);
#line 264
  return (0);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
__inline static int fast_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr_atomic ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 280
  tmp = io_mapping_map_atomic_wc(mapping, (unsigned long )page_base);
#line 280
  vaddr_atomic = (char *)tmp;
#line 281
  tmp___0 = __copy_from_user_inatomic_nocache((void *)vaddr_atomic + (unsigned long )page_offset___0,
                                              (void const   *)user_data, (unsigned int )length);
#line 281
  unwritten = (unsigned long )tmp___0;
#line 283
  io_mapping_unmap_atomic((void *)vaddr_atomic);
#line 284
  if (unwritten != 0UL) {
#line 285
    return (-14);
  } else {

  }
#line 286
  return (0);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
__inline static int slow_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 302
  tmp = io_mapping_map_atomic_wc(mapping, (unsigned long )page_base);
#line 302
  vaddr = (char *)tmp;
#line 303
  if ((unsigned long )vaddr == (unsigned long )((char *)0)) {
#line 304
    return (-14);
  } else {

  }
#line 305
  tmp___0 = __copy_from_user((void *)vaddr + (unsigned long )page_offset___0, (void const   *)user_data,
                             (unsigned int )length);
#line 305
  unwritten = (unsigned long )tmp___0;
#line 307
  io_mapping_unmap_atomic((void *)vaddr);
#line 308
  if (unwritten != 0UL) {
#line 309
    return (-14);
  } else {

  }
#line 310
  return (0);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_gtt_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                               struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  drm_i915_private_t *dev_priv ;
  ssize_t remain ;
  loff_t offset ;
  loff_t page_base ;
  char *user_data ;
  int page_offset___0 ;
  int page_length ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 318
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 319
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 326
  user_data = (char *)args->data_ptr;
#line 327
  remain = (ssize_t )args->size;
#line 328
  tmp = current_thread_info();
#line 328
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (user_data),
            "g" (remain), "rm" (tmp->addr_limit.seg));
#line 328
  tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 328
  if (tmp___0 == 0L) {
#line 329
    return (-14);
  } else {

  }
#line 332
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 333
  ret = i915_gem_object_pin(obj, 0U);
#line 334
  if (ret != 0) {
#line 335
    mutex_unlock(& dev->struct_mutex);
#line 336
    return (ret);
  } else {

  }
#line 338
  ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 339
  if (ret != 0) {
#line 340
    goto fail;
  } else {

  }
#line 342
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 343
  offset = (loff_t )((uint64_t )obj_priv->gtt_offset + args->offset);
#line 344
  obj_priv->dirty = 1;
#line 346
  goto ldv_26164;
  ldv_26163: 
#line 353
  page_base = offset & -4096LL;
#line 354
  page_offset___0 = (int )offset & 4095;
#line 355
  page_length = (int )remain;
#line 356
  if ((unsigned long )((ssize_t )page_offset___0 + remain) > 4096UL) {
#line 357
    page_length = (int )(4096U - (unsigned int )page_offset___0);
  } else {

  }
#line 359
  ret = fast_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0, user_data,
                        page_length);
#line 366
  if (ret != 0) {
#line 367
    ret = slow_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0, user_data,
                          page_length);
#line 370
    if (ret != 0) {
#line 371
      goto fail;
    } else {

    }
  } else {

  }
#line 374
  remain = remain - (ssize_t )page_length;
#line 375
  user_data = user_data + (unsigned long )page_length;
#line 376
  offset = (loff_t )page_length + offset;
  ldv_26164: ;
#line 346
  if (remain > 0L) {
#line 347
    goto ldv_26163;
  } else {

  }

  fail: 
#line 380
  i915_gem_object_unpin(obj);
#line 381
  mutex_unlock(& dev->struct_mutex);
#line 383
  return (ret);
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_shmem_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                                 struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  int ret ;
  loff_t offset ;
  ssize_t written ;

  {
#line 395
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 397
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 398
  if (ret != 0) {
#line 399
    mutex_unlock(& dev->struct_mutex);
#line 400
    return (ret);
  } else {

  }
#line 403
  offset = (loff_t )args->offset;
#line 405
  written = vfs_write(obj->filp, (char const   *)args->data_ptr, (size_t )args->size,
                      & offset);
#line 408
  if ((unsigned long long )written != args->size) {
#line 409
    mutex_unlock(& dev->struct_mutex);
#line 410
    if (written < 0L) {
#line 411
      return ((int )written);
    } else {
#line 413
      return (-22);
    }
  } else {

  }
#line 416
  mutex_unlock(& dev->struct_mutex);
#line 418
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pwrite *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 430
  args = (struct drm_i915_gem_pwrite *)data;
#line 433
  ret = 0;
#line 435
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 436
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 437
    return (-9);
  } else {

  }
#line 438
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 444
  if ((args->offset > (unsigned long long )obj->size || args->size > (unsigned long long )obj->size) || args->offset + args->size > (unsigned long long )obj->size) {
#line 446
    drm_gem_object_unreference(obj);
#line 447
    return (-22);
  } else {

  }
#line 456
  if (obj_priv->tiling_mode == 0U && dev->gtt_total != 0U) {
#line 458
    ret = i915_gem_gtt_pwrite(dev, obj, args, file_priv);
  } else {
#line 460
    ret = i915_gem_shmem_pwrite(dev, obj, args, file_priv);
  }
#line 467
  drm_gem_object_unreference(obj);
#line 469
  return (ret);
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_domain *args ;
  struct drm_gem_object *obj ;
  uint32_t read_domains ;
  uint32_t write_domain ;
  int ret ;

  {
#line 480
  args = (struct drm_i915_gem_set_domain *)data;
#line 482
  read_domains = args->read_domains;
#line 483
  write_domain = args->write_domain;
#line 486
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 487
    return (-19);
  } else {

  }
#line 490
  if ((write_domain & 4294967230U) != 0U) {
#line 491
    return (-22);
  } else {

  }
#line 493
  if ((read_domains & 4294967230U) != 0U) {
#line 494
    return (-22);
  } else {

  }
#line 499
  if (write_domain != 0U && read_domains != write_domain) {
#line 500
    return (-22);
  } else {

  }
#line 502
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 503
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 504
    return (-9);
  } else {

  }
#line 506
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 511
  if ((read_domains & 64U) != 0U) {
#line 512
    ret = i915_gem_object_set_to_gtt_domain(obj, write_domain != 0U);
#line 518
    if (ret == -22) {
#line 519
      ret = 0;
    } else {

    }
  } else {
#line 521
    ret = i915_gem_object_set_to_cpu_domain(obj, write_domain != 0U);
  }
#line 524
  drm_gem_object_unreference(obj);
#line 525
  mutex_unlock(& dev->struct_mutex);
#line 526
  return (ret);
}
}
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_sw_finish *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 536
  args = (struct drm_i915_gem_sw_finish *)data;
#line 539
  ret = 0;
#line 541
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 542
    return (-19);
  } else {

  }
#line 544
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 545
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 546
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 547
    mutex_unlock(& dev->struct_mutex);
#line 548
    return (-9);
  } else {

  }
#line 555
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 558
  if (obj_priv->pin_count != 0) {
#line 559
    i915_gem_object_flush_cpu_write_domain(obj);
  } else {

  }
#line 561
  drm_gem_object_unreference(obj);
#line 562
  mutex_unlock(& dev->struct_mutex);
#line 563
  return (ret);
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap *args ;
  struct drm_gem_object *obj ;
  loff_t offset ;
  unsigned long addr ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;

  {
#line 577
  args = (struct drm_i915_gem_mmap *)data;
#line 582
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 583
    return (-19);
  } else {

  }
#line 585
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 586
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 587
    return (-9);
  } else {

  }
#line 589
  offset = (loff_t )args->offset;
#line 591
  tmp = get_current();
#line 591
  down_write(& (tmp->mm)->mmap_sem);
#line 592
  addr = do_mmap(obj->filp, 0UL, (unsigned long )args->size, 3UL, 1UL, (unsigned long )args->offset);
#line 595
  tmp___0 = get_current();
#line 595
  up_write(& (tmp___0->mm)->mmap_sem);
#line 596
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 597
  drm_gem_object_unreference(obj);
#line 598
  mutex_unlock(& dev->struct_mutex);
#line 599
  tmp___1 = IS_ERR((void const   *)addr);
#line 599
  if (tmp___1 != 0L) {
#line 600
    return ((int )addr);
  } else {

  }
#line 602
  args->addr_ptr = (unsigned long long )addr;
#line 604
  return (0);
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_fault(struct vm_area_struct *vma , struct vm_fault *vmf ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  unsigned long page_offset___0 ;
  unsigned long pfn ;
  int ret ;

  {
#line 625
  obj = (struct drm_gem_object *)vma->vm_private_data;
#line 626
  dev = obj->dev;
#line 627
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 628
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 631
  ret = 0;
#line 634
  page_offset___0 = ((unsigned long )vmf->virtual_address - vma->vm_start) >> 12;
#line 638
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 639
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 640
    ret = i915_gem_object_bind_to_gtt(obj, obj_priv->gtt_alignment);
#line 641
    if (ret != 0) {
#line 642
      mutex_unlock(& dev->struct_mutex);
#line 643
      return (2);
    } else {

    }
#line 645
    list_add(& obj_priv->list, & dev_priv->mm.inactive_list);
  } else {

  }
#line 649
  if (obj_priv->fence_reg == -1 && obj_priv->tiling_mode != 0U) {
#line 651
    i915_gem_object_get_fence_reg(obj);
  } else {

  }
#line 653
  pfn = (((dev->agp)->base + (unsigned long )obj_priv->gtt_offset) >> 12) + page_offset___0;
#line 657
  ret = vm_insert_pfn(vma, (unsigned long )vmf->virtual_address, pfn);
#line 659
  mutex_unlock(& dev->struct_mutex);
#line 661
  switch (ret) {
  case -12: ;
  case -11: ;
#line 664
  return (1);
  case -14: ;
  case -16: 
#line 667
  printk("<3>[drm:%s] *ERROR* can\'t insert pfn??  fault or busy...\n", "i915_gem_fault");
#line 668
  return (2);
  default: ;
#line 670
  return (256);
  }
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_create_mmap_offset(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_gem_mm *mm ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_map_list *list ;
  struct drm_map *map ;
  int ret ;
  void *tmp ;
  int tmp___0 ;

  {
#line 688
  dev = obj->dev;
#line 689
  mm = (struct drm_gem_mm *)dev->mm_private;
#line 690
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 693
  ret = 0;
#line 696
  list = & obj->map_list;
#line 697
  tmp = drm_calloc(1UL, 72UL, 2);
#line 697
  list->map = (struct drm_map *)tmp;
#line 699
  if ((unsigned long )list->map == (unsigned long )((struct drm_map *)0)) {
#line 700
    return (-12);
  } else {

  }
#line 702
  map = list->map;
#line 703
  map->type = _DRM_GEM;
#line 704
  map->size = obj->size;
#line 705
  map->handle = (void *)obj;
#line 708
  list->file_offset_node = drm_mm_search_free((struct drm_mm  const  *)(& mm->offset_manager),
                                              obj->size / 4096UL, 0U, 0);
#line 710
  if ((unsigned long )list->file_offset_node == (unsigned long )((struct drm_mm_node *)0)) {
#line 711
    printk("<3>[drm:%s] *ERROR* failed to allocate offset for bo %d\n", "i915_gem_create_mmap_offset",
           obj->name);
#line 712
    ret = -12;
#line 713
    goto out_free_list;
  } else {

  }
#line 716
  list->file_offset_node = drm_mm_get_block(list->file_offset_node, obj->size / 4096UL,
                                            0U);
#line 718
  if ((unsigned long )list->file_offset_node == (unsigned long )((struct drm_mm_node *)0)) {
#line 719
    ret = -12;
#line 720
    goto out_free_list;
  } else {

  }
#line 723
  list->hash.key = (list->file_offset_node)->start;
#line 724
  tmp___0 = drm_ht_insert_item(& mm->offset_hash, & list->hash);
#line 724
  if (tmp___0 != 0) {
#line 725
    printk("<3>[drm:%s] *ERROR* failed to add to map hash\n", "i915_gem_create_mmap_offset");
#line 726
    goto out_free_mm;
  } else {

  }
#line 731
  obj_priv->mmap_offset = (unsigned long long )list->hash.key << 12;
#line 733
  return (0);
  out_free_mm: 
#line 736
  drm_mm_put_block(list->file_offset_node);
  out_free_list: 
#line 738
  drm_free((void *)list->map, 72UL, 2);
#line 740
  return (ret);
}
}
#line 751 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static uint32_t i915_gem_get_gtt_alignment(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int start ;
  int i ;

  {
#line 753
  dev = obj->dev;
#line 754
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 761
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) || obj_priv->tiling_mode == 0U) {
#line 762
    return (4096U);
  } else {

  }
#line 768
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 769
    start = 1048576;
  } else {
#line 771
    start = 524288;
  }
#line 773
  i = start;
#line 773
  goto ldv_26249;
  ldv_26248: 
#line 773
  i = i << 1;
  ldv_26249: ;
#line 773
  if ((size_t )i < obj->size) {
#line 774
    goto ldv_26248;
  } else {

  }

#line 776
  return ((uint32_t )i);
}
}
#line 795 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_mmap_gtt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap_gtt *args ;
  struct drm_i915_private *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 798
  args = (struct drm_i915_gem_mmap_gtt *)data;
#line 799
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 804
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 805
    return (-19);
  } else {

  }
#line 807
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 808
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 809
    return (-9);
  } else {

  }
#line 811
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 813
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 815
  if (obj_priv->mmap_offset == 0ULL) {
#line 816
    ret = i915_gem_create_mmap_offset(obj);
#line 817
    if (ret != 0) {
#line 818
      return (ret);
    } else {

    }
  } else {

  }
#line 821
  args->offset = obj_priv->mmap_offset;
#line 823
  obj_priv->gtt_alignment = i915_gem_get_gtt_alignment(obj);
#line 826
  if ((unsigned long )obj_priv->agp_mem != (unsigned long )((struct agp_memory *)0) && (obj_priv->gtt_offset & (obj_priv->gtt_alignment - 1U)) != 0U) {
#line 828
    drm_gem_object_unreference(obj);
#line 829
    mutex_unlock(& dev->struct_mutex);
#line 830
    return (-22);
  } else {

  }
#line 837
  if ((unsigned long )obj_priv->agp_mem == (unsigned long )((struct agp_memory *)0)) {
#line 838
    ret = i915_gem_object_bind_to_gtt(obj, obj_priv->gtt_alignment);
#line 839
    if (ret != 0) {
#line 840
      drm_gem_object_unreference(obj);
#line 841
      mutex_unlock(& dev->struct_mutex);
#line 842
      return (ret);
    } else {

    }
#line 844
    list_add(& obj_priv->list, & dev_priv->mm.inactive_list);
  } else {

  }
#line 847
  drm_gem_object_unreference(obj);
#line 848
  mutex_unlock(& dev->struct_mutex);
#line 850
  return (0);
}
}
#line 854 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;

  {
#line 856
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 857
  page_count___0 = (int )(obj->size / 4096UL);
#line 860
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 861
    return;
  } else {

  }
#line 864
  i = 0;
#line 864
  goto ldv_26268;
  ldv_26267: ;
#line 865
  if ((unsigned long )*(obj_priv->page_list + (unsigned long )i) != (unsigned long )((struct page *)0)) {
#line 866
    if (obj_priv->dirty != 0) {
#line 867
      set_page_dirty(*(obj_priv->page_list + (unsigned long )i));
    } else {

    }
#line 868
    mark_page_accessed(*(obj_priv->page_list + (unsigned long )i));
#line 869
    put_page(*(obj_priv->page_list + (unsigned long )i));
  } else {

  }
#line 864
  i = i + 1;
  ldv_26268: ;
#line 864
  if (i < page_count___0) {
#line 865
    goto ldv_26267;
  } else {

  }
#line 871
  obj_priv->dirty = 0;
#line 873
  drm_free((void *)obj_priv->page_list, (unsigned long )page_count___0 * 8UL, 2);
#line 876
  obj_priv->page_list = 0;
#line 877
  return;
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_active(struct drm_gem_object *obj , uint32_t seqno ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 882
  dev = obj->dev;
#line 883
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 884
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 887
  if (obj_priv->active == 0) {
#line 888
    drm_gem_object_reference(obj);
#line 889
    obj_priv->active = 1;
  } else {

  }
#line 892
  list_move_tail(& obj_priv->list, & dev_priv->mm.active_list);
#line 894
  obj_priv->last_rendering_seqno = seqno;
#line 895
  return;
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_flushing(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;

  {
#line 900
  dev = obj->dev;
#line 901
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 902
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 904
  tmp = __builtin_expect(obj_priv->active == 0, 0L);
#line 904
  if (tmp != 0L) {
#line 904
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (904), "i" (24UL));
    ldv_26283: ;
#line 904
    goto ldv_26283;
  } else {

  }
#line 905
  list_move_tail(& obj_priv->list, & dev_priv->mm.flushing_list);
#line 906
  obj_priv->last_rendering_seqno = 0U;
#line 907
  return;
}
}
#line 910 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_inactive(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 912
  dev = obj->dev;
#line 913
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 914
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 917
  if (obj_priv->pin_count != 0) {
#line 918
    list_del_init(& obj_priv->list);
  } else {
#line 920
    list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
  }
#line 922
  obj_priv->last_rendering_seqno = 0U;
#line 923
  if (obj_priv->active != 0) {
#line 924
    obj_priv->active = 0;
#line 925
    drm_gem_object_unreference(obj);
  } else {

  }
#line 927
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static uint32_t i915_add_request(struct drm_device *dev , uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *request ;
  uint32_t seqno ;
  int was_empty ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  void *tmp ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_i915_gem_object *next ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  struct list_head  const  *__mptr___1 ;

  {
#line 941
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 947
  tmp = drm_calloc(1UL, 32UL, 2);
#line 947
  request = (struct drm_i915_gem_request *)tmp;
#line 948
  if ((unsigned long )request == (unsigned long )((struct drm_i915_gem_request *)0)) {
#line 949
    return (0U);
  } else {

  }
#line 954
  seqno = dev_priv->mm.next_gem_seqno;
#line 955
  dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
#line 956
  if (dev_priv->mm.next_gem_seqno == 0U) {
#line 957
    dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
  } else {

  }
#line 959
  if (dev_priv->ring.space <= 15) {
#line 959
    i915_wait_ring(dev, 16, "i915_add_request");
  } else {

  }
#line 959
  outcount = 0U;
#line 959
  outring = (unsigned int )dev_priv->ring.tail;
#line 959
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 959
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 960
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 960
  outcount = outcount + 1U;
#line 960
  outring = outring + 4U;
#line 960
  outring = outring & ringmask;
#line 961
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 128U;
#line 961
  outcount = outcount + 1U;
#line 961
  outring = outring + 4U;
#line 961
  outring = outring & ringmask;
#line 962
  *((unsigned int volatile   *)virt + (unsigned long )outring) = seqno;
#line 962
  outcount = outcount + 1U;
#line 962
  outring = outring + 4U;
#line 962
  outring = outring & ringmask;
#line 964
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 16777216U;
#line 964
  outcount = outcount + 1U;
#line 964
  outring = outring + 4U;
#line 964
  outring = outring & ringmask;
#line 965
  dev_priv->ring.tail = (int )outring;
#line 965
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 965
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 967
  if (drm_debug != 0U) {
#line 967
    printk("<7>[drm:%s] %d\n", "i915_add_request", seqno);
  } else {

  }
#line 969
  request->seqno = seqno;
#line 970
  request->emitted_jiffies = jiffies;
#line 971
  was_empty = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 972
  list_add_tail(& request->list, & dev_priv->mm.request_list);
#line 977
  if (flush_domains != 0U) {
#line 980
    __mptr = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 980
    obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 980
    __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 980
    next = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
#line 980
    goto ldv_26313;
    ldv_26312: 
#line 982
    obj = obj_priv->obj;
#line 984
    if ((obj->write_domain & flush_domains) == obj->write_domain) {
#line 986
      obj->write_domain = 0U;
#line 987
      i915_gem_object_move_to_active(obj, seqno);
    } else {

    }
#line 980
    obj_priv = next;
#line 980
    __mptr___1 = (struct list_head  const  *)next->list.next;
#line 980
    next = (struct drm_i915_gem_object *)__mptr___1 + 0xfffffffffffffff0UL;
    ldv_26313: ;
#line 980
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {
#line 981
      goto ldv_26312;
    } else {

    }

  } else {

  }
#line 993
  if (was_empty != 0 && dev_priv->mm.suspended == 0) {
#line 994
    schedule_delayed_work(& dev_priv->mm.retire_work, 250UL);
  } else {

  }
#line 995
  return (seqno);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static uint32_t i915_retire_commands(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  uint32_t flush_domains ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 1007
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1008
  cmd = 33554436U;
#line 1009
  flush_domains = 0U;
#line 1013
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1014
    flush_domains = flush_domains | 4U;
  } else {

  }
#line 1015
  if (dev_priv->ring.space <= 7) {
#line 1015
    i915_wait_ring(dev, 8, "i915_retire_commands");
  } else {

  }
#line 1015
  outcount = 0U;
#line 1015
  outring = (unsigned int )dev_priv->ring.tail;
#line 1015
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 1015
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 1016
  *((unsigned int volatile   *)virt + (unsigned long )outring) = cmd;
#line 1016
  outcount = outcount + 1U;
#line 1016
  outring = outring + 4U;
#line 1016
  outring = outring & ringmask;
#line 1017
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 1017
  outcount = outcount + 1U;
#line 1017
  outring = outring + 4U;
#line 1017
  outring = outring & ringmask;
#line 1018
  dev_priv->ring.tail = (int )outring;
#line 1018
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 1018
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 1019
  return (flush_domains);
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_retire_request(struct drm_device *dev , struct drm_i915_gem_request *request ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 1030
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1035
  goto ldv_26336;
  ldv_26335: 
#line 1039
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 1039
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 1042
  obj = obj_priv->obj;
#line 1048
  if (obj_priv->last_rendering_seqno != request->seqno) {
#line 1049
    return;
  } else {

  }
#line 1056
  if (obj->write_domain != 0U) {
#line 1057
    i915_gem_object_move_to_flushing(obj);
  } else {
#line 1059
    i915_gem_object_move_to_inactive(obj);
  }
  ldv_26336: 
#line 1035
  tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 1035
  if (tmp == 0) {
#line 1036
    goto ldv_26335;
  } else {

  }

#line 1040
  return;
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_seqno_passed(uint32_t seq1 , uint32_t seq2 ) 
{ 


  {
#line 1069
  return ((int )(seq1 - seq2) >= 0);
}
}
#line 1073 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
uint32_t i915_get_gem_seqno(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 1075
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1077
  return ((uint32_t )*((u32 volatile   *)dev_priv->hw_status_page + 32UL));
}
}
#line 1084 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_retire_requests(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  struct drm_i915_gem_request *request ;
  uint32_t retiring_seqno ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1086
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1089
  seqno = i915_get_gem_seqno(dev);
#line 1091
  goto ldv_26357;
  ldv_26356: 
#line 1095
  __mptr = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 1095
  request = (struct drm_i915_gem_request *)__mptr + 0xfffffffffffffff0UL;
#line 1098
  retiring_seqno = request->seqno;
#line 1100
  tmp = i915_seqno_passed(seqno, retiring_seqno);
#line 1100
  if (tmp != 0 || dev_priv->mm.wedged != 0) {
#line 1102
    i915_gem_retire_request(dev, request);
#line 1104
    list_del(& request->list);
#line 1105
    drm_free((void *)request, 32UL, 2);
  } else {
#line 1107
    goto ldv_26355;
  }
  ldv_26357: 
#line 1091
  tmp___0 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1091
  if (tmp___0 == 0) {
#line 1092
    goto ldv_26356;
  } else {

  }
  ldv_26355: ;
#line 1096
  return;
}
}
#line 1112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_retire_work_handler(struct work_struct *work ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_device *dev ;
  struct work_struct  const  *__mptr ;
  int tmp ;

  {
#line 1117
  __mptr = (struct work_struct  const  *)work;
#line 1117
  dev_priv = (drm_i915_private_t *)__mptr + 0xffffffffffffefe0UL;
#line 1119
  dev = dev_priv->dev;
#line 1121
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 1122
  i915_gem_retire_requests(dev);
#line 1123
  if (dev_priv->mm.suspended == 0) {
#line 1123
    tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1123
    if (tmp == 0) {
#line 1125
      schedule_delayed_work(& dev_priv->mm.retire_work, 250UL);
    } else {

    }
  } else {

  }
#line 1126
  mutex_unlock(& dev->struct_mutex);
#line 1127
  return;
}
}
#line 1134 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_wait_request(struct drm_device *dev , uint32_t seqno ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  long tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  uint32_t tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  uint32_t tmp___5 ;
  int tmp___6 ;
  uint32_t tmp___7 ;
  int tmp___8 ;
  uint32_t tmp___9 ;

  {
#line 1136
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1137
  ret = 0;
#line 1139
  tmp = __builtin_expect(seqno == 0U, 0L);
#line 1139
  if (tmp != 0L) {
#line 1139
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1139), "i" (24UL));
    ldv_26371: ;
#line 1139
    goto ldv_26371;
  } else {

  }
#line 1141
  tmp___7 = i915_get_gem_seqno(dev);
#line 1141
  tmp___8 = i915_seqno_passed(tmp___7, seqno);
#line 1141
  if (tmp___8 == 0) {
#line 1142
    dev_priv->mm.waiting_gem_seqno = seqno;
#line 1143
    i915_user_irq_get(dev);
#line 1144
    __ret = 0;
#line 1144
    tmp___5 = i915_get_gem_seqno(dev);
#line 1144
    tmp___6 = i915_seqno_passed(tmp___5, seqno);
#line 1144
    if (tmp___6 == 0 && dev_priv->mm.wedged == 0) {
#line 1144
      tmp___0 = get_current();
#line 1144
      __wait.flags = 0U;
#line 1144
      __wait.private = (void *)tmp___0;
#line 1144
      __wait.func = & autoremove_wake_function;
#line 1144
      __wait.task_list.next = & __wait.task_list;
#line 1144
      __wait.task_list.prev = & __wait.task_list;
      ldv_26376: 
#line 1144
      prepare_to_wait(& dev_priv->irq_queue, & __wait, 1);
#line 1144
      tmp___1 = i915_get_gem_seqno(dev);
#line 1144
      tmp___2 = i915_seqno_passed(tmp___1, seqno);
#line 1144
      if (tmp___2 != 0 || dev_priv->mm.wedged != 0) {
#line 1144
        goto ldv_26374;
      } else {

      }
#line 1144
      tmp___3 = get_current();
#line 1144
      tmp___4 = signal_pending(tmp___3);
#line 1144
      if (tmp___4 == 0) {
#line 1144
        schedule();
#line 1144
        goto ldv_26375;
      } else {

      }
#line 1144
      __ret = -512;
#line 1144
      goto ldv_26374;
      ldv_26375: ;
#line 1144
      goto ldv_26376;
      ldv_26374: 
#line 1144
      finish_wait(& dev_priv->irq_queue, & __wait);
    } else {

    }
#line 1144
    ret = __ret;
#line 1148
    i915_user_irq_put(dev);
#line 1149
    dev_priv->mm.waiting_gem_seqno = 0U;
  } else {

  }
#line 1151
  if (dev_priv->mm.wedged != 0) {
#line 1152
    ret = -5;
  } else {

  }
#line 1154
  if (ret != 0 && ret != -512) {
#line 1155
    tmp___9 = i915_get_gem_seqno(dev);
#line 1155
    printk("<3>[drm:%s] *ERROR* %s returns %d (awaiting %d at %d)\n", "i915_wait_request",
           "i915_wait_request", ret, seqno, tmp___9);
  } else {

  }
#line 1163
  if (ret == 0) {
#line 1164
    i915_gem_retire_requests(dev);
  } else {

  }
#line 1166
  return (ret);
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_flush(struct drm_device *dev , uint32_t invalidate_domains ,
                           uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 1174
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1183
  if ((int )flush_domains & 1) {
#line 1184
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 1186
  if (((invalidate_domains | flush_domains) & 4294967230U) != 0U) {
#line 1216
    cmd = 33554436U;
#line 1217
    if (((invalidate_domains | flush_domains) & 2U) != 0U) {
#line 1219
      cmd = cmd & 4294967291U;
    } else {

    }
#line 1220
    if (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) {
#line 1225
      if ((invalidate_domains & 4U) != 0U) {
#line 1226
        cmd = cmd | 1U;
      } else {

      }
    } else {

    }
#line 1228
    if ((invalidate_domains & 16U) != 0U) {
#line 1229
      cmd = cmd | 2U;
    } else {

    }
#line 1234
    if (dev_priv->ring.space <= 7) {
#line 1234
      i915_wait_ring(dev, 8, "i915_gem_flush");
    } else {

    }
#line 1234
    outcount = 0U;
#line 1234
    outring = (unsigned int )dev_priv->ring.tail;
#line 1234
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 1234
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 1235
    *((unsigned int volatile   *)virt + (unsigned long )outring) = cmd;
#line 1235
    outcount = outcount + 1U;
#line 1235
    outring = outring + 4U;
#line 1235
    outring = outring & ringmask;
#line 1236
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 1236
    outcount = outcount + 1U;
#line 1236
    outring = outring + 4U;
#line 1236
    outring = outring & ringmask;
#line 1237
    dev_priv->ring.tail = (int )outring;
#line 1237
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 1237
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {

  }
#line 1239
  return;
}
}
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 1248
  dev = obj->dev;
#line 1249
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1255
  tmp = __builtin_expect((obj->write_domain & 4294967230U) != 0U, 0L);
#line 1255
  if (tmp != 0L) {
#line 1255
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1255), "i" (24UL));
    ldv_26397: ;
#line 1255
    goto ldv_26397;
  } else {

  }
#line 1260
  if (obj_priv->active != 0) {
#line 1265
    ret = i915_wait_request(dev, obj_priv->last_rendering_seqno);
#line 1266
    if (ret != 0) {
#line 1267
      return (ret);
    } else {

    }
  } else {

  }
#line 1270
  return (0);
}
}
#line 1277 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_unbind(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  loff_t offset ;
  int ret ;
  long tmp ;
  int tmp___0 ;

  {
#line 1279
  dev = obj->dev;
#line 1280
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1282
  ret = 0;
#line 1288
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1289
    return (0);
  } else {

  }
#line 1291
  if (obj_priv->pin_count != 0) {
#line 1292
    printk("<3>[drm:%s] *ERROR* Attempting to unbind pinned buffer\n", "i915_gem_object_unbind");
#line 1293
    return (-22);
  } else {

  }
#line 1302
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 1303
  if (ret != 0) {
#line 1304
    if (ret != -512) {
#line 1305
      printk("<3>[drm:%s] *ERROR* set_domain failed: %d\n", "i915_gem_object_unbind",
             ret);
    } else {

    }
#line 1306
    return (ret);
  } else {

  }
#line 1309
  if ((unsigned long )obj_priv->agp_mem != (unsigned long )((struct agp_memory *)0)) {
#line 1310
    drm_unbind_agp(obj_priv->agp_mem);
#line 1311
    drm_free_agp(obj_priv->agp_mem, (int )(obj->size / 4096UL));
#line 1312
    obj_priv->agp_mem = 0;
  } else {

  }
#line 1315
  tmp = __builtin_expect(obj_priv->active != 0, 0L);
#line 1315
  if (tmp != 0L) {
#line 1315
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1315), "i" (24UL));
    ldv_26406: ;
#line 1315
    goto ldv_26406;
  } else {

  }
#line 1318
  offset = (long long )obj->map_list.hash.key << 12;
#line 1319
  if ((unsigned long )dev->dev_mapping != (unsigned long )((struct address_space *)0)) {
#line 1320
    unmap_mapping_range(dev->dev_mapping, offset, (loff_t const   )obj->size, 1);
  } else {

  }
#line 1322
  if (obj_priv->fence_reg != -1) {
#line 1323
    i915_gem_clear_fence_reg(obj);
  } else {

  }
#line 1325
  i915_gem_object_free_page_list(obj);
#line 1327
  if ((unsigned long )obj_priv->gtt_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1328
    atomic_dec(& dev->gtt_count);
#line 1329
    atomic_sub((int )obj->size, & dev->gtt_memory);
#line 1331
    drm_mm_put_block(obj_priv->gtt_space);
#line 1332
    obj_priv->gtt_space = 0;
  } else {

  }
#line 1336
  tmp___0 = list_empty((struct list_head  const  *)(& obj_priv->list));
#line 1336
  if (tmp___0 == 0) {
#line 1337
    list_del_init(& obj_priv->list);
  } else {

  }
#line 1339
  return (0);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_something(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct drm_i915_gem_request *request ;
  struct list_head  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1345
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1348
  ret = 0;
  ldv_26426: 
#line 1354
  tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1354
  if (tmp___1 == 0) {
#line 1355
    __mptr = (struct list_head  const  *)dev_priv->mm.inactive_list.next;
#line 1355
    obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 1358
    obj = obj_priv->obj;
#line 1359
    tmp = __builtin_expect(obj_priv->pin_count != 0, 0L);
#line 1359
    if (tmp != 0L) {
#line 1359
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                           "i" (1359), "i" (24UL));
      ldv_26416: ;
#line 1359
      goto ldv_26416;
    } else {

    }
#line 1363
    tmp___0 = __builtin_expect(obj_priv->active != 0, 0L);
#line 1363
    if (tmp___0 != 0L) {
#line 1363
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                           "i" (1363), "i" (24UL));
      ldv_26417: ;
#line 1363
      goto ldv_26417;
    } else {

    }
#line 1366
    ret = i915_gem_object_unbind(obj);
#line 1367
    goto ldv_26418;
  } else {

  }
#line 1374
  tmp___3 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1374
  if (tmp___3 == 0) {
#line 1377
    __mptr___0 = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 1377
    request = (struct drm_i915_gem_request *)__mptr___0 + 0xfffffffffffffff0UL;
#line 1381
    ret = i915_wait_request(dev, request->seqno);
#line 1382
    if (ret != 0) {
#line 1383
      goto ldv_26418;
    } else {

    }
#line 1390
    tmp___2 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1390
    if (tmp___2 == 0) {
#line 1391
      goto ldv_26422;
    } else {

    }
#line 1392
    goto ldv_26418;
  } else {

  }
#line 1400
  tmp___4 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1400
  if (tmp___4 == 0) {
#line 1401
    __mptr___1 = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 1401
    obj_priv = (struct drm_i915_gem_object *)__mptr___1 + 0xfffffffffffffff0UL;
#line 1404
    obj = obj_priv->obj;
#line 1406
    i915_gem_flush(dev, obj->write_domain, obj->write_domain);
#line 1409
    i915_add_request(dev, obj->write_domain);
#line 1411
    obj = 0;
#line 1412
    goto ldv_26422;
  } else {

  }
#line 1415
  tmp___5 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1415
  tmp___6 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1415
  tmp___7 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1415
  printk("<3>[drm:%s] *ERROR* inactive empty %d request empty %d flushing empty %d\n",
         "i915_gem_evict_something", tmp___7, tmp___6, tmp___5);
#line 1423
  return (-12);
  ldv_26422: ;
#line 1424
  goto ldv_26426;
  ldv_26418: ;
#line 1425
  return (ret);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_everything(struct drm_device *dev ) 
{ 
  int ret ;

  {
  ldv_26432: 
#line 1434
  ret = i915_gem_evict_something(dev);
#line 1435
  if (ret != 0) {
#line 1436
    goto ldv_26431;
  } else {

  }
#line 1437
  goto ldv_26432;
  ldv_26431: ;
#line 1438
  if (ret == -12) {
#line 1439
    return (0);
  } else {

  }
#line 1440
  return (ret);
}
}
#line 1444 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct page *page ;
  int ret ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 1446
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1453
  if ((unsigned long )obj_priv->page_list != (unsigned long )((struct page **)0)) {
#line 1454
    return (0);
  } else {

  }
#line 1459
  page_count___0 = (int )(obj->size / 4096UL);
#line 1460
  tmp = __builtin_expect((unsigned long )obj_priv->page_list != (unsigned long )((struct page **)0),
                         0L);
#line 1460
  if (tmp != 0L) {
#line 1460
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1460), "i" (24UL));
    ldv_26443: ;
#line 1460
    goto ldv_26443;
  } else {

  }
#line 1461
  tmp___0 = drm_calloc((size_t )page_count___0, 8UL, 2);
#line 1461
  obj_priv->page_list = (struct page **)tmp___0;
#line 1463
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 1464
    printk("<3>[drm:%s] *ERROR* Faled to allocate page list\n", "i915_gem_object_get_page_list");
#line 1465
    return (-12);
  } else {

  }
#line 1468
  inode = ((obj->filp)->f_path.dentry)->d_inode;
#line 1469
  mapping = inode->i_mapping;
#line 1470
  i = 0;
#line 1470
  goto ldv_26446;
  ldv_26445: 
#line 1471
  page = read_mapping_page(mapping, (unsigned long )i, 0);
#line 1472
  tmp___2 = IS_ERR((void const   *)page);
#line 1472
  if (tmp___2 != 0L) {
#line 1473
    tmp___1 = PTR_ERR((void const   *)page);
#line 1473
    ret = (int )tmp___1;
#line 1474
    printk("<3>[drm:%s] *ERROR* read_mapping_page failed: %d\n", "i915_gem_object_get_page_list",
           ret);
#line 1475
    i915_gem_object_free_page_list(obj);
#line 1476
    return (ret);
  } else {

  }
#line 1478
  *(obj_priv->page_list + (unsigned long )i) = page;
#line 1470
  i = i + 1;
  ldv_26446: ;
#line 1470
  if (i < page_count___0) {
#line 1471
    goto ldv_26445;
  } else {

  }

#line 1480
  return (0);
}
}
#line 1483 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i965_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint64_t val ;

  {
#line 1485
  obj = reg->obj;
#line 1486
  dev = obj->dev;
#line 1487
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1488
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1489
  regnum = obj_priv->fence_reg;
#line 1492
  val = ((unsigned long long )(((size_t )obj_priv->gtt_offset + obj->size) - 4096UL) & 4294963200ULL) << 32;
#line 1494
  val = ((uint64_t )obj_priv->gtt_offset & 4294963200ULL) | val;
#line 1495
  val = (uint64_t )((obj_priv->stride / 128U - 1U) << 2) | val;
#line 1496
  if (obj_priv->tiling_mode == 2U) {
#line 1497
    val = val | 2ULL;
  } else {

  }
#line 1498
  val = val | 1ULL;
#line 1500
  writeq((unsigned long )val, (void volatile   *)dev_priv->regs + (unsigned long )((regnum + 1536) * 8));
#line 1501
  return;
}
}
#line 1503 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint32_t val ;
  uint32_t pitch_val ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 1505
  obj = reg->obj;
#line 1506
  dev = obj->dev;
#line 1507
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1508
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1509
  regnum = obj_priv->fence_reg;
#line 1513
  if ((obj_priv->gtt_offset & 4027580415U) != 0U || ((size_t )obj_priv->gtt_offset & (obj->size - 1UL)) != 0UL) {
#line 1515
    __ret_warn_on = 1;
#line 1515
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1515
    if (tmp != 0L) {
#line 1515
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                    1515, "%s: object not 1M or size aligned\n", "i915_write_fence_reg");
    } else {

    }
#line 1515
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 1516
    return;
  } else {

  }
#line 1519
  if (obj_priv->tiling_mode == 2U && ((dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1522
    pitch_val = obj_priv->stride / 128U - 1U;
  } else {
#line 1524
    pitch_val = obj_priv->stride / 512U - 1U;
  }
#line 1526
  val = obj_priv->gtt_offset;
#line 1527
  if (obj_priv->tiling_mode == 2U) {
#line 1528
    val = val | 4096U;
  } else {

  }
#line 1529
  tmp___0 = get_order(obj->size >> 20);
#line 1529
  val = (uint32_t )((tmp___0 + -1) << 8) | val;
#line 1530
  val = (pitch_val << 4) | val;
#line 1531
  val = val | 1U;
#line 1533
  writel(val, (void volatile   *)dev_priv->regs + (unsigned long )((regnum + 2048) * 4));
#line 1534
  return;
}
}
#line 1536 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i830_write_fence_reg(struct drm_i915_fence_reg *reg ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int regnum ;
  uint32_t val ;
  uint32_t pitch_val ;
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 1538
  obj = reg->obj;
#line 1539
  dev = obj->dev;
#line 1540
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1541
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1542
  regnum = obj_priv->fence_reg;
#line 1546
  if ((obj_priv->gtt_offset & 4027580415U) != 0U || ((size_t )obj_priv->gtt_offset & (obj->size - 1UL)) != 0UL) {
#line 1548
    __ret_warn_on = 1;
#line 1548
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1548
    if (tmp != 0L) {
#line 1548
      warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                    1548, "%s: object not 1M or size aligned\n", "i830_write_fence_reg");
    } else {

    }
#line 1548
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 1549
    return;
  } else {

  }
#line 1552
  pitch_val = obj_priv->stride / 128U - 1U;
#line 1554
  val = obj_priv->gtt_offset;
#line 1555
  if (obj_priv->tiling_mode == 2U) {
#line 1556
    val = val | 4096U;
  } else {

  }
#line 1557
  tmp___0 = get_order(obj->size >> 19);
#line 1557
  val = (uint32_t )((tmp___0 + -1) << 8) | val;
#line 1558
  val = (pitch_val << 4) | val;
#line 1559
  val = val | 1U;
#line 1561
  writel(val, (void volatile   *)dev_priv->regs + (unsigned long )((regnum + 2048) * 4));
#line 1562
  return;
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_get_fence_reg(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_i915_fence_reg *reg ;
  int i ;
  int ret ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  int __ret_warn_on___1 ;
  long tmp___1 ;
  struct drm_i915_gem_object *old_obj_priv ;
  loff_t offset ;
  int __ret_warn_on___2 ;
  long tmp___2 ;

  {
#line 1581
  dev = obj->dev;
#line 1582
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1583
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1584
  reg = 0;
#line 1587
  switch (obj_priv->tiling_mode) {
  case (uint32_t )0: 
#line 1589
  __ret_warn_on = 1;
#line 1589
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1589
  if (tmp != 0L) {
#line 1589
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                  1589, "allocating a fence for non-tiled object?\n");
  } else {

  }
#line 1589
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 1590
  goto ldv_26495;
  case (uint32_t )1: 
#line 1592
  __ret_warn_on___0 = (obj_priv->stride & 511U) != 0U;
#line 1592
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 1592
  if (tmp___0 != 0L) {
#line 1592
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                  1593, "object is X tiled but has non-512B pitch\n");
  } else {

  }
#line 1592
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 1594
  goto ldv_26495;
  case (uint32_t )2: 
#line 1596
  __ret_warn_on___1 = (obj_priv->stride & 127U) != 0U;
#line 1596
  tmp___1 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
#line 1596
  if (tmp___1 != 0L) {
#line 1596
    warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                  1597, "object is Y tiled but has non-128B pitch\n");
  } else {

  }
#line 1596
  __builtin_expect(__ret_warn_on___1 != 0, 0L);
#line 1598
  goto ldv_26495;
  }
  ldv_26495: 
#line 1602
  i = dev_priv->fence_reg_start;
#line 1602
  goto ldv_26504;
  ldv_26503: 
#line 1603
  reg = (struct drm_i915_fence_reg *)(& dev_priv->fence_regs) + (unsigned long )i;
#line 1604
  if ((unsigned long )reg->obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1605
    goto ldv_26502;
  } else {

  }
#line 1602
  i = i + 1;
  ldv_26504: ;
#line 1602
  if (dev_priv->num_fence_regs > i) {
#line 1603
    goto ldv_26503;
  } else {

  }
  ldv_26502: ;
#line 1609
  if (dev_priv->num_fence_regs == i) {
#line 1610
    old_obj_priv = 0;
    try_again: 
#line 1615
    i = dev_priv->fence_reg_start;
#line 1615
    goto ldv_26510;
    ldv_26509: 
#line 1617
    reg = (struct drm_i915_fence_reg *)(& dev_priv->fence_regs) + (unsigned long )i;
#line 1618
    old_obj_priv = (struct drm_i915_gem_object *)(reg->obj)->driver_private;
#line 1619
    if (old_obj_priv->pin_count == 0) {
#line 1620
      goto ldv_26508;
    } else {

    }
#line 1616
    i = i + 1;
    ldv_26510: ;
#line 1615
    if (dev_priv->num_fence_regs > i) {
#line 1617
      goto ldv_26509;
    } else {

    }
    ldv_26508: ;
#line 1627
    if (dev_priv->num_fence_regs == i) {
#line 1628
      ret = i915_gem_object_wait_rendering(reg->obj);
#line 1629
      if (ret != 0) {
#line 1630
        __ret_warn_on___2 = ret != 0;
#line 1630
        tmp___2 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 1630
        if (tmp___2 != 0L) {
#line 1630
          warn_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                        1630, "wait_rendering failed: %d\n", ret);
        } else {

        }
#line 1630
        __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 1631
        return;
      } else {

      }
#line 1633
      goto try_again;
    } else {

    }
#line 1640
    offset = (long long )(reg->obj)->map_list.hash.key << 12;
#line 1641
    if ((unsigned long )dev->dev_mapping != (unsigned long )((struct address_space *)0)) {
#line 1642
      unmap_mapping_range(dev->dev_mapping, offset, (loff_t const   )(reg->obj)->size,
                          1);
    } else {

    }
#line 1644
    old_obj_priv->fence_reg = -1;
  } else {

  }
#line 1647
  obj_priv->fence_reg = i;
#line 1648
  reg->obj = obj;
#line 1650
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1651
    i965_write_fence_reg(reg);
  } else
#line 1652
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1653
    i915_write_fence_reg(reg);
  } else {
#line 1655
    i830_write_fence_reg(reg);
  }
#line 1656
  return;
}
}
#line 1666 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_clear_fence_reg(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1668
  dev = obj->dev;
#line 1669
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1670
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1672
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1673
    writeq(0UL, (void volatile   *)dev_priv->regs + (unsigned long )((obj_priv->fence_reg + 1536) * 8));
  } else {
#line 1675
    writel(0U, (void volatile   *)dev_priv->regs + (unsigned long )((obj_priv->fence_reg + 2048) * 4));
  }
#line 1677
  dev_priv->fence_regs[obj_priv->fence_reg].obj = 0;
#line 1678
  obj_priv->fence_reg = -1;
#line 1679
  return;
}
}
#line 1685 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_mm_node *free_space ;
  int page_count___0 ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 1687
  dev = obj->dev;
#line 1688
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1689
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1693
  if (alignment == 0U) {
#line 1694
    alignment = 4096U;
  } else {

  }
#line 1695
  if (((unsigned long )alignment & 4095UL) != 0UL) {
#line 1696
    printk("<3>[drm:%s] *ERROR* Invalid object alignment requested %u\n", "i915_gem_object_bind_to_gtt",
           alignment);
#line 1697
    return (-22);
  } else {

  }
  search_free: 
#line 1701
  free_space = drm_mm_search_free((struct drm_mm  const  *)(& dev_priv->mm.gtt_space),
                                  obj->size, alignment, 0);
#line 1703
  if ((unsigned long )free_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1704
    obj_priv->gtt_space = drm_mm_get_block(free_space, obj->size, alignment);
#line 1706
    if ((unsigned long )obj_priv->gtt_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1707
      (obj_priv->gtt_space)->private = (void *)obj;
#line 1708
      obj_priv->gtt_offset = (uint32_t )(obj_priv->gtt_space)->start;
    } else {

    }
  } else {

  }
#line 1711
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1718
    tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1718
    if (tmp != 0) {
#line 1718
      tmp___0 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1718
      if (tmp___0 != 0) {
#line 1718
        tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 1718
        if (tmp___1 != 0) {
#line 1721
          printk("<3>[drm:%s] *ERROR* GTT full, but LRU list empty\n", "i915_gem_object_bind_to_gtt");
#line 1722
          return (-12);
        } else {

        }
      } else {

      }
    } else {

    }
#line 1725
    ret = i915_gem_evict_something(dev);
#line 1726
    if (ret != 0) {
#line 1727
      if (ret != -512) {
#line 1728
        printk("<3>[drm:%s] *ERROR* Failed to evict a buffer %d\n", "i915_gem_object_bind_to_gtt",
               ret);
      } else {

      }
#line 1729
      return (ret);
    } else {

    }
#line 1731
    goto search_free;
  } else {

  }
#line 1738
  ret = i915_gem_object_get_page_list(obj);
#line 1739
  if (ret != 0) {
#line 1740
    drm_mm_put_block(obj_priv->gtt_space);
#line 1741
    obj_priv->gtt_space = 0;
#line 1742
    return (ret);
  } else {

  }
#line 1745
  page_count___0 = (int )(obj->size / 4096UL);
#line 1749
  obj_priv->agp_mem = drm_agp_bind_pages(dev, obj_priv->page_list, (unsigned long )page_count___0,
                                         obj_priv->gtt_offset, obj_priv->agp_type);
#line 1754
  if ((unsigned long )obj_priv->agp_mem == (unsigned long )((struct agp_memory *)0)) {
#line 1755
    i915_gem_object_free_page_list(obj);
#line 1756
    drm_mm_put_block(obj_priv->gtt_space);
#line 1757
    obj_priv->gtt_space = 0;
#line 1758
    return (-12);
  } else {

  }
#line 1760
  atomic_inc(& dev->gtt_count);
#line 1761
  atomic_add((int )obj->size, & dev->gtt_memory);
#line 1767
  tmp___2 = __builtin_expect((obj->read_domains & 4294967230U) != 0U, 0L);
#line 1767
  if (tmp___2 != 0L) {
#line 1767
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1767), "i" (24UL));
    ldv_26531: ;
#line 1767
    goto ldv_26531;
  } else {

  }
#line 1768
  tmp___3 = __builtin_expect((obj->write_domain & 4294967230U) != 0U, 0L);
#line 1768
  if (tmp___3 != 0L) {
#line 1768
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1768), "i" (24UL));
    ldv_26532: ;
#line 1768
    goto ldv_26532;
  } else {

  }
#line 1770
  return (0);
}
}
#line 1774 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_clflush_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1776
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1782
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 1783
    return;
  } else {

  }
#line 1785
  drm_clflush_pages(obj_priv->page_list, obj->size / 4096UL);
#line 1786
  return;
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  uint32_t seqno ;

  {
#line 1792
  dev = obj->dev;
#line 1795
  if ((obj->write_domain & 4294967230U) == 0U) {
#line 1796
    return;
  } else {

  }
#line 1799
  i915_gem_flush(dev, 0U, obj->write_domain);
#line 1800
  seqno = i915_add_request(dev, obj->write_domain);
#line 1801
  obj->write_domain = 0U;
#line 1802
  i915_gem_object_move_to_active(obj, seqno);
#line 1803
  return;
}
}
#line 1807 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) 
{ 


  {
#line 1809
  if (obj->write_domain != 64U) {
#line 1810
    return;
  } else {

  }
#line 1816
  obj->write_domain = 0U;
#line 1817
  return;
}
}
#line 1821 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;

  {
#line 1823
  dev = obj->dev;
#line 1825
  if (obj->write_domain != 1U) {
#line 1826
    return;
  } else {

  }
#line 1828
  i915_gem_clflush_object(obj);
#line 1829
  drm_agp_chipset_flush(dev);
#line 1830
  obj->write_domain = 0U;
#line 1831
  return;
}
}
#line 1840 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 1842
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1846
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1847
    return (-22);
  } else {

  }
#line 1849
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1851
  ret = i915_gem_object_wait_rendering(obj);
#line 1852
  if (ret != 0) {
#line 1853
    return (ret);
  } else {

  }
#line 1858
  if (write != 0) {
#line 1859
    obj->read_domains = obj->read_domains & 64U;
  } else {

  }
#line 1861
  i915_gem_object_flush_cpu_write_domain(obj);
#line 1866
  tmp = __builtin_expect((obj->write_domain & 4294967231U) != 0U, 0L);
#line 1866
  if (tmp != 0L) {
#line 1866
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1866), "i" (24UL));
    ldv_26555: ;
#line 1866
    goto ldv_26555;
  } else {

  }
#line 1867
  obj->read_domains = obj->read_domains | 64U;
#line 1868
  if (write != 0) {
#line 1869
    obj->write_domain = 64U;
#line 1870
    obj_priv->dirty = 1;
  } else {

  }
#line 1873
  return (0);
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_device *dev ;
  int ret ;
  long tmp ;

  {
#line 1885
  dev = obj->dev;
#line 1888
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1890
  ret = i915_gem_object_wait_rendering(obj);
#line 1891
  if (ret != 0) {
#line 1892
    return (ret);
  } else {

  }
#line 1894
  i915_gem_object_flush_gtt_write_domain(obj);
#line 1899
  i915_gem_object_set_to_full_cpu_read_domain(obj);
#line 1902
  if ((obj->read_domains & 1U) == 0U) {
#line 1903
    i915_gem_clflush_object(obj);
#line 1904
    drm_agp_chipset_flush(dev);
#line 1906
    obj->read_domains = obj->read_domains | 1U;
  } else {

  }
#line 1912
  tmp = __builtin_expect((obj->write_domain & 4294967294U) != 0U, 0L);
#line 1912
  if (tmp != 0L) {
#line 1912
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1912), "i" (24UL));
    ldv_26562: ;
#line 1912
    goto ldv_26562;
  } else {

  }
#line 1917
  if (write != 0) {
#line 1918
    obj->read_domains = obj->read_domains & 1U;
#line 1919
    obj->write_domain = 1U;
  } else {

  }
#line 1922
  return (0);
}
}
#line 2037 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  uint32_t invalidate_domains ;
  uint32_t flush_domains ;
  long tmp ;
  long tmp___0 ;

  {
#line 2041
  dev = obj->dev;
#line 2042
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2043
  invalidate_domains = 0U;
#line 2044
  flush_domains = 0U;
#line 2046
  tmp = __builtin_expect((long )((int )read_domains) & 1L, 0L);
#line 2046
  if (tmp != 0L) {
#line 2046
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2046), "i" (24UL));
    ldv_26572: ;
#line 2046
    goto ldv_26572;
  } else {

  }
#line 2047
  tmp___0 = __builtin_expect(write_domain == 1U, 0L);
#line 2047
  if (tmp___0 != 0L) {
#line 2047
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2047), "i" (24UL));
    ldv_26573: ;
#line 2047
    goto ldv_26573;
  } else {

  }
#line 2059
  if (write_domain == 0U) {
#line 2060
    read_domains = obj->read_domains | read_domains;
  } else {
#line 2062
    obj_priv->dirty = 1;
  }
#line 2070
  if (obj->write_domain != 0U && obj->write_domain != read_domains) {
#line 2071
    flush_domains = obj->write_domain | flush_domains;
#line 2072
    invalidate_domains = (~ obj->write_domain & read_domains) | invalidate_domains;
  } else {

  }
#line 2078
  invalidate_domains = (~ obj->read_domains & read_domains) | invalidate_domains;
#line 2079
  if ((int )(flush_domains | invalidate_domains) & 1) {
#line 2084
    i915_gem_clflush_object(obj);
  } else {

  }
#line 2087
  if ((write_domain | flush_domains) != 0U) {
#line 2088
    obj->write_domain = write_domain;
  } else {

  }
#line 2089
  obj->read_domains = read_domains;
#line 2091
  dev->invalidate_domains = dev->invalidate_domains | invalidate_domains;
#line 2092
  dev->flush_domains = dev->flush_domains | flush_domains;
#line 2093
  return;
}
}
#line 2108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;

  {
#line 2110
  dev = obj->dev;
#line 2111
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2113
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 2114
    return;
  } else {

  }
#line 2118
  if ((int )obj->read_domains & 1) {
#line 2121
    i = 0;
#line 2121
    goto ldv_26582;
    ldv_26581: ;
#line 2122
    if ((unsigned int )*(obj_priv->page_cpu_valid + (unsigned long )i) != 0U) {
#line 2123
      goto ldv_26580;
    } else {

    }
#line 2124
    drm_clflush_pages(obj_priv->page_list + (unsigned long )i, 1UL);
    ldv_26580: 
#line 2121
    i = i + 1;
    ldv_26582: ;
#line 2121
    if ((unsigned long )i <= (obj->size - 1UL) / 4096UL) {
#line 2122
      goto ldv_26581;
    } else {

    }
#line 2126
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 2132
  drm_free((void *)obj_priv->page_cpu_valid, obj->size / 4096UL, 2);
#line 2134
  obj_priv->page_cpu_valid = 0;
#line 2135
  return;
}
}
#line 2150 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  long tmp___1 ;

  {
#line 2153
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2156
  if (offset == 0ULL && (unsigned long long )obj->size == size) {
#line 2157
    tmp = i915_gem_object_set_to_cpu_domain(obj, 0);
#line 2157
    return (tmp);
  } else {

  }
#line 2159
  i915_gem_object_flush_gpu_write_domain(obj);
#line 2161
  ret = i915_gem_object_wait_rendering(obj);
#line 2162
  if (ret != 0) {
#line 2163
    return (ret);
  } else {

  }
#line 2164
  i915_gem_object_flush_gtt_write_domain(obj);
#line 2167
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0) && (int )obj->read_domains & 1) {
#line 2169
    return (0);
  } else {

  }
#line 2174
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 2175
    tmp___0 = drm_calloc(1UL, obj->size / 4096UL, 2);
#line 2175
    obj_priv->page_cpu_valid = (uint8_t *)tmp___0;
#line 2177
    if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 2178
      return (-12);
    } else {

    }
  } else
#line 2179
  if ((obj->read_domains & 1U) == 0U) {
#line 2180
    memset((void *)obj_priv->page_cpu_valid, 0, obj->size / 4096UL);
  } else {

  }
#line 2185
  i = (int )(offset / 4096ULL);
#line 2185
  goto ldv_26594;
  ldv_26593: ;
#line 2187
  if ((unsigned int )*(obj_priv->page_cpu_valid + (unsigned long )i) != 0U) {
#line 2188
    goto ldv_26592;
  } else {

  }
#line 2190
  drm_clflush_pages(obj_priv->page_list + (unsigned long )i, 1UL);
#line 2192
  *(obj_priv->page_cpu_valid + (unsigned long )i) = 1U;
  ldv_26592: 
#line 2186
  i = i + 1;
  ldv_26594: ;
#line 2185
  if ((unsigned long long )i <= ((offset + size) - 1ULL) / 4096ULL) {
#line 2186
    goto ldv_26593;
  } else {

  }
#line 2198
  tmp___1 = __builtin_expect((obj->write_domain & 4294967294U) != 0U, 0L);
#line 2198
  if (tmp___1 != 0L) {
#line 2198
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2198), "i" (24UL));
    ldv_26596: ;
#line 2198
    goto ldv_26596;
  } else {

  }
#line 2200
  obj->read_domains = obj->read_domains | 1U;
#line 2202
  return (0);
}
}
#line 2209 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_pin_and_relocate(struct drm_gem_object *obj , struct drm_file *file_priv ,
                                            struct drm_i915_gem_exec_object *entry ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_relocation_entry reloc ;
  struct drm_i915_gem_relocation_entry *relocs ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  void *reloc_page ;
  struct drm_gem_object *target_obj ;
  struct drm_i915_gem_object *target_obj_priv ;
  uint32_t reloc_val ;
  uint32_t reloc_offset ;
  uint32_t *reloc_entry ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 2213
  dev = obj->dev;
#line 2214
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2217
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2222
  ret = i915_gem_object_pin(obj, (unsigned int )entry->alignment);
#line 2223
  if (ret != 0) {
#line 2224
    return (ret);
  } else {

  }
#line 2226
  entry->offset = (uint64_t )obj_priv->gtt_offset;
#line 2228
  relocs = (struct drm_i915_gem_relocation_entry *)entry->relocs_ptr;
#line 2233
  i = 0;
#line 2233
  goto ldv_26618;
  ldv_26617: 
#line 2239
  tmp = copy_from_user((void *)(& reloc), (void const   *)relocs + (unsigned long )i,
                       32U);
#line 2239
  ret = (int )tmp;
#line 2240
  if (ret != 0) {
#line 2241
    i915_gem_object_unpin(obj);
#line 2242
    return (ret);
  } else {

  }
#line 2245
  target_obj = drm_gem_object_lookup(obj->dev, file_priv, (int )reloc.target_handle);
#line 2247
  if ((unsigned long )target_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2248
    i915_gem_object_unpin(obj);
#line 2249
    return (-9);
  } else {

  }
#line 2251
  target_obj_priv = (struct drm_i915_gem_object *)target_obj->driver_private;
#line 2256
  if ((unsigned long )target_obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 2257
    printk("<3>[drm:%s] *ERROR* No GTT space found for object %d\n", "i915_gem_object_pin_and_relocate",
           reloc.target_handle);
#line 2259
    drm_gem_object_unreference(target_obj);
#line 2260
    i915_gem_object_unpin(obj);
#line 2261
    return (-22);
  } else {

  }
#line 2264
  if (reloc.offset > (unsigned long long )(obj->size - 4UL)) {
#line 2265
    printk("<3>[drm:%s] *ERROR* Relocation beyond object bounds: obj %p target %d offset %d size %d.\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           (int )obj->size);
#line 2269
    drm_gem_object_unreference(target_obj);
#line 2270
    i915_gem_object_unpin(obj);
#line 2271
    return (-22);
  } else {

  }
#line 2273
  if ((reloc.offset & 3ULL) != 0ULL) {
#line 2274
    printk("<3>[drm:%s] *ERROR* Relocation not 4-byte aligned: obj %p target %d offset %d.\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset);
#line 2278
    drm_gem_object_unreference(target_obj);
#line 2279
    i915_gem_object_unpin(obj);
#line 2280
    return (-22);
  } else {

  }
#line 2283
  if ((int )reloc.write_domain & 1 || (int )reloc.read_domains & 1) {
#line 2285
    printk("<3>[drm:%s] *ERROR* reloc with read/write CPU domains: obj %p target %d offset %d read %08x write %08x",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           reloc.read_domains, reloc.write_domain);
#line 2292
    return (-22);
  } else {

  }
#line 2295
  if ((reloc.write_domain != 0U && target_obj->pending_write_domain != 0U) && reloc.write_domain != target_obj->pending_write_domain) {
#line 2297
    printk("<3>[drm:%s] *ERROR* Write domain conflict: obj %p target %d offset %d new %08x old %08x\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           reloc.write_domain, target_obj->pending_write_domain);
#line 2304
    drm_gem_object_unreference(target_obj);
#line 2305
    i915_gem_object_unpin(obj);
#line 2306
    return (-22);
  } else {

  }
#line 2324
  target_obj->pending_read_domains = target_obj->pending_read_domains | reloc.read_domains;
#line 2325
  target_obj->pending_write_domain = target_obj->pending_write_domain | reloc.write_domain;
#line 2330
  if ((uint64_t )target_obj_priv->gtt_offset == reloc.presumed_offset) {
#line 2331
    drm_gem_object_unreference(target_obj);
#line 2332
    goto ldv_26616;
  } else {

  }
#line 2335
  ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 2336
  if (ret != 0) {
#line 2337
    drm_gem_object_unreference(target_obj);
#line 2338
    i915_gem_object_unpin(obj);
#line 2339
    return (-22);
  } else {

  }
#line 2345
  reloc_offset = obj_priv->gtt_offset + (uint32_t )reloc.offset;
#line 2346
  reloc_page = io_mapping_map_atomic_wc(dev_priv->mm.gtt_mapping, (unsigned long )reloc_offset & 0xfffffffffffff000UL);
#line 2349
  reloc_entry = (uint32_t *)(reloc_page + ((unsigned long )reloc_offset & 4095UL));
#line 2351
  reloc_val = target_obj_priv->gtt_offset + reloc.delta;
#line 2358
  writel(reloc_val, (void volatile   *)reloc_entry);
#line 2359
  io_mapping_unmap_atomic(reloc_page);
#line 2364
  reloc.presumed_offset = (uint64_t )target_obj_priv->gtt_offset;
#line 2365
  tmp___0 = copy_to_user((void *)relocs + (unsigned long )i, (void const   *)(& reloc),
                         32U);
#line 2365
  ret = (int )tmp___0;
#line 2366
  if (ret != 0) {
#line 2367
    drm_gem_object_unreference(target_obj);
#line 2368
    i915_gem_object_unpin(obj);
#line 2369
    return (ret);
  } else {

  }
#line 2372
  drm_gem_object_unreference(target_obj);
  ldv_26616: 
#line 2233
  i = i + 1;
  ldv_26618: ;
#line 2233
  if ((uint32_t )i < entry->relocation_count) {
#line 2234
    goto ldv_26617;
  } else {

  }

#line 2379
  return (0);
}
}
#line 2385 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_dispatch_gem_execbuffer(struct drm_device *dev , struct drm_i915_gem_execbuffer *exec ,
                                        uint64_t exec_offset ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  uint32_t exec_start ;
  uint32_t exec_len ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 2389
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2390
  boxes = (struct drm_clip_rect *)exec->cliprects_ptr;
#line 2392
  nbox = (int )exec->num_cliprects;
#line 2393
  i = 0;
#line 2397
  exec_start = (unsigned int )exec_offset + exec->batch_start_offset;
#line 2398
  exec_len = exec->batch_len;
#line 2400
  if (((exec_start | exec_len) & 7U) != 0U) {
#line 2401
    printk("<3>[drm:%s] *ERROR* alignment\n", "i915_dispatch_gem_execbuffer");
#line 2402
    return (-22);
  } else {

  }
#line 2405
  if (exec_start == 0U) {
#line 2406
    return (-22);
  } else {

  }
#line 2408
  count = nbox != 0 ? nbox : 1;
#line 2410
  i = 0;
#line 2410
  goto ldv_26639;
  ldv_26638: ;
#line 2411
  if (i < nbox) {
#line 2412
    tmp = i915_emit_box(dev, boxes, i, (int )exec->DR1, (int )exec->DR4);
#line 2412
    ret = tmp;
#line 2414
    if (ret != 0) {
#line 2415
      return (ret);
    } else {

    }
  } else {

  }
#line 2418
  if (dev->pci_device == 13687 || dev->pci_device == 9570) {
#line 2419
    if (dev_priv->ring.space <= 15) {
#line 2419
      i915_wait_ring(dev, 16, "i915_dispatch_gem_execbuffer");
    } else {

    }
#line 2419
    outcount = 0U;
#line 2419
    outring = (unsigned int )dev_priv->ring.tail;
#line 2419
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 2419
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 2420
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 402653185U;
#line 2420
    outcount = outcount + 1U;
#line 2420
    outring = outring + 4U;
#line 2420
    outring = outring & ringmask;
#line 2421
    *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start | 1U;
#line 2421
    outcount = outcount + 1U;
#line 2421
    outring = outring + 4U;
#line 2421
    outring = outring & ringmask;
#line 2422
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (exec_start + exec_len) - 4U;
#line 2422
    outcount = outcount + 1U;
#line 2422
    outring = outring + 4U;
#line 2422
    outring = outring & ringmask;
#line 2423
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 2423
    outcount = outcount + 1U;
#line 2423
    outring = outring + 4U;
#line 2423
    outring = outring & ringmask;
#line 2424
    dev_priv->ring.tail = (int )outring;
#line 2424
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 2424
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 2426
    if (dev_priv->ring.space <= 7) {
#line 2426
      i915_wait_ring(dev, 8, "i915_dispatch_gem_execbuffer");
    } else {

    }
#line 2426
    outcount = 0U;
#line 2426
    outring = (unsigned int )dev_priv->ring.tail;
#line 2426
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 2426
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 2427
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 2428
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411042176U;
#line 2428
      outcount = outcount + 1U;
#line 2428
      outring = outring + 4U;
#line 2428
      outring = outring & ringmask;
#line 2431
      *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start;
#line 2431
      outcount = outcount + 1U;
#line 2431
      outring = outring + 4U;
#line 2431
      outring = outring & ringmask;
    } else {
#line 2433
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411041920U;
#line 2433
      outcount = outcount + 1U;
#line 2433
      outring = outring + 4U;
#line 2433
      outring = outring & ringmask;
#line 2435
      *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start | 1U;
#line 2435
      outcount = outcount + 1U;
#line 2435
      outring = outring + 4U;
#line 2435
      outring = outring & ringmask;
    }
#line 2437
    dev_priv->ring.tail = (int )outring;
#line 2437
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 2437
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 2410
  i = i + 1;
  ldv_26639: ;
#line 2410
  if (i < count) {
#line 2411
    goto ldv_26638;
  } else {

  }

#line 2442
  return (0);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_ring_throttle(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  int ret ;
  uint32_t seqno ;

  {
#line 2454
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 2455
  ret = 0;
#line 2458
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2459
  seqno = i915_file_priv->mm.last_gem_throttle_seqno;
#line 2460
  i915_file_priv->mm.last_gem_throttle_seqno = i915_file_priv->mm.last_gem_seqno;
#line 2462
  if (seqno != 0U) {
#line 2463
    ret = i915_wait_request(dev, seqno);
  } else {

  }
#line 2464
  mutex_unlock(& dev->struct_mutex);
#line 2465
  return (ret);
}
}
#line 2469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_file_private *i915_file_priv ;
  struct drm_i915_gem_execbuffer *args ;
  struct drm_i915_gem_exec_object *exec_list ;
  struct drm_gem_object **object_list ;
  struct drm_gem_object *batch_obj ;
  int ret ;
  int i ;
  int pinned ;
  uint64_t exec_offset ;
  uint32_t seqno ;
  uint32_t flush_domains ;
  int pin_tries ;
  void *tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  struct drm_gem_object *obj ;
  long tmp___2 ;
  struct drm_gem_object *obj___0 ;
  unsigned long tmp___3 ;

  {
#line 2472
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2473
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 2474
  args = (struct drm_i915_gem_execbuffer *)data;
#line 2475
  exec_list = 0;
#line 2476
  object_list = 0;
#line 2478
  pinned = 0;
#line 2488
  if (args->buffer_count == 0U) {
#line 2489
    printk("<3>[drm:%s] *ERROR* execbuf with %d buffers\n", "i915_gem_execbuffer",
           args->buffer_count);
#line 2490
    return (-22);
  } else {

  }
#line 2493
  tmp = drm_calloc(32UL, (size_t )args->buffer_count, 2);
#line 2493
  exec_list = (struct drm_i915_gem_exec_object *)tmp;
#line 2495
  tmp___0 = drm_calloc(8UL, (size_t )args->buffer_count, 2);
#line 2495
  object_list = (struct drm_gem_object **)tmp___0;
#line 2497
  if ((unsigned long )exec_list == (unsigned long )((struct drm_i915_gem_exec_object *)0) || (unsigned long )object_list == (unsigned long )((struct drm_gem_object **)0)) {
#line 2498
    printk("<3>[drm:%s] *ERROR* Failed to allocate exec or object list for %d buffers\n",
           "i915_gem_execbuffer", args->buffer_count);
#line 2501
    ret = -12;
#line 2502
    goto pre_mutex_err;
  } else {

  }
#line 2504
  tmp___1 = copy_from_user((void *)exec_list, (void const   *)args->buffers_ptr, args->buffer_count * 32U);
#line 2504
  ret = (int )tmp___1;
#line 2508
  if (ret != 0) {
#line 2509
    printk("<3>[drm:%s] *ERROR* copy %d exec entries failed %d\n", "i915_gem_execbuffer",
           args->buffer_count, ret);
#line 2511
    goto pre_mutex_err;
  } else {

  }
#line 2514
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2518
  if (dev_priv->mm.wedged != 0) {
#line 2519
    printk("<3>[drm:%s] *ERROR* Execbuf while wedged\n", "i915_gem_execbuffer");
#line 2520
    mutex_unlock(& dev->struct_mutex);
#line 2521
    return (-5);
  } else {

  }
#line 2524
  if (dev_priv->mm.suspended != 0) {
#line 2525
    printk("<3>[drm:%s] *ERROR* Execbuf while VT-switched.\n", "i915_gem_execbuffer");
#line 2526
    mutex_unlock(& dev->struct_mutex);
#line 2527
    return (-16);
  } else {

  }
#line 2531
  i = 0;
#line 2531
  goto ldv_26671;
  ldv_26670: 
#line 2532
  *(object_list + (unsigned long )i) = drm_gem_object_lookup(dev, file_priv, (int )(exec_list + (unsigned long )i)->handle);
#line 2534
  if ((unsigned long )*(object_list + (unsigned long )i) == (unsigned long )((struct drm_gem_object *)0)) {
#line 2535
    printk("<3>[drm:%s] *ERROR* Invalid object handle %d at index %d\n", "i915_gem_execbuffer",
           (exec_list + (unsigned long )i)->handle, i);
#line 2537
    ret = -9;
#line 2538
    goto err;
  } else {

  }
#line 2531
  i = i + 1;
  ldv_26671: ;
#line 2531
  if ((uint32_t )i < args->buffer_count) {
#line 2532
    goto ldv_26670;
  } else {

  }
#line 2543
  pin_tries = 0;
  ldv_26680: 
#line 2544
  ret = 0;
#line 2545
  i = 0;
#line 2545
  goto ldv_26675;
  ldv_26674: 
#line 2546
  (*(object_list + (unsigned long )i))->pending_read_domains = 0U;
#line 2547
  (*(object_list + (unsigned long )i))->pending_write_domain = 0U;
#line 2548
  ret = i915_gem_object_pin_and_relocate(*(object_list + (unsigned long )i), file_priv,
                                         exec_list + (unsigned long )i);
#line 2551
  if (ret != 0) {
#line 2552
    goto ldv_26673;
  } else {

  }
#line 2553
  pinned = i + 1;
#line 2545
  i = i + 1;
  ldv_26675: ;
#line 2545
  if ((uint32_t )i < args->buffer_count) {
#line 2546
    goto ldv_26674;
  } else {

  }
  ldv_26673: ;
#line 2556
  if (ret == 0) {
#line 2557
    goto ldv_26676;
  } else {

  }
#line 2560
  if (ret != -12 || pin_tries > 0) {
#line 2561
    printk("<3>[drm:%s] *ERROR* Failed to pin buffers %d\n", "i915_gem_execbuffer",
           ret);
#line 2562
    goto err;
  } else {

  }
#line 2566
  i = 0;
#line 2566
  goto ldv_26678;
  ldv_26677: 
#line 2567
  i915_gem_object_unpin(*(object_list + (unsigned long )i));
#line 2566
  i = i + 1;
  ldv_26678: ;
#line 2566
  if (i < pinned) {
#line 2567
    goto ldv_26677;
  } else {

  }
#line 2568
  pinned = 0;
#line 2571
  ret = i915_gem_evict_everything(dev);
#line 2572
  if (ret != 0) {
#line 2573
    goto err;
  } else {

  }
#line 2543
  pin_tries = pin_tries + 1;
#line 2574
  goto ldv_26680;
  ldv_26676: 
#line 2577
  batch_obj = *(object_list + (unsigned long )(args->buffer_count - 1U));
#line 2578
  batch_obj->pending_read_domains = 8U;
#line 2579
  batch_obj->pending_write_domain = 0U;
#line 2587
  dev->invalidate_domains = 0U;
#line 2588
  dev->flush_domains = 0U;
#line 2590
  i = 0;
#line 2590
  goto ldv_26683;
  ldv_26682: 
#line 2591
  obj = *(object_list + (unsigned long )i);
#line 2594
  i915_gem_object_set_to_gpu_domain(obj, obj->pending_read_domains, obj->pending_write_domain);
#line 2590
  i = i + 1;
  ldv_26683: ;
#line 2590
  if ((uint32_t )i < args->buffer_count) {
#line 2591
    goto ldv_26682;
  } else {

  }

#line 2601
  if ((dev->invalidate_domains | dev->flush_domains) != 0U) {
#line 2608
    i915_gem_flush(dev, dev->invalidate_domains, dev->flush_domains);
#line 2611
    if (dev->flush_domains != 0U) {
#line 2612
      i915_add_request(dev, dev->flush_domains);
    } else {

    }
  } else {

  }
#line 2624
  exec_offset = (exec_list + (unsigned long )(args->buffer_count - 1U))->offset;
#line 2634
  ret = i915_dispatch_gem_execbuffer(dev, args, exec_offset);
#line 2635
  if (ret != 0) {
#line 2636
    printk("<3>[drm:%s] *ERROR* dispatch failed %d\n", "i915_gem_execbuffer", ret);
#line 2637
    goto err;
  } else {

  }
#line 2644
  flush_domains = i915_retire_commands(dev);
#line 2655
  seqno = i915_add_request(dev, flush_domains);
#line 2656
  tmp___2 = __builtin_expect(seqno == 0U, 0L);
#line 2656
  if (tmp___2 != 0L) {
#line 2656
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2656), "i" (24UL));
    ldv_26685: ;
#line 2656
    goto ldv_26685;
  } else {

  }
#line 2657
  i915_file_priv->mm.last_gem_seqno = seqno;
#line 2658
  i = 0;
#line 2658
  goto ldv_26688;
  ldv_26687: 
#line 2659
  obj___0 = *(object_list + (unsigned long )i);
#line 2661
  i915_gem_object_move_to_active(obj___0, seqno);
#line 2658
  i = i + 1;
  ldv_26688: ;
#line 2658
  if ((uint32_t )i < args->buffer_count) {
#line 2659
    goto ldv_26687;
  } else {

  }
#line 2673
  tmp___3 = copy_to_user((void *)args->buffers_ptr, (void const   *)exec_list, args->buffer_count * 32U);
#line 2673
  ret = (int )tmp___3;
#line 2677
  if (ret != 0) {
#line 2678
    printk("<3>[drm:%s] *ERROR* failed to copy %d exec entries back to user (%d)\n",
           "i915_gem_execbuffer", args->buffer_count, ret);
  } else {

  }
  err: ;
#line 2682
  if ((unsigned long )object_list != (unsigned long )((struct drm_gem_object **)0)) {
#line 2683
    i = 0;
#line 2683
    goto ldv_26691;
    ldv_26690: 
#line 2684
    i915_gem_object_unpin(*(object_list + (unsigned long )i));
#line 2683
    i = i + 1;
    ldv_26691: ;
#line 2683
    if (i < pinned) {
#line 2684
      goto ldv_26690;
    } else {

    }
#line 2686
    i = 0;
#line 2686
    goto ldv_26694;
    ldv_26693: 
#line 2687
    drm_gem_object_unreference(*(object_list + (unsigned long )i));
#line 2686
    i = i + 1;
    ldv_26694: ;
#line 2686
    if ((uint32_t )i < args->buffer_count) {
#line 2687
      goto ldv_26693;
    } else {

    }

  } else {

  }
#line 2689
  mutex_unlock(& dev->struct_mutex);
  pre_mutex_err: 
#line 2692
  drm_free((void *)object_list, (unsigned long )args->buffer_count * 8UL, 2);
#line 2694
  drm_free((void *)exec_list, (unsigned long )args->buffer_count * 32UL, 2);
#line 2697
  return (ret);
}
}
#line 2701 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  int tmp ;

  {
#line 2703
  dev = obj->dev;
#line 2704
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2708
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 2709
    ret = i915_gem_object_bind_to_gtt(obj, alignment);
#line 2710
    if (ret != 0) {
#line 2711
      printk("<3>[drm:%s] *ERROR* Failure to bind: %d", "i915_gem_object_pin", ret);
#line 2712
      return (ret);
    } else {

    }
  } else {

  }
#line 2715
  obj_priv->pin_count = obj_priv->pin_count + 1;
#line 2720
  if (obj_priv->pin_count == 1) {
#line 2721
    atomic_inc(& dev->pin_count);
#line 2722
    atomic_add((int )obj->size, & dev->pin_memory);
#line 2723
    if (obj_priv->active == 0 && (obj->write_domain & 4294967230U) == 0U) {
#line 2723
      tmp = list_empty((struct list_head  const  *)(& obj_priv->list));
#line 2723
      if (tmp == 0) {
#line 2727
        list_del_init(& obj_priv->list);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2731
  return (0);
}
}
#line 2735 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_object_unpin(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 2737
  dev = obj->dev;
#line 2738
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2739
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2742
  obj_priv->pin_count = obj_priv->pin_count - 1;
#line 2743
  tmp = __builtin_expect(obj_priv->pin_count < 0, 0L);
#line 2743
  if (tmp != 0L) {
#line 2743
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2743), "i" (24UL));
    ldv_26710: ;
#line 2743
    goto ldv_26710;
  } else {

  }
#line 2744
  tmp___0 = __builtin_expect((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0),
                             0L);
#line 2744
  if (tmp___0 != 0L) {
#line 2744
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2744), "i" (24UL));
    ldv_26711: ;
#line 2744
    goto ldv_26711;
  } else {

  }
#line 2750
  if (obj_priv->pin_count == 0) {
#line 2751
    if (obj_priv->active == 0 && (obj->write_domain & 4294967230U) == 0U) {
#line 2754
      list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
    } else {

    }
#line 2756
    atomic_dec(& dev->pin_count);
#line 2757
    atomic_sub((int )obj->size, & dev->pin_memory);
  } else {

  }
#line 2759
  return;
}
}
#line 2763 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2766
  args = (struct drm_i915_gem_pin *)data;
#line 2771
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2773
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2774
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2775
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2777
    mutex_unlock(& dev->struct_mutex);
#line 2778
    return (-9);
  } else {

  }
#line 2780
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2782
  if ((unsigned long )obj_priv->pin_filp != (unsigned long )((struct drm_file *)0) && (unsigned long )obj_priv->pin_filp != (unsigned long )file_priv) {
#line 2783
    printk("<3>[drm:%s] *ERROR* Already pinned in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2785
    mutex_unlock(& dev->struct_mutex);
#line 2786
    return (-22);
  } else {

  }
#line 2789
  obj_priv->user_pin_count = obj_priv->user_pin_count + (uint32_t )1;
#line 2790
  obj_priv->pin_filp = file_priv;
#line 2791
  if (obj_priv->user_pin_count == 1U) {
#line 2792
    ret = i915_gem_object_pin(obj, (uint32_t )args->alignment);
#line 2793
    if (ret != 0) {
#line 2794
      drm_gem_object_unreference(obj);
#line 2795
      mutex_unlock(& dev->struct_mutex);
#line 2796
      return (ret);
    } else {

    }
  } else {

  }
#line 2803
  i915_gem_object_flush_cpu_write_domain(obj);
#line 2804
  args->offset = (uint64_t )obj_priv->gtt_offset;
#line 2805
  drm_gem_object_unreference(obj);
#line 2806
  mutex_unlock(& dev->struct_mutex);
#line 2808
  return (0);
}
}
#line 2812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2815
  args = (struct drm_i915_gem_pin *)data;
#line 2819
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2821
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2822
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2823
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_unpin_ioctl(): %d\n", "i915_gem_unpin_ioctl",
           args->handle);
#line 2825
    mutex_unlock(& dev->struct_mutex);
#line 2826
    return (-9);
  } else {

  }
#line 2829
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2830
  if ((unsigned long )obj_priv->pin_filp != (unsigned long )file_priv) {
#line 2831
    printk("<3>[drm:%s] *ERROR* Not pinned by caller in i915_gem_pin_ioctl(): %d\n",
           "i915_gem_unpin_ioctl", args->handle);
#line 2833
    drm_gem_object_unreference(obj);
#line 2834
    mutex_unlock(& dev->struct_mutex);
#line 2835
    return (-22);
  } else {

  }
#line 2837
  obj_priv->user_pin_count = obj_priv->user_pin_count - (uint32_t )1;
#line 2838
  if (obj_priv->user_pin_count == 0U) {
#line 2839
    obj_priv->pin_filp = 0;
#line 2840
    i915_gem_object_unpin(obj);
  } else {

  }
#line 2843
  drm_gem_object_unreference(obj);
#line 2844
  mutex_unlock(& dev->struct_mutex);
#line 2845
  return (0);
}
}
#line 2849 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_busy *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2852
  args = (struct drm_i915_gem_busy *)data;
#line 2856
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2857
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2858
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2859
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_busy_ioctl(): %d\n", "i915_gem_busy_ioctl",
           args->handle);
#line 2861
    mutex_unlock(& dev->struct_mutex);
#line 2862
    return (-9);
  } else {

  }
#line 2865
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2873
  args->busy = (uint32_t )(obj_priv->active != 0 && obj_priv->last_rendering_seqno != 0U);
#line 2875
  drm_gem_object_unreference(obj);
#line 2876
  mutex_unlock(& dev->struct_mutex);
#line 2877
  return (0);
}
}
#line 2881 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 2884
  tmp = i915_gem_ring_throttle(dev, file_priv);
#line 2884
  return (tmp);
}
}
#line 2887 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_init_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  void *tmp ;

  {
#line 2891
  tmp = drm_calloc(1UL, 128UL, 2);
#line 2891
  obj_priv = (struct drm_i915_gem_object *)tmp;
#line 2892
  if ((unsigned long )obj_priv == (unsigned long )((struct drm_i915_gem_object *)0)) {
#line 2893
    return (-12);
  } else {

  }
#line 2901
  obj->write_domain = 1U;
#line 2902
  obj->read_domains = 1U;
#line 2904
  obj_priv->agp_type = 65536U;
#line 2906
  obj->driver_private = (void *)obj_priv;
#line 2907
  obj_priv->obj = obj;
#line 2908
  obj_priv->fence_reg = -1;
#line 2909
  INIT_LIST_HEAD(& obj_priv->list);
#line 2911
  return (0);
}
}
#line 2914 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_free_object(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_gem_mm *mm ;
  struct drm_map_list *list ;
  struct drm_map *map ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2916
  dev = obj->dev;
#line 2917
  mm = (struct drm_gem_mm *)dev->mm_private;
#line 2920
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2922
  goto ldv_26758;
  ldv_26757: 
#line 2923
  i915_gem_object_unpin(obj);
  ldv_26758: ;
#line 2922
  if (obj_priv->pin_count > 0) {
#line 2923
    goto ldv_26757;
  } else {

  }
#line 2925
  i915_gem_object_unbind(obj);
#line 2927
  list = & obj->map_list;
#line 2928
  drm_ht_remove_item(& mm->offset_hash, & list->hash);
#line 2930
  if ((unsigned long )list->file_offset_node != (unsigned long )((struct drm_mm_node *)0)) {
#line 2931
    drm_mm_put_block(list->file_offset_node);
#line 2932
    list->file_offset_node = 0;
  } else {

  }
#line 2935
  map = list->map;
#line 2936
  if ((unsigned long )map != (unsigned long )((struct drm_map *)0)) {
#line 2937
    drm_free((void *)map, 40UL, 2);
#line 2938
    list->map = 0;
  } else {

  }
#line 2941
  drm_free((void *)obj_priv->page_cpu_valid, 1UL, 2);
#line 2942
  drm_free(obj->driver_private, 1UL, 2);
#line 2943
  return;
}
}
#line 2947 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_from_list(struct drm_device *dev , struct list_head *head ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 2953
  goto ldv_26771;
  ldv_26770: 
#line 2954
  __mptr = (struct list_head  const  *)head->next;
#line 2954
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 2957
  obj = obj_priv->obj;
#line 2959
  if (obj_priv->pin_count != 0) {
#line 2960
    printk("<3>[drm:%s] *ERROR* Pinned object in unbind list\n", "i915_gem_evict_from_list");
#line 2961
    mutex_unlock(& dev->struct_mutex);
#line 2962
    return (-22);
  } else {

  }
#line 2965
  ret = i915_gem_object_unbind(obj);
#line 2966
  if (ret != 0) {
#line 2967
    printk("<3>[drm:%s] *ERROR* Error unbinding object in LeaveVT: %d\n", "i915_gem_evict_from_list",
           ret);
#line 2969
    mutex_unlock(& dev->struct_mutex);
#line 2970
    return (ret);
  } else {

  }
  ldv_26771: 
#line 2953
  tmp = list_empty((struct list_head  const  *)head);
#line 2953
  if (tmp == 0) {
#line 2954
    goto ldv_26770;
  } else {

  }

#line 2975
  return (0);
}
}
#line 2979 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_idle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  uint32_t cur_seqno ;
  uint32_t last_seqno ;
  int stuck ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int __ret_warn_on ;
  int tmp___1 ;
  long tmp___2 ;
  int __ret_warn_on___0 ;
  int tmp___3 ;
  long tmp___4 ;
  int __ret_warn_on___1 ;
  int tmp___5 ;
  long tmp___6 ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp___7 ;
  struct drm_i915_gem_object *obj_priv___0 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___8 ;
  int __ret_warn_on___2 ;
  int tmp___9 ;
  long tmp___10 ;

  {
#line 2981
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2985
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 2987
  if (dev_priv->mm.suspended != 0 || (unsigned long )dev_priv->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2988
    mutex_unlock(& dev->struct_mutex);
#line 2989
    return (0);
  } else {

  }
#line 2995
  dev_priv->mm.suspended = 1;
#line 2999
  mutex_unlock(& dev->struct_mutex);
#line 3000
  cancel_delayed_work_sync(& dev_priv->mm.retire_work);
#line 3001
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 3003
  i915_kernel_lost_context(dev);
#line 3007
  i915_gem_flush(dev, 4294967230U, 4294967230U);
#line 3009
  seqno = i915_add_request(dev, 4294967294U);
#line 3011
  if (seqno == 0U) {
#line 3012
    mutex_unlock(& dev->struct_mutex);
#line 3013
    return (-12);
  } else {

  }
#line 3016
  dev_priv->mm.waiting_gem_seqno = seqno;
#line 3017
  last_seqno = 0U;
#line 3018
  stuck = 0;
  ldv_26784: 
#line 3020
  cur_seqno = i915_get_gem_seqno(dev);
#line 3021
  tmp = i915_seqno_passed(cur_seqno, seqno);
#line 3021
  if (tmp != 0) {
#line 3022
    goto ldv_26782;
  } else {

  }
#line 3023
  if (last_seqno == cur_seqno) {
#line 3024
    tmp___0 = stuck;
#line 3024
    stuck = stuck + 1;
#line 3024
    if (tmp___0 > 100) {
#line 3025
      printk("<3>[drm:%s] *ERROR* hardware wedged\n", "i915_gem_idle");
#line 3026
      dev_priv->mm.wedged = 1;
#line 3027
      __wake_up(& dev_priv->irq_queue, 1U, 1, 0);
#line 3028
      goto ldv_26782;
    } else {

    }
  } else {

  }
#line 3031
  msleep(10U);
#line 3032
  last_seqno = cur_seqno;
#line 3033
  goto ldv_26784;
  ldv_26782: 
#line 3034
  dev_priv->mm.waiting_gem_seqno = 0U;
#line 3036
  i915_gem_retire_requests(dev);
#line 3038
  if (dev_priv->mm.wedged == 0) {
#line 3042
    tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 3042
    __ret_warn_on = tmp___1 == 0;
#line 3042
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 3042
    if (tmp___2 != 0L) {
#line 3042
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       3042);
    } else {

    }
#line 3042
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 3043
    tmp___3 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 3043
    __ret_warn_on___0 = tmp___3 == 0;
#line 3043
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 3043
    if (tmp___4 != 0L) {
#line 3043
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       3043);
    } else {

    }
#line 3043
    __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 3047
    tmp___5 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 3047
    __ret_warn_on___1 = tmp___5 == 0;
#line 3047
    tmp___6 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
#line 3047
    if (tmp___6 != 0L) {
#line 3047
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       3047);
    } else {

    }
#line 3047
    __builtin_expect(__ret_warn_on___1 != 0, 0L);
  } else {

  }
#line 3055
  goto ldv_26795;
  ldv_26794: 
#line 3058
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 3058
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 3061
  (obj_priv->obj)->write_domain = (obj_priv->obj)->write_domain & 65U;
#line 3062
  i915_gem_object_move_to_inactive(obj_priv->obj);
  ldv_26795: 
#line 3055
  tmp___7 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 3055
  if (tmp___7 == 0) {
#line 3056
    goto ldv_26794;
  } else {

  }

#line 3065
  goto ldv_26801;
  ldv_26800: 
#line 3068
  __mptr___0 = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 3068
  obj_priv___0 = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
#line 3071
  (obj_priv___0->obj)->write_domain = (obj_priv___0->obj)->write_domain & 65U;
#line 3072
  i915_gem_object_move_to_inactive(obj_priv___0->obj);
  ldv_26801: 
#line 3065
  tmp___8 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 3065
  if (tmp___8 == 0) {
#line 3066
    goto ldv_26800;
  } else {

  }
#line 3077
  ret = i915_gem_evict_from_list(dev, & dev_priv->mm.inactive_list);
#line 3078
  tmp___9 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 3078
  __ret_warn_on___2 = tmp___9 == 0;
#line 3078
  tmp___10 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 3078
  if (tmp___10 != 0L) {
#line 3078
    warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                     3078);
  } else {

  }
#line 3078
  __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 3079
  if (ret != 0) {
#line 3080
    mutex_unlock(& dev->struct_mutex);
#line 3081
    return (ret);
  } else {

  }
#line 3084
  i915_gem_cleanup_ringbuffer(dev);
#line 3085
  mutex_unlock(& dev->struct_mutex);
#line 3087
  return (0);
}
}
#line 3091 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_init_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 3093
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3101
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && (((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810) && dev->pci_device != 10818)) {
#line 3102
    return (0);
  } else {

  }
#line 3104
  obj = drm_gem_object_alloc(dev, 4096UL);
#line 3105
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 3106
    printk("<3>[drm:%s] *ERROR* Failed to allocate status page\n", "i915_gem_init_hws");
#line 3107
    return (-12);
  } else {

  }
#line 3109
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 3110
  obj_priv->agp_type = 65537U;
#line 3112
  ret = i915_gem_object_pin(obj, 4096U);
#line 3113
  if (ret != 0) {
#line 3114
    drm_gem_object_unreference(obj);
#line 3115
    return (ret);
  } else {

  }
#line 3118
  dev_priv->status_gfx_addr = obj_priv->gtt_offset;
#line 3120
  dev_priv->hw_status_page = kmap(*(obj_priv->page_list));
#line 3121
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 3122
    printk("<3>[drm:%s] *ERROR* Failed to map status page.\n", "i915_gem_init_hws");
#line 3123
    memset((void *)(& dev_priv->hws_map), 0, 40UL);
#line 3124
    drm_gem_object_unreference(obj);
#line 3125
    return (-22);
  } else {

  }
#line 3127
  dev_priv->hws_obj = obj;
#line 3128
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 3129
  writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
#line 3130
  readl((void const volatile   *)dev_priv->regs + 8320U);
#line 3131
  if (drm_debug != 0U) {
#line 3131
    printk("<7>[drm:%s] hws offset: 0x%08x\n", "i915_gem_init_hws", dev_priv->status_gfx_addr);
  } else {

  }
#line 3133
  return (0);
}
}
#line 3137 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_init_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  drm_i915_ring_buffer_t *ring ;
  int ret ;
  u32 head ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  unsigned int tmp___10 ;
  unsigned int tmp___11 ;
  unsigned int tmp___12 ;
  unsigned int tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;

  {
#line 3139
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3142
  ring = & dev_priv->ring;
#line 3146
  ret = i915_gem_init_hws(dev);
#line 3147
  if (ret != 0) {
#line 3148
    return (ret);
  } else {

  }
#line 3150
  obj = drm_gem_object_alloc(dev, 131072UL);
#line 3151
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 3152
    printk("<3>[drm:%s] *ERROR* Failed to allocate ringbuffer\n", "i915_gem_init_ringbuffer");
#line 3153
    return (-12);
  } else {

  }
#line 3155
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 3157
  ret = i915_gem_object_pin(obj, 4096U);
#line 3158
  if (ret != 0) {
#line 3159
    drm_gem_object_unreference(obj);
#line 3160
    return (ret);
  } else {

  }
#line 3164
  ring->Size = obj->size;
#line 3165
  ring->tail_mask = (int )((unsigned int )obj->size - 1U);
#line 3167
  ring->map.offset = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
#line 3168
  ring->map.size = obj->size;
#line 3169
  ring->map.type = _DRM_FRAME_BUFFER;
#line 3170
  ring->map.flags = 0;
#line 3171
  ring->map.mtrr = 0;
#line 3173
  drm_core_ioremap_wc(& ring->map, dev);
#line 3174
  if ((unsigned long )ring->map.handle == (unsigned long )((void *)0)) {
#line 3175
    printk("<3>[drm:%s] *ERROR* Failed to map ringbuffer.\n", "i915_gem_init_ringbuffer");
#line 3176
    memset((void *)(& dev_priv->ring), 0, 88UL);
#line 3177
    drm_gem_object_unreference(obj);
#line 3178
    return (-22);
  } else {

  }
#line 3180
  ring->ring_obj = obj;
#line 3181
  ring->virtual_start = (u8 *)ring->map.handle;
#line 3184
  writel(0U, (void volatile   *)dev_priv->regs + 8252U);
#line 3185
  writel(0U, (void volatile   *)dev_priv->regs + 8240U);
#line 3186
  writel(0U, (void volatile   *)dev_priv->regs + 8244U);
#line 3189
  writel(obj_priv->gtt_offset, (void volatile   *)dev_priv->regs + 8248U);
#line 3190
  tmp = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3190
  head = tmp & 2097148U;
#line 3193
  if (head != 0U) {
#line 3194
    tmp___0 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 3194
    tmp___1 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 3194
    tmp___2 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3194
    tmp___3 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 3194
    printk("<3>[drm:%s] *ERROR* Ring head not reset to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___3, tmp___2, tmp___1, tmp___0);
#line 3200
    writel(0U, (void volatile   *)dev_priv->regs + 8244U);
#line 3202
    tmp___4 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 3202
    tmp___5 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 3202
    tmp___6 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3202
    tmp___7 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 3202
    printk("<3>[drm:%s] *ERROR* Ring head forced to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___7, tmp___6, tmp___5, tmp___4);
  } else {

  }
#line 3210
  writel((((unsigned int )obj->size - 4096U) & 2093056U) | 1U, (void volatile   *)dev_priv->regs + 8252U);
#line 3215
  tmp___8 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3215
  head = tmp___8 & 2097148U;
#line 3218
  if (head != 0U) {
#line 3219
    tmp___9 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 3219
    tmp___10 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 3219
    tmp___11 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3219
    tmp___12 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 3219
    printk("<3>[drm:%s] *ERROR* Ring initialization failed ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___12, tmp___11, tmp___10, tmp___9);
#line 3225
    return (-5);
  } else {

  }
#line 3229
  tmp___15 = drm_core_check_feature(dev, 8192);
#line 3229
  if (tmp___15 == 0) {
#line 3230
    i915_kernel_lost_context(dev);
  } else {
#line 3232
    tmp___13 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 3232
    ring->head = (int )tmp___13 & 2097148;
#line 3233
    tmp___14 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 3233
    ring->tail = (int )tmp___14 & 2097144;
#line 3234
    ring->space = ring->head + (-8 - ring->tail);
#line 3235
    if (ring->space < 0) {
#line 3236
      ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
    } else {

    }
  }
#line 3239
  return (0);
}
}
#line 3243 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 3245
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3247
  if ((unsigned long )dev_priv->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 3248
    return;
  } else {

  }
#line 3250
  drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 3252
  i915_gem_object_unpin(dev_priv->ring.ring_obj);
#line 3253
  drm_gem_object_unreference(dev_priv->ring.ring_obj);
#line 3254
  dev_priv->ring.ring_obj = 0;
#line 3255
  memset((void *)(& dev_priv->ring), 0, 88UL);
#line 3257
  if ((unsigned long )dev_priv->hws_obj != (unsigned long )((struct drm_gem_object *)0)) {
#line 3258
    obj = dev_priv->hws_obj;
#line 3259
    obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 3262
    i915_gem_object_unpin(obj);
#line 3263
    drm_gem_object_unreference(obj);
#line 3264
    dev_priv->hws_obj = 0;
#line 3265
    memset((void *)(& dev_priv->hws_map), 0, 40UL);
#line 3266
    dev_priv->hw_status_page = 0;
#line 3269
    writel(536866816U, (void volatile   *)dev_priv->regs + 8320U);
  } else {

  }
#line 3271
  return;
}
}
#line 3274 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;

  {
#line 3277
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3280
  tmp = drm_core_check_feature(dev, 8192);
#line 3280
  if (tmp != 0) {
#line 3281
    return (0);
  } else {

  }
#line 3283
  if (dev_priv->mm.wedged != 0) {
#line 3284
    printk("<3>[drm:%s] *ERROR* Reenabling wedged hardware, good luck\n", "i915_gem_entervt_ioctl");
#line 3285
    dev_priv->mm.wedged = 0;
  } else {

  }
#line 3288
  ret = i915_gem_init_ringbuffer(dev);
#line 3289
  if (ret != 0) {
#line 3290
    return (ret);
  } else {

  }
#line 3292
  dev_priv->mm.gtt_mapping = io_mapping_create_wc((dev->agp)->base, (dev->agp)->agp_info.aper_size * 1048576UL);
#line 3296
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 3297
  tmp___0 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 3297
  tmp___1 = __builtin_expect(tmp___0 == 0, 0L);
#line 3297
  if (tmp___1 != 0L) {
#line 3297
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (3297), "i" (24UL));
    ldv_26837: ;
#line 3297
    goto ldv_26837;
  } else {

  }
#line 3298
  tmp___2 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 3298
  tmp___3 = __builtin_expect(tmp___2 == 0, 0L);
#line 3298
  if (tmp___3 != 0L) {
#line 3298
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (3298), "i" (24UL));
    ldv_26838: ;
#line 3298
    goto ldv_26838;
  } else {

  }
#line 3299
  tmp___4 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 3299
  tmp___5 = __builtin_expect(tmp___4 == 0, 0L);
#line 3299
  if (tmp___5 != 0L) {
#line 3299
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (3299), "i" (24UL));
    ldv_26839: ;
#line 3299
    goto ldv_26839;
  } else {

  }
#line 3300
  tmp___6 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 3300
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3300
  if (tmp___7 != 0L) {
#line 3300
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (3300), "i" (24UL));
    ldv_26840: ;
#line 3300
    goto ldv_26840;
  } else {

  }
#line 3301
  dev_priv->mm.suspended = 0;
#line 3302
  mutex_unlock(& dev->struct_mutex);
#line 3304
  drm_irq_install(dev);
#line 3306
  return (0);
}
}
#line 3310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;

  {
#line 3313
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3316
  tmp = drm_core_check_feature(dev, 8192);
#line 3316
  if (tmp != 0) {
#line 3317
    return (0);
  } else {

  }
#line 3319
  ret = i915_gem_idle(dev);
#line 3320
  drm_irq_uninstall(dev);
#line 3322
  io_mapping_free(dev_priv->mm.gtt_mapping);
#line 3323
  return (ret);
}
}
#line 3327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_lastclose(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 3331
  ret = i915_gem_idle(dev);
#line 3332
  if (ret != 0) {
#line 3333
    printk("<3>[drm:%s] *ERROR* failed to idle hardware: %d\n", "i915_gem_lastclose",
           ret);
  } else {

  }
#line 3334
  return;
}
}
#line 3337 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_load(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 3339
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 3341
  INIT_LIST_HEAD(& dev_priv->mm.active_list);
#line 3342
  INIT_LIST_HEAD(& dev_priv->mm.flushing_list);
#line 3343
  INIT_LIST_HEAD(& dev_priv->mm.inactive_list);
#line 3344
  INIT_LIST_HEAD(& dev_priv->mm.request_list);
#line 3345
  __constr_expr_0.counter = 0L;
#line 3345
  dev_priv->mm.retire_work.work.data = __constr_expr_0;
#line 3345
  lockdep_init_map(& dev_priv->mm.retire_work.work.lockdep_map, "&(&dev_priv->mm.retire_work)->work",
                   & __key, 0);
#line 3345
  INIT_LIST_HEAD(& dev_priv->mm.retire_work.work.entry);
#line 3345
  dev_priv->mm.retire_work.work.func = & i915_gem_retire_work_handler;
#line 3345
  init_timer(& dev_priv->mm.retire_work.timer);
#line 3347
  dev_priv->mm.next_gem_seqno = 1U;
#line 3350
  dev_priv->fence_reg_start = 3;
#line 3352
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 3353
    dev_priv->num_fence_regs = 16;
  } else {
#line 3355
    dev_priv->num_fence_regs = 8;
  }
#line 3357
  i915_gem_detect_bit_6_swizzle(dev);
#line 3358
  return;
}
}
#line 3360 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_201(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3365
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 3367
  __ldv_spin_lock(ldv_func_arg1);
#line 3368
  return;
}
}
#line 3370 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3375
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 3377
  __ldv_spin_unlock(ldv_func_arg1);
#line 3378
  return;
}
}
#line 3380 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int ldv___ldv_spin_trylock_203(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 3385
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 3385
  ldv_func_res = tmp;
#line 3387
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 3387
  return (tmp___0);
#line 3389
  return (ldv_func_res);
}
}
#line 3392 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_204(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3397
  ldv_spin_lock_dcache_lock();
#line 3399
  __ldv_spin_lock(ldv_func_arg1);
#line 3400
  return;
}
}
#line 3402 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_205(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3407
  ldv_spin_lock_d_lock_of_dentry();
#line 3409
  __ldv_spin_lock(ldv_func_arg1);
#line 3410
  return;
}
}
#line 3412 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_206(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3417
  ldv_spin_unlock_d_lock_of_dentry();
#line 3419
  __ldv_spin_unlock(ldv_func_arg1);
#line 3420
  return;
}
}
#line 3422 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_207(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3427
  ldv_spin_unlock_dcache_lock();
#line 3429
  __ldv_spin_unlock(ldv_func_arg1);
#line 3430
  return;
}
}
#line 3432 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_208(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3437
  ldv_spin_lock_d_lock_of_dentry();
#line 3439
  __ldv_spin_lock(ldv_func_arg1);
#line 3440
  return;
}
}
#line 3442 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_209(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3447
  ldv_spin_unlock_d_lock_of_dentry();
#line 3449
  __ldv_spin_unlock(ldv_func_arg1);
#line 3450
  return;
}
}
#line 3452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_210(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3457
  ldv_spin_lock_i_lock_of_inode();
#line 3459
  __ldv_spin_lock(ldv_func_arg1);
#line 3460
  return;
}
}
#line 3462 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_211(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3467
  ldv_spin_unlock_i_lock_of_inode();
#line 3469
  __ldv_spin_unlock(ldv_func_arg1);
#line 3470
  return;
}
}
#line 3472 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_212(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3477
  ldv_spin_lock_d_lock_of_dentry();
#line 3479
  __ldv_spin_lock(ldv_func_arg1);
#line 3480
  return;
}
}
#line 3482 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_213(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3487
  ldv_spin_unlock_d_lock_of_dentry();
#line 3489
  __ldv_spin_unlock(ldv_func_arg1);
#line 3490
  return;
}
}
#line 3492 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_214(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3497
  ldv_spin_lock_siglock_of_sighand_struct();
#line 3499
  __ldv_spin_lock(ldv_func_arg1);
#line 3500
  return;
}
}
#line 3502 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_215(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3507
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 3509
  __ldv_spin_unlock(ldv_func_arg1);
#line 3510
  return;
}
}
#line 3512 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_lock_216(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3517
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 3519
  __ldv_spin_lock(ldv_func_arg1);
#line 3520
  return;
}
}
#line 3522 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_217(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3527
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 3529
  __ldv_spin_unlock(ldv_func_arg1);
#line 3530
  return;
}
}
#line 3532 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv___ldv_spin_unlock_218(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3537
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 3539
  __ldv_spin_unlock(ldv_func_arg1);
#line 3540
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_237(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_240(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_241(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_244(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_246(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_248(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_250(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_252(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_238(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_242(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_243(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_245(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_247(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_249(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_251(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_253(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_254(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_239(spinlock_t *ldv_func_arg1 ) ;
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_237(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 105
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 107
  __ldv_spin_lock(ldv_func_arg1);
#line 108
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_238(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 115
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 117
  __ldv_spin_unlock(ldv_func_arg1);
#line 118
  return;
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
int ldv___ldv_spin_trylock_239(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 125
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 125
  ldv_func_res = tmp;
#line 127
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 127
  return (tmp___0);
#line 129
  return (ldv_func_res);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_240(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 137
  ldv_spin_lock_dcache_lock();
#line 139
  __ldv_spin_lock(ldv_func_arg1);
#line 140
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_241(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 147
  ldv_spin_lock_d_lock_of_dentry();
#line 149
  __ldv_spin_lock(ldv_func_arg1);
#line 150
  return;
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_242(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 157
  ldv_spin_unlock_d_lock_of_dentry();
#line 159
  __ldv_spin_unlock(ldv_func_arg1);
#line 160
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_243(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 167
  ldv_spin_unlock_dcache_lock();
#line 169
  __ldv_spin_unlock(ldv_func_arg1);
#line 170
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_244(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 177
  ldv_spin_lock_d_lock_of_dentry();
#line 179
  __ldv_spin_lock(ldv_func_arg1);
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_245(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 187
  ldv_spin_unlock_d_lock_of_dentry();
#line 189
  __ldv_spin_unlock(ldv_func_arg1);
#line 190
  return;
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_246(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 197
  ldv_spin_lock_i_lock_of_inode();
#line 199
  __ldv_spin_lock(ldv_func_arg1);
#line 200
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_247(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 207
  ldv_spin_unlock_i_lock_of_inode();
#line 209
  __ldv_spin_unlock(ldv_func_arg1);
#line 210
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_248(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 217
  ldv_spin_lock_d_lock_of_dentry();
#line 219
  __ldv_spin_lock(ldv_func_arg1);
#line 220
  return;
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_249(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 227
  ldv_spin_unlock_d_lock_of_dentry();
#line 229
  __ldv_spin_unlock(ldv_func_arg1);
#line 230
  return;
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_250(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 237
  ldv_spin_lock_siglock_of_sighand_struct();
#line 239
  __ldv_spin_lock(ldv_func_arg1);
#line 240
  return;
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_251(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 247
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 249
  __ldv_spin_unlock(ldv_func_arg1);
#line 250
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_lock_252(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 257
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 259
  __ldv_spin_lock(ldv_func_arg1);
#line 260
  return;
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_253(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 267
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 269
  __ldv_spin_unlock(ldv_func_arg1);
#line 270
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_debug.c.prepared"
void ldv___ldv_spin_unlock_254(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 277
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 279
  __ldv_spin_unlock(ldv_func_arg1);
#line 280
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 163 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_273(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_276(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_277(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_280(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_282(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_284(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_286(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_288(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_274(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_278(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_279(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_281(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_283(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_285(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_287(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_289(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_290(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_275(spinlock_t *ldv_func_arg1 ) ;
#line 115 "include/linux/proc_fs.h"
extern struct proc_dir_entry *create_proc_entry(char const   * , mode_t  , struct proc_dir_entry * ) ;
#line 121
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_active_info(char *buf , char **start , off_t offset , int request ,
                                int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 104
  minor = (struct drm_minor *)data;
#line 105
  dev = minor->dev;
#line 106
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 108
  len = 0;
#line 110
  if ((unsigned long )offset > 4016UL) {
#line 111
    *eof = 1;
#line 112
    return (0);
  } else {

  }
#line 115
  *start = buf + (unsigned long )offset;
#line 116
  *eof = 0;
#line 117
  tmp = sprintf(buf + (unsigned long )len, "Active:\n");
#line 117
  len = tmp + len;
#line 117
  if ((unsigned int )len > 4016U) {
#line 117
    *eof = 1;
#line 117
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 118
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 118
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 118
  goto ldv_25665;
  ldv_25664: 
#line 121
  obj = obj_priv->obj;
#line 122
  if (obj->name != 0) {
#line 123
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 123
    len = tmp___0 + len;
#line 123
    if ((unsigned int )len > 4016U) {
#line 123
      *eof = 1;
#line 123
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 128
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 128
    len = tmp___1 + len;
#line 128
    if ((unsigned int )len > 4016U) {
#line 128
      *eof = 1;
#line 128
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 118
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 118
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_25665: 
#line 118
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 118
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.active_list)) {
#line 119
    goto ldv_25664;
  } else {

  }

#line 134
  if ((off_t )len > (off_t )request + offset) {
#line 135
    return (request);
  } else {

  }
#line 136
  *eof = 1;
#line 137
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_flushing_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 143
  minor = (struct drm_minor *)data;
#line 144
  dev = minor->dev;
#line 145
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 147
  len = 0;
#line 149
  if ((unsigned long )offset > 4016UL) {
#line 150
    *eof = 1;
#line 151
    return (0);
  } else {

  }
#line 154
  *start = buf + (unsigned long )offset;
#line 155
  *eof = 0;
#line 156
  tmp = sprintf(buf + (unsigned long )len, "Flushing:\n");
#line 156
  len = tmp + len;
#line 156
  if ((unsigned int )len > 4016U) {
#line 156
    *eof = 1;
#line 156
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 157
  __mptr = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 157
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 157
  goto ldv_25686;
  ldv_25685: 
#line 160
  obj = obj_priv->obj;
#line 161
  if (obj->name != 0) {
#line 162
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 162
    len = tmp___0 + len;
#line 162
    if ((unsigned int )len > 4016U) {
#line 162
      *eof = 1;
#line 162
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 167
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 167
    len = tmp___1 + len;
#line 167
    if ((unsigned int )len > 4016U) {
#line 167
      *eof = 1;
#line 167
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 157
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 157
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_25686: 
#line 157
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 157
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {
#line 158
    goto ldv_25685;
  } else {

  }

#line 172
  if ((off_t )len > (off_t )request + offset) {
#line 173
    return (request);
  } else {

  }
#line 174
  *eof = 1;
#line 175
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_inactive_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 181
  minor = (struct drm_minor *)data;
#line 182
  dev = minor->dev;
#line 183
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 185
  len = 0;
#line 187
  if ((unsigned long )offset > 4016UL) {
#line 188
    *eof = 1;
#line 189
    return (0);
  } else {

  }
#line 192
  *start = buf + (unsigned long )offset;
#line 193
  *eof = 0;
#line 194
  tmp = sprintf(buf + (unsigned long )len, "Inactive:\n");
#line 194
  len = tmp + len;
#line 194
  if ((unsigned int )len > 4016U) {
#line 194
    *eof = 1;
#line 194
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 195
  __mptr = (struct list_head  const  *)dev_priv->mm.inactive_list.next;
#line 195
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 195
  goto ldv_25707;
  ldv_25706: 
#line 198
  obj = obj_priv->obj;
#line 199
  if (obj->name != 0) {
#line 200
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 200
    len = tmp___0 + len;
#line 200
    if ((unsigned int )len > 4016U) {
#line 200
      *eof = 1;
#line 200
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 205
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 205
    len = tmp___1 + len;
#line 205
    if ((unsigned int )len > 4016U) {
#line 205
      *eof = 1;
#line 205
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 195
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 195
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_25707: 
#line 195
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 195
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.inactive_list)) {
#line 196
    goto ldv_25706;
  } else {

  }

#line 210
  if ((off_t )len > (off_t )request + offset) {
#line 211
    return (request);
  } else {

  }
#line 212
  *eof = 1;
#line 213
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_request_info(char *buf , char **start , off_t offset , int request ,
                                 int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *gem_request ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 219
  minor = (struct drm_minor *)data;
#line 220
  dev = minor->dev;
#line 221
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 223
  len = 0;
#line 225
  if ((unsigned long )offset > 4016UL) {
#line 226
    *eof = 1;
#line 227
    return (0);
  } else {

  }
#line 230
  *start = buf + (unsigned long )offset;
#line 231
  *eof = 0;
#line 232
  tmp = sprintf(buf + (unsigned long )len, "Request:\n");
#line 232
  len = tmp + len;
#line 232
  if ((unsigned int )len > 4016U) {
#line 232
    *eof = 1;
#line 232
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 233
  __mptr = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 233
  gem_request = (struct drm_i915_gem_request *)__mptr + 0xfffffffffffffff0UL;
#line 233
  goto ldv_25727;
  ldv_25726: 
#line 236
  tmp___0 = sprintf(buf + (unsigned long )len, "    %d @ %d\n", gem_request->seqno,
                    (int )((unsigned int )jiffies - (unsigned int )gem_request->emitted_jiffies));
#line 236
  len = tmp___0 + len;
#line 236
  if ((unsigned int )len > 4016U) {
#line 236
    *eof = 1;
#line 236
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 233
  __mptr___0 = (struct list_head  const  *)gem_request->list.next;
#line 233
  gem_request = (struct drm_i915_gem_request *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_25727: 
#line 233
  __builtin_prefetch((void const   *)gem_request->list.next);
#line 233
  if ((unsigned long )(& gem_request->list) != (unsigned long )(& dev_priv->mm.request_list)) {
#line 234
    goto ldv_25726;
  } else {

  }

#line 240
  if ((off_t )len > (off_t )request + offset) {
#line 241
    return (request);
  } else {

  }
#line 242
  *eof = 1;
#line 243
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_seqno_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  uint32_t tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 249
  minor = (struct drm_minor *)data;
#line 250
  dev = minor->dev;
#line 251
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 252
  len = 0;
#line 254
  if ((unsigned long )offset > 4016UL) {
#line 255
    *eof = 1;
#line 256
    return (0);
  } else {

  }
#line 259
  *start = buf + (unsigned long )offset;
#line 260
  *eof = 0;
#line 261
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 262
    tmp = i915_get_gem_seqno(dev);
#line 262
    tmp___0 = sprintf(buf + (unsigned long )len, "Current sequence: %d\n", tmp);
#line 262
    len = tmp___0 + len;
#line 262
    if ((unsigned int )len > 4016U) {
#line 262
      *eof = 1;
#line 262
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 265
    tmp___1 = sprintf(buf + (unsigned long )len, "Current sequence: hws uninitialized\n");
#line 265
    len = tmp___1 + len;
#line 265
    if ((unsigned int )len > 4016U) {
#line 265
      *eof = 1;
#line 265
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 267
  tmp___2 = sprintf(buf + (unsigned long )len, "Waiter sequence:  %d\n", dev_priv->mm.waiting_gem_seqno);
#line 267
  len = tmp___2 + len;
#line 267
  if ((unsigned int )len > 4016U) {
#line 267
    *eof = 1;
#line 267
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 269
  tmp___3 = sprintf(buf + (unsigned long )len, "IRQ sequence:     %d\n", dev_priv->mm.irq_gem_seqno);
#line 269
  len = tmp___3 + len;
#line 269
  if ((unsigned int )len > 4016U) {
#line 269
    *eof = 1;
#line 269
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 270
  if ((off_t )len > (off_t )request + offset) {
#line 271
    return (request);
  } else {

  }
#line 272
  *eof = 1;
#line 273
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_interrupt_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  int tmp___6 ;
  unsigned int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  uint32_t tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 280
  minor = (struct drm_minor *)data;
#line 281
  dev = minor->dev;
#line 282
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 283
  len = 0;
#line 285
  if ((unsigned long )offset > 4016UL) {
#line 286
    *eof = 1;
#line 287
    return (0);
  } else {

  }
#line 290
  *start = buf + (unsigned long )offset;
#line 291
  *eof = 0;
#line 292
  tmp = readl((void const volatile   *)dev_priv->regs + 8352U);
#line 292
  tmp___0 = sprintf(buf + (unsigned long )len, "Interrupt enable:    %08x\n", tmp);
#line 292
  len = tmp___0 + len;
#line 292
  if ((unsigned int )len > 4016U) {
#line 292
    *eof = 1;
#line 292
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 294
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 294
  tmp___2 = sprintf(buf + (unsigned long )len, "Interrupt identity:  %08x\n", tmp___1);
#line 294
  len = tmp___2 + len;
#line 294
  if ((unsigned int )len > 4016U) {
#line 294
    *eof = 1;
#line 294
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 296
  tmp___3 = readl((void const volatile   *)dev_priv->regs + 8360U);
#line 296
  tmp___4 = sprintf(buf + (unsigned long )len, "Interrupt mask:      %08x\n", tmp___3);
#line 296
  len = tmp___4 + len;
#line 296
  if ((unsigned int )len > 4016U) {
#line 296
    *eof = 1;
#line 296
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 298
  tmp___5 = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 298
  tmp___6 = sprintf(buf + (unsigned long )len, "Pipe A stat:         %08x\n", tmp___5);
#line 298
  len = tmp___6 + len;
#line 298
  if ((unsigned int )len > 4016U) {
#line 298
    *eof = 1;
#line 298
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 300
  tmp___7 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 300
  tmp___8 = sprintf(buf + (unsigned long )len, "Pipe B stat:         %08x\n", tmp___7);
#line 300
  len = tmp___8 + len;
#line 300
  if ((unsigned int )len > 4016U) {
#line 300
    *eof = 1;
#line 300
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 302
  tmp___9 = sprintf(buf + (unsigned long )len, "Interrupts received: %d\n", dev_priv->irq_received.counter);
#line 302
  len = tmp___9 + len;
#line 302
  if ((unsigned int )len > 4016U) {
#line 302
    *eof = 1;
#line 302
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 304
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 305
    tmp___10 = i915_get_gem_seqno(dev);
#line 305
    tmp___11 = sprintf(buf + (unsigned long )len, "Current sequence:    %d\n", tmp___10);
#line 305
    len = tmp___11 + len;
#line 305
    if ((unsigned int )len > 4016U) {
#line 305
      *eof = 1;
#line 305
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 308
    tmp___12 = sprintf(buf + (unsigned long )len, "Current sequence:    hws uninitialized\n");
#line 308
    len = tmp___12 + len;
#line 308
    if ((unsigned int )len > 4016U) {
#line 308
      *eof = 1;
#line 308
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 310
  tmp___13 = sprintf(buf + (unsigned long )len, "Waiter sequence:     %d\n", dev_priv->mm.waiting_gem_seqno);
#line 310
  len = tmp___13 + len;
#line 310
  if ((unsigned int )len > 4016U) {
#line 310
    *eof = 1;
#line 310
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 312
  tmp___14 = sprintf(buf + (unsigned long )len, "IRQ sequence:        %d\n", dev_priv->mm.irq_gem_seqno);
#line 312
  len = tmp___14 + len;
#line 312
  if ((unsigned int )len > 4016U) {
#line 312
    *eof = 1;
#line 312
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 314
  if ((off_t )len > (off_t )request + offset) {
#line 315
    return (request);
  } else {

  }
#line 316
  *eof = 1;
#line 317
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_hws_info(char *buf , char **start , off_t offset , int request , int *eof ,
                         void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  int i ;
  u32 volatile   *hws ;
  int tmp ;

  {
#line 323
  minor = (struct drm_minor *)data;
#line 324
  dev = minor->dev;
#line 325
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 326
  len = 0;
#line 329
  if ((unsigned long )offset > 4016UL) {
#line 330
    *eof = 1;
#line 331
    return (0);
  } else {

  }
#line 334
  hws = (u32 volatile   *)dev_priv->hw_status_page;
#line 335
  if ((unsigned long )hws == (unsigned long )((u32 volatile   *)0)) {
#line 336
    *eof = 1;
#line 337
    return (0);
  } else {

  }
#line 340
  *start = buf + (unsigned long )offset;
#line 341
  *eof = 0;
#line 342
  i = 0;
#line 342
  goto ldv_25768;
  ldv_25767: 
#line 343
  tmp = sprintf(buf + (unsigned long )len, "0x%08x: 0x%08x 0x%08x 0x%08x 0x%08x\n",
                i * 4, *(hws + (unsigned long )i), *(hws + ((unsigned long )i + 1UL)),
                *(hws + ((unsigned long )i + 2UL)), *(hws + ((unsigned long )i + 3UL)));
#line 343
  len = tmp + len;
#line 343
  if ((unsigned int )len > 4016U) {
#line 343
    *eof = 1;
#line 343
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 342
  i = i + 4;
  ldv_25768: ;
#line 342
  if ((unsigned int )i <= 255U) {
#line 343
    goto ldv_25767;
  } else {

  }

#line 347
  if ((off_t )len > (off_t )request + offset) {
#line 348
    return (request);
  } else {

  }
#line 349
  *eof = 1;
#line 350
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static struct drm_proc_list i915_gem_proc_list[7U]  = {      {"i915_gem_active", & i915_gem_active_info}, 
        {"i915_gem_flushing", & i915_gem_flushing_info}, 
        {"i915_gem_inactive", & i915_gem_inactive_info}, 
        {"i915_gem_request", & i915_gem_request_info}, 
        {"i915_gem_seqno", & i915_gem_seqno_info}, 
        {"i915_gem_interrupt", & i915_interrupt_info}, 
        {"i915_gem_hws", & i915_hws_info}};
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
int i915_gem_proc_init(struct drm_minor *minor ) 
{ 
  struct proc_dir_entry *ent ;
  int i ;
  int j ;

  {
#line 375
  i = 0;
#line 375
  goto ldv_25791;
  ldv_25790: 
#line 376
  ent = create_proc_entry(i915_gem_proc_list[i].name, 33060U, minor->dev_root);
#line 378
  if ((unsigned long )ent == (unsigned long )((struct proc_dir_entry *)0)) {
#line 379
    printk("<3>[drm:%s] *ERROR* Cannot create /proc/dri/.../%s\n", "i915_gem_proc_init",
           i915_gem_proc_list[i].name);
#line 381
    j = 0;
#line 381
    goto ldv_25788;
    ldv_25787: 
#line 382
    remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 381
    j = j + 1;
    ldv_25788: ;
#line 381
    if (j < i) {
#line 382
      goto ldv_25787;
    } else {

    }

#line 384
    return (-1);
  } else {

  }
#line 386
  ent->read_proc = i915_gem_proc_list[i].f;
#line 387
  ent->data = (void *)minor;
#line 375
  i = i + 1;
  ldv_25791: ;
#line 375
  if ((unsigned int )i <= 6U) {
#line 376
    goto ldv_25790;
  } else {

  }

#line 389
  return (0);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void i915_gem_proc_cleanup(struct drm_minor *minor ) 
{ 
  int i ;

  {
#line 396
  if ((unsigned long )minor->dev_root == (unsigned long )((struct proc_dir_entry *)0)) {
#line 397
    return;
  } else {

  }
#line 399
  i = 0;
#line 399
  goto ldv_25798;
  ldv_25797: 
#line 400
  remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 399
  i = i + 1;
  ldv_25798: ;
#line 399
  if ((unsigned int )i <= 6U) {
#line 400
    goto ldv_25797;
  } else {

  }

#line 404
  return;
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_273(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 408
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 410
  __ldv_spin_lock(ldv_func_arg1);
#line 411
  return;
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_274(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 418
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 420
  __ldv_spin_unlock(ldv_func_arg1);
#line 421
  return;
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
int ldv___ldv_spin_trylock_275(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 428
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 428
  ldv_func_res = tmp;
#line 430
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 430
  return (tmp___0);
#line 432
  return (ldv_func_res);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_276(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 440
  ldv_spin_lock_dcache_lock();
#line 442
  __ldv_spin_lock(ldv_func_arg1);
#line 443
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_277(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 450
  ldv_spin_lock_d_lock_of_dentry();
#line 452
  __ldv_spin_lock(ldv_func_arg1);
#line 453
  return;
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_278(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 460
  ldv_spin_unlock_d_lock_of_dentry();
#line 462
  __ldv_spin_unlock(ldv_func_arg1);
#line 463
  return;
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_279(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 470
  ldv_spin_unlock_dcache_lock();
#line 472
  __ldv_spin_unlock(ldv_func_arg1);
#line 473
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_280(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 480
  ldv_spin_lock_d_lock_of_dentry();
#line 482
  __ldv_spin_lock(ldv_func_arg1);
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_281(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 490
  ldv_spin_unlock_d_lock_of_dentry();
#line 492
  __ldv_spin_unlock(ldv_func_arg1);
#line 493
  return;
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_282(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 500
  ldv_spin_lock_i_lock_of_inode();
#line 502
  __ldv_spin_lock(ldv_func_arg1);
#line 503
  return;
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_283(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 510
  ldv_spin_unlock_i_lock_of_inode();
#line 512
  __ldv_spin_unlock(ldv_func_arg1);
#line 513
  return;
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_284(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 520
  ldv_spin_lock_d_lock_of_dentry();
#line 522
  __ldv_spin_lock(ldv_func_arg1);
#line 523
  return;
}
}
#line 525 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_285(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 530
  ldv_spin_unlock_d_lock_of_dentry();
#line 532
  __ldv_spin_unlock(ldv_func_arg1);
#line 533
  return;
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_286(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 540
  ldv_spin_lock_siglock_of_sighand_struct();
#line 542
  __ldv_spin_lock(ldv_func_arg1);
#line 543
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_287(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 550
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 552
  __ldv_spin_unlock(ldv_func_arg1);
#line 553
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_lock_288(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 560
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 562
  __ldv_spin_lock(ldv_func_arg1);
#line 563
  return;
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_289(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 570
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 572
  __ldv_spin_unlock(ldv_func_arg1);
#line 573
  return;
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void ldv___ldv_spin_unlock_290(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 580
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 582
  __ldv_spin_unlock(ldv_func_arg1);
#line 583
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_309(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_312(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_313(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_316(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_318(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_320(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_322(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_324(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_310(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_314(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_315(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_317(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_319(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_321(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_323(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_325(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_326(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_311(spinlock_t *ldv_func_arg1 ) ;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile   *addr ) 
{ 
  unsigned short ret ;

  {
#line 19
  __asm__  volatile   ("movw %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
#line 19
  return (ret);
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t swizzle_x ;
  uint32_t swizzle_y ;
  uint32_t dcc ;
  unsigned short tmp ;
  unsigned short tmp___0 ;

  {
#line 156
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 157
  swizzle_x = 5U;
#line 158
  swizzle_y = 5U;
#line 160
  if ((((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) {
#line 164
    swizzle_x = 0U;
#line 165
    swizzle_y = 0U;
  } else
#line 166
  if ((((((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 177
    dcc = readl((void const volatile   *)dev_priv->regs + 66048U);
#line 178
    switch (dcc & 3U) {
    case 0U: ;
    case 1U: 
#line 181
    swizzle_x = 0U;
#line 182
    swizzle_y = 0U;
#line 183
    goto ldv_25655;
    case 2U: ;
#line 185
    if (((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || (dcc & 1024U) != 0U) {
#line 187
      swizzle_x = 2U;
#line 188
      swizzle_y = 1U;
    } else
#line 189
    if ((dev->pci_device == 10754 || dev->pci_device == 10818) && (dcc & 512U) == 0U) {
#line 194
      swizzle_x = 4U;
#line 195
      swizzle_y = 3U;
    } else {
#line 198
      swizzle_x = 5U;
#line 199
      swizzle_y = 5U;
    }
#line 201
    goto ldv_25655;
    }
    ldv_25655: ;
#line 203
    if (dcc == 4294967295U) {
#line 204
      printk("<3>[drm:%s] *ERROR* Couldn\'t read from MCHBAR.  Disabling tiling.\n",
             "i915_gem_detect_bit_6_swizzle");
#line 206
      swizzle_x = 5U;
#line 207
      swizzle_y = 5U;
    } else {

    }
  } else {
#line 230
    tmp = readw((void const volatile   *)dev_priv->regs + 66054U);
#line 230
    tmp___0 = readw((void const volatile   *)dev_priv->regs + 67078U);
#line 230
    if ((int )tmp != (int )tmp___0) {
#line 231
      swizzle_x = 0U;
#line 232
      swizzle_y = 0U;
    } else {
#line 234
      swizzle_x = 2U;
#line 235
      swizzle_y = 1U;
    }
  }
#line 239
  dev_priv->mm.bit_6_swizzle_x = swizzle_x;
#line 240
  dev_priv->mm.bit_6_swizzle_y = swizzle_y;
#line 241
  return;
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 251
  args = (struct drm_i915_gem_set_tiling *)data;
#line 252
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 256
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 257
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 258
    return (-22);
  } else {

  }
#line 259
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 261
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 263
  if (args->tiling_mode == 0U) {
#line 264
    obj_priv->tiling_mode = 0U;
#line 265
    args->swizzle_mode = 0U;
  } else {
#line 267
    if (args->tiling_mode == 1U) {
#line 268
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
    } else {
#line 270
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
    }
#line 272
    if (args->swizzle_mode == 5U) {
#line 273
      args->tiling_mode = 0U;
#line 274
      args->swizzle_mode = 0U;
    } else {

    }
  }
#line 277
  obj_priv->tiling_mode = args->tiling_mode;
#line 278
  obj_priv->stride = args->stride;
#line 280
  mutex_unlock(& dev->struct_mutex);
#line 282
  drm_gem_object_unreference(obj);
#line 284
  return (0);
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 294
  args = (struct drm_i915_gem_get_tiling *)data;
#line 295
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 299
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 300
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 301
    return (-22);
  } else {

  }
#line 302
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 304
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 306
  args->tiling_mode = obj_priv->tiling_mode;
#line 307
  switch (obj_priv->tiling_mode) {
  case (uint32_t )1: 
#line 309
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
#line 310
  goto ldv_25677;
  case (uint32_t )2: 
#line 312
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
#line 313
  goto ldv_25677;
  case (uint32_t )0: 
#line 315
  args->swizzle_mode = 0U;
#line 316
  goto ldv_25677;
  default: 
#line 318
  printk("<3>[drm:%s] *ERROR* unknown tiling mode\n", "i915_gem_get_tiling");
  }
  ldv_25677: 
#line 321
  mutex_unlock(& dev->struct_mutex);
#line 323
  drm_gem_object_unreference(obj);
#line 325
  return (0);
}
}
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_309(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 333
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 335
  __ldv_spin_lock(ldv_func_arg1);
#line 336
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_310(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 343
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 345
  __ldv_spin_unlock(ldv_func_arg1);
#line 346
  return;
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
int ldv___ldv_spin_trylock_311(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 353
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 353
  ldv_func_res = tmp;
#line 355
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 355
  return (tmp___0);
#line 357
  return (ldv_func_res);
}
}
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_312(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 365
  ldv_spin_lock_dcache_lock();
#line 367
  __ldv_spin_lock(ldv_func_arg1);
#line 368
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_313(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 375
  ldv_spin_lock_d_lock_of_dentry();
#line 377
  __ldv_spin_lock(ldv_func_arg1);
#line 378
  return;
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_314(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 385
  ldv_spin_unlock_d_lock_of_dentry();
#line 387
  __ldv_spin_unlock(ldv_func_arg1);
#line 388
  return;
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_315(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 395
  ldv_spin_unlock_dcache_lock();
#line 397
  __ldv_spin_unlock(ldv_func_arg1);
#line 398
  return;
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_316(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 405
  ldv_spin_lock_d_lock_of_dentry();
#line 407
  __ldv_spin_lock(ldv_func_arg1);
#line 408
  return;
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_317(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 415
  ldv_spin_unlock_d_lock_of_dentry();
#line 417
  __ldv_spin_unlock(ldv_func_arg1);
#line 418
  return;
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_318(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 425
  ldv_spin_lock_i_lock_of_inode();
#line 427
  __ldv_spin_lock(ldv_func_arg1);
#line 428
  return;
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_319(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 435
  ldv_spin_unlock_i_lock_of_inode();
#line 437
  __ldv_spin_unlock(ldv_func_arg1);
#line 438
  return;
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_320(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 445
  ldv_spin_lock_d_lock_of_dentry();
#line 447
  __ldv_spin_lock(ldv_func_arg1);
#line 448
  return;
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_321(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 455
  ldv_spin_unlock_d_lock_of_dentry();
#line 457
  __ldv_spin_unlock(ldv_func_arg1);
#line 458
  return;
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_322(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 465
  ldv_spin_lock_siglock_of_sighand_struct();
#line 467
  __ldv_spin_lock(ldv_func_arg1);
#line 468
  return;
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_323(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 475
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 477
  __ldv_spin_unlock(ldv_func_arg1);
#line 478
  return;
}
}
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_lock_324(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 485
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 487
  __ldv_spin_lock(ldv_func_arg1);
#line 488
  return;
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_325(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 495
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 497
  __ldv_spin_unlock(ldv_func_arg1);
#line 498
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv___ldv_spin_unlock_326(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 505
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 507
  __ldv_spin_unlock(ldv_func_arg1);
#line 508
  return;
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x ) 
{ 
  int r ;

  {
#line 385
  __asm__  ("bsfl %1,%0\n\tcmovzl %2,%0": "=r" (r): "rm" (x), "r" (-1));
#line 394
  return (r + 1);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_345(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_348(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_350(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_353(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_354(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_357(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_359(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_361(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_346(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_349(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_351(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_352(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_355(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_356(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_358(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_360(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_362(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_347(spinlock_t *ldv_func_arg1 ) ;
#line 303 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 305
  tmp = kmalloc(size, flags | 32768U);
#line 305
  return (tmp);
}
}
#line 586 "include/drm/drm_crtc.h"
extern void drm_crtc_init(struct drm_device * , struct drm_crtc * , struct drm_crtc_funcs  const  * ) ;
#line 589
extern void drm_crtc_cleanup(struct drm_crtc * ) ;
#line 621
extern void drm_mode_debug_printmodeline(struct drm_display_mode * ) ;
#line 622
extern void drm_mode_config_init(struct drm_device * ) ;
#line 623
extern void drm_mode_config_cleanup(struct drm_device * ) ;
#line 624
extern void drm_mode_set_name(struct drm_display_mode * ) ;
#line 646
extern void drm_mode_set_crtcinfo(struct drm_display_mode * , int  ) ;
#line 660
extern int drm_framebuffer_init(struct drm_device * , struct drm_framebuffer * , struct drm_framebuffer_funcs  const  * ) ;
#line 663
extern void drm_framebuffer_cleanup(struct drm_framebuffer * ) ;
#line 687
extern bool drm_mode_crtc_set_gamma_size(struct drm_crtc * , int  ) ;
#line 1216 "include/drm/drmP.h"
extern void drm_vblank_pre_modeset(struct drm_device * , int  ) ;
#line 1217
extern void drm_vblank_post_modeset(struct drm_device * , int  ) ;
#line 90 "include/drm/drm_crtc_helper.h"
extern void drm_helper_disable_unused_functions(struct drm_device * ) ;
#line 93
extern int drm_crtc_helper_set_config(struct drm_mode_set * ) ;
#line 94
extern bool drm_crtc_helper_set_mode(struct drm_crtc * , struct drm_display_mode * ,
                                     int  , int  ) ;
#line 97
extern bool drm_helper_crtc_in_use(struct drm_crtc * ) ;
#line 99
extern int drm_helper_mode_fill_fb_struct(struct drm_framebuffer * , struct drm_mode_fb_cmd * ) ;
#line 102 "include/drm/drm_crtc_helper.h"
__inline static void drm_crtc_helper_add(struct drm_crtc *crtc , struct drm_crtc_helper_funcs  const  *funcs ) 
{ 


  {
#line 105
  crtc->helper_private = (void *)funcs;
#line 106
  return;
}
}
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
void intel_crt_init(struct drm_device *dev ) ;
#line 111
void intel_sdvo_init(struct drm_device *dev , int output_device ) ;
#line 112
void intel_dvo_init(struct drm_device *dev ) ;
#line 113
void intel_tv_init(struct drm_device *dev ) ;
#line 114
void intel_lvds_init(struct drm_device *dev ) ;
#line 116
void intel_crtc_load_lut(struct drm_crtc *crtc ) ;
#line 117
void intel_encoder_prepare(struct drm_encoder *encoder ) ;
#line 118
void intel_encoder_commit(struct drm_encoder *encoder ) ;
#line 120
struct drm_encoder *intel_best_encoder(struct drm_connector *connector ) ;
#line 122
struct drm_display_mode *intel_crtc_mode_get(struct drm_device *dev , struct drm_crtc *crtc ) ;
#line 124
void intel_wait_for_vblank(struct drm_device *dev ) ;
#line 125
struct drm_crtc *intel_get_crtc_from_pipe(struct drm_device *dev , int pipe ) ;
#line 126
struct drm_crtc *intel_get_load_detect_pipe(struct intel_output *intel_output , struct drm_display_mode *mode ,
                                            int *dpms_mode ) ;
#line 129
void intel_release_load_detect_pipe(struct intel_output *intel_output , int dpms_mode ) ;
#line 135
int intelfb_probe(struct drm_device *dev ) ;
#line 136
int intelfb_remove(struct drm_device *dev , struct drm_framebuffer *fb ) ;
#line 139
void intel_crtc_fb_gamma_set(struct drm_crtc *crtc , u16 red , u16 green , u16 blue ,
                             int regno ) ;
#line 142
int intel_framebuffer_create(struct drm_device *dev , struct drm_mode_fb_cmd *mode_cmd ,
                             struct drm_framebuffer **fb , struct drm_gem_object *obj ) ;
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
bool intel_pipe_has_type(struct drm_crtc *crtc , int type ) ;
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static intel_limit_t const   intel_limits[4U]  = {      {{25000, 350000}, {930000, 1400000}, {3, 16}, {96, 140}, {18, 26}, {6, 16}, {4,
                                                                                  128},
      {2, 33}, {165000, 4, 2}}, 
        {{25000, 350000}, {930000, 1400000}, {3, 16}, {96, 140}, {18, 26}, {6, 16}, {4,
                                                                                  128},
      {1, 6}, {165000, 14, 14}}, 
        {{20000, 400000}, {1400000, 2800000}, {3, 8}, {70, 120}, {10, 20}, {5, 9}, {5,
                                                                                 80},
      {1, 8}, {200000, 10, 5}}, 
        {{20000, 400000}, {1400000, 2800000}, {3, 8}, {70, 120}, {10, 20}, {5, 9}, {7,
                                                                                 98},
      {1, 8}, {112000, 14, 7}}};
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static intel_limit_t const   *intel_limit(struct drm_crtc *crtc ) 
{ 
  struct drm_device *dev ;
  intel_limit_t const   *limit ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 243
  dev = crtc->dev;
#line 246
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 247
    tmp = intel_pipe_has_type(crtc, 4);
#line 247
    if ((int )tmp) {
#line 248
      limit = (intel_limit_t const   *)(& intel_limits) + 3UL;
    } else {
#line 250
      limit = (intel_limit_t const   *)(& intel_limits) + 2UL;
    }
  } else {
#line 252
    tmp___0 = intel_pipe_has_type(crtc, 4);
#line 252
    if ((int )tmp___0) {
#line 253
      limit = (intel_limit_t const   *)(& intel_limits) + 1UL;
    } else {
#line 255
      limit = (intel_limit_t const   *)(& intel_limits);
    }
  }
#line 257
  return (limit);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void i8xx_clock(int refclk , intel_clock_t *clock ) 
{ 


  {
#line 264
  clock->m = (clock->m1 * 5 + 10) + (clock->m2 + 2);
#line 265
  clock->p = clock->p1 * clock->p2;
#line 266
  clock->vco = (clock->m * refclk) / (clock->n + 2);
#line 267
  clock->dot = clock->vco / clock->p;
#line 268
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void i9xx_clock(int refclk , intel_clock_t *clock ) 
{ 


  {
#line 274
  clock->m = (clock->m1 * 5 + 10) + (clock->m2 + 2);
#line 275
  clock->p = clock->p1 * clock->p2;
#line 276
  clock->vco = (clock->m * refclk) / (clock->n + 2);
#line 277
  clock->dot = clock->vco / clock->p;
#line 278
  return;
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_clock(struct drm_device *dev , int refclk , intel_clock_t *clock ) 
{ 


  {
#line 283
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 284
    i9xx_clock(refclk, clock);
  } else {
#line 286
    i8xx_clock(refclk, clock);
  }
#line 287
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
bool intel_pipe_has_type(struct drm_crtc *crtc , int type ) 
{ 
  struct drm_device *dev ;
  struct drm_mode_config *mode_config ;
  struct drm_connector *l_entry ;
  struct list_head  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 294
  dev = crtc->dev;
#line 295
  mode_config = & dev->mode_config;
#line 298
  __mptr = (struct list_head  const  *)mode_config->connector_list.next;
#line 298
  l_entry = (struct drm_connector *)__mptr + 0xfffffffffffffc18UL;
#line 298
  goto ldv_25923;
  ldv_25922: ;
#line 299
  if ((unsigned long )l_entry->encoder != (unsigned long )((struct drm_encoder *)0) && (unsigned long )(l_entry->encoder)->crtc == (unsigned long )crtc) {
#line 301
    __mptr___0 = (struct drm_connector  const  *)l_entry;
#line 301
    intel_output = (struct intel_output *)__mptr___0;
#line 302
    if (intel_output->type == type) {
#line 303
      return (1);
    } else {

    }
  } else {

  }
#line 298
  __mptr___1 = (struct list_head  const  *)l_entry->head.next;
#line 298
  l_entry = (struct drm_connector *)__mptr___1 + 0xfffffffffffffc18UL;
  ldv_25923: 
#line 298
  __builtin_prefetch((void const   *)l_entry->head.next);
#line 298
  if ((unsigned long )(& l_entry->head) != (unsigned long )(& mode_config->connector_list)) {
#line 299
    goto ldv_25922;
  } else {

  }

#line 306
  return (0);
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static bool intel_PLL_is_valid(struct drm_crtc *crtc , intel_clock_t *clock ) 
{ 
  intel_limit_t const   *limit ;
  intel_limit_t const   *tmp ;

  {
#line 317
  tmp = intel_limit(crtc);
#line 317
  limit = tmp;
#line 319
  if (clock->p1 < (int )limit->p1.min || (int )limit->p1.max < clock->p1) {
#line 320
    return (0);
  } else {

  }
#line 321
  if (clock->p < (int )limit->p.min || (int )limit->p.max < clock->p) {
#line 322
    return (0);
  } else {

  }
#line 323
  if (clock->m2 < (int )limit->m2.min || (int )limit->m2.max < clock->m2) {
#line 324
    return (0);
  } else {

  }
#line 325
  if (clock->m1 < (int )limit->m1.min || (int )limit->m1.max < clock->m1) {
#line 326
    return (0);
  } else {

  }
#line 327
  if (clock->m1 <= clock->m2) {
#line 328
    return (0);
  } else {

  }
#line 329
  if (clock->m < (int )limit->m.min || (int )limit->m.max < clock->m) {
#line 330
    return (0);
  } else {

  }
#line 331
  if (clock->n < (int )limit->n.min || (int )limit->n.max < clock->n) {
#line 332
    return (0);
  } else {

  }
#line 333
  if (clock->vco < (int )limit->vco.min || (int )limit->vco.max < clock->vco) {
#line 334
    return (0);
  } else {

  }
#line 338
  if (clock->dot < (int )limit->dot.min || (int )limit->dot.max < clock->dot) {
#line 339
    return (0);
  } else {

  }
#line 341
  return (1);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static bool intel_find_best_PLL(struct drm_crtc *crtc , int target , int refclk ,
                                intel_clock_t *best_clock ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  intel_clock_t clock ;
  intel_limit_t const   *limit ;
  intel_limit_t const   *tmp ;
  int err ;
  unsigned int tmp___0 ;
  bool tmp___1 ;
  unsigned int tmp___2 ;
  int this_err ;
  bool tmp___3 ;
  int tmp___4 ;
  int __x ;

  {
#line 352
  dev = crtc->dev;
#line 353
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 355
  tmp = intel_limit(crtc);
#line 355
  limit = tmp;
#line 356
  err = target;
#line 358
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 358
    tmp___1 = intel_pipe_has_type(crtc, 4);
#line 358
    if ((int )tmp___1) {
#line 358
      tmp___2 = readl((void const volatile   *)dev_priv->regs + 397696U);
#line 358
      if ((int )tmp___2 < 0) {
#line 366
        tmp___0 = readl((void const volatile   *)dev_priv->regs + 397696U);
#line 366
        if ((tmp___0 & 48U) == 48U) {
#line 368
          clock.p2 = limit->p2.p2_fast;
        } else {
#line 370
          clock.p2 = limit->p2.p2_slow;
        }
      } else {
#line 358
        goto _L___0;
      }
    } else {
#line 358
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
#line 372
  if ((int )limit->p2.dot_limit > target) {
#line 373
    clock.p2 = limit->p2.p2_slow;
  } else {
#line 375
    clock.p2 = limit->p2.p2_fast;
  }
#line 378
  memset((void *)best_clock, 0, 36UL);
#line 380
  clock.m1 = limit->m1.min;
#line 380
  goto ldv_25955;
  ldv_25954: 
#line 381
  clock.m2 = limit->m2.min;
#line 381
  goto ldv_25952;
  ldv_25951: 
#line 383
  clock.n = limit->n.min;
#line 383
  goto ldv_25949;
  ldv_25948: 
#line 385
  clock.p1 = limit->p1.min;
#line 385
  goto ldv_25946;
  ldv_25945: 
#line 389
  intel_clock(dev, refclk, & clock);
#line 391
  tmp___3 = intel_PLL_is_valid(crtc, & clock);
#line 391
  if (tmp___3) {
#line 391
    tmp___4 = 0;
  } else {
#line 391
    tmp___4 = 1;
  }
#line 391
  if (tmp___4) {
#line 392
    goto ldv_25942;
  } else {

  }
#line 394
  __x = clock.dot - target;
#line 394
  this_err = __x < 0 ? - __x : __x;
#line 395
  if (this_err < err) {
#line 396
    *best_clock = clock;
#line 397
    err = this_err;
  } else {

  }
  ldv_25942: 
#line 386
  clock.p1 = clock.p1 + 1;
  ldv_25946: ;
#line 385
  if (clock.p1 <= (int )limit->p1.max) {
#line 387
    goto ldv_25945;
  } else {

  }
#line 384
  clock.n = clock.n + 1;
  ldv_25949: ;
#line 383
  if (clock.n <= (int )limit->n.max) {
#line 384
    goto ldv_25948;
  } else {

  }
#line 382
  clock.m2 = clock.m2 + 1;
  ldv_25952: ;
#line 381
  if (clock.m2 < clock.m1 && clock.m2 <= (int )limit->m2.max) {
#line 383
    goto ldv_25951;
  } else {

  }
#line 380
  clock.m1 = clock.m1 + 1;
  ldv_25955: ;
#line 380
  if (clock.m1 <= (int )limit->m1.max) {
#line 381
    goto ldv_25954;
  } else {

  }

#line 404
  return (err != target);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_wait_for_vblank(struct drm_device *dev ) 
{ 


  {
#line 411
  __const_udelay(85900000UL);
#line 412
  return;
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_pipe_set_base(struct drm_crtc *crtc , int x , int y ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_i915_master_private *master_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_framebuffer *intel_fb ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_gem_object *obj ;
  int pipe ;
  unsigned long Start ;
  unsigned long Offset ;
  int dspbase ;
  int dspsurf ;
  int dspstride ;
  int dspcntr_reg ;
  u32 dspcntr ;
  struct drm_framebuffer  const  *__mptr___0 ;

  {
#line 417
  dev = crtc->dev;
#line 418
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 420
  __mptr = (struct drm_crtc  const  *)crtc;
#line 420
  intel_crtc = (struct intel_crtc *)__mptr;
#line 424
  pipe = intel_crtc->pipe;
#line 426
  dspbase = pipe == 0 ? 459140 : 463236;
#line 427
  dspsurf = pipe == 0 ? 459164 : 463260;
#line 428
  dspstride = pipe == 0 ? 459144 : 463240;
#line 429
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 433
  if ((unsigned long )crtc->fb == (unsigned long )((struct drm_framebuffer *)0)) {
#line 434
    if (drm_debug != 0U) {
#line 434
      printk("<7>[drm:%s] No FB bound\n", "intel_pipe_set_base");
    } else {

    }
#line 435
    return;
  } else {

  }
#line 438
  __mptr___0 = (struct drm_framebuffer  const  *)crtc->fb;
#line 438
  intel_fb = (struct intel_framebuffer *)__mptr___0;
#line 440
  obj = intel_fb->obj;
#line 441
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 443
  Start = (unsigned long )obj_priv->gtt_offset;
#line 444
  Offset = (unsigned long )((crtc->fb)->pitch * (unsigned int )y + (unsigned int )(((crtc->fb)->bits_per_pixel / 8) * x));
#line 446
  writel((crtc->fb)->pitch, (void volatile   *)dev_priv->regs + (unsigned long )dspstride);
#line 448
  dspcntr = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 449
  switch ((crtc->fb)->bits_per_pixel) {
  case 8: 
#line 451
  dspcntr = dspcntr | 134217728U;
#line 452
  goto ldv_25986;
  case 16: ;
#line 454
  if ((crtc->fb)->depth == 15U) {
#line 455
    dspcntr = dspcntr | 268435456U;
  } else {
#line 457
    dspcntr = dspcntr | 335544320U;
  }
#line 458
  goto ldv_25986;
  case 24: ;
  case 32: 
#line 461
  dspcntr = dspcntr | 402653184U;
#line 462
  goto ldv_25986;
  default: 
#line 464
  printk("<3>[drm:%s] *ERROR* Unknown color depth\n", "intel_pipe_set_base");
#line 465
  return;
  }
  ldv_25986: 
#line 467
  writel(dspcntr, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 469
  if (drm_debug != 0U) {
#line 469
    printk("<7>[drm:%s] Writing base %08lX %08lX %d %d\n", "intel_pipe_set_base",
           Start, Offset, x, y);
  } else {

  }
#line 470
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 471
    writel((unsigned int )Offset, (void volatile   *)dev_priv->regs + (unsigned long )dspbase);
#line 472
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase);
#line 473
    writel((unsigned int )Start, (void volatile   *)dev_priv->regs + (unsigned long )dspsurf);
#line 474
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dspsurf);
  } else {
#line 476
    writel((unsigned int )Start + (unsigned int )Offset, (void volatile   *)dev_priv->regs + (unsigned long )dspbase);
#line 477
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase);
  }
#line 481
  if ((unsigned long )(dev->primary)->master == (unsigned long )((struct drm_master *)0)) {
#line 482
    return;
  } else {

  }
#line 484
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 485
  if ((unsigned long )master_priv->sarea_priv == (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 486
    return;
  } else {

  }
#line 488
  switch (pipe) {
  case 0: 
#line 490
  (master_priv->sarea_priv)->pipeA_x = x;
#line 491
  (master_priv->sarea_priv)->pipeA_y = y;
#line 492
  goto ldv_25992;
  case 1: 
#line 494
  (master_priv->sarea_priv)->pipeB_x = x;
#line 495
  (master_priv->sarea_priv)->pipeB_y = y;
#line 496
  goto ldv_25992;
  default: 
#line 498
  printk("<3>[drm:%s] *ERROR* Can\'t update pipe %d in SAREA\n", "intel_pipe_set_base",
         pipe);
#line 499
  goto ldv_25992;
  }
  ldv_25992: ;
#line 502
  return;
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_dpms(struct drm_crtc *crtc , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_master_private *master_priv ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  int dpll_reg ;
  int dspcntr_reg ;
  int dspbase_reg ;
  int pipeconf_reg ;
  u32 temp ;
  bool enabled ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 513
  dev = crtc->dev;
#line 515
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 516
  __mptr = (struct drm_crtc  const  *)crtc;
#line 516
  intel_crtc = (struct intel_crtc *)__mptr;
#line 517
  pipe = intel_crtc->pipe;
#line 518
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 519
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 520
  dspbase_reg = pipe == 0 ? 459140 : 463236;
#line 521
  pipeconf_reg = pipe == 0 ? 458760 : 462856;
#line 528
  switch (mode) {
  case 0: ;
  case 1: ;
  case 2: 
#line 533
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 534
  if ((int )temp >= 0) {
#line 535
    writel(temp, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 536
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 538
    __const_udelay(644250UL);
#line 539
    writel(temp | 2147483648U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 540
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 542
    __const_udelay(644250UL);
#line 543
    writel(temp | 2147483648U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 544
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 546
    __const_udelay(644250UL);
  } else {

  }
#line 550
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 551
  if ((int )temp >= 0) {
#line 552
    writel(temp | 2147483648U, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
  } else {

  }
#line 555
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 556
  if ((int )temp >= 0) {
#line 557
    writel(temp | 2147483648U, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 559
    tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 559
    writel(tmp, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
  } else {

  }
#line 562
  intel_crtc_load_lut(crtc);
#line 566
  goto ldv_26015;
  case 3: 
#line 572
  writel(2147483648U, (void volatile   *)dev_priv->regs + 463872U);
#line 575
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 576
  if ((int )temp < 0) {
#line 577
    writel(temp & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 579
    tmp___0 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 579
    writel(tmp___0, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 580
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
  } else {

  }
#line 583
  if ((((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) {
#line 585
    intel_wait_for_vblank(dev);
  } else {

  }
#line 589
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 590
  if ((int )temp < 0) {
#line 591
    writel(temp & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 592
    readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
  } else {

  }
#line 596
  intel_wait_for_vblank(dev);
#line 598
  temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 599
  if ((int )temp < 0) {
#line 600
    writel(temp & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 601
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
  } else {

  }
#line 605
  __const_udelay(644250UL);
#line 606
  goto ldv_26015;
  }
  ldv_26015: ;
#line 609
  if ((unsigned long )(dev->primary)->master == (unsigned long )((struct drm_master *)0)) {
#line 610
    return;
  } else {

  }
#line 612
  master_priv = (struct drm_i915_master_private *)((dev->primary)->master)->driver_priv;
#line 613
  if ((unsigned long )master_priv->sarea_priv == (unsigned long )((struct _drm_i915_sarea *)0)) {
#line 614
    return;
  } else {

  }
#line 616
  enabled = (bool )((int )crtc->enabled && mode != 3);
#line 618
  switch (pipe) {
  case 0: 
#line 620
  (master_priv->sarea_priv)->pipeA_w = (int )enabled ? crtc->mode.hdisplay : 0;
#line 621
  (master_priv->sarea_priv)->pipeA_h = (int )enabled ? crtc->mode.vdisplay : 0;
#line 622
  goto ldv_26018;
  case 1: 
#line 624
  (master_priv->sarea_priv)->pipeB_w = (int )enabled ? crtc->mode.hdisplay : 0;
#line 625
  (master_priv->sarea_priv)->pipeB_h = (int )enabled ? crtc->mode.vdisplay : 0;
#line 626
  goto ldv_26018;
  default: 
#line 628
  printk("<3>[drm:%s] *ERROR* Can\'t update pipe %d in SAREA\n", "intel_crtc_dpms",
         pipe);
#line 629
  goto ldv_26018;
  }
  ldv_26018: 
#line 632
  intel_crtc->dpms_mode = mode;
#line 633
  return;
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_prepare(struct drm_crtc *crtc ) 
{ 
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 637
  crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 638
  (*(crtc_funcs->dpms))(crtc, 3);
#line 639
  return;
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_commit(struct drm_crtc *crtc ) 
{ 
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 643
  crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 644
  (*(crtc_funcs->dpms))(crtc, 0);
#line 645
  return;
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_encoder_prepare(struct drm_encoder *encoder ) 
{ 
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 649
  encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 651
  (*(encoder_funcs->dpms))(encoder, 3);
#line 652
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_encoder_commit(struct drm_encoder *encoder ) 
{ 
  struct drm_encoder_helper_funcs *encoder_funcs ;

  {
#line 656
  encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 658
  (*(encoder_funcs->dpms))(encoder, 0);
#line 659
  return;
}
}
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static bool intel_crtc_mode_fixup(struct drm_crtc *crtc , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 665
  return (1);
}
}
#line 670 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_get_core_clock_speed(struct drm_device *dev ) 
{ 
  u16 gcfgc ;
  u16 hpllcc ;

  {
#line 676
  if (dev->pci_device == 10098) {
#line 677
    return (400000);
  } else
#line 678
  if (dev->pci_device == 9602 || dev->pci_device == 9610) {
#line 679
    return (333000);
  } else
#line 680
  if ((dev->pci_device == 10146 || dev->pci_device == 10158) || dev->pci_device == 9570) {
#line 681
    return (200000);
  } else
#line 682
  if (dev->pci_device == 9618) {
#line 683
    gcfgc = 0U;
#line 685
    pci_read_config_word(dev->pdev, 240, & gcfgc);
#line 687
    if (((int )gcfgc & 128) != 0) {
#line 688
      return (133000);
    } else {
#line 690
      switch ((int )gcfgc & 112) {
      case 64: ;
#line 692
      return (333000);
      default: ;
      case 0: ;
#line 695
      return (190000);
      }
    }
  } else
#line 698
  if (dev->pci_device == 9586) {
#line 699
    return (266000);
  } else
#line 700
  if (dev->pci_device == 13698) {
#line 701
    hpllcc = 0U;
#line 705
    switch ((int )hpllcc & 3) {
    case 0: ;
    case 1: ;
#line 708
    return (200000);
    case 3: ;
#line 710
    return (250000);
    case 2: ;
#line 712
    return (133000);
    }
  } else {
#line 715
    return (133000);
  }
#line 717
  return (0);
}
}
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_panel_fitter_pipe(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 pfit_control ;

  {
#line 727
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 731
  if (dev->pci_device == 13687) {
#line 732
    return (-1);
  } else {

  }
#line 734
  pfit_control = readl((void const volatile   *)dev_priv->regs + 397872U);
#line 737
  if ((int )pfit_control >= 0) {
#line 738
    return (-1);
  } else {

  }
#line 741
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 742
    return ((int )(pfit_control >> 29) & 3);
  } else {

  }
#line 745
  return (1);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_mode_set(struct drm_crtc *crtc , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode , int x , int y ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  int fp_reg ;
  int dpll_reg ;
  int dpll_md_reg ;
  int dspcntr_reg ;
  int pipeconf_reg ;
  int htot_reg ;
  int hblank_reg ;
  int hsync_reg ;
  int vtot_reg ;
  int vblank_reg ;
  int vsync_reg ;
  int dspsize_reg ;
  int dsppos_reg ;
  int pipesrc_reg ;
  int refclk ;
  intel_clock_t clock ;
  u32 dpll ;
  u32 fp ;
  u32 dspcntr ;
  u32 pipeconf ;
  bool ok ;
  bool is_sdvo ;
  bool is_dvo ;
  bool is_crt ;
  bool is_lvds ;
  bool is_tv ;
  struct drm_mode_config *mode_config ;
  struct drm_connector *connector ;
  struct list_head  const  *__mptr___0 ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  int sdvo_pixel_multiply ;
  int tmp ;
  int tmp___0 ;
  u32 lvds ;
  unsigned int tmp___1 ;
  int sdvo_pixel_multiply___0 ;

  {
#line 753
  dev = crtc->dev;
#line 754
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 755
  __mptr = (struct drm_crtc  const  *)crtc;
#line 755
  intel_crtc = (struct intel_crtc *)__mptr;
#line 756
  pipe = intel_crtc->pipe;
#line 757
  fp_reg = pipe == 0 ? 24640 : 24648;
#line 758
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 759
  dpll_md_reg = intel_crtc->pipe == 0 ? 24604 : 24608;
#line 760
  dspcntr_reg = pipe == 0 ? 459136 : 463232;
#line 761
  pipeconf_reg = pipe == 0 ? 458760 : 462856;
#line 762
  htot_reg = pipe == 0 ? 393216 : 397312;
#line 763
  hblank_reg = pipe == 0 ? 393220 : 397316;
#line 764
  hsync_reg = pipe == 0 ? 393224 : 397320;
#line 765
  vtot_reg = pipe == 0 ? 393228 : 397324;
#line 766
  vblank_reg = pipe == 0 ? 393232 : 397328;
#line 767
  vsync_reg = pipe == 0 ? 393236 : 397332;
#line 768
  dspsize_reg = pipe == 0 ? 459152 : 463248;
#line 769
  dsppos_reg = pipe == 0 ? 459148 : 463244;
#line 770
  pipesrc_reg = pipe == 0 ? 393244 : 397340;
#line 773
  dpll = 0U;
#line 773
  fp = 0U;
#line 774
  is_sdvo = 0;
#line 774
  is_dvo = 0;
#line 775
  is_crt = 0;
#line 775
  is_lvds = 0;
#line 775
  is_tv = 0;
#line 776
  mode_config = & dev->mode_config;
#line 779
  drm_vblank_pre_modeset(dev, pipe);
#line 781
  __mptr___0 = (struct list_head  const  *)mode_config->connector_list.next;
#line 781
  connector = (struct drm_connector *)__mptr___0 + 0xfffffffffffffc18UL;
#line 781
  goto ldv_26116;
  ldv_26115: 
#line 782
  __mptr___1 = (struct drm_connector  const  *)connector;
#line 782
  intel_output = (struct intel_output *)__mptr___1;
#line 784
  if ((unsigned long )connector->encoder == (unsigned long )((struct drm_encoder *)0) || (unsigned long )(connector->encoder)->crtc != (unsigned long )crtc) {
#line 785
    goto ldv_26108;
  } else {

  }
#line 787
  switch (intel_output->type) {
  case 4: 
#line 789
  is_lvds = 1;
#line 790
  goto ldv_26110;
  case 3: 
#line 792
  is_sdvo = 1;
#line 793
  goto ldv_26110;
  case 2: 
#line 795
  is_dvo = 1;
#line 796
  goto ldv_26110;
  case 5: 
#line 798
  is_tv = 1;
#line 799
  goto ldv_26110;
  case 1: 
#line 801
  is_crt = 1;
#line 802
  goto ldv_26110;
  }
  ldv_26110: ;
  ldv_26108: 
#line 781
  __mptr___2 = (struct list_head  const  *)connector->head.next;
#line 781
  connector = (struct drm_connector *)__mptr___2 + 0xfffffffffffffc18UL;
  ldv_26116: 
#line 781
  __builtin_prefetch((void const   *)connector->head.next);
#line 781
  if ((unsigned long )(& connector->head) != (unsigned long )(& mode_config->connector_list)) {
#line 782
    goto ldv_26115;
  } else {

  }

#line 806
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 807
    refclk = 96000;
  } else {
#line 809
    refclk = 48000;
  }
#line 812
  ok = intel_find_best_PLL(crtc, adjusted_mode->clock, refclk, & clock);
#line 813
  if (! ok) {
#line 814
    printk("<3>[drm:%s] *ERROR* Couldn\'t find PLL settings for mode!\n", "intel_crtc_mode_set");
#line 815
    return;
  } else {

  }
#line 818
  fp = (u32 )(((clock.n << 16) | (clock.m1 << 8)) | clock.m2);
#line 820
  dpll = 268435456U;
#line 821
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 822
    if ((int )is_lvds) {
#line 823
      dpll = dpll | 134217728U;
    } else {
#line 825
      dpll = dpll | 67108864U;
    }
#line 826
    if ((int )is_sdvo) {
#line 827
      dpll = dpll | 1073741824U;
#line 828
      if (dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) {
#line 829
        sdvo_pixel_multiply = adjusted_mode->clock / mode->clock;
#line 830
        dpll = (u32 )((sdvo_pixel_multiply + -1) << 4) | dpll;
      } else {

      }
    } else {

    }
#line 835
    dpll = (u32 )((1 << (clock.p1 + -1)) << 16) | dpll;
#line 836
    switch (clock.p2) {
    case 5: 
#line 838
    dpll = dpll | 16777216U;
#line 839
    goto ldv_26121;
    case 7: 
#line 841
    dpll = dpll | 16777216U;
#line 842
    goto ldv_26121;
    case 10: 
#line 844
    dpll = dpll;
#line 845
    goto ldv_26121;
    case 14: 
#line 847
    dpll = dpll;
#line 848
    goto ldv_26121;
    }
    ldv_26121: ;
#line 850
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 851
      dpll = dpll | 3072U;
    } else {

    }
  } else
#line 853
  if ((int )is_lvds) {
#line 854
    dpll = (u32 )((1 << (clock.p1 + -1)) << 16) | dpll;
  } else {
#line 856
    if (clock.p1 == 2) {
#line 857
      dpll = dpll | 2097152U;
    } else {
#line 859
      dpll = (u32 )((clock.p1 + -2) << 16) | dpll;
    }
#line 860
    if (clock.p2 == 4) {
#line 861
      dpll = dpll | 8388608U;
    } else {

    }
  }
#line 865
  if ((int )is_tv) {
#line 868
    dpll = dpll | 3U;
  } else {
#line 871
    dpll = dpll;
  }
#line 874
  pipeconf = readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 877
  dspcntr = 1073741824U;
#line 879
  if (pipe == 0) {
#line 880
    dspcntr = dspcntr;
  } else {
#line 882
    dspcntr = dspcntr | 16777216U;
  }
#line 884
  if (pipe == 0 && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 891
    tmp = intel_get_core_clock_speed(dev);
#line 891
    if (mode->clock > (tmp * 9) / 10) {
#line 892
      pipeconf = pipeconf | 1073741824U;
    } else {
#line 894
      pipeconf = pipeconf & 3221225471U;
    }
  } else {

  }
#line 897
  dspcntr = dspcntr | 2147483648U;
#line 898
  pipeconf = pipeconf | 2147483648U;
#line 899
  dpll = dpll | 2147483648U;
#line 903
  tmp___0 = intel_panel_fitter_pipe(dev);
#line 903
  if (tmp___0 == pipe) {
#line 904
    writel(0U, (void volatile   *)dev_priv->regs + 397872U);
  } else {

  }
#line 906
  if (drm_debug != 0U) {
#line 906
    printk("<7>[drm:%s] Mode for pipe %c:\n", "intel_crtc_mode_set", pipe == 0 ? 65 : 66);
  } else {

  }
#line 907
  drm_mode_debug_printmodeline(mode);
#line 910
  if ((int )dpll < 0) {
#line 911
    writel(fp, (void volatile   *)dev_priv->regs + (unsigned long )fp_reg);
#line 912
    writel(dpll & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 913
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 914
    __const_udelay(644250UL);
  } else {

  }
#line 921
  if ((int )is_lvds) {
#line 922
    tmp___1 = readl((void const volatile   *)dev_priv->regs + 397696U);
#line 922
    lvds = tmp___1;
#line 924
    lvds = lvds | 3221226240U;
#line 928
    if (clock.p2 == 7) {
#line 929
      lvds = lvds | 60U;
    } else {
#line 931
      lvds = lvds & 4294967235U;
    }
#line 938
    writel(lvds, (void volatile   *)dev_priv->regs + 397696U);
#line 939
    readl((void const volatile   *)dev_priv->regs + 397696U);
  } else {

  }
#line 942
  writel(fp, (void volatile   *)dev_priv->regs + (unsigned long )fp_reg);
#line 943
  writel(dpll, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 944
  readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 946
  __const_udelay(644250UL);
#line 948
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 949
    sdvo_pixel_multiply___0 = adjusted_mode->clock / mode->clock;
#line 950
    writel((unsigned int )((sdvo_pixel_multiply___0 + -1) << 8), (void volatile   *)dev_priv->regs + (unsigned long )dpll_md_reg);
  } else {
#line 954
    writel(dpll, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
  }
#line 956
  readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 958
  __const_udelay(644250UL);
#line 960
  writel((unsigned int )((adjusted_mode->crtc_hdisplay + -1) | ((adjusted_mode->crtc_htotal + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )htot_reg);
#line 962
  writel((unsigned int )((adjusted_mode->crtc_hblank_start + -1) | ((adjusted_mode->crtc_hblank_end + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )hblank_reg);
#line 964
  writel((unsigned int )((adjusted_mode->crtc_hsync_start + -1) | ((adjusted_mode->crtc_hsync_end + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )hsync_reg);
#line 966
  writel((unsigned int )((adjusted_mode->crtc_vdisplay + -1) | ((adjusted_mode->crtc_vtotal + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )vtot_reg);
#line 968
  writel((unsigned int )((adjusted_mode->crtc_vblank_start + -1) | ((adjusted_mode->crtc_vblank_end + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )vblank_reg);
#line 970
  writel((unsigned int )((adjusted_mode->crtc_vsync_start + -1) | ((adjusted_mode->crtc_vsync_end + -1) << 16)),
         (void volatile   *)dev_priv->regs + (unsigned long )vsync_reg);
#line 975
  writel((unsigned int )(((mode->vdisplay + -1) << 16) | (mode->hdisplay + -1)), (void volatile   *)dev_priv->regs + (unsigned long )dspsize_reg);
#line 976
  writel(0U, (void volatile   *)dev_priv->regs + (unsigned long )dsppos_reg);
#line 977
  writel((unsigned int )(((mode->hdisplay + -1) << 16) | (mode->vdisplay + -1)), (void volatile   *)dev_priv->regs + (unsigned long )pipesrc_reg);
#line 978
  writel(pipeconf, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 979
  readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 981
  intel_wait_for_vblank(dev);
#line 983
  writel(dspcntr, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 986
  intel_pipe_set_base(crtc, x, y);
#line 988
  intel_wait_for_vblank(dev);
#line 990
  drm_vblank_post_modeset(dev, pipe);
#line 991
  return;
}
}
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_crtc_load_lut(struct drm_crtc *crtc ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int palreg ;
  int i ;

  {
#line 996
  dev = crtc->dev;
#line 997
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 998
  __mptr = (struct drm_crtc  const  *)crtc;
#line 998
  intel_crtc = (struct intel_crtc *)__mptr;
#line 999
  palreg = intel_crtc->pipe == 0 ? 40960 : 43008;
#line 1003
  if (! crtc->enabled) {
#line 1004
    return;
  } else {

  }
#line 1006
  i = 0;
#line 1006
  goto ldv_26138;
  ldv_26137: 
#line 1007
  writel((unsigned int )((((int )intel_crtc->lut_r[i] << 16) | ((int )intel_crtc->lut_g[i] << 8)) | (int )intel_crtc->lut_b[i]),
         (void volatile   *)dev_priv->regs + (unsigned long )(i * 4 + palreg));
#line 1006
  i = i + 1;
  ldv_26138: ;
#line 1006
  if (i <= 255) {
#line 1007
    goto ldv_26137;
  } else {

  }

#line 1011
  return;
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_crtc_cursor_set(struct drm_crtc *crtc , struct drm_file *file_priv ,
                                 uint32_t handle , uint32_t width , uint32_t height ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_gem_object *bo ;
  struct drm_i915_gem_object *obj_priv ;
  int pipe ;
  uint32_t control ;
  uint32_t base ;
  uint32_t temp ;
  size_t addr ;

  {
#line 1019
  dev = crtc->dev;
#line 1020
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1021
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1021
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1024
  pipe = intel_crtc->pipe;
#line 1025
  control = pipe == 0 ? 458880U : 458944U;
#line 1026
  base = pipe == 0 ? 458884U : 458948U;
#line 1030
  if (drm_debug != 0U) {
#line 1030
    printk("<7>[drm:%s] \n", "intel_crtc_cursor_set");
  } else {

  }
#line 1033
  if (handle == 0U) {
#line 1034
    if (drm_debug != 0U) {
#line 1034
      printk("<7>[drm:%s] cursor off\n", "intel_crtc_cursor_set");
    } else {

    }
#line 1036
    temp = 0U;
#line 1037
    temp = temp;
#line 1039
    writel(temp, (void volatile   *)dev_priv->regs + (unsigned long )control);
#line 1040
    writel(0U, (void volatile   *)dev_priv->regs + (unsigned long )base);
#line 1041
    return (0);
  } else {

  }
#line 1045
  if (width != 64U || height != 64U) {
#line 1046
    printk("<3>[drm:%s] *ERROR* we currently only support 64x64 cursors\n", "intel_crtc_cursor_set");
#line 1047
    return (-22);
  } else {

  }
#line 1050
  bo = drm_gem_object_lookup(dev, file_priv, (int )handle);
#line 1051
  if ((unsigned long )bo == (unsigned long )((struct drm_gem_object *)0)) {
#line 1052
    return (-2);
  } else {

  }
#line 1054
  obj_priv = (struct drm_i915_gem_object *)bo->driver_private;
#line 1056
  if (bo->size < (size_t )((width * height) * 4U)) {
#line 1057
    printk("<3>[drm:%s] *ERROR* buffer is to small\n", "intel_crtc_cursor_set");
#line 1058
    drm_gem_object_unreference(bo);
#line 1059
    return (-12);
  } else {

  }
#line 1062
  if ((int )dev_priv->cursor_needs_physical) {
#line 1063
    addr = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
  } else {
#line 1065
    addr = (size_t )obj_priv->gtt_offset;
  }
#line 1068
  intel_crtc->cursor_addr = (uint32_t )addr;
#line 1069
  temp = 0U;
#line 1071
  temp = (uint32_t )(pipe << 28) | temp;
#line 1072
  temp = temp | 67108903U;
#line 1074
  writel(temp, (void volatile   *)dev_priv->regs + (unsigned long )control);
#line 1075
  writel((unsigned int )addr, (void volatile   *)dev_priv->regs + (unsigned long )base);
#line 1077
  return (0);
}
}
#line 1080 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_crtc_cursor_move(struct drm_crtc *crtc , int x , int y ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  uint32_t temp ;
  uint32_t adder ;

  {
#line 1082
  dev = crtc->dev;
#line 1083
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1084
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1084
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1085
  pipe = intel_crtc->pipe;
#line 1086
  temp = 0U;
#line 1089
  if (x < 0) {
#line 1090
    temp = temp | 32768U;
#line 1091
    x = - x;
  } else {

  }
#line 1093
  if (y < 0) {
#line 1094
    temp = temp | 2147483648U;
#line 1095
    y = - y;
  } else {

  }
#line 1098
  temp = ((uint32_t )x & 2047U) | temp;
#line 1099
  temp = (uint32_t )((y & 2047) << 16) | temp;
#line 1101
  adder = intel_crtc->cursor_addr;
#line 1102
  writel(temp, (void volatile   *)(dev_priv->regs + (pipe == 0 ? 458888UL : 458952UL)));
#line 1103
  writel(adder, (void volatile   *)(dev_priv->regs + (pipe == 0 ? 458884UL : 458948UL)));
#line 1105
  return (0);
}
}
#line 1109 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_crtc_fb_gamma_set(struct drm_crtc *crtc , u16 red , u16 green , u16 blue ,
                             int regno ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;

  {
#line 1112
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1112
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1114
  intel_crtc->lut_r[regno] = (u8 )((int )red >> 8);
#line 1115
  intel_crtc->lut_g[regno] = (u8 )((int )green >> 8);
#line 1116
  intel_crtc->lut_b[regno] = (u8 )((int )blue >> 8);
#line 1117
  return;
}
}
#line 1119 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_gamma_set(struct drm_crtc *crtc , u16 *red , u16 *green , u16 *blue ,
                                 uint32_t size ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int i ;

  {
#line 1122
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1122
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1125
  if (size != 256U) {
#line 1126
    return;
  } else {

  }
#line 1128
  i = 0;
#line 1128
  goto ldv_26195;
  ldv_26194: 
#line 1129
  intel_crtc->lut_r[i] = (u8 )((int )*(red + (unsigned long )i) >> 8);
#line 1130
  intel_crtc->lut_g[i] = (u8 )((int )*(green + (unsigned long )i) >> 8);
#line 1131
  intel_crtc->lut_b[i] = (u8 )((int )*(blue + (unsigned long )i) >> 8);
#line 1128
  i = i + 1;
  ldv_26195: ;
#line 1128
  if (i <= 255) {
#line 1129
    goto ldv_26194;
  } else {

  }
#line 1134
  intel_crtc_load_lut(crtc);
#line 1135
  return;
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_display_mode load_detect_mode  = 
#line 1152
     {{0, 0}, {0U, 0U}, {'6', '4', '0', 'x', '4', '8', '0', '\000'}, 0, 0, 16, 31500,
    640, 664, 704, 832, 0, 480, 489, 491, 520, 0, 10U, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.f};
#line 1157 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct drm_crtc *intel_get_load_detect_pipe(struct intel_output *intel_output , struct drm_display_mode *mode ,
                                            int *dpms_mode ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc *possible_crtc ;
  struct drm_crtc *supported_crtc ;
  struct drm_encoder *encoder ;
  struct drm_crtc *crtc ;
  struct drm_device *dev ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  int i ;
  struct drm_crtc  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct drm_crtc  const  *__mptr___2 ;

  {
#line 1163
  supported_crtc = 0;
#line 1164
  encoder = & intel_output->enc;
#line 1165
  crtc = 0;
#line 1166
  dev = encoder->dev;
#line 1167
  encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 1169
  i = -1;
#line 1182
  if ((unsigned long )encoder->crtc != (unsigned long )((struct drm_crtc *)0)) {
#line 1183
    crtc = encoder->crtc;
#line 1185
    __mptr = (struct drm_crtc  const  *)crtc;
#line 1185
    intel_crtc = (struct intel_crtc *)__mptr;
#line 1186
    *dpms_mode = intel_crtc->dpms_mode;
#line 1187
    if (intel_crtc->dpms_mode != 0) {
#line 1188
      crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 1189
      (*(crtc_funcs->dpms))(crtc, 0);
#line 1190
      (*(encoder_funcs->dpms))(encoder, 0);
    } else {

    }
#line 1192
    return (crtc);
  } else {

  }
#line 1196
  __mptr___0 = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 1196
  possible_crtc = (struct drm_crtc *)__mptr___0 + 0xfffffffffffffff8UL;
#line 1196
  goto ldv_26221;
  ldv_26220: 
#line 1197
  i = i + 1;
#line 1198
  if ((encoder->possible_crtcs & (uint32_t )(1 << i)) == 0U) {
#line 1199
    goto ldv_26218;
  } else {

  }
#line 1200
  if (! possible_crtc->enabled) {
#line 1201
    crtc = possible_crtc;
#line 1202
    goto ldv_26219;
  } else {

  }
#line 1204
  if ((unsigned long )supported_crtc == (unsigned long )((struct drm_crtc *)0)) {
#line 1205
    supported_crtc = possible_crtc;
  } else {

  }
  ldv_26218: 
#line 1196
  __mptr___1 = (struct list_head  const  *)possible_crtc->head.next;
#line 1196
  possible_crtc = (struct drm_crtc *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26221: 
#line 1196
  __builtin_prefetch((void const   *)possible_crtc->head.next);
#line 1196
  if ((unsigned long )(& possible_crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 1197
    goto ldv_26220;
  } else {

  }
  ldv_26219: ;
#line 1211
  if ((unsigned long )crtc == (unsigned long )((struct drm_crtc *)0)) {
#line 1212
    return (0);
  } else {

  }
#line 1215
  encoder->crtc = crtc;
#line 1216
  intel_output->load_detect_temp = 1;
#line 1218
  __mptr___2 = (struct drm_crtc  const  *)crtc;
#line 1218
  intel_crtc = (struct intel_crtc *)__mptr___2;
#line 1219
  *dpms_mode = intel_crtc->dpms_mode;
#line 1221
  if (! crtc->enabled) {
#line 1222
    if ((unsigned long )mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 1223
      mode = & load_detect_mode;
    } else {

    }
#line 1224
    drm_crtc_helper_set_mode(crtc, mode, 0, 0);
  } else {
#line 1226
    if (intel_crtc->dpms_mode != 0) {
#line 1227
      crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 1228
      (*(crtc_funcs->dpms))(crtc, 0);
    } else {

    }
#line 1232
    (*(encoder_funcs->mode_set))(encoder, & crtc->mode, & crtc->mode);
#line 1233
    (*(encoder_funcs->commit))(encoder);
  }
#line 1236
  intel_wait_for_vblank(dev);
#line 1238
  return (crtc);
}
}
#line 1241 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_release_load_detect_pipe(struct intel_output *intel_output , int dpms_mode ) 
{ 
  struct drm_encoder *encoder ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct drm_crtc_helper_funcs *crtc_funcs ;

  {
#line 1243
  encoder = & intel_output->enc;
#line 1244
  dev = encoder->dev;
#line 1245
  crtc = encoder->crtc;
#line 1246
  encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 1247
  crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 1249
  if ((int )intel_output->load_detect_temp) {
#line 1250
    encoder->crtc = 0;
#line 1251
    intel_output->load_detect_temp = 0;
#line 1252
    crtc->enabled = drm_helper_crtc_in_use(crtc);
#line 1253
    drm_helper_disable_unused_functions(dev);
  } else {

  }
#line 1257
  if ((int )crtc->enabled && dpms_mode != 0) {
#line 1258
    if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 1259
      (*(encoder_funcs->dpms))(encoder, dpms_mode);
    } else {

    }
#line 1260
    (*(crtc_funcs->dpms))(crtc, dpms_mode);
  } else {

  }
#line 1262
  return;
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_crtc_clock_get(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  u32 dpll ;
  unsigned int tmp ;
  u32 fp ;
  intel_clock_t clock ;
  bool is_lvds ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1267
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1268
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1268
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1269
  pipe = intel_crtc->pipe;
#line 1270
  tmp = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 24596UL : 24600UL)));
#line 1270
  dpll = tmp;
#line 1274
  if ((dpll & 256U) == 0U) {
#line 1275
    fp = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 24640UL : 24648UL)));
  } else {
#line 1277
    fp = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 24644UL : 24652UL)));
  }
#line 1279
  clock.m1 = (int )((fp & 16128U) >> 8);
#line 1280
  clock.m2 = (int )fp & 63;
#line 1281
  clock.n = (int )((fp & 4128768U) >> 16);
#line 1282
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1283
    clock.p1 = ffs((int )((dpll & 16711680U) >> 16));
#line 1286
    switch (dpll & 201326592U) {
    case 67108864U: 
#line 1288
    clock.p2 = (dpll & 16777216U) != 0U ? 5 : 10;
#line 1290
    goto ldv_26246;
    case 134217728U: 
#line 1292
    clock.p2 = (dpll & 16777216U) != 0U ? 7 : 14;
#line 1294
    goto ldv_26246;
    default: ;
#line 1296
    if (drm_debug != 0U) {
#line 1296
      printk("<7>[drm:%s] Unknown DPLL mode %08x in programmed mode\n", "intel_crtc_clock_get",
             (int )dpll & 201326592);
    } else {

    }
#line 1298
    return (0);
    }
    ldv_26246: 
#line 1302
    i9xx_clock(96000, & clock);
  } else {
#line 1304
    if (pipe == 1) {
#line 1304
      tmp___0 = readl((void const volatile   *)dev_priv->regs + 397696U);
#line 1304
      if ((int )tmp___0 < 0) {
#line 1304
        tmp___1 = 1;
      } else {
#line 1304
        tmp___1 = 0;
      }
    } else {
#line 1304
      tmp___1 = 0;
    }
#line 1304
    is_lvds = (bool )tmp___1;
#line 1306
    if ((int )is_lvds) {
#line 1307
      clock.p1 = ffs((int )((dpll & 4128768U) >> 16));
#line 1309
      clock.p2 = 14;
#line 1311
      if ((dpll & 24576U) == 24576U) {
#line 1314
        i8xx_clock(66000, & clock);
      } else {
#line 1316
        i8xx_clock(48000, & clock);
      }
    } else {
#line 1318
      if ((dpll & 2097152U) != 0U) {
#line 1319
        clock.p1 = 2;
      } else {
#line 1321
        clock.p1 = (int )(((dpll & 2031616U) >> 16) + 2U);
      }
#line 1324
      if ((dpll & 8388608U) != 0U) {
#line 1325
        clock.p2 = 4;
      } else {
#line 1327
        clock.p2 = 2;
      }
#line 1329
      i8xx_clock(48000, & clock);
    }
  }
#line 1338
  return (clock.dot);
}
}
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct drm_display_mode *intel_crtc_mode_get(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  int pipe ;
  struct drm_display_mode *mode ;
  int htot ;
  unsigned int tmp ;
  int hsync ;
  unsigned int tmp___0 ;
  int vtot ;
  unsigned int tmp___1 ;
  int vsync ;
  unsigned int tmp___2 ;
  void *tmp___3 ;

  {
#line 1345
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1346
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1346
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1347
  pipe = intel_crtc->pipe;
#line 1349
  tmp = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 393216UL : 397312UL)));
#line 1349
  htot = (int )tmp;
#line 1350
  tmp___0 = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 393224UL : 397320UL)));
#line 1350
  hsync = (int )tmp___0;
#line 1351
  tmp___1 = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 393228UL : 397324UL)));
#line 1351
  vtot = (int )tmp___1;
#line 1352
  tmp___2 = readl((void const volatile   *)(dev_priv->regs + (pipe == 0 ? 393236UL : 397332UL)));
#line 1352
  vsync = (int )tmp___2;
#line 1354
  tmp___3 = kzalloc(224UL, 208U);
#line 1354
  mode = (struct drm_display_mode *)tmp___3;
#line 1355
  if ((unsigned long )mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 1356
    return (0);
  } else {

  }
#line 1358
  mode->clock = intel_crtc_clock_get(dev, crtc);
#line 1359
  mode->hdisplay = (htot & 65535) + 1;
#line 1360
  mode->htotal = (int )(((unsigned int )htot >> 16) + 1U);
#line 1361
  mode->hsync_start = (hsync & 65535) + 1;
#line 1362
  mode->hsync_end = (int )(((unsigned int )hsync >> 16) + 1U);
#line 1363
  mode->vdisplay = (vtot & 65535) + 1;
#line 1364
  mode->vtotal = (int )(((unsigned int )vtot >> 16) + 1U);
#line 1365
  mode->vsync_start = (vsync & 65535) + 1;
#line 1366
  mode->vsync_end = (int )(((unsigned int )vsync >> 16) + 1U);
#line 1368
  drm_mode_set_name(mode);
#line 1369
  drm_mode_set_crtcinfo(mode, 0);
#line 1371
  return (mode);
}
}
#line 1374 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_destroy(struct drm_crtc *crtc ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;

  {
#line 1376
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1376
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1378
  drm_crtc_cleanup(crtc);
#line 1379
  kfree((void const   *)intel_crtc);
#line 1380
  return;
}
}
#line 1382 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_crtc_helper_funcs  const  intel_helper_funcs  =    {& intel_crtc_dpms, & intel_crtc_prepare, & intel_crtc_commit, & intel_crtc_mode_fixup,
    & intel_crtc_mode_set, & intel_pipe_set_base};
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_crtc_funcs  const  intel_crtc_funcs  =    {0, 0, & intel_crtc_cursor_set, & intel_crtc_cursor_move, & intel_crtc_gamma_set,
    & intel_crtc_destroy, & drm_crtc_helper_set_config};
#line 1400 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_crtc_init(struct drm_device *dev , int pipe ) 
{ 
  struct intel_crtc *intel_crtc ;
  int i ;
  void *tmp ;

  {
#line 1405
  tmp = kzalloc(1216UL, 208U);
#line 1405
  intel_crtc = (struct intel_crtc *)tmp;
#line 1406
  if ((unsigned long )intel_crtc == (unsigned long )((struct intel_crtc *)0)) {
#line 1407
    return;
  } else {

  }
#line 1409
  drm_crtc_init(dev, & intel_crtc->base, & intel_crtc_funcs);
#line 1411
  drm_mode_crtc_set_gamma_size(& intel_crtc->base, 256);
#line 1412
  intel_crtc->pipe = pipe;
#line 1413
  i = 0;
#line 1413
  goto ldv_26280;
  ldv_26279: 
#line 1414
  intel_crtc->lut_r[i] = (u8 )i;
#line 1415
  intel_crtc->lut_g[i] = (u8 )i;
#line 1416
  intel_crtc->lut_b[i] = (u8 )i;
#line 1413
  i = i + 1;
  ldv_26280: ;
#line 1413
  if (i <= 255) {
#line 1414
    goto ldv_26279;
  } else {

  }
#line 1419
  intel_crtc->cursor_addr = 0U;
#line 1420
  intel_crtc->dpms_mode = 3;
#line 1421
  drm_crtc_helper_add(& intel_crtc->base, & intel_helper_funcs);
#line 1423
  intel_crtc->mode_set.crtc = & intel_crtc->base;
#line 1424
  intel_crtc->mode_set.connectors = (struct drm_connector **)intel_crtc + 1U;
#line 1425
  intel_crtc->mode_set.num_connectors = 0UL;
#line 1430
  return;
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct drm_crtc *intel_get_crtc_from_pipe(struct drm_device *dev , int pipe ) 
{ 
  struct drm_crtc *crtc ;
  struct list_head  const  *__mptr ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1436
  crtc = 0;
#line 1438
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 1438
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 1438
  goto ldv_26296;
  ldv_26295: 
#line 1439
  __mptr___0 = (struct drm_crtc  const  *)crtc;
#line 1439
  intel_crtc = (struct intel_crtc *)__mptr___0;
#line 1440
  if (intel_crtc->pipe == pipe) {
#line 1441
    goto ldv_26294;
  } else {

  }
#line 1438
  __mptr___1 = (struct list_head  const  *)crtc->head.next;
#line 1438
  crtc = (struct drm_crtc *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26296: 
#line 1438
  __builtin_prefetch((void const   *)crtc->head.next);
#line 1438
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 1439
    goto ldv_26295;
  } else {

  }
  ldv_26294: ;
#line 1443
  return (crtc);
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_connector_clones(struct drm_device *dev , int type_mask ) 
{ 
  int index_mask ;
  struct drm_connector *connector ;
  int entry ;
  struct list_head  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1448
  index_mask = 0;
#line 1450
  entry = 0;
#line 1452
  __mptr = (struct list_head  const  *)dev->mode_config.connector_list.next;
#line 1452
  connector = (struct drm_connector *)__mptr + 0xfffffffffffffc18UL;
#line 1452
  goto ldv_26312;
  ldv_26311: 
#line 1453
  __mptr___0 = (struct drm_connector  const  *)connector;
#line 1453
  intel_output = (struct intel_output *)__mptr___0;
#line 1454
  if ((type_mask >> intel_output->type) & 1) {
#line 1455
    index_mask = (1 << entry) | index_mask;
  } else {

  }
#line 1456
  entry = entry + 1;
#line 1452
  __mptr___1 = (struct list_head  const  *)connector->head.next;
#line 1452
  connector = (struct drm_connector *)__mptr___1 + 0xfffffffffffffc18UL;
  ldv_26312: 
#line 1452
  __builtin_prefetch((void const   *)connector->head.next);
#line 1452
  if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {
#line 1453
    goto ldv_26311;
  } else {

  }

#line 1458
  return (index_mask);
}
}
#line 1462 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_setup_outputs(struct drm_device *dev ) 
{ 
  struct drm_connector *connector ;
  struct list_head  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr___0 ;
  struct drm_encoder *encoder ;
  int crtc_mask ;
  int clone_mask ;
  int tmp ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1466
  intel_crt_init(dev);
#line 1469
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 1470
    intel_lvds_init(dev);
  } else {

  }
#line 1472
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1473
    intel_sdvo_init(dev, 397632);
#line 1474
    intel_sdvo_init(dev, 397664);
  } else {
#line 1476
    intel_dvo_init(dev);
  }
#line 1478
  if (((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && (dev->pci_device != 9602 && dev->pci_device != 9610)) {
#line 1479
    intel_tv_init(dev);
  } else {

  }
#line 1481
  __mptr = (struct list_head  const  *)dev->mode_config.connector_list.next;
#line 1481
  connector = (struct drm_connector *)__mptr + 0xfffffffffffffc18UL;
#line 1481
  goto ldv_26335;
  ldv_26334: 
#line 1482
  __mptr___0 = (struct drm_connector  const  *)connector;
#line 1482
  intel_output = (struct intel_output *)__mptr___0;
#line 1483
  encoder = & intel_output->enc;
#line 1484
  crtc_mask = 0;
#line 1484
  clone_mask = 0;
#line 1487
  switch (intel_output->type) {
  case 2: ;
  case 3: 
#line 1490
  crtc_mask = 3;
#line 1492
  clone_mask = 14;
#line 1495
  goto ldv_26330;
  case 1: 
#line 1497
  crtc_mask = 3;
#line 1499
  clone_mask = 14;
#line 1502
  goto ldv_26330;
  case 4: 
#line 1504
  crtc_mask = 2;
#line 1505
  clone_mask = 16;
#line 1506
  goto ldv_26330;
  case 5: 
#line 1508
  crtc_mask = 3;
#line 1510
  clone_mask = 32;
#line 1511
  goto ldv_26330;
  }
  ldv_26330: 
#line 1513
  encoder->possible_crtcs = (uint32_t )crtc_mask;
#line 1514
  tmp = intel_connector_clones(dev, clone_mask);
#line 1514
  encoder->possible_clones = (uint32_t )tmp;
#line 1481
  __mptr___1 = (struct list_head  const  *)connector->head.next;
#line 1481
  connector = (struct drm_connector *)__mptr___1 + 0xfffffffffffffc18UL;
  ldv_26335: 
#line 1481
  __builtin_prefetch((void const   *)connector->head.next);
#line 1481
  if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {
#line 1482
    goto ldv_26334;
  } else {

  }

#line 1486
  return;
}
}
#line 1518 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static void intel_user_framebuffer_destroy(struct drm_framebuffer *fb ) 
{ 
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer  const  *__mptr ;
  struct drm_device *dev ;

  {
#line 1520
  __mptr = (struct drm_framebuffer  const  *)fb;
#line 1520
  intel_fb = (struct intel_framebuffer *)__mptr;
#line 1521
  dev = fb->dev;
#line 1523
  if ((unsigned long )fb->fbdev != (unsigned long )((void *)0)) {
#line 1524
    intelfb_remove(dev, fb);
  } else {

  }
#line 1526
  drm_framebuffer_cleanup(fb);
#line 1527
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 1528
  drm_gem_object_unreference(intel_fb->obj);
#line 1529
  mutex_unlock(& dev->struct_mutex);
#line 1531
  kfree((void const   *)intel_fb);
#line 1532
  return;
}
}
#line 1534 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static int intel_user_framebuffer_create_handle(struct drm_framebuffer *fb , struct drm_file *file_priv ,
                                                unsigned int *handle ) 
{ 
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer  const  *__mptr ;
  struct drm_gem_object *object ;
  int tmp ;

  {
#line 1538
  __mptr = (struct drm_framebuffer  const  *)fb;
#line 1538
  intel_fb = (struct intel_framebuffer *)__mptr;
#line 1539
  object = intel_fb->obj;
#line 1541
  tmp = drm_gem_handle_create(file_priv, object, (int *)handle);
#line 1541
  return (tmp);
}
}
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_framebuffer_funcs  const  intel_fb_funcs  =    {& intel_user_framebuffer_destroy, & intel_user_framebuffer_create_handle};
#line 1549 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
int intel_framebuffer_create(struct drm_device *dev , struct drm_mode_fb_cmd *mode_cmd ,
                             struct drm_framebuffer **fb , struct drm_gem_object *obj ) 
{ 
  struct intel_framebuffer *intel_fb ;
  int ret ;
  void *tmp ;

  {
#line 1557
  tmp = kzalloc(168UL, 208U);
#line 1557
  intel_fb = (struct intel_framebuffer *)tmp;
#line 1558
  if ((unsigned long )intel_fb == (unsigned long )((struct intel_framebuffer *)0)) {
#line 1559
    return (-12);
  } else {

  }
#line 1561
  ret = drm_framebuffer_init(dev, & intel_fb->base, & intel_fb_funcs);
#line 1562
  if (ret != 0) {
#line 1563
    printk("<3>[drm:%s] *ERROR* framebuffer init failed %d\n", "intel_framebuffer_create",
           ret);
#line 1564
    return (ret);
  } else {

  }
#line 1567
  drm_helper_mode_fill_fb_struct(& intel_fb->base, mode_cmd);
#line 1569
  intel_fb->obj = obj;
#line 1571
  *fb = & intel_fb->base;
#line 1573
  return (0);
}
}
#line 1578 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_framebuffer *intel_user_framebuffer_create(struct drm_device *dev ,
                                                             struct drm_file *filp ,
                                                             struct drm_mode_fb_cmd *mode_cmd ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_framebuffer *fb ;
  int ret ;

  {
#line 1586
  obj = drm_gem_object_lookup(dev, filp, (int )mode_cmd->handle);
#line 1587
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1588
    return (0);
  } else {

  }
#line 1590
  ret = intel_framebuffer_create(dev, mode_cmd, & fb, obj);
#line 1591
  if (ret != 0) {
#line 1592
    drm_gem_object_unreference(obj);
#line 1593
    return (0);
  } else {

  }
#line 1596
  return (fb);
}
}
#line 1599 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
static struct drm_mode_config_funcs  const  intel_mode_funcs  =    {& intel_user_framebuffer_create, & intelfb_probe};
#line 1604 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_modeset_init(struct drm_device *dev ) 
{ 
  int num_pipe ;
  int i ;

  {
#line 1609
  drm_mode_config_init(dev);
#line 1611
  dev->mode_config.min_width = 0;
#line 1612
  dev->mode_config.min_height = 0;
#line 1614
  dev->mode_config.funcs = (struct drm_mode_config_funcs *)(& intel_mode_funcs);
#line 1616
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1617
    dev->mode_config.max_width = 8192;
#line 1618
    dev->mode_config.max_height = 8192;
  } else {
#line 1620
    dev->mode_config.max_width = 2048;
#line 1621
    dev->mode_config.max_height = 2048;
  }
#line 1625
  if ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) {
#line 1626
    dev->mode_config.fb_base = (unsigned long )(dev->pdev)->resource[2].start;
  } else {
#line 1628
    dev->mode_config.fb_base = (unsigned long )(dev->pdev)->resource[0].start;
  }
#line 1630
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) || ((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706))) {
#line 1631
    num_pipe = 2;
  } else {
#line 1633
    num_pipe = 1;
  }
#line 1634
  if (drm_debug != 0U) {
#line 1634
    printk("<7>[drm:%s] %d display pipe%s available.\n", "intel_modeset_init", num_pipe,
           num_pipe > 1 ? (char *)"s" : (char *)"");
  } else {

  }
#line 1637
  i = 0;
#line 1637
  goto ldv_26379;
  ldv_26378: 
#line 1638
  intel_crtc_init(dev, i);
#line 1637
  i = i + 1;
  ldv_26379: ;
#line 1637
  if (i < num_pipe) {
#line 1638
    goto ldv_26378;
  } else {

  }
#line 1641
  intel_setup_outputs(dev);
#line 1642
  return;
}
}
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void intel_modeset_cleanup(struct drm_device *dev ) 
{ 


  {
#line 1646
  drm_mode_config_cleanup(dev);
#line 1647
  return;
}
}
#line 1653 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
struct drm_encoder *intel_best_encoder(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 1655
  __mptr = (struct drm_connector  const  *)connector;
#line 1655
  intel_output = (struct intel_output *)__mptr;
#line 1657
  return (& intel_output->enc);
}
}
#line 1697 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_crtc *var_group1 ;
  int var_intel_crtc_dpms_9_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_crtc_mode_fixup_14_p2 ;
  struct drm_display_mode *var_intel_crtc_mode_set_17_p2 ;
  int var_intel_crtc_mode_set_17_p3 ;
  int var_intel_crtc_mode_set_17_p4 ;
  int var_intel_pipe_set_base_8_p1 ;
  int var_intel_pipe_set_base_8_p2 ;
  struct drm_file *var_group3 ;
  uint32_t var_intel_crtc_cursor_set_19_p2 ;
  uint32_t var_intel_crtc_cursor_set_19_p3 ;
  uint32_t var_intel_crtc_cursor_set_19_p4 ;
  int var_intel_crtc_cursor_move_20_p1 ;
  int var_intel_crtc_cursor_move_20_p2 ;
  u16 *var_intel_crtc_gamma_set_22_p1 ;
  u16 *var_intel_crtc_gamma_set_22_p2 ;
  u16 *var_intel_crtc_gamma_set_22_p3 ;
  uint32_t var_intel_crtc_gamma_set_22_p4 ;
  struct drm_framebuffer *var_group4 ;
  unsigned int *var_intel_user_framebuffer_create_handle_33_p2 ;
  struct drm_device *var_group5 ;
  struct drm_mode_fb_cmd *var_intel_user_framebuffer_create_35_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 2491
  LDV_IN_INTERRUPT = 1;
#line 2500
  ldv_initialize();
#line 2510
  goto ldv_26445;
  ldv_26444: 
#line 2513
  tmp = nondet_int();
#line 2513
  switch (tmp) {
  case 0: 
#line 2577
  ldv_handler_precall();
#line 2578
  intel_crtc_dpms(var_group1, var_intel_crtc_dpms_9_p1);
#line 2585
  goto ldv_26430;
  case 1: 
#line 2648
  ldv_handler_precall();
#line 2649
  intel_crtc_mode_fixup(var_group1, var_group2, var_intel_crtc_mode_fixup_14_p2);
#line 2656
  goto ldv_26430;
  case 2: 
#line 2719
  ldv_handler_precall();
#line 2720
  intel_crtc_mode_set(var_group1, var_group2, var_intel_crtc_mode_set_17_p2, var_intel_crtc_mode_set_17_p3,
                      var_intel_crtc_mode_set_17_p4);
#line 2727
  goto ldv_26430;
  case 3: 
#line 2790
  ldv_handler_precall();
#line 2791
  intel_pipe_set_base(var_group1, var_intel_pipe_set_base_8_p1, var_intel_pipe_set_base_8_p2);
#line 2798
  goto ldv_26430;
  case 4: 
#line 2861
  ldv_handler_precall();
#line 2862
  intel_crtc_prepare(var_group1);
#line 2869
  goto ldv_26430;
  case 5: 
#line 2932
  ldv_handler_precall();
#line 2933
  intel_crtc_commit(var_group1);
#line 2940
  goto ldv_26430;
  case 6: 
#line 3003
  ldv_handler_precall();
#line 3004
  intel_crtc_cursor_set(var_group1, var_group3, var_intel_crtc_cursor_set_19_p2, var_intel_crtc_cursor_set_19_p3,
                        var_intel_crtc_cursor_set_19_p4);
#line 3011
  goto ldv_26430;
  case 7: 
#line 3074
  ldv_handler_precall();
#line 3075
  intel_crtc_cursor_move(var_group1, var_intel_crtc_cursor_move_20_p1, var_intel_crtc_cursor_move_20_p2);
#line 3082
  goto ldv_26430;
  case 8: 
#line 3145
  ldv_handler_precall();
#line 3146
  intel_crtc_gamma_set(var_group1, var_intel_crtc_gamma_set_22_p1, var_intel_crtc_gamma_set_22_p2,
                       var_intel_crtc_gamma_set_22_p3, var_intel_crtc_gamma_set_22_p4);
#line 3153
  goto ldv_26430;
  case 9: 
#line 3216
  ldv_handler_precall();
#line 3217
  intel_crtc_destroy(var_group1);
#line 3224
  goto ldv_26430;
  case 10: 
#line 3287
  ldv_handler_precall();
#line 3288
  intel_user_framebuffer_destroy(var_group4);
#line 3295
  goto ldv_26430;
  case 11: 
#line 3358
  ldv_handler_precall();
#line 3359
  intel_user_framebuffer_create_handle(var_group4, var_group3, var_intel_user_framebuffer_create_handle_33_p2);
#line 3366
  goto ldv_26430;
  case 12: 
#line 3429
  ldv_handler_precall();
#line 3430
  intel_user_framebuffer_create(var_group5, var_group3, var_intel_user_framebuffer_create_35_p2);
#line 3437
  goto ldv_26430;
  default: ;
#line 3438
  goto ldv_26430;
  }
  ldv_26430: ;
  ldv_26445: 
#line 2510
  tmp___0 = nondet_int();
#line 2510
  if (tmp___0 != 0) {
#line 2511
    goto ldv_26444;
  } else {

  }


#line 3447
  ldv_check_final_state();
#line 3450
  return;
}
}
#line 3454 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_345(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3459
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 3461
  __ldv_spin_lock(ldv_func_arg1);
#line 3462
  return;
}
}
#line 3464 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_346(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3469
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 3471
  __ldv_spin_unlock(ldv_func_arg1);
#line 3472
  return;
}
}
#line 3474 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
int ldv___ldv_spin_trylock_347(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 3479
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 3479
  ldv_func_res = tmp;
#line 3481
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 3481
  return (tmp___0);
#line 3483
  return (ldv_func_res);
}
}
#line 3486 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_348(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3491
  ldv_spin_lock_siglock_of_sighand_struct();
#line 3493
  __ldv_spin_lock(ldv_func_arg1);
#line 3494
  return;
}
}
#line 3496 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_349(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3501
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 3503
  __ldv_spin_unlock(ldv_func_arg1);
#line 3504
  return;
}
}
#line 3506 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_350(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3511
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 3513
  __ldv_spin_lock(ldv_func_arg1);
#line 3514
  return;
}
}
#line 3516 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_351(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3521
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 3523
  __ldv_spin_unlock(ldv_func_arg1);
#line 3524
  return;
}
}
#line 3526 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_352(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3531
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 3533
  __ldv_spin_unlock(ldv_func_arg1);
#line 3534
  return;
}
}
#line 3536 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_353(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3541
  ldv_spin_lock_dcache_lock();
#line 3543
  __ldv_spin_lock(ldv_func_arg1);
#line 3544
  return;
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_354(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3551
  ldv_spin_lock_d_lock_of_dentry();
#line 3553
  __ldv_spin_lock(ldv_func_arg1);
#line 3554
  return;
}
}
#line 3556 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_355(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3561
  ldv_spin_unlock_d_lock_of_dentry();
#line 3563
  __ldv_spin_unlock(ldv_func_arg1);
#line 3564
  return;
}
}
#line 3566 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_356(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3571
  ldv_spin_unlock_dcache_lock();
#line 3573
  __ldv_spin_unlock(ldv_func_arg1);
#line 3574
  return;
}
}
#line 3576 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_357(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3581
  ldv_spin_lock_d_lock_of_dentry();
#line 3583
  __ldv_spin_lock(ldv_func_arg1);
#line 3584
  return;
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_358(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3591
  ldv_spin_unlock_d_lock_of_dentry();
#line 3593
  __ldv_spin_unlock(ldv_func_arg1);
#line 3594
  return;
}
}
#line 3596 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_359(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3601
  ldv_spin_lock_i_lock_of_inode();
#line 3603
  __ldv_spin_lock(ldv_func_arg1);
#line 3604
  return;
}
}
#line 3606 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_360(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3611
  ldv_spin_unlock_i_lock_of_inode();
#line 3613
  __ldv_spin_unlock(ldv_func_arg1);
#line 3614
  return;
}
}
#line 3616 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_lock_361(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3621
  ldv_spin_lock_d_lock_of_dentry();
#line 3623
  __ldv_spin_lock(ldv_func_arg1);
#line 3624
  return;
}
}
#line 3626 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_display.c.prepared"
void ldv___ldv_spin_unlock_362(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 3631
  ldv_spin_unlock_d_lock_of_dentry();
#line 3633
  __ldv_spin_unlock(ldv_func_arg1);
#line 3634
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_381(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_384(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_386(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_389(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_390(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_393(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_395(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_397(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_382(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_385(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_387(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_388(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_391(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_392(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_394(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_396(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_398(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_383(spinlock_t *ldv_func_arg1 ) ;
#line 288 "include/linux/jiffies.h"
extern unsigned long msecs_to_jiffies(unsigned int const    ) ;
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
#line 428
  return ((char const   *)(& dev->bus_id));
}
}
#line 536
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 591 "include/drm/drm_crtc.h"
extern void drm_connector_init(struct drm_device * , struct drm_connector * , struct drm_connector_funcs  const  * ,
                               int  ) ;
#line 596
extern void drm_connector_cleanup(struct drm_connector * ) ;
#line 598
extern void drm_encoder_init(struct drm_device * , struct drm_encoder * , struct drm_encoder_funcs  const  * ,
                             int  ) ;
#line 603
extern void drm_encoder_cleanup(struct drm_encoder * ) ;
#line 683
extern int drm_mode_connector_attach_encoder(struct drm_connector * , struct drm_encoder * ) ;
#line 1306 "include/drm/drmP.h"
extern int drm_sysfs_connector_add(struct drm_connector * ) ;
#line 1307
extern void drm_sysfs_connector_remove(struct drm_connector * ) ;
#line 89 "include/drm/drm_crtc_helper.h"
extern void drm_helper_probe_single_connector_modes(struct drm_connector * , uint32_t  ,
                                                    uint32_t  ) ;
#line 108 "include/drm/drm_crtc_helper.h"
__inline static void drm_encoder_helper_add(struct drm_encoder *encoder , struct drm_encoder_helper_funcs  const  *funcs ) 
{ 


  {
#line 111
  encoder->helper_private = (void *)funcs;
#line 112
  return;
}
}
#line 114 "include/drm/drm_crtc_helper.h"
__inline static void drm_connector_helper_add(struct drm_connector *connector , struct drm_connector_helper_funcs  const  *funcs ) 
{ 


  {
#line 117
  connector->helper_private = (void *)funcs;
#line 118
  return;
}
}
#line 104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct intel_i2c_chan *intel_i2c_create(struct drm_device *dev , u32 const   reg ,
                                        char const   *name ) ;
#line 106
void intel_i2c_destroy(struct intel_i2c_chan *chan ) ;
#line 107
int intel_ddc_get_modes(struct intel_output *intel_output ) ;
#line 108
bool intel_ddc_probe(struct intel_output *intel_output ) ;
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static void intel_crt_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 temp ;

  {
#line 106
  dev = encoder->dev;
#line 107
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 110
  temp = readl((void const volatile   *)dev_priv->regs + 397568U);
#line 111
  temp = temp & 4294964223U;
#line 112
  temp = temp & 2147483647U;
#line 114
  switch (mode) {
  case 0: 
#line 116
  temp = temp | 2147483648U;
#line 117
  goto ldv_25863;
  case 1: 
#line 119
  temp = temp | 2147484672U;
#line 120
  goto ldv_25863;
  case 2: 
#line 122
  temp = temp | 2147485696U;
#line 123
  goto ldv_25863;
  case 3: 
#line 125
  temp = temp | 3072U;
#line 126
  goto ldv_25863;
  }
  ldv_25863: 
#line 129
  writel(temp, (void volatile   *)dev_priv->regs + 397568U);
#line 130
  return;
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static int intel_crt_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 


  {
#line 135
  if ((mode->flags & 32U) != 0U) {
#line 136
    return (8);
  } else {

  }
#line 138
  if (mode->clock > 400000 || mode->clock <= 24999) {
#line 139
    return (17);
  } else {

  }
#line 141
  return (0);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static bool intel_crt_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                 struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 148
  return (1);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static void intel_crt_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                               struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_i915_private *dev_priv ;
  int dpll_md_reg ;
  u32 adpa ;
  u32 dpll_md ;

  {
#line 156
  dev = encoder->dev;
#line 157
  crtc = encoder->crtc;
#line 158
  __mptr = (struct drm_crtc  const  *)crtc;
#line 158
  intel_crtc = (struct intel_crtc *)__mptr;
#line 159
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 163
  if (intel_crtc->pipe == 0) {
#line 164
    dpll_md_reg = 24604;
  } else {
#line 166
    dpll_md_reg = 24608;
  }
#line 172
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 173
    dpll_md = readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_md_reg);
#line 174
    writel(dpll_md & 4294951167U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_md_reg);
  } else {

  }
#line 178
  adpa = 0U;
#line 179
  if ((int )adjusted_mode->flags & 1) {
#line 180
    adpa = adpa | 8U;
  } else {

  }
#line 181
  if ((adjusted_mode->flags & 4U) != 0U) {
#line 182
    adpa = adpa | 16U;
  } else {

  }
#line 184
  if (intel_crtc->pipe == 0) {
#line 185
    adpa = adpa;
  } else {
#line 187
    adpa = adpa | 1073741824U;
  }
#line 189
  writel(adpa, (void volatile   *)dev_priv->regs + 397568U);
#line 190
  return;
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static bool intel_crt_detect_hotplug(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 temp ;
  unsigned long timeout ;
  unsigned long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 202
  dev = connector->dev;
#line 203
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 206
  tmp = msecs_to_jiffies(1000U);
#line 206
  timeout = tmp + (unsigned long )jiffies;
#line 208
  temp = readl((void const volatile   *)dev_priv->regs + 397584U);
#line 210
  writel(temp | 40U, (void volatile   *)dev_priv->regs + 397584U);
  ldv_25904: 
#line 214
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 397584U);
#line 214
  if ((tmp___0 & 8U) == 0U) {
#line 215
    goto ldv_25897;
  } else {

  }
#line 216
  msleep(1U);
#line 217
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )timeout < 0L) {
#line 218
    goto ldv_25904;
  } else {

  }
  ldv_25897: 
#line 219
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 397588U);
#line 219
  if ((tmp___1 & 768U) == 768U) {
#line 221
    return (1);
  } else {

  }
#line 223
  return (0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static bool intel_crt_detect_ddc(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  bool tmp ;

  {
#line 228
  __mptr = (struct drm_connector  const  *)connector;
#line 228
  intel_output = (struct intel_output *)__mptr;
#line 231
  if (intel_output->type != 1) {
#line 232
    return (0);
  } else {

  }
#line 234
  tmp = intel_ddc_probe(intel_output);
#line 234
  return (tmp);
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static enum drm_connector_status intel_crt_detect(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 239
  dev = connector->dev;
#line 241
  if ((((((((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || dev->pci_device == 10098) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810)) || ((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706)) && (dev->pci_device != 9602 && dev->pci_device != 9610)) && dev->pci_device != 9618) {
#line 242
    tmp = intel_crt_detect_hotplug(connector);
#line 242
    if ((int )tmp) {
#line 243
      return (connector_status_connected);
    } else {
#line 245
      return (connector_status_disconnected);
    }
  } else {

  }
#line 248
  tmp___0 = intel_crt_detect_ddc(connector);
#line 248
  if ((int )tmp___0) {
#line 249
    return (connector_status_connected);
  } else {

  }
#line 252
  return (connector_status_unknown);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static void intel_crt_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 257
  __mptr = (struct drm_connector  const  *)connector;
#line 257
  intel_output = (struct intel_output *)__mptr;
#line 259
  intel_i2c_destroy(intel_output->ddc_bus);
#line 260
  drm_sysfs_connector_remove(connector);
#line 261
  drm_connector_cleanup(connector);
#line 262
  kfree((void const   *)connector);
#line 263
  return;
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static int intel_crt_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  int tmp ;

  {
#line 267
  __mptr = (struct drm_connector  const  *)connector;
#line 267
  intel_output = (struct intel_output *)__mptr;
#line 268
  tmp = intel_ddc_get_modes(intel_output);
#line 268
  return (tmp);
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static int intel_crt_set_property(struct drm_connector *connector , struct drm_property *property ,
                                  uint64_t value ) 
{ 
  struct drm_device *dev ;

  {
#line 275
  dev = connector->dev;
#line 277
  if ((unsigned long )dev->mode_config.dpms_property == (unsigned long )property && (unsigned long )connector->encoder != (unsigned long )((struct drm_encoder *)0)) {
#line 278
    intel_crt_dpms(connector->encoder, (int )value & 15);
  } else {

  }
#line 280
  return (0);
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static struct drm_encoder_helper_funcs  const  intel_crt_helper_funcs  = 
#line 287
     {& intel_crt_dpms, 0, 0, & intel_crt_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_crt_mode_set, 0};
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static struct drm_connector_funcs  const  intel_crt_connector_funcs  =    {0, 0, 0, & intel_crt_detect, & drm_helper_probe_single_connector_modes, & intel_crt_set_property,
    & intel_crt_destroy};
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static struct drm_connector_helper_funcs  const  intel_crt_connector_helper_funcs  =    {& intel_crt_get_modes,
    & intel_crt_mode_valid, & intel_best_encoder};
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static void intel_crt_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 310
  drm_encoder_cleanup(encoder);
#line 311
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
static struct drm_encoder_funcs  const  intel_crt_enc_funcs  =    {& intel_crt_enc_destroy};
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void intel_crt_init(struct drm_device *dev ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 322
  tmp = kzalloc(1592UL, 208U);
#line 322
  intel_output = (struct intel_output *)tmp;
#line 323
  if ((unsigned long )intel_output == (unsigned long )((struct intel_output *)0)) {
#line 324
    return;
  } else {

  }
#line 326
  connector = & intel_output->base;
#line 327
  drm_connector_init(dev, & intel_output->base, & intel_crt_connector_funcs, 1);
#line 330
  drm_encoder_init(dev, & intel_output->enc, & intel_crt_enc_funcs, 1);
#line 333
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 337
  intel_output->ddc_bus = intel_i2c_create(dev, 20496U, "CRTDDC_A");
#line 338
  if ((unsigned long )intel_output->ddc_bus == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 339
    tmp___0 = dev_name((struct device  const  *)(& (dev->pdev)->dev));
#line 339
    tmp___1 = dev_driver_string((struct device  const  *)(& (dev->pdev)->dev));
#line 339
    printk("<3>%s %s: DDC bus registration failed.\n", tmp___1, tmp___0);
#line 341
    return;
  } else {

  }
#line 344
  intel_output->type = 1;
#line 345
  connector->interlace_allowed = 0;
#line 346
  connector->doublescan_allowed = 0;
#line 348
  drm_encoder_helper_add(& intel_output->enc, & intel_crt_helper_funcs);
#line 349
  drm_connector_helper_add(connector, & intel_crt_connector_helper_funcs);
#line 351
  drm_sysfs_connector_add(connector);
#line 352
  return;
}
}
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv_main10_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_crt_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_crt_mode_fixup_2_p2 ;
  struct drm_display_mode *var_intel_crt_mode_set_3_p2 ;
  struct drm_connector *var_group3 ;
  struct drm_property *var_group4 ;
  uint64_t var_intel_crt_set_property_9_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 445
  LDV_IN_INTERRUPT = 1;
#line 454
  ldv_initialize();
#line 464
  goto ldv_25981;
  ldv_25980: 
#line 467
  tmp = nondet_int();
#line 467
  switch (tmp) {
  case 0: 
#line 477
  ldv_handler_precall();
#line 478
  intel_crt_dpms(var_group1, var_intel_crt_dpms_0_p1);
#line 485
  goto ldv_25970;
  case 1: 
#line 494
  ldv_handler_precall();
#line 495
  intel_crt_mode_fixup(var_group1, var_group2, var_intel_crt_mode_fixup_2_p2);
#line 502
  goto ldv_25970;
  case 2: 
#line 511
  ldv_handler_precall();
#line 512
  intel_crt_mode_set(var_group1, var_group2, var_intel_crt_mode_set_3_p2);
#line 519
  goto ldv_25970;
  case 3: 
#line 528
  ldv_handler_precall();
#line 529
  intel_crt_detect(var_group3);
#line 536
  goto ldv_25970;
  case 4: 
#line 545
  ldv_handler_precall();
#line 546
  intel_crt_destroy(var_group3);
#line 553
  goto ldv_25970;
  case 5: 
#line 562
  ldv_handler_precall();
#line 563
  intel_crt_set_property(var_group3, var_group4, var_intel_crt_set_property_9_p2);
#line 570
  goto ldv_25970;
  case 6: 
#line 579
  ldv_handler_precall();
#line 580
  intel_crt_mode_valid(var_group3, var_group2);
#line 587
  goto ldv_25970;
  case 7: 
#line 596
  ldv_handler_precall();
#line 597
  intel_crt_get_modes(var_group3);
#line 604
  goto ldv_25970;
  case 8: 
#line 613
  ldv_handler_precall();
#line 614
  intel_crt_enc_destroy(var_group1);
#line 621
  goto ldv_25970;
  default: ;
#line 622
  goto ldv_25970;
  }
  ldv_25970: ;
  ldv_25981: 
#line 464
  tmp___0 = nondet_int();
#line 464
  if (tmp___0 != 0) {
#line 465
    goto ldv_25980;
  } else {

  }


#line 631
  ldv_check_final_state();
#line 634
  return;
}
}
#line 638 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_381(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 643
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 645
  __ldv_spin_lock(ldv_func_arg1);
#line 646
  return;
}
}
#line 648 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_382(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 653
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 655
  __ldv_spin_unlock(ldv_func_arg1);
#line 656
  return;
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
int ldv___ldv_spin_trylock_383(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 663
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 663
  ldv_func_res = tmp;
#line 665
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 665
  return (tmp___0);
#line 667
  return (ldv_func_res);
}
}
#line 670 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_384(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 675
  ldv_spin_lock_siglock_of_sighand_struct();
#line 677
  __ldv_spin_lock(ldv_func_arg1);
#line 678
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_385(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 685
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 687
  __ldv_spin_unlock(ldv_func_arg1);
#line 688
  return;
}
}
#line 690 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_386(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 695
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 697
  __ldv_spin_lock(ldv_func_arg1);
#line 698
  return;
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_387(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 705
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 707
  __ldv_spin_unlock(ldv_func_arg1);
#line 708
  return;
}
}
#line 710 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_388(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 715
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 717
  __ldv_spin_unlock(ldv_func_arg1);
#line 718
  return;
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_389(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 725
  ldv_spin_lock_dcache_lock();
#line 727
  __ldv_spin_lock(ldv_func_arg1);
#line 728
  return;
}
}
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_390(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 735
  ldv_spin_lock_d_lock_of_dentry();
#line 737
  __ldv_spin_lock(ldv_func_arg1);
#line 738
  return;
}
}
#line 740 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_391(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 745
  ldv_spin_unlock_d_lock_of_dentry();
#line 747
  __ldv_spin_unlock(ldv_func_arg1);
#line 748
  return;
}
}
#line 750 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_392(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 755
  ldv_spin_unlock_dcache_lock();
#line 757
  __ldv_spin_unlock(ldv_func_arg1);
#line 758
  return;
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_393(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 765
  ldv_spin_lock_d_lock_of_dentry();
#line 767
  __ldv_spin_lock(ldv_func_arg1);
#line 768
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_394(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 775
  ldv_spin_unlock_d_lock_of_dentry();
#line 777
  __ldv_spin_unlock(ldv_func_arg1);
#line 778
  return;
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_395(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 785
  ldv_spin_lock_i_lock_of_inode();
#line 787
  __ldv_spin_lock(ldv_func_arg1);
#line 788
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_396(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 795
  ldv_spin_unlock_i_lock_of_inode();
#line 797
  __ldv_spin_unlock(ldv_func_arg1);
#line 798
  return;
}
}
#line 800 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_lock_397(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 805
  ldv_spin_lock_d_lock_of_dentry();
#line 807
  __ldv_spin_lock(ldv_func_arg1);
#line 808
  return;
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_crt.c.prepared"
void ldv___ldv_spin_unlock_398(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 815
  ldv_spin_unlock_d_lock_of_dentry();
#line 817
  __ldv_spin_unlock(ldv_func_arg1);
#line 818
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_417(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_420(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_422(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_425(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_426(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_429(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_431(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_433(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_418(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_421(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_423(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_424(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_427(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_428(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_430(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_432(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_434(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_419(spinlock_t *ldv_func_arg1 ) ;
#line 617 "include/drm/drm_crtc.h"
extern void drm_mode_probed_add(struct drm_connector * , struct drm_display_mode * ) ;
#line 619
extern struct drm_display_mode *drm_mode_duplicate(struct drm_device * , struct drm_display_mode * ) ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_set_backlight(struct drm_device *dev , int level ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;

  {
#line 114
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 117
  tmp = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 117
  blc_pwm_ctl = tmp & 4294901760U;
#line 118
  writel(blc_pwm_ctl | (u32 )level, (void volatile   *)dev_priv->regs + 397908U);
#line 119
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static u32 intel_lvds_get_max_backlight(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;

  {
#line 127
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 129
  tmp = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 129
  return ((tmp >> 17) * 2U);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_set_power(struct drm_device *dev , bool on ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 pp_status ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 138
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 141
  if ((int )on) {
#line 142
    tmp = readl((void const volatile   *)dev_priv->regs + 397828U);
#line 142
    writel(tmp | 1U, (void volatile   *)dev_priv->regs + 397828U);
    ldv_25991: 
#line 145
    pp_status = readl((void const volatile   *)dev_priv->regs + 397824U);
#line 146
    if ((int )pp_status >= 0) {
#line 147
      goto ldv_25991;
    } else {

    }
#line 148
    intel_lvds_set_backlight(dev, dev_priv->backlight_duty_cycle);
  } else {
#line 150
    intel_lvds_set_backlight(dev, 0);
#line 152
    tmp___0 = readl((void const volatile   *)dev_priv->regs + 397828U);
#line 152
    writel(tmp___0 & 4294967294U, (void volatile   *)dev_priv->regs + 397828U);
    ldv_25993: 
#line 155
    pp_status = readl((void const volatile   *)dev_priv->regs + 397824U);
#line 156
    if ((int )pp_status < 0) {
#line 157
      goto ldv_25993;
    } else {

    }

  }
#line 162
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;

  {
#line 162
  dev = encoder->dev;
#line 164
  if (mode == 0) {
#line 165
    intel_lvds_set_power(dev, 1);
  } else {
#line 167
    intel_lvds_set_power(dev, 0);
  }
#line 168
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 tmp ;

  {
#line 174
  dev = connector->dev;
#line 175
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 177
  dev_priv->savePP_ON = readl((void const volatile   *)dev_priv->regs + 397832U);
#line 178
  dev_priv->savePP_OFF = readl((void const volatile   *)dev_priv->regs + 397836U);
#line 179
  dev_priv->savePP_CONTROL = readl((void const volatile   *)dev_priv->regs + 397828U);
#line 180
  dev_priv->savePP_DIVISOR = readl((void const volatile   *)dev_priv->regs + 397840U);
#line 181
  dev_priv->saveBLC_PWM_CTL = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 182
  dev_priv->backlight_duty_cycle = (int )dev_priv->saveBLC_PWM_CTL & 65535;
#line 188
  if (dev_priv->backlight_duty_cycle == 0) {
#line 189
    tmp = intel_lvds_get_max_backlight(dev);
#line 189
    dev_priv->backlight_duty_cycle = (int )tmp;
  } else {

  }
#line 191
  return;
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;

  {
#line 195
  dev = connector->dev;
#line 196
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 198
  writel(dev_priv->saveBLC_PWM_CTL, (void volatile   *)dev_priv->regs + 397908U);
#line 199
  writel(dev_priv->savePP_ON, (void volatile   *)dev_priv->regs + 397832U);
#line 200
  writel(dev_priv->savePP_OFF, (void volatile   *)dev_priv->regs + 397836U);
#line 201
  writel(dev_priv->savePP_DIVISOR, (void volatile   *)dev_priv->regs + 397840U);
#line 202
  writel(dev_priv->savePP_CONTROL, (void volatile   *)dev_priv->regs + 397828U);
#line 203
  if ((int )dev_priv->savePP_CONTROL & 1) {
#line 204
    intel_lvds_set_power(dev, 1);
  } else {
#line 206
    intel_lvds_set_power(dev, 0);
  }
#line 207
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static int intel_lvds_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_display_mode *fixed_mode ;

  {
#line 212
  dev = connector->dev;
#line 213
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 214
  fixed_mode = dev_priv->panel_fixed_mode;
#line 216
  if ((unsigned long )fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 217
    if (mode->hdisplay > fixed_mode->hdisplay) {
#line 218
      return (29);
    } else {

    }
#line 219
    if (mode->vdisplay > fixed_mode->vdisplay) {
#line 220
      return (29);
    } else {

    }
  } else {

  }
#line 223
  return (0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static bool intel_lvds_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct drm_encoder *tmp_encoder ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 230
  dev = encoder->dev;
#line 231
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 232
  __mptr = (struct drm_crtc  const  *)encoder->crtc;
#line 232
  intel_crtc = (struct intel_crtc *)__mptr;
#line 236
  if ((((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) && intel_crtc->pipe == 0) {
#line 237
    printk("<3>Can\'t support LVDS on pipe A\n");
#line 238
    return (0);
  } else {

  }
#line 242
  __mptr___0 = (struct list_head  const  *)dev->mode_config.encoder_list.next;
#line 242
  tmp_encoder = (struct drm_encoder *)__mptr___0 + 0xfffffffffffffff8UL;
#line 242
  goto ldv_26033;
  ldv_26032: ;
#line 243
  if ((unsigned long )tmp_encoder != (unsigned long )encoder && (unsigned long )tmp_encoder->crtc == (unsigned long )encoder->crtc) {
#line 244
    printk("<3>Can\'t enable LVDS and another encoder on the same pipe\n");
#line 246
    return (0);
  } else {

  }
#line 242
  __mptr___1 = (struct list_head  const  *)tmp_encoder->head.next;
#line 242
  tmp_encoder = (struct drm_encoder *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26033: 
#line 242
  __builtin_prefetch((void const   *)tmp_encoder->head.next);
#line 242
  if ((unsigned long )(& tmp_encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {
#line 243
    goto ldv_26032;
  } else {

  }

#line 256
  if ((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 257
    adjusted_mode->hdisplay = (dev_priv->panel_fixed_mode)->hdisplay;
#line 258
    adjusted_mode->hsync_start = (dev_priv->panel_fixed_mode)->hsync_start;
#line 260
    adjusted_mode->hsync_end = (dev_priv->panel_fixed_mode)->hsync_end;
#line 262
    adjusted_mode->htotal = (dev_priv->panel_fixed_mode)->htotal;
#line 263
    adjusted_mode->vdisplay = (dev_priv->panel_fixed_mode)->vdisplay;
#line 264
    adjusted_mode->vsync_start = (dev_priv->panel_fixed_mode)->vsync_start;
#line 266
    adjusted_mode->vsync_end = (dev_priv->panel_fixed_mode)->vsync_end;
#line 268
    adjusted_mode->vtotal = (dev_priv->panel_fixed_mode)->vtotal;
#line 269
    adjusted_mode->clock = (dev_priv->panel_fixed_mode)->clock;
#line 270
    drm_mode_set_crtcinfo(adjusted_mode, 1);
  } else {

  }
#line 279
  return (1);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_prepare(struct drm_encoder *encoder ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;

  {
#line 284
  dev = encoder->dev;
#line 285
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 287
  dev_priv->saveBLC_PWM_CTL = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 288
  dev_priv->backlight_duty_cycle = (int )dev_priv->saveBLC_PWM_CTL & 65535;
#line 291
  intel_lvds_set_power(dev, 0);
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_commit(struct drm_encoder *encoder ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 tmp ;

  {
#line 296
  dev = encoder->dev;
#line 297
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 299
  if (dev_priv->backlight_duty_cycle == 0) {
#line 300
    tmp = intel_lvds_get_max_backlight(dev);
#line 300
    dev_priv->backlight_duty_cycle = (int )tmp;
  } else {

  }
#line 303
  intel_lvds_set_power(dev, 1);
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  u32 pfit_control ;

  {
#line 310
  dev = encoder->dev;
#line 311
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 312
  __mptr = (struct drm_crtc  const  *)encoder->crtc;
#line 312
  intel_crtc = (struct intel_crtc *)__mptr;
#line 326
  if (mode->hdisplay != adjusted_mode->hdisplay || mode->vdisplay != adjusted_mode->vdisplay) {
#line 328
    pfit_control = 2147485280U;
  } else {
#line 332
    pfit_control = 0U;
  }
#line 334
  if (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) {
#line 335
    if ((int )dev_priv->panel_wants_dither) {
#line 336
      pfit_control = pfit_control | 8U;
    } else {
#line 339
      pfit_control = (u32 )(intel_crtc->pipe << 29) | pfit_control;
    }
  } else {

  }
#line 341
  writel(pfit_control, (void volatile   *)dev_priv->regs + 397872U);
#line 342
  return;
}
}
#line 350 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static enum drm_connector_status intel_lvds_detect(struct drm_connector *connector ) 
{ 


  {
#line 352
  return (connector_status_connected);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static int intel_lvds_get_modes(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct drm_i915_private *dev_priv ;
  int ret ;
  struct drm_display_mode *mode ;

  {
#line 360
  dev = connector->dev;
#line 361
  __mptr = (struct drm_connector  const  *)connector;
#line 361
  intel_output = (struct intel_output *)__mptr;
#line 362
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 363
  ret = 0;
#line 365
  ret = intel_ddc_get_modes(intel_output);
#line 367
  if (ret != 0) {
#line 368
    return (ret);
  } else {

  }
#line 374
  connector->display_info.min_vfreq = 0U;
#line 375
  connector->display_info.max_vfreq = 200U;
#line 376
  connector->display_info.min_hfreq = 0U;
#line 377
  connector->display_info.max_hfreq = 200U;
#line 379
  if ((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 382
    mutex_unlock(& dev->mode_config.mutex);
#line 383
    mode = drm_mode_duplicate(dev, dev_priv->panel_fixed_mode);
#line 384
    drm_mode_probed_add(connector, mode);
#line 385
    mutex_unlock(& dev->mode_config.mutex);
#line 387
    return (1);
  } else {

  }
#line 390
  return (0);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 402
  __mptr = (struct drm_connector  const  *)connector;
#line 402
  intel_output = (struct intel_output *)__mptr;
#line 404
  if ((unsigned long )intel_output->ddc_bus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 405
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 406
  drm_sysfs_connector_remove(connector);
#line 407
  drm_connector_cleanup(connector);
#line 408
  kfree((void const   *)connector);
#line 409
  return;
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static struct drm_encoder_helper_funcs  const  intel_lvds_helper_funcs  = 
#line 411
     {& intel_lvds_dpms, 0, 0, & intel_lvds_mode_fixup, & intel_lvds_prepare, & intel_lvds_commit,
    & intel_lvds_mode_set, 0};
#line 419 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static struct drm_connector_helper_funcs  const  intel_lvds_connector_helper_funcs  =    {& intel_lvds_get_modes,
    & intel_lvds_mode_valid, & intel_best_encoder};
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static struct drm_connector_funcs  const  intel_lvds_connector_funcs  =    {0, & intel_lvds_save, & intel_lvds_restore, & intel_lvds_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_lvds_destroy};
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static void intel_lvds_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 436
  drm_encoder_cleanup(encoder);
#line 437
  return;
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
static struct drm_encoder_funcs  const  intel_lvds_enc_funcs  =    {& intel_lvds_enc_destroy};
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void intel_lvds_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector *connector ;
  struct drm_encoder *encoder ;
  struct drm_display_mode *scan ;
  struct drm_crtc *crtc ;
  u32 lvds ;
  int pipe ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 454
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 463
  tmp = kzalloc(1592UL, 208U);
#line 463
  intel_output = (struct intel_output *)tmp;
#line 464
  if ((unsigned long )intel_output == (unsigned long )((struct intel_output *)0)) {
#line 465
    return;
  } else {

  }
#line 468
  connector = & intel_output->base;
#line 469
  encoder = & intel_output->enc;
#line 470
  drm_connector_init(dev, & intel_output->base, & intel_lvds_connector_funcs, 7);
#line 473
  drm_encoder_init(dev, & intel_output->enc, & intel_lvds_enc_funcs, 3);
#line 476
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 477
  intel_output->type = 4;
#line 479
  drm_encoder_helper_add(encoder, & intel_lvds_helper_funcs);
#line 480
  drm_connector_helper_add(connector, & intel_lvds_connector_helper_funcs);
#line 481
  connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 482
  connector->interlace_allowed = 0;
#line 483
  connector->doublescan_allowed = 0;
#line 497
  intel_output->ddc_bus = intel_i2c_create(dev, 20504U, "LVDSDDC_C");
#line 498
  if ((unsigned long )intel_output->ddc_bus == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 499
    tmp___0 = dev_name((struct device  const  *)(& (dev->pdev)->dev));
#line 499
    tmp___1 = dev_driver_string((struct device  const  *)(& (dev->pdev)->dev));
#line 499
    printk("<3>%s %s: DDC bus registration failed.\n", tmp___1, tmp___0);
#line 501
    goto failed;
  } else {

  }
#line 508
  intel_ddc_get_modes(intel_output);
#line 510
  __mptr = (struct list_head  const  *)connector->probed_modes.next;
#line 510
  scan = (struct drm_display_mode *)__mptr;
#line 510
  goto ldv_26100;
  ldv_26099: 
#line 511
  mutex_lock_nested(& dev->mode_config.mutex, 0U);
#line 512
  if ((scan->type & 8) != 0) {
#line 513
    dev_priv->panel_fixed_mode = drm_mode_duplicate(dev, scan);
#line 515
    mutex_unlock(& dev->mode_config.mutex);
#line 516
    goto out;
  } else {

  }
#line 518
  mutex_unlock(& dev->mode_config.mutex);
#line 510
  __mptr___0 = (struct list_head  const  *)scan->head.next;
#line 510
  scan = (struct drm_display_mode *)__mptr___0;
  ldv_26100: 
#line 510
  __builtin_prefetch((void const   *)scan->head.next);
#line 510
  if ((unsigned long )(& scan->head) != (unsigned long )(& connector->probed_modes)) {
#line 511
    goto ldv_26099;
  } else {

  }

#line 522
  if ((unsigned long )dev_priv->vbt_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 523
    mutex_lock_nested(& dev->mode_config.mutex, 0U);
#line 524
    dev_priv->panel_fixed_mode = drm_mode_duplicate(dev, dev_priv->vbt_mode);
#line 526
    mutex_unlock(& dev->mode_config.mutex);
  } else {

  }
#line 534
  lvds = readl((void const volatile   *)dev_priv->regs + 397696U);
#line 535
  pipe = (lvds & 1073741824U) != 0U;
#line 536
  crtc = intel_get_crtc_from_pipe(dev, pipe);
#line 538
  if ((unsigned long )crtc != (unsigned long )((struct drm_crtc *)0) && (int )lvds < 0) {
#line 539
    dev_priv->panel_fixed_mode = intel_crtc_mode_get(dev, crtc);
#line 540
    if ((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 541
      (dev_priv->panel_fixed_mode)->type = (dev_priv->panel_fixed_mode)->type | 8;
#line 543
      goto out;
    } else {

    }
  } else {

  }
#line 548
  if ((unsigned long )dev_priv->panel_fixed_mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 549
    goto failed;
  } else {

  }
#line 556
  if (dev->pci_device == 10146 || dev->pci_device == 10158) {
#line 558
    if ((unsigned int )(dev->pdev)->subsystem_vendor == 41120U) {
#line 559
      goto failed;
    } else {

    }
#line 561
    if ((unsigned int )(dev->pdev)->subsystem_vendor == 32902U && (unsigned int )(dev->pdev)->subsystem_device == 29296U) {
#line 573
      if (((unsigned long )dev_priv->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0) && (dev_priv->panel_fixed_mode)->hdisplay == 800) && (dev_priv->panel_fixed_mode)->vdisplay == 600) {
#line 576
        if (drm_debug != 0U) {
#line 576
          printk("<7>[drm:%s] Suspected Mac Mini, ignoring the LVDS\n", "intel_lvds_init");
        } else {

        }
#line 577
        goto failed;
      } else {

      }
    } else {

    }
  } else {

  }
  out: 
#line 584
  drm_sysfs_connector_add(connector);
#line 585
  return;
  failed: ;
#line 588
  if (drm_debug != 0U) {
#line 588
    printk("<7>[drm:%s] No LVDS modes found, disabling.\n", "intel_lvds_init");
  } else {

  }
#line 589
  if ((unsigned long )intel_output->ddc_bus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 590
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 591
  drm_connector_cleanup(connector);
#line 592
  kfree((void const   *)connector);
#line 593
  return;
}
}
#line 632 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv_main11_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_lvds_dpms_3_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_lvds_mode_fixup_7_p2 ;
  struct drm_display_mode *var_intel_lvds_mode_set_10_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 688
  LDV_IN_INTERRUPT = 1;
#line 697
  ldv_initialize();
#line 707
  goto ldv_26140;
  ldv_26139: 
#line 710
  tmp = nondet_int();
#line 710
  switch (tmp) {
  case 0: 
#line 720
  ldv_handler_precall();
#line 721
  intel_lvds_dpms(var_group1, var_intel_lvds_dpms_3_p1);
#line 728
  goto ldv_26126;
  case 1: 
#line 737
  ldv_handler_precall();
#line 738
  intel_lvds_mode_fixup(var_group1, var_group2, var_intel_lvds_mode_fixup_7_p2);
#line 745
  goto ldv_26126;
  case 2: 
#line 754
  ldv_handler_precall();
#line 755
  intel_lvds_prepare(var_group1);
#line 762
  goto ldv_26126;
  case 3: 
#line 771
  ldv_handler_precall();
#line 772
  intel_lvds_mode_set(var_group1, var_group2, var_intel_lvds_mode_set_10_p2);
#line 779
  goto ldv_26126;
  case 4: 
#line 788
  ldv_handler_precall();
#line 789
  intel_lvds_commit(var_group1);
#line 796
  goto ldv_26126;
  case 5: 
#line 805
  ldv_handler_precall();
#line 806
  intel_lvds_get_modes(var_group3);
#line 813
  goto ldv_26126;
  case 6: 
#line 822
  ldv_handler_precall();
#line 823
  intel_lvds_mode_valid(var_group3, var_group2);
#line 830
  goto ldv_26126;
  case 7: 
#line 839
  ldv_handler_precall();
#line 840
  intel_lvds_save(var_group3);
#line 847
  goto ldv_26126;
  case 8: 
#line 856
  ldv_handler_precall();
#line 857
  intel_lvds_restore(var_group3);
#line 864
  goto ldv_26126;
  case 9: 
#line 873
  ldv_handler_precall();
#line 874
  intel_lvds_detect(var_group3);
#line 881
  goto ldv_26126;
  case 10: 
#line 890
  ldv_handler_precall();
#line 891
  intel_lvds_destroy(var_group3);
#line 898
  goto ldv_26126;
  case 11: 
#line 907
  ldv_handler_precall();
#line 908
  intel_lvds_enc_destroy(var_group1);
#line 915
  goto ldv_26126;
  default: ;
#line 916
  goto ldv_26126;
  }
  ldv_26126: ;
  ldv_26140: 
#line 707
  tmp___0 = nondet_int();
#line 707
  if (tmp___0 != 0) {
#line 708
    goto ldv_26139;
  } else {

  }


#line 925
  ldv_check_final_state();
#line 928
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_417(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 937
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 939
  __ldv_spin_lock(ldv_func_arg1);
#line 940
  return;
}
}
#line 942 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_418(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 947
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 949
  __ldv_spin_unlock(ldv_func_arg1);
#line 950
  return;
}
}
#line 952 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
int ldv___ldv_spin_trylock_419(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 957
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 957
  ldv_func_res = tmp;
#line 959
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 959
  return (tmp___0);
#line 961
  return (ldv_func_res);
}
}
#line 964 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_420(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 969
  ldv_spin_lock_siglock_of_sighand_struct();
#line 971
  __ldv_spin_lock(ldv_func_arg1);
#line 972
  return;
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_421(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 979
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 981
  __ldv_spin_unlock(ldv_func_arg1);
#line 982
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_422(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 989
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 991
  __ldv_spin_lock(ldv_func_arg1);
#line 992
  return;
}
}
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_423(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 999
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1001
  __ldv_spin_unlock(ldv_func_arg1);
#line 1002
  return;
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_424(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1009
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1011
  __ldv_spin_unlock(ldv_func_arg1);
#line 1012
  return;
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_425(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1019
  ldv_spin_lock_dcache_lock();
#line 1021
  __ldv_spin_lock(ldv_func_arg1);
#line 1022
  return;
}
}
#line 1024 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_426(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1029
  ldv_spin_lock_d_lock_of_dentry();
#line 1031
  __ldv_spin_lock(ldv_func_arg1);
#line 1032
  return;
}
}
#line 1034 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_427(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1039
  ldv_spin_unlock_d_lock_of_dentry();
#line 1041
  __ldv_spin_unlock(ldv_func_arg1);
#line 1042
  return;
}
}
#line 1044 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_428(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1049
  ldv_spin_unlock_dcache_lock();
#line 1051
  __ldv_spin_unlock(ldv_func_arg1);
#line 1052
  return;
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_429(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1059
  ldv_spin_lock_d_lock_of_dentry();
#line 1061
  __ldv_spin_lock(ldv_func_arg1);
#line 1062
  return;
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_430(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1069
  ldv_spin_unlock_d_lock_of_dentry();
#line 1071
  __ldv_spin_unlock(ldv_func_arg1);
#line 1072
  return;
}
}
#line 1074 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_431(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1079
  ldv_spin_lock_i_lock_of_inode();
#line 1081
  __ldv_spin_lock(ldv_func_arg1);
#line 1082
  return;
}
}
#line 1084 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_432(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1089
  ldv_spin_unlock_i_lock_of_inode();
#line 1091
  __ldv_spin_unlock(ldv_func_arg1);
#line 1092
  return;
}
}
#line 1094 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_lock_433(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1099
  ldv_spin_lock_d_lock_of_dentry();
#line 1101
  __ldv_spin_lock(ldv_func_arg1);
#line 1102
  return;
}
}
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_lvds.c.prepared"
void ldv___ldv_spin_unlock_434(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1109
  ldv_spin_unlock_d_lock_of_dentry();
#line 1111
  __ldv_spin_unlock(ldv_func_arg1);
#line 1112
  return;
}
}
#line 52 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_453(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_456(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_457(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_460(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_462(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_464(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_466(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_468(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_454(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_458(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_459(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_461(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_463(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_465(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_467(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_469(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_470(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_455(spinlock_t *ldv_func_arg1 ) ;
#line 652 "include/linux/pci.h"
extern void *pci_map_rom(struct pci_dev * , size_t * ) ;
#line 653
extern void pci_unmap_rom(struct pci_dev * , void * ) ;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
static void *find_section(struct bdb_header *bdb , int section_id ) 
{ 
  u8 *base ;
  int index ;
  u16 total ;
  u16 current_size ;
  u8 current_id ;

  {
#line 104
  base = (u8 *)bdb;
#line 105
  index = 0;
#line 110
  index = (int )bdb->header_size + index;
#line 111
  total = bdb->bdb_size;
#line 114
  goto ldv_25656;
  ldv_25655: 
#line 115
  current_id = *(base + (unsigned long )index);
#line 116
  index = index + 1;
#line 117
  current_size = *((u16 *)base + (unsigned long )index);
#line 118
  index = index + 2;
#line 119
  if ((int )current_id == section_id) {
#line 120
    return ((void *)base + (unsigned long )index);
  } else {

  }
#line 121
  index = (int )current_size + index;
  ldv_25656: ;
#line 114
  if ((int )total > index) {
#line 115
    goto ldv_25655;
  } else {

  }

#line 124
  return (0);
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
static void parse_panel_data(struct drm_i915_private *dev_priv , struct bdb_header *bdb ) 
{ 
  struct bdb_lvds_options *lvds_options ;
  struct bdb_lvds_lfp_data *lvds_lfp_data ;
  struct bdb_lvds_lfp_data_entry *entry ;
  struct lvds_dvo_timing *dvo_timing ;
  struct drm_display_mode *panel_fixed_mode ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 138
  dev_priv->lvds_dither = 0U;
#line 139
  dev_priv->lvds_vbt = 0U;
#line 141
  tmp = find_section(bdb, 40);
#line 141
  lvds_options = (struct bdb_lvds_options *)tmp;
#line 142
  if ((unsigned long )lvds_options == (unsigned long )((struct bdb_lvds_options *)0)) {
#line 143
    return;
  } else {

  }
#line 145
  dev_priv->lvds_dither = lvds_options->pixel_dither;
#line 146
  if ((unsigned int )lvds_options->panel_type == 255U) {
#line 147
    return;
  } else {

  }
#line 149
  tmp___0 = find_section(bdb, 42);
#line 149
  lvds_lfp_data = (struct bdb_lvds_lfp_data *)tmp___0;
#line 150
  if ((unsigned long )lvds_lfp_data == (unsigned long )((struct bdb_lvds_lfp_data *)0)) {
#line 151
    return;
  } else {

  }
#line 153
  dev_priv->lvds_vbt = 1U;
#line 155
  entry = (struct bdb_lvds_lfp_data_entry *)(& lvds_lfp_data->data) + (unsigned long )lvds_options->panel_type;
#line 156
  dvo_timing = & entry->dvo_timing;
#line 158
  tmp___1 = drm_calloc(1UL, 224UL, 2);
#line 158
  panel_fixed_mode = (struct drm_display_mode *)tmp___1;
#line 161
  panel_fixed_mode->hdisplay = ((int )dvo_timing->hactive_hi << 8) | (int )dvo_timing->hactive_lo;
#line 163
  panel_fixed_mode->hsync_start = panel_fixed_mode->hdisplay + (((int )dvo_timing->hsync_off_hi << 8) | (int )dvo_timing->hsync_off_lo);
#line 165
  panel_fixed_mode->hsync_end = panel_fixed_mode->hsync_start + (int )dvo_timing->hsync_pulse_width;
#line 167
  panel_fixed_mode->htotal = panel_fixed_mode->hdisplay + (((int )dvo_timing->hblank_hi << 8) | (int )dvo_timing->hblank_lo);
#line 170
  panel_fixed_mode->vdisplay = ((int )dvo_timing->vactive_hi << 8) | (int )dvo_timing->vactive_lo;
#line 172
  panel_fixed_mode->vsync_start = panel_fixed_mode->vdisplay + (int )dvo_timing->vsync_off;
#line 174
  panel_fixed_mode->vsync_end = panel_fixed_mode->vsync_start + (int )dvo_timing->vsync_pulse_width;
#line 176
  panel_fixed_mode->vtotal = panel_fixed_mode->vdisplay + (((int )dvo_timing->vblank_hi << 8) | (int )dvo_timing->vblank_lo);
#line 178
  panel_fixed_mode->clock = (int )dvo_timing->clock * 10;
#line 179
  panel_fixed_mode->type = 8;
#line 181
  drm_mode_set_name(panel_fixed_mode);
#line 183
  dev_priv->vbt_mode = panel_fixed_mode;
#line 185
  if (drm_debug != 0U) {
#line 185
    printk("<7>[drm:%s] Found panel mode in BIOS VBT tables:\n", "parse_panel_data");
  } else {

  }
#line 186
  drm_mode_debug_printmodeline(panel_fixed_mode);
#line 188
  return;
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
static void parse_general_features(struct drm_i915_private *dev_priv , struct bdb_header *bdb ) 
{ 
  struct bdb_general_features *general ;
  void *tmp ;

  {
#line 198
  dev_priv->int_tv_support = 1U;
#line 199
  dev_priv->int_crt_support = 1U;
#line 201
  tmp = find_section(bdb, 1);
#line 201
  general = (struct bdb_general_features *)tmp;
#line 202
  if ((unsigned long )general != (unsigned long )((struct bdb_general_features *)0)) {
#line 203
    dev_priv->int_tv_support = general->int_tv_support;
#line 204
    dev_priv->int_crt_support = general->int_crt_support;
  } else {

  }
#line 206
  return;
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
bool intel_init_bios(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct pci_dev *pdev ;
  struct vbt_header *vbt ;
  struct bdb_header *bdb ;
  u8 *bios ;
  size_t size ;
  int i ;
  void *tmp ;
  int tmp___0 ;

  {
#line 225
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 226
  pdev = dev->pdev;
#line 227
  vbt = 0;
#line 233
  tmp = pci_map_rom(pdev, & size);
#line 233
  bios = (u8 *)tmp;
#line 234
  if ((unsigned long )bios == (unsigned long )((u8 *)0)) {
#line 235
    return (1);
  } else {

  }
#line 238
  i = 0;
#line 238
  goto ldv_25685;
  ldv_25684: 
#line 239
  tmp___0 = memcmp((void const   *)bios + (unsigned long )i, (void const   *)"$VBT",
                   4UL);
#line 239
  if (tmp___0 == 0) {
#line 240
    vbt = (struct vbt_header *)bios + (unsigned long )i;
#line 241
    goto ldv_25683;
  } else {

  }
#line 238
  i = i + 1;
  ldv_25685: ;
#line 238
  if ((size_t )(i + 4) < size) {
#line 239
    goto ldv_25684;
  } else {

  }
  ldv_25683: ;
#line 245
  if ((unsigned long )vbt == (unsigned long )((struct vbt_header *)0)) {
#line 246
    printk("<3>[drm:%s] *ERROR* VBT signature missing\n", "intel_init_bios");
#line 247
    pci_unmap_rom(pdev, (void *)bios);
#line 248
    return (1);
  } else {

  }
#line 251
  bdb = (struct bdb_header *)(bios + ((unsigned long )i + (unsigned long )vbt->bdb_offset));
#line 254
  parse_general_features(dev_priv, bdb);
#line 255
  parse_panel_data(dev_priv, bdb);
#line 257
  pci_unmap_rom(pdev, (void *)bios);
#line 259
  return (0);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_453(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 267
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 269
  __ldv_spin_lock(ldv_func_arg1);
#line 270
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_454(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 277
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 279
  __ldv_spin_unlock(ldv_func_arg1);
#line 280
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
int ldv___ldv_spin_trylock_455(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 287
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 287
  ldv_func_res = tmp;
#line 289
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 289
  return (tmp___0);
#line 291
  return (ldv_func_res);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_456(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 299
  ldv_spin_lock_dcache_lock();
#line 301
  __ldv_spin_lock(ldv_func_arg1);
#line 302
  return;
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_457(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 309
  ldv_spin_lock_d_lock_of_dentry();
#line 311
  __ldv_spin_lock(ldv_func_arg1);
#line 312
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_458(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 319
  ldv_spin_unlock_d_lock_of_dentry();
#line 321
  __ldv_spin_unlock(ldv_func_arg1);
#line 322
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_459(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 329
  ldv_spin_unlock_dcache_lock();
#line 331
  __ldv_spin_unlock(ldv_func_arg1);
#line 332
  return;
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_460(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 339
  ldv_spin_lock_d_lock_of_dentry();
#line 341
  __ldv_spin_lock(ldv_func_arg1);
#line 342
  return;
}
}
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_461(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 349
  ldv_spin_unlock_d_lock_of_dentry();
#line 351
  __ldv_spin_unlock(ldv_func_arg1);
#line 352
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_462(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 359
  ldv_spin_lock_i_lock_of_inode();
#line 361
  __ldv_spin_lock(ldv_func_arg1);
#line 362
  return;
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_463(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 369
  ldv_spin_unlock_i_lock_of_inode();
#line 371
  __ldv_spin_unlock(ldv_func_arg1);
#line 372
  return;
}
}
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_464(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 379
  ldv_spin_lock_d_lock_of_dentry();
#line 381
  __ldv_spin_lock(ldv_func_arg1);
#line 382
  return;
}
}
#line 384 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_465(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 389
  ldv_spin_unlock_d_lock_of_dentry();
#line 391
  __ldv_spin_unlock(ldv_func_arg1);
#line 392
  return;
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_466(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 399
  ldv_spin_lock_siglock_of_sighand_struct();
#line 401
  __ldv_spin_lock(ldv_func_arg1);
#line 402
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_467(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 409
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 411
  __ldv_spin_unlock(ldv_func_arg1);
#line 412
  return;
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_lock_468(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 419
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 421
  __ldv_spin_lock(ldv_func_arg1);
#line 422
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_469(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 429
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 431
  __ldv_spin_unlock(ldv_func_arg1);
#line 432
  return;
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_bios.c.prepared"
void ldv___ldv_spin_unlock_470(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 439
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 441
  __ldv_spin_unlock(ldv_func_arg1);
#line 442
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_489(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_492(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_494(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_497(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_498(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_501(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_503(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_505(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_490(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_493(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_495(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_496(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_499(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_500(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_502(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_504(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_506(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_491(spinlock_t *ldv_func_arg1 ) ;
#line 62 "include/linux/i2c.h"
extern int i2c_transfer(struct i2c_adapter * , struct i2c_msg * , int  ) ;
#line 132 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
struct drm_connector *intel_sdvo_find(struct drm_device *dev , int sdvoB ) ;
#line 133
int intel_sdvo_supports_hotplug(struct drm_connector *connector ) ;
#line 134
void intel_sdvo_set_hotplug(struct drm_connector *connector , int on ) ;
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_write_sdvox(struct intel_output *intel_output , u32 val ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_sdvo_priv *sdvo_priv ;
  u32 bval ;
  u32 cval ;
  int i ;

  {
#line 132
  dev = intel_output->base.dev;
#line 133
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 134
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 135
  bval = val;
#line 135
  cval = val;
#line 138
  if (sdvo_priv->output_device == 397632) {
#line 139
    cval = readl((void const volatile   *)dev_priv->regs + 397664U);
  } else {
#line 141
    bval = readl((void const volatile   *)dev_priv->regs + 397632U);
  }
#line 148
  i = 0;
#line 148
  goto ldv_25932;
  ldv_25931: 
#line 150
  writel(bval, (void volatile   *)dev_priv->regs + 397632U);
#line 151
  readl((void const volatile   *)dev_priv->regs + 397632U);
#line 152
  writel(cval, (void volatile   *)dev_priv->regs + 397664U);
#line 153
  readl((void const volatile   *)dev_priv->regs + 397664U);
#line 148
  i = i + 1;
  ldv_25932: ;
#line 148
  if (i <= 1) {
#line 149
    goto ldv_25931;
  } else {

  }

#line 153
  return;
}
}
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_read_byte(struct intel_output *intel_output , u8 addr , u8 *ch ) 
{ 
  struct intel_sdvo_priv *sdvo_priv ;
  u8 out_buf[2U] ;
  u8 buf[2U] ;
  int ret ;
  struct i2c_msg msgs[2U] ;

  {
#line 160
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 165
  msgs[0].addr = (unsigned short )(sdvo_priv->i2c_bus)->slave_addr;
#line 165
  msgs[0].flags = 0U;
#line 165
  msgs[0].len = 1U;
#line 165
  msgs[0].buf = (__u8 *)(& out_buf);
#line 165
  msgs[1].addr = (unsigned short )(sdvo_priv->i2c_bus)->slave_addr;
#line 165
  msgs[1].flags = 1U;
#line 165
  msgs[1].len = 1U;
#line 165
  msgs[1].buf = (__u8 *)(& buf);
#line 180
  out_buf[0] = addr;
#line 181
  out_buf[1] = 0U;
#line 183
  ret = i2c_transfer(& (sdvo_priv->i2c_bus)->adapter, (struct i2c_msg *)(& msgs),
                     2);
#line 183
  if (ret == 2) {
#line 185
    *ch = buf[0];
#line 186
    return (1);
  } else {

  }
#line 189
  if (drm_debug != 0U) {
#line 189
    printk("<7>[drm:%s] i2c transfer returned %d\n", "intel_sdvo_read_byte", ret);
  } else {

  }
#line 190
  return (0);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_write_byte(struct intel_output *intel_output , int addr , u8 ch ) 
{ 
  u8 out_buf[2U] ;
  struct i2c_msg msgs[1U] ;
  int tmp ;

  {
#line 197
  msgs[0].addr = (unsigned short )(intel_output->i2c_bus)->slave_addr;
#line 197
  msgs[0].flags = 0U;
#line 197
  msgs[0].len = 2U;
#line 197
  msgs[0].buf = (__u8 *)(& out_buf);
#line 206
  out_buf[0] = (u8 )addr;
#line 207
  out_buf[1] = ch;
#line 209
  tmp = i2c_transfer(& (intel_output->i2c_bus)->adapter, (struct i2c_msg *)(& msgs),
                     1);
#line 209
  if (tmp == 1) {
#line 211
    return (1);
  } else {

  }
#line 213
  return (0);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_write_cmd(struct intel_output *intel_output , u8 cmd , void *args ,
                                 int args_len ) 
{ 
  int i ;

  {
#line 297
  i = 0;
#line 297
  goto ldv_25964;
  ldv_25963: 
#line 298
  intel_sdvo_write_byte(intel_output, 7 - i, (int )*((u8 *)args + (unsigned long )i));
#line 297
  i = i + 1;
  ldv_25964: ;
#line 297
  if (i < args_len) {
#line 298
    goto ldv_25963;
  } else {

  }
#line 302
  intel_sdvo_write_byte(intel_output, 8, (int )cmd);
#line 303
  return;
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static u8 intel_sdvo_read_response(struct intel_output *intel_output , void *response ,
                                   int response_len ) 
{ 
  int i ;
  u8 status ;
  u8 retry ;
  unsigned long __ms ;
  unsigned long tmp ;
  u8 tmp___0 ;

  {
#line 342
  retry = 50U;
#line 344
  goto ldv_25982;
  ldv_25981: 
#line 346
  i = 0;
#line 346
  goto ldv_25975;
  ldv_25974: 
#line 347
  intel_sdvo_read_byte(intel_output, (int )((unsigned int )((u8 )i) + 10U), (u8 *)response + (unsigned long )i);
#line 346
  i = i + 1;
  ldv_25975: ;
#line 346
  if (i < response_len) {
#line 347
    goto ldv_25974;
  } else {

  }
#line 353
  intel_sdvo_read_byte(intel_output, 9, & status);
#line 358
  if ((unsigned int )status != 4U) {
#line 359
    return (status);
  } else {

  }
#line 361
  __ms = 50UL;
#line 361
  goto ldv_25979;
  ldv_25978: 
#line 361
  __const_udelay(4295000UL);
  ldv_25979: 
#line 361
  tmp = __ms;
#line 361
  __ms = __ms - 1UL;
#line 361
  if (tmp != 0UL) {
#line 362
    goto ldv_25978;
  } else {

  }

  ldv_25982: 
#line 344
  tmp___0 = retry;
#line 344
  retry = (u8 )((int )retry - 1);
#line 344
  if ((unsigned int )tmp___0 != 0U) {
#line 345
    goto ldv_25981;
  } else {

  }

#line 364
  return (status);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static int intel_sdvo_get_pixel_multiplier(struct drm_display_mode *mode ) 
{ 


  {
#line 369
  if (mode->clock > 99999) {
#line 370
    return (1);
  } else
#line 371
  if (mode->clock > 49999) {
#line 372
    return (2);
  } else {
#line 374
    return (4);
  }
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_set_control_bus_switch(struct intel_output *intel_output ,
                                              u8 target ) 
{ 


  {
#line 385
  intel_sdvo_write_cmd(intel_output, 122, (void *)(& target), 1);
#line 386
  return;
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_target_input(struct intel_output *intel_output , bool target_0 ,
                                        bool target_1 ) 
{ 
  struct intel_sdvo_set_target_input_args targets ;
  u8 status ;

  {
#line 390
  targets.target_1 = 0U;
#line 390
  targets.pad = (unsigned char)0;
#line 393
  if ((int )target_0 && (int )target_1) {
#line 394
    return (1);
  } else {

  }
#line 396
  if ((int )target_1) {
#line 397
    targets.target_1 = 1U;
  } else {

  }
#line 399
  intel_sdvo_write_cmd(intel_output, 16, (void *)(& targets), 1);
#line 402
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 404
  return ((unsigned int )status == 1U);
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_trained_inputs(struct intel_output *intel_output , bool *input_1 ,
                                          bool *input_2 ) 
{ 
  struct intel_sdvo_get_trained_inputs_response response ;
  u8 status ;

  {
#line 418
  intel_sdvo_write_cmd(intel_output, 3, 0, 0);
#line 419
  status = intel_sdvo_read_response(intel_output, (void *)(& response), 1);
#line 420
  if ((unsigned int )status != 1U) {
#line 421
    return (0);
  } else {

  }
#line 423
  *input_1 = (int )response.input0_trained != 0;
#line 424
  *input_2 = (int )response.input1_trained != 0;
#line 425
  return (1);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_active_outputs(struct intel_output *intel_output , u16 *outputs ) 
{ 
  u8 status ;

  {
#line 433
  intel_sdvo_write_cmd(intel_output, 4, 0, 0);
#line 434
  status = intel_sdvo_read_response(intel_output, (void *)outputs, 2);
#line 436
  return ((unsigned int )status == 1U);
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_active_outputs(struct intel_output *intel_output , u16 outputs ) 
{ 
  u8 status ;

  {
#line 444
  intel_sdvo_write_cmd(intel_output, 5, (void *)(& outputs), 2);
#line 446
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 447
  return ((unsigned int )status == 1U);
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_input_pixel_clock_range(struct intel_output *intel_output ,
                                                   int *clock_min , int *clock_max ) 
{ 
  struct intel_sdvo_pixel_clock_range clocks ;
  u8 status ;

  {
#line 484
  intel_sdvo_write_cmd(intel_output, 29, 0, 0);
#line 487
  status = intel_sdvo_read_response(intel_output, (void *)(& clocks), 4);
#line 489
  if ((unsigned int )status != 1U) {
#line 490
    return (0);
  } else {

  }
#line 493
  *clock_min = (int )clocks.min * 10;
#line 494
  *clock_max = (int )clocks.max * 10;
#line 496
  return (1);
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_target_output(struct intel_output *intel_output , u16 outputs ) 
{ 
  u8 status ;

  {
#line 504
  intel_sdvo_write_cmd(intel_output, 17, (void *)(& outputs), 2);
#line 507
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 508
  return ((unsigned int )status == 1U);
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_timing(struct intel_output *intel_output , u8 cmd , struct intel_sdvo_dtd *dtd ) 
{ 
  u8 status ;

  {
#line 516
  intel_sdvo_write_cmd(intel_output, (int )cmd, 0, 0);
#line 517
  status = intel_sdvo_read_response(intel_output, (void *)(& dtd->part1), 8);
#line 519
  if ((unsigned int )status != 1U) {
#line 520
    return (0);
  } else {

  }
#line 522
  intel_sdvo_write_cmd(intel_output, (int )((unsigned int )cmd + 1U), 0, 0);
#line 523
  status = intel_sdvo_read_response(intel_output, (void *)(& dtd->part2), 8);
#line 525
  if ((unsigned int )status != 1U) {
#line 526
    return (0);
  } else {

  }
#line 528
  return (1);
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_input_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 534
  tmp = intel_sdvo_get_timing(intel_output, 18, dtd);
#line 534
  return (tmp);
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_output_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 541
  tmp = intel_sdvo_get_timing(intel_output, 24, dtd);
#line 541
  return (tmp);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_timing(struct intel_output *intel_output , u8 cmd , struct intel_sdvo_dtd *dtd ) 
{ 
  u8 status ;

  {
#line 550
  intel_sdvo_write_cmd(intel_output, (int )cmd, (void *)(& dtd->part1), 8);
#line 551
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 552
  if ((unsigned int )status != 1U) {
#line 553
    return (0);
  } else {

  }
#line 555
  intel_sdvo_write_cmd(intel_output, (int )((unsigned int )cmd + 1U), (void *)(& dtd->part2),
                       8);
#line 556
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 557
  if ((unsigned int )status != 1U) {
#line 558
    return (0);
  } else {

  }
#line 560
  return (1);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_input_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 566
  tmp = intel_sdvo_set_timing(intel_output, 20, dtd);
#line 566
  return (tmp);
}
}
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_output_timing(struct intel_output *intel_output , struct intel_sdvo_dtd *dtd ) 
{ 
  bool tmp ;

  {
#line 573
  tmp = intel_sdvo_set_timing(intel_output, 22, dtd);
#line 573
  return (tmp);
}
}
#line 578 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static int intel_sdvo_get_clock_rate_mult(struct intel_output *intel_output ) 
{ 
  u8 response ;
  u8 status ;

  {
#line 582
  intel_sdvo_write_cmd(intel_output, 32, 0, 0);
#line 583
  status = intel_sdvo_read_response(intel_output, (void *)(& response), 1);
#line 585
  if ((unsigned int )status != 1U) {
#line 586
    if (drm_debug != 0U) {
#line 586
      printk("<7>[drm:%s] Couldn\'t get SDVO clock rate multiplier\n", "intel_sdvo_get_clock_rate_mult");
    } else {

    }
#line 587
    return (1);
  } else
#line 589
  if (drm_debug != 0U) {
#line 589
    printk("<7>[drm:%s] Current clock rate multiplier: %d\n", "intel_sdvo_get_clock_rate_mult",
           (int )response);
  } else {

  }
#line 592
  return ((int )response);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_set_clock_rate_mult(struct intel_output *intel_output , u8 val ) 
{ 
  u8 status ;

  {
#line 599
  intel_sdvo_write_cmd(intel_output, 33, (void *)(& val), 1);
#line 600
  status = intel_sdvo_read_response(intel_output, 0, 0);
#line 601
  if ((unsigned int )status != 1U) {
#line 602
    return (0);
  } else {

  }
#line 604
  return (1);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                  struct drm_display_mode *adjusted_mode ) 
{ 
  int tmp ;

  {
#line 614
  tmp = intel_sdvo_get_pixel_multiplier(mode);
#line 614
  adjusted_mode->clock = adjusted_mode->clock * tmp;
#line 615
  return (1);
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_sdvo_priv *sdvo_priv ;
  u16 width ;
  u16 height ;
  u16 h_blank_len ;
  u16 h_sync_len ;
  u16 v_blank_len ;
  u16 v_sync_len ;
  u16 h_sync_offset ;
  u16 v_sync_offset ;
  u32 sdvox ;
  struct intel_sdvo_dtd output_dtd ;
  int sdvo_pixel_multiply ;
  int tmp ;

  {
#line 622
  dev = encoder->dev;
#line 623
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 624
  crtc = encoder->crtc;
#line 625
  __mptr = (struct drm_crtc  const  *)crtc;
#line 625
  intel_crtc = (struct intel_crtc *)__mptr;
#line 626
  __mptr___0 = (struct drm_encoder  const  *)encoder;
#line 626
  intel_output = (struct intel_output *)__mptr___0 + 0xfffffffffffffa38UL;
#line 627
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 635
  if ((unsigned long )mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 636
    return;
  } else {

  }
#line 638
  width = (u16 )mode->crtc_hdisplay;
#line 639
  height = (u16 )mode->crtc_vdisplay;
#line 642
  h_blank_len = (int )((u16 )mode->crtc_hblank_end) - (int )((u16 )mode->crtc_hblank_start);
#line 643
  h_sync_len = (int )((u16 )mode->crtc_hsync_end) - (int )((u16 )mode->crtc_hsync_start);
#line 645
  v_blank_len = (int )((u16 )mode->crtc_vblank_end) - (int )((u16 )mode->crtc_vblank_start);
#line 646
  v_sync_len = (int )((u16 )mode->crtc_vsync_end) - (int )((u16 )mode->crtc_vsync_start);
#line 648
  h_sync_offset = (int )((u16 )mode->crtc_hsync_start) - (int )((u16 )mode->crtc_hblank_start);
#line 649
  v_sync_offset = (int )((u16 )mode->crtc_vsync_start) - (int )((u16 )mode->crtc_vblank_start);
#line 651
  output_dtd.part1.clock = (u16 )(mode->clock / 10);
#line 652
  output_dtd.part1.h_active = (u8 )width;
#line 653
  output_dtd.part1.h_blank = (u8 )h_blank_len;
#line 654
  output_dtd.part1.h_high = (u8 )((int )((signed char )(((int )width >> 8) << 4)) | ((int )((signed char )((int )h_blank_len >> 8)) & 15));
#line 656
  output_dtd.part1.v_active = (u8 )height;
#line 657
  output_dtd.part1.v_blank = (u8 )v_blank_len;
#line 658
  output_dtd.part1.v_high = (u8 )((int )((signed char )(((int )height >> 8) << 4)) | ((int )((signed char )((int )v_blank_len >> 8)) & 15));
#line 661
  output_dtd.part2.h_sync_off = (u8 )h_sync_offset;
#line 662
  output_dtd.part2.h_sync_width = (u8 )h_sync_len;
#line 663
  output_dtd.part2.v_sync_off_width = (u8 )((int )((signed char )((int )v_sync_offset << 4)) | ((int )((signed char )v_sync_len) & 15));
#line 665
  output_dtd.part2.sync_off_width_high = (u8 )((((int )((signed char )(((int )h_sync_offset & 768) >> 2)) | (int )((signed char )(((int )h_sync_len & 768) >> 4))) | (int )((signed char )(((int )v_sync_offset & 48) >> 2))) | (int )((signed char )(((int )v_sync_len & 48) >> 4)));
#line 669
  output_dtd.part2.dtd_flags = 24U;
#line 670
  if ((int )mode->flags & 1) {
#line 671
    output_dtd.part2.dtd_flags = (u8 )((unsigned int )output_dtd.part2.dtd_flags | 2U);
  } else {

  }
#line 672
  if ((mode->flags & 4U) != 0U) {
#line 673
    output_dtd.part2.dtd_flags = (u8 )((unsigned int )output_dtd.part2.dtd_flags | 4U);
  } else {

  }
#line 675
  output_dtd.part2.sdvo_flags = 0U;
#line 676
  output_dtd.part2.v_sync_off_high = (unsigned int )((u8 )v_sync_offset) & 192U;
#line 677
  output_dtd.part2.reserved = 0U;
#line 680
  intel_sdvo_set_target_output(intel_output, (int )sdvo_priv->active_outputs);
#line 681
  intel_sdvo_set_output_timing(intel_output, & output_dtd);
#line 684
  intel_sdvo_set_target_input(intel_output, 1, 0);
#line 691
  intel_sdvo_set_input_timing(intel_output, & output_dtd);
#line 693
  tmp = intel_sdvo_get_pixel_multiplier(mode);
#line 693
  switch (tmp) {
  case 1: 
#line 695
  intel_sdvo_set_clock_rate_mult(intel_output, 1);
#line 697
  goto ldv_26109;
  case 2: 
#line 699
  intel_sdvo_set_clock_rate_mult(intel_output, 2);
#line 701
  goto ldv_26109;
  case 4: 
#line 703
  intel_sdvo_set_clock_rate_mult(intel_output, 8);
#line 705
  goto ldv_26109;
  }
  ldv_26109: 
#line 712
  sdvox = readl((void const volatile   *)dev_priv->regs + (unsigned long )sdvo_priv->output_device);
#line 713
  switch (sdvo_priv->output_device) {
  case 397632: 
#line 715
  sdvox = sdvox & 67321856U;
#line 716
  goto ldv_26113;
  case 397664: 
#line 718
  sdvox = sdvox & 67239936U;
#line 719
  goto ldv_26113;
  }
  ldv_26113: 
#line 721
  sdvox = sdvox | 4718720U;
#line 723
  if (intel_crtc->pipe == 1) {
#line 724
    sdvox = sdvox | 1073741824U;
  } else {

  }
#line 726
  sdvo_pixel_multiply = intel_sdvo_get_pixel_multiplier(mode);
#line 727
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {

  } else
#line 730
  if (dev->pci_device == 10098 || (dev->pci_device == 10146 || dev->pci_device == 10158)) {

  } else {
#line 734
    sdvox = (u32 )((sdvo_pixel_multiply + -1) << 23) | sdvox;
  }
#line 737
  intel_sdvo_write_sdvox(intel_output, sdvox);
#line 738
  return;
}
}
#line 740 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  u32 temp ;
  bool input1 ;
  bool input2 ;
  int i ;
  u8 status ;
  bool tmp ;

  {
#line 742
  dev = encoder->dev;
#line 743
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 744
  __mptr = (struct drm_encoder  const  *)encoder;
#line 744
  intel_output = (struct intel_output *)__mptr + 0xfffffffffffffa38UL;
#line 745
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 748
  if (mode != 0) {
#line 749
    intel_sdvo_set_active_outputs(intel_output, 0);
#line 753
    if (mode == 3) {
#line 754
      temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )sdvo_priv->output_device);
#line 755
      if ((int )temp < 0) {
#line 756
        intel_sdvo_write_sdvox(intel_output, temp & 2147483647U);
      } else {

      }
    } else {

    }
  } else {
#line 764
    temp = readl((void const volatile   *)dev_priv->regs + (unsigned long )sdvo_priv->output_device);
#line 765
    if ((int )temp >= 0) {
#line 766
      intel_sdvo_write_sdvox(intel_output, temp | 2147483648U);
    } else {

    }
#line 767
    i = 0;
#line 767
    goto ldv_26131;
    ldv_26130: 
#line 768
    intel_wait_for_vblank(dev);
#line 767
    i = i + 1;
    ldv_26131: ;
#line 767
    if (i <= 1) {
#line 768
      goto ldv_26130;
    } else {

    }
#line 770
    tmp = intel_sdvo_get_trained_inputs(intel_output, & input1, & input2);
#line 770
    status = (u8 )tmp;
#line 778
    if ((unsigned int )status == 1U && ! input1) {
#line 779
      if (drm_debug != 0U) {
#line 779
        printk("<7>[drm:%s] First %s output reported failure to sync\n", "intel_sdvo_dpms",
               sdvo_priv->output_device == 397632 ? (char *)"SDVOB" : (char *)"SDVOC");
      } else {

      }
    } else {

    }
#line 785
    intel_sdvo_set_active_outputs(intel_output, (int )sdvo_priv->active_outputs);
  }
#line 787
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  int o ;
  u16 this_output ;

  {
#line 792
  dev = connector->dev;
#line 793
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 794
  __mptr = (struct drm_connector  const  *)connector;
#line 794
  intel_output = (struct intel_output *)__mptr;
#line 795
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 798
  sdvo_priv->save_sdvo_mult = intel_sdvo_get_clock_rate_mult(intel_output);
#line 799
  intel_sdvo_get_active_outputs(intel_output, & sdvo_priv->save_active_outputs);
#line 801
  if ((int )sdvo_priv->caps.sdvo_inputs_mask & 1) {
#line 802
    intel_sdvo_set_target_input(intel_output, 1, 0);
#line 803
    intel_sdvo_get_input_timing(intel_output, & sdvo_priv->save_input_dtd_1);
  } else {

  }
#line 807
  if (((int )sdvo_priv->caps.sdvo_inputs_mask & 2) != 0) {
#line 808
    intel_sdvo_set_target_input(intel_output, 0, 1);
#line 809
    intel_sdvo_get_input_timing(intel_output, & sdvo_priv->save_input_dtd_2);
  } else {

  }
#line 813
  o = 0;
#line 813
  goto ldv_26146;
  ldv_26145: 
#line 815
  this_output = (u16 )(1 << o);
#line 816
  if ((unsigned int )((int )sdvo_priv->caps.output_flags & (int )this_output) != 0U) {
#line 818
    intel_sdvo_set_target_output(intel_output, (int )this_output);
#line 819
    intel_sdvo_get_output_timing(intel_output, (struct intel_sdvo_dtd *)(& sdvo_priv->save_output_dtd) + (unsigned long )o);
  } else {

  }
#line 813
  o = o + 1;
  ldv_26146: ;
#line 813
  if (o <= 14) {
#line 814
    goto ldv_26145;
  } else {

  }
#line 824
  sdvo_priv->save_SDVOX = readl((void const volatile   *)dev_priv->regs + (unsigned long )sdvo_priv->output_device);
#line 825
  return;
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;
  int o ;
  int i ;
  bool input1 ;
  bool input2 ;
  u8 status ;
  u16 this_output ;
  bool tmp ;

  {
#line 829
  dev = connector->dev;
#line 830
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 831
  __mptr = (struct drm_connector  const  *)connector;
#line 831
  intel_output = (struct intel_output *)__mptr;
#line 832
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 838
  intel_sdvo_set_active_outputs(intel_output, 0);
#line 840
  o = 0;
#line 840
  goto ldv_26164;
  ldv_26163: 
#line 842
  this_output = (u16 )(1 << o);
#line 843
  if ((unsigned int )((int )sdvo_priv->caps.output_flags & (int )this_output) != 0U) {
#line 844
    intel_sdvo_set_target_output(intel_output, (int )this_output);
#line 845
    intel_sdvo_set_output_timing(intel_output, (struct intel_sdvo_dtd *)(& sdvo_priv->save_output_dtd) + (unsigned long )o);
  } else {

  }
#line 840
  o = o + 1;
  ldv_26164: ;
#line 840
  if (o <= 14) {
#line 841
    goto ldv_26163;
  } else {

  }

#line 849
  if ((int )sdvo_priv->caps.sdvo_inputs_mask & 1) {
#line 850
    intel_sdvo_set_target_input(intel_output, 1, 0);
#line 851
    intel_sdvo_set_input_timing(intel_output, & sdvo_priv->save_input_dtd_1);
  } else {

  }
#line 854
  if (((int )sdvo_priv->caps.sdvo_inputs_mask & 2) != 0) {
#line 855
    intel_sdvo_set_target_input(intel_output, 0, 1);
#line 856
    intel_sdvo_set_input_timing(intel_output, & sdvo_priv->save_input_dtd_2);
  } else {

  }
#line 859
  intel_sdvo_set_clock_rate_mult(intel_output, (int )((u8 )sdvo_priv->save_sdvo_mult));
#line 861
  writel(sdvo_priv->save_SDVOX, (void volatile   *)dev_priv->regs + (unsigned long )sdvo_priv->output_device);
#line 863
  if ((int )sdvo_priv->save_SDVOX < 0) {
#line 865
    i = 0;
#line 865
    goto ldv_26167;
    ldv_26166: 
#line 866
    intel_wait_for_vblank(dev);
#line 865
    i = i + 1;
    ldv_26167: ;
#line 865
    if (i <= 1) {
#line 866
      goto ldv_26166;
    } else {

    }
#line 867
    tmp = intel_sdvo_get_trained_inputs(intel_output, & input1, & input2);
#line 867
    status = (u8 )tmp;
#line 868
    if ((unsigned int )status == 1U && ! input1) {
#line 869
      if (drm_debug != 0U) {
#line 869
        printk("<7>[drm:%s] First %s output reported failure to sync\n", "intel_sdvo_restore",
               sdvo_priv->output_device == 397632 ? (char *)"SDVOB" : (char *)"SDVOC");
      } else {

      }
    } else {

    }
  } else {

  }
#line 873
  intel_sdvo_set_active_outputs(intel_output, (int )sdvo_priv->save_active_outputs);
#line 874
  return;
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static int intel_sdvo_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_sdvo_priv *sdvo_priv ;

  {
#line 879
  __mptr = (struct drm_connector  const  *)connector;
#line 879
  intel_output = (struct intel_output *)__mptr;
#line 880
  sdvo_priv = (struct intel_sdvo_priv *)intel_output->dev_priv;
#line 882
  if ((mode->flags & 32U) != 0U) {
#line 883
    return (8);
  } else {

  }
#line 885
  if (sdvo_priv->pixel_clock_min > mode->clock) {
#line 886
    return (16);
  } else {

  }
#line 888
  if (sdvo_priv->pixel_clock_max < mode->clock) {
#line 889
    return (15);
  } else {

  }
#line 891
  return (0);
}
}
#line 894 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static bool intel_sdvo_get_capabilities(struct intel_output *intel_output , struct intel_sdvo_caps *caps ) 
{ 
  u8 status ;

  {
#line 898
  intel_sdvo_write_cmd(intel_output, 2, 0, 0);
#line 899
  status = intel_sdvo_read_response(intel_output, (void *)caps, 8);
#line 900
  if ((unsigned int )status != 1U) {
#line 901
    return (0);
  } else {

  }
#line 903
  return (1);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
struct drm_connector *intel_sdvo_find(struct drm_device *dev , int sdvoB ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *iout ;
  struct intel_sdvo_priv *sdvo ;
  struct list_head  const  *__mptr ;
  struct drm_connector  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 908
  connector = 0;
#line 909
  iout = 0;
#line 913
  __mptr = (struct list_head  const  *)dev->mode_config.connector_list.next;
#line 913
  connector = (struct drm_connector *)__mptr + 0xfffffffffffffc18UL;
#line 913
  goto ldv_26198;
  ldv_26197: 
#line 914
  __mptr___0 = (struct drm_connector  const  *)connector;
#line 914
  iout = (struct intel_output *)__mptr___0;
#line 916
  if (iout->type != 3) {
#line 917
    goto ldv_26196;
  } else {

  }
#line 919
  sdvo = (struct intel_sdvo_priv *)iout->dev_priv;
#line 921
  if (sdvo->output_device == 397632 && sdvoB != 0) {
#line 922
    return (connector);
  } else {

  }
#line 924
  if (sdvo->output_device == 397664 && sdvoB == 0) {
#line 925
    return (connector);
  } else {

  }
  ldv_26196: 
#line 913
  __mptr___1 = (struct list_head  const  *)connector->head.next;
#line 913
  connector = (struct drm_connector *)__mptr___1 + 0xfffffffffffffc18UL;
  ldv_26198: 
#line 913
  __builtin_prefetch((void const   *)connector->head.next);
#line 913
  if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {
#line 914
    goto ldv_26197;
  } else {

  }

#line 929
  return (0);
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
int intel_sdvo_supports_hotplug(struct drm_connector *connector ) 
{ 
  u8 response[2U] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 937
  if (drm_debug != 0U) {
#line 937
    printk("<7>[drm:%s] \n", "intel_sdvo_supports_hotplug");
  } else {

  }
#line 939
  if ((unsigned long )connector == (unsigned long )((struct drm_connector *)0)) {
#line 940
    return (0);
  } else {

  }
#line 942
  __mptr = (struct drm_connector  const  *)connector;
#line 942
  intel_output = (struct intel_output *)__mptr;
#line 944
  intel_sdvo_write_cmd(intel_output, 12, 0, 0);
#line 945
  status = intel_sdvo_read_response(intel_output, (void *)(& response), 2);
#line 947
  if ((unsigned int )response[0] != 0U) {
#line 948
    return (1);
  } else {

  }
#line 950
  return (0);
}
}
#line 953 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void intel_sdvo_set_hotplug(struct drm_connector *connector , int on ) 
{ 
  u8 response[2U] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 957
  __mptr = (struct drm_connector  const  *)connector;
#line 957
  intel_output = (struct intel_output *)__mptr;
#line 959
  intel_sdvo_write_cmd(intel_output, 14, 0, 0);
#line 960
  intel_sdvo_read_response(intel_output, (void *)(& response), 2);
#line 962
  if (on != 0) {
#line 963
    intel_sdvo_write_cmd(intel_output, 12, 0, 0);
#line 964
    status = intel_sdvo_read_response(intel_output, (void *)(& response), 2);
#line 966
    intel_sdvo_write_cmd(intel_output, 13, (void *)(& response), 2);
  } else {
#line 968
    response[0] = 0U;
#line 969
    response[1] = 0U;
#line 970
    intel_sdvo_write_cmd(intel_output, 13, (void *)(& response), 2);
  }
#line 973
  intel_sdvo_write_cmd(intel_output, 14, 0, 0);
#line 974
  intel_sdvo_read_response(intel_output, (void *)(& response), 2);
#line 975
  return;
}
}
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static enum drm_connector_status intel_sdvo_detect(struct drm_connector *connector ) 
{ 
  u8 response[2U] ;
  u8 status ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 981
  __mptr = (struct drm_connector  const  *)connector;
#line 981
  intel_output = (struct intel_output *)__mptr;
#line 983
  intel_sdvo_write_cmd(intel_output, 11, 0, 0);
#line 984
  status = intel_sdvo_read_response(intel_output, (void *)(& response), 2);
#line 986
  if (drm_debug != 0U) {
#line 986
    printk("<7>[drm:%s] SDVO response %d %d\n", "intel_sdvo_detect", (int )response[0],
           (int )response[1]);
  } else {

  }
#line 987
  if ((unsigned int )response[0] != 0U || (unsigned int )response[1] != 0U) {
#line 988
    return (connector_status_connected);
  } else {
#line 990
    return (connector_status_disconnected);
  }
}
}
#line 993 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static int intel_sdvo_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  int tmp ;

  {
#line 995
  __mptr = (struct drm_connector  const  *)connector;
#line 995
  intel_output = (struct intel_output *)__mptr;
#line 998
  intel_sdvo_set_control_bus_switch(intel_output, 2);
#line 999
  intel_ddc_get_modes(intel_output);
#line 1001
  tmp = list_empty((struct list_head  const  *)(& connector->probed_modes));
#line 1001
  if (tmp != 0) {
#line 1002
    return (0);
  } else {

  }
#line 1003
  return (1);
}
}
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 1008
  __mptr = (struct drm_connector  const  *)connector;
#line 1008
  intel_output = (struct intel_output *)__mptr;
#line 1010
  if ((unsigned long )intel_output->i2c_bus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 1011
    intel_i2c_destroy(intel_output->i2c_bus);
  } else {

  }
#line 1012
  drm_sysfs_connector_remove(connector);
#line 1013
  drm_connector_cleanup(connector);
#line 1014
  kfree((void const   *)intel_output);
#line 1015
  return;
}
}
#line 1017 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static struct drm_encoder_helper_funcs  const  intel_sdvo_helper_funcs  = 
#line 1017
     {& intel_sdvo_dpms, 0, 0, & intel_sdvo_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_sdvo_mode_set, 0};
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static struct drm_connector_funcs  const  intel_sdvo_connector_funcs  =    {0, & intel_sdvo_save, & intel_sdvo_restore, & intel_sdvo_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_sdvo_destroy};
#line 1033 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static struct drm_connector_helper_funcs  const  intel_sdvo_connector_helper_funcs  =    {& intel_sdvo_get_modes,
    & intel_sdvo_mode_valid, & intel_best_encoder};
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static void intel_sdvo_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 1041
  drm_encoder_cleanup(encoder);
#line 1042
  return;
}
}
#line 1044 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
static struct drm_encoder_funcs  const  intel_sdvo_enc_funcs  =    {& intel_sdvo_enc_destroy};
#line 1049 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void intel_sdvo_init(struct drm_device *dev , int output_device ) 
{ 
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  struct intel_sdvo_priv *sdvo_priv ;
  struct intel_i2c_chan *i2cbus ;
  int connector_type ;
  u8 ch[64U] ;
  int i ;
  int encoder_type ;
  int output_id ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  unsigned char bytes[2U] ;
  size_t __len ;
  void *__ret ;

  {
#line 1054
  i2cbus = 0;
#line 1060
  tmp = kcalloc(1928UL, 1UL, 208U);
#line 1060
  intel_output = (struct intel_output *)tmp;
#line 1061
  if ((unsigned long )intel_output == (unsigned long )((struct intel_output *)0)) {
#line 1062
    return;
  } else {

  }
#line 1065
  connector = & intel_output->base;
#line 1067
  drm_connector_init(dev, connector, & intel_sdvo_connector_funcs, 0);
#line 1069
  drm_connector_helper_add(connector, & intel_sdvo_connector_helper_funcs);
#line 1070
  sdvo_priv = (struct intel_sdvo_priv *)intel_output + 1U;
#line 1071
  intel_output->type = 3;
#line 1073
  connector->interlace_allowed = 0;
#line 1074
  connector->doublescan_allowed = 0;
#line 1077
  if (output_device == 397632) {
#line 1078
    i2cbus = intel_i2c_create(dev, 20512U, "SDVOCTRL_E for SDVOB");
  } else {
#line 1080
    i2cbus = intel_i2c_create(dev, 20512U, "SDVOCTRL_E for SDVOC");
  }
#line 1082
  if ((unsigned long )i2cbus == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 1083
    goto err_connector;
  } else {

  }
#line 1085
  sdvo_priv->i2c_bus = i2cbus;
#line 1087
  if (output_device == 397632) {
#line 1088
    output_id = 1;
#line 1089
    (sdvo_priv->i2c_bus)->slave_addr = 56U;
  } else {
#line 1091
    output_id = 2;
#line 1092
    (sdvo_priv->i2c_bus)->slave_addr = 57U;
  }
#line 1095
  sdvo_priv->output_device = output_device;
#line 1096
  intel_output->i2c_bus = i2cbus;
#line 1097
  intel_output->dev_priv = (void *)sdvo_priv;
#line 1101
  i = 0;
#line 1101
  goto ldv_26263;
  ldv_26262: 
#line 1102
  tmp___0 = intel_sdvo_read_byte(intel_output, (int )((u8 )i), (u8 *)(& ch) + (unsigned long )i);
#line 1102
  if (tmp___0) {
#line 1102
    tmp___1 = 0;
  } else {
#line 1102
    tmp___1 = 1;
  }
#line 1102
  if (tmp___1) {
#line 1103
    if (drm_debug != 0U) {
#line 1103
      printk("<7>[drm:%s] No SDVO device found on SDVO%c\n", "intel_sdvo_init", output_device == 397632 ? 66 : 67);
    } else {

    }
#line 1105
    goto err_i2c;
  } else {

  }
#line 1101
  i = i + 1;
  ldv_26263: ;
#line 1101
  if (i <= 63) {
#line 1102
    goto ldv_26262;
  } else {

  }
#line 1109
  intel_sdvo_get_capabilities(intel_output, & sdvo_priv->caps);
#line 1111
  memset((void *)(& sdvo_priv->active_outputs), 0, 2UL);
#line 1114
  if (((int )sdvo_priv->caps.output_flags & 2) != 0) {
#line 1116
    sdvo_priv->active_outputs = 2U;
#line 1117
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1118
    encoder_type = 1;
#line 1119
    connector_type = 1;
  } else
#line 1121
  if (((int )sdvo_priv->caps.output_flags & 512) != 0) {
#line 1123
    sdvo_priv->active_outputs = 512U;
#line 1124
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1125
    encoder_type = 1;
#line 1126
    connector_type = 1;
  } else
#line 1128
  if ((int )sdvo_priv->caps.output_flags & 1) {
#line 1130
    sdvo_priv->active_outputs = 1U;
#line 1131
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1132
    encoder_type = 2;
#line 1133
    connector_type = 3;
  } else
#line 1135
  if (((int )sdvo_priv->caps.output_flags & 256) != 0) {
#line 1137
    sdvo_priv->active_outputs = 256U;
#line 1138
    connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 1139
    encoder_type = 2;
#line 1140
    connector_type = 3;
  } else {
#line 1146
    __len = 2UL;
#line 1146
    if (__len > 63UL) {
#line 1146
      __ret = __memcpy((void *)(& bytes), (void const   *)(& sdvo_priv->caps.output_flags),
                       __len);
    } else {
#line 1146
      __ret = __builtin_memcpy((void *)(& bytes), (void const   *)(& sdvo_priv->caps.output_flags),
                               __len);
    }
#line 1147
    if (drm_debug != 0U) {
#line 1147
      printk("<7>[drm:%s] %s: No active RGB or TMDS outputs (0x%02x%02x)\n", "intel_sdvo_init",
             sdvo_priv->output_device == 397632 ? (char *)"SDVOB" : (char *)"SDVOC",
             (int )bytes[0], (int )bytes[1]);
    } else {

    }
#line 1150
    goto err_i2c;
  }
#line 1153
  drm_encoder_init(dev, & intel_output->enc, & intel_sdvo_enc_funcs, encoder_type);
#line 1154
  drm_encoder_helper_add(& intel_output->enc, & intel_sdvo_helper_funcs);
#line 1155
  connector->connector_type = connector_type;
#line 1157
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 1158
  drm_sysfs_connector_add(connector);
#line 1161
  intel_sdvo_set_target_input(intel_output, 1, 0);
#line 1163
  intel_sdvo_get_input_pixel_clock_range(intel_output, & sdvo_priv->pixel_clock_min,
                                         & sdvo_priv->pixel_clock_max);
#line 1168
  if (drm_debug != 0U) {
#line 1168
    printk("<7>[drm:%s] %s device VID/DID: %02X:%02X.%02X, clock range %dMHz - %dMHz, input 1: %c, input 2: %c, output 1: %c, output 2: %c\n",
           "intel_sdvo_init", sdvo_priv->output_device == 397632 ? (char *)"SDVOB" : (char *)"SDVOC",
           (int )sdvo_priv->caps.vendor_id, (int )sdvo_priv->caps.device_id, (int )sdvo_priv->caps.device_rev_id,
           sdvo_priv->pixel_clock_min / 1000, sdvo_priv->pixel_clock_max / 1000, (int )sdvo_priv->caps.sdvo_inputs_mask & 1 ? 89 : 78,
           ((int )sdvo_priv->caps.sdvo_inputs_mask & 2) != 0 ? 89 : 78, ((int )sdvo_priv->caps.output_flags & 3) != 0 ? 89 : 78,
           ((int )sdvo_priv->caps.output_flags & 768) != 0 ? 89 : 78);
  } else {

  }
#line 1185
  intel_output->ddc_bus = i2cbus;
#line 1187
  return;
  err_i2c: 
#line 1190
  intel_i2c_destroy(intel_output->i2c_bus);
  err_connector: 
#line 1192
  drm_connector_cleanup(connector);
#line 1193
  kfree((void const   *)intel_output);
#line 1195
  return;
}
}
#line 1235 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv_main13_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_sdvo_dpms_26_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_sdvo_mode_fixup_24_p2 ;
  struct drm_display_mode *var_intel_sdvo_mode_set_25_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1417
  LDV_IN_INTERRUPT = 1;
#line 1426
  ldv_initialize();
#line 1436
  goto ldv_26304;
  ldv_26303: 
#line 1439
  tmp = nondet_int();
#line 1439
  switch (tmp) {
  case 0: 
#line 1462
  ldv_handler_precall();
#line 1463
  intel_sdvo_dpms(var_group1, var_intel_sdvo_dpms_26_p1);
#line 1470
  goto ldv_26292;
  case 1: 
#line 1492
  ldv_handler_precall();
#line 1493
  intel_sdvo_mode_fixup(var_group1, var_group2, var_intel_sdvo_mode_fixup_24_p2);
#line 1500
  goto ldv_26292;
  case 2: 
#line 1522
  ldv_handler_precall();
#line 1523
  intel_sdvo_mode_set(var_group1, var_group2, var_intel_sdvo_mode_set_25_p2);
#line 1530
  goto ldv_26292;
  case 3: 
#line 1552
  ldv_handler_precall();
#line 1553
  intel_sdvo_save(var_group3);
#line 1560
  goto ldv_26292;
  case 4: 
#line 1582
  ldv_handler_precall();
#line 1583
  intel_sdvo_restore(var_group3);
#line 1590
  goto ldv_26292;
  case 5: 
#line 1612
  ldv_handler_precall();
#line 1613
  intel_sdvo_detect(var_group3);
#line 1620
  goto ldv_26292;
  case 6: 
#line 1642
  ldv_handler_precall();
#line 1643
  intel_sdvo_destroy(var_group3);
#line 1650
  goto ldv_26292;
  case 7: 
#line 1672
  ldv_handler_precall();
#line 1673
  intel_sdvo_get_modes(var_group3);
#line 1680
  goto ldv_26292;
  case 8: 
#line 1702
  ldv_handler_precall();
#line 1703
  intel_sdvo_mode_valid(var_group3, var_group2);
#line 1710
  goto ldv_26292;
  case 9: 
#line 1732
  ldv_handler_precall();
#line 1733
  intel_sdvo_enc_destroy(var_group1);
#line 1740
  goto ldv_26292;
  default: ;
#line 1741
  goto ldv_26292;
  }
  ldv_26292: ;
  ldv_26304: 
#line 1436
  tmp___0 = nondet_int();
#line 1436
  if (tmp___0 != 0) {
#line 1437
    goto ldv_26303;
  } else {

  }


#line 1750
  ldv_check_final_state();
#line 1753
  return;
}
}
#line 1757 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_489(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1762
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1764
  __ldv_spin_lock(ldv_func_arg1);
#line 1765
  return;
}
}
#line 1767 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_490(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1772
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1774
  __ldv_spin_unlock(ldv_func_arg1);
#line 1775
  return;
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
int ldv___ldv_spin_trylock_491(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1782
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1782
  ldv_func_res = tmp;
#line 1784
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1784
  return (tmp___0);
#line 1786
  return (ldv_func_res);
}
}
#line 1789 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_492(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1794
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1796
  __ldv_spin_lock(ldv_func_arg1);
#line 1797
  return;
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_493(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1804
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1806
  __ldv_spin_unlock(ldv_func_arg1);
#line 1807
  return;
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_494(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1814
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1816
  __ldv_spin_lock(ldv_func_arg1);
#line 1817
  return;
}
}
#line 1819 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_495(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1824
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1826
  __ldv_spin_unlock(ldv_func_arg1);
#line 1827
  return;
}
}
#line 1829 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_496(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1834
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1836
  __ldv_spin_unlock(ldv_func_arg1);
#line 1837
  return;
}
}
#line 1839 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_497(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1844
  ldv_spin_lock_dcache_lock();
#line 1846
  __ldv_spin_lock(ldv_func_arg1);
#line 1847
  return;
}
}
#line 1849 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_498(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1854
  ldv_spin_lock_d_lock_of_dentry();
#line 1856
  __ldv_spin_lock(ldv_func_arg1);
#line 1857
  return;
}
}
#line 1859 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_499(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1864
  ldv_spin_unlock_d_lock_of_dentry();
#line 1866
  __ldv_spin_unlock(ldv_func_arg1);
#line 1867
  return;
}
}
#line 1869 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_500(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1874
  ldv_spin_unlock_dcache_lock();
#line 1876
  __ldv_spin_unlock(ldv_func_arg1);
#line 1877
  return;
}
}
#line 1879 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_501(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1884
  ldv_spin_lock_d_lock_of_dentry();
#line 1886
  __ldv_spin_lock(ldv_func_arg1);
#line 1887
  return;
}
}
#line 1889 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_502(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1894
  ldv_spin_unlock_d_lock_of_dentry();
#line 1896
  __ldv_spin_unlock(ldv_func_arg1);
#line 1897
  return;
}
}
#line 1899 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_503(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1904
  ldv_spin_lock_i_lock_of_inode();
#line 1906
  __ldv_spin_lock(ldv_func_arg1);
#line 1907
  return;
}
}
#line 1909 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_504(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1914
  ldv_spin_unlock_i_lock_of_inode();
#line 1916
  __ldv_spin_unlock(ldv_func_arg1);
#line 1917
  return;
}
}
#line 1919 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_lock_505(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1924
  ldv_spin_lock_d_lock_of_dentry();
#line 1926
  __ldv_spin_lock(ldv_func_arg1);
#line 1927
  return;
}
}
#line 1929 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_sdvo.c.prepared"
void ldv___ldv_spin_unlock_506(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1934
  ldv_spin_unlock_d_lock_of_dentry();
#line 1936
  __ldv_spin_unlock(ldv_func_arg1);
#line 1937
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_525(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_528(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_530(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_533(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_534(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_537(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_539(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_541(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_526(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_529(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_531(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_532(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_535(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_536(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_538(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_540(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_542(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_527(spinlock_t *ldv_func_arg1 ) ;
#line 613 "include/drm/drm_crtc.h"
extern struct edid *drm_get_edid(struct drm_connector * , struct i2c_adapter * ) ;
#line 616
extern int drm_add_edid_modes(struct drm_connector * , struct edid * ) ;
#line 649
extern int drm_mode_connector_update_edid_property(struct drm_connector * , struct edid * ) ;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
bool intel_ddc_probe(struct intel_output *intel_output ) 
{ 
  u8 out_buf[2U] ;
  u8 buf[2U] ;
  int ret ;
  struct i2c_msg msgs[2U] ;

  {
#line 104
  out_buf[0] = 0U;
#line 104
  out_buf[1] = 0U;
#line 107
  msgs[0].addr = 80U;
#line 107
  msgs[0].flags = 0U;
#line 107
  msgs[0].len = 1U;
#line 107
  msgs[0].buf = (__u8 *)(& out_buf);
#line 107
  msgs[1].addr = 80U;
#line 107
  msgs[1].flags = 1U;
#line 107
  msgs[1].len = 1U;
#line 107
  msgs[1].buf = (__u8 *)(& buf);
#line 122
  ret = i2c_transfer(& (intel_output->ddc_bus)->adapter, (struct i2c_msg *)(& msgs),
                     2);
#line 123
  if (ret == 2) {
#line 124
    return (1);
  } else {

  }
#line 126
  return (0);
}
}
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
int intel_ddc_get_modes(struct intel_output *intel_output ) 
{ 
  struct edid *edid ;
  int ret ;

  {
#line 138
  ret = 0;
#line 140
  edid = drm_get_edid(& intel_output->base, & (intel_output->ddc_bus)->adapter);
#line 142
  if ((unsigned long )edid != (unsigned long )((struct edid *)0)) {
#line 143
    drm_mode_connector_update_edid_property(& intel_output->base, edid);
#line 145
    ret = drm_add_edid_modes(& intel_output->base, edid);
#line 146
    kfree((void const   *)edid);
  } else {

  }
#line 149
  return (ret);
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_525(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 157
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 159
  __ldv_spin_lock(ldv_func_arg1);
#line 160
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_526(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 167
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 169
  __ldv_spin_unlock(ldv_func_arg1);
#line 170
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
int ldv___ldv_spin_trylock_527(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 177
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 177
  ldv_func_res = tmp;
#line 179
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 179
  return (tmp___0);
#line 181
  return (ldv_func_res);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_528(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 189
  ldv_spin_lock_siglock_of_sighand_struct();
#line 191
  __ldv_spin_lock(ldv_func_arg1);
#line 192
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_529(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 199
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 201
  __ldv_spin_unlock(ldv_func_arg1);
#line 202
  return;
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_530(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 209
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 211
  __ldv_spin_lock(ldv_func_arg1);
#line 212
  return;
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_531(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 219
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 221
  __ldv_spin_unlock(ldv_func_arg1);
#line 222
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_532(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 229
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 231
  __ldv_spin_unlock(ldv_func_arg1);
#line 232
  return;
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_533(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 239
  ldv_spin_lock_dcache_lock();
#line 241
  __ldv_spin_lock(ldv_func_arg1);
#line 242
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_534(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 249
  ldv_spin_lock_d_lock_of_dentry();
#line 251
  __ldv_spin_lock(ldv_func_arg1);
#line 252
  return;
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_535(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 259
  ldv_spin_unlock_d_lock_of_dentry();
#line 261
  __ldv_spin_unlock(ldv_func_arg1);
#line 262
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_536(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 269
  ldv_spin_unlock_dcache_lock();
#line 271
  __ldv_spin_unlock(ldv_func_arg1);
#line 272
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_537(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 279
  ldv_spin_lock_d_lock_of_dentry();
#line 281
  __ldv_spin_lock(ldv_func_arg1);
#line 282
  return;
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_538(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 289
  ldv_spin_unlock_d_lock_of_dentry();
#line 291
  __ldv_spin_unlock(ldv_func_arg1);
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_539(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 299
  ldv_spin_lock_i_lock_of_inode();
#line 301
  __ldv_spin_lock(ldv_func_arg1);
#line 302
  return;
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_540(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 309
  ldv_spin_unlock_i_lock_of_inode();
#line 311
  __ldv_spin_unlock(ldv_func_arg1);
#line 312
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_lock_541(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 319
  ldv_spin_lock_d_lock_of_dentry();
#line 321
  __ldv_spin_lock(ldv_func_arg1);
#line 322
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_modes.c.prepared"
void ldv___ldv_spin_unlock_542(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 329
  ldv_spin_unlock_d_lock_of_dentry();
#line 331
  __ldv_spin_unlock(ldv_func_arg1);
#line 332
  return;
}
}
#line 167 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_561(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_564(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_566(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_569(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_570(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_573(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_575(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_577(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_562(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_565(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_567(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_568(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_571(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_572(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_574(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_576(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_578(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_563(spinlock_t *ldv_func_arg1 ) ;
#line 289 "include/linux/jiffies.h"
extern unsigned long usecs_to_jiffies(unsigned int const    ) ;
#line 458 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 460
  dev->driver_data = data;
#line 461
  return;
}
}
#line 380 "include/linux/i2c.h"
__inline static void i2c_set_adapdata(struct i2c_adapter *dev , void *data ) 
{ 


  {
#line 382
  dev_set_drvdata(& dev->dev, data);
#line 383
  return;
}
}
#line 425
extern int i2c_del_adapter(struct i2c_adapter * ) ;
#line 48 "include/linux/i2c-algo-bit.h"
extern int i2c_bit_add_bus(struct i2c_adapter * ) ;
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
static int get_clock(void *data ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_i915_private *dev_priv ;
  u32 val ;

  {
#line 112
  chan = (struct intel_i2c_chan *)data;
#line 113
  dev_priv = (struct drm_i915_private *)(chan->drm_dev)->dev_private;
#line 116
  val = readl((void const volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 117
  return ((val & 16U) != 0U);
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
static int get_data(void *data ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_i915_private *dev_priv ;
  u32 val ;

  {
#line 122
  chan = (struct intel_i2c_chan *)data;
#line 123
  dev_priv = (struct drm_i915_private *)(chan->drm_dev)->dev_private;
#line 126
  val = readl((void const volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 127
  return ((val & 4096U) != 0U);
}
}
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
static void set_clock(void *data , int state_high ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 reserved ;
  u32 clock_bits ;
  unsigned int tmp ;

  {
#line 132
  chan = (struct intel_i2c_chan *)data;
#line 133
  dev = chan->drm_dev;
#line 134
  dev_priv = (struct drm_i915_private *)(chan->drm_dev)->dev_private;
#line 135
  reserved = 0U;
#line 138
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 139
    tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 139
    reserved = tmp & 8224U;
  } else {

  }
#line 142
  if (state_high != 0) {
#line 143
    clock_bits = 1U;
  } else {
#line 145
    clock_bits = 7U;
  }
#line 147
  writel(reserved | clock_bits, (void volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 148
  __const_udelay(85900UL);
#line 149
  return;
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
static void set_data(void *data , int state_high ) 
{ 
  struct intel_i2c_chan *chan ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 reserved ;
  u32 data_bits ;
  unsigned int tmp ;

  {
#line 153
  chan = (struct intel_i2c_chan *)data;
#line 154
  dev = chan->drm_dev;
#line 155
  dev_priv = (struct drm_i915_private *)(chan->drm_dev)->dev_private;
#line 156
  reserved = 0U;
#line 159
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 160
    tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 160
    reserved = tmp & 8224U;
  } else {

  }
#line 163
  if (state_high != 0) {
#line 164
    data_bits = 256U;
  } else {
#line 166
    data_bits = 1792U;
  }
#line 169
  writel(reserved | data_bits, (void volatile   *)dev_priv->regs + (unsigned long )chan->reg);
#line 170
  __const_udelay(85900UL);
#line 171
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
struct intel_i2c_chan *intel_i2c_create(struct drm_device *dev , u32 const   reg ,
                                        char const   *name ) 
{ 
  struct intel_i2c_chan *chan ;
  void *tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;

  {
#line 199
  tmp = kzalloc(1544UL, 208U);
#line 199
  chan = (struct intel_i2c_chan *)tmp;
#line 200
  if ((unsigned long )chan == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 201
    goto out_free;
  } else {

  }
#line 203
  chan->drm_dev = dev;
#line 204
  chan->reg = reg;
#line 205
  snprintf((char *)(& chan->adapter.name), 20UL, "intel drm %s", name);
#line 206
  chan->adapter.owner = & __this_module;
#line 210
  chan->adapter.id = 65569U;
#line 211
  chan->adapter.algo_data = (void *)(& chan->algo);
#line 212
  chan->adapter.dev.parent = & (dev->pdev)->dev;
#line 213
  chan->algo.setsda = & set_data;
#line 214
  chan->algo.setscl = & set_clock;
#line 215
  chan->algo.getsda = & get_data;
#line 216
  chan->algo.getscl = & get_clock;
#line 217
  chan->algo.udelay = 20;
#line 218
  tmp___0 = usecs_to_jiffies(2200U);
#line 218
  chan->algo.timeout = (int )tmp___0;
#line 219
  chan->algo.data = (void *)chan;
#line 221
  i2c_set_adapdata(& chan->adapter, (void *)chan);
#line 223
  tmp___1 = i2c_bit_add_bus(& chan->adapter);
#line 223
  if (tmp___1 != 0) {
#line 224
    goto out_free;
  } else {

  }
#line 227
  set_data((void *)chan, 1);
#line 228
  set_clock((void *)chan, 1);
#line 229
  __const_udelay(85900UL);
#line 231
  return (chan);
  out_free: 
#line 234
  kfree((void const   *)chan);
#line 235
  return (0);
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void intel_i2c_destroy(struct intel_i2c_chan *chan ) 
{ 


  {
#line 246
  if ((unsigned long )chan == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 247
    return;
  } else {

  }
#line 249
  i2c_del_adapter(& chan->adapter);
#line 250
  kfree((void const   *)chan);
#line 251
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_561(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 258
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 260
  __ldv_spin_lock(ldv_func_arg1);
#line 261
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_562(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 268
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 270
  __ldv_spin_unlock(ldv_func_arg1);
#line 271
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
int ldv___ldv_spin_trylock_563(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 278
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 278
  ldv_func_res = tmp;
#line 280
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 280
  return (tmp___0);
#line 282
  return (ldv_func_res);
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_564(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 290
  ldv_spin_lock_siglock_of_sighand_struct();
#line 292
  __ldv_spin_lock(ldv_func_arg1);
#line 293
  return;
}
}
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_565(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 300
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 302
  __ldv_spin_unlock(ldv_func_arg1);
#line 303
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_566(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 310
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 312
  __ldv_spin_lock(ldv_func_arg1);
#line 313
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_567(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 320
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 322
  __ldv_spin_unlock(ldv_func_arg1);
#line 323
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_568(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 330
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 332
  __ldv_spin_unlock(ldv_func_arg1);
#line 333
  return;
}
}
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_569(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 340
  ldv_spin_lock_dcache_lock();
#line 342
  __ldv_spin_lock(ldv_func_arg1);
#line 343
  return;
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_570(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 350
  ldv_spin_lock_d_lock_of_dentry();
#line 352
  __ldv_spin_lock(ldv_func_arg1);
#line 353
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_571(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 360
  ldv_spin_unlock_d_lock_of_dentry();
#line 362
  __ldv_spin_unlock(ldv_func_arg1);
#line 363
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_572(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 370
  ldv_spin_unlock_dcache_lock();
#line 372
  __ldv_spin_unlock(ldv_func_arg1);
#line 373
  return;
}
}
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_573(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 380
  ldv_spin_lock_d_lock_of_dentry();
#line 382
  __ldv_spin_lock(ldv_func_arg1);
#line 383
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_574(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 390
  ldv_spin_unlock_d_lock_of_dentry();
#line 392
  __ldv_spin_unlock(ldv_func_arg1);
#line 393
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_575(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 400
  ldv_spin_lock_i_lock_of_inode();
#line 402
  __ldv_spin_lock(ldv_func_arg1);
#line 403
  return;
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_576(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 410
  ldv_spin_unlock_i_lock_of_inode();
#line 412
  __ldv_spin_unlock(ldv_func_arg1);
#line 413
  return;
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_lock_577(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 420
  ldv_spin_lock_d_lock_of_dentry();
#line 422
  __ldv_spin_lock(ldv_func_arg1);
#line 423
  return;
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_i2c.c.prepared"
void ldv___ldv_spin_unlock_578(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 430
  ldv_spin_unlock_d_lock_of_dentry();
#line 432
  __ldv_spin_unlock(ldv_func_arg1);
#line 433
  return;
}
}
#line 144 "include/linux/kernel.h"
extern struct atomic_notifier_head panic_notifier_list ;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern char *strcpy(char * , char const   * ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_597(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_600(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_601(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_604(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_606(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_608(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_610(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_612(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_598(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_602(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_603(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_605(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_607(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_609(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_611(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_613(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_614(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_599(spinlock_t *ldv_func_arg1 ) ;
#line 115 "include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head * , struct notifier_block * ) ;
#line 128
extern int atomic_notifier_chain_unregister(struct atomic_notifier_head * , struct notifier_block * ) ;
#line 54 "include/linux/sysrq.h"
extern int register_sysrq_key(int  , struct sysrq_key_op * ) ;
#line 930 "include/linux/fb.h"
extern void cfb_fillrect(struct fb_info * , struct fb_fillrect  const  * ) ;
#line 931
extern void cfb_copyarea(struct fb_info * , struct fb_copyarea  const  * ) ;
#line 932
extern void cfb_imageblit(struct fb_info * , struct fb_image  const  * ) ;
#line 945
extern int register_framebuffer(struct fb_info * ) ;
#line 946
extern int unregister_framebuffer(struct fb_info * ) ;
#line 1007
extern struct fb_info *framebuffer_alloc(size_t  , struct device * ) ;
#line 1008
extern void framebuffer_release(struct fb_info * ) ;
#line 137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/intel_drv.h"
int intelfb_resize(struct drm_device *dev , struct drm_crtc *crtc ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_setcolreg(unsigned int regno , unsigned int red , unsigned int green ,
                             unsigned int blue , unsigned int transp , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  int i ;
  struct list_head  const  *__mptr ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___0 ;
  struct drm_mode_set *modeset ;
  struct drm_framebuffer *fb ;
  struct list_head  const  *__mptr___1 ;

  {
#line 127
  par = (struct intelfb_par *)info->par;
#line 128
  dev = par->dev;
#line 132
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 132
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 132
  goto ldv_26594;
  ldv_26593: 
#line 133
  __mptr___0 = (struct drm_crtc  const  *)crtc;
#line 133
  intel_crtc = (struct intel_crtc *)__mptr___0;
#line 134
  modeset = & intel_crtc->mode_set;
#line 135
  fb = modeset->fb;
#line 137
  i = 0;
#line 137
  goto ldv_26586;
  ldv_26585: ;
#line 138
  if (crtc->base.id == par->crtc_ids[i]) {
#line 139
    goto ldv_26584;
  } else {

  }
#line 137
  i = i + 1;
  ldv_26586: ;
#line 137
  if (par->crtc_count > i) {
#line 138
    goto ldv_26585;
  } else {

  }
  ldv_26584: ;
#line 141
  if (par->crtc_count == i) {
#line 142
    goto ldv_26587;
  } else {

  }
#line 145
  if (regno > 255U) {
#line 146
    return (1);
  } else {

  }
#line 148
  if (fb->depth == 8U) {
#line 149
    intel_crtc_fb_gamma_set(crtc, (int )((u16 )red), (int )((u16 )green), (int )((u16 )blue),
                            (int )regno);
#line 150
    return (0);
  } else {

  }
#line 153
  if (regno <= 15U) {
#line 154
    switch (fb->depth) {
    case 15U: 
#line 156
    fb->pseudo_palette[regno] = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
#line 159
    goto ldv_26589;
    case 16U: 
#line 161
    fb->pseudo_palette[regno] = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
#line 164
    goto ldv_26589;
    case 24U: ;
    case 32U: 
#line 167
    fb->pseudo_palette[regno] = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
#line 170
    goto ldv_26589;
    }
    ldv_26589: ;
  } else {

  }
  ldv_26587: 
#line 132
  __mptr___1 = (struct list_head  const  *)crtc->head.next;
#line 132
  crtc = (struct drm_crtc *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26594: 
#line 132
  __builtin_prefetch((void const   *)crtc->head.next);
#line 132
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 133
    goto ldv_26593;
  } else {

  }

#line 174
  return (0);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer *fb ;
  int depth ;

  {
#line 180
  par = (struct intelfb_par *)info->par;
#line 181
  intel_fb = par->intel_fb;
#line 182
  fb = & intel_fb->base;
#line 185
  if (var->pixclock == 4294967295U || var->pixclock == 0U) {
#line 186
    return (-22);
  } else {

  }
#line 189
  if (var->xres > fb->width || var->yres > fb->height) {
#line 190
    printk("<3>[drm:%s] *ERROR* Requested width/height is greater than current fb object %dx%d > %dx%d\n",
           "intelfb_check_var", var->xres, var->yres, fb->width, fb->height);
#line 191
    printk("<3>[drm:%s] *ERROR* Need resizing code.\n", "intelfb_check_var");
#line 192
    return (-22);
  } else {

  }
#line 195
  switch (var->bits_per_pixel) {
  case (__u32 )16: 
#line 197
  depth = var->green.length == 6U ? 16 : 15;
#line 198
  goto ldv_26606;
  case (__u32 )32: 
#line 200
  depth = var->transp.length != 0U ? 32 : 24;
#line 201
  goto ldv_26606;
  default: 
#line 203
  depth = (int )var->bits_per_pixel;
#line 204
  goto ldv_26606;
  }
  ldv_26606: ;
#line 207
  switch (depth) {
  case 8: 
#line 209
  var->red.offset = 0U;
#line 210
  var->green.offset = 0U;
#line 211
  var->blue.offset = 0U;
#line 212
  var->red.length = 8U;
#line 213
  var->green.length = 8U;
#line 214
  var->blue.length = 8U;
#line 215
  var->transp.length = 0U;
#line 216
  var->transp.offset = 0U;
#line 217
  goto ldv_26610;
  case 15: 
#line 219
  var->red.offset = 10U;
#line 220
  var->green.offset = 5U;
#line 221
  var->blue.offset = 0U;
#line 222
  var->red.length = 5U;
#line 223
  var->green.length = 5U;
#line 224
  var->blue.length = 5U;
#line 225
  var->transp.length = 1U;
#line 226
  var->transp.offset = 15U;
#line 227
  goto ldv_26610;
  case 16: 
#line 229
  var->red.offset = 11U;
#line 230
  var->green.offset = 5U;
#line 231
  var->blue.offset = 0U;
#line 232
  var->red.length = 5U;
#line 233
  var->green.length = 6U;
#line 234
  var->blue.length = 5U;
#line 235
  var->transp.length = 0U;
#line 236
  var->transp.offset = 0U;
#line 237
  goto ldv_26610;
  case 24: 
#line 239
  var->red.offset = 16U;
#line 240
  var->green.offset = 8U;
#line 241
  var->blue.offset = 0U;
#line 242
  var->red.length = 8U;
#line 243
  var->green.length = 8U;
#line 244
  var->blue.length = 8U;
#line 245
  var->transp.length = 0U;
#line 246
  var->transp.offset = 0U;
#line 247
  goto ldv_26610;
  case 32: 
#line 249
  var->red.offset = 16U;
#line 250
  var->green.offset = 8U;
#line 251
  var->blue.offset = 0U;
#line 252
  var->red.length = 8U;
#line 253
  var->green.length = 8U;
#line 254
  var->blue.length = 8U;
#line 255
  var->transp.length = 8U;
#line 256
  var->transp.offset = 24U;
#line 257
  goto ldv_26610;
  default: ;
#line 259
  return (-22);
  }
  ldv_26610: ;
#line 262
  return (0);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_set_par(struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct fb_var_screeninfo *var ;
  int i ;
  struct drm_crtc *crtc ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 269
  par = (struct intelfb_par *)info->par;
#line 270
  dev = par->dev;
#line 271
  var = & info->var;
#line 274
  if (drm_debug != 0U) {
#line 274
    printk("<7>[drm:%s] %d %d\n", "intelfb_set_par", var->xres, var->pixclock);
  } else {

  }
#line 276
  if (var->pixclock != 4294967295U) {
#line 278
    printk("<3>[drm:%s] *ERROR* PIXEL CLCOK SET\n", "intelfb_set_par");
#line 279
    return (-22);
  } else {
#line 284
    __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 284
    crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 284
    goto ldv_26638;
    ldv_26637: 
#line 285
    __mptr___0 = (struct drm_crtc  const  *)crtc;
#line 285
    intel_crtc = (struct intel_crtc *)__mptr___0;
#line 287
    i = 0;
#line 287
    goto ldv_26635;
    ldv_26634: ;
#line 288
    if (crtc->base.id == par->crtc_ids[i]) {
#line 289
      goto ldv_26633;
    } else {

    }
#line 287
    i = i + 1;
    ldv_26635: ;
#line 287
    if (par->crtc_count > i) {
#line 288
      goto ldv_26634;
    } else {

    }
    ldv_26633: ;
#line 291
    if (par->crtc_count == i) {
#line 292
      goto ldv_26636;
    } else {

    }
#line 294
    if ((unsigned long )crtc->fb == (unsigned long )intel_crtc->mode_set.fb) {
#line 295
      mutex_lock_nested(& dev->mode_config.mutex, 0U);
#line 296
      ret = (*((crtc->funcs)->set_config))(& intel_crtc->mode_set);
#line 297
      mutex_unlock(& dev->mode_config.mutex);
#line 298
      if (ret != 0) {
#line 299
        return (ret);
      } else {

      }
    } else {

    }
    ldv_26636: 
#line 284
    __mptr___1 = (struct list_head  const  *)crtc->head.next;
#line 284
    crtc = (struct drm_crtc *)__mptr___1 + 0xfffffffffffffff8UL;
    ldv_26638: 
#line 284
    __builtin_prefetch((void const   *)crtc->head.next);
#line 284
    if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 285
      goto ldv_26637;
    } else {

    }

#line 302
    return (0);
  }
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_mode_set *modeset ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  int ret ;
  int i ;
  struct list_head  const  *__mptr ;
  struct drm_crtc  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 309
  par = (struct intelfb_par *)info->par;
#line 310
  dev = par->dev;
#line 314
  ret = 0;
#line 317
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 317
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 317
  goto ldv_26662;
  ldv_26661: 
#line 318
  i = 0;
#line 318
  goto ldv_26657;
  ldv_26656: ;
#line 319
  if (crtc->base.id == par->crtc_ids[i]) {
#line 320
    goto ldv_26655;
  } else {

  }
#line 318
  i = i + 1;
  ldv_26657: ;
#line 318
  if (par->crtc_count > i) {
#line 319
    goto ldv_26656;
  } else {

  }
  ldv_26655: ;
#line 322
  if (par->crtc_count == i) {
#line 323
    goto ldv_26658;
  } else {

  }
#line 325
  __mptr___0 = (struct drm_crtc  const  *)crtc;
#line 325
  intel_crtc = (struct intel_crtc *)__mptr___0;
#line 326
  modeset = & intel_crtc->mode_set;
#line 328
  modeset->x = var->xoffset;
#line 329
  modeset->y = var->yoffset;
#line 331
  if (modeset->num_connectors != 0UL) {
#line 332
    mutex_lock_nested(& dev->mode_config.mutex, 0U);
#line 333
    ret = (*((crtc->funcs)->set_config))(modeset);
#line 334
    mutex_unlock(& dev->mode_config.mutex);
#line 335
    if (ret == 0) {
#line 336
      info->var.xoffset = var->xoffset;
#line 337
      info->var.yoffset = var->yoffset;
    } else {

    }
  } else {

  }
  ldv_26658: 
#line 317
  __mptr___1 = (struct list_head  const  *)crtc->head.next;
#line 317
  crtc = (struct drm_crtc *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26662: 
#line 317
  __builtin_prefetch((void const   *)crtc->head.next);
#line 317
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 318
    goto ldv_26661;
  } else {

  }

#line 342
  return (ret);
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static void intelfb_on(struct fb_info *info ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder *encoder ;
  int i ;
  struct list_head  const  *__mptr ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  struct list_head  const  *__mptr___0 ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 347
  par = (struct intelfb_par *)info->par;
#line 348
  dev = par->dev;
#line 357
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 357
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 357
  goto ldv_26689;
  ldv_26688: 
#line 358
  crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 360
  i = 0;
#line 360
  goto ldv_26679;
  ldv_26678: ;
#line 361
  if (crtc->base.id == par->crtc_ids[i]) {
#line 362
    goto ldv_26677;
  } else {

  }
#line 360
  i = i + 1;
  ldv_26679: ;
#line 360
  if (par->crtc_count > i) {
#line 361
    goto ldv_26678;
  } else {

  }
  ldv_26677: 
#line 364
  (*(crtc_funcs->dpms))(crtc, 0);
#line 367
  __mptr___0 = (struct list_head  const  *)dev->mode_config.encoder_list.next;
#line 367
  encoder = (struct drm_encoder *)__mptr___0 + 0xfffffffffffffff8UL;
#line 367
  goto ldv_26686;
  ldv_26685: ;
#line 368
  if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 370
    encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 371
    (*(encoder_funcs->dpms))(encoder, 0);
  } else {

  }
#line 367
  __mptr___1 = (struct list_head  const  *)encoder->head.next;
#line 367
  encoder = (struct drm_encoder *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26686: 
#line 367
  __builtin_prefetch((void const   *)encoder->head.next);
#line 367
  if ((unsigned long )(& encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {
#line 368
    goto ldv_26685;
  } else {

  }
#line 357
  __mptr___2 = (struct list_head  const  *)crtc->head.next;
#line 357
  crtc = (struct drm_crtc *)__mptr___2 + 0xfffffffffffffff8UL;
  ldv_26689: 
#line 357
  __builtin_prefetch((void const   *)crtc->head.next);
#line 357
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 358
    goto ldv_26688;
  } else {

  }

#line 362
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static void intelfb_off(struct fb_info *info , int dpms_mode ) 
{ 
  struct intelfb_par *par ;
  struct drm_device *dev ;
  struct drm_crtc *crtc ;
  struct drm_encoder *encoder ;
  int i ;
  struct list_head  const  *__mptr ;
  struct drm_crtc_helper_funcs *crtc_funcs ;
  struct list_head  const  *__mptr___0 ;
  struct drm_encoder_helper_funcs *encoder_funcs ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 379
  par = (struct intelfb_par *)info->par;
#line 380
  dev = par->dev;
#line 389
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 389
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 389
  goto ldv_26717;
  ldv_26716: 
#line 390
  crtc_funcs = (struct drm_crtc_helper_funcs *)crtc->helper_private;
#line 392
  i = 0;
#line 392
  goto ldv_26707;
  ldv_26706: ;
#line 393
  if (crtc->base.id == par->crtc_ids[i]) {
#line 394
    goto ldv_26705;
  } else {

  }
#line 392
  i = i + 1;
  ldv_26707: ;
#line 392
  if (par->crtc_count > i) {
#line 393
    goto ldv_26706;
  } else {

  }
  ldv_26705: 
#line 397
  __mptr___0 = (struct list_head  const  *)dev->mode_config.encoder_list.next;
#line 397
  encoder = (struct drm_encoder *)__mptr___0 + 0xfffffffffffffff8UL;
#line 397
  goto ldv_26714;
  ldv_26713: ;
#line 398
  if ((unsigned long )encoder->crtc == (unsigned long )crtc) {
#line 400
    encoder_funcs = (struct drm_encoder_helper_funcs *)encoder->helper_private;
#line 401
    (*(encoder_funcs->dpms))(encoder, dpms_mode);
  } else {

  }
#line 397
  __mptr___1 = (struct list_head  const  *)encoder->head.next;
#line 397
  encoder = (struct drm_encoder *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26714: 
#line 397
  __builtin_prefetch((void const   *)encoder->head.next);
#line 397
  if ((unsigned long )(& encoder->head) != (unsigned long )(& dev->mode_config.encoder_list)) {
#line 398
    goto ldv_26713;
  } else {

  }

#line 404
  if (dpms_mode == 3) {
#line 405
    (*(crtc_funcs->dpms))(crtc, dpms_mode);
  } else {

  }
#line 389
  __mptr___2 = (struct list_head  const  *)crtc->head.next;
#line 389
  crtc = (struct drm_crtc *)__mptr___2 + 0xfffffffffffffff8UL;
  ldv_26717: 
#line 389
  __builtin_prefetch((void const   *)crtc->head.next);
#line 389
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 390
    goto ldv_26716;
  } else {

  }

#line 394
  return;
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_blank(int blank , struct fb_info *info ) 
{ 


  {
#line 411
  switch (blank) {
  case 0: 
#line 413
  intelfb_on(info);
#line 414
  goto ldv_26724;
  case 1: 
#line 416
  intelfb_off(info, 1);
#line 417
  goto ldv_26724;
  case 3: 
#line 419
  intelfb_off(info, 1);
#line 420
  goto ldv_26724;
  case 2: 
#line 422
  intelfb_off(info, 2);
#line 423
  goto ldv_26724;
  case 4: 
#line 425
  intelfb_off(info, 3);
#line 426
  goto ldv_26724;
  }
  ldv_26724: ;
#line 428
  return (0);
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static struct fb_ops intelfb_ops  = 
#line 431
     {& __this_module, 0, 0, 0, 0, & intelfb_check_var, & intelfb_set_par, & intelfb_setcolreg,
    0, & intelfb_blank, & intelfb_pan_display, & cfb_fillrect, & cfb_copyarea, & cfb_imageblit,
    0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
int intelfb_resize(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct fb_info *info ;
  struct drm_framebuffer *fb ;
  struct drm_display_mode *mode ;

  {
#line 454
  mode = crtc->desired_mode;
#line 456
  fb = crtc->fb;
#line 457
  if ((unsigned long )fb == (unsigned long )((struct drm_framebuffer *)0)) {
#line 458
    return (1);
  } else {

  }
#line 460
  info = (struct fb_info *)fb->fbdev;
#line 461
  if ((unsigned long )info == (unsigned long )((struct fb_info *)0)) {
#line 462
    return (1);
  } else {

  }
#line 464
  if ((unsigned long )mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 465
    return (1);
  } else {

  }
#line 467
  info->var.xres = (__u32 )mode->hdisplay;
#line 468
  info->var.right_margin = (__u32 )(mode->hsync_start - mode->hdisplay);
#line 469
  info->var.hsync_len = (__u32 )(mode->hsync_end - mode->hsync_start);
#line 470
  info->var.left_margin = (__u32 )(mode->htotal - mode->hsync_end);
#line 471
  info->var.yres = (__u32 )mode->vdisplay;
#line 472
  info->var.lower_margin = (__u32 )(mode->vsync_start - mode->vdisplay);
#line 473
  info->var.vsync_len = (__u32 )(mode->vsync_end - mode->vsync_start);
#line 474
  info->var.upper_margin = (__u32 )(mode->vtotal - mode->vsync_end);
#line 475
  info->var.pixclock = (__u32 )((((10000000 / mode->htotal) * 1000) / mode->vtotal) * 100);
#line 477
  info->var.pixclock = (info->var.pixclock * 1000U) / (__u32 )mode->vrefresh;
#line 479
  return (0);
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static struct drm_mode_set kernelfb_mode  ;
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
int intelfb_panic(struct notifier_block *n , unsigned long ununsed , void *panic_str ) 
{ 


  {
#line 488
  printk("<3>[drm:%s] *ERROR* panic occurred, switching back to text console\n", "intelfb_panic");
#line 490
  intelfb_restore();
#line 491
  return (0);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static struct notifier_block paniced  =    {& intelfb_panic, 0, 0};
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_create(struct drm_device *dev , uint32_t fb_width , uint32_t fb_height ,
                          uint32_t surface_width , uint32_t surface_height , struct intel_framebuffer **intel_fb_p ) 
{ 
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_framebuffer *fb ;
  struct intel_framebuffer *intel_fb ;
  struct drm_mode_fb_cmd mode_cmd ;
  struct drm_gem_object *fbo ;
  struct drm_i915_gem_object *obj_priv ;
  struct device *device ;
  int size ;
  int ret ;
  int mmio_bar ;
  struct drm_framebuffer  const  *__mptr ;
  void *tmp ;

  {
#line 509
  fbo = 0;
#line 511
  device = & (dev->pdev)->dev;
#line 512
  mmio_bar = (((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706);
#line 514
  mode_cmd.width = surface_width;
#line 515
  mode_cmd.height = surface_height;
#line 517
  mode_cmd.bpp = 32U;
#line 518
  mode_cmd.pitch = (mode_cmd.width * ((mode_cmd.bpp + 1U) / 8U) + 63U) & 4294967232U;
#line 519
  mode_cmd.depth = 24U;
#line 521
  size = (int )(mode_cmd.pitch * mode_cmd.height);
#line 522
  size = (size + 4095) & -4096;
#line 523
  fbo = drm_gem_object_alloc(dev, (size_t )size);
#line 524
  if ((unsigned long )fbo == (unsigned long )((struct drm_gem_object *)0)) {
#line 525
    printk("<3>failed to allocate framebuffer\n");
#line 526
    ret = -12;
#line 527
    goto out;
  } else {

  }
#line 529
  obj_priv = (struct drm_i915_gem_object *)fbo->driver_private;
#line 531
  mutex_lock_nested(& dev->struct_mutex, 0U);
#line 533
  ret = i915_gem_object_pin(fbo, 4096U);
#line 534
  if (ret != 0) {
#line 535
    printk("<3>[drm:%s] *ERROR* failed to pin fb: %d\n", "intelfb_create", ret);
#line 536
    goto out_unref;
  } else {

  }
#line 540
  i915_gem_object_set_to_gtt_domain(fbo, 1);
#line 542
  ret = intel_framebuffer_create(dev, & mode_cmd, & fb, fbo);
#line 543
  if (ret != 0) {
#line 544
    printk("<3>[drm:%s] *ERROR* failed to allocate fb.\n", "intelfb_create");
#line 545
    goto out_unref;
  } else {

  }
#line 548
  list_add(& fb->filp_head, & dev->mode_config.fb_kernel_list);
#line 550
  __mptr = (struct drm_framebuffer  const  *)fb;
#line 550
  intel_fb = (struct intel_framebuffer *)__mptr;
#line 551
  *intel_fb_p = intel_fb;
#line 553
  info = framebuffer_alloc(40UL, device);
#line 554
  if ((unsigned long )info == (unsigned long )((struct fb_info *)0)) {
#line 555
    ret = -12;
#line 556
    goto out_unref;
  } else {

  }
#line 559
  par = (struct intelfb_par *)info->par;
#line 561
  strcpy((char *)(& info->fix.id), "inteldrmfb");
#line 562
  info->fix.type = 0U;
#line 563
  info->fix.visual = 2U;
#line 564
  info->fix.type_aux = 0U;
#line 565
  info->fix.xpanstep = 1U;
#line 566
  info->fix.ypanstep = 1U;
#line 567
  info->fix.ywrapstep = 0U;
#line 568
  info->fix.accel = 42U;
#line 569
  info->fix.type_aux = 0U;
#line 571
  info->flags = 1;
#line 573
  info->fbops = & intelfb_ops;
#line 575
  info->fix.line_length = fb->pitch;
#line 576
  info->fix.smem_start = dev->mode_config.fb_base + (unsigned long )obj_priv->gtt_offset;
#line 577
  info->fix.smem_len = (__u32 )size;
#line 579
  info->flags = 1;
#line 581
  tmp = ioremap_wc((dev->agp)->base + (unsigned long )obj_priv->gtt_offset, (unsigned long )size);
#line 581
  info->screen_base = (char *)tmp;
#line 583
  if ((unsigned long )info->screen_base == (unsigned long )((char *)0)) {
#line 584
    ret = -28;
#line 585
    goto out_unref;
  } else {

  }
#line 587
  info->screen_size = (unsigned long )size;
#line 591
  info->pseudo_palette = (void *)(& fb->pseudo_palette);
#line 592
  info->var.xres_virtual = fb->width;
#line 593
  info->var.yres_virtual = fb->height;
#line 594
  info->var.bits_per_pixel = (__u32 )fb->bits_per_pixel;
#line 595
  info->var.xoffset = 0U;
#line 596
  info->var.yoffset = 0U;
#line 597
  info->var.activate = 0U;
#line 598
  info->var.height = 4294967295U;
#line 599
  info->var.width = 4294967295U;
#line 601
  info->var.xres = fb_width;
#line 602
  info->var.yres = fb_height;
#line 605
  info->fix.mmio_start = (unsigned long )(dev->pdev)->resource[mmio_bar].start;
#line 606
  info->fix.mmio_len = (dev->pdev)->resource[mmio_bar].start != 0ULL || (dev->pdev)->resource[mmio_bar].end != (dev->pdev)->resource[mmio_bar].start ? ((__u32 )(dev->pdev)->resource[mmio_bar].end - (__u32 )(dev->pdev)->resource[mmio_bar].start) + 1U : 0U;
#line 608
  info->pixmap.size = 65536U;
#line 609
  info->pixmap.buf_align = 8U;
#line 610
  info->pixmap.access_align = 32U;
#line 611
  info->pixmap.flags = 2U;
#line 612
  info->pixmap.scan_align = 1U;
#line 614
  switch (fb->depth) {
  case 8U: 
#line 616
  info->var.red.offset = 0U;
#line 617
  info->var.green.offset = 0U;
#line 618
  info->var.blue.offset = 0U;
#line 619
  info->var.red.length = 8U;
#line 620
  info->var.green.length = 8U;
#line 621
  info->var.blue.length = 8U;
#line 622
  info->var.transp.offset = 0U;
#line 623
  info->var.transp.length = 0U;
#line 624
  goto ldv_26785;
  case 15U: 
#line 626
  info->var.red.offset = 10U;
#line 627
  info->var.green.offset = 5U;
#line 628
  info->var.blue.offset = 0U;
#line 629
  info->var.red.length = 5U;
#line 630
  info->var.green.length = 5U;
#line 631
  info->var.blue.length = 5U;
#line 632
  info->var.transp.offset = 15U;
#line 633
  info->var.transp.length = 1U;
#line 634
  goto ldv_26785;
  case 16U: 
#line 636
  info->var.red.offset = 11U;
#line 637
  info->var.green.offset = 5U;
#line 638
  info->var.blue.offset = 0U;
#line 639
  info->var.red.length = 5U;
#line 640
  info->var.green.length = 6U;
#line 641
  info->var.blue.length = 5U;
#line 642
  info->var.transp.offset = 0U;
#line 643
  goto ldv_26785;
  case 24U: 
#line 645
  info->var.red.offset = 16U;
#line 646
  info->var.green.offset = 8U;
#line 647
  info->var.blue.offset = 0U;
#line 648
  info->var.red.length = 8U;
#line 649
  info->var.green.length = 8U;
#line 650
  info->var.blue.length = 8U;
#line 651
  info->var.transp.offset = 0U;
#line 652
  info->var.transp.length = 0U;
#line 653
  goto ldv_26785;
  case 32U: 
#line 655
  info->var.red.offset = 16U;
#line 656
  info->var.green.offset = 8U;
#line 657
  info->var.blue.offset = 0U;
#line 658
  info->var.red.length = 8U;
#line 659
  info->var.green.length = 8U;
#line 660
  info->var.blue.length = 8U;
#line 661
  info->var.transp.offset = 24U;
#line 662
  info->var.transp.length = 8U;
#line 663
  goto ldv_26785;
  default: ;
#line 665
  goto ldv_26785;
  }
  ldv_26785: 
#line 668
  fb->fbdev = (void *)info;
#line 670
  par->intel_fb = intel_fb;
#line 671
  par->dev = dev;
#line 674
  printk("allocated %dx%d fb: 0x%08x, bo %p\n", intel_fb->base.width, intel_fb->base.height,
         obj_priv->gtt_offset, fbo);
#line 677
  mutex_unlock(& dev->struct_mutex);
#line 678
  return (0);
  out_unref: 
#line 681
  drm_gem_object_unreference(fbo);
#line 682
  mutex_unlock(& dev->struct_mutex);
  out: ;
#line 684
  return (ret);
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_multi_fb_probe_crtc(struct drm_device *dev , struct drm_crtc *crtc ) 
{ 
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_framebuffer *intel_fb ;
  struct drm_framebuffer *fb ;
  struct drm_connector *connector ;
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_mode_set *modeset ;
  unsigned int width ;
  unsigned int height ;
  int new_fb ;
  int ret ;
  int i ;
  int conn_count ;
  bool tmp ;
  int tmp___0 ;
  struct drm_framebuffer  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  int tmp___1 ;

  {
#line 689
  __mptr = (struct drm_crtc  const  *)crtc;
#line 689
  intel_crtc = (struct intel_crtc *)__mptr;
#line 697
  new_fb = 0;
#line 700
  tmp = drm_helper_crtc_in_use(crtc);
#line 700
  if (tmp) {
#line 700
    tmp___0 = 0;
  } else {
#line 700
    tmp___0 = 1;
  }
#line 700
  if (tmp___0) {
#line 701
    return (0);
  } else {

  }
#line 703
  if ((unsigned long )crtc->desired_mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 704
    return (0);
  } else {

  }
#line 706
  width = (unsigned int )(crtc->desired_mode)->hdisplay;
#line 707
  height = (unsigned int )(crtc->desired_mode)->vdisplay;
#line 710
  if ((unsigned long )intel_crtc->mode_set.fb == (unsigned long )((struct drm_framebuffer *)0)) {
#line 711
    ret = intelfb_create(dev, width, height, width, height, & intel_fb);
#line 712
    if (ret != 0) {
#line 713
      return (-22);
    } else {

    }
#line 714
    new_fb = 1;
  } else {
#line 716
    fb = intel_crtc->mode_set.fb;
#line 717
    __mptr___0 = (struct drm_framebuffer  const  *)fb;
#line 717
    intel_fb = (struct intel_framebuffer *)__mptr___0;
#line 718
    if (intel_fb->base.width < width || intel_fb->base.height < height) {
#line 719
      return (-22);
    } else {

    }
  }
#line 722
  info = (struct fb_info *)intel_fb->base.fbdev;
#line 723
  par = (struct intelfb_par *)info->par;
#line 725
  modeset = & intel_crtc->mode_set;
#line 726
  modeset->fb = & intel_fb->base;
#line 727
  conn_count = 0;
#line 728
  __mptr___1 = (struct list_head  const  *)dev->mode_config.connector_list.next;
#line 728
  connector = (struct drm_connector *)__mptr___1 + 0xfffffffffffffc18UL;
#line 728
  goto ldv_26818;
  ldv_26817: ;
#line 729
  if ((unsigned long )connector->encoder != (unsigned long )((struct drm_encoder *)0)) {
#line 730
    if ((unsigned long )(connector->encoder)->crtc == (unsigned long )modeset->crtc) {
#line 731
      *(modeset->connectors + (unsigned long )conn_count) = connector;
#line 732
      conn_count = conn_count + 1;
#line 733
      if (conn_count > 4) {
#line 734
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"),
                             "i" (734), "i" (24UL));
        ldv_26816: ;
#line 734
        goto ldv_26816;
      } else {

      }
    } else {

    }
  } else {

  }
#line 728
  __mptr___2 = (struct list_head  const  *)connector->head.next;
#line 728
  connector = (struct drm_connector *)__mptr___2 + 0xfffffffffffffc18UL;
  ldv_26818: 
#line 728
  __builtin_prefetch((void const   *)connector->head.next);
#line 728
  if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {
#line 729
    goto ldv_26817;
  } else {

  }
#line 738
  i = conn_count;
#line 738
  goto ldv_26821;
  ldv_26820: 
#line 739
  *(modeset->connectors + (unsigned long )i) = 0;
#line 738
  i = i + 1;
  ldv_26821: ;
#line 738
  if (i <= 3) {
#line 739
    goto ldv_26820;
  } else {

  }
#line 741
  par->crtc_ids[0] = crtc->base.id;
#line 743
  modeset->num_connectors = (size_t )conn_count;
#line 744
  if ((unsigned long )modeset->mode != (unsigned long )(modeset->crtc)->desired_mode) {
#line 745
    modeset->mode = (modeset->crtc)->desired_mode;
  } else {

  }
#line 747
  par->crtc_count = 1;
#line 749
  if (new_fb != 0) {
#line 750
    info->var.pixclock = 4294967295U;
#line 751
    tmp___1 = register_framebuffer(info);
#line 751
    if (tmp___1 < 0) {
#line 752
      return (-22);
    } else {

    }
  } else {
#line 754
    intelfb_set_par(info);
  }
#line 756
  printk("<6>fb%d: %s frame buffer device\n", info->node, (char *)(& info->fix.id));
#line 760
  kernelfb_mode = *modeset;
#line 761
  atomic_notifier_chain_register(& panic_notifier_list, & paniced);
#line 762
  printk("<6>registered panic notifier\n");
#line 764
  return (0);
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_multi_fb_probe(struct drm_device *dev ) 
{ 
  struct drm_crtc *crtc ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 771
  ret = 0;
#line 773
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 773
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 773
  goto ldv_26833;
  ldv_26832: 
#line 774
  ret = intelfb_multi_fb_probe_crtc(dev, crtc);
#line 775
  if (ret != 0) {
#line 776
    return (ret);
  } else {

  }
#line 773
  __mptr___0 = (struct list_head  const  *)crtc->head.next;
#line 773
  crtc = (struct drm_crtc *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_26833: 
#line 773
  __builtin_prefetch((void const   *)crtc->head.next);
#line 773
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 774
    goto ldv_26832;
  } else {

  }

#line 778
  return (ret);
}
}
#line 781 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static int intelfb_single_fb_probe(struct drm_device *dev ) 
{ 
  struct drm_crtc *crtc ;
  struct drm_connector *connector ;
  unsigned int fb_width ;
  unsigned int fb_height ;
  unsigned int surface_width ;
  unsigned int surface_height ;
  int new_fb ;
  int crtc_count ;
  int ret ;
  int i ;
  int conn_count ;
  struct intel_framebuffer *intel_fb ;
  struct fb_info *info ;
  struct intelfb_par *par ;
  struct drm_mode_set *modeset ;
  struct list_head  const  *__mptr ;
  bool tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;
  struct drm_framebuffer *fb ;
  struct list_head  const  *__mptr___1 ;
  struct drm_framebuffer  const  *__mptr___2 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___3 ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr___4 ;
  struct list_head  const  *__mptr___5 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___6 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___7 ;
  int tmp___4 ;

  {
#line 785
  fb_width = 4294967295U;
#line 785
  fb_height = 4294967295U;
#line 786
  surface_width = 0U;
#line 786
  surface_height = 0U;
#line 787
  new_fb = 0;
#line 788
  crtc_count = 0;
#line 789
  conn_count = 0;
#line 793
  modeset = 0;
#line 795
  if (drm_debug != 0U) {
#line 795
    printk("<7>[drm:%s] \n", "intelfb_single_fb_probe");
  } else {

  }
#line 798
  __mptr = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 798
  crtc = (struct drm_crtc *)__mptr + 0xfffffffffffffff8UL;
#line 798
  goto ldv_26860;
  ldv_26859: 
#line 799
  tmp = drm_helper_crtc_in_use(crtc);
#line 799
  if (tmp) {
#line 799
    tmp___0 = 0;
  } else {
#line 799
    tmp___0 = 1;
  }
#line 799
  if (tmp___0) {
#line 800
    goto ldv_26858;
  } else {

  }
#line 802
  crtc_count = crtc_count + 1;
#line 803
  if ((unsigned long )crtc->desired_mode == (unsigned long )((struct drm_display_mode *)0)) {
#line 804
    goto ldv_26858;
  } else {

  }
#line 807
  if ((unsigned int )(crtc->desired_mode)->hdisplay < fb_width) {
#line 808
    fb_width = (unsigned int )(crtc->desired_mode)->hdisplay;
  } else {

  }
#line 810
  if ((unsigned int )(crtc->desired_mode)->vdisplay < fb_height) {
#line 811
    fb_height = (unsigned int )(crtc->desired_mode)->vdisplay;
  } else {

  }
#line 814
  if ((unsigned int )(crtc->desired_mode)->hdisplay > surface_width) {
#line 815
    surface_width = (unsigned int )(crtc->desired_mode)->hdisplay;
  } else {

  }
#line 817
  if ((unsigned int )(crtc->desired_mode)->vdisplay > surface_height) {
#line 818
    surface_height = (unsigned int )(crtc->desired_mode)->vdisplay;
  } else {

  }
  ldv_26858: 
#line 798
  __mptr___0 = (struct list_head  const  *)crtc->head.next;
#line 798
  crtc = (struct drm_crtc *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_26860: 
#line 798
  __builtin_prefetch((void const   *)crtc->head.next);
#line 798
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 799
    goto ldv_26859;
  } else {

  }

#line 821
  if ((crtc_count == 0 || fb_width == 4294967295U) || fb_height == 4294967295U) {
#line 824
    if (drm_debug != 0U) {
#line 824
      printk("<7>[drm:%s] no CRTCs available?\n", "intelfb_single_fb_probe");
    } else {

    }
#line 825
    return (0);
  } else {

  }
#line 830
  tmp___1 = list_empty((struct list_head  const  *)(& dev->mode_config.fb_kernel_list));
#line 830
  if (tmp___1 != 0) {
#line 831
    if (drm_debug != 0U) {
#line 831
      printk("<7>[drm:%s] creating new fb (console size %dx%d, buffer size %dx%d)\n",
             "intelfb_single_fb_probe", fb_width, fb_height, surface_width, surface_height);
    } else {

    }
#line 834
    ret = intelfb_create(dev, fb_width, fb_height, surface_width, surface_height,
                         & intel_fb);
#line 836
    if (ret != 0) {
#line 837
      return (-22);
    } else {

    }
#line 838
    new_fb = 1;
  } else {
#line 842
    __mptr___1 = (struct list_head  const  *)dev->mode_config.fb_kernel_list.next;
#line 842
    fb = (struct drm_framebuffer *)__mptr___1 + 0xffffffffffffff70UL;
#line 844
    __mptr___2 = (struct drm_framebuffer  const  *)fb;
#line 844
    intel_fb = (struct intel_framebuffer *)__mptr___2;
#line 853
    if (fb->width < surface_width || fb->height < surface_height) {
#line 855
      printk("<3>[drm:%s] *ERROR* fb not large enough for console\n", "intelfb_single_fb_probe");
#line 856
      return (-22);
    } else {

    }
  }
#line 861
  info = (struct fb_info *)intel_fb->base.fbdev;
#line 862
  par = (struct intelfb_par *)info->par;
#line 864
  crtc_count = 0;
#line 869
  __mptr___3 = (struct list_head  const  *)dev->mode_config.crtc_list.next;
#line 869
  crtc = (struct drm_crtc *)__mptr___3 + 0xfffffffffffffff8UL;
#line 869
  goto ldv_26887;
  ldv_26886: 
#line 870
  __mptr___4 = (struct drm_crtc  const  *)crtc;
#line 870
  intel_crtc = (struct intel_crtc *)__mptr___4;
#line 872
  modeset = & intel_crtc->mode_set;
#line 873
  modeset->fb = & intel_fb->base;
#line 874
  conn_count = 0;
#line 875
  __mptr___5 = (struct list_head  const  *)dev->mode_config.connector_list.next;
#line 875
  connector = (struct drm_connector *)__mptr___5 + 0xfffffffffffffc18UL;
#line 875
  goto ldv_26881;
  ldv_26880: ;
#line 877
  if ((unsigned long )connector->encoder == (unsigned long )((struct drm_encoder *)0)) {
#line 878
    goto ldv_26878;
  } else {

  }
#line 880
  if ((unsigned long )(connector->encoder)->crtc == (unsigned long )modeset->crtc) {
#line 881
    tmp___2 = conn_count;
#line 881
    conn_count = conn_count + 1;
#line 881
    *(modeset->connectors + (unsigned long )tmp___2) = connector;
#line 882
    if (conn_count > 4) {
#line 883
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"),
                           "i" (883), "i" (24UL));
      ldv_26879: ;
#line 883
      goto ldv_26879;
    } else {

    }
  } else {

  }
  ldv_26878: 
#line 875
  __mptr___6 = (struct list_head  const  *)connector->head.next;
#line 875
  connector = (struct drm_connector *)__mptr___6 + 0xfffffffffffffc18UL;
  ldv_26881: 
#line 875
  __builtin_prefetch((void const   *)connector->head.next);
#line 875
  if ((unsigned long )(& connector->head) != (unsigned long )(& dev->mode_config.connector_list)) {
#line 876
    goto ldv_26880;
  } else {

  }
#line 888
  i = conn_count;
#line 888
  goto ldv_26884;
  ldv_26883: 
#line 889
  *(modeset->connectors + (unsigned long )i) = 0;
#line 888
  i = i + 1;
  ldv_26884: ;
#line 888
  if (i <= 3) {
#line 889
    goto ldv_26883;
  } else {

  }
#line 891
  tmp___3 = crtc_count;
#line 891
  crtc_count = crtc_count + 1;
#line 891
  par->crtc_ids[tmp___3] = crtc->base.id;
#line 893
  modeset->num_connectors = (size_t )conn_count;
#line 894
  if ((unsigned long )modeset->mode != (unsigned long )(modeset->crtc)->desired_mode) {
#line 895
    modeset->mode = (modeset->crtc)->desired_mode;
  } else {

  }
#line 869
  __mptr___7 = (struct list_head  const  *)crtc->head.next;
#line 869
  crtc = (struct drm_crtc *)__mptr___7 + 0xfffffffffffffff8UL;
  ldv_26887: 
#line 869
  __builtin_prefetch((void const   *)crtc->head.next);
#line 869
  if ((unsigned long )(& crtc->head) != (unsigned long )(& dev->mode_config.crtc_list)) {
#line 870
    goto ldv_26886;
  } else {

  }
#line 897
  par->crtc_count = crtc_count;
#line 899
  if (new_fb != 0) {
#line 900
    info->var.pixclock = 4294967295U;
#line 901
    tmp___4 = register_framebuffer(info);
#line 901
    if (tmp___4 < 0) {
#line 902
      return (-22);
    } else {

    }
  } else {
#line 904
    intelfb_set_par(info);
  }
#line 906
  printk("<6>fb%d: %s frame buffer device\n", info->node, (char *)(& info->fix.id));
#line 910
  kernelfb_mode = *modeset;
#line 911
  atomic_notifier_chain_register(& panic_notifier_list, & paniced);
#line 912
  printk("<6>registered panic notifier\n");
#line 914
  return (0);
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void intelfb_restore(void) 
{ 


  {
#line 924
  drm_crtc_helper_set_config(& kernelfb_mode);
#line 925
  return;
}
}
#line 927 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static void intelfb_sysrq(int dummy1 , struct tty_struct *dummy3 ) 
{ 


  {
#line 929
  intelfb_restore();
#line 930
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
static struct sysrq_key_op sysrq_intelfb_restore_op  =    {& intelfb_sysrq, (char *)"force fb", (char *)"force restore of fb console", 0};
#line 938 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
int intelfb_probe(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 942
  if (drm_debug != 0U) {
#line 942
    printk("<7>[drm:%s] \n", "intelfb_probe");
  } else {

  }
#line 962
  if (i915_fbpercrtc == 1U) {
#line 963
    ret = intelfb_multi_fb_probe(dev);
  } else {
#line 965
    ret = intelfb_single_fb_probe(dev);
  }
#line 968
  register_sysrq_key(103, & sysrq_intelfb_restore_op);
#line 970
  return (ret);
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
int intelfb_remove(struct drm_device *dev , struct drm_framebuffer *fb ) 
{ 
  struct fb_info *info ;

  {
#line 978
  if ((unsigned long )fb == (unsigned long )((struct drm_framebuffer *)0)) {
#line 979
    return (-22);
  } else {

  }
#line 981
  info = (struct fb_info *)fb->fbdev;
#line 983
  if ((unsigned long )info != (unsigned long )((struct fb_info *)0)) {
#line 984
    unregister_framebuffer(info);
#line 985
    iounmap((void volatile   *)info->screen_base);
#line 986
    framebuffer_release(info);
  } else {

  }
#line 989
  atomic_notifier_chain_unregister(& panic_notifier_list, & paniced);
#line 990
  memset((void *)(& kernelfb_mode), 0, 64UL);
#line 991
  return (0);
}
}
#line 1033 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv_main16_sequence_infinite_withcheck_stateful(void) 
{ 
  struct fb_var_screeninfo *var_group1 ;
  struct fb_info *var_group2 ;
  unsigned int var_intelfb_setcolreg_0_p0 ;
  unsigned int var_intelfb_setcolreg_0_p1 ;
  unsigned int var_intelfb_setcolreg_0_p2 ;
  unsigned int var_intelfb_setcolreg_0_p3 ;
  unsigned int var_intelfb_setcolreg_0_p4 ;
  struct fb_info *var_intelfb_setcolreg_0_p5 ;
  int var_intelfb_blank_6_p0 ;
  struct notifier_block *var_group3 ;
  unsigned long var_intelfb_panic_8_p1 ;
  void *var_intelfb_panic_8_p2 ;
  int var_intelfb_sysrq_14_p0 ;
  struct tty_struct *var_group4 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1093
  LDV_IN_INTERRUPT = 1;
#line 1102
  ldv_initialize();
#line 1110
  goto ldv_26961;
  ldv_26960: 
#line 1113
  tmp = nondet_int();
#line 1113
  switch (tmp) {
  case 0: 
#line 1123
  ldv_handler_precall();
#line 1124
  intelfb_check_var(var_group1, var_group2);
#line 1131
  goto ldv_26952;
  case 1: 
#line 1140
  ldv_handler_precall();
#line 1141
  intelfb_set_par(var_group2);
#line 1148
  goto ldv_26952;
  case 2: 
#line 1157
  ldv_handler_precall();
#line 1158
  intelfb_setcolreg(var_intelfb_setcolreg_0_p0, var_intelfb_setcolreg_0_p1, var_intelfb_setcolreg_0_p2,
                    var_intelfb_setcolreg_0_p3, var_intelfb_setcolreg_0_p4, var_intelfb_setcolreg_0_p5);
#line 1165
  goto ldv_26952;
  case 3: 
#line 1174
  ldv_handler_precall();
#line 1175
  intelfb_pan_display(var_group1, var_group2);
#line 1182
  goto ldv_26952;
  case 4: 
#line 1191
  ldv_handler_precall();
#line 1192
  intelfb_blank(var_intelfb_blank_6_p0, var_group2);
#line 1199
  goto ldv_26952;
  case 5: 
#line 1208
  ldv_handler_precall();
#line 1209
  intelfb_panic(var_group3, var_intelfb_panic_8_p1, var_intelfb_panic_8_p2);
#line 1216
  goto ldv_26952;
  case 6: 
#line 1225
  ldv_handler_precall();
#line 1226
  intelfb_sysrq(var_intelfb_sysrq_14_p0, var_group4);
#line 1233
  goto ldv_26952;
  default: ;
#line 1234
  goto ldv_26952;
  }
  ldv_26952: ;
  ldv_26961: 
#line 1110
  tmp___0 = nondet_int();
#line 1110
  if (tmp___0 != 0) {
#line 1111
    goto ldv_26960;
  } else {

  }


#line 1243
  ldv_check_final_state();
#line 1246
  return;
}
}
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_597(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1255
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1257
  __ldv_spin_lock(ldv_func_arg1);
#line 1258
  return;
}
}
#line 1260 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_598(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1265
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1267
  __ldv_spin_unlock(ldv_func_arg1);
#line 1268
  return;
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
int ldv___ldv_spin_trylock_599(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1275
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1275
  ldv_func_res = tmp;
#line 1277
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1277
  return (tmp___0);
#line 1279
  return (ldv_func_res);
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_600(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1287
  ldv_spin_lock_dcache_lock();
#line 1289
  __ldv_spin_lock(ldv_func_arg1);
#line 1290
  return;
}
}
#line 1292 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_601(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1297
  ldv_spin_lock_d_lock_of_dentry();
#line 1299
  __ldv_spin_lock(ldv_func_arg1);
#line 1300
  return;
}
}
#line 1302 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_602(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1307
  ldv_spin_unlock_d_lock_of_dentry();
#line 1309
  __ldv_spin_unlock(ldv_func_arg1);
#line 1310
  return;
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_603(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1317
  ldv_spin_unlock_dcache_lock();
#line 1319
  __ldv_spin_unlock(ldv_func_arg1);
#line 1320
  return;
}
}
#line 1322 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_604(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1327
  ldv_spin_lock_d_lock_of_dentry();
#line 1329
  __ldv_spin_lock(ldv_func_arg1);
#line 1330
  return;
}
}
#line 1332 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_605(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1337
  ldv_spin_unlock_d_lock_of_dentry();
#line 1339
  __ldv_spin_unlock(ldv_func_arg1);
#line 1340
  return;
}
}
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_606(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1347
  ldv_spin_lock_i_lock_of_inode();
#line 1349
  __ldv_spin_lock(ldv_func_arg1);
#line 1350
  return;
}
}
#line 1352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_607(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1357
  ldv_spin_unlock_i_lock_of_inode();
#line 1359
  __ldv_spin_unlock(ldv_func_arg1);
#line 1360
  return;
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_608(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1367
  ldv_spin_lock_d_lock_of_dentry();
#line 1369
  __ldv_spin_lock(ldv_func_arg1);
#line 1370
  return;
}
}
#line 1372 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_609(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1377
  ldv_spin_unlock_d_lock_of_dentry();
#line 1379
  __ldv_spin_unlock(ldv_func_arg1);
#line 1380
  return;
}
}
#line 1382 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_610(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1387
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1389
  __ldv_spin_lock(ldv_func_arg1);
#line 1390
  return;
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_611(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1399
  __ldv_spin_unlock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_lock_612(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1407
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1409
  __ldv_spin_lock(ldv_func_arg1);
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_613(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1417
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1419
  __ldv_spin_unlock(ldv_func_arg1);
#line 1420
  return;
}
}
#line 1422 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_fb.c.prepared"
void ldv___ldv_spin_unlock_614(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1427
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1429
  __ldv_spin_unlock(ldv_func_arg1);
#line 1430
  return;
}
}
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int strcmp(char const   * , char const   * ) ;
#line 25 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_633(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_636(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_637(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_640(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_642(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_644(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_646(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_648(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_651(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv___ldv_spin_lock_653(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_634(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_638(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_639(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_641(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_643(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_645(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_647(spinlock_t *ldv_func_arg1 ) ;
#line 77
void ldv___ldv_spin_unlock_649(spinlock_t *ldv_func_arg1 ) ;
#line 81
void ldv___ldv_spin_unlock_650(spinlock_t *ldv_func_arg1 ) ;
#line 85
void ldv___ldv_spin_unlock_652(spinlock_t *ldv_func_arg1 ) ;
#line 89
void ldv___ldv_spin_unlock_654(spinlock_t *ldv_func_arg1 ) ;
#line 94
int ldv___ldv_spin_trylock_635(spinlock_t *ldv_func_arg1 ) ;
#line 645 "include/drm/drm_crtc.h"
extern int drm_mode_vrefresh(struct drm_display_mode * ) ;
#line 651
extern int drm_connector_property_set_value(struct drm_connector * , struct drm_property * ,
                                            uint64_t  ) ;
#line 669
extern int drm_connector_attach_property(struct drm_connector * , struct drm_property * ,
                                         uint64_t  ) ;
#line 677
extern int drm_mode_create_tv_properties(struct drm_device * , int  , char ** ) ;
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static u32 const   filter_table[206U]  = 
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
  {      2973773824U,      773862656U,      889204256U,      805351744U, 
        899723616U,      767569536U,      2973774976U,      2975870976U, 
        782251584U,      872426880U,      805351712U,      920695136U, 
        757083888U,      2971677568U,      2975870976U,      791689088U, 
        855649472U,      805351680U,      941666656U,      746598224U, 
        2969580192U,      2975870976U,      797980864U,      840969248U, 
        805351648U,      964735328U,      734015424U,      2967482816U, 
        2975870976U,      804272672U,      828386144U,      2954932416U, 
        987804000U,      721426448U,      2965385504U,      2973806624U, 
        405289888U,      817900160U,      2954932384U,      1012969792U, 
        706746424U,      2963288192U,      2971709472U,      406338848U, 
        809511360U,      2957029504U,      1038135552U,      694163528U, 
        2961190912U,      2969612352U,      407387840U,      2956994816U, 
        2957029472U,      1065398464U,      679483480U,      2959126656U, 
        2963320928U,      408954912U,      2963286048U,      45152U, 
        2973773824U,      773862656U,      889204256U,      805351744U, 
        899723616U,      767569536U,      2973774976U,      2975870976U, 
        782251584U,      872426880U,      805351712U,      920695136U, 
        757083888U,      2971677568U,      2975870976U,      791689088U, 
        855649472U,      805351680U,      941666656U,      746598224U, 
        2969580192U,      2975870976U,      797980864U,      840969248U, 
        805351648U,      964735328U,      734015424U,      2967482816U, 
        2975870976U,      804272672U,      828386144U,      2954932416U, 
        987804000U,      721426448U,      2965385504U,      2973806624U, 
        405289888U,      817900160U,      2954932384U,      1012969792U, 
        706746424U,      2963288192U,      2971709472U,      406338848U, 
        809511360U,      2957029504U,      1038135552U,      694163528U, 
        2961190912U,      2969612352U,      407387840U,      2956994816U, 
        2957029472U,      1065398464U,      679483480U,      2959126656U, 
        2963320928U,      408954912U,      2963286048U,      45152U, 
        910176256U,      754986176U,      805320256U,      754988736U, 
        901786816U,      926953472U,      746597696U,      805320000U, 
        763377600U,      885009472U,      943730688U,      734014976U, 
        805319744U,      773863616U,      872426368U,      964702208U, 
        725626432U,      805319552U,      778058240U,      859843328U, 
        981479488U,      713043616U,      809513728U,      784350016U, 
        847260224U,      1006645312U,      704655040U,      813707840U, 
        784350336U,      838871488U,      1027616896U,      692072192U, 
        813707712U,      790642112U,      830482688U,      1048588480U, 
        679489344U,      817901888U,      790642496U,      826288192U, 
        671101184U,      671100672U,      12544U,      910176256U, 
        754986176U,      805320256U,      754988736U,      901786816U, 
        926953472U,      746597696U,      805320000U,      763377600U, 
        885009472U,      943730688U,      734014976U,      805319744U, 
        773863616U,      872426368U,      964702208U,      725626432U, 
        805319552U,      778058240U,      859843328U,      981479488U, 
        713043616U,      809513728U,      784350016U,      847260224U, 
        1006645312U,      704655040U,      813707840U,      784350336U, 
        838871488U,      1027616896U,      692072192U,      813707712U, 
        790642112U,      830482688U,      1048588480U,      679489344U, 
        817901888U,      790642496U,      826288192U,      671101184U, 
        671100672U,      12544U};
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  ntsc_m_csc_composite  = 
#line 286
     {818U, 301U, 2003U, 260U, 1843U, 1325U, 1479U, 3840U, 832U, 780U, 1744U, 3840U};
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  ntsc_m_levels_composite  =    {225, 267, 113};
#line 296 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  ntsc_m_csc_svideo  = 
#line 296
     {818U, 301U, 2003U, 308U, 1898U, 1380U, 781U, 3840U, 890U, 829U, 1782U, 3840U};
#line 302 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  ntsc_m_levels_svideo  =    {266, 316, 133};
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  ntsc_j_csc_composite  = 
#line 306
     {818U, 301U, 2003U, 281U, 1868U, 1350U, 1516U, 3840U, 858U, 802U, 1761U, 3840U};
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  ntsc_j_levels_composite  =    {225, 225, 113};
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  ntsc_j_csc_svideo  = 
#line 316
     {818U, 301U, 2003U, 332U, 1928U, 1409U, 802U, 3840U, 921U, 854U, 1802U, 3840U};
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  ntsc_j_levels_svideo  =    {266, 266, 133};
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_csc_composite  = 
#line 326
     {818U, 301U, 2003U, 275U, 1861U, 1343U, 1505U, 3840U, 851U, 796U, 1756U, 3840U};
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_levels_composite  =    {237, 237, 118};
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_csc_svideo  = 
#line 336
     {818U, 301U, 2003U, 325U, 1920U, 1401U, 796U, 3840U, 912U, 847U, 1797U, 3840U};
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_levels_svideo  =    {280, 280, 139};
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_m_csc_composite  = 
#line 346
     {818U, 301U, 2003U, 260U, 1843U, 1325U, 1479U, 3840U, 832U, 780U, 1744U, 3840U};
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_m_levels_composite  =    {225, 267, 113};
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_m_csc_svideo  = 
#line 356
     {818U, 301U, 2003U, 308U, 1898U, 1380U, 781U, 3840U, 890U, 829U, 1782U, 3840U};
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_m_levels_svideo  =    {266, 316, 133};
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_n_csc_composite  = 
#line 366
     {818U, 301U, 2003U, 260U, 1843U, 1325U, 1479U, 3840U, 832U, 780U, 1744U, 3840U};
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_n_levels_composite  =    {225, 267, 118};
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  pal_n_csc_svideo  = 
#line 376
     {818U, 301U, 2003U, 308U, 1898U, 1380U, 781U, 3840U, 890U, 829U, 1782U, 3840U};
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  pal_n_levels_svideo  =    {266, 316, 139};
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  sdtv_csc_yprpb  = 
#line 389
     {818U, 301U, 2003U, 326U, 1369U, 851U, 256U, 3840U, 256U, 941U, 1869U, 3840U};
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct color_conversion  const  hdtv_csc_yprpb  = 
#line 401
     {1459U, 366U, 1832U, 326U, 2005U, 907U, 256U, 3840U, 256U, 977U, 1724U, 3840U};
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct video_levels  const  component_levels  =    {279, 279, 0};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct tv_mode  const  tv_modes[15U]  = 
#line 482
  {      {(char *)"NTSC-M", 107520, 29970, 786432U, 64, 836, 124, 857, 0, 0, 0, 6, 7,
      6, 1, 0, 1, 18, 20, 21, 240, 1, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240, 20013,
      0, 136, 7624, 0, 16777216U, 0, & ntsc_m_levels_composite, & ntsc_m_levels_svideo,
      & ntsc_m_csc_composite, & ntsc_m_csc_svideo, (u32 const   *)(& filter_table),
      0}, 
        {(char *)"NTSC-443", 107520, 29970, 786432U, 64, 836, 124, 857, 0, 0, 0, 6, 7,
      6, 1, 0, 1, 18, 20, 21, 240, 1, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240, 20625,
      0, 168, 18557, 0, 33554432U, 1, & ntsc_m_levels_composite, & ntsc_m_levels_svideo,
      & ntsc_m_csc_composite, & ntsc_m_csc_svideo, (u32 const   *)(& filter_table),
      0}, 
        {(char *)"NTSC-J", 107520, 29970, 786432U, 64, 836, 124, 857, 0, 0, 0, 6, 7,
      6, 1, 0, 1, 18, 20, 21, 240, 1, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240, 20013,
      0, 136, 7624, 0, 16777216U, 0, & ntsc_j_levels_composite, & ntsc_j_levels_svideo,
      & ntsc_j_csc_composite, & ntsc_j_csc_svideo, (u32 const   *)(& filter_table),
      0}, 
        {(char *)"PAL-M", 107520, 29970, 786432U, 64, 836, 124, 857, 0, 0, 0, 6, 7, 6,
      1, 0, 1, 18, 20, 21, 240, 1, 72, 34, 9, 240, 10, 240, 9, 240, 10, 240, 20013,
      0, 136, 7624, 0, 16777216U, 0, & pal_m_levels_composite, & pal_m_levels_svideo,
      & pal_m_csc_composite, & pal_m_csc_svideo, (u32 const   *)(& filter_table),
      0}, 
        {(char *)"PAL-N", 107520, 25000, 786432U, 64, 844, 128, 863, 0, 0, 0, 6, 7, 6,
      1, 0, 1, 18, 24, 25, 286, 1, 73, 34, 8, 285, 8, 286, 9, 286, 9, 285, 20625,
      0, 168, 18557, 0, 33554432U, 1, & pal_n_levels_composite, & pal_n_levels_svideo,
      & pal_n_csc_composite, & pal_n_csc_svideo, (u32 const   *)(& filter_table),
      0}, 
        {(char *)"PAL", 107520, 25000, 786432U, 64, 844, 128, 863, 0, 0, 0, 5, 6, 5,
      1, 0, 1, 15, 24, 25, 286, 1, 73, 32, 8, 285, 8, 286, 9, 286, 9, 285, 20625,
      0, 168, 18557, 0, 33554432U, 1, & pal_levels_composite, & pal_levels_svideo,
      & pal_csc_composite, & pal_csc_svideo, (u32 const   *)(& filter_table), 0}, 
        {(char *)"480p@59.94Hz", 107520, 59940, 0U, 64, 842, 122, 857, 1, 0, 1, 12, 12,
      12, 0, 0, 0, 0, 44, 44, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"480p@60Hz", 107520, 60000, 0U, 64, 842, 122, 856, 1, 0, 1, 12, 12,
      12, 0, 0, 0, 0, 44, 44, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"576p", 107520, 50000, 0U, 64, 859, 139, 863, 1, 0, 1, 10, 10, 10, 0,
      0, 0, 0, 48, 48, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U, (_Bool)0,
      0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"720p@60Hz", 148800, 60000, 262144U, 80, 1580, 300, 1649, 1, 1, 1, 10,
      10, 10, 0, 0, 0, 0, 29, 29, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"720p@59.94Hz", 148800, 59940, 262144U, 80, 1580, 300, 1651, 1, 1, 1,
      10, 10, 10, 0, 0, 0, 0, 29, 29, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"720p@50Hz", 148800, 50000, 262144U, 80, 1580, 300, 1979, 1, 1, 1, 10,
      10, 10, 0, 0, 0, 0, 29, 29, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 800}, 
        {(char *)"1080i@50Hz", 148800, 25000, 262144U, 88, 2155, 235, 2639, 0, 1, 1,
      4, 5, 10, 1, 4, 4, 10, 21, 22, 539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"1080i@60Hz", 148800, 30000, 262144U, 88, 2155, 235, 2199, 0, 1, 1,
      4, 5, 10, 1, 4, 4, 10, 21, 22, 539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}, 
        {(char *)"1080i@59.94Hz", 148800, 29970, 262144U, 88, 2155, 235, 2200, 0, 1,
      1, 4, 5, 10, 1, 4, 4, 10, 21, 22, 539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0U, (_Bool)0, 0, 0, 0, 0, (u32 const   *)(& filter_table), 0}};
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 972
  dev = encoder->dev;
#line 973
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 975
  switch (mode) {
  case 0: 
#line 977
  tmp = readl((void const volatile   *)dev_priv->regs + 425984U);
#line 977
  writel(tmp | 2147483648U, (void volatile   *)dev_priv->regs + 425984U);
#line 978
  goto ldv_26129;
  case 1: ;
  case 2: ;
  case 3: 
#line 982
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 425984U);
#line 982
  writel(tmp___0 & 2147483647U, (void volatile   *)dev_priv->regs + 425984U);
#line 983
  goto ldv_26129;
  }
  ldv_26129: ;
#line 986
  return;
}
}
#line 988 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_save(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  int i ;

  {
#line 990
  dev = connector->dev;
#line 991
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 992
  __mptr = (struct drm_connector  const  *)connector;
#line 992
  intel_output = (struct intel_output *)__mptr;
#line 993
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 996
  tv_priv->save_TV_H_CTL_1 = readl((void const volatile   *)dev_priv->regs + 426032U);
#line 997
  tv_priv->save_TV_H_CTL_2 = readl((void const volatile   *)dev_priv->regs + 426036U);
#line 998
  tv_priv->save_TV_H_CTL_3 = readl((void const volatile   *)dev_priv->regs + 426040U);
#line 999
  tv_priv->save_TV_V_CTL_1 = readl((void const volatile   *)dev_priv->regs + 426044U);
#line 1000
  tv_priv->save_TV_V_CTL_2 = readl((void const volatile   *)dev_priv->regs + 426048U);
#line 1001
  tv_priv->save_TV_V_CTL_3 = readl((void const volatile   *)dev_priv->regs + 426052U);
#line 1002
  tv_priv->save_TV_V_CTL_4 = readl((void const volatile   *)dev_priv->regs + 426056U);
#line 1003
  tv_priv->save_TV_V_CTL_5 = readl((void const volatile   *)dev_priv->regs + 426060U);
#line 1004
  tv_priv->save_TV_V_CTL_6 = readl((void const volatile   *)dev_priv->regs + 426064U);
#line 1005
  tv_priv->save_TV_V_CTL_7 = readl((void const volatile   *)dev_priv->regs + 426068U);
#line 1006
  tv_priv->save_TV_SC_CTL_1 = readl((void const volatile   *)dev_priv->regs + 426080U);
#line 1007
  tv_priv->save_TV_SC_CTL_2 = readl((void const volatile   *)dev_priv->regs + 426084U);
#line 1008
  tv_priv->save_TV_SC_CTL_3 = readl((void const volatile   *)dev_priv->regs + 426088U);
#line 1010
  tv_priv->save_TV_CSC_Y = readl((void const volatile   *)dev_priv->regs + 426000U);
#line 1011
  tv_priv->save_TV_CSC_Y2 = readl((void const volatile   *)dev_priv->regs + 426004U);
#line 1012
  tv_priv->save_TV_CSC_U = readl((void const volatile   *)dev_priv->regs + 426008U);
#line 1013
  tv_priv->save_TV_CSC_U2 = readl((void const volatile   *)dev_priv->regs + 426012U);
#line 1014
  tv_priv->save_TV_CSC_V = readl((void const volatile   *)dev_priv->regs + 426016U);
#line 1015
  tv_priv->save_TV_CSC_V2 = readl((void const volatile   *)dev_priv->regs + 426020U);
#line 1016
  tv_priv->save_TV_CLR_KNOBS = readl((void const volatile   *)dev_priv->regs + 426024U);
#line 1017
  tv_priv->save_TV_CLR_LEVEL = readl((void const volatile   *)dev_priv->regs + 426028U);
#line 1018
  tv_priv->save_TV_WIN_POS = readl((void const volatile   *)dev_priv->regs + 426096U);
#line 1019
  tv_priv->save_TV_WIN_SIZE = readl((void const volatile   *)dev_priv->regs + 426100U);
#line 1020
  tv_priv->save_TV_FILTER_CTL_1 = readl((void const volatile   *)dev_priv->regs + 426112U);
#line 1021
  tv_priv->save_TV_FILTER_CTL_2 = readl((void const volatile   *)dev_priv->regs + 426116U);
#line 1022
  tv_priv->save_TV_FILTER_CTL_3 = readl((void const volatile   *)dev_priv->regs + 426120U);
#line 1024
  i = 0;
#line 1024
  goto ldv_26144;
  ldv_26143: 
#line 1025
  tv_priv->save_TV_H_LUMA[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426240));
#line 1024
  i = i + 1;
  ldv_26144: ;
#line 1024
  if (i <= 59) {
#line 1025
    goto ldv_26143;
  } else {

  }
#line 1026
  i = 0;
#line 1026
  goto ldv_26147;
  ldv_26146: 
#line 1027
  tv_priv->save_TV_H_CHROMA[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426496));
#line 1026
  i = i + 1;
  ldv_26147: ;
#line 1026
  if (i <= 59) {
#line 1027
    goto ldv_26146;
  } else {

  }
#line 1028
  i = 0;
#line 1028
  goto ldv_26150;
  ldv_26149: 
#line 1029
  tv_priv->save_TV_V_LUMA[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426752));
#line 1028
  i = i + 1;
  ldv_26150: ;
#line 1028
  if (i <= 42) {
#line 1029
    goto ldv_26149;
  } else {

  }
#line 1030
  i = 0;
#line 1030
  goto ldv_26153;
  ldv_26152: 
#line 1031
  tv_priv->save_TV_V_CHROMA[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 427008));
#line 1030
  i = i + 1;
  ldv_26153: ;
#line 1030
  if (i <= 42) {
#line 1031
    goto ldv_26152;
  } else {

  }
#line 1033
  tv_priv->save_TV_DAC = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1034
  tv_priv->save_TV_CTL = readl((void const volatile   *)dev_priv->regs + 425984U);
#line 1035
  return;
}
}
#line 1038 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_restore(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  int i ;
  struct drm_crtc  const  *__mptr___0 ;
  int pipeconf_reg ;
  int dspcntr_reg ;
  int pipeconf ;
  unsigned int tmp ;
  int dspcntr ;
  unsigned int tmp___0 ;
  int dspbase_reg ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 1040
  dev = connector->dev;
#line 1041
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1042
  __mptr = (struct drm_connector  const  *)connector;
#line 1042
  intel_output = (struct intel_output *)__mptr;
#line 1043
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 1044
  crtc = (connector->encoder)->crtc;
#line 1049
  if ((unsigned long )crtc == (unsigned long )((struct drm_crtc *)0)) {
#line 1050
    return;
  } else {

  }
#line 1052
  __mptr___0 = (struct drm_crtc  const  *)crtc;
#line 1052
  intel_crtc = (struct intel_crtc *)__mptr___0;
#line 1053
  writel(tv_priv->save_TV_H_CTL_1, (void volatile   *)dev_priv->regs + 426032U);
#line 1054
  writel(tv_priv->save_TV_H_CTL_2, (void volatile   *)dev_priv->regs + 426036U);
#line 1055
  writel(tv_priv->save_TV_H_CTL_3, (void volatile   *)dev_priv->regs + 426040U);
#line 1056
  writel(tv_priv->save_TV_V_CTL_1, (void volatile   *)dev_priv->regs + 426044U);
#line 1057
  writel(tv_priv->save_TV_V_CTL_2, (void volatile   *)dev_priv->regs + 426048U);
#line 1058
  writel(tv_priv->save_TV_V_CTL_3, (void volatile   *)dev_priv->regs + 426052U);
#line 1059
  writel(tv_priv->save_TV_V_CTL_4, (void volatile   *)dev_priv->regs + 426056U);
#line 1060
  writel(tv_priv->save_TV_V_CTL_5, (void volatile   *)dev_priv->regs + 426060U);
#line 1061
  writel(tv_priv->save_TV_V_CTL_6, (void volatile   *)dev_priv->regs + 426064U);
#line 1062
  writel(tv_priv->save_TV_V_CTL_7, (void volatile   *)dev_priv->regs + 426068U);
#line 1063
  writel(tv_priv->save_TV_SC_CTL_1, (void volatile   *)dev_priv->regs + 426080U);
#line 1064
  writel(tv_priv->save_TV_SC_CTL_2, (void volatile   *)dev_priv->regs + 426084U);
#line 1065
  writel(tv_priv->save_TV_SC_CTL_3, (void volatile   *)dev_priv->regs + 426088U);
#line 1067
  writel(tv_priv->save_TV_CSC_Y, (void volatile   *)dev_priv->regs + 426000U);
#line 1068
  writel(tv_priv->save_TV_CSC_Y2, (void volatile   *)dev_priv->regs + 426004U);
#line 1069
  writel(tv_priv->save_TV_CSC_U, (void volatile   *)dev_priv->regs + 426008U);
#line 1070
  writel(tv_priv->save_TV_CSC_U2, (void volatile   *)dev_priv->regs + 426012U);
#line 1071
  writel(tv_priv->save_TV_CSC_V, (void volatile   *)dev_priv->regs + 426016U);
#line 1072
  writel(tv_priv->save_TV_CSC_V2, (void volatile   *)dev_priv->regs + 426020U);
#line 1073
  writel(tv_priv->save_TV_CLR_KNOBS, (void volatile   *)dev_priv->regs + 426024U);
#line 1074
  writel(tv_priv->save_TV_CLR_LEVEL, (void volatile   *)dev_priv->regs + 426028U);
#line 1077
  pipeconf_reg = intel_crtc->pipe == 0 ? 458760 : 462856;
#line 1079
  dspcntr_reg = intel_crtc->plane == 0 ? 459136 : 463232;
#line 1081
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1081
  pipeconf = (int )tmp;
#line 1082
  tmp___0 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1082
  dspcntr = (int )tmp___0;
#line 1083
  dspbase_reg = intel_crtc->plane == 0 ? 459140 : 463236;
#line 1086
  writel((unsigned int )dspcntr & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1088
  tmp___1 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1088
  writel(tmp___1, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1090
  if ((((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) {
#line 1092
    intel_wait_for_vblank(dev);
  } else {

  }
#line 1095
  writel((unsigned int )pipeconf & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1097
  intel_wait_for_vblank(dev);
#line 1100
  writel(tv_priv->save_TV_FILTER_CTL_1, (void volatile   *)dev_priv->regs + 426112U);
#line 1101
  writel(tv_priv->save_TV_FILTER_CTL_2, (void volatile   *)dev_priv->regs + 426116U);
#line 1102
  writel(tv_priv->save_TV_FILTER_CTL_3, (void volatile   *)dev_priv->regs + 426120U);
#line 1103
  writel(tv_priv->save_TV_WIN_POS, (void volatile   *)dev_priv->regs + 426096U);
#line 1104
  writel(tv_priv->save_TV_WIN_SIZE, (void volatile   *)dev_priv->regs + 426100U);
#line 1105
  writel((unsigned int )pipeconf, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1106
  writel((unsigned int )dspcntr, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1108
  tmp___2 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1108
  writel(tmp___2, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1111
  i = 0;
#line 1111
  goto ldv_26175;
  ldv_26174: 
#line 1112
  writel(tv_priv->save_TV_H_LUMA[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426240));
#line 1111
  i = i + 1;
  ldv_26175: ;
#line 1111
  if (i <= 59) {
#line 1112
    goto ldv_26174;
  } else {

  }
#line 1113
  i = 0;
#line 1113
  goto ldv_26178;
  ldv_26177: 
#line 1114
  writel(tv_priv->save_TV_H_CHROMA[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426496));
#line 1113
  i = i + 1;
  ldv_26178: ;
#line 1113
  if (i <= 59) {
#line 1114
    goto ldv_26177;
  } else {

  }
#line 1115
  i = 0;
#line 1115
  goto ldv_26181;
  ldv_26180: 
#line 1116
  writel(tv_priv->save_TV_V_LUMA[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426752));
#line 1115
  i = i + 1;
  ldv_26181: ;
#line 1115
  if (i <= 42) {
#line 1116
    goto ldv_26180;
  } else {

  }
#line 1117
  i = 0;
#line 1117
  goto ldv_26184;
  ldv_26183: 
#line 1118
  writel(tv_priv->save_TV_V_CHROMA[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 427008));
#line 1117
  i = i + 1;
  ldv_26184: ;
#line 1117
  if (i <= 42) {
#line 1118
    goto ldv_26183;
  } else {

  }
#line 1120
  writel(tv_priv->save_TV_DAC, (void volatile   *)dev_priv->regs + 425988U);
#line 1121
  writel(tv_priv->save_TV_CTL, (void volatile   *)dev_priv->regs + 425984U);
#line 1122
  return;
}
}
#line 1125 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct tv_mode  const  *intel_tv_mode_lookup(char *tv_format ) 
{ 
  int i ;
  struct tv_mode  const  *tv_mode ;
  int tmp ;

  {
#line 1129
  i = 0;
#line 1129
  goto ldv_26192;
  ldv_26191: 
#line 1130
  tv_mode = (struct tv_mode  const  *)(& tv_modes) + (unsigned long )i;
#line 1132
  tmp = strcmp((char const   *)tv_format, (char const   *)tv_mode->name);
#line 1132
  if (tmp == 0) {
#line 1133
    return (tv_mode);
  } else {

  }
#line 1129
  i = i + 1;
  ldv_26192: ;
#line 1129
  if ((unsigned int )i <= 14U) {
#line 1130
    goto ldv_26191;
  } else {

  }

#line 1135
  return (0);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct tv_mode  const  *intel_tv_mode_find(struct intel_output *intel_output ) 
{ 
  struct intel_tv_priv *tv_priv ;
  struct tv_mode  const  *tmp ;

  {
#line 1141
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 1143
  tmp = intel_tv_mode_lookup(tv_priv->tv_format);
#line 1143
  return (tmp);
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static enum drm_mode_status intel_tv_mode_valid(struct drm_connector *connector ,
                                                struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  int __x ;
  int tmp___0 ;

  {
#line 1149
  __mptr = (struct drm_connector  const  *)connector;
#line 1149
  intel_output = (struct intel_output *)__mptr;
#line 1150
  tmp = intel_tv_mode_find(intel_output);
#line 1150
  tv_mode = tmp;
#line 1153
  if ((unsigned long )tv_mode != (unsigned long )((struct tv_mode  const  *)0)) {
#line 1153
    tmp___0 = drm_mode_vrefresh(mode);
#line 1153
    __x = (int )tv_mode->refresh - tmp___0;
#line 1153
    if ((__x < 0 ? - __x : __x) <= 0) {
#line 1154
      return (MODE_OK);
    } else {

    }
  } else {

  }
#line 1155
  return (MODE_CLOCK_RANGE);
}
}
#line 1160 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static bool intel_tv_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_mode_config *drm_config ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  struct drm_encoder *other_encoder ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 1163
  dev = encoder->dev;
#line 1164
  drm_config = & dev->mode_config;
#line 1165
  __mptr = (struct drm_encoder  const  *)encoder;
#line 1165
  intel_output = (struct intel_output *)__mptr + 0xfffffffffffffa38UL;
#line 1166
  tmp = intel_tv_mode_find(intel_output);
#line 1166
  tv_mode = tmp;
#line 1169
  if ((unsigned long )tv_mode == (unsigned long )((struct tv_mode  const  *)0)) {
#line 1170
    return (0);
  } else {

  }
#line 1173
  __mptr___0 = (struct list_head  const  *)drm_config->encoder_list.next;
#line 1173
  other_encoder = (struct drm_encoder *)__mptr___0 + 0xfffffffffffffff8UL;
#line 1173
  goto ldv_26225;
  ldv_26224: ;
#line 1174
  if ((unsigned long )other_encoder != (unsigned long )encoder && (unsigned long )other_encoder->crtc == (unsigned long )encoder->crtc) {
#line 1176
    return (0);
  } else {

  }
#line 1173
  __mptr___1 = (struct list_head  const  *)other_encoder->head.next;
#line 1173
  other_encoder = (struct drm_encoder *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_26225: 
#line 1173
  __builtin_prefetch((void const   *)other_encoder->head.next);
#line 1173
  if ((unsigned long )(& other_encoder->head) != (unsigned long )(& drm_config->encoder_list)) {
#line 1174
    goto ldv_26224;
  } else {

  }
#line 1179
  adjusted_mode->clock = tv_mode->clock;
#line 1180
  return (1);
}
}
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                              struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct drm_crtc *crtc ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_tv_priv *tv_priv ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  u32 tv_ctl ;
  u32 hctl1 ;
  u32 hctl2 ;
  u32 hctl3 ;
  u32 vctl1 ;
  u32 vctl2 ;
  u32 vctl3 ;
  u32 vctl4 ;
  u32 vctl5 ;
  u32 vctl6 ;
  u32 vctl7 ;
  u32 scctl1 ;
  u32 scctl2 ;
  u32 scctl3 ;
  int i ;
  int j ;
  struct video_levels  const  *video_levels ;
  struct color_conversion  const  *color_conversion ;
  bool burst_ena ;
  int pipeconf_reg ;
  int dspcntr_reg ;
  int pipeconf ;
  unsigned int tmp___0 ;
  int dspcntr ;
  unsigned int tmp___1 ;
  int dspbase_reg ;
  int xpos ;
  int ypos ;
  unsigned int xsize ;
  unsigned int ysize ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1187
  dev = encoder->dev;
#line 1188
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1189
  crtc = encoder->crtc;
#line 1190
  __mptr = (struct drm_crtc  const  *)crtc;
#line 1190
  intel_crtc = (struct intel_crtc *)__mptr;
#line 1191
  __mptr___0 = (struct drm_encoder  const  *)encoder;
#line 1191
  intel_output = (struct intel_output *)__mptr___0 + 0xfffffffffffffa38UL;
#line 1192
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 1193
  tmp = intel_tv_mode_find(intel_output);
#line 1193
  tv_mode = tmp;
#line 1203
  if ((unsigned long )tv_mode == (unsigned long )((struct tv_mode  const  *)0)) {
#line 1204
    return;
  } else {

  }
#line 1206
  tv_ctl = 0U;
#line 1208
  switch (tv_priv->type) {
  default: ;
  case 0: ;
  case 5: 
#line 1212
  tv_ctl = tv_ctl;
#line 1213
  video_levels = tv_mode->composite_levels;
#line 1214
  color_conversion = tv_mode->composite_color;
#line 1215
  burst_ena = tv_mode->burst_ena;
#line 1216
  goto ldv_26265;
  case 8: 
#line 1218
  tv_ctl = tv_ctl | 536870912U;
#line 1219
  video_levels = & component_levels;
#line 1220
  if ((int )tv_mode->burst_ena) {
#line 1221
    color_conversion = & sdtv_csc_yprpb;
  } else {
#line 1223
    color_conversion = & hdtv_csc_yprpb;
  }
#line 1224
  burst_ena = 0;
#line 1225
  goto ldv_26265;
  case 6: 
#line 1227
  tv_ctl = tv_ctl | 268435456U;
#line 1228
  video_levels = tv_mode->svideo_levels;
#line 1229
  color_conversion = tv_mode->svideo_color;
#line 1230
  burst_ena = tv_mode->burst_ena;
#line 1231
  goto ldv_26265;
  }
  ldv_26265: 
#line 1233
  hctl1 = (u32 )((int )(tv_mode->hsync_end << 16) | (int )tv_mode->htotal);
#line 1236
  hctl2 = (u32 )((int )(tv_mode->hburst_start << 16) | (int )tv_mode->hburst_len);
#line 1239
  if ((int )burst_ena) {
#line 1240
    hctl2 = hctl2 | 2147483648U;
  } else {

  }
#line 1242
  hctl3 = (u32 )((int )tv_mode->hblank_start | (int )(tv_mode->hblank_end << 16));
#line 1245
  vctl1 = (u32 )(((int )(tv_mode->nbr_end << 16) | (int )(tv_mode->vi_end_f1 << 8)) | (int )tv_mode->vi_end_f2);
#line 1249
  vctl2 = (u32 )(((int )(tv_mode->vsync_len << 16) | (int )(tv_mode->vsync_start_f1 << 8)) | (int )tv_mode->vsync_start_f2);
#line 1253
  vctl3 = (u32 )(((int )(tv_mode->veq_len << 16) | (int )(tv_mode->veq_start_f1 << 8)) | (int )tv_mode->veq_start_f2);
#line 1257
  if ((int )tv_mode->veq_ena) {
#line 1258
    vctl3 = vctl3 | 2147483648U;
  } else {

  }
#line 1260
  vctl4 = (u32 )((int )(tv_mode->vburst_start_f1 << 16) | (int )tv_mode->vburst_end_f1);
#line 1263
  vctl5 = (u32 )((int )(tv_mode->vburst_start_f2 << 16) | (int )tv_mode->vburst_end_f2);
#line 1266
  vctl6 = (u32 )((int )(tv_mode->vburst_start_f3 << 16) | (int )tv_mode->vburst_end_f3);
#line 1269
  vctl7 = (u32 )((int )(tv_mode->vburst_start_f4 << 16) | (int )tv_mode->vburst_end_f4);
#line 1272
  if (intel_crtc->pipe == 1) {
#line 1273
    tv_ctl = tv_ctl | 1073741824U;
  } else {

  }
#line 1274
  tv_ctl = (u32 )tv_mode->oversample | tv_ctl;
#line 1276
  if ((int )tv_mode->progressive) {
#line 1277
    tv_ctl = tv_ctl | 131072U;
  } else {

  }
#line 1278
  if ((int )tv_mode->trilevel_sync) {
#line 1279
    tv_ctl = tv_ctl | 2097152U;
  } else {

  }
#line 1280
  if ((int )tv_mode->pal_burst) {
#line 1281
    tv_ctl = tv_ctl | 65536U;
  } else {

  }
#line 1282
  scctl1 = 0U;
#line 1284
  if ((int )tv_mode->dda1_inc != 0) {
#line 1285
    scctl1 = scctl1 | 2147483648U;
#line 1286
    scctl1 = (u32 )(video_levels->burst << 16) | scctl1;
  } else {

  }
#line 1289
  if ((int )tv_mode->dda2_inc != 0) {
#line 1290
    scctl1 = scctl1 | 1073741824U;
  } else {

  }
#line 1292
  if ((int )tv_mode->dda3_inc != 0) {
#line 1293
    scctl1 = scctl1 | 536870912U;
  } else {

  }
#line 1295
  scctl1 = (u32 )tv_mode->sc_reset | scctl1;
#line 1296
  scctl1 = (u32 )tv_mode->dda1_inc | scctl1;
#line 1298
  scctl2 = (u32 )((int )(tv_mode->dda2_size << 16) | (int )tv_mode->dda2_inc);
#line 1301
  scctl3 = (u32 )((int )(tv_mode->dda3_size << 16) | (int )tv_mode->dda3_inc);
#line 1305
  if (dev->pci_device <= 10097) {
#line 1306
    tv_ctl = tv_ctl | 3072U;
  } else {

  }
#line 1308
  writel(hctl1, (void volatile   *)dev_priv->regs + 426032U);
#line 1309
  writel(hctl2, (void volatile   *)dev_priv->regs + 426036U);
#line 1310
  writel(hctl3, (void volatile   *)dev_priv->regs + 426040U);
#line 1311
  writel(vctl1, (void volatile   *)dev_priv->regs + 426044U);
#line 1312
  writel(vctl2, (void volatile   *)dev_priv->regs + 426048U);
#line 1313
  writel(vctl3, (void volatile   *)dev_priv->regs + 426052U);
#line 1314
  writel(vctl4, (void volatile   *)dev_priv->regs + 426056U);
#line 1315
  writel(vctl5, (void volatile   *)dev_priv->regs + 426060U);
#line 1316
  writel(vctl6, (void volatile   *)dev_priv->regs + 426064U);
#line 1317
  writel(vctl7, (void volatile   *)dev_priv->regs + 426068U);
#line 1318
  writel(scctl1, (void volatile   *)dev_priv->regs + 426080U);
#line 1319
  writel(scctl2, (void volatile   *)dev_priv->regs + 426084U);
#line 1320
  writel(scctl3, (void volatile   *)dev_priv->regs + 426088U);
#line 1322
  if ((unsigned long )color_conversion != (unsigned long )((struct color_conversion  const  *)0)) {
#line 1323
    writel((unsigned int )(((int )color_conversion->ry << 16) | (int )color_conversion->gy),
           (void volatile   *)dev_priv->regs + 426000U);
#line 1325
    writel((unsigned int )(((int )color_conversion->by << 16) | (int )color_conversion->ay),
           (void volatile   *)dev_priv->regs + 426004U);
#line 1327
    writel((unsigned int )(((int )color_conversion->ru << 16) | (int )color_conversion->gu),
           (void volatile   *)dev_priv->regs + 426008U);
#line 1329
    writel((unsigned int )(((int )color_conversion->bu << 16) | (int )color_conversion->au),
           (void volatile   *)dev_priv->regs + 426012U);
#line 1331
    writel((unsigned int )(((int )color_conversion->rv << 16) | (int )color_conversion->gv),
           (void volatile   *)dev_priv->regs + 426016U);
#line 1333
    writel((unsigned int )(((int )color_conversion->bv << 16) | (int )color_conversion->av),
           (void volatile   *)dev_priv->regs + 426020U);
  } else {

  }
#line 1337
  writel(6316032U, (void volatile   *)dev_priv->regs + 426024U);
#line 1338
  if ((unsigned long )video_levels != (unsigned long )((struct video_levels  const  *)0)) {
#line 1339
    writel((unsigned int )((int )(video_levels->black << 16) | (int )video_levels->blank),
           (void volatile   *)dev_priv->regs + 426028U);
  } else {

  }
#line 1343
  pipeconf_reg = intel_crtc->pipe == 0 ? 458760 : 462856;
#line 1345
  dspcntr_reg = intel_crtc->plane == 0 ? 459136 : 463232;
#line 1347
  tmp___0 = readl((void const volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1347
  pipeconf = (int )tmp___0;
#line 1348
  tmp___1 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1348
  dspcntr = (int )tmp___1;
#line 1349
  dspbase_reg = intel_crtc->plane == 0 ? 459140 : 463236;
#line 1351
  xpos = 0;
#line 1351
  ypos = 0;
#line 1354
  writel((unsigned int )dspcntr & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1356
  tmp___2 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1356
  writel(tmp___2, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1359
  if ((((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) {
#line 1360
    intel_wait_for_vblank(dev);
  } else {

  }
#line 1362
  writel((unsigned int )pipeconf & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1364
  intel_wait_for_vblank(dev);
#line 1367
  writel(2147483648U, (void volatile   *)dev_priv->regs + 426112U);
#line 1368
  xsize = (unsigned int )((int )tv_mode->hblank_start - (int )tv_mode->hblank_end);
#line 1369
  if ((int )tv_mode->progressive) {
#line 1370
    ysize = (unsigned int )((int )tv_mode->nbr_end + 1);
  } else {
#line 1372
    ysize = (unsigned int )((int )tv_mode->nbr_end * 2 + 1);
  }
#line 1374
  xpos = tv_priv->margin[0] + xpos;
#line 1375
  ypos = tv_priv->margin[1] + ypos;
#line 1376
  xsize = xsize - (unsigned int )(tv_priv->margin[0] + tv_priv->margin[2]);
#line 1378
  ysize = ysize - (unsigned int )(tv_priv->margin[1] + tv_priv->margin[3]);
#line 1380
  writel((unsigned int )((xpos << 16) | ypos), (void volatile   *)dev_priv->regs + 426096U);
#line 1381
  writel((xsize << 16) | ysize, (void volatile   *)dev_priv->regs + 426100U);
#line 1383
  writel((unsigned int )pipeconf, (void volatile   *)dev_priv->regs + (unsigned long )pipeconf_reg);
#line 1384
  writel((unsigned int )dspcntr, (void volatile   *)dev_priv->regs + (unsigned long )dspcntr_reg);
#line 1386
  tmp___3 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1386
  writel(tmp___3, (void volatile   *)dev_priv->regs + (unsigned long )dspbase_reg);
#line 1389
  j = 0;
#line 1390
  i = 0;
#line 1390
  goto ldv_26278;
  ldv_26277: 
#line 1391
  tmp___4 = j;
#line 1391
  j = j + 1;
#line 1391
  writel(*(tv_mode->filter_table + (unsigned long )tmp___4), (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426240));
#line 1390
  i = i + 1;
  ldv_26278: ;
#line 1390
  if (i <= 59) {
#line 1391
    goto ldv_26277;
  } else {

  }
#line 1392
  i = 0;
#line 1392
  goto ldv_26281;
  ldv_26280: 
#line 1393
  tmp___5 = j;
#line 1393
  j = j + 1;
#line 1393
  writel(*(tv_mode->filter_table + (unsigned long )tmp___5), (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426496));
#line 1392
  i = i + 1;
  ldv_26281: ;
#line 1392
  if (i <= 59) {
#line 1393
    goto ldv_26280;
  } else {

  }
#line 1394
  i = 0;
#line 1394
  goto ldv_26284;
  ldv_26283: 
#line 1395
  tmp___6 = j;
#line 1395
  j = j + 1;
#line 1395
  writel(*(tv_mode->filter_table + (unsigned long )tmp___6), (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 426752));
#line 1394
  i = i + 1;
  ldv_26284: ;
#line 1394
  if (i <= 42) {
#line 1395
    goto ldv_26283;
  } else {

  }
#line 1396
  i = 0;
#line 1396
  goto ldv_26287;
  ldv_26286: 
#line 1397
  tmp___7 = j;
#line 1397
  j = j + 1;
#line 1397
  writel(*(tv_mode->filter_table + (unsigned long )tmp___7), (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 427008));
#line 1396
  i = i + 1;
  ldv_26287: ;
#line 1396
  if (i <= 42) {
#line 1397
    goto ldv_26286;
  } else {

  }
#line 1398
  writel(0U, (void volatile   *)dev_priv->regs + 425988U);
#line 1399
  writel(tv_ctl, (void volatile   *)dev_priv->regs + 425984U);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct drm_display_mode  const  reported_modes[1U]  = {      {{0, 0}, {0U, 0U}, {'N', 'T', 'S', 'C', ' ', '4', '8', '0', 'i', '\000'}, 0,
      0, 64, 107520, 1280, 1368, 1496, 1712, 0, 1024, 1027, 1034, 1104, 0, 0U, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.f}};
#line 1428 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static int intel_tv_detect_type(struct drm_crtc *crtc , struct intel_output *intel_output ) 
{ 
  struct drm_encoder *encoder ;
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  u32 tv_ctl ;
  u32 save_tv_ctl ;
  u32 tv_dac ;
  u32 save_tv_dac ;
  int type ;

  {
#line 1430
  encoder = & intel_output->enc;
#line 1431
  dev = encoder->dev;
#line 1432
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1436
  type = 0;
#line 1438
  tv_dac = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1441
  ldv___ldv_spin_lock_651(& dev_priv->user_irq_lock);
#line 1442
  i915_disable_pipestat(dev_priv, 0, 67371008U);
#line 1444
  ldv___ldv_spin_unlock_652(& dev_priv->user_irq_lock);
#line 1449
  if ((int )intel_output->load_detect_temp) {
#line 1451
    save_tv_dac = tv_dac;
#line 1452
    tv_ctl = readl((void const volatile   *)dev_priv->regs + 425984U);
#line 1453
    save_tv_ctl = tv_ctl;
#line 1454
    tv_ctl = tv_ctl & 2147483647U;
#line 1455
    tv_ctl = tv_ctl & 4294967288U;
#line 1456
    tv_ctl = tv_ctl | 7U;
#line 1457
    tv_dac = tv_dac & 2415919103U;
#line 1458
    tv_dac = tv_dac | 251658410U;
#line 1466
    writel(tv_ctl, (void volatile   *)dev_priv->regs + 425984U);
#line 1467
    writel(tv_dac, (void volatile   *)dev_priv->regs + 425988U);
#line 1468
    intel_wait_for_vblank(dev);
#line 1469
    tv_dac = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1470
    writel(save_tv_dac, (void volatile   *)dev_priv->regs + 425988U);
#line 1471
    writel(save_tv_ctl, (void volatile   *)dev_priv->regs + 425984U);
  } else {

  }
#line 1479
  if ((tv_dac & 1879048192U) == 805306368U) {
#line 1480
    if (drm_debug != 0U) {
#line 1480
      printk("<7>[drm:%s] Detected Composite TV connection\n", "intel_tv_detect_type");
    } else {

    }
#line 1481
    type = 5;
  } else
#line 1482
  if ((tv_dac & 1610612736U) == 1073741824U) {
#line 1483
    if (drm_debug != 0U) {
#line 1483
      printk("<7>[drm:%s] Detected S-Video TV connection\n", "intel_tv_detect_type");
    } else {

    }
#line 1484
    type = 6;
  } else
#line 1485
  if ((tv_dac & 1879048192U) == 0U) {
#line 1486
    if (drm_debug != 0U) {
#line 1486
      printk("<7>[drm:%s] Detected Component TV connection\n", "intel_tv_detect_type");
    } else {

    }
#line 1487
    type = 8;
  } else {
#line 1489
    if (drm_debug != 0U) {
#line 1489
      printk("<7>[drm:%s] No TV connection detected\n", "intel_tv_detect_type");
    } else {

    }
#line 1490
    type = -1;
  }
#line 1494
  ldv___ldv_spin_lock_653(& dev_priv->user_irq_lock);
#line 1495
  i915_enable_pipestat(dev_priv, 0, 67371008U);
#line 1497
  ldv___ldv_spin_unlock_654(& dev_priv->user_irq_lock);
#line 1499
  return (type);
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static enum drm_connector_status intel_tv_detect(struct drm_connector *connector ) 
{ 
  struct drm_crtc *crtc ;
  struct drm_display_mode mode ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  struct drm_encoder *encoder ;
  int dpms_mode ;
  int type ;

  {
#line 1513
  __mptr = (struct drm_connector  const  *)connector;
#line 1513
  intel_output = (struct intel_output *)__mptr;
#line 1514
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 1515
  encoder = & intel_output->enc;
#line 1517
  type = tv_priv->type;
#line 1519
  mode = reported_modes[0];
#line 1520
  drm_mode_set_crtcinfo(& mode, 1);
#line 1522
  if ((unsigned long )encoder->crtc != (unsigned long )((struct drm_crtc *)0)) {
#line 1523
    type = intel_tv_detect_type(encoder->crtc, intel_output);
  } else {
#line 1525
    crtc = intel_get_load_detect_pipe(intel_output, & mode, & dpms_mode);
#line 1526
    if ((unsigned long )crtc != (unsigned long )((struct drm_crtc *)0)) {
#line 1527
      type = intel_tv_detect_type(crtc, intel_output);
#line 1528
      intel_release_load_detect_pipe(intel_output, dpms_mode);
    } else {
#line 1530
      type = -1;
    }
  }
#line 1533
  if (type < 0) {
#line 1534
    return (connector_status_disconnected);
  } else {

  }
#line 1536
  return (connector_status_connected);
}
}
#line 1542 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct input_res input_res_table[7U]  = {      {(char *)"640x480", 640, 480}, 
        {(char *)"800x600", 800, 600}, 
        {(char *)"1024x768", 1024, 768}, 
        {(char *)"1280x1024", 1280, 1024}, 
        {(char *)"848x480", 848, 480}, 
        {(char *)"1280x720", 1280, 720}, 
        {(char *)"1920x1080", 1920, 1080}};
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static int intel_tv_get_modes(struct drm_connector *connector ) 
{ 
  struct drm_display_mode *mode_ptr ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct tv_mode  const  *tv_mode ;
  struct tv_mode  const  *tmp ;
  int j ;
  struct input_res *input ;
  unsigned int hactive_s ;
  unsigned int vactive_s ;
  void *tmp___0 ;

  {
#line 1564
  __mptr = (struct drm_connector  const  *)connector;
#line 1564
  intel_output = (struct intel_output *)__mptr;
#line 1565
  tmp = intel_tv_mode_find(intel_output);
#line 1565
  tv_mode = tmp;
#line 1568
  j = 0;
#line 1568
  goto ldv_26335;
  ldv_26334: 
#line 1570
  input = (struct input_res *)(& input_res_table) + (unsigned long )j;
#line 1571
  hactive_s = (unsigned int )input->w;
#line 1572
  vactive_s = (unsigned int )input->h;
#line 1574
  if ((int )tv_mode->max_srcw != 0 && input->w > (int )tv_mode->max_srcw) {
#line 1575
    goto ldv_26333;
  } else {

  }
#line 1577
  if (input->w > 1024 && (! ((_Bool )tv_mode->progressive) && ! ((_Bool )tv_mode->component_only))) {
#line 1579
    goto ldv_26333;
  } else {

  }
#line 1581
  tmp___0 = drm_calloc(1UL, 224UL, 2);
#line 1581
  mode_ptr = (struct drm_display_mode *)tmp___0;
#line 1583
  strncpy((char *)(& mode_ptr->name), (char const   *)input->name, 32UL);
#line 1585
  mode_ptr->hdisplay = (int )hactive_s;
#line 1586
  mode_ptr->hsync_start = (int )(hactive_s + 1U);
#line 1587
  mode_ptr->hsync_end = (int )(hactive_s + 64U);
#line 1588
  if (mode_ptr->hsync_end <= mode_ptr->hsync_start) {
#line 1589
    mode_ptr->hsync_end = mode_ptr->hsync_start + 1;
  } else {

  }
#line 1590
  mode_ptr->htotal = (int )(hactive_s + 96U);
#line 1592
  mode_ptr->vdisplay = (int )vactive_s;
#line 1593
  mode_ptr->vsync_start = (int )(vactive_s + 1U);
#line 1594
  mode_ptr->vsync_end = (int )(vactive_s + 32U);
#line 1595
  if (mode_ptr->vsync_end <= mode_ptr->vsync_start) {
#line 1596
    mode_ptr->vsync_end = mode_ptr->vsync_start + 1;
  } else {

  }
#line 1597
  mode_ptr->vtotal = (int )(vactive_s + 33U);
#line 1599
  mode_ptr->clock = (((int )tv_mode->refresh * mode_ptr->vtotal) * mode_ptr->htotal) / 1000000;
#line 1603
  mode_ptr->type = 64;
#line 1604
  drm_mode_probed_add(connector, mode_ptr);
  ldv_26333: 
#line 1569
  j = j + 1;
  ldv_26335: ;
#line 1568
  if ((unsigned int )j <= 6U) {
#line 1569
    goto ldv_26334;
  } else {

  }

#line 1607
  return (0);
}
}
#line 1611 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;

  {
#line 1613
  __mptr = (struct drm_connector  const  *)connector;
#line 1613
  intel_output = (struct intel_output *)__mptr;
#line 1615
  drm_sysfs_connector_remove(connector);
#line 1616
  drm_connector_cleanup(connector);
#line 1617
  drm_free((void *)intel_output, 2560UL, 2);
#line 1618
  return;
}
}
#line 1623 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static int intel_tv_set_property(struct drm_connector *connector , struct drm_property *property ,
                                 uint64_t val ) 
{ 
  struct drm_device *dev ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_tv_priv *tv_priv ;
  int ret ;

  {
#line 1626
  dev = connector->dev;
#line 1627
  __mptr = (struct drm_connector  const  *)connector;
#line 1627
  intel_output = (struct intel_output *)__mptr;
#line 1628
  tv_priv = (struct intel_tv_priv *)intel_output->dev_priv;
#line 1629
  ret = 0;
#line 1631
  ret = drm_connector_property_set_value(connector, property, val);
#line 1632
  if (ret < 0) {
#line 1633
    goto out;
  } else {

  }
#line 1635
  if ((unsigned long )dev->mode_config.tv_left_margin_property == (unsigned long )property) {
#line 1636
    tv_priv->margin[0] = (int )val;
  } else
#line 1637
  if ((unsigned long )dev->mode_config.tv_right_margin_property == (unsigned long )property) {
#line 1638
    tv_priv->margin[2] = (int )val;
  } else
#line 1639
  if ((unsigned long )dev->mode_config.tv_top_margin_property == (unsigned long )property) {
#line 1640
    tv_priv->margin[1] = (int )val;
  } else
#line 1641
  if ((unsigned long )dev->mode_config.tv_bottom_margin_property == (unsigned long )property) {
#line 1642
    tv_priv->margin[3] = (int )val;
  } else
#line 1643
  if ((unsigned long )dev->mode_config.tv_mode_property == (unsigned long )property) {
#line 1644
    if (val > 14ULL) {
#line 1645
      ret = -22;
#line 1646
      goto out;
    } else {

    }
#line 1648
    tv_priv->tv_format = tv_modes[val].name;
#line 1649
    intel_tv_mode_set(& intel_output->enc, 0, 0);
  } else {
#line 1651
    ret = -22;
#line 1652
    goto out;
  }
#line 1655
  intel_tv_mode_set(& intel_output->enc, 0, 0);
  out: ;
#line 1657
  return (ret);
}
}
#line 1660 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct drm_encoder_helper_funcs  const  intel_tv_helper_funcs  = 
#line 1660
     {& intel_tv_dpms, 0, 0, & intel_tv_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_tv_mode_set, 0};
#line 1668 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct drm_connector_funcs  const  intel_tv_connector_funcs  =    {0, & intel_tv_save, & intel_tv_restore, & intel_tv_detect, & drm_helper_probe_single_connector_modes,
    & intel_tv_set_property, & intel_tv_destroy};
#line 1677 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct drm_connector_helper_funcs  const  intel_tv_connector_helper_funcs  =    {& intel_tv_get_modes,
    (int (*)(struct drm_connector * , struct drm_display_mode * ))(& intel_tv_mode_valid),
    & intel_best_encoder};
#line 1683 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static void intel_tv_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 1685
  drm_encoder_cleanup(encoder);
#line 1686
  return;
}
}
#line 1688 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
static struct drm_encoder_funcs  const  intel_tv_enc_funcs  =    {& intel_tv_enc_destroy};
#line 1694 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void intel_tv_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct drm_connector *connector ;
  struct intel_output *intel_output ;
  struct intel_tv_priv *tv_priv ;
  u32 tv_dac_on ;
  u32 tv_dac_off ;
  u32 save_tv_dac ;
  char **tv_format_names ;
  int i ;
  int initial_mode ;
  unsigned int tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 1696
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 1702
  initial_mode = 0;
#line 1704
  tmp = readl((void const volatile   *)dev_priv->regs + 425984U);
#line 1704
  if ((tmp & 48U) == 32U) {
#line 1705
    return;
  } else {

  }
#line 1708
  if ((unsigned int )*((unsigned char *)dev_priv + 520UL) == 0U) {
#line 1709
    return;
  } else {

  }
#line 1715
  save_tv_dac = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1717
  writel(save_tv_dac | 134217728U, (void volatile   *)dev_priv->regs + 425988U);
#line 1718
  tv_dac_on = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1720
  writel(save_tv_dac & 4160749567U, (void volatile   *)dev_priv->regs + 425988U);
#line 1721
  tv_dac_off = readl((void const volatile   *)dev_priv->regs + 425988U);
#line 1723
  writel(save_tv_dac, (void volatile   *)dev_priv->regs + 425988U);
#line 1730
  if ((tv_dac_on & 134217728U) == 0U || (tv_dac_off & 134217728U) != 0U) {
#line 1732
    return;
  } else {

  }
#line 1734
  tmp___0 = drm_calloc(1UL, 2560UL, 2);
#line 1734
  intel_output = (struct intel_output *)tmp___0;
#line 1736
  if ((unsigned long )intel_output == (unsigned long )((struct intel_output *)0)) {
#line 1737
    return;
  } else {

  }
#line 1739
  connector = & intel_output->base;
#line 1741
  drm_connector_init(dev, connector, & intel_tv_connector_funcs, 6);
#line 1744
  drm_encoder_init(dev, & intel_output->enc, & intel_tv_enc_funcs, 4);
#line 1747
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 1748
  tv_priv = (struct intel_tv_priv *)intel_output + 1U;
#line 1749
  intel_output->type = 5;
#line 1750
  intel_output->enc.possible_crtcs = 3U;
#line 1751
  intel_output->enc.possible_clones = 32U;
#line 1752
  intel_output->dev_priv = (void *)tv_priv;
#line 1753
  tv_priv->type = 0;
#line 1756
  tv_priv->margin[0] = 54;
#line 1757
  tv_priv->margin[1] = 36;
#line 1758
  tv_priv->margin[2] = 46;
#line 1759
  tv_priv->margin[3] = 37;
#line 1761
  tv_priv->tv_format = kstrdup((char const   *)tv_modes[initial_mode].name, 208U);
#line 1763
  drm_encoder_helper_add(& intel_output->enc, & intel_tv_helper_funcs);
#line 1764
  drm_connector_helper_add(connector, & intel_tv_connector_helper_funcs);
#line 1765
  connector->interlace_allowed = 0;
#line 1766
  connector->doublescan_allowed = 0;
#line 1769
  tmp___1 = drm_alloc(120UL, 2);
#line 1769
  tv_format_names = (char **)tmp___1;
#line 1771
  if ((unsigned long )tv_format_names == (unsigned long )((char **)0)) {
#line 1772
    goto out;
  } else {

  }
#line 1773
  i = 0;
#line 1773
  goto ldv_26377;
  ldv_26376: 
#line 1774
  *(tv_format_names + (unsigned long )i) = tv_modes[i].name;
#line 1773
  i = i + 1;
  ldv_26377: ;
#line 1773
  if ((unsigned int )i <= 14U) {
#line 1774
    goto ldv_26376;
  } else {

  }
#line 1775
  drm_mode_create_tv_properties(dev, 15, tv_format_names);
#line 1777
  drm_connector_attach_property(connector, dev->mode_config.tv_mode_property, (uint64_t )initial_mode);
#line 1779
  drm_connector_attach_property(connector, dev->mode_config.tv_left_margin_property,
                                (uint64_t )tv_priv->margin[0]);
#line 1782
  drm_connector_attach_property(connector, dev->mode_config.tv_top_margin_property,
                                (uint64_t )tv_priv->margin[1]);
#line 1785
  drm_connector_attach_property(connector, dev->mode_config.tv_right_margin_property,
                                (uint64_t )tv_priv->margin[2]);
#line 1788
  drm_connector_attach_property(connector, dev->mode_config.tv_bottom_margin_property,
                                (uint64_t )tv_priv->margin[3]);
  out: 
#line 1792
  drm_sysfs_connector_add(connector);
#line 1793
  return;
}
}
#line 1832 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv_main17_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_tv_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_tv_mode_fixup_6_p2 ;
  struct drm_display_mode *var_intel_tv_mode_set_7_p2 ;
  struct drm_connector *var_group3 ;
  struct drm_property *var_group4 ;
  uint64_t var_intel_tv_set_property_12_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1912
  LDV_IN_INTERRUPT = 1;
#line 1921
  ldv_initialize();
#line 1931
  goto ldv_26417;
  ldv_26416: 
#line 1934
  tmp = nondet_int();
#line 1934
  switch (tmp) {
  case 0: 
#line 1946
  ldv_handler_precall();
#line 1947
  intel_tv_dpms(var_group1, var_intel_tv_dpms_0_p1);
#line 1954
  goto ldv_26404;
  case 1: 
#line 1965
  ldv_handler_precall();
#line 1966
  intel_tv_mode_fixup(var_group1, var_group2, var_intel_tv_mode_fixup_6_p2);
#line 1973
  goto ldv_26404;
  case 2: 
#line 1984
  ldv_handler_precall();
#line 1985
  intel_tv_mode_set(var_group1, var_group2, var_intel_tv_mode_set_7_p2);
#line 1992
  goto ldv_26404;
  case 3: 
#line 2003
  ldv_handler_precall();
#line 2004
  intel_tv_save(var_group3);
#line 2011
  goto ldv_26404;
  case 4: 
#line 2022
  ldv_handler_precall();
#line 2023
  intel_tv_restore(var_group3);
#line 2030
  goto ldv_26404;
  case 5: 
#line 2041
  ldv_handler_precall();
#line 2042
  intel_tv_detect(var_group3);
#line 2049
  goto ldv_26404;
  case 6: 
#line 2060
  ldv_handler_precall();
#line 2061
  intel_tv_destroy(var_group3);
#line 2068
  goto ldv_26404;
  case 7: 
#line 2079
  ldv_handler_precall();
#line 2080
  intel_tv_set_property(var_group3, var_group4, var_intel_tv_set_property_12_p2);
#line 2087
  goto ldv_26404;
  case 8: 
#line 2098
  ldv_handler_precall();
#line 2099
  intel_tv_mode_valid(var_group3, var_group2);
#line 2106
  goto ldv_26404;
  case 9: 
#line 2117
  ldv_handler_precall();
#line 2118
  intel_tv_get_modes(var_group3);
#line 2125
  goto ldv_26404;
  case 10: 
#line 2136
  ldv_handler_precall();
#line 2137
  intel_tv_enc_destroy(var_group1);
#line 2144
  goto ldv_26404;
  default: ;
#line 2145
  goto ldv_26404;
  }
  ldv_26404: ;
  ldv_26417: 
#line 1931
  tmp___0 = nondet_int();
#line 1931
  if (tmp___0 != 0) {
#line 1932
    goto ldv_26416;
  } else {

  }


#line 2154
  ldv_check_final_state();
#line 2157
  return;
}
}
#line 2161 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_633(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2166
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 2168
  __ldv_spin_lock(ldv_func_arg1);
#line 2169
  return;
}
}
#line 2171 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_634(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2176
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 2178
  __ldv_spin_unlock(ldv_func_arg1);
#line 2179
  return;
}
}
#line 2181 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
int ldv___ldv_spin_trylock_635(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2186
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 2186
  ldv_func_res = tmp;
#line 2188
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 2188
  return (tmp___0);
#line 2190
  return (ldv_func_res);
}
}
#line 2193 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_636(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2198
  ldv_spin_lock_dcache_lock();
#line 2200
  __ldv_spin_lock(ldv_func_arg1);
#line 2201
  return;
}
}
#line 2203 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_637(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2208
  ldv_spin_lock_d_lock_of_dentry();
#line 2210
  __ldv_spin_lock(ldv_func_arg1);
#line 2211
  return;
}
}
#line 2213 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_638(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2218
  ldv_spin_unlock_d_lock_of_dentry();
#line 2220
  __ldv_spin_unlock(ldv_func_arg1);
#line 2221
  return;
}
}
#line 2223 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_639(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2228
  ldv_spin_unlock_dcache_lock();
#line 2230
  __ldv_spin_unlock(ldv_func_arg1);
#line 2231
  return;
}
}
#line 2233 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_640(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2238
  ldv_spin_lock_d_lock_of_dentry();
#line 2240
  __ldv_spin_lock(ldv_func_arg1);
#line 2241
  return;
}
}
#line 2243 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_641(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2248
  ldv_spin_unlock_d_lock_of_dentry();
#line 2250
  __ldv_spin_unlock(ldv_func_arg1);
#line 2251
  return;
}
}
#line 2253 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_642(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2258
  ldv_spin_lock_i_lock_of_inode();
#line 2260
  __ldv_spin_lock(ldv_func_arg1);
#line 2261
  return;
}
}
#line 2263 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_643(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2268
  ldv_spin_unlock_i_lock_of_inode();
#line 2270
  __ldv_spin_unlock(ldv_func_arg1);
#line 2271
  return;
}
}
#line 2273 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_644(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2278
  ldv_spin_lock_d_lock_of_dentry();
#line 2280
  __ldv_spin_lock(ldv_func_arg1);
#line 2281
  return;
}
}
#line 2283 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_645(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2288
  ldv_spin_unlock_d_lock_of_dentry();
#line 2290
  __ldv_spin_unlock(ldv_func_arg1);
#line 2291
  return;
}
}
#line 2293 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_646(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2298
  ldv_spin_lock_siglock_of_sighand_struct();
#line 2300
  __ldv_spin_lock(ldv_func_arg1);
#line 2301
  return;
}
}
#line 2303 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_647(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2308
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 2310
  __ldv_spin_unlock(ldv_func_arg1);
#line 2311
  return;
}
}
#line 2313 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_648(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2318
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 2320
  __ldv_spin_lock(ldv_func_arg1);
#line 2321
  return;
}
}
#line 2323 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_649(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2328
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 2330
  __ldv_spin_unlock(ldv_func_arg1);
#line 2331
  return;
}
}
#line 2333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_650(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2338
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 2340
  __ldv_spin_unlock(ldv_func_arg1);
#line 2341
  return;
}
}
#line 2343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_651(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2348
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 2350
  __ldv_spin_lock(ldv_func_arg1);
#line 2351
  return;
}
}
#line 2353 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_652(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2358
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 2360
  __ldv_spin_unlock(ldv_func_arg1);
#line 2361
  return;
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_lock_653(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2368
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 2370
  __ldv_spin_lock(ldv_func_arg1);
#line 2371
  return;
}
}
#line 2373 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_tv.c.prepared"
void ldv___ldv_spin_unlock_654(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2378
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 2380
  __ldv_spin_unlock(ldv_func_arg1);
#line 2381
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_677(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_680(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_682(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_685(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_686(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_689(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_691(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_693(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_678(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_681(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_683(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_684(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_687(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_688(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_690(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_692(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_694(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_679(spinlock_t *ldv_func_arg1 ) ;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/dvo.h"
struct intel_dvo_dev_ops sil164_ops ;
#line 152
struct intel_dvo_dev_ops ch7xxx_ops ;
#line 153
struct intel_dvo_dev_ops ivch_ops ;
#line 154
struct intel_dvo_dev_ops tfp410_ops ;
#line 155
struct intel_dvo_dev_ops ch7017_ops ;
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct intel_dvo_device intel_dvo_devices[5U]  = {      {(char *)"sil164", 2, 397664U, 0U, 56, 0, (struct intel_dvo_dev_ops  const  *)(& sil164_ops),
      0, 0, (_Bool)0}, 
        {(char *)"ch7xxx", 2, 397664U, 0U, 118, 0, (struct intel_dvo_dev_ops  const  *)(& ch7xxx_ops),
      0, 0, (_Bool)0}, 
        {(char *)"ivch", 1, 397600U, 0U, 2, 0, (struct intel_dvo_dev_ops  const  *)(& ivch_ops),
      0, 0, (_Bool)0}, 
        {(char *)"tfp410", 2, 397664U, 0U, 56, 0, (struct intel_dvo_dev_ops  const  *)(& tfp410_ops),
      0, 0, (_Bool)0}, 
        {(char *)"ch7017", 1, 397664U, 20512U, 117, 0, (struct intel_dvo_dev_ops  const  *)(& ch7017_ops),
      0, 0, (_Bool)0}};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_dpms(struct drm_encoder *encoder , int mode ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  u32 dvo_reg ;
  u32 temp ;
  unsigned int tmp ;

  {
#line 149
  dev_priv = (struct drm_i915_private *)(encoder->dev)->dev_private;
#line 150
  __mptr = (struct drm_encoder  const  *)encoder;
#line 150
  intel_output = (struct intel_output *)__mptr + 0xfffffffffffffa38UL;
#line 151
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 152
  dvo_reg = dvo->dvo_reg;
#line 153
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 153
  temp = tmp;
#line 155
  if (mode == 0) {
#line 156
    writel(temp | 2147483648U, (void volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 157
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 158
    (*((dvo->dev_ops)->dpms))(dvo, mode);
  } else {
#line 160
    (*((dvo->dev_ops)->dpms))(dvo, mode);
#line 161
    writel(temp & 2147483647U, (void volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 162
    readl((void const volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
  }
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_save(struct drm_connector *connector ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 168
  dev_priv = (struct drm_i915_private *)(connector->dev)->dev_private;
#line 169
  __mptr = (struct drm_connector  const  *)connector;
#line 169
  intel_output = (struct intel_output *)__mptr;
#line 170
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 175
  dev_priv->saveDVOA = readl((void const volatile   *)dev_priv->regs + 397600U);
#line 176
  dev_priv->saveDVOB = readl((void const volatile   *)dev_priv->regs + 397632U);
#line 177
  dev_priv->saveDVOC = readl((void const volatile   *)dev_priv->regs + 397664U);
#line 179
  (*((dvo->dev_ops)->save))(dvo);
#line 180
  return;
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_restore(struct drm_connector *connector ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 184
  dev_priv = (struct drm_i915_private *)(connector->dev)->dev_private;
#line 185
  __mptr = (struct drm_connector  const  *)connector;
#line 185
  intel_output = (struct intel_output *)__mptr;
#line 186
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 188
  (*((dvo->dev_ops)->restore))(dvo);
#line 190
  writel(dev_priv->saveDVOA, (void volatile   *)dev_priv->regs + 397600U);
#line 191
  writel(dev_priv->saveDVOB, (void volatile   *)dev_priv->regs + 397632U);
#line 192
  writel(dev_priv->saveDVOC, (void volatile   *)dev_priv->regs + 397664U);
#line 193
  return;
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static int intel_dvo_mode_valid(struct drm_connector *connector , struct drm_display_mode *mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  int tmp ;

  {
#line 198
  __mptr = (struct drm_connector  const  *)connector;
#line 198
  intel_output = (struct intel_output *)__mptr;
#line 199
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 201
  if ((mode->flags & 32U) != 0U) {
#line 202
    return (8);
  } else {

  }
#line 206
  if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 207
    if (mode->hdisplay > (dvo->panel_fixed_mode)->hdisplay) {
#line 208
      return (29);
    } else {

    }
#line 209
    if (mode->vdisplay > (dvo->panel_fixed_mode)->vdisplay) {
#line 210
      return (29);
    } else {

    }
  } else {

  }
#line 213
  tmp = (*((dvo->dev_ops)->mode_valid))(dvo, mode);
#line 213
  return (tmp);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static bool intel_dvo_mode_fixup(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                                 struct drm_display_mode *adjusted_mode ) 
{ 
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  bool tmp ;

  {
#line 220
  __mptr = (struct drm_encoder  const  *)encoder;
#line 220
  intel_output = (struct intel_output *)__mptr + 0xfffffffffffffa38UL;
#line 221
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 228
  if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 230
    adjusted_mode->hdisplay = (dvo->panel_fixed_mode)->hdisplay;
#line 231
    adjusted_mode->hsync_start = (dvo->panel_fixed_mode)->hsync_start;
#line 232
    adjusted_mode->hsync_end = (dvo->panel_fixed_mode)->hsync_end;
#line 233
    adjusted_mode->htotal = (dvo->panel_fixed_mode)->htotal;
#line 234
    adjusted_mode->vdisplay = (dvo->panel_fixed_mode)->vdisplay;
#line 235
    adjusted_mode->vsync_start = (dvo->panel_fixed_mode)->vsync_start;
#line 236
    adjusted_mode->vsync_end = (dvo->panel_fixed_mode)->vsync_end;
#line 237
    adjusted_mode->vtotal = (dvo->panel_fixed_mode)->vtotal;
#line 238
    adjusted_mode->clock = (dvo->panel_fixed_mode)->clock;
#line 239
    drm_mode_set_crtcinfo(adjusted_mode, 1);
  } else {

  }
#line 243
  if ((unsigned long )(dvo->dev_ops)->mode_fixup != (unsigned long )((bool (*/* const  */)(struct intel_dvo_device * ,
                                                                                           struct drm_display_mode * ,
                                                                                           struct drm_display_mode * ))0)) {
#line 244
    tmp = (*((dvo->dev_ops)->mode_fixup))(dvo, mode, adjusted_mode);
#line 244
    return (tmp);
  } else {

  }
#line 246
  return (1);
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_mode_set(struct drm_encoder *encoder , struct drm_display_mode *mode ,
                               struct drm_display_mode *adjusted_mode ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_crtc *intel_crtc ;
  struct drm_crtc  const  *__mptr ;
  struct intel_output *intel_output ;
  struct drm_encoder  const  *__mptr___0 ;
  struct intel_dvo_device *dvo ;
  int pipe ;
  u32 dvo_val ;
  u32 dvo_reg ;
  u32 dvo_srcdim_reg ;
  int dpll_reg ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 253
  dev = encoder->dev;
#line 254
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 255
  __mptr = (struct drm_crtc  const  *)encoder->crtc;
#line 255
  intel_crtc = (struct intel_crtc *)__mptr;
#line 256
  __mptr___0 = (struct drm_encoder  const  *)encoder;
#line 256
  intel_output = (struct intel_output *)__mptr___0 + 0xfffffffffffffa38UL;
#line 257
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 258
  pipe = intel_crtc->pipe;
#line 260
  dvo_reg = dvo->dvo_reg;
#line 261
  dpll_reg = pipe == 0 ? 24596 : 24600;
#line 263
  switch (dvo_reg) {
  case (u32 )397600: ;
  default: 
#line 266
  dvo_srcdim_reg = 397604U;
#line 267
  goto ldv_25973;
  case (u32 )397632: 
#line 269
  dvo_srcdim_reg = 397636U;
#line 270
  goto ldv_25973;
  case (u32 )397664: 
#line 272
  dvo_srcdim_reg = 397668U;
#line 273
  goto ldv_25973;
  }
  ldv_25973: 
#line 276
  (*((dvo->dev_ops)->mode_set))(dvo, mode, adjusted_mode);
#line 279
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 279
  dvo_val = tmp & 117440576U;
#line 281
  dvo_val = dvo_val | 16516U;
#line 284
  if (pipe == 1) {
#line 285
    dvo_val = dvo_val | 1073741824U;
  } else {

  }
#line 286
  dvo_val = dvo_val | 268435456U;
#line 287
  if ((int )adjusted_mode->flags & 1) {
#line 288
    dvo_val = dvo_val | 8U;
  } else {

  }
#line 289
  if ((adjusted_mode->flags & 4U) != 0U) {
#line 290
    dvo_val = dvo_val | 16U;
  } else {

  }
#line 292
  tmp___0 = readl((void const volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 292
  writel(tmp___0 | 1073741824U, (void volatile   *)dev_priv->regs + (unsigned long )dpll_reg);
#line 297
  writel((unsigned int )((adjusted_mode->hdisplay << 12) | adjusted_mode->vdisplay),
         (void volatile   *)dev_priv->regs + (unsigned long )dvo_srcdim_reg);
#line 301
  writel(dvo_val, (void volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 302
  return;
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static enum drm_connector_status intel_dvo_detect(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  enum drm_connector_status tmp ;

  {
#line 311
  __mptr = (struct drm_connector  const  *)connector;
#line 311
  intel_output = (struct intel_output *)__mptr;
#line 312
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 314
  tmp = (*((dvo->dev_ops)->detect))(dvo);
#line 314
  return (tmp);
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static int intel_dvo_get_modes(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  int tmp ;
  struct drm_display_mode *mode ;

  {
#line 319
  __mptr = (struct drm_connector  const  *)connector;
#line 319
  intel_output = (struct intel_output *)__mptr;
#line 320
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 327
  intel_ddc_get_modes(intel_output);
#line 328
  tmp = list_empty((struct list_head  const  *)(& connector->probed_modes));
#line 328
  if (tmp == 0) {
#line 329
    return (1);
  } else {

  }
#line 332
  if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 334
    mode = drm_mode_duplicate(connector->dev, dvo->panel_fixed_mode);
#line 335
    if ((unsigned long )mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 336
      drm_mode_probed_add(connector, mode);
#line 337
      return (1);
    } else {

    }
  } else {

  }
#line 340
  return (0);
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_destroy(struct drm_connector *connector ) 
{ 
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;

  {
#line 345
  __mptr = (struct drm_connector  const  *)connector;
#line 345
  intel_output = (struct intel_output *)__mptr;
#line 346
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 348
  if ((unsigned long )dvo != (unsigned long )((struct intel_dvo_device *)0)) {
#line 349
    if ((unsigned long )(dvo->dev_ops)->destroy != (unsigned long )((void (*/* const  */)(struct intel_dvo_device * ))0)) {
#line 350
      (*((dvo->dev_ops)->destroy))(dvo);
    } else {

    }
#line 351
    if ((unsigned long )dvo->panel_fixed_mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 352
      kfree((void const   *)dvo->panel_fixed_mode);
    } else {

    }
  } else {

  }
#line 356
  if ((unsigned long )intel_output->i2c_bus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 357
    intel_i2c_destroy(intel_output->i2c_bus);
  } else {

  }
#line 358
  if ((unsigned long )intel_output->ddc_bus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 359
    intel_i2c_destroy(intel_output->ddc_bus);
  } else {

  }
#line 360
  drm_sysfs_connector_remove(connector);
#line 361
  drm_connector_cleanup(connector);
#line 362
  kfree((void const   *)intel_output);
#line 363
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct drm_encoder_helper_funcs  const  intel_dvo_helper_funcs  = 
#line 378
     {& intel_dvo_dpms, 0, 0, & intel_dvo_mode_fixup, & intel_encoder_prepare, & intel_encoder_commit,
    & intel_dvo_mode_set, 0};
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct drm_connector_funcs  const  intel_dvo_connector_funcs  =    {0, & intel_dvo_save, & intel_dvo_restore, & intel_dvo_detect, & drm_helper_probe_single_connector_modes,
    0, & intel_dvo_destroy};
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct drm_connector_helper_funcs  const  intel_dvo_connector_helper_funcs  =    {& intel_dvo_get_modes,
    & intel_dvo_mode_valid, & intel_best_encoder};
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static void intel_dvo_enc_destroy(struct drm_encoder *encoder ) 
{ 


  {
#line 402
  drm_encoder_cleanup(encoder);
#line 403
  return;
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct drm_encoder_funcs  const  intel_dvo_enc_funcs  =    {& intel_dvo_enc_destroy};
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
static struct drm_display_mode *intel_dvo_get_current_mode(struct drm_connector *connector ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_private *dev_priv ;
  struct intel_output *intel_output ;
  struct drm_connector  const  *__mptr ;
  struct intel_dvo_device *dvo ;
  uint32_t dvo_reg ;
  uint32_t dvo_val ;
  unsigned int tmp ;
  struct drm_display_mode *mode ;
  struct drm_crtc *crtc ;
  int pipe ;

  {
#line 419
  dev = connector->dev;
#line 420
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 421
  __mptr = (struct drm_connector  const  *)connector;
#line 421
  intel_output = (struct intel_output *)__mptr;
#line 422
  dvo = (struct intel_dvo_device *)intel_output->dev_priv;
#line 423
  dvo_reg = dvo->dvo_reg;
#line 424
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )dvo_reg);
#line 424
  dvo_val = tmp;
#line 425
  mode = 0;
#line 430
  if ((int )dvo_val < 0) {
#line 432
    pipe = (dvo_val & 1073741824U) != 0U;
#line 434
    crtc = intel_get_crtc_from_pipe(dev, pipe);
#line 435
    if ((unsigned long )crtc != (unsigned long )((struct drm_crtc *)0)) {
#line 436
      mode = intel_crtc_mode_get(dev, crtc);
#line 438
      if ((unsigned long )mode != (unsigned long )((struct drm_display_mode *)0)) {
#line 439
        mode->type = mode->type | 8;
#line 440
        if ((dvo_val & 8U) != 0U) {
#line 441
          mode->flags = mode->flags | 1U;
        } else {

        }
#line 442
        if ((dvo_val & 16U) != 0U) {
#line 443
          mode->flags = mode->flags | 4U;
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 447
  return (mode);
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void intel_dvo_init(struct drm_device *dev ) 
{ 
  struct intel_output *intel_output ;
  struct intel_dvo_device *dvo ;
  struct intel_i2c_chan *i2cbus ;
  int ret ;
  int i ;
  int gpio_inited ;
  int encoder_type ;
  void *tmp ;
  struct drm_connector *connector ;
  int gpio ;
  bool tmp___0 ;

  {
#line 454
  i2cbus = 0;
#line 455
  ret = 0;
#line 457
  gpio_inited = 0;
#line 458
  encoder_type = 0;
#line 459
  tmp = kzalloc(1592UL, 208U);
#line 459
  intel_output = (struct intel_output *)tmp;
#line 460
  if ((unsigned long )intel_output == (unsigned long )((struct intel_output *)0)) {
#line 461
    return;
  } else {

  }
#line 464
  intel_output->ddc_bus = intel_i2c_create(dev, 20508U, "DVODDC_D");
#line 465
  if ((unsigned long )intel_output->ddc_bus == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 466
    goto free_intel;
  } else {

  }
#line 469
  i = 0;
#line 469
  goto ldv_26037;
  ldv_26036: 
#line 470
  connector = & intel_output->base;
#line 473
  dvo = (struct intel_dvo_device *)(& intel_dvo_devices) + (unsigned long )i;
#line 479
  if (dvo->gpio != 0U) {
#line 480
    gpio = (int )dvo->gpio;
  } else
#line 481
  if (dvo->type == 1) {
#line 482
    gpio = 20500;
  } else {
#line 484
    gpio = 20512;
  }
#line 490
  if (gpio_inited != gpio) {
#line 491
    if ((unsigned long )i2cbus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 492
      intel_i2c_destroy(i2cbus);
    } else {

    }
#line 493
    i2cbus = intel_i2c_create(dev, (u32 const   )gpio, gpio == 20500 ? "DVOI2C_B" : "DVOI2C_E");
#line 493
    if ((unsigned long )i2cbus == (unsigned long )((struct intel_i2c_chan *)0)) {
#line 495
      goto ldv_26032;
    } else {

    }
#line 497
    gpio_inited = gpio;
  } else {

  }
#line 500
  if ((unsigned long )dvo->dev_ops != (unsigned long )((struct intel_dvo_dev_ops  const  *)0)) {
#line 501
    tmp___0 = (*((dvo->dev_ops)->init))(dvo, i2cbus);
#line 501
    ret = (int )tmp___0;
  } else {
#line 503
    ret = 0;
  }
#line 505
  if (ret == 0) {
#line 506
    goto ldv_26032;
  } else {

  }
#line 508
  intel_output->type = 2;
#line 509
  switch (dvo->type) {
  case 2: 
#line 511
  drm_connector_init(dev, connector, & intel_dvo_connector_funcs, 2);
#line 514
  encoder_type = 2;
#line 515
  goto ldv_26034;
  case 1: 
#line 517
  drm_connector_init(dev, connector, & intel_dvo_connector_funcs, 7);
#line 520
  encoder_type = 3;
#line 521
  goto ldv_26034;
  }
  ldv_26034: 
#line 524
  drm_connector_helper_add(connector, & intel_dvo_connector_helper_funcs);
#line 526
  connector->display_info.subpixel_order = SubPixelHorizontalRGB;
#line 527
  connector->interlace_allowed = 0;
#line 528
  connector->doublescan_allowed = 0;
#line 530
  intel_output->dev_priv = (void *)dvo;
#line 531
  intel_output->i2c_bus = i2cbus;
#line 533
  drm_encoder_init(dev, & intel_output->enc, & intel_dvo_enc_funcs, encoder_type);
#line 535
  drm_encoder_helper_add(& intel_output->enc, & intel_dvo_helper_funcs);
#line 538
  drm_mode_connector_attach_encoder(& intel_output->base, & intel_output->enc);
#line 540
  if (dvo->type == 1) {
#line 548
    dvo->panel_fixed_mode = intel_dvo_get_current_mode(connector);
#line 550
    dvo->panel_wants_dither = 1;
  } else {

  }
#line 553
  drm_sysfs_connector_add(connector);
#line 554
  return;
  ldv_26032: 
#line 469
  i = i + 1;
  ldv_26037: ;
#line 469
  if ((unsigned int )i <= 4U) {
#line 470
    goto ldv_26036;
  } else {

  }
#line 557
  intel_i2c_destroy(intel_output->ddc_bus);
#line 559
  if ((unsigned long )i2cbus != (unsigned long )((struct intel_i2c_chan *)0)) {
#line 560
    intel_i2c_destroy(i2cbus);
  } else {

  }
  free_intel: 
#line 562
  kfree((void const   *)intel_output);
#line 563
  return;
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv_main18_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_encoder *var_group1 ;
  int var_intel_dvo_dpms_0_p1 ;
  struct drm_display_mode *var_group2 ;
  struct drm_display_mode *var_intel_dvo_mode_fixup_4_p2 ;
  struct drm_display_mode *var_intel_dvo_mode_set_5_p2 ;
  struct drm_connector *var_group3 ;
  int tmp ;
  int tmp___0 ;

  {
#line 750
  LDV_IN_INTERRUPT = 1;
#line 759
  ldv_initialize();
#line 769
  goto ldv_26074;
  ldv_26073: 
#line 772
  tmp = nondet_int();
#line 772
  switch (tmp) {
  case 0: 
#line 786
  ldv_handler_precall();
#line 787
  intel_dvo_dpms(var_group1, var_intel_dvo_dpms_0_p1);
#line 800
  goto ldv_26062;
  case 1: 
#line 813
  ldv_handler_precall();
#line 814
  intel_dvo_mode_fixup(var_group1, var_group2, var_intel_dvo_mode_fixup_4_p2);
#line 825
  goto ldv_26062;
  case 2: 
#line 840
  ldv_handler_precall();
#line 841
  intel_dvo_mode_set(var_group1, var_group2, var_intel_dvo_mode_set_5_p2);
#line 852
  goto ldv_26062;
  case 3: 
#line 865
  ldv_handler_precall();
#line 866
  intel_dvo_save(var_group3);
#line 879
  goto ldv_26062;
  case 4: 
#line 892
  ldv_handler_precall();
#line 893
  intel_dvo_restore(var_group3);
#line 906
  goto ldv_26062;
  case 5: 
#line 921
  ldv_handler_precall();
#line 922
  intel_dvo_detect(var_group3);
#line 933
  goto ldv_26062;
  case 6: 
#line 948
  ldv_handler_precall();
#line 949
  intel_dvo_destroy(var_group3);
#line 960
  goto ldv_26062;
  case 7: 
#line 973
  ldv_handler_precall();
#line 974
  intel_dvo_mode_valid(var_group3, var_group2);
#line 987
  goto ldv_26062;
  case 8: 
#line 1002
  ldv_handler_precall();
#line 1003
  intel_dvo_get_modes(var_group3);
#line 1014
  goto ldv_26062;
  case 9: 
#line 1031
  ldv_handler_precall();
#line 1032
  intel_dvo_enc_destroy(var_group1);
#line 1039
  goto ldv_26062;
  default: ;
#line 1040
  goto ldv_26062;
  }
  ldv_26062: ;
  ldv_26074: 
#line 769
  tmp___0 = nondet_int();
#line 769
  if (tmp___0 != 0) {
#line 770
    goto ldv_26073;
  } else {

  }


#line 1049
  ldv_check_final_state();
#line 1052
  return;
}
}
#line 1056 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_677(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1061
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1063
  __ldv_spin_lock(ldv_func_arg1);
#line 1064
  return;
}
}
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_678(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1071
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1073
  __ldv_spin_unlock(ldv_func_arg1);
#line 1074
  return;
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
int ldv___ldv_spin_trylock_679(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1081
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1081
  ldv_func_res = tmp;
#line 1083
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1083
  return (tmp___0);
#line 1085
  return (ldv_func_res);
}
}
#line 1088 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_680(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1093
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1095
  __ldv_spin_lock(ldv_func_arg1);
#line 1096
  return;
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_681(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1103
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1105
  __ldv_spin_unlock(ldv_func_arg1);
#line 1106
  return;
}
}
#line 1108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_682(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1113
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1115
  __ldv_spin_lock(ldv_func_arg1);
#line 1116
  return;
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_683(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1123
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1125
  __ldv_spin_unlock(ldv_func_arg1);
#line 1126
  return;
}
}
#line 1128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_684(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1133
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1135
  __ldv_spin_unlock(ldv_func_arg1);
#line 1136
  return;
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_685(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1143
  ldv_spin_lock_dcache_lock();
#line 1145
  __ldv_spin_lock(ldv_func_arg1);
#line 1146
  return;
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_686(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1153
  ldv_spin_lock_d_lock_of_dentry();
#line 1155
  __ldv_spin_lock(ldv_func_arg1);
#line 1156
  return;
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_687(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1163
  ldv_spin_unlock_d_lock_of_dentry();
#line 1165
  __ldv_spin_unlock(ldv_func_arg1);
#line 1166
  return;
}
}
#line 1168 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_688(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1173
  ldv_spin_unlock_dcache_lock();
#line 1175
  __ldv_spin_unlock(ldv_func_arg1);
#line 1176
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_689(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1183
  ldv_spin_lock_d_lock_of_dentry();
#line 1185
  __ldv_spin_lock(ldv_func_arg1);
#line 1186
  return;
}
}
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_690(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1193
  ldv_spin_unlock_d_lock_of_dentry();
#line 1195
  __ldv_spin_unlock(ldv_func_arg1);
#line 1196
  return;
}
}
#line 1198 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_691(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1203
  ldv_spin_lock_i_lock_of_inode();
#line 1205
  __ldv_spin_lock(ldv_func_arg1);
#line 1206
  return;
}
}
#line 1208 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_692(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1213
  ldv_spin_unlock_i_lock_of_inode();
#line 1215
  __ldv_spin_unlock(ldv_func_arg1);
#line 1216
  return;
}
}
#line 1218 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_lock_693(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1223
  ldv_spin_lock_d_lock_of_dentry();
#line 1225
  __ldv_spin_lock(ldv_func_arg1);
#line 1226
  return;
}
}
#line 1228 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/intel_dvo.c.prepared"
void ldv___ldv_spin_unlock_694(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1233
  ldv_spin_unlock_d_lock_of_dentry();
#line 1235
  __ldv_spin_unlock(ldv_func_arg1);
#line 1236
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_713(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_716(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_718(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_721(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_722(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_725(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_727(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_729(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_714(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_717(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_719(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_720(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_723(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_724(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_726(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_728(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_730(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_715(spinlock_t *ldv_func_arg1 ) ;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static struct ch7xxx_id_struct ch7xxx_ids[4U]  = {      {131U, (char *)"CH7011"}, 
        {132U, (char *)"CH7009A"}, 
        {133U, (char *)"CH7009B"}, 
        {149U, (char *)"CH7301"}};
#line 176
static void ch7xxx_save(struct intel_dvo_device *dvo ) ;
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static char *ch7xxx_get_id(uint8_t vid ) 
{ 
  int i ;

  {
#line 182
  i = 0;
#line 182
  goto ldv_24990;
  ldv_24989: ;
#line 183
  if ((int )ch7xxx_ids[i].vid == (int )vid) {
#line 184
    return (ch7xxx_ids[i].name);
  } else {

  }
#line 182
  i = i + 1;
  ldv_24990: ;
#line 182
  if ((unsigned int )i <= 3U) {
#line 183
    goto ldv_24989;
  } else {

  }

#line 187
  return (0);
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static bool ch7xxx_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2U] ;
  u8 in_buf[2U] ;
  struct i2c_msg msgs[2U] ;
  int tmp ;

  {
#line 193
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 194
  i2cbus = dvo->i2c_bus;
#line 198
  msgs[0].addr = (unsigned short )i2cbus->slave_addr;
#line 198
  msgs[0].flags = 0U;
#line 198
  msgs[0].len = 1U;
#line 198
  msgs[0].buf = (__u8 *)(& out_buf);
#line 198
  msgs[1].addr = (unsigned short )i2cbus->slave_addr;
#line 198
  msgs[1].flags = 1U;
#line 198
  msgs[1].len = 1U;
#line 198
  msgs[1].buf = (__u8 *)(& in_buf);
#line 213
  out_buf[0] = (u8 )addr;
#line 214
  out_buf[1] = 0U;
#line 216
  tmp = i2c_transfer(& i2cbus->adapter, (struct i2c_msg *)(& msgs), 2);
#line 216
  if (tmp == 2) {
#line 217
    *ch = in_buf[0];
#line 218
    return (1);
  } else {

  }
#line 221
  if (! ch7xxx->quiet) {
#line 222
    if (drm_debug != 0U) {
#line 222
      printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "ch7xxx_readb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 225
  return (0);
}
}
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static bool ch7xxx_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2U] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 231
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 232
  i2cbus = dvo->i2c_bus;
#line 234
  msg.addr = (unsigned short )i2cbus->slave_addr;
#line 234
  msg.flags = 0U;
#line 234
  msg.len = 2U;
#line 234
  msg.buf = (__u8 *)(& out_buf);
#line 241
  out_buf[0] = (uint8_t )addr;
#line 242
  out_buf[1] = ch;
#line 244
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 244
  if (tmp == 1) {
#line 245
    return (1);
  } else {

  }
#line 247
  if (! ch7xxx->quiet) {
#line 248
    if (drm_debug != 0U) {
#line 248
      printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "ch7xxx_writeb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 252
  return (0);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static bool ch7xxx_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  uint8_t vendor ;
  uint8_t device ;
  char *name ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;

  {
#line 263
  tmp = kzalloc(161UL, 208U);
#line 263
  ch7xxx = (struct ch7xxx_priv *)tmp;
#line 264
  if ((unsigned long )ch7xxx == (unsigned long )((struct ch7xxx_priv *)0)) {
#line 265
    return (0);
  } else {

  }
#line 267
  dvo->i2c_bus = i2cbus;
#line 268
  (dvo->i2c_bus)->slave_addr = (u8 )dvo->slave_addr;
#line 269
  dvo->dev_priv = (void *)ch7xxx;
#line 270
  ch7xxx->quiet = 1;
#line 272
  tmp___0 = ch7xxx_readb(dvo, 74, & vendor);
#line 272
  if (tmp___0) {
#line 272
    tmp___1 = 0;
  } else {
#line 272
    tmp___1 = 1;
  }
#line 272
  if (tmp___1) {
#line 273
    goto out;
  } else {

  }
#line 275
  name = ch7xxx_get_id((int )vendor);
#line 276
  if ((unsigned long )name == (unsigned long )((char *)0)) {
#line 277
    if (drm_debug != 0U) {
#line 277
      printk("<7>[drm:%s] ch7xxx not detected; got 0x%02x from %s slave %d.\n", "ch7xxx_init",
             (int )vendor, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 279
    goto out;
  } else {

  }
#line 283
  tmp___2 = ch7xxx_readb(dvo, 75, & device);
#line 283
  if (tmp___2) {
#line 283
    tmp___3 = 0;
  } else {
#line 283
    tmp___3 = 1;
  }
#line 283
  if (tmp___3) {
#line 284
    goto out;
  } else {

  }
#line 286
  if ((unsigned int )device != 23U) {
#line 287
    if (drm_debug != 0U) {
#line 287
      printk("<7>[drm:%s] ch7xxx not detected; got 0x%02x from %s slave %d.\n", "ch7xxx_init",
             (int )vendor, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 289
    goto out;
  } else {

  }
#line 292
  ch7xxx->quiet = 0;
#line 293
  if (drm_debug != 0U) {
#line 293
    printk("<7>[drm:%s] Detected %s chipset, vendor/device ID 0x%02x/0x%02x\n", "ch7xxx_init",
           name, (int )vendor, (int )device);
  } else {

  }
#line 295
  return (1);
  out: 
#line 297
  kfree((void const   *)ch7xxx);
#line 298
  return (0);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static enum drm_connector_status ch7xxx_detect(struct intel_dvo_device *dvo ) 
{ 
  uint8_t cdet ;
  uint8_t orig_pm ;
  uint8_t pm ;

  {
#line 305
  ch7xxx_readb(dvo, 73, & orig_pm);
#line 307
  pm = orig_pm;
#line 308
  pm = (unsigned int )pm & 254U;
#line 309
  pm = (uint8_t )((unsigned int )pm | 192U);
#line 311
  ch7xxx_writeb(dvo, 73, (int )pm);
#line 313
  ch7xxx_readb(dvo, 32, & cdet);
#line 315
  ch7xxx_writeb(dvo, 73, (int )orig_pm);
#line 317
  if (((int )cdet & 32) != 0) {
#line 318
    return (connector_status_connected);
  } else {

  }
#line 319
  return (connector_status_disconnected);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static enum drm_mode_status ch7xxx_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 325
  if (mode->clock > 165000) {
#line 326
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 328
  return (MODE_OK);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 
  uint8_t tvco ;
  uint8_t tpcp ;
  uint8_t tpd ;
  uint8_t tlpf ;
  uint8_t idf ;

  {
#line 337
  if (mode->clock <= 65000) {
#line 338
    tvco = 35U;
#line 339
    tpcp = 8U;
#line 340
    tpd = 22U;
#line 341
    tlpf = 96U;
  } else {
#line 343
    tvco = 45U;
#line 344
    tpcp = 6U;
#line 345
    tpd = 38U;
#line 346
    tlpf = 160U;
  }
#line 349
  ch7xxx_writeb(dvo, 49, 0);
#line 350
  ch7xxx_writeb(dvo, 50, (int )tvco);
#line 351
  ch7xxx_writeb(dvo, 51, (int )tpcp);
#line 352
  ch7xxx_writeb(dvo, 52, (int )tpd);
#line 353
  ch7xxx_writeb(dvo, 53, 48);
#line 354
  ch7xxx_writeb(dvo, 54, (int )tlpf);
#line 355
  ch7xxx_writeb(dvo, 55, 0);
#line 357
  ch7xxx_readb(dvo, 31, & idf);
#line 359
  idf = (unsigned int )idf & 231U;
#line 360
  if ((int )mode->flags & 1) {
#line 361
    idf = (uint8_t )((unsigned int )idf | 8U);
  } else {

  }
#line 363
  if ((mode->flags & 4U) != 0U) {
#line 364
    idf = (uint8_t )((unsigned int )idf | 8U);
  } else {

  }
#line 366
  ch7xxx_writeb(dvo, 31, (int )idf);
#line 367
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 


  {
#line 372
  if (mode == 0) {
#line 373
    ch7xxx_writeb(dvo, 73, 192);
  } else {
#line 375
    ch7xxx_writeb(dvo, 73, 1);
  }
#line 376
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;
  int i ;

  {
#line 380
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 383
  i = 0;
#line 383
  goto ldv_25054;
  ldv_25053: ;
#line 384
  if (((unsigned int )i & 7U) == 0U) {
#line 385
    if (drm_debug != 0U) {
#line 385
      printk("<7>[drm:%s] \n %02X: ", "ch7xxx_dump_regs", i);
    } else {

    }
  } else {

  }
#line 386
  if (drm_debug != 0U) {
#line 386
    printk("<7>[drm:%s] %02X ", "ch7xxx_dump_regs", (int )ch7xxx->mode_reg.regs[i]);
  } else {

  }
#line 383
  i = i + 1;
  ldv_25054: ;
#line 383
  if (i <= 75) {
#line 384
    goto ldv_25053;
  } else {

  }

#line 388
  return;
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_save(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 392
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 394
  ch7xxx_readb(dvo, 49, & ch7xxx->save_TCTL);
#line 395
  ch7xxx_readb(dvo, 51, & ch7xxx->save_TPCP);
#line 396
  ch7xxx_readb(dvo, 52, & ch7xxx->save_TPD);
#line 397
  ch7xxx_readb(dvo, 53, & ch7xxx->save_TPVT);
#line 398
  ch7xxx_readb(dvo, 54, & ch7xxx->save_TLPF);
#line 399
  ch7xxx_readb(dvo, 73, & ch7xxx->save_PM);
#line 400
  ch7xxx_readb(dvo, 31, & ch7xxx->save_IDF);
#line 401
  return;
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 405
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 407
  ch7xxx_writeb(dvo, 49, (int )ch7xxx->save_TCTL);
#line 408
  ch7xxx_writeb(dvo, 51, (int )ch7xxx->save_TPCP);
#line 409
  ch7xxx_writeb(dvo, 52, (int )ch7xxx->save_TPD);
#line 410
  ch7xxx_writeb(dvo, 53, (int )ch7xxx->save_TPVT);
#line 411
  ch7xxx_writeb(dvo, 54, (int )ch7xxx->save_TLPF);
#line 412
  ch7xxx_writeb(dvo, 31, (int )ch7xxx->save_IDF);
#line 413
  ch7xxx_writeb(dvo, 73, (int )ch7xxx->save_PM);
#line 414
  return;
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
static void ch7xxx_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ch7xxx_priv *ch7xxx ;

  {
#line 418
  ch7xxx = (struct ch7xxx_priv *)dvo->dev_priv;
#line 420
  if ((unsigned long )ch7xxx != (unsigned long )((struct ch7xxx_priv *)0)) {
#line 421
    kfree((void const   *)ch7xxx);
#line 422
    dvo->dev_priv = 0;
  } else {

  }
#line 424
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
struct intel_dvo_dev_ops ch7xxx_ops  = 
#line 426
     {& ch7xxx_init, 0, & ch7xxx_dpms, & ch7xxx_save, & ch7xxx_restore, (int (*)(struct intel_dvo_device * ,
                                                                               struct drm_display_mode * ))(& ch7xxx_mode_valid),
    0, 0, 0, & ch7xxx_mode_set, & ch7xxx_detect, 0, & ch7xxx_destroy, & ch7xxx_dump_regs};
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv_main19_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_ch7xxx_mode_set_6_p2 ;
  int var_ch7xxx_dpms_7_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 886
  LDV_IN_INTERRUPT = 1;
#line 895
  ldv_initialize();
#line 899
  goto ldv_25102;
  ldv_25101: 
#line 902
  tmp = nondet_int();
#line 902
  switch (tmp) {
  case 0: 
#line 953
  ldv_handler_precall();
#line 954
  ch7xxx_init(var_group1, var_group2);
#line 961
  goto ldv_25091;
  case 1: 
#line 1011
  ldv_handler_precall();
#line 1012
  ch7xxx_detect(var_group1);
#line 1019
  goto ldv_25091;
  case 2: 
#line 1069
  ldv_handler_precall();
#line 1070
  ch7xxx_mode_valid(var_group1, var_group3);
#line 1077
  goto ldv_25091;
  case 3: 
#line 1127
  ldv_handler_precall();
#line 1128
  ch7xxx_mode_set(var_group1, var_group3, var_ch7xxx_mode_set_6_p2);
#line 1135
  goto ldv_25091;
  case 4: 
#line 1185
  ldv_handler_precall();
#line 1186
  ch7xxx_dpms(var_group1, var_ch7xxx_dpms_7_p1);
#line 1193
  goto ldv_25091;
  case 5: 
#line 1243
  ldv_handler_precall();
#line 1244
  ch7xxx_dump_regs(var_group1);
#line 1251
  goto ldv_25091;
  case 6: 
#line 1301
  ldv_handler_precall();
#line 1302
  ch7xxx_save(var_group1);
#line 1309
  goto ldv_25091;
  case 7: 
#line 1359
  ldv_handler_precall();
#line 1360
  ch7xxx_restore(var_group1);
#line 1367
  goto ldv_25091;
  case 8: 
#line 1417
  ldv_handler_precall();
#line 1418
  ch7xxx_destroy(var_group1);
#line 1425
  goto ldv_25091;
  default: ;
#line 1426
  goto ldv_25091;
  }
  ldv_25091: ;
  ldv_25102: 
#line 899
  tmp___0 = nondet_int();
#line 899
  if (tmp___0 != 0) {
#line 900
    goto ldv_25101;
  } else {

  }


#line 1435
  ldv_check_final_state();
#line 1438
  return;
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_713(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1447
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1449
  __ldv_spin_lock(ldv_func_arg1);
#line 1450
  return;
}
}
#line 1452 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_714(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1457
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1459
  __ldv_spin_unlock(ldv_func_arg1);
#line 1460
  return;
}
}
#line 1462 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
int ldv___ldv_spin_trylock_715(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1467
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1467
  ldv_func_res = tmp;
#line 1469
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1469
  return (tmp___0);
#line 1471
  return (ldv_func_res);
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_716(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1479
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1481
  __ldv_spin_lock(ldv_func_arg1);
#line 1482
  return;
}
}
#line 1484 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_717(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1489
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1491
  __ldv_spin_unlock(ldv_func_arg1);
#line 1492
  return;
}
}
#line 1494 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_718(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1499
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1501
  __ldv_spin_lock(ldv_func_arg1);
#line 1502
  return;
}
}
#line 1504 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_719(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1509
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1511
  __ldv_spin_unlock(ldv_func_arg1);
#line 1512
  return;
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_720(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1519
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1521
  __ldv_spin_unlock(ldv_func_arg1);
#line 1522
  return;
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_721(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1529
  ldv_spin_lock_dcache_lock();
#line 1531
  __ldv_spin_lock(ldv_func_arg1);
#line 1532
  return;
}
}
#line 1534 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_722(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1539
  ldv_spin_lock_d_lock_of_dentry();
#line 1541
  __ldv_spin_lock(ldv_func_arg1);
#line 1542
  return;
}
}
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_723(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1549
  ldv_spin_unlock_d_lock_of_dentry();
#line 1551
  __ldv_spin_unlock(ldv_func_arg1);
#line 1552
  return;
}
}
#line 1554 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_724(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1559
  ldv_spin_unlock_dcache_lock();
#line 1561
  __ldv_spin_unlock(ldv_func_arg1);
#line 1562
  return;
}
}
#line 1564 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_725(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1569
  ldv_spin_lock_d_lock_of_dentry();
#line 1571
  __ldv_spin_lock(ldv_func_arg1);
#line 1572
  return;
}
}
#line 1574 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_726(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1579
  ldv_spin_unlock_d_lock_of_dentry();
#line 1581
  __ldv_spin_unlock(ldv_func_arg1);
#line 1582
  return;
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_727(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1589
  ldv_spin_lock_i_lock_of_inode();
#line 1591
  __ldv_spin_lock(ldv_func_arg1);
#line 1592
  return;
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_728(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1599
  ldv_spin_unlock_i_lock_of_inode();
#line 1601
  __ldv_spin_unlock(ldv_func_arg1);
#line 1602
  return;
}
}
#line 1604 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_lock_729(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1609
  ldv_spin_lock_d_lock_of_dentry();
#line 1611
  __ldv_spin_lock(ldv_func_arg1);
#line 1612
  return;
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7xxx.c.prepared"
void ldv___ldv_spin_unlock_730(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1619
  ldv_spin_unlock_d_lock_of_dentry();
#line 1621
  __ldv_spin_unlock(ldv_func_arg1);
#line 1622
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_749(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_752(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_754(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_757(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_758(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_761(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_763(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_765(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_750(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_753(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_755(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_756(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_759(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_760(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_762(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_764(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_766(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_751(spinlock_t *ldv_func_arg1 ) ;
#line 242
static void ch7017_dump_regs(struct intel_dvo_device *dvo ) ;
#line 243
static void ch7017_dpms(struct intel_dvo_device *dvo , int mode ) ;
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static bool ch7017_read(struct intel_dvo_device *dvo , int addr , uint8_t *val ) 
{ 
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2U] ;
  u8 in_buf[2U] ;
  struct i2c_msg msgs[2U] ;
  int tmp ;

  {
#line 247
  i2cbus = dvo->i2c_bus;
#line 251
  msgs[0].addr = (unsigned short )i2cbus->slave_addr;
#line 251
  msgs[0].flags = 0U;
#line 251
  msgs[0].len = 1U;
#line 251
  msgs[0].buf = (__u8 *)(& out_buf);
#line 251
  msgs[1].addr = (unsigned short )i2cbus->slave_addr;
#line 251
  msgs[1].flags = 1U;
#line 251
  msgs[1].len = 1U;
#line 251
  msgs[1].buf = (__u8 *)(& in_buf);
#line 266
  out_buf[0] = (u8 )addr;
#line 267
  out_buf[1] = 0U;
#line 269
  tmp = i2c_transfer(& i2cbus->adapter, (struct i2c_msg *)(& msgs), 2);
#line 269
  if (tmp == 2) {
#line 270
    *val = in_buf[0];
#line 271
    return (1);
  } else {

  }
#line 274
  return (0);
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static bool ch7017_write(struct intel_dvo_device *dvo , int addr , uint8_t val ) 
{ 
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2U] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 279
  i2cbus = dvo->i2c_bus;
#line 281
  msg.addr = (unsigned short )i2cbus->slave_addr;
#line 281
  msg.flags = 0U;
#line 281
  msg.len = 2U;
#line 281
  msg.buf = (__u8 *)(& out_buf);
#line 288
  out_buf[0] = (uint8_t )addr;
#line 289
  out_buf[1] = val;
#line 291
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 291
  if (tmp == 1) {
#line 292
    return (1);
  } else {

  }
#line 294
  return (0);
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static bool ch7017_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ch7017_priv *priv ;
  uint8_t val ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
#line 304
  tmp = kzalloc(10UL, 208U);
#line 304
  priv = (struct ch7017_priv *)tmp;
#line 305
  if ((unsigned long )priv == (unsigned long )((struct ch7017_priv *)0)) {
#line 306
    return (0);
  } else {

  }
#line 308
  dvo->i2c_bus = i2cbus;
#line 309
  (dvo->i2c_bus)->slave_addr = (u8 )dvo->slave_addr;
#line 310
  dvo->dev_priv = (void *)priv;
#line 312
  tmp___0 = ch7017_read(dvo, 75, & val);
#line 312
  if (tmp___0) {
#line 312
    tmp___1 = 0;
  } else {
#line 312
    tmp___1 = 1;
  }
#line 312
  if (tmp___1) {
#line 313
    goto fail;
  } else {

  }
#line 315
  if (((unsigned int )val != 27U && (unsigned int )val != 26U) && (unsigned int )val != 25U) {
#line 318
    if (drm_debug != 0U) {
#line 318
      printk("<7>[drm:%s] ch701x not detected, got %d: from %s Slave %d.\n", "ch7017_init",
             (int )val, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 320
    goto fail;
  } else {

  }
#line 323
  return (1);
  fail: 
#line 325
  kfree((void const   *)priv);
#line 326
  return (0);
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static enum drm_connector_status ch7017_detect(struct intel_dvo_device *dvo ) 
{ 


  {
#line 331
  return (connector_status_unknown);
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static enum drm_mode_status ch7017_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 337
  if (mode->clock > 160000) {
#line 338
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 340
  return (MODE_OK);
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 
  uint8_t lvds_pll_feedback_div ;
  uint8_t lvds_pll_vco_control ;
  uint8_t outputs_enable ;
  uint8_t lvds_control_2 ;
  uint8_t lvds_power_down ;
  uint8_t horizontal_active_pixel_input ;
  uint8_t horizontal_active_pixel_output ;
  uint8_t vertical_active_line_output ;
  uint8_t active_input_line_output ;

  {
#line 353
  if (drm_debug != 0U) {
#line 353
    printk("<7>[drm:%s] Registers before mode setting\n", "ch7017_mode_set");
  } else {

  }
#line 354
  ch7017_dump_regs(dvo);
#line 357
  if (mode->clock <= 99999) {
#line 358
    outputs_enable = 8U;
#line 359
    lvds_pll_feedback_div = 173U;
#line 362
    lvds_pll_vco_control = 163U;
#line 365
    lvds_control_2 = 32U;
  } else {
#line 368
    outputs_enable = 11U;
#line 369
    lvds_pll_feedback_div = 163U;
#line 372
    lvds_pll_feedback_div = 35U;
#line 373
    lvds_control_2 = 96U;
#line 376
    outputs_enable = (uint8_t )((unsigned int )outputs_enable | 16U);
#line 377
    lvds_pll_vco_control = 173U;
  }
#line 387
  horizontal_active_pixel_input = (uint8_t )mode->hdisplay;
#line 389
  vertical_active_line_output = (uint8_t )mode->vdisplay;
#line 390
  horizontal_active_pixel_output = (uint8_t )mode->hdisplay;
#line 392
  active_input_line_output = (uint8_t )((int )((signed char )((mode->hdisplay & 1792) >> 8)) | (int )((signed char )(((mode->vdisplay & 1792) >> 8) << 3)));
#line 395
  lvds_power_down = (uint8_t )((int )((signed char )((mode->hdisplay & 1792) >> 8)) | 8);
#line 398
  ch7017_dpms(dvo, 3);
#line 399
  ch7017_write(dvo, 95, (int )horizontal_active_pixel_input);
#line 401
  ch7017_write(dvo, 98, (int )horizontal_active_pixel_output);
#line 403
  ch7017_write(dvo, 97, (int )vertical_active_line_output);
#line 405
  ch7017_write(dvo, 96, (int )active_input_line_output);
#line 407
  ch7017_write(dvo, 114, (int )lvds_pll_vco_control);
#line 408
  ch7017_write(dvo, 113, (int )lvds_pll_feedback_div);
#line 409
  ch7017_write(dvo, 120, (int )lvds_control_2);
#line 410
  ch7017_write(dvo, 115, (int )outputs_enable);
#line 413
  ch7017_write(dvo, 99, (int )lvds_power_down);
#line 415
  if (drm_debug != 0U) {
#line 415
    printk("<7>[drm:%s] Registers after mode setting\n", "ch7017_mode_set");
  } else {

  }
#line 416
  ch7017_dump_regs(dvo);
#line 417
  return;
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  uint8_t val ;

  {
#line 424
  ch7017_read(dvo, 99, & val);
#line 427
  ch7017_write(dvo, 73, 62);
#line 434
  if (mode == 0) {
#line 436
    ch7017_write(dvo, 99, (int )val & 191);
  } else {
#line 440
    ch7017_write(dvo, 99, (int )((unsigned int )val | 64U));
  }
#line 445
  __const_udelay(85900000UL);
#line 446
  return;
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;

  {
#line 458
  ch7017_read(dvo, 95, & val);
#line 458
  if (drm_debug != 0U) {
#line 458
    printk("<7>[drm:%s] CH7017_HORIZONTAL_ACTIVE_PIXEL_INPUT: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 459
  ch7017_read(dvo, 98, & val);
#line 459
  if (drm_debug != 0U) {
#line 459
    printk("<7>[drm:%s] CH7017_HORIZONTAL_ACTIVE_PIXEL_OUTPUT: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 460
  ch7017_read(dvo, 97, & val);
#line 460
  if (drm_debug != 0U) {
#line 460
    printk("<7>[drm:%s] CH7017_VERTICAL_ACTIVE_LINE_OUTPUT: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 461
  ch7017_read(dvo, 96, & val);
#line 461
  if (drm_debug != 0U) {
#line 461
    printk("<7>[drm:%s] CH7017_ACTIVE_INPUT_LINE_OUTPUT: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 462
  ch7017_read(dvo, 114, & val);
#line 462
  if (drm_debug != 0U) {
#line 462
    printk("<7>[drm:%s] CH7017_LVDS_PLL_VCO_CONTROL: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 463
  ch7017_read(dvo, 113, & val);
#line 463
  if (drm_debug != 0U) {
#line 463
    printk("<7>[drm:%s] CH7017_LVDS_PLL_FEEDBACK_DIV: %02x\n", "ch7017_dump_regs",
           (int )val);
  } else {

  }
#line 464
  ch7017_read(dvo, 120, & val);
#line 464
  if (drm_debug != 0U) {
#line 464
    printk("<7>[drm:%s] CH7017_LVDS_CONTROL_2: %02x\n", "ch7017_dump_regs", (int )val);
  } else {

  }
#line 465
  ch7017_read(dvo, 115, & val);
#line 465
  if (drm_debug != 0U) {
#line 465
    printk("<7>[drm:%s] CH7017_OUTPUTS_ENABLE: %02x\n", "ch7017_dump_regs", (int )val);
  } else {

  }
#line 466
  ch7017_read(dvo, 99, & val);
#line 466
  if (drm_debug != 0U) {
#line 466
    printk("<7>[drm:%s] CH7017_LVDS_POWER_DOWN: %02x\n", "ch7017_dump_regs", (int )val);
  } else {

  }
#line 467
  return;
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_save(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 471
  priv = (struct ch7017_priv *)dvo->dev_priv;
#line 473
  ch7017_read(dvo, 95, & priv->save_hapi);
#line 474
  ch7017_read(dvo, 97, & priv->save_valo);
#line 475
  ch7017_read(dvo, 96, & priv->save_ailo);
#line 476
  ch7017_read(dvo, 114, & priv->save_lvds_pll_vco);
#line 477
  ch7017_read(dvo, 113, & priv->save_feedback_div);
#line 478
  ch7017_read(dvo, 120, & priv->save_lvds_control_2);
#line 479
  ch7017_read(dvo, 115, & priv->save_outputs_enable);
#line 480
  ch7017_read(dvo, 99, & priv->save_lvds_power_down);
#line 481
  ch7017_read(dvo, 73, & priv->save_power_management);
#line 482
  return;
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 486
  priv = (struct ch7017_priv *)dvo->dev_priv;
#line 489
  ch7017_dpms(dvo, 3);
#line 491
  ch7017_write(dvo, 95, (int )priv->save_hapi);
#line 492
  ch7017_write(dvo, 97, (int )priv->save_valo);
#line 493
  ch7017_write(dvo, 96, (int )priv->save_ailo);
#line 494
  ch7017_write(dvo, 114, (int )priv->save_lvds_pll_vco);
#line 495
  ch7017_write(dvo, 113, (int )priv->save_feedback_div);
#line 496
  ch7017_write(dvo, 120, (int )priv->save_lvds_control_2);
#line 497
  ch7017_write(dvo, 115, (int )priv->save_outputs_enable);
#line 498
  ch7017_write(dvo, 99, (int )priv->save_lvds_power_down);
#line 499
  ch7017_write(dvo, 73, (int )priv->save_power_management);
#line 500
  return;
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
static void ch7017_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ch7017_priv *priv ;

  {
#line 504
  priv = (struct ch7017_priv *)dvo->dev_priv;
#line 506
  if ((unsigned long )priv != (unsigned long )((struct ch7017_priv *)0)) {
#line 507
    kfree((void const   *)priv);
#line 508
    dvo->dev_priv = 0;
  } else {

  }
#line 510
  return;
}
}
#line 512 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
struct intel_dvo_dev_ops ch7017_ops  = 
#line 512
     {& ch7017_init, 0, & ch7017_dpms, & ch7017_save, & ch7017_restore, (int (*)(struct intel_dvo_device * ,
                                                                               struct drm_display_mode * ))(& ch7017_mode_valid),
    0, 0, 0, & ch7017_mode_set, & ch7017_detect, 0, & ch7017_destroy, & ch7017_dump_regs};
#line 561 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv_main20_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_ch7017_mode_set_5_p2 ;
  int var_ch7017_dpms_6_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 1553
  LDV_IN_INTERRUPT = 1;
#line 1562
  ldv_initialize();
#line 1566
  goto ldv_25084;
  ldv_25083: 
#line 1569
  tmp = nondet_int();
#line 1569
  switch (tmp) {
  case 0: 
#line 1679
  ldv_handler_precall();
#line 1680
  ch7017_init(var_group1, var_group2);
#line 1694
  goto ldv_25073;
  case 1: 
#line 1803
  ldv_handler_precall();
#line 1804
  ch7017_detect(var_group1);
#line 1818
  goto ldv_25073;
  case 2: 
#line 1927
  ldv_handler_precall();
#line 1928
  ch7017_mode_valid(var_group1, var_group3);
#line 1942
  goto ldv_25073;
  case 3: 
#line 2051
  ldv_handler_precall();
#line 2052
  ch7017_mode_set(var_group1, var_group3, var_ch7017_mode_set_5_p2);
#line 2066
  goto ldv_25073;
  case 4: 
#line 2175
  ldv_handler_precall();
#line 2176
  ch7017_dpms(var_group1, var_ch7017_dpms_6_p1);
#line 2190
  goto ldv_25073;
  case 5: 
#line 2299
  ldv_handler_precall();
#line 2300
  ch7017_dump_regs(var_group1);
#line 2307
  goto ldv_25073;
  case 6: 
#line 2421
  ldv_handler_precall();
#line 2422
  ch7017_save(var_group1);
#line 2429
  goto ldv_25073;
  case 7: 
#line 2543
  ldv_handler_precall();
#line 2544
  ch7017_restore(var_group1);
#line 2551
  goto ldv_25073;
  case 8: 
#line 2665
  ldv_handler_precall();
#line 2666
  ch7017_destroy(var_group1);
#line 2673
  goto ldv_25073;
  default: ;
#line 2674
  goto ldv_25073;
  }
  ldv_25073: ;
  ldv_25084: 
#line 1566
  tmp___0 = nondet_int();
#line 1566
  if (tmp___0 != 0) {
#line 1567
    goto ldv_25083;
  } else {

  }


#line 2683
  ldv_check_final_state();
#line 2686
  return;
}
}
#line 2690 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_749(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2695
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 2697
  __ldv_spin_lock(ldv_func_arg1);
#line 2698
  return;
}
}
#line 2700 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_750(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2705
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 2707
  __ldv_spin_unlock(ldv_func_arg1);
#line 2708
  return;
}
}
#line 2710 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
int ldv___ldv_spin_trylock_751(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2715
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 2715
  ldv_func_res = tmp;
#line 2717
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 2717
  return (tmp___0);
#line 2719
  return (ldv_func_res);
}
}
#line 2722 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_752(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2727
  ldv_spin_lock_siglock_of_sighand_struct();
#line 2729
  __ldv_spin_lock(ldv_func_arg1);
#line 2730
  return;
}
}
#line 2732 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_753(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2737
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 2739
  __ldv_spin_unlock(ldv_func_arg1);
#line 2740
  return;
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_754(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2747
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 2749
  __ldv_spin_lock(ldv_func_arg1);
#line 2750
  return;
}
}
#line 2752 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_755(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2757
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 2759
  __ldv_spin_unlock(ldv_func_arg1);
#line 2760
  return;
}
}
#line 2762 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_756(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2767
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 2769
  __ldv_spin_unlock(ldv_func_arg1);
#line 2770
  return;
}
}
#line 2772 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_757(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2777
  ldv_spin_lock_dcache_lock();
#line 2779
  __ldv_spin_lock(ldv_func_arg1);
#line 2780
  return;
}
}
#line 2782 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_758(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2787
  ldv_spin_lock_d_lock_of_dentry();
#line 2789
  __ldv_spin_lock(ldv_func_arg1);
#line 2790
  return;
}
}
#line 2792 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_759(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2797
  ldv_spin_unlock_d_lock_of_dentry();
#line 2799
  __ldv_spin_unlock(ldv_func_arg1);
#line 2800
  return;
}
}
#line 2802 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_760(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2807
  ldv_spin_unlock_dcache_lock();
#line 2809
  __ldv_spin_unlock(ldv_func_arg1);
#line 2810
  return;
}
}
#line 2812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_761(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2817
  ldv_spin_lock_d_lock_of_dentry();
#line 2819
  __ldv_spin_lock(ldv_func_arg1);
#line 2820
  return;
}
}
#line 2822 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_762(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2827
  ldv_spin_unlock_d_lock_of_dentry();
#line 2829
  __ldv_spin_unlock(ldv_func_arg1);
#line 2830
  return;
}
}
#line 2832 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_763(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2837
  ldv_spin_lock_i_lock_of_inode();
#line 2839
  __ldv_spin_lock(ldv_func_arg1);
#line 2840
  return;
}
}
#line 2842 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_764(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2847
  ldv_spin_unlock_i_lock_of_inode();
#line 2849
  __ldv_spin_unlock(ldv_func_arg1);
#line 2850
  return;
}
}
#line 2852 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_lock_765(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2857
  ldv_spin_lock_d_lock_of_dentry();
#line 2859
  __ldv_spin_lock(ldv_func_arg1);
#line 2860
  return;
}
}
#line 2862 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ch7017.c.prepared"
void ldv___ldv_spin_unlock_766(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2867
  ldv_spin_unlock_d_lock_of_dentry();
#line 2869
  __ldv_spin_unlock(ldv_func_arg1);
#line 2870
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_785(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_788(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_790(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_793(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_794(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_797(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_799(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_801(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_786(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_789(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_791(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_792(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_795(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_796(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_798(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_800(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_802(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_787(spinlock_t *ldv_func_arg1 ) ;
#line 230
static void ivch_dump_regs(struct intel_dvo_device *dvo ) ;
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static bool ivch_read(struct intel_dvo_device *dvo , int addr , uint16_t *data ) 
{ 
  struct ivch_priv *priv ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[1U] ;
  u8 in_buf[2U] ;
  struct i2c_msg msgs[3U] ;
  int tmp ;

  {
#line 239
  priv = (struct ivch_priv *)dvo->dev_priv;
#line 240
  i2cbus = dvo->i2c_bus;
#line 244
  msgs[0].addr = (unsigned short )i2cbus->slave_addr;
#line 244
  msgs[0].flags = 1U;
#line 244
  msgs[0].len = 0U;
#line 244
  msgs[0].buf = 0;
#line 244
  msgs[1].addr = 0U;
#line 244
  msgs[1].flags = 16384U;
#line 244
  msgs[1].len = 1U;
#line 244
  msgs[1].buf = (__u8 *)(& out_buf);
#line 244
  msgs[2].addr = (unsigned short )i2cbus->slave_addr;
#line 244
  msgs[2].flags = 16385U;
#line 244
  msgs[2].len = 2U;
#line 244
  msgs[2].buf = (__u8 *)(& in_buf);
#line 264
  out_buf[0] = (u8 )addr;
#line 266
  tmp = i2c_transfer(& i2cbus->adapter, (struct i2c_msg *)(& msgs), 3);
#line 266
  if (tmp == 3) {
#line 267
    *data = (uint16_t )((int )((short )((int )in_buf[1] << 8)) | (int )((short )in_buf[0]));
#line 268
    return (1);
  } else {

  }
#line 271
  if (! priv->quiet) {
#line 272
    if (drm_debug != 0U) {
#line 272
      printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "ivch_read",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 275
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static bool ivch_write(struct intel_dvo_device *dvo , int addr , uint16_t data ) 
{ 
  struct ivch_priv *priv ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[3U] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 281
  priv = (struct ivch_priv *)dvo->dev_priv;
#line 282
  i2cbus = dvo->i2c_bus;
#line 284
  msg.addr = (unsigned short )i2cbus->slave_addr;
#line 284
  msg.flags = 0U;
#line 284
  msg.len = 3U;
#line 284
  msg.buf = (__u8 *)(& out_buf);
#line 291
  out_buf[0] = (u8 )addr;
#line 292
  out_buf[1] = (u8 )data;
#line 293
  out_buf[2] = (u8 )((int )data >> 8);
#line 295
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 295
  if (tmp == 1) {
#line 296
    return (1);
  } else {

  }
#line 298
  if (! priv->quiet) {
#line 299
    if (drm_debug != 0U) {
#line 299
      printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "ivch_write",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 303
  return (0);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static bool ivch_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct ivch_priv *priv ;
  uint16_t temp ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
#line 313
  tmp = kzalloc(10UL, 208U);
#line 313
  priv = (struct ivch_priv *)tmp;
#line 314
  if ((unsigned long )priv == (unsigned long )((struct ivch_priv *)0)) {
#line 315
    return (0);
  } else {

  }
#line 317
  dvo->i2c_bus = i2cbus;
#line 318
  (dvo->i2c_bus)->slave_addr = (u8 )dvo->slave_addr;
#line 319
  dvo->dev_priv = (void *)priv;
#line 320
  priv->quiet = 1;
#line 322
  tmp___0 = ivch_read(dvo, 0, & temp);
#line 322
  if (tmp___0) {
#line 322
    tmp___1 = 0;
  } else {
#line 322
    tmp___1 = 1;
  }
#line 322
  if (tmp___1) {
#line 323
    goto out;
  } else {

  }
#line 324
  priv->quiet = 0;
#line 330
  if (((int )temp & 127) != dvo->slave_addr) {
#line 331
    if (drm_debug != 0U) {
#line 331
      printk("<7>[drm:%s] ivch detect failed due to address mismatch (%d vs %d)\n",
             "ivch_init", (int )temp & 127, dvo->slave_addr);
    } else {

    }
#line 334
    goto out;
  } else {

  }
#line 337
  ivch_read(dvo, 32, & priv->width);
#line 338
  ivch_read(dvo, 32, & priv->height);
#line 340
  return (1);
  out: 
#line 343
  kfree((void const   *)priv);
#line 344
  return (0);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static enum drm_connector_status ivch_detect(struct intel_dvo_device *dvo ) 
{ 


  {
#line 349
  return (connector_status_connected);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static enum drm_mode_status ivch_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 355
  if (mode->clock > 112000) {
#line 356
    return (MODE_CLOCK_HIGH);
  } else {

  }
#line 358
  return (MODE_OK);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  int i ;
  uint16_t vr01 ;
  uint16_t vr30 ;
  uint16_t backlight ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 368
  tmp = ivch_read(dvo, 1, & vr01);
#line 368
  if (tmp) {
#line 368
    tmp___0 = 0;
  } else {
#line 368
    tmp___0 = 1;
  }
#line 368
  if (tmp___0) {
#line 369
    return;
  } else {

  }
#line 371
  if (mode == 0) {
#line 372
    backlight = 1U;
  } else {
#line 374
    backlight = 0U;
  }
#line 375
  ivch_write(dvo, 128, (int )backlight);
#line 377
  if (mode == 0) {
#line 378
    vr01 = (uint16_t )((unsigned int )vr01 | 5U);
  } else {
#line 380
    vr01 = (unsigned int )vr01 & 65530U;
  }
#line 382
  ivch_write(dvo, 1, (int )vr01);
#line 385
  i = 0;
#line 385
  goto ldv_25019;
  ldv_25018: 
#line 386
  tmp___1 = ivch_read(dvo, 48, & vr30);
#line 386
  if (tmp___1) {
#line 386
    tmp___2 = 0;
  } else {
#line 386
    tmp___2 = 1;
  }
#line 386
  if (tmp___2) {
#line 387
    goto ldv_25017;
  } else {

  }
#line 389
  if (((int )((short )vr30) >= 0) ^ (mode == 0)) {
#line 390
    goto ldv_25017;
  } else {

  }
#line 391
  __const_udelay(4295000UL);
#line 385
  i = i + 1;
  ldv_25019: ;
#line 385
  if (i <= 99) {
#line 386
    goto ldv_25018;
  } else {

  }
  ldv_25017: 
#line 394
  __const_udelay(68720000UL);
#line 395
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                          struct drm_display_mode *adjusted_mode ) 
{ 
  uint16_t vr40 ;
  uint16_t vr01 ;
  uint16_t x_ratio ;
  uint16_t y_ratio ;

  {
#line 401
  vr40 = 0U;
#line 404
  vr01 = 0U;
#line 405
  vr40 = 13312U;
#line 408
  if (mode->hdisplay != adjusted_mode->hdisplay || mode->vdisplay != adjusted_mode->vdisplay) {
#line 412
    vr01 = (uint16_t )((unsigned int )vr01 | 8U);
#line 413
    vr40 = (uint16_t )((unsigned int )vr40 | 256U);
#line 414
    x_ratio = (uint16_t )(((mode->hdisplay + -1) << 16) / (adjusted_mode->hdisplay + -1) >> 2);
#line 416
    y_ratio = (uint16_t )(((mode->vdisplay + -1) << 16) / (adjusted_mode->vdisplay + -1) >> 2);
#line 418
    ivch_write(dvo, 66, (int )x_ratio);
#line 419
    ivch_write(dvo, 65, (int )y_ratio);
  } else {
#line 421
    vr01 = (unsigned int )vr01 & 65527U;
#line 422
    vr40 = (unsigned int )vr40 & 65279U;
  }
#line 424
  vr40 = (unsigned int )vr40 & 65023U;
#line 426
  ivch_write(dvo, 1, (int )vr01);
#line 427
  ivch_write(dvo, 64, (int )vr40);
#line 429
  ivch_dump_regs(dvo);
#line 430
  return;
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint16_t val ;

  {
#line 436
  ivch_read(dvo, 0, & val);
#line 437
  if (drm_debug != 0U) {
#line 437
    printk("<7>[drm:%s] VR00: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 438
  ivch_read(dvo, 1, & val);
#line 439
  if (drm_debug != 0U) {
#line 439
    printk("<7>[drm:%s] VR01: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 440
  ivch_read(dvo, 48, & val);
#line 441
  if (drm_debug != 0U) {
#line 441
    printk("<7>[drm:%s] VR30: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 442
  ivch_read(dvo, 64, & val);
#line 443
  if (drm_debug != 0U) {
#line 443
    printk("<7>[drm:%s] VR40: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 446
  ivch_read(dvo, 128, & val);
#line 447
  if (drm_debug != 0U) {
#line 447
    printk("<7>[drm:%s] VR80: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 448
  ivch_read(dvo, 129, & val);
#line 449
  if (drm_debug != 0U) {
#line 449
    printk("<7>[drm:%s] VR81: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 450
  ivch_read(dvo, 130, & val);
#line 451
  if (drm_debug != 0U) {
#line 451
    printk("<7>[drm:%s] VR82: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 452
  ivch_read(dvo, 131, & val);
#line 453
  if (drm_debug != 0U) {
#line 453
    printk("<7>[drm:%s] VR83: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 454
  ivch_read(dvo, 132, & val);
#line 455
  if (drm_debug != 0U) {
#line 455
    printk("<7>[drm:%s] VR84: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 456
  ivch_read(dvo, 133, & val);
#line 457
  if (drm_debug != 0U) {
#line 457
    printk("<7>[drm:%s] VR85: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 458
  ivch_read(dvo, 134, & val);
#line 459
  if (drm_debug != 0U) {
#line 459
    printk("<7>[drm:%s] VR86: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 460
  ivch_read(dvo, 135, & val);
#line 461
  if (drm_debug != 0U) {
#line 461
    printk("<7>[drm:%s] VR87: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 462
  ivch_read(dvo, 136, & val);
#line 463
  if (drm_debug != 0U) {
#line 463
    printk("<7>[drm:%s] VR88: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 466
  ivch_read(dvo, 142, & val);
#line 467
  if (drm_debug != 0U) {
#line 467
    printk("<7>[drm:%s] VR8E: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 470
  ivch_read(dvo, 143, & val);
#line 471
  if (drm_debug != 0U) {
#line 471
    printk("<7>[drm:%s] VR8F: 0x%04x\n", "ivch_dump_regs", (int )val);
  } else {

  }
#line 472
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_save(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 476
  priv = (struct ivch_priv *)dvo->dev_priv;
#line 478
  ivch_read(dvo, 1, & priv->save_VR01);
#line 479
  ivch_read(dvo, 64, & priv->save_VR40);
#line 480
  return;
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_restore(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 484
  priv = (struct ivch_priv *)dvo->dev_priv;
#line 486
  ivch_write(dvo, 1, (int )priv->save_VR01);
#line 487
  ivch_write(dvo, 64, (int )priv->save_VR40);
#line 488
  return;
}
}
#line 490 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
static void ivch_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct ivch_priv *priv ;

  {
#line 492
  priv = (struct ivch_priv *)dvo->dev_priv;
#line 494
  if ((unsigned long )priv != (unsigned long )((struct ivch_priv *)0)) {
#line 495
    kfree((void const   *)priv);
#line 496
    dvo->dev_priv = 0;
  } else {

  }
#line 498
  return;
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
struct intel_dvo_dev_ops ivch_ops  = 
#line 500
     {& ivch_init, 0, & ivch_dpms, & ivch_save, & ivch_restore, (int (*)(struct intel_dvo_device * ,
                                                                       struct drm_display_mode * ))(& ivch_mode_valid),
    0, 0, 0, & ivch_mode_set, & ivch_detect, 0, & ivch_destroy, & ivch_dump_regs};
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv_main21_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 561
  LDV_IN_INTERRUPT = 1;
#line 570
  ldv_initialize();
#line 572
  goto ldv_25066;
  ldv_25065: 
#line 575
  tmp = nondet_int();
#line 575
  switch (tmp) {
  default: ;
#line 577
  goto ldv_25064;
  }
  ldv_25064: ;
  ldv_25066: 
#line 572
  tmp___0 = nondet_int();
#line 572
  if (tmp___0 != 0) {
#line 573
    goto ldv_25065;
  } else {

  }


#line 586
  ldv_check_final_state();
#line 589
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_785(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 598
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 600
  __ldv_spin_lock(ldv_func_arg1);
#line 601
  return;
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_786(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 608
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 610
  __ldv_spin_unlock(ldv_func_arg1);
#line 611
  return;
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
int ldv___ldv_spin_trylock_787(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 618
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 618
  ldv_func_res = tmp;
#line 620
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 620
  return (tmp___0);
#line 622
  return (ldv_func_res);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_788(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 630
  ldv_spin_lock_siglock_of_sighand_struct();
#line 632
  __ldv_spin_lock(ldv_func_arg1);
#line 633
  return;
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_789(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 640
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 642
  __ldv_spin_unlock(ldv_func_arg1);
#line 643
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_790(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 650
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 652
  __ldv_spin_lock(ldv_func_arg1);
#line 653
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_791(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 660
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 662
  __ldv_spin_unlock(ldv_func_arg1);
#line 663
  return;
}
}
#line 665 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_792(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 670
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 672
  __ldv_spin_unlock(ldv_func_arg1);
#line 673
  return;
}
}
#line 675 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_793(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 680
  ldv_spin_lock_dcache_lock();
#line 682
  __ldv_spin_lock(ldv_func_arg1);
#line 683
  return;
}
}
#line 685 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_794(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 690
  ldv_spin_lock_d_lock_of_dentry();
#line 692
  __ldv_spin_lock(ldv_func_arg1);
#line 693
  return;
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_795(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 700
  ldv_spin_unlock_d_lock_of_dentry();
#line 702
  __ldv_spin_unlock(ldv_func_arg1);
#line 703
  return;
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_796(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 710
  ldv_spin_unlock_dcache_lock();
#line 712
  __ldv_spin_unlock(ldv_func_arg1);
#line 713
  return;
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_797(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 720
  ldv_spin_lock_d_lock_of_dentry();
#line 722
  __ldv_spin_lock(ldv_func_arg1);
#line 723
  return;
}
}
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_798(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 730
  ldv_spin_unlock_d_lock_of_dentry();
#line 732
  __ldv_spin_unlock(ldv_func_arg1);
#line 733
  return;
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_799(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 740
  ldv_spin_lock_i_lock_of_inode();
#line 742
  __ldv_spin_lock(ldv_func_arg1);
#line 743
  return;
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_800(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 750
  ldv_spin_unlock_i_lock_of_inode();
#line 752
  __ldv_spin_unlock(ldv_func_arg1);
#line 753
  return;
}
}
#line 755 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_lock_801(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 760
  ldv_spin_lock_d_lock_of_dentry();
#line 762
  __ldv_spin_lock(ldv_func_arg1);
#line 763
  return;
}
}
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_ivch.c.prepared"
void ldv___ldv_spin_unlock_802(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 770
  ldv_spin_unlock_d_lock_of_dentry();
#line 772
  __ldv_spin_unlock(ldv_func_arg1);
#line 773
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_821(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_824(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_826(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_829(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_830(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_833(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_835(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_837(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_822(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_825(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_827(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_828(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_831(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_832(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_834(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_836(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_838(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_823(spinlock_t *ldv_func_arg1 ) ;
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static bool tfp410_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct tfp410_priv *tfp ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2U] ;
  u8 in_buf[2U] ;
  struct i2c_msg msgs[2U] ;
  int tmp ;

  {
#line 171
  tfp = (struct tfp410_priv *)dvo->dev_priv;
#line 172
  i2cbus = dvo->i2c_bus;
#line 176
  msgs[0].addr = (unsigned short )i2cbus->slave_addr;
#line 176
  msgs[0].flags = 0U;
#line 176
  msgs[0].len = 1U;
#line 176
  msgs[0].buf = (__u8 *)(& out_buf);
#line 176
  msgs[1].addr = (unsigned short )i2cbus->slave_addr;
#line 176
  msgs[1].flags = 1U;
#line 176
  msgs[1].len = 1U;
#line 176
  msgs[1].buf = (__u8 *)(& in_buf);
#line 191
  out_buf[0] = (u8 )addr;
#line 192
  out_buf[1] = 0U;
#line 194
  tmp = i2c_transfer(& i2cbus->adapter, (struct i2c_msg *)(& msgs), 2);
#line 194
  if (tmp == 2) {
#line 195
    *ch = in_buf[0];
#line 196
    return (1);
  } else {

  }
#line 199
  if (! tfp->quiet) {
#line 200
    if (drm_debug != 0U) {
#line 200
      printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "tfp410_readb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 203
  return (0);
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static bool tfp410_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct tfp410_priv *tfp ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2U] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 208
  tfp = (struct tfp410_priv *)dvo->dev_priv;
#line 209
  i2cbus = dvo->i2c_bus;
#line 211
  msg.addr = (unsigned short )i2cbus->slave_addr;
#line 211
  msg.flags = 0U;
#line 211
  msg.len = 2U;
#line 211
  msg.buf = (__u8 *)(& out_buf);
#line 218
  out_buf[0] = (uint8_t )addr;
#line 219
  out_buf[1] = ch;
#line 221
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 221
  if (tmp == 1) {
#line 222
    return (1);
  } else {

  }
#line 224
  if (! tfp->quiet) {
#line 225
    if (drm_debug != 0U) {
#line 225
      printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "tfp410_writeb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 229
  return (0);
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static int tfp410_getid(struct intel_dvo_device *dvo , int addr ) 
{ 
  uint8_t ch1 ;
  uint8_t ch2 ;
  bool tmp ;
  bool tmp___0 ;

  {
#line 236
  tmp = tfp410_readb(dvo, addr, & ch1);
#line 236
  if ((int )tmp) {
#line 236
    tmp___0 = tfp410_readb(dvo, addr + 1, & ch2);
#line 236
    if ((int )tmp___0) {
#line 238
      return ((((int )ch2 << 8) & 65535) | (int )ch1);
    } else {

    }
  } else {

  }
#line 240
  return (-1);
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static bool tfp410_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct tfp410_priv *tfp ;
  int id ;
  void *tmp ;

  {
#line 251
  tmp = kzalloc(5UL, 208U);
#line 251
  tfp = (struct tfp410_priv *)tmp;
#line 252
  if ((unsigned long )tfp == (unsigned long )((struct tfp410_priv *)0)) {
#line 253
    return (0);
  } else {

  }
#line 255
  dvo->i2c_bus = i2cbus;
#line 256
  (dvo->i2c_bus)->slave_addr = (u8 )dvo->slave_addr;
#line 257
  dvo->dev_priv = (void *)tfp;
#line 258
  tfp->quiet = 1;
#line 260
  id = tfp410_getid(dvo, 0);
#line 260
  if (id != 332) {
#line 261
    if (drm_debug != 0U) {
#line 261
      printk("<7>[drm:%s] tfp410 not detected got VID %X: from %s Slave %d.\n", "tfp410_init",
             id, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 263
    goto out;
  } else {

  }
#line 266
  id = tfp410_getid(dvo, 2);
#line 266
  if (id != 1040) {
#line 267
    if (drm_debug != 0U) {
#line 267
      printk("<7>[drm:%s] tfp410 not detected got DID %X: from %s Slave %d.\n", "tfp410_init",
             id, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 269
    goto out;
  } else {

  }
#line 271
  tfp->quiet = 0;
#line 272
  return (1);
  out: 
#line 274
  kfree((void const   *)tfp);
#line 275
  return (0);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static enum drm_connector_status tfp410_detect(struct intel_dvo_device *dvo ) 
{ 
  enum drm_connector_status ret ;
  uint8_t ctl2 ;
  bool tmp ;

  {
#line 280
  ret = connector_status_disconnected;
#line 283
  tmp = tfp410_readb(dvo, 9, & ctl2);
#line 283
  if ((int )tmp) {
#line 284
    if (((int )ctl2 & 2) != 0) {
#line 285
      ret = connector_status_connected;
    } else {
#line 287
      ret = connector_status_disconnected;
    }
  } else {

  }
#line 290
  return (ret);
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static enum drm_mode_status tfp410_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 296
  return (MODE_OK);
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 308
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  uint8_t ctl1 ;
  bool tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = tfp410_readb(dvo, 8, & ctl1);
#line 316
  if (tmp) {
#line 316
    tmp___0 = 0;
  } else {
#line 316
    tmp___0 = 1;
  }
#line 316
  if (tmp___0) {
#line 317
    return;
  } else {

  }
#line 319
  if (mode == 0) {
#line 320
    ctl1 = (uint8_t )((unsigned int )ctl1 | 1U);
  } else {
#line 322
    ctl1 = (unsigned int )ctl1 & 254U;
  }
#line 324
  tfp410_writeb(dvo, 8, (int )ctl1);
#line 325
  return;
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;
  uint8_t val2 ;

  {
#line 331
  tfp410_readb(dvo, 4, & val);
#line 332
  if (drm_debug != 0U) {
#line 332
    printk("<7>[drm:%s] TFP410_REV: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 333
  tfp410_readb(dvo, 8, & val);
#line 334
  if (drm_debug != 0U) {
#line 334
    printk("<7>[drm:%s] TFP410_CTL1: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 335
  tfp410_readb(dvo, 9, & val);
#line 336
  if (drm_debug != 0U) {
#line 336
    printk("<7>[drm:%s] TFP410_CTL2: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 337
  tfp410_readb(dvo, 10, & val);
#line 338
  if (drm_debug != 0U) {
#line 338
    printk("<7>[drm:%s] TFP410_CTL3: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 339
  tfp410_readb(dvo, 11, & val);
#line 340
  if (drm_debug != 0U) {
#line 340
    printk("<7>[drm:%s] TFP410_USERCFG: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 341
  tfp410_readb(dvo, 50, & val);
#line 342
  if (drm_debug != 0U) {
#line 342
    printk("<7>[drm:%s] TFP410_DE_DLY: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 343
  tfp410_readb(dvo, 51, & val);
#line 344
  if (drm_debug != 0U) {
#line 344
    printk("<7>[drm:%s] TFP410_DE_CTL: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 345
  tfp410_readb(dvo, 52, & val);
#line 346
  if (drm_debug != 0U) {
#line 346
    printk("<7>[drm:%s] TFP410_DE_TOP: 0x%02X\n", "tfp410_dump_regs", (int )val);
  } else {

  }
#line 347
  tfp410_readb(dvo, 54, & val);
#line 348
  tfp410_readb(dvo, 55, & val2);
#line 349
  if (drm_debug != 0U) {
#line 349
    printk("<7>[drm:%s] TFP410_DE_CNT: 0x%02X%02X\n", "tfp410_dump_regs", (int )val2,
           (int )val);
  } else {

  }
#line 350
  tfp410_readb(dvo, 56, & val);
#line 351
  tfp410_readb(dvo, 57, & val2);
#line 352
  if (drm_debug != 0U) {
#line 352
    printk("<7>[drm:%s] TFP410_DE_LIN: 0x%02X%02X\n", "tfp410_dump_regs", (int )val2,
           (int )val);
  } else {

  }
#line 353
  tfp410_readb(dvo, 58, & val);
#line 354
  tfp410_readb(dvo, 59, & val2);
#line 355
  if (drm_debug != 0U) {
#line 355
    printk("<7>[drm:%s] TFP410_H_RES: 0x%02X%02X\n", "tfp410_dump_regs", (int )val2,
           (int )val);
  } else {

  }
#line 356
  tfp410_readb(dvo, 60, & val);
#line 357
  tfp410_readb(dvo, 61, & val2);
#line 358
  if (drm_debug != 0U) {
#line 358
    printk("<7>[drm:%s] TFP410_V_RES: 0x%02X%02X\n", "tfp410_dump_regs", (int )val2,
           (int )val);
  } else {

  }
#line 359
  return;
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_save(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 363
  tfp = (struct tfp410_priv *)dvo->dev_priv;
#line 365
  tmp = tfp410_readb(dvo, 8, & tfp->saved_reg.ctl1);
#line 365
  if (tmp) {
#line 365
    tmp___0 = 0;
  } else {
#line 365
    tmp___0 = 1;
  }
#line 365
  if (tmp___0) {
#line 366
    return;
  } else {

  }
#line 368
  tmp___1 = tfp410_readb(dvo, 9, & tfp->saved_reg.ctl2);
#line 368
  if (tmp___1) {
#line 368
    tmp___2 = 0;
  } else {
#line 368
    tmp___2 = 1;
  }
#line 368
  if (tmp___2) {
#line 369
    return;
  } else {

  }
#line 370
  return;
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_restore(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;

  {
#line 374
  tfp = (struct tfp410_priv *)dvo->dev_priv;
#line 377
  tfp410_writeb(dvo, 8, (int )tfp->saved_reg.ctl1 & 254);
#line 379
  tfp410_writeb(dvo, 9, (int )tfp->saved_reg.ctl2);
#line 380
  tfp410_writeb(dvo, 8, (int )tfp->saved_reg.ctl1);
#line 381
  return;
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
static void tfp410_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct tfp410_priv *tfp ;

  {
#line 385
  tfp = (struct tfp410_priv *)dvo->dev_priv;
#line 387
  if ((unsigned long )tfp != (unsigned long )((struct tfp410_priv *)0)) {
#line 388
    kfree((void const   *)tfp);
#line 389
    dvo->dev_priv = 0;
  } else {

  }
#line 391
  return;
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
struct intel_dvo_dev_ops tfp410_ops  = 
#line 393
     {& tfp410_init, 0, & tfp410_dpms, & tfp410_save, & tfp410_restore, (int (*)(struct intel_dvo_device * ,
                                                                               struct drm_display_mode * ))(& tfp410_mode_valid),
    0, 0, 0, & tfp410_mode_set, & tfp410_detect, 0, & tfp410_destroy, & tfp410_dump_regs};
#line 442 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv_main22_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_tfp410_mode_set_6_p2 ;
  int var_tfp410_dpms_7_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 898
  LDV_IN_INTERRUPT = 1;
#line 907
  ldv_initialize();
#line 911
  goto ldv_25078;
  ldv_25077: 
#line 914
  tmp = nondet_int();
#line 914
  switch (tmp) {
  case 0: 
#line 970
  ldv_handler_precall();
#line 971
  tfp410_init(var_group1, var_group2);
#line 978
  goto ldv_25067;
  case 1: 
#line 1033
  ldv_handler_precall();
#line 1034
  tfp410_detect(var_group1);
#line 1041
  goto ldv_25067;
  case 2: 
#line 1096
  ldv_handler_precall();
#line 1097
  tfp410_mode_valid(var_group1, var_group3);
#line 1104
  goto ldv_25067;
  case 3: 
#line 1159
  ldv_handler_precall();
#line 1160
  tfp410_mode_set(var_group1, var_group3, var_tfp410_mode_set_6_p2);
#line 1167
  goto ldv_25067;
  case 4: 
#line 1222
  ldv_handler_precall();
#line 1223
  tfp410_dpms(var_group1, var_tfp410_dpms_7_p1);
#line 1230
  goto ldv_25067;
  case 5: 
#line 1285
  ldv_handler_precall();
#line 1286
  tfp410_dump_regs(var_group1);
#line 1293
  goto ldv_25067;
  case 6: 
#line 1348
  ldv_handler_precall();
#line 1349
  tfp410_save(var_group1);
#line 1356
  goto ldv_25067;
  case 7: 
#line 1411
  ldv_handler_precall();
#line 1412
  tfp410_restore(var_group1);
#line 1419
  goto ldv_25067;
  case 8: 
#line 1474
  ldv_handler_precall();
#line 1475
  tfp410_destroy(var_group1);
#line 1482
  goto ldv_25067;
  default: ;
#line 1483
  goto ldv_25067;
  }
  ldv_25067: ;
  ldv_25078: 
#line 911
  tmp___0 = nondet_int();
#line 911
  if (tmp___0 != 0) {
#line 912
    goto ldv_25077;
  } else {

  }


#line 1492
  ldv_check_final_state();
#line 1495
  return;
}
}
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_821(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1504
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1506
  __ldv_spin_lock(ldv_func_arg1);
#line 1507
  return;
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_822(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1514
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1516
  __ldv_spin_unlock(ldv_func_arg1);
#line 1517
  return;
}
}
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
int ldv___ldv_spin_trylock_823(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1524
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1524
  ldv_func_res = tmp;
#line 1526
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1526
  return (tmp___0);
#line 1528
  return (ldv_func_res);
}
}
#line 1531 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_824(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1536
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1538
  __ldv_spin_lock(ldv_func_arg1);
#line 1539
  return;
}
}
#line 1541 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_825(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1546
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1548
  __ldv_spin_unlock(ldv_func_arg1);
#line 1549
  return;
}
}
#line 1551 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_826(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1556
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1558
  __ldv_spin_lock(ldv_func_arg1);
#line 1559
  return;
}
}
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_827(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1566
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1568
  __ldv_spin_unlock(ldv_func_arg1);
#line 1569
  return;
}
}
#line 1571 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_828(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1576
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1578
  __ldv_spin_unlock(ldv_func_arg1);
#line 1579
  return;
}
}
#line 1581 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_829(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1586
  ldv_spin_lock_dcache_lock();
#line 1588
  __ldv_spin_lock(ldv_func_arg1);
#line 1589
  return;
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_830(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1596
  ldv_spin_lock_d_lock_of_dentry();
#line 1598
  __ldv_spin_lock(ldv_func_arg1);
#line 1599
  return;
}
}
#line 1601 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_831(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1606
  ldv_spin_unlock_d_lock_of_dentry();
#line 1608
  __ldv_spin_unlock(ldv_func_arg1);
#line 1609
  return;
}
}
#line 1611 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_832(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1616
  ldv_spin_unlock_dcache_lock();
#line 1618
  __ldv_spin_unlock(ldv_func_arg1);
#line 1619
  return;
}
}
#line 1621 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_833(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1626
  ldv_spin_lock_d_lock_of_dentry();
#line 1628
  __ldv_spin_lock(ldv_func_arg1);
#line 1629
  return;
}
}
#line 1631 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_834(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1636
  ldv_spin_unlock_d_lock_of_dentry();
#line 1638
  __ldv_spin_unlock(ldv_func_arg1);
#line 1639
  return;
}
}
#line 1641 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_835(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1646
  ldv_spin_lock_i_lock_of_inode();
#line 1648
  __ldv_spin_lock(ldv_func_arg1);
#line 1649
  return;
}
}
#line 1651 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_836(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1656
  ldv_spin_unlock_i_lock_of_inode();
#line 1658
  __ldv_spin_unlock(ldv_func_arg1);
#line 1659
  return;
}
}
#line 1661 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_lock_837(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1666
  ldv_spin_lock_d_lock_of_dentry();
#line 1668
  __ldv_spin_lock(ldv_func_arg1);
#line 1669
  return;
}
}
#line 1671 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_tfp410.c.prepared"
void ldv___ldv_spin_unlock_838(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1676
  ldv_spin_unlock_d_lock_of_dentry();
#line 1678
  __ldv_spin_unlock(ldv_func_arg1);
#line 1679
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_857(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_860(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_862(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_865(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_866(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_869(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_871(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_873(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_858(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_861(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_863(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_864(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_867(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_868(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_870(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_872(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_874(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_859(spinlock_t *ldv_func_arg1 ) ;
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static bool sil164_readb(struct intel_dvo_device *dvo , int addr , uint8_t *ch ) 
{ 
  struct sil164_priv *sil ;
  struct intel_i2c_chan *i2cbus ;
  u8 out_buf[2U] ;
  u8 in_buf[2U] ;
  struct i2c_msg msgs[2U] ;
  int tmp ;

  {
#line 146
  sil = (struct sil164_priv *)dvo->dev_priv;
#line 147
  i2cbus = dvo->i2c_bus;
#line 151
  msgs[0].addr = (unsigned short )i2cbus->slave_addr;
#line 151
  msgs[0].flags = 0U;
#line 151
  msgs[0].len = 1U;
#line 151
  msgs[0].buf = (__u8 *)(& out_buf);
#line 151
  msgs[1].addr = (unsigned short )i2cbus->slave_addr;
#line 151
  msgs[1].flags = 1U;
#line 151
  msgs[1].len = 1U;
#line 151
  msgs[1].buf = (__u8 *)(& in_buf);
#line 166
  out_buf[0] = (u8 )addr;
#line 167
  out_buf[1] = 0U;
#line 169
  tmp = i2c_transfer(& i2cbus->adapter, (struct i2c_msg *)(& msgs), 2);
#line 169
  if (tmp == 2) {
#line 170
    *ch = in_buf[0];
#line 171
    return (1);
  } else {

  }
#line 174
  if (! sil->quiet) {
#line 175
    if (drm_debug != 0U) {
#line 175
      printk("<7>[drm:%s] Unable to read register 0x%02x from %s:%02x.\n", "sil164_readb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 178
  return (0);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static bool sil164_writeb(struct intel_dvo_device *dvo , int addr , uint8_t ch ) 
{ 
  struct sil164_priv *sil ;
  struct intel_i2c_chan *i2cbus ;
  uint8_t out_buf[2U] ;
  struct i2c_msg msg ;
  int tmp ;

  {
#line 183
  sil = (struct sil164_priv *)dvo->dev_priv;
#line 184
  i2cbus = dvo->i2c_bus;
#line 186
  msg.addr = (unsigned short )i2cbus->slave_addr;
#line 186
  msg.flags = 0U;
#line 186
  msg.len = 2U;
#line 186
  msg.buf = (__u8 *)(& out_buf);
#line 193
  out_buf[0] = (uint8_t )addr;
#line 194
  out_buf[1] = ch;
#line 196
  tmp = i2c_transfer(& i2cbus->adapter, & msg, 1);
#line 196
  if (tmp == 1) {
#line 197
    return (1);
  } else {

  }
#line 199
  if (! sil->quiet) {
#line 200
    if (drm_debug != 0U) {
#line 200
      printk("<7>[drm:%s] Unable to write register 0x%02x to %s:%d.\n", "sil164_writeb",
             addr, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
  } else {

  }
#line 204
  return (0);
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static bool sil164_init(struct intel_dvo_device *dvo , struct intel_i2c_chan *i2cbus ) 
{ 
  struct sil164_priv *sil ;
  unsigned char ch ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;

  {
#line 215
  tmp = kzalloc(7UL, 208U);
#line 215
  sil = (struct sil164_priv *)tmp;
#line 216
  if ((unsigned long )sil == (unsigned long )((struct sil164_priv *)0)) {
#line 217
    return (0);
  } else {

  }
#line 219
  dvo->i2c_bus = i2cbus;
#line 220
  (dvo->i2c_bus)->slave_addr = (u8 )dvo->slave_addr;
#line 221
  dvo->dev_priv = (void *)sil;
#line 222
  sil->quiet = 1;
#line 224
  tmp___0 = sil164_readb(dvo, 0, & ch);
#line 224
  if (tmp___0) {
#line 224
    tmp___1 = 0;
  } else {
#line 224
    tmp___1 = 1;
  }
#line 224
  if (tmp___1) {
#line 225
    goto out;
  } else {

  }
#line 227
  if ((unsigned int )ch != 1U) {
#line 228
    if (drm_debug != 0U) {
#line 228
      printk("<7>[drm:%s] sil164 not detected got %d: from %s Slave %d.\n", "sil164_init",
             (int )ch, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 230
    goto out;
  } else {

  }
#line 233
  tmp___2 = sil164_readb(dvo, 2, & ch);
#line 233
  if (tmp___2) {
#line 233
    tmp___3 = 0;
  } else {
#line 233
    tmp___3 = 1;
  }
#line 233
  if (tmp___3) {
#line 234
    goto out;
  } else {

  }
#line 236
  if ((unsigned int )ch != 6U) {
#line 237
    if (drm_debug != 0U) {
#line 237
      printk("<7>[drm:%s] sil164 not detected got %d: from %s Slave %d.\n", "sil164_init",
             (int )ch, (char *)(& i2cbus->adapter.name), (int )i2cbus->slave_addr);
    } else {

    }
#line 239
    goto out;
  } else {

  }
#line 241
  sil->quiet = 0;
#line 243
  if (drm_debug != 0U) {
#line 243
    printk("<7>[drm:%s] init sil164 dvo controller successfully!\n", "sil164_init");
  } else {

  }
#line 244
  return (1);
  out: 
#line 247
  kfree((void const   *)sil);
#line 248
  return (0);
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static enum drm_connector_status sil164_detect(struct intel_dvo_device *dvo ) 
{ 
  uint8_t reg9 ;

  {
#line 255
  sil164_readb(dvo, 9, & reg9);
#line 257
  if (((int )reg9 & 2) != 0) {
#line 258
    return (connector_status_connected);
  } else {
#line 260
    return (connector_status_disconnected);
  }
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static enum drm_mode_status sil164_mode_valid(struct intel_dvo_device *dvo , struct drm_display_mode *mode ) 
{ 


  {
#line 266
  return (MODE_OK);
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_mode_set(struct intel_dvo_device *dvo , struct drm_display_mode *mode ,
                            struct drm_display_mode *adjusted_mode ) 
{ 


  {
#line 284
  return;
}
}
#line 288 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_dpms(struct intel_dvo_device *dvo , int mode ) 
{ 
  int ret ;
  unsigned char ch ;
  bool tmp ;

  {
#line 293
  tmp = sil164_readb(dvo, 8, & ch);
#line 293
  ret = (int )tmp;
#line 294
  if (ret == 0) {
#line 295
    return;
  } else {

  }
#line 297
  if (mode == 0) {
#line 298
    ch = (unsigned int )ch | 1U;
  } else {
#line 300
    ch = (unsigned int )ch & 254U;
  }
#line 302
  sil164_writeb(dvo, 8, (int )ch);
#line 303
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_dump_regs(struct intel_dvo_device *dvo ) 
{ 
  uint8_t val ;

  {
#line 310
  sil164_readb(dvo, 6, & val);
#line 311
  if (drm_debug != 0U) {
#line 311
    printk("<7>[drm:%s] SIL164_FREQ_LO: 0x%02x\n", "sil164_dump_regs", (int )val);
  } else {

  }
#line 312
  sil164_readb(dvo, 7, & val);
#line 313
  if (drm_debug != 0U) {
#line 313
    printk("<7>[drm:%s] SIL164_FREQ_HI: 0x%02x\n", "sil164_dump_regs", (int )val);
  } else {

  }
#line 314
  sil164_readb(dvo, 8, & val);
#line 315
  if (drm_debug != 0U) {
#line 315
    printk("<7>[drm:%s] SIL164_REG8: 0x%02x\n", "sil164_dump_regs", (int )val);
  } else {

  }
#line 316
  sil164_readb(dvo, 9, & val);
#line 317
  if (drm_debug != 0U) {
#line 317
    printk("<7>[drm:%s] SIL164_REG9: 0x%02x\n", "sil164_dump_regs", (int )val);
  } else {

  }
#line 318
  sil164_readb(dvo, 12, & val);
#line 319
  if (drm_debug != 0U) {
#line 319
    printk("<7>[drm:%s] SIL164_REGC: 0x%02x\n", "sil164_dump_regs", (int )val);
  } else {

  }
#line 320
  return;
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_save(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;

  {
#line 324
  sil = (struct sil164_priv *)dvo->dev_priv;
#line 326
  tmp = sil164_readb(dvo, 8, & sil->save_regs.reg8);
#line 326
  if (tmp) {
#line 326
    tmp___0 = 0;
  } else {
#line 326
    tmp___0 = 1;
  }
#line 326
  if (tmp___0) {
#line 327
    return;
  } else {

  }
#line 329
  tmp___1 = sil164_readb(dvo, 9, & sil->save_regs.reg9);
#line 329
  if (tmp___1) {
#line 329
    tmp___2 = 0;
  } else {
#line 329
    tmp___2 = 1;
  }
#line 329
  if (tmp___2) {
#line 330
    return;
  } else {

  }
#line 332
  tmp___3 = sil164_readb(dvo, 12, & sil->save_regs.regc);
#line 332
  if (tmp___3) {
#line 332
    tmp___4 = 0;
  } else {
#line 332
    tmp___4 = 1;
  }
#line 332
  if (tmp___4) {
#line 333
    return;
  } else {

  }
#line 335
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_restore(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;

  {
#line 340
  sil = (struct sil164_priv *)dvo->dev_priv;
#line 343
  sil164_writeb(dvo, 8, (int )sil->save_regs.reg8 & 254);
#line 345
  sil164_writeb(dvo, 9, (int )sil->save_regs.reg9);
#line 346
  sil164_writeb(dvo, 12, (int )sil->save_regs.regc);
#line 347
  sil164_writeb(dvo, 8, (int )sil->save_regs.reg8);
#line 348
  return;
}
}
#line 350 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
static void sil164_destroy(struct intel_dvo_device *dvo ) 
{ 
  struct sil164_priv *sil ;

  {
#line 352
  sil = (struct sil164_priv *)dvo->dev_priv;
#line 354
  if ((unsigned long )sil != (unsigned long )((struct sil164_priv *)0)) {
#line 355
    kfree((void const   *)sil);
#line 356
    dvo->dev_priv = 0;
  } else {

  }
#line 358
  return;
}
}
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
struct intel_dvo_dev_ops sil164_ops  = 
#line 360
     {& sil164_init, 0, & sil164_dpms, & sil164_save, & sil164_restore, (int (*)(struct intel_dvo_device * ,
                                                                               struct drm_display_mode * ))(& sil164_mode_valid),
    0, 0, 0, & sil164_mode_set, & sil164_detect, 0, & sil164_destroy, & sil164_dump_regs};
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv_main23_sequence_infinite_withcheck_stateful(void) 
{ 
  struct intel_dvo_device *var_group1 ;
  struct intel_i2c_chan *var_group2 ;
  struct drm_display_mode *var_group3 ;
  struct drm_display_mode *var_sil164_mode_set_5_p2 ;
  int var_sil164_dpms_6_p1 ;
  int tmp ;
  int tmp___0 ;

  {
#line 694
  LDV_IN_INTERRUPT = 1;
#line 703
  ldv_initialize();
#line 707
  goto ldv_25072;
  ldv_25071: 
#line 710
  tmp = nondet_int();
#line 710
  switch (tmp) {
  case 0: 
#line 747
  ldv_handler_precall();
#line 748
  sil164_init(var_group1, var_group2);
#line 755
  goto ldv_25061;
  case 1: 
#line 791
  ldv_handler_precall();
#line 792
  sil164_detect(var_group1);
#line 799
  goto ldv_25061;
  case 2: 
#line 835
  ldv_handler_precall();
#line 836
  sil164_mode_valid(var_group1, var_group3);
#line 843
  goto ldv_25061;
  case 3: 
#line 879
  ldv_handler_precall();
#line 880
  sil164_mode_set(var_group1, var_group3, var_sil164_mode_set_5_p2);
#line 887
  goto ldv_25061;
  case 4: 
#line 923
  ldv_handler_precall();
#line 924
  sil164_dpms(var_group1, var_sil164_dpms_6_p1);
#line 931
  goto ldv_25061;
  case 5: 
#line 967
  ldv_handler_precall();
#line 968
  sil164_dump_regs(var_group1);
#line 975
  goto ldv_25061;
  case 6: 
#line 1011
  ldv_handler_precall();
#line 1012
  sil164_save(var_group1);
#line 1019
  goto ldv_25061;
  case 7: 
#line 1055
  ldv_handler_precall();
#line 1056
  sil164_restore(var_group1);
#line 1063
  goto ldv_25061;
  case 8: 
#line 1099
  ldv_handler_precall();
#line 1100
  sil164_destroy(var_group1);
#line 1107
  goto ldv_25061;
  default: ;
#line 1108
  goto ldv_25061;
  }
  ldv_25061: ;
  ldv_25072: 
#line 707
  tmp___0 = nondet_int();
#line 707
  if (tmp___0 != 0) {
#line 708
    goto ldv_25071;
  } else {

  }


#line 1117
  ldv_check_final_state();
#line 1120
  return;
}
}
#line 1124 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_857(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1129
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1131
  __ldv_spin_lock(ldv_func_arg1);
#line 1132
  return;
}
}
#line 1134 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_858(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1139
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1141
  __ldv_spin_unlock(ldv_func_arg1);
#line 1142
  return;
}
}
#line 1144 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
int ldv___ldv_spin_trylock_859(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1149
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1149
  ldv_func_res = tmp;
#line 1151
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1151
  return (tmp___0);
#line 1153
  return (ldv_func_res);
}
}
#line 1156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_860(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1161
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1163
  __ldv_spin_lock(ldv_func_arg1);
#line 1164
  return;
}
}
#line 1166 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_861(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1171
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1173
  __ldv_spin_unlock(ldv_func_arg1);
#line 1174
  return;
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_862(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1181
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1183
  __ldv_spin_lock(ldv_func_arg1);
#line 1184
  return;
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_863(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1191
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1193
  __ldv_spin_unlock(ldv_func_arg1);
#line 1194
  return;
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_864(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1201
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1203
  __ldv_spin_unlock(ldv_func_arg1);
#line 1204
  return;
}
}
#line 1206 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_865(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1211
  ldv_spin_lock_dcache_lock();
#line 1213
  __ldv_spin_lock(ldv_func_arg1);
#line 1214
  return;
}
}
#line 1216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_866(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1221
  ldv_spin_lock_d_lock_of_dentry();
#line 1223
  __ldv_spin_lock(ldv_func_arg1);
#line 1224
  return;
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_867(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1231
  ldv_spin_unlock_d_lock_of_dentry();
#line 1233
  __ldv_spin_unlock(ldv_func_arg1);
#line 1234
  return;
}
}
#line 1236 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_868(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1241
  ldv_spin_unlock_dcache_lock();
#line 1243
  __ldv_spin_unlock(ldv_func_arg1);
#line 1244
  return;
}
}
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_869(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1251
  ldv_spin_lock_d_lock_of_dentry();
#line 1253
  __ldv_spin_lock(ldv_func_arg1);
#line 1254
  return;
}
}
#line 1256 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_870(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1261
  ldv_spin_unlock_d_lock_of_dentry();
#line 1263
  __ldv_spin_unlock(ldv_func_arg1);
#line 1264
  return;
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_871(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1271
  ldv_spin_lock_i_lock_of_inode();
#line 1273
  __ldv_spin_lock(ldv_func_arg1);
#line 1274
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_872(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1281
  ldv_spin_unlock_i_lock_of_inode();
#line 1283
  __ldv_spin_unlock(ldv_func_arg1);
#line 1284
  return;
}
}
#line 1286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_lock_873(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1291
  ldv_spin_lock_d_lock_of_dentry();
#line 1293
  __ldv_spin_lock(ldv_func_arg1);
#line 1294
  return;
}
}
#line 1296 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/dvo_sil164.c.prepared"
void ldv___ldv_spin_unlock_874(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1301
  ldv_spin_unlock_d_lock_of_dentry();
#line 1303
  __ldv_spin_unlock(ldv_func_arg1);
#line 1304
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_893(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_896(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_898(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_901(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_902(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_905(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_907(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_909(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_911(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_894(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_897(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_899(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_900(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_903(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_904(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_906(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_908(spinlock_t *ldv_func_arg1 ) ;
#line 77
void ldv___ldv_spin_unlock_910(spinlock_t *ldv_func_arg1 ) ;
#line 81
void ldv___ldv_spin_unlock_912(spinlock_t *ldv_func_arg1 ) ;
#line 86
int ldv___ldv_spin_trylock_895(spinlock_t *ldv_func_arg1 ) ;
#line 332 "include/acpi/acpi_bus.h"
extern int register_acpi_notifier(struct notifier_block * ) ;
#line 333
extern int unregister_acpi_notifier(struct notifier_block * ) ;
#line 577 "include/linux/pci.h"
extern int pci_bus_read_config_dword(struct pci_bus * , unsigned int  , int  , u32 * ) ;
#line 583
extern int pci_bus_write_config_dword(struct pci_bus * , unsigned int  , int  , u32  ) ;
#line 594 "include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev *dev , int where , u32 *val ) 
{ 
  int tmp ;

  {
#line 597
  tmp = pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
#line 597
  return (tmp);
}
}
#line 607 "include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev *dev , int where , u32 val ) 
{ 
  int tmp ;

  {
#line 610
  tmp = pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
#line 610
  return (tmp);
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_backlight(struct drm_device *dev , u32 bclp ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 blc_pwm_ctl ;
  u32 blc_pwm_ctl2 ;

  {
#line 209
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 210
  asle = dev_priv->opregion.asle;
#line 213
  if ((int )bclp >= 0) {
#line 214
    return (8192U);
  } else {

  }
#line 216
  bclp = bclp & 2147483647U;
#line 217
  if (bclp > 255U) {
#line 218
    return (8192U);
  } else {

  }
#line 220
  blc_pwm_ctl = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 221
  blc_pwm_ctl = blc_pwm_ctl & 4294901760U;
#line 222
  blc_pwm_ctl2 = readl((void const volatile   *)dev_priv->regs + 397904U);
#line 224
  if ((blc_pwm_ctl2 & 1073741824U) != 0U) {
#line 225
    pci_write_config_dword(dev->pdev, 244, bclp);
  } else {
#line 227
    writel((bclp * 257U - 1U) | blc_pwm_ctl, (void volatile   *)dev_priv->regs + 397908U);
  }
#line 229
  asle->cblv = (bclp * 100U) / 255U | 2147483648U;
#line 231
  return (0U);
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_als_illum(struct drm_device *dev , u32 alsi ) 
{ 


  {
#line 238
  return (0U);
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_pwm_freq(struct drm_device *dev , u32 pfmb ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;
  u32 pwm ;

  {
#line 243
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 244
  if ((int )pfmb < 0) {
#line 245
    tmp = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 245
    blc_pwm_ctl = tmp;
#line 246
    pwm = pfmb & 2147483136U;
#line 247
    blc_pwm_ctl = blc_pwm_ctl & 65535U;
#line 248
    pwm = pwm >> 9;
  } else {

  }
#line 251
  return (0U);
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_pfit(struct drm_device *dev , u32 pfit ) 
{ 


  {
#line 258
  if ((int )pfit >= 0) {
#line 259
    return (32768U);
  } else {

  }
#line 260
  return (0U);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void opregion_asle_intr(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 asle_stat ;
  u32 asle_req ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
#line 265
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 266
  asle = dev_priv->opregion.asle;
#line 267
  asle_stat = 0U;
#line 270
  if ((unsigned long )asle == (unsigned long )((struct opregion_asle *)0)) {
#line 271
    return;
  } else {

  }
#line 273
  asle_req = asle->aslc & 15U;
#line 275
  if (asle_req == 0U) {
#line 276
    if (drm_debug != 0U) {
#line 276
      printk("<7>[drm:%s] non asle set request??\n", "opregion_asle_intr");
    } else {

    }
#line 277
    return;
  } else {

  }
#line 280
  if ((int )asle_req & 1) {
#line 281
    tmp = asle_set_als_illum(dev, asle->alsi);
#line 281
    asle_stat = tmp | asle_stat;
  } else {

  }
#line 283
  if ((asle_req & 2U) != 0U) {
#line 284
    tmp___0 = asle_set_backlight(dev, asle->bclp);
#line 284
    asle_stat = tmp___0 | asle_stat;
  } else {

  }
#line 286
  if ((asle_req & 4U) != 0U) {
#line 287
    tmp___1 = asle_set_pfit(dev, asle->pfit);
#line 287
    asle_stat = tmp___1 | asle_stat;
  } else {

  }
#line 289
  if ((asle_req & 8U) != 0U) {
#line 290
    tmp___2 = asle_set_pwm_freq(dev, asle->pfmb);
#line 290
    asle_stat = tmp___2 | asle_stat;
  } else {

  }
#line 292
  asle->aslc = asle_stat;
#line 293
  return;
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void opregion_enable_asle(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;

  {
#line 302
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 303
  asle = dev_priv->opregion.asle;
#line 305
  if ((unsigned long )asle != (unsigned long )((struct opregion_asle *)0)) {
#line 306
    if (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 309
      ldv___ldv_spin_lock_911(& dev_priv->user_irq_lock);
#line 310
      i915_enable_pipestat(dev_priv, 1, 4194304U);
#line 312
      ldv___ldv_spin_unlock_912(& dev_priv->user_irq_lock);
    } else {

    }
#line 316
    asle->tche = 15U;
#line 318
    asle->ardy = 1U;
  } else {

  }
#line 320
  return;
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static struct intel_opregion *system_opregion  ;
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static int intel_opregion_video_event(struct notifier_block *nb , unsigned long val ,
                                      void *data ) 
{ 
  struct opregion_acpi *acpi ;

  {
#line 340
  if ((unsigned long )system_opregion == (unsigned long )((struct intel_opregion *)0)) {
#line 341
    return (0);
  } else {

  }
#line 343
  acpi = system_opregion->acpi;
#line 344
  acpi->csts = 0U;
#line 346
  return (1);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static struct notifier_block intel_opregion_notifier  =    {& intel_opregion_video_event, 0, 0};
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
int intel_opregion_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;
  void *base ;
  u32 asls ;
  u32 mboxes ;
  int err ;
  int tmp ;

  {
#line 355
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 356
  opregion = & dev_priv->opregion;
#line 359
  err = 0;
#line 361
  pci_read_config_dword(dev->pdev, 252, & asls);
#line 362
  if (drm_debug != 0U) {
#line 362
    printk("<7>[drm:%s] graphic opregion physical addr: 0x%x\n", "intel_opregion_init",
           asls);
  } else {

  }
#line 363
  if (asls == 0U) {
#line 364
    if (drm_debug != 0U) {
#line 364
      printk("<7>[drm:%s] ACPI OpRegion not supported!\n", "intel_opregion_init");
    } else {

    }
#line 365
    return (-524);
  } else {

  }
#line 368
  base = ioremap((resource_size_t )asls, 8192UL);
#line 369
  if ((unsigned long )base == (unsigned long )((void *)0)) {
#line 370
    return (-12);
  } else {

  }
#line 372
  opregion->header = (struct opregion_header *)base;
#line 373
  tmp = memcmp((void const   *)(& (opregion->header)->signature), (void const   *)"IntelGraphicsMem",
               16UL);
#line 373
  if (tmp != 0) {
#line 374
    if (drm_debug != 0U) {
#line 374
      printk("<7>[drm:%s] opregion signature mismatch\n", "intel_opregion_init");
    } else {

    }
#line 375
    err = -22;
#line 376
    goto err_out;
  } else {

  }
#line 379
  mboxes = (opregion->header)->mboxes;
#line 380
  if ((int )mboxes & 1) {
#line 381
    if (drm_debug != 0U) {
#line 381
      printk("<7>[drm:%s] Public ACPI methods supported\n", "intel_opregion_init");
    } else {

    }
#line 382
    opregion->acpi = (struct opregion_acpi *)base + 256U;
  } else {
#line 384
    if (drm_debug != 0U) {
#line 384
      printk("<7>[drm:%s] Public ACPI methods not supported\n", "intel_opregion_init");
    } else {

    }
#line 385
    err = -524;
#line 386
    goto err_out;
  }
#line 388
  opregion->enabled = 1;
#line 390
  if ((mboxes & 2U) != 0U) {
#line 391
    if (drm_debug != 0U) {
#line 391
      printk("<7>[drm:%s] SWSCI supported\n", "intel_opregion_init");
    } else {

    }
#line 392
    opregion->swsci = (struct opregion_swsci *)base + 512U;
  } else {

  }
#line 394
  if ((mboxes & 4U) != 0U) {
#line 395
    if (drm_debug != 0U) {
#line 395
      printk("<7>[drm:%s] ASLE supported\n", "intel_opregion_init");
    } else {

    }
#line 396
    opregion->asle = (struct opregion_asle *)base + 768U;
  } else {

  }
#line 402
  (opregion->acpi)->csts = 0U;
#line 403
  (opregion->acpi)->drdy = 1U;
#line 405
  system_opregion = opregion;
#line 406
  register_acpi_notifier(& intel_opregion_notifier);
#line 408
  return (0);
  err_out: 
#line 411
  iounmap((void volatile   *)opregion->header);
#line 412
  opregion->header = 0;
#line 413
  return (err);
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void intel_opregion_free(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;

  {
#line 418
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 419
  opregion = & dev_priv->opregion;
#line 421
  if (opregion->enabled == 0) {
#line 422
    return;
  } else {

  }
#line 424
  (opregion->acpi)->drdy = 0U;
#line 426
  system_opregion = 0;
#line 427
  unregister_acpi_notifier(& intel_opregion_notifier);
#line 430
  iounmap((void volatile   *)opregion->header);
#line 431
  opregion->header = 0;
#line 432
  opregion->acpi = 0;
#line 433
  opregion->swsci = 0;
#line 434
  opregion->asle = 0;
#line 436
  opregion->enabled = 0;
#line 437
  return;
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv_main24_sequence_infinite_withcheck_stateful(void) 
{ 
  struct notifier_block *var_group1 ;
  unsigned long var_intel_opregion_video_event_6_p1 ;
  void *var_intel_opregion_video_event_6_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 539
  LDV_IN_INTERRUPT = 1;
#line 548
  ldv_initialize();
#line 552
  goto ldv_29235;
  ldv_29234: 
#line 555
  tmp = nondet_int();
#line 555
  switch (tmp) {
  case 0: 
#line 606
  ldv_handler_precall();
#line 607
  intel_opregion_video_event(var_group1, var_intel_opregion_video_event_6_p1, var_intel_opregion_video_event_6_p2);
#line 614
  goto ldv_29232;
  default: ;
#line 615
  goto ldv_29232;
  }
  ldv_29232: ;
  ldv_29235: 
#line 552
  tmp___0 = nondet_int();
#line 552
  if (tmp___0 != 0) {
#line 553
    goto ldv_29234;
  } else {

  }


#line 624
  ldv_check_final_state();
#line 627
  return;
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_893(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 636
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 638
  __ldv_spin_lock(ldv_func_arg1);
#line 639
  return;
}
}
#line 641 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_894(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 646
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 648
  __ldv_spin_unlock(ldv_func_arg1);
#line 649
  return;
}
}
#line 651 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
int ldv___ldv_spin_trylock_895(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 656
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 656
  ldv_func_res = tmp;
#line 658
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 658
  return (tmp___0);
#line 660
  return (ldv_func_res);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_896(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 668
  ldv_spin_lock_siglock_of_sighand_struct();
#line 670
  __ldv_spin_lock(ldv_func_arg1);
#line 671
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_897(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 678
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 680
  __ldv_spin_unlock(ldv_func_arg1);
#line 681
  return;
}
}
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_898(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 688
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 690
  __ldv_spin_lock(ldv_func_arg1);
#line 691
  return;
}
}
#line 693 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_899(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 698
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 700
  __ldv_spin_unlock(ldv_func_arg1);
#line 701
  return;
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_900(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 708
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 710
  __ldv_spin_unlock(ldv_func_arg1);
#line 711
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_901(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 718
  ldv_spin_lock_dcache_lock();
#line 720
  __ldv_spin_lock(ldv_func_arg1);
#line 721
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_902(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 728
  ldv_spin_lock_d_lock_of_dentry();
#line 730
  __ldv_spin_lock(ldv_func_arg1);
#line 731
  return;
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_903(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 738
  ldv_spin_unlock_d_lock_of_dentry();
#line 740
  __ldv_spin_unlock(ldv_func_arg1);
#line 741
  return;
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_904(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 748
  ldv_spin_unlock_dcache_lock();
#line 750
  __ldv_spin_unlock(ldv_func_arg1);
#line 751
  return;
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_905(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 758
  ldv_spin_lock_d_lock_of_dentry();
#line 760
  __ldv_spin_lock(ldv_func_arg1);
#line 761
  return;
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_906(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 768
  ldv_spin_unlock_d_lock_of_dentry();
#line 770
  __ldv_spin_unlock(ldv_func_arg1);
#line 771
  return;
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_907(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 778
  ldv_spin_lock_i_lock_of_inode();
#line 780
  __ldv_spin_lock(ldv_func_arg1);
#line 781
  return;
}
}
#line 783 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_908(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 788
  ldv_spin_unlock_i_lock_of_inode();
#line 790
  __ldv_spin_unlock(ldv_func_arg1);
#line 791
  return;
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_909(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 798
  ldv_spin_lock_d_lock_of_dentry();
#line 800
  __ldv_spin_lock(ldv_func_arg1);
#line 801
  return;
}
}
#line 803 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_910(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 808
  ldv_spin_unlock_d_lock_of_dentry();
#line 810
  __ldv_spin_unlock(ldv_func_arg1);
#line 811
  return;
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_lock_911(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 818
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 820
  __ldv_spin_lock(ldv_func_arg1);
#line 821
  return;
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv___ldv_spin_unlock_912(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 828
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 830
  __ldv_spin_unlock(ldv_func_arg1);
#line 831
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_933(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_936(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_938(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_941(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_942(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_945(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_947(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_949(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_934(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_937(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_939(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_940(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_943(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_944(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_946(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_948(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_950(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_935(spinlock_t *ldv_func_arg1 ) ;
#line 207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
__inline static void *compat_alloc_user_space(long len ) 
{ 
  struct pt_regs *regs ;
  struct task_struct *tmp ;

  {
#line 209
  tmp = get_current();
#line 209
  regs = (struct pt_regs *)(tmp->thread.sp0 + 0xffffffffffffffffUL);
#line 210
  return ((void *)(regs->sp - (unsigned long )len));
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 210 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void) ;
#line 1046 "include/drm/drmP.h"
extern long drm_compat_ioctl(struct file * , unsigned int  , unsigned long  ) ;
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_batchbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_batchbuffer32_t batchbuffer32 ;
  drm_i915_batchbuffer_t *batchbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 120
  tmp = copy_from_user((void *)(& batchbuffer32), (void const   *)arg, 24U);
#line 120
  if (tmp != 0UL) {
#line 122
    return (-14);
  } else {

  }
#line 124
  tmp___0 = compat_alloc_user_space(32L);
#line 124
  batchbuffer = (drm_i915_batchbuffer_t *)tmp___0;
#line 125
  tmp___1 = current_thread_info();
#line 125
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batchbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 125
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 132
  if (tmp___2 == 0L) {
#line 134
    return (-14);
  } else {
#line 126
    __pu_err = 0L;
#line 126
    switch (4UL) {
    case 1UL: 
#line 126
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 126
    goto ldv_24941;
    case 2UL: 
#line 126
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 126
    goto ldv_24941;
    case 4UL: 
#line 126
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 126
    goto ldv_24941;
    case 8UL: 
#line 126
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 126
    goto ldv_24941;
    default: 
#line 126
    __put_user_bad();
    }
    ldv_24941: ;
#line 132
    if (__pu_err != 0L) {
#line 134
      return (-14);
    } else {
#line 127
      __pu_err___0 = 0L;
#line 127
      switch (4UL) {
      case 1UL: 
#line 127
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 127
      goto ldv_24949;
      case 2UL: 
#line 127
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 127
      goto ldv_24949;
      case 4UL: 
#line 127
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 127
      goto ldv_24949;
      case 8UL: 
#line 127
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 127
      goto ldv_24949;
      default: 
#line 127
      __put_user_bad();
      }
      ldv_24949: ;
#line 132
      if (__pu_err___0 != 0L) {
#line 134
        return (-14);
      } else {
#line 128
        __pu_err___1 = 0L;
#line 128
        switch (4UL) {
        case 1UL: 
#line 128
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 128
        goto ldv_24957;
        case 2UL: 
#line 128
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 128
        goto ldv_24957;
        case 4UL: 
#line 128
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 128
        goto ldv_24957;
        case 8UL: 
#line 128
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 128
        goto ldv_24957;
        default: 
#line 128
        __put_user_bad();
        }
        ldv_24957: ;
#line 132
        if (__pu_err___1 != 0L) {
#line 134
          return (-14);
        } else {
#line 129
          __pu_err___2 = 0L;
#line 129
          switch (4UL) {
          case 1UL: 
#line 129
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 129
          goto ldv_24965;
          case 2UL: 
#line 129
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 129
          goto ldv_24965;
          case 4UL: 
#line 129
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 129
          goto ldv_24965;
          case 8UL: 
#line 129
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 129
          goto ldv_24965;
          default: 
#line 129
          __put_user_bad();
          }
          ldv_24965: ;
#line 132
          if (__pu_err___2 != 0L) {
#line 134
            return (-14);
          } else {
#line 130
            __pu_err___3 = 0L;
#line 130
            switch (4UL) {
            case 1UL: 
#line 130
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 130
            goto ldv_24973;
            case 2UL: 
#line 130
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 130
            goto ldv_24973;
            case 4UL: 
#line 130
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 130
            goto ldv_24973;
            case 8UL: 
#line 130
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 130
            goto ldv_24973;
            default: 
#line 130
            __put_user_bad();
            }
            ldv_24973: ;
#line 132
            if (__pu_err___3 != 0L) {
#line 134
              return (-14);
            } else {
#line 132
              __pu_err___4 = 0L;
#line 132
              switch (8UL) {
              case 1UL: 
#line 132
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 132
              goto ldv_24981;
              case 2UL: 
#line 132
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 132
              goto ldv_24981;
              case 4UL: 
#line 132
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 132
              goto ldv_24981;
              case 8UL: 
#line 132
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 132
              goto ldv_24981;
              default: 
#line 132
              __put_user_bad();
              }
              ldv_24981: ;
#line 132
              if (__pu_err___4 != 0L) {
#line 134
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 136
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864643U, (unsigned long )batchbuffer);
#line 136
  return (tmp___3);
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_cmdbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_cmdbuffer32_t cmdbuffer32 ;
  drm_i915_cmdbuffer_t *cmdbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 156
  tmp = copy_from_user((void *)(& cmdbuffer32), (void const   *)arg, 24U);
#line 156
  if (tmp != 0UL) {
#line 158
    return (-14);
  } else {

  }
#line 160
  tmp___0 = compat_alloc_user_space(32L);
#line 160
  cmdbuffer = (drm_i915_cmdbuffer_t *)tmp___0;
#line 161
  tmp___1 = current_thread_info();
#line 161
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 161
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 168
  if (tmp___2 == 0L) {
#line 170
    return (-14);
  } else {
#line 162
    __pu_err = 0L;
#line 162
    switch (8UL) {
    case 1UL: 
#line 162
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_25007;
    case 2UL: 
#line 162
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_25007;
    case 4UL: 
#line 162
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_25007;
    case 8UL: 
#line 162
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_25007;
    default: 
#line 162
    __put_user_bad();
    }
    ldv_25007: ;
#line 168
    if (__pu_err != 0L) {
#line 170
      return (-14);
    } else {
#line 164
      __pu_err___0 = 0L;
#line 164
      switch (4UL) {
      case 1UL: 
#line 164
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 164
      goto ldv_25015;
      case 2UL: 
#line 164
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 164
      goto ldv_25015;
      case 4UL: 
#line 164
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 164
      goto ldv_25015;
      case 8UL: 
#line 164
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 164
      goto ldv_25015;
      default: 
#line 164
      __put_user_bad();
      }
      ldv_25015: ;
#line 168
      if (__pu_err___0 != 0L) {
#line 170
        return (-14);
      } else {
#line 165
        __pu_err___1 = 0L;
#line 165
        switch (4UL) {
        case 1UL: 
#line 165
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 165
        goto ldv_25023;
        case 2UL: 
#line 165
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 165
        goto ldv_25023;
        case 4UL: 
#line 165
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 165
        goto ldv_25023;
        case 8UL: 
#line 165
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 165
        goto ldv_25023;
        default: 
#line 165
        __put_user_bad();
        }
        ldv_25023: ;
#line 168
        if (__pu_err___1 != 0L) {
#line 170
          return (-14);
        } else {
#line 166
          __pu_err___2 = 0L;
#line 166
          switch (4UL) {
          case 1UL: 
#line 166
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 166
          goto ldv_25031;
          case 2UL: 
#line 166
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 166
          goto ldv_25031;
          case 4UL: 
#line 166
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 166
          goto ldv_25031;
          case 8UL: 
#line 166
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 166
          goto ldv_25031;
          default: 
#line 166
          __put_user_bad();
          }
          ldv_25031: ;
#line 168
          if (__pu_err___2 != 0L) {
#line 170
            return (-14);
          } else {
#line 167
            __pu_err___3 = 0L;
#line 167
            switch (4UL) {
            case 1UL: 
#line 167
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 167
            goto ldv_25039;
            case 2UL: 
#line 167
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 167
            goto ldv_25039;
            case 4UL: 
#line 167
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 167
            goto ldv_25039;
            case 8UL: 
#line 167
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 167
            goto ldv_25039;
            default: 
#line 167
            __put_user_bad();
            }
            ldv_25039: ;
#line 168
            if (__pu_err___3 != 0L) {
#line 170
              return (-14);
            } else {
#line 168
              __pu_err___4 = 0L;
#line 168
              switch (8UL) {
              case 1UL: 
#line 168
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 168
              goto ldv_25047;
              case 2UL: 
#line 168
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 168
              goto ldv_25047;
              case 4UL: 
#line 168
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 168
              goto ldv_25047;
              case 8UL: 
#line 168
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 168
              goto ldv_25047;
              default: 
#line 168
              __put_user_bad();
              }
              ldv_25047: ;
#line 168
              if (__pu_err___4 != 0L) {
#line 170
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 172
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864651U, (unsigned long )cmdbuffer);
#line 172
  return (tmp___3);
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_irq_emit(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_irq_emit32_t req32 ;
  drm_i915_irq_emit_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  int tmp___3 ;

  {
#line 186
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 4U);
#line 186
  if (tmp != 0UL) {
#line 187
    return (-14);
  } else {

  }
#line 189
  tmp___0 = compat_alloc_user_space(8L);
#line 189
  request = (drm_i915_irq_emit_t *)tmp___0;
#line 190
  tmp___1 = current_thread_info();
#line 190
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (8L), "rm" (tmp___1->addr_limit.seg));
#line 190
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 191
  if (tmp___2 == 0L) {
#line 193
    return (-14);
  } else {
#line 191
    __pu_err = 0L;
#line 191
    switch (8UL) {
    case 1UL: 
#line 191
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 191
    goto ldv_25068;
    case 2UL: 
#line 191
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 191
    goto ldv_25068;
    case 4UL: 
#line 191
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 191
    goto ldv_25068;
    case 8UL: 
#line 191
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 191
    goto ldv_25068;
    default: 
#line 191
    __put_user_bad();
    }
    ldv_25068: ;
#line 191
    if (__pu_err != 0L) {
#line 193
      return (-14);
    } else {

    }
  }
#line 195
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3221775428U, (unsigned long )request);
#line 195
  return (tmp___3);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_getparam(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_getparam32_t req32 ;
  drm_i915_getparam_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  int tmp___3 ;

  {
#line 209
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 8U);
#line 209
  if (tmp != 0UL) {
#line 210
    return (-14);
  } else {

  }
#line 212
  tmp___0 = compat_alloc_user_space(16L);
#line 212
  request = (drm_i915_getparam_t *)tmp___0;
#line 213
  tmp___1 = current_thread_info();
#line 213
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (16L), "rm" (tmp___1->addr_limit.seg));
#line 213
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 215
  if (tmp___2 == 0L) {
#line 217
    return (-14);
  } else {
#line 214
    __pu_err = 0L;
#line 214
    switch (4UL) {
    case 1UL: 
#line 214
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 214
    goto ldv_25090;
    case 2UL: 
#line 214
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 214
    goto ldv_25090;
    case 4UL: 
#line 214
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 214
    goto ldv_25090;
    case 8UL: 
#line 214
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 214
    goto ldv_25090;
    default: 
#line 214
    __put_user_bad();
    }
    ldv_25090: ;
#line 215
    if (__pu_err != 0L) {
#line 217
      return (-14);
    } else {
#line 215
      __pu_err___0 = 0L;
#line 215
      switch (8UL) {
      case 1UL: 
#line 215
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 215
      goto ldv_25098;
      case 2UL: 
#line 215
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 215
      goto ldv_25098;
      case 4UL: 
#line 215
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 215
      goto ldv_25098;
      case 8UL: 
#line 215
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 215
      goto ldv_25098;
      default: 
#line 215
      __put_user_bad();
      }
      ldv_25098: ;
#line 215
      if (__pu_err___0 != 0L) {
#line 217
        return (-14);
      } else {

      }
    }
  }
#line 219
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222299718U, (unsigned long )request);
#line 219
  return (tmp___3);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_alloc(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_mem_alloc32_t req32 ;
  drm_i915_mem_alloc_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  int tmp___3 ;

  {
#line 236
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 16U);
#line 236
  if (tmp != 0UL) {
#line 237
    return (-14);
  } else {

  }
#line 239
  tmp___0 = compat_alloc_user_space(24L);
#line 239
  request = (drm_i915_mem_alloc_t *)tmp___0;
#line 240
  tmp___1 = current_thread_info();
#line 240
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (24L), "rm" (tmp___1->addr_limit.seg));
#line 240
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 244
  if (tmp___2 == 0L) {
#line 246
    return (-14);
  } else {
#line 241
    __pu_err = 0L;
#line 241
    switch (4UL) {
    case 1UL: 
#line 241
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 241
    goto ldv_25122;
    case 2UL: 
#line 241
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 241
    goto ldv_25122;
    case 4UL: 
#line 241
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 241
    goto ldv_25122;
    case 8UL: 
#line 241
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 241
    goto ldv_25122;
    default: 
#line 241
    __put_user_bad();
    }
    ldv_25122: ;
#line 244
    if (__pu_err != 0L) {
#line 246
      return (-14);
    } else {
#line 242
      __pu_err___0 = 0L;
#line 242
      switch (4UL) {
      case 1UL: 
#line 242
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 242
      goto ldv_25130;
      case 2UL: 
#line 242
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 242
      goto ldv_25130;
      case 4UL: 
#line 242
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 242
      goto ldv_25130;
      case 8UL: 
#line 242
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 242
      goto ldv_25130;
      default: 
#line 242
      __put_user_bad();
      }
      ldv_25130: ;
#line 244
      if (__pu_err___0 != 0L) {
#line 246
        return (-14);
      } else {
#line 243
        __pu_err___1 = 0L;
#line 243
        switch (4UL) {
        case 1UL: 
#line 243
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 243
        goto ldv_25138;
        case 2UL: 
#line 243
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 243
        goto ldv_25138;
        case 4UL: 
#line 243
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 243
        goto ldv_25138;
        case 8UL: 
#line 243
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 243
        goto ldv_25138;
        default: 
#line 243
        __put_user_bad();
        }
        ldv_25138: ;
#line 244
        if (__pu_err___1 != 0L) {
#line 246
          return (-14);
        } else {
#line 244
          __pu_err___2 = 0L;
#line 244
          switch (8UL) {
          case 1UL: 
#line 244
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 244
          goto ldv_25146;
          case 2UL: 
#line 244
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 244
          goto ldv_25146;
          case 4UL: 
#line 244
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 244
          goto ldv_25146;
          case 8UL: 
#line 244
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 244
          goto ldv_25146;
          default: 
#line 244
          __put_user_bad();
          }
          ldv_25146: ;
#line 244
          if (__pu_err___2 != 0L) {
#line 246
            return (-14);
          } else {

          }
        }
      }
    }
  }
#line 248
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222824008U, (unsigned long )request);
#line 248
  return (tmp___3);
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
drm_ioctl_compat_t *i915_compat_ioctls[12U]  = 
#line 252
  {      0,      0,      0,      & compat_i915_batchbuffer, 
        & compat_i915_irq_emit,      0,      & compat_i915_getparam,      0, 
        & compat_i915_alloc,      0,      0,      & compat_i915_cmdbuffer};
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  unsigned int nr ;
  drm_ioctl_compat_t *fn ;
  int ret ;
  long tmp ;

  {
#line 271
  nr = cmd & 255U;
#line 272
  fn = 0;
#line 275
  if (nr <= 63U) {
#line 276
    tmp = drm_compat_ioctl(filp, cmd, arg);
#line 276
    return (tmp);
  } else {

  }
#line 278
  if (nr <= 75U) {
#line 279
    fn = i915_compat_ioctls[nr - 64U];
  } else {

  }
#line 281
  lock_kernel();
#line 282
  if ((unsigned long )fn != (unsigned long )((drm_ioctl_compat_t *)0)) {
#line 283
    ret = (*fn)(filp, cmd, arg);
  } else {
#line 285
    ret = drm_ioctl((filp->f_path.dentry)->d_inode, filp, cmd, arg);
  }
#line 286
  unlock_kernel();
#line 288
  return ((long )ret);
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_933(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 296
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 298
  __ldv_spin_lock(ldv_func_arg1);
#line 299
  return;
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_934(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 306
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 308
  __ldv_spin_unlock(ldv_func_arg1);
#line 309
  return;
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
int ldv___ldv_spin_trylock_935(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 316
  ldv_func_res = tmp;
#line 318
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 318
  return (tmp___0);
#line 320
  return (ldv_func_res);
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_936(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 328
  ldv_spin_lock_siglock_of_sighand_struct();
#line 330
  __ldv_spin_lock(ldv_func_arg1);
#line 331
  return;
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_937(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 338
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 340
  __ldv_spin_unlock(ldv_func_arg1);
#line 341
  return;
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_938(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 348
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 350
  __ldv_spin_lock(ldv_func_arg1);
#line 351
  return;
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_939(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 358
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 360
  __ldv_spin_unlock(ldv_func_arg1);
#line 361
  return;
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_940(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 368
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 370
  __ldv_spin_unlock(ldv_func_arg1);
#line 371
  return;
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_941(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 378
  ldv_spin_lock_dcache_lock();
#line 380
  __ldv_spin_lock(ldv_func_arg1);
#line 381
  return;
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_942(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 388
  ldv_spin_lock_d_lock_of_dentry();
#line 390
  __ldv_spin_lock(ldv_func_arg1);
#line 391
  return;
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_943(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 398
  ldv_spin_unlock_d_lock_of_dentry();
#line 400
  __ldv_spin_unlock(ldv_func_arg1);
#line 401
  return;
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_944(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 408
  ldv_spin_unlock_dcache_lock();
#line 410
  __ldv_spin_unlock(ldv_func_arg1);
#line 411
  return;
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_945(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 418
  ldv_spin_lock_d_lock_of_dentry();
#line 420
  __ldv_spin_lock(ldv_func_arg1);
#line 421
  return;
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_946(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 428
  ldv_spin_unlock_d_lock_of_dentry();
#line 430
  __ldv_spin_unlock(ldv_func_arg1);
#line 431
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_947(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 438
  ldv_spin_lock_i_lock_of_inode();
#line 440
  __ldv_spin_lock(ldv_func_arg1);
#line 441
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_948(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 448
  ldv_spin_unlock_i_lock_of_inode();
#line 450
  __ldv_spin_unlock(ldv_func_arg1);
#line 451
  return;
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_949(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 458
  ldv_spin_lock_d_lock_of_dentry();
#line 460
  __ldv_spin_lock(ldv_func_arg1);
#line 461
  return;
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_950(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 468
  ldv_spin_unlock_d_lock_of_dentry();
#line 470
  __ldv_spin_unlock(ldv_func_arg1);
#line 471
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 139
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_d_lock_of_dentry = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 148
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_d_lock_of_dentry = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_d_lock_of_dentry = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 183
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_d_lock_of_dentry = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_dcache_lock  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_dcache_lock(void) 
{ 


  {
#line 264
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_dcache_lock = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_dcache_lock(void) 
{ 


  {
#line 273
  if (ldv_spin_dcache_lock == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_dcache_lock = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_dcache_lock = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_dcache_lock(void) 
{ 


  {
#line 308
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_dcache_lock == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_dcache_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_dcache_lock();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_dcache_lock(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_dcache_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_dcache_lock = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 389
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_i_lock_of_inode = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 398
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_i_lock_of_inode = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_i_lock_of_inode = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 433
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_i_lock_of_inode = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 514
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 523
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 558
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 639
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_siglock_of_sighand_struct = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 648
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_siglock_of_sighand_struct = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_siglock_of_sighand_struct = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 683
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_siglock_of_sighand_struct = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_user_irq_lock_of_drm_i915_private  ;
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 764
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 764
    ldv_error();
  }
#line 766
  ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 773
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 2) {

  } else {
#line 773
    ldv_error();
  }
#line 775
  ldv_spin_user_irq_lock_of_drm_i915_private = 1;
#line 776
  return;
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 784
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 787
  is_spin_held_by_another_thread = ldv_undef_int();
#line 790
  if (is_spin_held_by_another_thread) {
#line 793
    return (0);
  } else {
#line 798
    ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 800
    return (1);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 808
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 808
    ldv_error();
  }
#line 809
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 817
  is_spin_held_by_another_thread = ldv_undef_int();
#line 820
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1 && ! is_spin_held_by_another_thread) {
#line 823
    return (0);
  } else {
#line 828
    return (1);
  }
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 836
  tmp = ldv_spin_is_locked_user_irq_lock_of_drm_i915_private();
#line 836
  if (tmp) {
#line 836
    tmp___0 = 0;
  } else {
#line 836
    tmp___0 = 1;
  }
#line 836
  return (tmp___0);
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_contended ;

  {
#line 845
  is_spin_contended = ldv_undef_int();
#line 848
  if (is_spin_contended) {
#line 851
    return (0);
  } else {
#line 856
    return (1);
  }
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 866
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 866
    ldv_error();
  }
#line 869
  atomic_value_after_dec = ldv_undef_int();
#line 872
  if (atomic_value_after_dec == 0) {
#line 875
    ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 877
    return (1);
  } else {

  }
#line 881
  return (0);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 888
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 890
  ldv_spin_d_lock_of_dentry = 1;
#line 892
  ldv_spin_dcache_lock = 1;
#line 894
  ldv_spin_i_lock_of_inode = 1;
#line 896
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 898
  ldv_spin_siglock_of_sighand_struct = 1;
#line 900
  ldv_spin_user_irq_lock_of_drm_i915_private = 1;
#line 901
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/36/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 907
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 907
    ldv_error();
  }
#line 909
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 909
    ldv_error();
  }
#line 911
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 911
    ldv_error();
  }
#line 913
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 913
    ldv_error();
  }
#line 915
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 917
    ldv_error();
  }
#line 919
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 919
    ldv_error();
  }
#line 920
  return;
}
}
