/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 172 "include/linux/types.h"
typedef __u16 __be16;
#line 174 "include/linux/types.h"
typedef __u32 __be32;
#line 179 "include/linux/types.h"
typedef __u32 __wsum;
#line 182 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 186 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 191 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 200 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 200 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 121 "include/linux/kernel.h"
struct completion;
#line 122
struct pt_regs;
#line 227
struct pid;
#line 753
struct timespec;
#line 754
struct compat_timespec;
#line 755 "include/linux/kernel.h"
struct __anonstruct_ldv_1641_9 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 755 "include/linux/kernel.h"
struct __anonstruct_futex_10 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 755 "include/linux/kernel.h"
struct __anonstruct_nanosleep_11 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 755
struct pollfd;
#line 755 "include/linux/kernel.h"
struct __anonstruct_poll_12 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 755 "include/linux/kernel.h"
union __anonunion_ldv_1664_8 {
   struct __anonstruct_ldv_1641_9 ldv_1641 ;
   struct __anonstruct_futex_10 futex ;
   struct __anonstruct_nanosleep_11 nanosleep ;
   struct __anonstruct_poll_12 poll ;
};
#line 755 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1664_8 ldv_1664 ;
};
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 21 "include/asm-generic/getorder.h"
struct task_struct;
#line 22
struct exec_domain;
#line 23
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1914_13 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1914_13 ldv_1914 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2132_20 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2147_21 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2148_19 {
   struct __anonstruct_ldv_2132_20 ldv_2132 ;
   struct __anonstruct_ldv_2147_21 ldv_2147 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2148_19 ldv_2148 ;
};
#line 122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct thread_struct;
#line 124
struct cpumask;
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct paravirt_callee_save {
   void *func ;
};
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 315
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4715_25 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4721_26 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4722_24 {
   struct __anonstruct_ldv_4715_25 ldv_4715 ;
   struct __anonstruct_ldv_4721_26 ldv_4721 ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4731_27 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4722_24 ldv_4722 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4731_27 ldv_4731 ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_29 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_29 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 572 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 176 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 551 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5721_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5722_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5721_32 ldv_5721 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5722_31 ldv_5722 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 267 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 641 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 757 "include/linux/mmzone.h"
struct ctl_table;
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 25 "include/linux/ioport.h"
struct pci_dev;
#line 174
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   unsigned long wakeup_count ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 200 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 311 "include/linux/topology.h"
struct vm_area_struct;
#line 35 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct kobject;
#line 444
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 445 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 38 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 67 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 103 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 121
struct sysfs_dirent;
#line 186 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106
struct kobj_ns_type_operations;
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 114 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 121 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 138
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 144
struct sock;
#line 145 "include/linux/kobject.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 173 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 248
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_11359_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_11359_110 ldv_11359 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 518 "include/linux/rcupdate.h"
struct tracepoint;
#line 519 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 28 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 87 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 383
struct module_sect_attrs;
#line 383
struct module_notes_attrs;
#line 383
struct ftrace_event_call;
#line 383 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 518
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 157 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 187
struct class_attribute;
#line 187 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 217
struct device_type;
#line 256 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 307 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 334 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 395 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 404
struct dma_coherent_mem;
#line 404 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 69 "include/linux/io.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 17
struct hotplug_slot;
#line 17 "include/linux/irqreturn.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 117 "include/linux/pci.h"
typedef int pci_power_t;
#line 143 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 144
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 169 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 184 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 222
struct pcie_link_state;
#line 223
struct pci_vpd;
#line 224
struct pci_sriov;
#line 225
struct pci_ats;
#line 226
struct proc_dir_entry;
#line 226
struct pci_driver;
#line 226 "include/linux/pci.h"
union __anonunion_ldv_13595_112 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 226 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char pme_interrupt : 1 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char wakeup_prepared : 1 ;
   unsigned int d3_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[18U] ;
   resource_size_t fw_addr[18U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char needs_freset : 1 ;
   unsigned char state_saved : 1 ;
   unsigned char is_physfn : 1 ;
   unsigned char is_virtfn : 1 ;
   unsigned char reset_fn : 1 ;
   unsigned char is_hotplug_bridge : 1 ;
   unsigned char __aer_firmware_first_valid : 1 ;
   unsigned char __aer_firmware_first : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[18U] ;
   struct bin_attribute *res_attr_wc[18U] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
   union __anonunion_ldv_13595_112 ldv_13595 ;
   struct pci_ats *ats ;
};
#line 399
struct pci_ops;
#line 399 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 451 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 486 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 499 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 508 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 536 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 915 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 1047 "include/linux/pci.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 168
struct prio_tree_node;
#line 168 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 115
struct address_space;
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_14423_114 {
   u16 inuse ;
   u16 objects ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_14424_113 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14423_114 ldv_14423 ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_14429_116 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_14432_115 {
   struct __anonstruct_ldv_14429_116 ldv_14429 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_14436_117 {
   unsigned long index ;
   void *freelist ;
};
#line 116 "include/linux/prio_tree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_14424_113 ldv_14424 ;
   union __anonunion_ldv_14432_115 ldv_14432 ;
   union __anonunion_ldv_14436_117 ldv_14436 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_119 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_118 {
   struct __anonstruct_vm_set_119 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_118 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 313
struct file_ra_state;
#line 314
struct user_struct;
#line 315
struct writeback_control;
#line 161 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 178 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 227
struct inode;
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_121 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_121 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_123 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_124 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_125 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_126 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_127 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_128 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_122 {
   int _pad[28U] ;
   struct __anonstruct__kill_123 _kill ;
   struct __anonstruct__timer_124 _timer ;
   struct __anonstruct__rt_125 _rt ;
   struct __anonstruct__sigchld_126 _sigchld ;
   struct __anonstruct__sigfault_127 _sigfault ;
   struct __anonstruct__sigpoll_128 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_122 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 380
struct vfsmount;
#line 381 "include/linux/signal.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 14 "include/linux/path.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 21
struct pid_namespace;
#line 21 "include/linux/path.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_131 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_131 seccomp_t;
#line 408 "include/linux/rculist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 76
struct hrtimer_clock_base;
#line 77
struct hrtimer_cpu_base;
#line 86
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 91 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct cred;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_20339_132 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_133 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_134 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_20339_132 ldv_20339 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_133 type_data ;
   union __anonunion_payload_134 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 370
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct kioctx;
#line 55 "include/linux/uio.h"
union __anonunion_ki_obj_135 {
   void *user ;
   struct task_struct *tsk ;
};
#line 55
struct eventfd_ctx;
#line 55 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_135 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 411 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 453 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 461 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 468 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 485 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 521
struct tty_struct;
#line 521
struct taskstats;
#line 521
struct tty_audit_buf;
#line 521 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 667 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 709
struct backing_dev_info;
#line 710
struct reclaim_state;
#line 711 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 728 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1000
struct io_context;
#line 1022
struct pipe_inode_info;
#line 1024
struct rq;
#line 1025 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1087 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1092 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1127 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1153
struct rt_rq;
#line 1153 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1170
struct mem_cgroup;
#line 1170 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1506
struct files_struct;
#line 1506
struct irqaction;
#line 1506
struct css_set;
#line 1506
struct compat_robust_list_head;
#line 1506 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_136 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_136 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_137 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_137 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_138 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_138 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_139 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_139 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_140 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_140 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_141 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_141 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_142 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_142 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_143 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_143 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_144 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_145 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_144 ifr_ifrn ;
   union __anonunion_ifr_ifru_145 ifr_ifru ;
};
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct net;
#line 181
struct fasync_struct;
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 746
struct net_device;
#line 747 "include/linux/dmaengine.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_23361_150 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_23362_149 {
   __wsum csum ;
   struct __anonstruct_ldv_23361_150 ldv_23361 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_23392_151 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_23362_149 ldv_23362 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_23392_151 ldv_23392 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352
struct file_operations;
#line 58 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 33 "include/linux/pm_qos_params.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_152 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_153 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_152 h_u ;
   union __anonunion_m_u_153 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_154 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_155 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_154 h_u ;
   union __anonunion_m_u_155 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_166 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_166 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct kstatfs;
#line 419 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 569 "include/linux/fs.h"
union __anonunion_arg_168 {
   char *buf ;
   void *data ;
};
#line 569 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_167 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_168 arg ;
   int error ;
};
#line 569 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_167 read_descriptor_t;
#line 572 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 621 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 643
struct hd_struct;
#line 643
struct gendisk;
#line 643 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 712
struct posix_acl;
#line 713
struct inode_operations;
#line 713
struct file_lock;
#line 713
struct cdev;
#line 713 "include/linux/fs.h"
union __anonunion_ldv_26934_169 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 713 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_26934_169 ldv_26934 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 881 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 889 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 912 "include/linux/fs.h"
union __anonunion_f_u_170 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 912 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_170 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1036 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1037 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1042 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_172 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_171 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_172 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_171 fl_u ;
};
#line 1141 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1320
struct file_system_type;
#line 1320
struct super_operations;
#line 1320
struct xattr_handler;
#line 1320
struct mtd_info;
#line 1320 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1436 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1475 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1515 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1558 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1736 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 17 "include/net/netns/x_tables.h"
struct hlist_nulls_node;
#line 17 "include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 86
struct ip_conntrack_stat;
#line 86 "include/linux/list_nulls.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 94 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 428 "include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long  ) ;
   unsigned long data ;
};
#line 2272 "include/linux/netdevice.h"
struct hdlc_proto {
   int (*open)(struct net_device * ) ;
   void (*close)(struct net_device * ) ;
   void (*start)(struct net_device * ) ;
   void (*stop)(struct net_device * ) ;
   void (*detach)(struct net_device * ) ;
   int (*ioctl)(struct net_device * , struct ifreq * ) ;
   __be16 (*type_trans)(struct sk_buff * , struct net_device * ) ;
   int (*netif_rx)(struct sk_buff * ) ;
   netdev_tx_t (*xmit)(struct sk_buff * , struct net_device * ) ;
   struct module *module ;
   struct hdlc_proto *next ;
};
#line 45 "include/linux/hdlc.h"
struct hdlc_device {
   int (*attach)(struct net_device * , unsigned short  , unsigned short  ) ;
   netdev_tx_t (*xmit)(struct sk_buff * , struct net_device * ) ;
   struct hdlc_proto  const  *proto ;
   int carrier ;
   int open ;
   spinlock_t state_lock ;
   void *state ;
   void *priv ;
};
#line 63 "include/linux/hdlc.h"
typedef struct hdlc_device hdlc_device;
#line 129 "include/linux/hdlc.h"
struct fstioc_write {
   unsigned int size ;
   unsigned int offset ;
   unsigned char data[0U] ;
};
#line 74 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/net/wan/farsync.h"
struct fstioc_info {
   unsigned int valid ;
   unsigned int nports ;
   unsigned int type ;
   unsigned int state ;
   unsigned int index ;
   unsigned int smcFirmwareVersion ;
   unsigned long kernelVersion ;
   unsigned short lineInterface ;
   unsigned char proto ;
   unsigned char internalClock ;
   unsigned int lineSpeed ;
   unsigned int v24IpSts ;
   unsigned int v24OpSts ;
   unsigned short clockStatus ;
   unsigned short cableStatus ;
   unsigned short cardMode ;
   unsigned short debug ;
   unsigned char transparentMode ;
   unsigned char invertClock ;
   unsigned char startingSlot ;
   unsigned char clockSource ;
   unsigned char framing ;
   unsigned char structure ;
   unsigned char interface ;
   unsigned char coding ;
   unsigned char lineBuildOut ;
   unsigned char equalizer ;
   unsigned char loopMode ;
   unsigned char range ;
   unsigned char txBufferMode ;
   unsigned char rxBufferMode ;
   unsigned char losThreshold ;
   unsigned char idleCode ;
   unsigned int receiveBufferDelay ;
   unsigned int framingErrorCount ;
   unsigned int codeViolationCount ;
   unsigned int crcErrorCount ;
   int lineAttenuation ;
   unsigned short lossOfSignal ;
   unsigned short receiveRemoteAlarm ;
   unsigned short alarmIndicationSignal ;
};
#line 588 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
struct fst_card_info;
#line 588 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
struct fst_port_info {
   struct net_device *dev ;
   struct fst_card_info *card ;
   int index ;
   int hwif ;
   int run ;
   int mode ;
   int rxpos ;
   int txpos ;
   int txipos ;
   int start ;
   int txqs ;
   int txqe ;
   struct sk_buff *txq[16U] ;
   int rxqdepth ;
};
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
struct fst_card_info {
   char *mem ;
   char *ctlmem ;
   unsigned int phys_mem ;
   unsigned int phys_ctlmem ;
   unsigned int irq ;
   unsigned int nports ;
   unsigned int type ;
   unsigned int state ;
   spinlock_t card_lock ;
   unsigned short pci_conf ;
   struct fst_port_info ports[4U] ;
   struct pci_dev *device ;
   int card_no ;
   int family ;
   int dmarx_in_progress ;
   int dmatx_in_progress ;
   unsigned long int_count ;
   unsigned long int_time_ave ;
   void *rx_dma_handle_host ;
   dma_addr_t rx_dma_handle_card ;
   void *tx_dma_handle_host ;
   dma_addr_t tx_dma_handle_card ;
   struct sk_buff *dma_skb_rx ;
   struct fst_port_info *dma_port_rx ;
   struct fst_port_info *dma_port_tx ;
   int dma_len_rx ;
   int dma_len_tx ;
   int dma_txpos ;
   int dma_rxpos ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
unsigned long __builtin_object_size(void * , int  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 64 "include/asm-generic/bug.h"
extern void warn_slowpath_fmt(char const   * , int const    , char const   *  , ...) ;
#line 69
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 166 "include/linux/kernel.h"
extern void might_fault(void) ;
#line 258
extern int printk(char const   *  , ...) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_1714: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_1714;
  } else {

  }

#line 19
  return (order);
}
}
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 344 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops ;
#line 16 "include/linux/string.h"
extern void *memdup_user(void const   * , size_t  ) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 832 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static unsigned long __raw_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
#line 834
  __edi = __edi;
#line 834
  __esi = __esi;
#line 834
  __edx = __edx;
#line 834
  __ecx = __ecx;
#line 834
  __eax = __eax;
#line 834
  tmp = __builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                         0L);
#line 834
  if (tmp != 0L) {
#line 834
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"),
                         "i" (834), "i" (12UL));
    ldv_4268: ;
#line 834
    goto ldv_4268;
  } else {

  }
#line 834
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (46UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 834
  __ret = __eax;
#line 834
  return (__ret);
}
}
#line 162 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/irqflags.h"
__inline static int raw_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 164
  return ((flags & 512UL) == 0UL);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 550 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 43 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5722.rlock);
}
}
#line 389 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 391
  _raw_spin_unlock_irqrestore(& lock->ldv_5722.rlock, flags);
#line 392
  return;
}
}
#line 407
__inline static void ldv_spin_unlock_irqrestore_35(spinlock_t *lock , unsigned long flags ) ;
#line 411
__inline static void ldv_spin_unlock_irqrestore_35(spinlock_t *lock , unsigned long flags ) ;
#line 415
__inline static void ldv_spin_unlock_irqrestore_35(spinlock_t *lock , unsigned long flags ) ;
#line 419
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 423
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 427
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 431
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 435
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 439
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 443
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 447
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 451
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_34(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_36(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_38(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_42(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) ;
#line 48
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) ;
#line 52
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) ;
#line 56
void ldv___ldv_spin_lock_54(spinlock_t *ldv_func_arg1 ) ;
#line 60
void ldv___ldv_spin_lock_56(spinlock_t *ldv_func_arg1 ) ;
#line 92
void ldv_spin_lock_card_lock_of_fst_card_info(void) ;
#line 93
void ldv_spin_unlock_card_lock_of_fst_card_info(void) ;
#line 116
void ldv_spin_lock_fst_work_q_lock(void) ;
#line 117
void ldv_spin_unlock_fst_work_q_lock(void) ;
#line 140
void ldv_spin_lock_node_size_lock_of_pglist_data(void) ;
#line 148
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 237 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 316 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 108 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 159 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 161
  return (1);
}
}
#line 386 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 390
  return;
}
}
#line 84 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func_ptr = _________p1;
#line 79
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11737: 
#line 79
      it_func = it_func_ptr->func;
#line 79
      __data = it_func_ptr->data;
#line 79
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 79
      it_func_ptr = it_func_ptr + 1;
#line 79
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11737;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 400 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 402
  return ((unsigned int )mod->state != 2U);
}
}
#line 482 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 484
  ret = 1;
#line 486
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 489
    tmp = module_is_live(module);
#line 489
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 489
    if (tmp___0 != 0L) {
#line 490
      __vpp_verify = 0;
#line 490
      switch (4UL) {
      case 1UL: 
#line 490
      pao_ID__ = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_12102;
      case 2UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12102;
      case 4UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12102;
      case 8UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_12102;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_12102: ;
#line 490
      goto ldv_12107;
      case 2UL: 
#line 490
      pao_ID_____0 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_12113;
      case 2UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12113;
      case 4UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12113;
      case 8UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_12113;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_12113: ;
#line 490
      goto ldv_12107;
      case 4UL: 
#line 490
      pao_ID_____1 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_12123;
      case 2UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12123;
      case 4UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12123;
      case 8UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_12123;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_12123: ;
#line 490
      goto ldv_12107;
      case 8UL: 
#line 490
      pao_ID_____2 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_12133;
      case 2UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12133;
      case 4UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_12133;
      case 8UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_12133;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_12133: ;
#line 490
      goto ldv_12107;
      default: 
#line 490
      __bad_size_call_parameter();
#line 490
      goto ldv_12107;
      }
      ldv_12107: ;
#line 491
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 493
      ret = 0;
    }
  } else {

  }
#line 497
  return (ret);
}
}
#line 500
extern void module_put(struct module * ) ;
#line 559 "include/linux/device.h"
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 560
extern void dev_set_drvdata(struct device * , void * ) ;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 54
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 54
  return (ret);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile   *addr ) 
{ 
  unsigned short ret ;

  {
#line 55
  __asm__  volatile   ("movw %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
#line 55
  return (ret);
}
}
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 56
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 56
  return (ret);
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 62
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 63
  return;
}
}
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val , void volatile   *addr ) 
{ 


  {
#line 63
  __asm__  volatile   ("movw %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
#line 64
  return;
}
}
#line 64 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 64
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 65
  return;
}
}
#line 194
extern void *ioremap_nocache(resource_size_t  , unsigned long  ) ;
#line 202 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 204
  tmp = ioremap_nocache(offset, size);
#line 204
  return (tmp);
}
}
#line 207
extern void iounmap(void volatile   * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void memcpy_fromio(void *dst , void const volatile   *src , size_t count ) 
{ 
  size_t __len ;
  void *__ret ;

  {
#line 230
  __len = count;
#line 230
  __ret = __builtin_memcpy(dst, (void const   *)src, __len);
#line 232
  return;
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void memcpy_toio(void volatile   *dst , void const   *src , size_t count ) 
{ 
  size_t __len ;
  void *__ret ;

  {
#line 236
  __len = count;
#line 236
  __ret = __builtin_memcpy((void *)dst, src, __len);
#line 238
  return;
}
}
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outb(unsigned char value , int port ) 
{ 


  {
#line 327
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
#line 328
  return;
}
}
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
#line 327
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
#line 327
  return (value);
}
}
#line 328 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outw(unsigned short value , int port ) 
{ 


  {
#line 328
  __asm__  volatile   ("outw %w0, %w1": : "a" (value), "Nd" (port));
#line 329
  return;
}
}
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outl(unsigned int value , int port ) 
{ 


  {
#line 329
  __asm__  volatile   ("outl %0, %w1": : "a" (value), "Nd" (port));
#line 330
  return;
}
}
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned int inl(int port ) 
{ 
  unsigned int value ;

  {
#line 329
  __asm__  volatile   ("inl %w1, %0": "=a" (value): "Nd" (port));
#line 329
  return (value);
}
}
#line 716 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus * , unsigned int  , int  , u8 * ) ;
#line 722
extern int pci_bus_write_config_byte(struct pci_bus * , unsigned int  , int  , u8  ) ;
#line 730 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 732
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 732
  return (tmp);
}
}
#line 743 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 745
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, (int )val);
#line 745
  return (tmp);
}
}
#line 757
extern int pci_enable_device(struct pci_dev * ) ;
#line 774
extern void pci_disable_device(struct pci_dev * ) ;
#line 775
extern void pci_set_master(struct pci_dev * ) ;
#line 854
extern int pci_request_regions(struct pci_dev * , char const   * ) ;
#line 856
extern void pci_release_regions(struct pci_dev * ) ;
#line 886
extern int __pci_register_driver(struct pci_driver * , struct module * , char const   * ) ;
#line 895
extern void pci_unregister_driver(struct pci_driver * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func_ptr = _________p1;
#line 81
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_16594: 
#line 81
      it_func = it_func_ptr->func;
#line 81
      __data = it_func_ptr->data;
#line 81
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 81
      it_func_ptr = it_func_ptr + 1;
#line 81
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_16594;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 151 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 157 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 159
  if (size == 0UL) {
#line 160
    return (0);
  } else {

  }
#line 162
  if (size <= 8UL) {
#line 163
    return (3);
  } else {

  }
#line 165
  if (size > 64UL && size <= 96UL) {
#line 166
    return (1);
  } else {

  }
#line 167
  if (size > 128UL && size <= 192UL) {
#line 168
    return (2);
  } else {

  }
#line 169
  if (size <= 8UL) {
#line 169
    return (3);
  } else {

  }
#line 170
  if (size <= 16UL) {
#line 170
    return (4);
  } else {

  }
#line 171
  if (size <= 32UL) {
#line 171
    return (5);
  } else {

  }
#line 172
  if (size <= 64UL) {
#line 172
    return (6);
  } else {

  }
#line 173
  if (size <= 128UL) {
#line 173
    return (7);
  } else {

  }
#line 174
  if (size <= 256UL) {
#line 174
    return (8);
  } else {

  }
#line 175
  if (size <= 512UL) {
#line 175
    return (9);
  } else {

  }
#line 176
  if (size <= 1024UL) {
#line 176
    return (10);
  } else {

  }
#line 177
  if (size <= 2048UL) {
#line 177
    return (11);
  } else {

  }
#line 178
  if (size <= 4096UL) {
#line 178
    return (12);
  } else {

  }
#line 183
  if (size <= 8192UL) {
#line 183
    return (13);
  } else {

  }
#line 184
  if (size <= 16384UL) {
#line 184
    return (14);
  } else {

  }
#line 185
  if (size <= 32768UL) {
#line 185
    return (15);
  } else {

  }
#line 186
  if (size <= 65536UL) {
#line 186
    return (16);
  } else {

  }
#line 187
  if (size <= 131072UL) {
#line 187
    return (17);
  } else {

  }
#line 188
  if (size <= 262144UL) {
#line 188
    return (18);
  } else {

  }
#line 189
  if (size <= 524288UL) {
#line 189
    return (19);
  } else {

  }
#line 190
  if (size <= 1048576UL) {
#line 190
    return (20);
  } else {

  }
#line 191
  if (size <= 2097152UL) {
#line 191
    return (21);
  } else {

  }
#line 192
  return (-1);
}
}
#line 209 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 211
  tmp = kmalloc_index(size);
#line 211
  index = tmp;
#line 213
  if (index == 0) {
#line 214
    return (0);
  } else {

  }
#line 216
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 220
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 223
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 232 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 234
  tmp = get_order(size);
#line 234
  order = (unsigned int )tmp;
#line 235
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 235
  ret = (void *)tmp___0;
#line 237
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 238
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 240
  return (ret);
}
}
#line 243 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 247
  if (0) {
#line 248
    if (size > 8192UL) {
#line 249
      tmp = kmalloc_large(size, flags);
#line 249
      return (tmp);
    } else {

    }
#line 251
    if ((flags & 1U) == 0U) {
#line 252
      tmp___0 = kmalloc_slab(size);
#line 252
      s = tmp___0;
#line 254
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 255
        return (16);
      } else {

      }
#line 257
      ret = kmem_cache_alloc_notrace(s, flags);
#line 259
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 261
      return (ret);
    } else {

    }
  } else {

  }
#line 264
  tmp___1 = __kmalloc(size, flags);
#line 264
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 87 "include/linux/dma-mapping.h"
__inline static int is_device_dma_capable(struct device *dev ) 
{ 


  {
#line 89
  return ((unsigned long )dev->dma_mask != (unsigned long )((u64 *)0) && *(dev->dma_mask) != 0ULL);
}
}
#line 51 "include/linux/dma-debug.h"
extern void debug_dma_alloc_coherent(struct device * , size_t  , dma_addr_t  , void * ) ;
#line 54
extern void debug_dma_free_coherent(struct device * , size_t  , void * , dma_addr_t  ) ;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
extern struct device x86_dma_fallback_dev ;
#line 29
extern struct dma_map_ops *dma_ops ;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev ) 
{ 
  long tmp ;

  {
#line 36
  tmp = __builtin_expect((unsigned long )dev == (unsigned long )((struct device *)0),
                         0L);
#line 36
  if (tmp != 0L || (unsigned long )dev->archdata.dma_ops == (unsigned long )((struct dma_map_ops *)0)) {
#line 37
    return (dma_ops);
  } else {
#line 39
    return (dev->archdata.dma_ops);
  }
}
}
#line 97 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
__inline static unsigned long dma_alloc_coherent_mask(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;

  {
#line 100
  dma_mask = 0UL;
#line 102
  dma_mask = (unsigned long )dev->coherent_dma_mask;
#line 103
  if (dma_mask == 0UL) {
#line 104
    dma_mask = (int )gfp & 1 ? 16777215UL : 4294967295UL;
  } else {

  }
#line 106
  return (dma_mask);
}
}
#line 109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
__inline static gfp_t dma_alloc_coherent_gfp_flags(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;
  unsigned long tmp ;

  {
#line 111
  tmp = dma_alloc_coherent_mask(dev, gfp);
#line 111
  dma_mask = tmp;
#line 113
  if ((unsigned long long )dma_mask <= 16777215ULL) {
#line 114
    gfp = gfp | 1U;
  } else {

  }
#line 116
  if ((unsigned long long )dma_mask <= 4294967295ULL && (gfp & 1U) == 0U) {
#line 117
    gfp = gfp | 4U;
  } else {

  }
#line 119
  return (gfp);
}
}
#line 123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                                         gfp_t gfp ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  void *memory ;
  int tmp___0 ;
  gfp_t tmp___1 ;

  {
#line 126
  tmp = get_dma_ops(dev);
#line 126
  ops = tmp;
#line 129
  gfp = gfp & 4294967288U;
#line 134
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
#line 135
    dev = & x86_dma_fallback_dev;
  } else {

  }
#line 137
  tmp___0 = is_device_dma_capable(dev);
#line 137
  if (tmp___0 == 0) {
#line 138
    return (0);
  } else {

  }
#line 140
  if ((unsigned long )ops->alloc_coherent == (unsigned long )((void *(*)(struct device * ,
                                                                         size_t  ,
                                                                         dma_addr_t * ,
                                                                         gfp_t  ))0)) {
#line 141
    return (0);
  } else {

  }
#line 143
  tmp___1 = dma_alloc_coherent_gfp_flags(dev, gfp);
#line 143
  memory = (*(ops->alloc_coherent))(dev, size, dma_handle, tmp___1);
#line 145
  debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
#line 147
  return (memory);
}
}
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev , size_t size , void *vaddr ,
                                       dma_addr_t bus ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int __ret_warn_on ;
  unsigned long _flags ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 153
  tmp = get_dma_ops(dev);
#line 153
  ops = tmp;
#line 155
  _flags = __raw_local_save_flags();
#line 155
  tmp___0 = raw_irqs_disabled_flags(_flags);
#line 155
  __ret_warn_on = tmp___0 != 0;
#line 155
  tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 155
  if (tmp___1 != 0L) {
#line 155
    warn_slowpath_null("/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h",
                       155);
  } else {

  }
#line 155
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 160
  debug_dma_free_coherent(dev, size, vaddr, bus);
#line 161
  if ((unsigned long )ops->free_coherent != (unsigned long )((void (*)(struct device * ,
                                                                       size_t  , void * ,
                                                                       dma_addr_t  ))0)) {
#line 162
    (*(ops->free_coherent))(dev, size, vaddr, bus);
  } else {

  }
#line 163
  return;
}
}
#line 16 "include/asm-generic/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev , size_t size , dma_addr_t *dma_handle ) 
{ 
  void *tmp ;

  {
#line 19
  tmp = dma_alloc_coherent((unsigned long )hwdev != (unsigned long )((struct pci_dev *)0) ? & hwdev->dev : 0,
                           size, dma_handle, 32U);
#line 19
  return (tmp);
}
}
#line 23 "include/asm-generic/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev , size_t size , void *vaddr ,
                                         dma_addr_t dma_handle ) 
{ 


  {
#line 26
  dma_free_coherent((unsigned long )hwdev != (unsigned long )((struct pci_dev *)0) ? & hwdev->dev : 0,
                    size, vaddr, dma_handle);
#line 27
  return;
}
}
#line 1245 "include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
#line 1247
  tmp = dev_get_drvdata((struct device  const  *)(& pdev->dev));
#line 1247
  return (tmp);
}
}
#line 1250 "include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
#line 1252
  dev_set_drvdata(& pdev->dev, data);
#line 1253
  return;
}
}
#line 560 "include/linux/capability.h"
extern int capable(int  ) ;
#line 367 "include/linux/sched.h"
extern long schedule_timeout_uninterruptible(long  ) ;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
#line 43
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ 
  int sz ;
  unsigned long tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 51
  tmp = __builtin_object_size((void const   *)to, 0);
#line 51
  sz = (int )tmp;
#line 53
  might_fault();
#line 54
  tmp___1 = __builtin_expect(sz == -1, 1L);
#line 54
  if (tmp___1 != 0L) {
#line 55
    n = _copy_from_user(to, from, (unsigned int )n);
  } else {
#line 54
    tmp___2 = __builtin_expect((unsigned long )sz >= n, 1L);
#line 54
    if (tmp___2 != 0L) {
#line 55
      n = _copy_from_user(to, from, (unsigned int )n);
    } else {
#line 58
      __ret_warn_on = 1;
#line 58
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 58
      if (tmp___0 != 0L) {
#line 58
        warn_slowpath_fmt("/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h",
                          58, "Buffer overflow detected!\n");
      } else {

      }
#line 58
      __builtin_expect(__ret_warn_on != 0, 0L);
    }
  }
#line 60
  return (n);
}
}
#line 64 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  unsigned long tmp ;

  {
#line 66
  might_fault();
#line 68
  tmp = _copy_to_user(dst, src, size);
#line 68
  return ((int )tmp);
}
}
#line 494 "include/linux/skbuff.h"
extern void consume_skb(struct sk_buff * ) ;
#line 1166
extern unsigned char *skb_put(struct sk_buff * , unsigned int  ) ;
#line 1302 "include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb ) 
{ 


  {
#line 1304
  skb->mac_header = (sk_buff_data_t )((long )skb->data) - (sk_buff_data_t )((long )skb->head);
#line 1305
  return;
}
}
#line 1530
extern struct sk_buff *dev_alloc_skb(unsigned int  ) ;
#line 1084 "include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device  const  *dev ,
                                                         unsigned int index ) 
{ 


  {
#line 1087
  return ((struct netdev_queue *)dev->_tx + (unsigned long )index);
}
}
#line 1155 "include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device  const  *dev ) 
{ 


  {
#line 1157
  return ((void *)dev + 2624U);
}
}
#line 125 "include/linux/interrupt.h"
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
#line 130 "include/linux/interrupt.h"
__inline static int request_irq(unsigned int irq , irqreturn_t (*handler)(int  , void * ) ,
                                unsigned long flags , char const   *name , void *dev ) 
{ 
  int tmp ;

  {
#line 133
  tmp = request_threaded_irq(irq, handler, 0, flags, name, dev);
#line 133
  return (tmp);
}
}
#line 171
extern void free_irq(unsigned int  , void * ) ;
#line 494
extern void __tasklet_schedule(struct tasklet_struct * ) ;
#line 496 "include/linux/interrupt.h"
__inline static void tasklet_schedule(struct tasklet_struct *t ) 
{ 
  int tmp ;

  {
#line 498
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& t->state));
#line 498
  if (tmp == 0) {
#line 499
    __tasklet_schedule(t);
  } else {

  }
#line 500
  return;
}
}
#line 1308 "include/linux/netdevice.h"
extern void free_netdev(struct net_device * ) ;
#line 1321
extern int netpoll_trap(void) ;
#line 1450
extern void __netif_schedule(struct Qdisc * ) ;
#line 1466 "include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue ) 
{ 


  {
#line 1468
  clear_bit(0, (unsigned long volatile   *)(& dev_queue->state));
#line 1469
  return;
}
}
#line 1492 "include/linux/netdevice.h"
__inline static void netif_tx_wake_queue(struct netdev_queue *dev_queue ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1495
  tmp = netpoll_trap();
#line 1495
  if (tmp != 0) {
#line 1496
    netif_tx_start_queue(dev_queue);
#line 1497
    return;
  } else {

  }
#line 1500
  tmp___0 = test_and_clear_bit(0, (unsigned long volatile   *)(& dev_queue->state));
#line 1500
  if (tmp___0 != 0) {
#line 1501
    __netif_schedule(dev_queue->qdisc);
  } else {

  }
#line 1502
  return;
}
}
#line 1511 "include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
#line 1513
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 1513
  netif_tx_wake_queue(tmp);
#line 1514
  return;
}
}
#line 1526 "include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue ) 
{ 


  {
#line 1528
  set_bit(0U, (unsigned long volatile   *)(& dev_queue->state));
#line 1529
  return;
}
}
#line 1538 "include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
#line 1540
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 1540
  netif_tx_stop_queue(tmp);
#line 1541
  return;
}
}
#line 1689
extern int netif_rx(struct sk_buff * ) ;
#line 1784 "include/linux/netdevice.h"
__inline static int netif_carrier_ok(struct net_device  const  *dev ) 
{ 
  int tmp ;

  {
#line 1786
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& dev->state));
#line 1786
  return (tmp == 0);
}
}
#line 1793
extern void netif_carrier_on(struct net_device * ) ;
#line 1795
extern void netif_carrier_off(struct net_device * ) ;
#line 2080
extern int register_netdev(struct net_device * ) ;
#line 70 "include/linux/hdlc.h"
extern int hdlc_ioctl(struct net_device * , struct ifreq * , int  ) ;
#line 74
extern void unregister_hdlc_device(struct net_device * ) ;
#line 80
extern struct net_device *alloc_hdlcdev(void * ) ;
#line 82 "include/linux/hdlc.h"
__inline static struct hdlc_device *dev_to_hdlc(struct net_device *dev ) 
{ 
  void *tmp ;

  {
#line 84
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 84
  return ((struct hdlc_device *)tmp);
}
}
#line 103
extern int hdlc_open(struct net_device * ) ;
#line 105
extern void hdlc_close(struct net_device * ) ;
#line 107
extern int hdlc_change_mtu(struct net_device * , int  ) ;
#line 109
extern netdev_tx_t hdlc_start_xmit(struct sk_buff * , struct net_device * ) ;
#line 116 "include/linux/hdlc.h"
__inline static __be16 hdlc_type_trans(struct sk_buff *skb , struct net_device *dev ) 
{ 
  hdlc_device *hdlc ;
  struct hdlc_device *tmp ;
  __be16 tmp___0 ;

  {
#line 119
  tmp = dev_to_hdlc(dev);
#line 119
  hdlc = tmp;
#line 121
  skb->dev = dev;
#line 122
  skb_reset_mac_header(skb);
#line 124
  if ((unsigned long )(hdlc->proto)->type_trans != (unsigned long )((__be16 (*/* const  */)(struct sk_buff * ,
                                                                                            struct net_device * ))0)) {
#line 125
    tmp___0 = (*((hdlc->proto)->type_trans))(skb, dev);
#line 125
    return (tmp___0);
  } else {
#line 127
    return (6400U);
  }
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_txq_low  =    8;
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_txq_high  =    12;
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_max_reads  =    7;
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_excluded_cards  =    0;
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_excluded_list[32U]  ;
#line 640 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct pci_device_id  const  fst_pci_dev_id[8U]  = 
#line 640
  {      {5657U, 1024U, 4294967295U, 4294967295U, 0U, 0U, 1UL}, 
        {5657U, 1088U, 4294967295U, 4294967295U, 0U, 0U, 2UL}, 
        {5657U, 1552U, 4294967295U, 4294967295U, 0U, 0U, 3UL}, 
        {5657U, 1568U, 4294967295U, 4294967295U, 0U, 0U, 4UL}, 
        {5657U, 1600U, 4294967295U, 4294967295U, 0U, 0U, 5UL}, 
        {5657U, 5648U, 4294967295U, 4294967295U, 0U, 0U, 6UL}, 
        {5657U, 5650U, 4294967295U, 4294967295U, 0U, 0U, 6UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
struct pci_device_id  const  __mod_pci_device_table  ;
#line 677
static void do_bottom_half_tx(struct fst_card_info *card ) ;
#line 678
static void do_bottom_half_rx(struct fst_card_info *card ) ;
#line 679
static void fst_process_tx_work_q(unsigned long work_q ) ;
#line 680
static void fst_process_int_work_q(unsigned long work_q ) ;
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct tasklet_struct fst_tx_task  =    {0, 0UL, {0}, & fst_process_tx_work_q, 0UL};
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct tasklet_struct fst_int_task  =    {0, 0UL, {0}, & fst_process_int_work_q, 0UL};
#line 685 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct fst_card_info *fst_card_array[32U]  ;
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static spinlock_t fst_work_q_lock  ;
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static u64 fst_work_txq  ;
#line 688 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static u64 fst_work_intq  ;
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_q_work_item(u64 *queue , int card_index ) 
{ 
  unsigned long flags ;
  u64 mask ;

  {
#line 699
  ldv___ldv_spin_lock_34(& fst_work_q_lock);
#line 707
  mask = (u64 )(1 << card_index);
#line 708
  *queue = *queue | mask;
#line 709
  ldv_spin_unlock_irqrestore_35(& fst_work_q_lock, flags);
#line 710
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_process_tx_work_q(unsigned long work_q ) 
{ 
  unsigned long flags ;
  u64 work_txq ;
  int i ;

  {
#line 723
  ldv___ldv_spin_lock_36(& fst_work_q_lock);
#line 724
  work_txq = fst_work_txq;
#line 725
  fst_work_txq = 0ULL;
#line 726
  ldv_spin_unlock_irqrestore_35(& fst_work_q_lock, flags);
#line 731
  i = 0;
#line 731
  goto ldv_32340;
  ldv_32339: ;
#line 732
  if ((int )work_txq & 1) {
#line 733
    if ((unsigned long )fst_card_array[i] != (unsigned long )((struct fst_card_info *)0)) {
#line 735
      do_bottom_half_tx(fst_card_array[i]);
    } else {

    }
  } else {

  }
#line 738
  work_txq = work_txq >> 1;
#line 731
  i = i + 1;
  ldv_32340: ;
#line 731
  if (i <= 31) {
#line 732
    goto ldv_32339;
  } else {

  }

#line 736
  return;
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_process_int_work_q(unsigned long work_q ) 
{ 
  unsigned long flags ;
  u64 work_intq ;
  int i ;

  {
#line 753
  ldv___ldv_spin_lock_38(& fst_work_q_lock);
#line 754
  work_intq = fst_work_intq;
#line 755
  fst_work_intq = 0ULL;
#line 756
  ldv_spin_unlock_irqrestore_35(& fst_work_q_lock, flags);
#line 761
  i = 0;
#line 761
  goto ldv_32349;
  ldv_32348: ;
#line 762
  if ((int )work_intq & 1) {
#line 763
    if ((unsigned long )fst_card_array[i] != (unsigned long )((struct fst_card_info *)0)) {
#line 766
      do_bottom_half_rx(fst_card_array[i]);
#line 767
      do_bottom_half_tx(fst_card_array[i]);
    } else {

    }
  } else {

  }
#line 770
  work_intq = work_intq >> 1;
#line 761
  i = i + 1;
  ldv_32349: ;
#line 761
  if (i <= 31) {
#line 762
    goto ldv_32348;
  } else {

  }

#line 766
  return;
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_cpureset(struct fst_card_info *card ) 
{ 
  unsigned char interrupt_line_register ;
  unsigned long j ;
  unsigned int regval ;
  int tmp ;
  int tmp___0 ;

  {
#line 788
  j = (unsigned long )jiffies + 1UL;
#line 791
  if (card->family == 1) {
#line 792
    tmp = pci_read_config_byte(card->device, 60, & interrupt_line_register);
#line 801
    outw(17423, (int )card->pci_conf + 110);
#line 802
    outw(1039, (int )card->pci_conf + 110);
#line 806
    j = (unsigned long )jiffies + 1UL;
#line 807
    goto ldv_32358;
    ldv_32357: ;
    ldv_32358: ;
#line 807
    if ((unsigned long )jiffies < j) {
#line 808
      goto ldv_32357;
    } else {

    }
#line 809
    outw(9231, (int )card->pci_conf + 110);
#line 813
    j = (unsigned long )jiffies + 1UL;
#line 814
    goto ldv_32361;
    ldv_32360: ;
    ldv_32361: ;
#line 814
    if ((unsigned long )jiffies < j) {
#line 815
      goto ldv_32360;
    } else {

    }
#line 816
    outw(1039, (int )card->pci_conf + 110);
#line 818
    tmp___0 = pci_write_config_byte(card->device, 60, (int )interrupt_line_register);
  } else {
#line 825
    regval = inl((int )card->pci_conf + 80);
#line 827
    outl(regval | 1073741824U, (int )card->pci_conf + 80);
#line 828
    outl(regval & 3221225471U, (int )card->pci_conf + 80);
  }
#line 830
  return;
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_cpurelease(struct fst_card_info *card ) 
{ 


  {
#line 837
  if (card->family == 1) {
#line 841
    readb((void const volatile   *)card->mem);
#line 847
    outw(1038, (int )card->pci_conf + 110);
#line 848
    outw(1039, (int )card->pci_conf + 110);
  } else {
#line 850
    readb((void const volatile   *)card->ctlmem);
  }
#line 851
  return;
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_clear_intr(struct fst_card_info *card ) 
{ 


  {
#line 859
  if (card->family == 1) {
#line 860
    readb((void const volatile   *)card->ctlmem);
  } else {
#line 864
    outw(1347, (int )card->pci_conf + 76);
  }
#line 865
  return;
}
}
#line 871 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_enable_intr(struct fst_card_info *card ) 
{ 


  {
#line 873
  if (card->family == 1) {
#line 874
    outl(252446976U, (int )card->pci_conf + 104);
  } else {
#line 876
    outw(1347, (int )card->pci_conf + 76);
  }
#line 877
  return;
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_disable_intr(struct fst_card_info *card ) 
{ 


  {
#line 885
  if (card->family == 1) {
#line 886
    outl(0U, (int )card->pci_conf + 104);
  } else {
#line 888
    outw(0, (int )card->pci_conf + 76);
  }
#line 889
  return;
}
}
#line 895 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_process_rx_status(int rx_status , char *name ) 
{ 


  {
#line 897
  switch (rx_status) {
  case 0: ;
#line 903
  goto ldv_32380;
  case 1: ;
#line 908
  goto ldv_32380;
  }
  ldv_32380: ;
#line 912
  return;
}
}
#line 916 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_init_dma(struct fst_card_info *card ) 
{ 


  {
#line 921
  if (card->family == 1) {
#line 922
    pci_set_master(card->device);
#line 923
    outl(132161U, (int )card->pci_conf + 128);
#line 924
    outl(132161U, (int )card->pci_conf + 148);
#line 925
    outl(0U, (int )card->pci_conf + 176);
  } else {

  }
#line 927
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_tx_dma_complete(struct fst_card_info *card , struct fst_port_info *port ,
                                int len , int txpos ) 
{ 
  struct net_device *dev ;

  {
#line 935
  dev = port->dev;
#line 941
  writeb(131, (void volatile   *)card->mem + (8192UL + ((((unsigned long )port->index + 16UL) * 2UL + (unsigned long )txpos) * 8UL + 3UL)));
#line 943
  dev->stats.tx_packets = dev->stats.tx_packets + 1UL;
#line 944
  dev->stats.tx_bytes = dev->stats.tx_bytes + (unsigned long )len;
#line 945
  dev->trans_start = jiffies;
#line 946
  return;
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static __be16 farsync_type_trans(struct sk_buff *skb , struct net_device *dev ) 
{ 


  {
#line 953
  skb->dev = dev;
#line 954
  skb_reset_mac_header(skb);
#line 955
  skb->pkt_type = 0U;
#line 956
  return (1632U);
}
}
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_rx_dma_complete(struct fst_card_info *card , struct fst_port_info *port ,
                                int len , struct sk_buff *skb , int rxp ) 
{ 
  struct net_device *dev ;
  int pi ;
  int rx_status ;
  size_t __len ;
  void *__ret ;
  unsigned char *tmp___0 ;

  {
#line 965
  dev = port->dev;
#line 970
  pi = port->index;
#line 971
  __len = (size_t )len;
#line 971
  tmp___0 = skb_put(skb, (unsigned int )len);
#line 971
  __ret = __builtin_memcpy((void *)tmp___0, (void const   *)card->rx_dma_handle_host,
                           __len);
#line 974
  writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 977
  dev->stats.rx_packets = dev->stats.rx_packets + 1UL;
#line 978
  dev->stats.rx_bytes = dev->stats.rx_bytes + (unsigned long )len;
#line 982
  if (port->mode == 4) {
#line 983
    skb->protocol = farsync_type_trans(skb, dev);
  } else {
#line 985
    skb->protocol = hdlc_type_trans(skb, dev);
  }
#line 986
  rx_status = netif_rx(skb);
#line 987
  fst_process_rx_status(rx_status, (char *)(& (port->dev)->name));
#line 988
  if (rx_status == 1) {
#line 989
    dev->stats.rx_dropped = dev->stats.rx_dropped + 1UL;
  } else {

  }
#line 990
  return;
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_rx_dma(struct fst_card_info *card , dma_addr_t skb , dma_addr_t mem ,
                                int len ) 
{ 


  {
#line 1009
  outl((unsigned int )skb, (int )card->pci_conf + 132);
#line 1010
  outl((unsigned int )mem, (int )card->pci_conf + 136);
#line 1011
  outl((unsigned int )len, (int )card->pci_conf + 140);
#line 1012
  outl(12U, (int )card->pci_conf + 144);
#line 1017
  card->dmarx_in_progress = 1;
#line 1018
  outb(3, (int )card->pci_conf + 168);
#line 1019
  return;
}
}
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_tx_dma(struct fst_card_info *card , unsigned char *skb ,
                                unsigned char *mem , int len ) 
{ 


  {
#line 1037
  outl((unsigned int )((long )skb), (int )card->pci_conf + 152);
#line 1038
  outl((unsigned int )((long )mem), (int )card->pci_conf + 156);
#line 1039
  outl((unsigned int )len, (int )card->pci_conf + 160);
#line 1040
  outl(4U, (int )card->pci_conf + 164);
#line 1045
  card->dmatx_in_progress = 1;
#line 1046
  outb(3, (int )card->pci_conf + 169);
#line 1047
  return;
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_issue_cmd(struct fst_port_info *port , unsigned short cmd ) 
{ 
  struct fst_card_info *card ;
  unsigned short mbval ;
  unsigned long flags ;
  int safety ;

  {
#line 1061
  card = port->card;
#line 1062
  ldv___ldv_spin_lock_40(& card->card_lock);
#line 1063
  mbval = readw((void const volatile   *)card->mem + (18940UL + (unsigned long )port->index));
#line 1065
  safety = 0;
#line 1067
  goto ldv_32431;
  ldv_32430: 
#line 1068
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1069
  schedule_timeout_uninterruptible(1L);
#line 1070
  ldv___ldv_spin_lock_42(& card->card_lock);
#line 1072
  safety = safety + 1;
#line 1072
  if (safety > 2000) {
#line 1073
    printk("<3>farsync: Mailbox safety timeout\n");
#line 1074
    goto ldv_32429;
  } else {

  }
#line 1077
  mbval = readw((void const volatile   *)card->mem + (18940UL + (unsigned long )port->index));
  ldv_32431: ;
#line 1067
  if ((unsigned int )mbval > 2U) {
#line 1068
    goto ldv_32430;
  } else {

  }
  ldv_32429: 
#line 1086
  writew((int )cmd, (void volatile   *)card->mem + (18940UL + (unsigned long )port->index));
#line 1088
  if ((unsigned int )cmd == 5U || (unsigned int )cmd == 3U) {
#line 1089
    port->txpos = 0;
#line 1090
    port->txipos = 0;
#line 1091
    port->start = 0;
  } else {

  }
#line 1094
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1095
  return;
}
}
#line 1100 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_op_raise(struct fst_port_info *port , unsigned int outputs ) 
{ 
  unsigned int tmp ;

  {
#line 1102
  tmp = readl((void const volatile   *)(port->card)->mem + (18834UL + (unsigned long )port->index));
#line 1102
  outputs = tmp | outputs;
#line 1103
  writel(outputs, (void volatile   *)(port->card)->mem + (18834UL + (unsigned long )port->index));
#line 1105
  if (port->run != 0) {
#line 1106
    fst_issue_cmd(port, 6);
  } else {

  }
#line 1107
  return;
}
}
#line 1110 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void fst_op_lower(struct fst_port_info *port , unsigned int outputs ) 
{ 
  unsigned int tmp ;

  {
#line 1112
  tmp = readl((void const volatile   *)(port->card)->mem + (18834UL + (unsigned long )port->index));
#line 1112
  outputs = ~ outputs & tmp;
#line 1113
  writel(outputs, (void volatile   *)(port->card)->mem + (18834UL + (unsigned long )port->index));
#line 1115
  if (port->run != 0) {
#line 1116
    fst_issue_cmd(port, 6);
  } else {

  }
#line 1117
  return;
}
}
#line 1123 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_rx_config(struct fst_port_info *port ) 
{ 
  int i ;
  int pi ;
  unsigned int offset ;
  unsigned long flags ;
  struct fst_card_info *card ;

  {
#line 1131
  pi = port->index;
#line 1132
  card = port->card;
#line 1133
  ldv___ldv_spin_lock_44(& card->card_lock);
#line 1134
  i = 0;
#line 1134
  goto ldv_32449;
  ldv_32448: 
#line 1135
  offset = (unsigned int )((((unsigned long )pi + 1UL) * 8UL + (unsigned long )i) + 8UL) * 8192U;
#line 1137
  writew((int )((unsigned short )offset), (void volatile   *)card->mem + (8192UL + ((unsigned long )pi * 8UL + (unsigned long )i) * 8UL));
#line 1138
  writeb((int )((unsigned char )(offset >> 16)), (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )i) * 8UL + 2UL)));
#line 1139
  writew(57344, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )i) * 8UL + 4UL)));
#line 1140
  writew(8192, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )i) * 8UL + 6UL)));
#line 1141
  writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )i) * 8UL + 3UL)));
#line 1134
  i = i + 1;
  ldv_32449: ;
#line 1134
  if (i <= 7) {
#line 1135
    goto ldv_32448;
  } else {

  }
#line 1143
  port->rxpos = 0;
#line 1144
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1145
  return;
}
}
#line 1151 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_tx_config(struct fst_port_info *port ) 
{ 
  int i ;
  int pi ;
  unsigned int offset ;
  unsigned long flags ;
  struct fst_card_info *card ;

  {
#line 1159
  pi = port->index;
#line 1160
  card = port->card;
#line 1161
  ldv___ldv_spin_lock_46(& card->card_lock);
#line 1162
  i = 0;
#line 1162
  goto ldv_32460;
  ldv_32459: 
#line 1163
  offset = (unsigned int )(((unsigned long )pi * 2UL + (unsigned long )i) + 8UL) * 8192U;
#line 1165
  writew((int )((unsigned short )offset), (void volatile   *)card->mem + (8192UL + (((unsigned long )pi + 16UL) * 2UL + (unsigned long )i) * 8UL));
#line 1166
  writeb((int )((unsigned char )(offset >> 16)), (void volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )i) * 8UL + 2UL)));
#line 1167
  writew(0, (void volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )i) * 8UL + 4UL)));
#line 1168
  writeb(0, (void volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )i) * 8UL + 3UL)));
#line 1162
  i = i + 1;
  ldv_32460: ;
#line 1162
  if (i <= 1) {
#line 1163
    goto ldv_32459;
  } else {

  }
#line 1170
  port->txpos = 0;
#line 1171
  port->txipos = 0;
#line 1172
  port->start = 0;
#line 1173
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1174
  return;
}
}
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_intr_te1_alarm(struct fst_card_info *card , struct fst_port_info *port ) 
{ 
  u8 los ;
  u8 rra ;
  u8 ais ;
  int tmp ;
  int tmp___0 ;

  {
#line 1185
  los = readb((void const volatile   *)card->mem + 19301U);
#line 1186
  rra = readb((void const volatile   *)card->mem + 19302U);
#line 1187
  ais = readb((void const volatile   *)card->mem + 19303U);
#line 1189
  if ((unsigned int )los != 0U) {
#line 1193
    tmp___0 = netif_carrier_ok((struct net_device  const  *)port->dev);
#line 1193
    if (tmp___0 != 0) {
#line 1195
      netif_carrier_off(port->dev);
    } else {
#line 1201
      tmp = netif_carrier_ok((struct net_device  const  *)port->dev);
#line 1201
      if (tmp == 0) {
#line 1203
        netif_carrier_on(port->dev);
      } else {

      }
    }
  } else {

  }
#line 1220
  return;
}
}
#line 1225 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_intr_ctlchg(struct fst_card_info *card , struct fst_port_info *port ) 
{ 
  int signals ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1229
  tmp = readl((void const volatile   *)card->mem + (19000UL + (unsigned long )port->index));
#line 1229
  signals = (int )tmp;
#line 1231
  if (((port->hwif == 2 || port->hwif == 4 ? 1 : 4) & signals) != 0) {
#line 1233
    tmp___1 = netif_carrier_ok((struct net_device  const  *)port->dev);
#line 1233
    if (tmp___1 == 0) {
#line 1235
      netif_carrier_on(port->dev);
    } else {
#line 1238
      tmp___0 = netif_carrier_ok((struct net_device  const  *)port->dev);
#line 1238
      if (tmp___0 != 0) {
#line 1240
        netif_carrier_off(port->dev);
      } else {

      }
    }
  } else {

  }
#line 1242
  return;
}
}
#line 1248 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_log_rx_error(struct fst_card_info *card , struct fst_port_info *port ,
                             unsigned char dmabits , int rxp , unsigned short len ) 
{ 
  struct net_device *dev ;

  {
#line 1251
  dev = port->dev;
#line 1256
  dev->stats.rx_errors = dev->stats.rx_errors + 1UL;
#line 1257
  if (((int )dmabits & 16) != 0) {
#line 1258
    dev->stats.rx_fifo_errors = dev->stats.rx_fifo_errors + 1UL;
  } else {

  }
#line 1262
  if (((int )dmabits & 8) != 0) {
#line 1263
    dev->stats.rx_crc_errors = dev->stats.rx_crc_errors + 1UL;
  } else {

  }
#line 1267
  if (((int )dmabits & 32) != 0) {
#line 1268
    dev->stats.rx_frame_errors = dev->stats.rx_frame_errors + 1UL;
  } else {

  }
#line 1272
  if ((unsigned int )dmabits == 3U) {
#line 1273
    dev->stats.rx_length_errors = dev->stats.rx_length_errors + 1UL;
  } else {

  }
#line 1276
  return;
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_recover_rx_error(struct fst_card_info *card , struct fst_port_info *port ,
                                 unsigned char dmabits , int rxp , unsigned short len ) 
{ 
  int i ;
  int pi ;

  {
#line 1288
  pi = port->index;
#line 1294
  i = 0;
#line 1295
  goto ldv_32493;
  ldv_32492: 
#line 1296
  writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1297
  rxp = (rxp + 1) % 8;
#line 1298
  i = i + 1;
#line 1298
  if (i > 8) {
#line 1301
    goto ldv_32491;
  } else {

  }
#line 1303
  dmabits = readb((void const volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
  ldv_32493: ;
#line 1295
  if (((int )dmabits & 130) == 0) {
#line 1296
    goto ldv_32492;
  } else {

  }
  ldv_32491: ;
#line 1309
  if ((int )((signed char )dmabits) >= 0) {
#line 1310
    writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1311
    rxp = (rxp + 1) % 8;
  } else {

  }
#line 1313
  port->rxpos = rxp;
#line 1314
  return;
}
}
#line 1321 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_intr_rx(struct fst_card_info *card , struct fst_port_info *port ) 
{ 
  unsigned char dmabits ;
  int pi ;
  int rxp ;
  int rx_status ;
  unsigned short len ;
  struct sk_buff *skb ;
  struct net_device *dev ;
  unsigned char *tmp ;

  {
#line 1329
  dev = port->dev;
#line 1332
  pi = port->index;
#line 1333
  rxp = port->rxpos;
#line 1334
  dmabits = readb((void const volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1335
  if ((int )((signed char )dmabits) < 0) {
#line 1338
    return;
  } else {

  }
#line 1340
  if (card->dmarx_in_progress != 0) {
#line 1341
    return;
  } else {

  }
#line 1345
  len = readw((void const volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 6UL)));
#line 1347
  len = (unsigned int )len + 65534U;
#line 1348
  if ((unsigned int )len == 0U) {
#line 1353
    printk("<3>farsync: Frame received with 0 length. Card %d Port %d\n", card->card_no,
           port->index);
#line 1356
    writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1358
    rxp = (rxp + 1) % 8;
#line 1359
    port->rxpos = rxp;
#line 1360
    return;
  } else {

  }
#line 1368
  if ((unsigned int )dmabits != 3U || (unsigned int )len > 8190U) {
#line 1369
    fst_log_rx_error(card, port, (int )dmabits, rxp, (int )len);
#line 1370
    fst_recover_rx_error(card, port, (int )dmabits, rxp, (int )len);
#line 1371
    return;
  } else {

  }
#line 1375
  skb = dev_alloc_skb((unsigned int )len);
#line 1375
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 1378
    dev->stats.rx_dropped = dev->stats.rx_dropped + 1UL;
#line 1381
    writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1383
    rxp = (rxp + 1) % 8;
#line 1384
    port->rxpos = rxp;
#line 1385
    return;
  } else {

  }
#line 1394
  if ((unsigned int )len <= 63U || card->family == 0) {
#line 1395
    tmp = skb_put(skb, (unsigned int )len);
#line 1395
    memcpy_fromio((void *)tmp, (void const volatile   *)(card->mem + ((((unsigned long )pi + 1UL) * 8UL + (unsigned long )rxp) + 8UL) * 8192UL),
                  (size_t )len);
#line 1400
    writeb(128, (void volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )rxp) * 8UL + 3UL)));
#line 1403
    dev->stats.rx_packets = dev->stats.rx_packets + 1UL;
#line 1404
    dev->stats.rx_bytes = dev->stats.rx_bytes + (unsigned long )len;
#line 1408
    if (port->mode == 4) {
#line 1409
      skb->protocol = farsync_type_trans(skb, dev);
    } else {
#line 1411
      skb->protocol = hdlc_type_trans(skb, dev);
    }
#line 1412
    rx_status = netif_rx(skb);
#line 1413
    fst_process_rx_status(rx_status, (char *)(& (port->dev)->name));
#line 1414
    if (rx_status == 1) {
#line 1415
      dev->stats.rx_dropped = dev->stats.rx_dropped + 1UL;
    } else {

    }
  } else {
#line 1417
    card->dma_skb_rx = skb;
#line 1418
    card->dma_port_rx = port;
#line 1419
    card->dma_len_rx = (int )len;
#line 1420
    card->dma_rxpos = rxp;
#line 1421
    fst_rx_dma(card, card->rx_dma_handle_card, (dma_addr_t )(((((unsigned long )pi + 1UL) * 8UL + (unsigned long )rxp) + 8UL) * 8192UL),
               (int )len);
  }
#line 1428
  rxp = (rxp + 1) % 8;
#line 1429
  port->rxpos = rxp;
#line 1430
  return;
}
}
#line 1438 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void do_bottom_half_tx(struct fst_card_info *card ) 
{ 
  struct fst_port_info *port ;
  int pi ;
  int txq_length ;
  struct sk_buff *skb ;
  unsigned long flags ;
  struct net_device *dev ;
  size_t __len ;
  void *__ret ;
  unsigned char tmp ;

  {
#line 1453
  pi = 0;
#line 1453
  port = (struct fst_port_info *)(& card->ports);
#line 1453
  goto ldv_32522;
  ldv_32521: ;
#line 1454
  if (port->run == 0) {
#line 1455
    goto ldv_32514;
  } else {

  }
#line 1457
  dev = port->dev;
#line 1458
  goto ldv_32520;
  ldv_32519: 
#line 1466
  ldv___ldv_spin_lock_48(& card->card_lock);
#line 1467
  txq_length = port->txqe - port->txqs;
#line 1467
  if (txq_length < 0) {
#line 1472
    txq_length = txq_length + 16;
  } else {

  }
#line 1474
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1475
  if (txq_length > 0) {
#line 1479
    ldv___ldv_spin_lock_50(& card->card_lock);
#line 1480
    skb = port->txq[port->txqs];
#line 1481
    port->txqs = port->txqs + 1;
#line 1482
    if (port->txqs == 16) {
#line 1483
      port->txqs = 0;
    } else {

    }
#line 1485
    ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 1490
    writew(- ((int )((unsigned short )skb->len)), (void volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )port->txpos) * 8UL + 4UL)));
#line 1492
    if (skb->len <= 63U || card->family == 0) {
#line 1495
      memcpy_toio((void volatile   *)(card->mem + (((unsigned long )pi * 2UL + (unsigned long )port->txpos) + 8UL) * 8192UL),
                  (void const   *)skb->data, (size_t )skb->len);
#line 1500
      writeb(131, (void volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )port->txpos) * 8UL + 3UL)));
#line 1504
      dev->stats.tx_packets = dev->stats.tx_packets + 1UL;
#line 1505
      dev->stats.tx_bytes = dev->stats.tx_bytes + (unsigned long )skb->len;
#line 1506
      dev->trans_start = jiffies;
    } else {
#line 1509
      __len = (size_t )skb->len;
#line 1509
      __ret = __builtin_memcpy(card->tx_dma_handle_host, (void const   *)skb->data,
                               __len);
#line 1511
      card->dma_port_tx = port;
#line 1512
      card->dma_len_tx = (int )skb->len;
#line 1513
      card->dma_txpos = port->txpos;
#line 1514
      fst_tx_dma(card, (unsigned char *)card->tx_dma_handle_card, (unsigned char *)((((unsigned long )pi * 2UL + (unsigned long )port->txpos) + 8UL) * 8192UL),
                 (int )skb->len);
    }
#line 1522
    port->txpos = port->txpos + 1;
#line 1522
    if (port->txpos > 1) {
#line 1523
      port->txpos = 0;
    } else {

    }
#line 1527
    if (port->start != 0) {
#line 1528
      if (txq_length < fst_txq_low) {
#line 1529
        netif_wake_queue(port->dev);
#line 1531
        port->start = 0;
      } else {

      }
    } else {

    }
#line 1534
    consume_skb(skb);
  } else {
#line 1539
    goto ldv_32518;
  }
  ldv_32520: 
#line 1458
  tmp = readb((void const volatile   *)card->mem + (8192UL + ((((unsigned long )pi + 16UL) * 2UL + (unsigned long )port->txpos) * 8UL + 3UL)));
#line 1458
  if ((int )((signed char )tmp) >= 0 && card->dmatx_in_progress == 0) {
#line 1461
    goto ldv_32519;
  } else {

  }
  ldv_32518: ;
  ldv_32514: 
#line 1453
  pi = pi + 1;
#line 1453
  port = port + 1;
  ldv_32522: ;
#line 1453
  if ((unsigned int )pi < card->nports) {
#line 1454
    goto ldv_32521;
  } else {

  }

#line 1458
  return;
}
}
#line 1546 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void do_bottom_half_rx(struct fst_card_info *card ) 
{ 
  struct fst_port_info *port ;
  int pi ;
  int rx_count ;
  unsigned char tmp ;

  {
#line 1550
  rx_count = 0;
#line 1554
  pi = 0;
#line 1554
  port = (struct fst_port_info *)(& card->ports);
#line 1554
  goto ldv_32535;
  ldv_32534: ;
#line 1555
  if (port->run == 0) {
#line 1556
    goto ldv_32530;
  } else {

  }
#line 1558
  goto ldv_32533;
  ldv_32532: ;
#line 1560
  if (rx_count > fst_max_reads) {
#line 1565
    fst_q_work_item(& fst_work_intq, card->card_no);
#line 1566
    tasklet_schedule(& fst_int_task);
#line 1567
    goto ldv_32531;
  } else {

  }
#line 1569
  fst_intr_rx(card, port);
#line 1570
  rx_count = rx_count + 1;
  ldv_32533: 
#line 1558
  tmp = readb((void const volatile   *)card->mem + (8192UL + (((unsigned long )pi * 8UL + (unsigned long )port->rxpos) * 8UL + 3UL)));
#line 1558
  if ((int )((signed char )tmp) >= 0 && card->dmarx_in_progress == 0) {
#line 1560
    goto ldv_32532;
  } else {

  }
  ldv_32531: ;
  ldv_32530: 
#line 1554
  pi = pi + 1;
#line 1554
  port = port + 1;
  ldv_32535: ;
#line 1554
  if ((unsigned int )pi < card->nports) {
#line 1555
    goto ldv_32534;
  } else {

  }

#line 1559
  return;
}
}
#line 1580 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static irqreturn_t fst_intr(int dummy , void *dev_id ) 
{ 
  struct fst_card_info *card ;
  struct fst_port_info *port ;
  int rdidx ;
  int wridx ;
  int event ;
  unsigned int dma_intcsr ;
  unsigned int do_card_interrupt ;
  unsigned int int_retry_count ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  unsigned char tmp___2 ;

  {
#line 1582
  card = (struct fst_card_info *)dev_id;
#line 1587
  dma_intcsr = 0U;
#line 1597
  if (card->state != 4U) {
#line 1598
    printk("<3>farsync: Interrupt received for card %d in a non running state (%d)\n",
           card->card_no, card->state);
#line 1606
    fst_clear_intr(card);
#line 1607
    return (IRQ_HANDLED);
  } else {

  }
#line 1611
  fst_clear_intr(card);
#line 1616
  do_card_interrupt = 0U;
#line 1617
  tmp = readb((void const volatile   *)card->mem + 18753U);
#line 1617
  if ((unsigned int )tmp == 1U) {
#line 1618
    do_card_interrupt = do_card_interrupt + 4U;
#line 1620
    writeb(238, (void volatile   *)card->mem + 18753U);
  } else {

  }
#line 1622
  if (card->family == 1) {
#line 1626
    dma_intcsr = inl((int )card->pci_conf + 104);
#line 1627
    if ((dma_intcsr & 2097152U) != 0U) {
#line 1632
      outb(8, (int )card->pci_conf + 168);
#line 1633
      fst_rx_dma_complete(card, card->dma_port_rx, card->dma_len_rx, card->dma_skb_rx,
                          card->dma_rxpos);
#line 1636
      card->dmarx_in_progress = 0;
#line 1637
      do_card_interrupt = do_card_interrupt + 1U;
    } else {

    }
#line 1639
    if ((dma_intcsr & 4194304U) != 0U) {
#line 1644
      outb(8, (int )card->pci_conf + 169);
#line 1645
      fst_tx_dma_complete(card, card->dma_port_tx, card->dma_len_tx, card->dma_txpos);
#line 1647
      card->dmatx_in_progress = 0;
#line 1648
      do_card_interrupt = do_card_interrupt + 2U;
    } else {

    }
  } else {

  }
#line 1655
  int_retry_count = readl((void const volatile   *)card->mem + 18964U);
#line 1656
  if (int_retry_count != 0U) {
#line 1659
    writel(0U, (void volatile   *)card->mem + 18964U);
  } else {

  }
#line 1662
  if (do_card_interrupt == 0U) {
#line 1663
    return (IRQ_HANDLED);
  } else {

  }
#line 1667
  fst_q_work_item(& fst_work_intq, card->card_no);
#line 1668
  tasklet_schedule(& fst_int_task);
#line 1671
  tmp___0 = readb((void const volatile   *)card->mem + 18784U);
#line 1671
  rdidx = (int )tmp___0 & 31;
#line 1672
  tmp___1 = readb((void const volatile   *)card->mem + 18785U);
#line 1672
  wridx = (int )tmp___1 & 31;
#line 1673
  goto ldv_32567;
  ldv_32566: 
#line 1674
  tmp___2 = readb((void const volatile   *)card->mem + (18786UL + (unsigned long )rdidx));
#line 1674
  event = (int )tmp___2;
#line 1675
  port = (struct fst_port_info *)(& card->ports) + ((unsigned long )event & 3UL);
#line 1679
  switch (event) {
  case 48: ;
#line 1682
  if (port->run != 0) {
#line 1683
    fst_intr_te1_alarm(card, port);
  } else {

  }
#line 1684
  goto ldv_32550;
  case 24: ;
  case 25: ;
  case 26: ;
  case 27: ;
#line 1690
  if (port->run != 0) {
#line 1691
    fst_intr_ctlchg(card, port);
  } else {

  }
#line 1692
  goto ldv_32550;
  case 36: ;
  case 37: ;
  case 38: ;
  case 39: ;
#line 1699
  goto ldv_32550;
  case 40: ;
  case 41: ;
  case 42: ;
  case 43: 
#line 1709
  (port->dev)->stats.tx_errors = (port->dev)->stats.tx_errors + 1UL;
#line 1710
  (port->dev)->stats.tx_fifo_errors = (port->dev)->stats.tx_fifo_errors + 1UL;
#line 1713
  goto ldv_32550;
  case 32: ;
#line 1717
  goto ldv_32550;
  case 33: 
#line 1721
  card->state = 7U;
#line 1722
  goto ldv_32550;
  default: 
#line 1725
  printk("<3>farsync: intr: unknown card event %d. ignored\n", event);
#line 1726
  goto ldv_32550;
  }
  ldv_32550: 
#line 1730
  rdidx = rdidx + 1;
#line 1730
  if (rdidx > 31) {
#line 1731
    rdidx = 0;
  } else {

  }
  ldv_32567: ;
#line 1673
  if (rdidx != wridx) {
#line 1674
    goto ldv_32566;
  } else {

  }
#line 1733
  writeb((int )((unsigned char )rdidx), (void volatile   *)card->mem + 18784U);
#line 1734
  return (IRQ_HANDLED);
}
}
#line 1741 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void check_started_ok(struct fst_card_info *card ) 
{ 
  int i ;
  unsigned short tmp ;
  unsigned short tmp___0 ;
  unsigned int tmp___1 ;
  unsigned char tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;

  {
#line 1746
  tmp___0 = readw((void const volatile   *)card->mem + 18754U);
#line 1746
  if ((unsigned int )tmp___0 != 24U) {
#line 1747
    tmp = readw((void const volatile   *)card->mem + 18754U);
#line 1747
    printk("<3>farsync: Bad shared memory version %d expected %d\n", (int )tmp, 24);
#line 1749
    card->state = 5U;
#line 1750
    return;
  } else {

  }
#line 1752
  tmp___1 = readl((void const volatile   *)card->mem + 19344U);
#line 1752
  if (tmp___1 != 305419896U) {
#line 1753
    printk("<3>farsync: Missing shared memory signature\n");
#line 1754
    card->state = 5U;
#line 1755
    return;
  } else {

  }
#line 1758
  tmp___2 = readb((void const volatile   *)card->mem + 18752U);
#line 1758
  i = (int )tmp___2;
#line 1758
  if (i == 1) {
#line 1759
    card->state = 4U;
  } else
#line 1760
  if (i == 255) {
#line 1761
    printk("<3>farsync: Firmware initialisation failed. Card halted\n");
#line 1762
    card->state = 6U;
#line 1763
    return;
  } else
#line 1764
  if (i != 0) {
#line 1765
    printk("<3>farsync: Unknown firmware status 0x%x\n", i);
#line 1766
    card->state = 6U;
#line 1767
    return;
  } else {

  }
#line 1774
  tmp___4 = readl((void const volatile   *)card->mem + 19080U);
#line 1774
  if (tmp___4 != card->nports) {
#line 1775
    tmp___3 = readl((void const volatile   *)card->mem + 19080U);
#line 1775
    printk("<4>farsync: Port count mismatch on card %d. Firmware thinks %d we say %d\n",
           card->card_no, tmp___3, card->nports);
  } else {

  }
#line 1776
  return;
}
}
#line 1783 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int set_conf_from_info(struct fst_card_info *card , struct fst_port_info *port ,
                              struct fstioc_info *info ) 
{ 
  int err ;
  unsigned char my_framing ;

  {
#line 1793
  err = 0;
#line 1794
  if ((info->valid & 512U) != 0U) {
#line 1795
    if ((unsigned int )info->proto == 4U) {
#line 1796
      port->mode = 4;
    } else {
#line 1798
      port->mode = 5;
    }
  } else {

  }
#line 1801
  if ((info->valid & 64U) != 0U) {
#line 1802
    err = -22;
  } else {

  }
#line 1804
  if ((info->valid & 32U) != 0U) {
#line 1805
    err = -22;
  } else {

  }
#line 1807
  if ((info->valid & 2048U) != 0U) {
#line 1808
    writeb((int )info->invertClock, (void volatile   *)card->mem + (8192UL + ((unsigned long )port->index * 16UL + 10663UL)));
  } else {

  }
#line 1810
  if ((info->valid & 1024U) != 0U) {
#line 1811
    writew((int )info->cardMode, (void volatile   *)card->mem + 19212U);
  } else {

  }
#line 1812
  if ((info->valid & 4096U) != 0U) {
#line 1813
    writel(info->lineSpeed, (void volatile   *)card->mem + 19216U);
#line 1814
    writeb((int )info->clockSource, (void volatile   *)card->mem + 19220U);
#line 1815
    my_framing = 0U;
#line 1816
    if ((unsigned int )info->framing == 6U) {
#line 1817
      my_framing = 0U;
    } else {

    }
#line 1818
    if ((unsigned int )info->framing == 5U) {
#line 1819
      my_framing = 2U;
    } else {

    }
#line 1820
    if ((unsigned int )info->framing == 7U) {
#line 1821
      my_framing = 1U;
    } else {

    }
#line 1822
    writeb((int )my_framing, (void volatile   *)card->mem + 19221U);
#line 1823
    writeb((int )info->structure, (void volatile   *)card->mem + 19222U);
#line 1824
    writeb((int )info->interface, (void volatile   *)card->mem + 19223U);
#line 1825
    writeb((int )info->coding, (void volatile   *)card->mem + 19224U);
#line 1826
    writeb((int )info->lineBuildOut, (void volatile   *)card->mem + 19225U);
#line 1827
    writeb((int )info->equalizer, (void volatile   *)card->mem + 19226U);
#line 1828
    writeb((int )info->transparentMode, (void volatile   *)card->mem + 19227U);
#line 1829
    writeb((int )info->loopMode, (void volatile   *)card->mem + 19228U);
#line 1830
    writeb((int )info->range, (void volatile   *)card->mem + 19229U);
#line 1831
    writeb((int )info->txBufferMode, (void volatile   *)card->mem + 19230U);
#line 1832
    writeb((int )info->rxBufferMode, (void volatile   *)card->mem + 19231U);
#line 1833
    writeb((int )info->startingSlot, (void volatile   *)card->mem + 19232U);
#line 1834
    writeb((int )info->losThreshold, (void volatile   *)card->mem + 19233U);
#line 1835
    if ((unsigned int )info->idleCode != 0U) {
#line 1836
      writeb(1, (void volatile   *)card->mem + 19234U);
    } else {
#line 1838
      writeb(0, (void volatile   *)card->mem + 19234U);
    }
#line 1839
    writeb((int )info->idleCode, (void volatile   *)card->mem + 19235U);
  } else {

  }
#line 1869
  return (err);
}
}
#line 1873 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void gather_conf_info(struct fst_card_info *card , struct fst_port_info *port ,
                             struct fstioc_info *info ) 
{ 
  int i ;
  unsigned char tmp ;
  unsigned int tmp___0 ;
  unsigned char tmp___1 ;
  unsigned char tmp___2 ;
  unsigned char tmp___3 ;

  {
#line 1878
  memset((void *)info, 0, 104UL);
#line 1880
  i = port->index;
#line 1881
  info->kernelVersion = 132643UL;
#line 1882
  info->nports = card->nports;
#line 1883
  info->type = card->type;
#line 1884
  info->state = card->state;
#line 1885
  info->proto = 5U;
#line 1886
  info->index = (unsigned int )i;
#line 1894
  info->valid = card->state == 4U ? 8191U : 256U;
#line 1900
  info->lineInterface = readw((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 1901
  info->internalClock = readb((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10661UL)));
#line 1902
  info->lineSpeed = readl((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10670UL)));
#line 1903
  info->invertClock = readb((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10663UL)));
#line 1904
  info->v24IpSts = readl((void const volatile   *)card->mem + (18818UL + (unsigned long )i));
#line 1905
  info->v24OpSts = readl((void const volatile   *)card->mem + (18834UL + (unsigned long )i));
#line 1906
  info->clockStatus = readw((void const volatile   *)card->mem + (18914UL + (unsigned long )i));
#line 1907
  info->cableStatus = readw((void const volatile   *)card->mem + 18922U);
#line 1908
  info->cardMode = readw((void const volatile   *)card->mem + 19212U);
#line 1909
  info->smcFirmwareVersion = readl((void const volatile   *)card->mem + 18756U);
#line 1916
  if (card->family == 1) {
#line 1917
    if (port->index == 0) {
#line 1921
      info->cableStatus = (unsigned int )info->cableStatus & 1U;
    } else {
#line 1926
      info->cableStatus = (int )info->cableStatus >> 1;
#line 1927
      info->cableStatus = (unsigned int )info->cableStatus & 1U;
    }
  } else {

  }
#line 1933
  if (card->type == 6U) {
#line 1934
    info->lineSpeed = readl((void const volatile   *)card->mem + 19216U);
#line 1935
    info->clockSource = readb((void const volatile   *)card->mem + 19220U);
#line 1936
    info->framing = readb((void const volatile   *)card->mem + 19221U);
#line 1937
    info->structure = readb((void const volatile   *)card->mem + 19222U);
#line 1938
    info->interface = readb((void const volatile   *)card->mem + 19223U);
#line 1939
    info->coding = readb((void const volatile   *)card->mem + 19224U);
#line 1940
    info->lineBuildOut = readb((void const volatile   *)card->mem + 19225U);
#line 1941
    info->equalizer = readb((void const volatile   *)card->mem + 19226U);
#line 1942
    info->loopMode = readb((void const volatile   *)card->mem + 19228U);
#line 1943
    info->range = readb((void const volatile   *)card->mem + 19229U);
#line 1944
    info->txBufferMode = readb((void const volatile   *)card->mem + 19230U);
#line 1945
    info->rxBufferMode = readb((void const volatile   *)card->mem + 19231U);
#line 1946
    info->startingSlot = readb((void const volatile   *)card->mem + 19232U);
#line 1947
    info->losThreshold = readb((void const volatile   *)card->mem + 19233U);
#line 1948
    tmp = readb((void const volatile   *)card->mem + 19234U);
#line 1948
    if ((unsigned int )tmp != 0U) {
#line 1949
      info->idleCode = readb((void const volatile   *)card->mem + 19235U);
    } else {
#line 1951
      info->idleCode = 0U;
    }
#line 1952
    info->receiveBufferDelay = readl((void const volatile   *)card->mem + 19280U);
#line 1954
    info->framingErrorCount = readl((void const volatile   *)card->mem + 19284U);
#line 1956
    info->codeViolationCount = readl((void const volatile   *)card->mem + 19288U);
#line 1958
    info->crcErrorCount = readl((void const volatile   *)card->mem + 19292U);
#line 1959
    tmp___0 = readl((void const volatile   *)card->mem + 19296U);
#line 1959
    info->lineAttenuation = (int )tmp___0;
#line 1960
    tmp___1 = readb((void const volatile   *)card->mem + 19301U);
#line 1960
    info->lossOfSignal = (unsigned short )tmp___1;
#line 1961
    tmp___2 = readb((void const volatile   *)card->mem + 19302U);
#line 1961
    info->receiveRemoteAlarm = (unsigned short )tmp___2;
#line 1963
    tmp___3 = readb((void const volatile   *)card->mem + 19303U);
#line 1963
    info->alarmIndicationSignal = (unsigned short )tmp___3;
  } else {

  }
#line 1966
  return;
}
}
#line 1969 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_set_iface(struct fst_card_info *card , struct fst_port_info *port ,
                         struct ifreq *ifr ) 
{ 
  sync_serial_settings sync ;
  int i ;
  unsigned long tmp ;

  {
#line 1975
  if (ifr->ifr_ifru.ifru_settings.size != 12U) {
#line 1976
    return (-12);
  } else {

  }
#line 1979
  tmp = copy_from_user((void *)(& sync), (void const   *)ifr->ifr_ifru.ifru_settings.ifs_ifsu.sync,
                       12UL);
#line 1979
  if (tmp != 0UL) {
#line 1981
    return (-14);
  } else {

  }
#line 1984
  if ((unsigned int )sync.loopback != 0U) {
#line 1985
    return (-22);
  } else {

  }
#line 1987
  i = port->index;
#line 1989
  switch (ifr->ifr_ifru.ifru_settings.type) {
  case 4096U: 
#line 1991
  writew(3, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 1992
  port->hwif = 3;
#line 1993
  goto ldv_32594;
  case 4097U: 
#line 1996
  writew(1, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 1997
  port->hwif = 1;
#line 1998
  goto ldv_32594;
  case 4098U: 
#line 2001
  writew(2, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 2002
  port->hwif = 2;
#line 2003
  goto ldv_32594;
  case 4102U: 
#line 2006
  writew(4, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 2007
  port->hwif = 4;
#line 2008
  goto ldv_32594;
  case 4099U: 
#line 2011
  writew(5, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 2012
  port->hwif = 5;
#line 2013
  goto ldv_32594;
  case 4100U: 
#line 2016
  writew(6, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10658UL)));
#line 2017
  port->hwif = 6;
#line 2018
  goto ldv_32594;
  case 4101U: ;
#line 2021
  goto ldv_32594;
  default: ;
#line 2024
  return (-22);
  }
  ldv_32594: ;
#line 2027
  switch (sync.clock_type) {
  case 1U: 
#line 2029
  writeb(0, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10661UL)));
#line 2030
  goto ldv_32603;
  case 2U: 
#line 2033
  writeb(1, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10661UL)));
#line 2034
  goto ldv_32603;
  default: ;
#line 2037
  return (-22);
  }
  ldv_32603: 
#line 2039
  writel(sync.clock_rate, (void volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10670UL)));
#line 2040
  return (0);
}
}
#line 2044 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_get_iface(struct fst_card_info *card , struct fst_port_info *port ,
                         struct ifreq *ifr ) 
{ 
  sync_serial_settings sync ;
  int i ;
  unsigned char tmp ;
  int tmp___0 ;

  {
#line 2054
  switch (port->hwif) {
  case 6: 
#line 2056
  ifr->ifr_ifru.ifru_settings.type = 4100U;
#line 2057
  goto ldv_32614;
  case 5: 
#line 2059
  ifr->ifr_ifru.ifru_settings.type = 4099U;
#line 2060
  goto ldv_32614;
  case 3: 
#line 2062
  ifr->ifr_ifru.ifru_settings.type = 4096U;
#line 2063
  goto ldv_32614;
  case 1: 
#line 2065
  ifr->ifr_ifru.ifru_settings.type = 4097U;
#line 2066
  goto ldv_32614;
  case 4: 
#line 2068
  ifr->ifr_ifru.ifru_settings.type = 4102U;
#line 2069
  goto ldv_32614;
  case 2: ;
  default: 
#line 2072
  ifr->ifr_ifru.ifru_settings.type = 4098U;
#line 2073
  goto ldv_32614;
  }
  ldv_32614: ;
#line 2075
  if (ifr->ifr_ifru.ifru_settings.size == 0U) {
#line 2076
    return (0);
  } else {

  }
#line 2078
  if (ifr->ifr_ifru.ifru_settings.size <= 11U) {
#line 2079
    return (-12);
  } else {

  }
#line 2082
  i = port->index;
#line 2083
  sync.clock_rate = readl((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10670UL)));
#line 2085
  tmp = readb((void const volatile   *)card->mem + (8192UL + ((unsigned long )i * 16UL + 10661UL)));
#line 2085
  sync.clock_type = (unsigned int )tmp == 1U ? 2U : 1U;
#line 2087
  sync.loopback = 0U;
#line 2089
  tmp___0 = copy_to_user((void *)ifr->ifr_ifru.ifru_settings.ifs_ifsu.sync, (void const   *)(& sync),
                         12U);
#line 2089
  if (tmp___0 != 0) {
#line 2090
    return (-14);
  } else {

  }
#line 2093
  ifr->ifr_ifru.ifru_settings.size = 12U;
#line 2094
  return (0);
}
}
#line 2098 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_ioctl(struct net_device *dev , struct ifreq *ifr , int cmd ) 
{ 
  struct fst_card_info *card ;
  struct fst_port_info *port ;
  struct fstioc_write wrthdr ;
  struct fstioc_info info ;
  unsigned long flags ;
  void *buf ;
  struct hdlc_device *tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 2109
  tmp = dev_to_hdlc(dev);
#line 2109
  port = (struct fst_port_info *)tmp->priv;
#line 2110
  card = port->card;
#line 2112
  tmp___0 = capable(12);
#line 2112
  if (tmp___0 == 0) {
#line 2113
    return (-1);
  } else {

  }
#line 2115
  switch (cmd) {
  case 35323: 
#line 2117
  fst_cpureset(card);
#line 2118
  card->state = 1U;
#line 2119
  return (0);
  case 35324: 
#line 2122
  fst_cpurelease(card);
#line 2123
  card->state = 3U;
#line 2124
  return (0);
  case 35322: ;
#line 2131
  if ((unsigned long )ifr->ifr_ifru.ifru_data == (unsigned long )((void *)0)) {
#line 2132
    return (-22);
  } else {

  }
#line 2134
  tmp___1 = copy_from_user((void *)(& wrthdr), (void const   *)ifr->ifr_ifru.ifru_data,
                           8UL);
#line 2134
  if (tmp___1 != 0UL) {
#line 2136
    return (-14);
  } else {

  }
#line 2142
  if ((wrthdr.size > 1048576U || wrthdr.offset > 1048576U) || wrthdr.size + wrthdr.offset > 1048576U) {
#line 2144
    return (-6);
  } else {

  }
#line 2149
  buf = memdup_user((void const   *)ifr->ifr_ifru.ifru_data + 8U, (size_t )wrthdr.size);
#line 2151
  tmp___3 = IS_ERR((void const   *)buf);
#line 2151
  if (tmp___3 != 0L) {
#line 2152
    tmp___2 = PTR_ERR((void const   *)buf);
#line 2152
    return ((int )tmp___2);
  } else {

  }
#line 2154
  memcpy_toio((void volatile   *)card->mem + (unsigned long )wrthdr.offset, (void const   *)buf,
              (size_t )wrthdr.size);
#line 2155
  kfree((void const   *)buf);
#line 2160
  if (card->state == 1U) {
#line 2161
    card->state = 2U;
  } else {

  }
#line 2163
  return (0);
  case 35325: ;
#line 2170
  if (card->state == 3U) {
#line 2171
    check_started_ok(card);
#line 2174
    if (card->state == 4U) {
#line 2175
      ldv___ldv_spin_lock_52(& card->card_lock);
#line 2176
      fst_enable_intr(card);
#line 2177
      writeb(238, (void volatile   *)card->mem + 18753U);
#line 2178
      ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
    } else {

    }
  } else {

  }
#line 2182
  if ((unsigned long )ifr->ifr_ifru.ifru_data == (unsigned long )((void *)0)) {
#line 2183
    return (-22);
  } else {

  }
#line 2186
  gather_conf_info(card, port, & info);
#line 2188
  tmp___4 = copy_to_user(ifr->ifr_ifru.ifru_data, (void const   *)(& info), 104U);
#line 2188
  if (tmp___4 != 0) {
#line 2189
    return (-14);
  } else {

  }
#line 2191
  return (0);
  case 35326: ;
#line 2200
  if (card->state != 4U) {
#line 2201
    printk("<3>farsync: Attempt to configure card %d in non-running state (%d)\n",
           card->card_no, card->state);
#line 2203
    return (-5);
  } else {

  }
#line 2205
  tmp___5 = copy_from_user((void *)(& info), (void const   *)ifr->ifr_ifru.ifru_data,
                           104UL);
#line 2205
  if (tmp___5 != 0UL) {
#line 2206
    return (-14);
  } else {

  }
#line 2209
  tmp___6 = set_conf_from_info(card, port, & info);
#line 2209
  return (tmp___6);
  case 35146: ;
#line 2212
  switch (ifr->ifr_ifru.ifru_settings.type) {
  case 1U: 
#line 2214
  tmp___7 = fst_get_iface(card, port, ifr);
#line 2214
  return (tmp___7);
  case 4101U: ;
  case 4096U: ;
  case 4097U: ;
  case 4098U: ;
  case 4102U: ;
  case 4099U: ;
  case 4100U: 
#line 2223
  tmp___8 = fst_set_iface(card, port, ifr);
#line 2223
  return (tmp___8);
  case 8204U: 
#line 2226
  port->mode = 4;
#line 2227
  return (0);
  case 2U: ;
#line 2230
  if (port->mode == 4) {
#line 2231
    ifr->ifr_ifru.ifru_settings.type = 8204U;
#line 2232
    return (0);
  } else {

  }
#line 2234
  tmp___9 = hdlc_ioctl(dev, ifr, cmd);
#line 2234
  return (tmp___9);
  default: 
#line 2237
  port->mode = 5;
#line 2240
  tmp___10 = hdlc_ioctl(dev, ifr, cmd);
#line 2240
  return (tmp___10);
  }
  default: 
#line 2245
  tmp___11 = hdlc_ioctl(dev, ifr, cmd);
#line 2245
  return (tmp___11);
  }
}
}
#line 2250 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_openport(struct fst_port_info *port ) 
{ 
  int signals ;
  int txq_length ;
  unsigned int tmp ;

  {
#line 2258
  if ((port->card)->state == 4U) {
#line 2259
    if (port->run != 0) {
#line 2262
      fst_issue_cmd(port, 4);
#line 2263
      port->run = 0;
    } else {

    }
#line 2266
    fst_rx_config(port);
#line 2267
    fst_tx_config(port);
#line 2268
    fst_op_raise(port, 3U);
#line 2270
    fst_issue_cmd(port, 3);
#line 2271
    port->run = 1;
#line 2273
    tmp = readl((void const volatile   *)(port->card)->mem + (19000UL + (unsigned long )port->index));
#line 2273
    signals = (int )tmp;
#line 2274
    if (((port->hwif == 2 || port->hwif == 4 ? 1 : 4) & signals) != 0) {
#line 2276
      netif_carrier_on(port->dev);
    } else {
#line 2278
      netif_carrier_off(port->dev);
    }
#line 2280
    txq_length = port->txqe - port->txqs;
#line 2281
    port->txqe = 0;
#line 2282
    port->txqs = 0;
  } else {

  }
#line 2284
  return;
}
}
#line 2288 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_closeport(struct fst_port_info *port ) 
{ 


  {
#line 2290
  if ((port->card)->state == 4U) {
#line 2291
    if (port->run != 0) {
#line 2292
      port->run = 0;
#line 2293
      fst_op_lower(port, 3U);
#line 2295
      fst_issue_cmd(port, 4);
    } else {

    }
  } else {

  }
#line 2298
  return;
}
}
#line 2303 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_open(struct net_device *dev ) 
{ 
  int err ;
  struct fst_port_info *port ;
  struct hdlc_device *tmp ;
  int tmp___0 ;

  {
#line 2308
  tmp = dev_to_hdlc(dev);
#line 2308
  port = (struct fst_port_info *)tmp->priv;
#line 2309
  tmp___0 = try_module_get(& __this_module);
#line 2309
  if (tmp___0 == 0) {
#line 2310
    return (-16);
  } else {

  }
#line 2312
  if (port->mode != 4) {
#line 2313
    err = hdlc_open(dev);
#line 2314
    if (err != 0) {
#line 2315
      return (err);
    } else {

    }
  } else {

  }
#line 2318
  fst_openport(port);
#line 2319
  netif_wake_queue(dev);
#line 2320
  return (0);
}
}
#line 2324 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_close(struct net_device *dev ) 
{ 
  struct fst_port_info *port ;
  struct fst_card_info *card ;
  unsigned char tx_dma_done ;
  unsigned char rx_dma_done ;
  struct hdlc_device *tmp ;
  struct hdlc_device *tmp___0 ;

  {
#line 2331
  tmp = dev_to_hdlc(dev);
#line 2331
  port = (struct fst_port_info *)tmp->priv;
#line 2332
  card = port->card;
#line 2334
  tx_dma_done = inb((int )card->pci_conf + 169);
#line 2335
  rx_dma_done = inb((int )card->pci_conf + 168);
#line 2341
  netif_stop_queue(dev);
#line 2342
  tmp___0 = dev_to_hdlc(dev);
#line 2342
  fst_closeport((struct fst_port_info *)tmp___0->priv);
#line 2343
  if (port->mode != 4) {
#line 2344
    hdlc_close(dev);
  } else {

  }
#line 2346
  module_put(& __this_module);
#line 2347
  return (0);
}
}
#line 2351 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_attach(struct net_device *dev , unsigned short encoding , unsigned short parity ) 
{ 


  {
#line 2356
  if ((unsigned int )encoding != 1U || (unsigned int )parity != 5U) {
#line 2357
    return (-22);
  } else {

  }
#line 2358
  return (0);
}
}
#line 2362 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_tx_timeout(struct net_device *dev ) 
{ 
  struct fst_port_info *port ;
  struct fst_card_info *card ;
  struct hdlc_device *tmp ;

  {
#line 2367
  tmp = dev_to_hdlc(dev);
#line 2367
  port = (struct fst_port_info *)tmp->priv;
#line 2368
  card = port->card;
#line 2369
  dev->stats.tx_errors = dev->stats.tx_errors + 1UL;
#line 2370
  dev->stats.tx_aborted_errors = dev->stats.tx_aborted_errors + 1UL;
#line 2373
  fst_issue_cmd(port, 5);
#line 2375
  dev->trans_start = jiffies;
#line 2376
  netif_wake_queue(dev);
#line 2377
  port->start = 0;
#line 2378
  return;
}
}
#line 2381 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static netdev_tx_t fst_start_xmit(struct sk_buff *skb , struct net_device *dev ) 
{ 
  struct fst_card_info *card ;
  struct fst_port_info *port ;
  unsigned long flags ;
  int txq_length ;
  struct hdlc_device *tmp ;
  int tmp___0 ;

  {
#line 2388
  tmp = dev_to_hdlc(dev);
#line 2388
  port = (struct fst_port_info *)tmp->priv;
#line 2389
  card = port->card;
#line 2393
  tmp___0 = netif_carrier_ok((struct net_device  const  *)dev);
#line 2393
  if (tmp___0 == 0) {
#line 2394
    consume_skb(skb);
#line 2395
    dev->stats.tx_errors = dev->stats.tx_errors + 1UL;
#line 2396
    dev->stats.tx_carrier_errors = dev->stats.tx_carrier_errors + 1UL;
#line 2400
    return (NETDEV_TX_OK);
  } else {

  }
#line 2404
  if (skb->len > 8192U) {
#line 2407
    consume_skb(skb);
#line 2408
    dev->stats.tx_errors = dev->stats.tx_errors + 1UL;
#line 2409
    return (NETDEV_TX_OK);
  } else {

  }
#line 2417
  ldv___ldv_spin_lock_54(& card->card_lock);
#line 2418
  txq_length = port->txqe - port->txqs;
#line 2418
  if (txq_length < 0) {
#line 2423
    txq_length = txq_length + 16;
  } else {

  }
#line 2425
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 2426
  if (txq_length > fst_txq_high) {
#line 2431
    netif_stop_queue(dev);
#line 2432
    port->start = 1;
  } else {

  }
#line 2435
  if (txq_length == 15) {
#line 2439
    consume_skb(skb);
#line 2440
    dev->stats.tx_errors = dev->stats.tx_errors + 1UL;
#line 2443
    return (NETDEV_TX_OK);
  } else {

  }
#line 2449
  ldv___ldv_spin_lock_56(& card->card_lock);
#line 2450
  port->txq[port->txqe] = skb;
#line 2451
  port->txqe = port->txqe + 1;
#line 2452
  if (port->txqe == 16) {
#line 2453
    port->txqe = 0;
  } else {

  }
#line 2454
  ldv_spin_unlock_irqrestore_41(& card->card_lock, flags);
#line 2457
  fst_q_work_item(& fst_work_txq, card->card_no);
#line 2458
  tasklet_schedule(& fst_tx_task);
#line 2460
  return (NETDEV_TX_OK);
}
}
#line 2470 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static char *type_strings[7U]  = {      (char *)"no hardware",      (char *)"FarSync T2P",      (char *)"FarSync T4P",      (char *)"FarSync T1U", 
        (char *)"FarSync T2U",      (char *)"FarSync T4U",      (char *)"FarSync TE1"};
#line 2481 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_init_card(struct fst_card_info *card ) 
{ 
  int i ;
  int err ;
  int j ;

  {
#line 2490
  i = 0;
#line 2490
  goto ldv_32700;
  ldv_32699: 
#line 2491
  err = register_netdev(card->ports[i].dev);
#line 2492
  if (err < 0) {
#line 2494
    printk("<3>farsync: Cannot register HDLC device for port %d (errno %d)\n", i,
           - err);
#line 2496
    j = i;
#line 2496
    goto ldv_32696;
    ldv_32695: 
#line 2497
    free_netdev(card->ports[j].dev);
#line 2498
    card->ports[j].dev = 0;
#line 2496
    j = j + 1;
    ldv_32696: ;
#line 2496
    if ((unsigned int )j < card->nports) {
#line 2497
      goto ldv_32695;
    } else {

    }
#line 2500
    card->nports = (unsigned int )i;
#line 2501
    goto ldv_32698;
  } else {

  }
#line 2490
  i = i + 1;
  ldv_32700: ;
#line 2490
  if ((unsigned int )i < card->nports) {
#line 2491
    goto ldv_32699;
  } else {

  }
  ldv_32698: 
#line 2505
  printk("<6>farsync: %s-%s: %s IRQ%d, %d ports\n", (char *)(& (((struct fst_port_info *)(& card->ports))->dev)->name),
         (char *)(& (((struct fst_port_info *)(& card->ports) + (unsigned long )(card->nports - 1U))->dev)->name),
         type_strings[card->type], card->irq, card->nports);
#line 2506
  return;
}
}
#line 2511 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct net_device_ops  const  fst_ops  = 
#line 2511
     {0, 0, & fst_open, & fst_close, & hdlc_start_xmit, 0, 0, 0, 0, 0, 0, & fst_ioctl,
    0, & hdlc_change_mtu, 0, & fst_tx_timeout, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0};
#line 2525 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_add_one(struct pci_dev *pdev , struct pci_device_id  const  *ent ) 
{ 
  int no_of_cards_added ;
  struct fst_card_info *card ;
  int err ;
  int i ;
  bool __print_once ;
  void *tmp ;
  char *tmp___0 ;
  void *tmp___1 ;
  char *tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct lock_class_key __key ;
  struct net_device *dev ;
  struct net_device *tmp___5 ;
  hdlc_device *hdlc ;
  int tmp___6 ;
  struct hdlc_device *tmp___7 ;
  int tmp___8 ;

  {
#line 2527
  no_of_cards_added = 0;
#line 2529
  err = 0;
#line 2532
  if (! __print_once) {
#line 2532
    __print_once = 1;
#line 2532
    printk("<6>farsync: FarSync WAN driver 1.04 (c) 2001-2004 FarSite Communications Ltd.\n");
  } else {

  }
#line 2542
  if (fst_excluded_cards != 0) {
#line 2547
    i = 0;
#line 2547
    goto ldv_32712;
    ldv_32711: ;
#line 2548
    if (pdev->devfn >> 3 == (unsigned int )fst_excluded_list[i]) {
#line 2549
      printk("<6>farsync: FarSync PCI device %d not assigned\n", pdev->devfn >> 3);
#line 2551
      return (-16);
    } else {

    }
#line 2547
    i = i + 1;
    ldv_32712: ;
#line 2547
    if (i < fst_excluded_cards) {
#line 2548
      goto ldv_32711;
    } else {

    }

  } else {

  }
#line 2557
  tmp = kzalloc(992UL, 208U);
#line 2557
  card = (struct fst_card_info *)tmp;
#line 2558
  if ((unsigned long )card == (unsigned long )((struct fst_card_info *)0)) {
#line 2559
    printk("<3>farsync: FarSync card found but insufficient memory for driver storage\n");
#line 2560
    return (-12);
  } else {

  }
#line 2564
  err = pci_enable_device(pdev);
#line 2564
  if (err != 0) {
#line 2565
    printk("<3>farsync: Failed to enable card. Err %d\n", - err);
#line 2566
    kfree((void const   *)card);
#line 2567
    return (err);
  } else {

  }
#line 2570
  err = pci_request_regions(pdev, "FarSync");
#line 2570
  if (err != 0) {
#line 2571
    printk("<3>farsync: Failed to allocate regions. Err %d\n", - err);
#line 2572
    pci_disable_device(pdev);
#line 2573
    kfree((void const   *)card);
#line 2574
    return (err);
  } else {

  }
#line 2578
  card->pci_conf = (unsigned short )pdev->resource[1].start;
#line 2579
  card->phys_mem = (unsigned int )pdev->resource[2].start;
#line 2580
  card->phys_ctlmem = (unsigned int )pdev->resource[3].start;
#line 2581
  tmp___1 = ioremap((resource_size_t )card->phys_mem, 1048576UL);
#line 2581
  tmp___0 = (char *)tmp___1;
#line 2581
  card->mem = tmp___0;
#line 2581
  if ((unsigned long )tmp___0 == (unsigned long )((char *)0)) {
#line 2582
    printk("<3>farsync: Physical memory remap failed\n");
#line 2583
    pci_release_regions(pdev);
#line 2584
    pci_disable_device(pdev);
#line 2585
    kfree((void const   *)card);
#line 2586
    return (-19);
  } else {

  }
#line 2588
  tmp___3 = ioremap((resource_size_t )card->phys_ctlmem, 16UL);
#line 2588
  tmp___2 = (char *)tmp___3;
#line 2588
  card->ctlmem = tmp___2;
#line 2588
  if ((unsigned long )tmp___2 == (unsigned long )((char *)0)) {
#line 2589
    printk("<3>farsync: Control memory remap failed\n");
#line 2590
    pci_release_regions(pdev);
#line 2591
    pci_disable_device(pdev);
#line 2592
    kfree((void const   *)card);
#line 2593
    return (-19);
  } else {

  }
#line 2598
  tmp___4 = request_irq(pdev->irq, & fst_intr, 128UL, "farsync", (void *)card);
#line 2598
  if (tmp___4 != 0) {
#line 2599
    printk("<3>farsync: Unable to register interrupt %d\n", card->irq);
#line 2600
    pci_release_regions(pdev);
#line 2601
    pci_disable_device(pdev);
#line 2602
    iounmap((void volatile   *)card->ctlmem);
#line 2603
    iounmap((void volatile   *)card->mem);
#line 2604
    kfree((void const   *)card);
#line 2605
    return (-19);
  } else {

  }
#line 2609
  card->irq = pdev->irq;
#line 2610
  card->type = (unsigned int )ent->driver_data;
#line 2611
  card->family = (unsigned long )ent->driver_data != 1UL && (unsigned long )ent->driver_data != 2UL;
#line 2614
  if ((unsigned long )ent->driver_data == 3UL || (unsigned long )ent->driver_data == 6UL) {
#line 2616
    card->nports = 1U;
  } else {
#line 2618
    card->nports = (unsigned long )ent->driver_data == 1UL || (unsigned long )ent->driver_data == 4UL ? 2U : 4U;
  }
#line 2621
  card->state = 0U;
#line 2622
  spinlock_check(& card->card_lock);
#line 2622
  __raw_spin_lock_init(& card->card_lock.ldv_5722.rlock, "&(&card->card_lock)->rlock",
                       & __key);
#line 2624
  i = 0;
#line 2624
  goto ldv_32721;
  ldv_32720: 
#line 2625
  tmp___5 = alloc_hdlcdev((void *)(& card->ports) + (unsigned long )i);
#line 2625
  dev = tmp___5;
#line 2627
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
#line 2628
    goto ldv_32718;
    ldv_32717: 
#line 2629
    free_netdev(card->ports[i].dev);
    ldv_32718: 
#line 2628
    tmp___6 = i;
#line 2628
    i = i - 1;
#line 2628
    if (tmp___6 != 0) {
#line 2629
      goto ldv_32717;
    } else {

    }
#line 2630
    printk("<3>farsync: FarSync: out of memory\n");
#line 2631
    free_irq(card->irq, (void *)card);
#line 2632
    pci_release_regions(pdev);
#line 2633
    pci_disable_device(pdev);
#line 2634
    iounmap((void volatile   *)card->ctlmem);
#line 2635
    iounmap((void volatile   *)card->mem);
#line 2636
    kfree((void const   *)card);
#line 2637
    return (-19);
  } else {

  }
#line 2639
  card->ports[i].dev = dev;
#line 2640
  card->ports[i].card = card;
#line 2641
  card->ports[i].index = i;
#line 2642
  card->ports[i].run = 0;
#line 2644
  tmp___7 = dev_to_hdlc(dev);
#line 2644
  hdlc = tmp___7;
#line 2651
  dev->mem_start = (unsigned long )card->phys_mem + ((unsigned long )i + 4UL) * 16384UL;
#line 2653
  dev->mem_end = (unsigned long )card->phys_mem + ((unsigned long )i + 5UL) * 16384UL;
#line 2655
  dev->base_addr = (unsigned long )card->pci_conf;
#line 2656
  dev->irq = card->irq;
#line 2658
  dev->netdev_ops = & fst_ops;
#line 2659
  dev->tx_queue_len = 100UL;
#line 2660
  dev->watchdog_timeo = 500;
#line 2661
  hdlc->attach = & fst_attach;
#line 2662
  hdlc->xmit = & fst_start_xmit;
#line 2624
  i = i + 1;
  ldv_32721: ;
#line 2624
  if ((unsigned int )i < card->nports) {
#line 2625
    goto ldv_32720;
  } else {

  }
#line 2665
  card->device = pdev;
#line 2673
  fst_cpureset(card);
#line 2674
  card->state = 1U;
#line 2677
  fst_init_dma(card);
#line 2680
  pci_set_drvdata(pdev, (void *)card);
#line 2683
  fst_card_array[no_of_cards_added] = card;
#line 2684
  tmp___8 = no_of_cards_added;
#line 2684
  no_of_cards_added = no_of_cards_added + 1;
#line 2684
  card->card_no = tmp___8;
#line 2685
  fst_init_card(card);
#line 2686
  if (card->family == 1) {
#line 2690
    card->rx_dma_handle_host = pci_alloc_consistent(card->device, 8000UL, & card->rx_dma_handle_card);
#line 2693
    if ((unsigned long )card->rx_dma_handle_host == (unsigned long )((void *)0)) {
#line 2694
      printk("<3>farsync: Could not allocate rx dma buffer\n");
#line 2695
      fst_disable_intr(card);
#line 2696
      pci_release_regions(pdev);
#line 2697
      pci_disable_device(pdev);
#line 2698
      iounmap((void volatile   *)card->ctlmem);
#line 2699
      iounmap((void volatile   *)card->mem);
#line 2700
      kfree((void const   *)card);
#line 2701
      return (-12);
    } else {

    }
#line 2703
    card->tx_dma_handle_host = pci_alloc_consistent(card->device, 8000UL, & card->tx_dma_handle_card);
#line 2706
    if ((unsigned long )card->tx_dma_handle_host == (unsigned long )((void *)0)) {
#line 2707
      printk("<3>farsync: Could not allocate tx dma buffer\n");
#line 2708
      fst_disable_intr(card);
#line 2709
      pci_release_regions(pdev);
#line 2710
      pci_disable_device(pdev);
#line 2711
      iounmap((void volatile   *)card->ctlmem);
#line 2712
      iounmap((void volatile   *)card->mem);
#line 2713
      kfree((void const   *)card);
#line 2714
      return (-12);
    } else {

    }
  } else {

  }
#line 2717
  return (0);
}
}
#line 2724 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_remove_one(struct pci_dev *pdev ) 
{ 
  struct fst_card_info *card ;
  int i ;
  void *tmp ;
  struct net_device *dev ;

  {
#line 2729
  tmp = pci_get_drvdata(pdev);
#line 2729
  card = (struct fst_card_info *)tmp;
#line 2731
  i = 0;
#line 2731
  goto ldv_32730;
  ldv_32729: 
#line 2732
  dev = ((struct fst_port_info *)(& card->ports) + (unsigned long )i)->dev;
#line 2733
  unregister_hdlc_device(dev);
#line 2731
  i = i + 1;
  ldv_32730: ;
#line 2731
  if ((unsigned int )i < card->nports) {
#line 2732
    goto ldv_32729;
  } else {

  }
#line 2736
  fst_disable_intr(card);
#line 2737
  free_irq(card->irq, (void *)card);
#line 2739
  iounmap((void volatile   *)card->ctlmem);
#line 2740
  iounmap((void volatile   *)card->mem);
#line 2741
  pci_release_regions(pdev);
#line 2742
  if (card->family == 1) {
#line 2746
    pci_free_consistent(card->device, 8000UL, card->rx_dma_handle_host, card->rx_dma_handle_card);
#line 2749
    pci_free_consistent(card->device, 8000UL, card->tx_dma_handle_host, card->tx_dma_handle_card);
  } else {

  }
#line 2753
  fst_card_array[card->card_no] = 0;
#line 2754
  return;
}
}
#line 2756 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static struct pci_driver fst_driver  = 
#line 2756
     {{0, 0}, (char *)"fst", (struct pci_device_id  const  *)(& fst_pci_dev_id), & fst_add_one,
    & fst_remove_one, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, (_Bool)0, 0, 0, 0, 0, 0, 0, 0,
                                         0}, {{{{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}}},
                                              {0, 0}}};
#line 2766 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static int fst_init(void) 
{ 
  int i ;
  struct lock_class_key __key ;
  int tmp ;

  {
#line 2770
  i = 0;
#line 2770
  goto ldv_32738;
  ldv_32737: 
#line 2771
  fst_card_array[i] = 0;
#line 2770
  i = i + 1;
  ldv_32738: ;
#line 2770
  if (i <= 31) {
#line 2771
    goto ldv_32737;
  } else {

  }
#line 2772
  spinlock_check(& fst_work_q_lock);
#line 2772
  __raw_spin_lock_init(& fst_work_q_lock.ldv_5722.rlock, "&(&fst_work_q_lock)->rlock",
                       & __key);
#line 2773
  tmp = __pci_register_driver(& fst_driver, & __this_module, "farsync");
#line 2773
  return (tmp);
}
}
#line 2777 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
static void fst_cleanup_module(void) 
{ 


  {
#line 2779
  printk("<6>farsync: FarSync WAN driver unloading\n");
#line 2780
  pci_unregister_driver(& fst_driver);
#line 2781
  return;
}
}
#line 2802
void ldv_check_final_state(void) ;
#line 2805
extern void ldv_check_return_value(int  ) ;
#line 2808
extern void ldv_check_return_value_probe(int  ) ;
#line 2811
void ldv_initialize(void) ;
#line 2814
extern void ldv_handler_precall(void) ;
#line 2817
extern int nondet_int(void) ;
#line 2820 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 2823 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct net_device *var_group1 ;
  int res_fst_open_36 ;
  int res_fst_close_37 ;
  struct ifreq *var_group2 ;
  int var_fst_ioctl_33_p2 ;
  struct pci_dev *var_group3 ;
  struct pci_device_id  const  *var_fst_add_one_42_p1 ;
  int res_fst_add_one_42 ;
  int var_fst_intr_27_p0 ;
  void *var_fst_intr_27_p1 ;
  int ldv_s_fst_ops_net_device_ops ;
  int ldv_s_fst_driver_pci_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3893
  ldv_s_fst_ops_net_device_ops = 0;
#line 3896
  ldv_s_fst_driver_pci_driver = 0;
#line 3751
  LDV_IN_INTERRUPT = 1;
#line 3760
  ldv_initialize();
#line 3890
  ldv_handler_precall();
#line 3891
  tmp = fst_init();
#line 3891
  if (tmp != 0) {
#line 3892
    goto ldv_final;
  } else {

  }
#line 3901
  goto ldv_32794;
  ldv_32793: 
#line 3906
  tmp___0 = nondet_int();
#line 3906
  switch (tmp___0) {
  case 0: ;
#line 3911
  if (ldv_s_fst_ops_net_device_ops == 0) {
#line 4038
    ldv_handler_precall();
#line 4039
    res_fst_open_36 = fst_open(var_group1);
#line 4040
    ldv_check_return_value(res_fst_open_36);
#line 4041
    if (res_fst_open_36 < 0) {
#line 4042
      goto ldv_module_exit;
    } else {

    }
#line 4047
    ldv_s_fst_ops_net_device_ops = ldv_s_fst_ops_net_device_ops + 1;
  } else {

  }
#line 4053
  goto ldv_32785;
  case 1: ;
#line 4057
  if (ldv_s_fst_ops_net_device_ops == 1) {
#line 4184
    ldv_handler_precall();
#line 4185
    res_fst_close_37 = fst_close(var_group1);
#line 4186
    ldv_check_return_value(res_fst_close_37);
#line 4187
    if (res_fst_close_37 != 0) {
#line 4188
      goto ldv_module_exit;
    } else {

    }
#line 4193
    ldv_s_fst_ops_net_device_ops = 0;
  } else {

  }
#line 4199
  goto ldv_32785;
  case 2: 
#line 4330
  ldv_handler_precall();
#line 4331
  fst_ioctl(var_group1, var_group2, var_fst_ioctl_33_p2);
#line 4342
  goto ldv_32785;
  case 3: 
#line 4473
  ldv_handler_precall();
#line 4474
  fst_tx_timeout(var_group1);
#line 4485
  goto ldv_32785;
  case 4: ;
#line 4489
  if (ldv_s_fst_driver_pci_driver == 0) {
#line 4616
    res_fst_add_one_42 = fst_add_one(var_group3, var_fst_add_one_42_p1);
#line 4617
    ldv_check_return_value(res_fst_add_one_42);
#line 4618
    ldv_check_return_value_probe(res_fst_add_one_42);
#line 4619
    if (res_fst_add_one_42 != 0) {
#line 4620
      goto ldv_module_exit;
    } else {

    }
#line 4621
    ldv_s_fst_driver_pci_driver = ldv_s_fst_driver_pci_driver + 1;
  } else {

  }
#line 4627
  goto ldv_32785;
  case 5: ;
#line 4631
  if (ldv_s_fst_driver_pci_driver == 1) {
#line 4760
    ldv_handler_precall();
#line 4761
    fst_remove_one(var_group3);
#line 4762
    ldv_s_fst_driver_pci_driver = 0;
  } else {

  }
#line 4768
  goto ldv_32785;
  case 6: 
#line 4772
  LDV_IN_INTERRUPT = 2;
#line 4891
  ldv_handler_precall();
#line 4892
  fst_intr(var_fst_intr_27_p0, var_fst_intr_27_p1);
#line 4905
  LDV_IN_INTERRUPT = 1;
#line 4911
  goto ldv_32785;
  default: ;
#line 4912
  goto ldv_32785;
  }
  ldv_32785: ;
  ldv_32794: 
#line 3901
  tmp___1 = nondet_int();
#line 3901
  if ((tmp___1 != 0 || ldv_s_fst_ops_net_device_ops != 0) || ldv_s_fst_driver_pci_driver != 0) {
#line 3904
    goto ldv_32793;
  } else {

  }

  ldv_module_exit: 
#line 5048
  ldv_handler_precall();
#line 5049
  fst_cleanup_module();
  ldv_final: 
#line 5052
  ldv_check_final_state();
#line 5055
  return;
}
}
#line 5091 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5096
  ldv_spin_lock_node_size_lock_of_pglist_data();
#line 5098
  __ldv_spin_lock(ldv_func_arg1);
#line 5099
  return;
}
}
#line 5112 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5117
  ldv_spin_lock_siglock_of_sighand_struct();
#line 5119
  __ldv_spin_lock(ldv_func_arg1);
#line 5120
  return;
}
}
#line 5396 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_34(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5401
  ldv_spin_lock_fst_work_q_lock();
#line 5403
  __ldv_spin_lock(ldv_func_arg1);
#line 5404
  return;
}
}
#line 5406 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void ldv_spin_unlock_irqrestore_35(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 5412
  ldv_spin_unlock_fst_work_q_lock();
#line 5414
  spin_unlock_irqrestore(lock, flags);
#line 5415
  return;
}
}
#line 5417 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_36(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5422
  ldv_spin_lock_fst_work_q_lock();
#line 5424
  __ldv_spin_lock(ldv_func_arg1);
#line 5425
  return;
}
}
#line 5438 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_38(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5443
  ldv_spin_lock_fst_work_q_lock();
#line 5445
  __ldv_spin_lock(ldv_func_arg1);
#line 5446
  return;
}
}
#line 5459 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5464
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5466
  __ldv_spin_lock(ldv_func_arg1);
#line 5467
  return;
}
}
#line 5469 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
__inline static void ldv_spin_unlock_irqrestore_41(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 5475
  ldv_spin_unlock_card_lock_of_fst_card_info();
#line 5477
  spin_unlock_irqrestore(lock, flags);
#line 5478
  return;
}
}
#line 5480 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_42(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5485
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5487
  __ldv_spin_lock(ldv_func_arg1);
#line 5488
  return;
}
}
#line 5501 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5506
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5508
  __ldv_spin_lock(ldv_func_arg1);
#line 5509
  return;
}
}
#line 5522 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5527
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5529
  __ldv_spin_lock(ldv_func_arg1);
#line 5530
  return;
}
}
#line 5543 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5548
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5550
  __ldv_spin_lock(ldv_func_arg1);
#line 5551
  return;
}
}
#line 5564 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5569
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5571
  __ldv_spin_lock(ldv_func_arg1);
#line 5572
  return;
}
}
#line 5585 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5590
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5592
  __ldv_spin_lock(ldv_func_arg1);
#line 5593
  return;
}
}
#line 5606 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_54(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5611
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5613
  __ldv_spin_lock(ldv_func_arg1);
#line 5614
  return;
}
}
#line 5627 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/net/wan/farsync.c.prepared"
void ldv___ldv_spin_lock_56(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 5632
  ldv_spin_lock_card_lock_of_fst_card_info();
#line 5634
  __ldv_spin_lock(ldv_func_arg1);
#line 5635
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin__xmit_lock_of_netdev_queue  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
#line 14
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
#line 23
  if (ldv_spin__xmit_lock_of_netdev_queue == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin__xmit_lock_of_netdev_queue = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
#line 58
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin__xmit_lock_of_netdev_queue == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_addr_list_lock_of_net_device  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
#line 139
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_addr_list_lock_of_net_device = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
#line 148
  if (ldv_spin_addr_list_lock_of_net_device == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_addr_list_lock_of_net_device = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
#line 183
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_addr_list_lock_of_net_device == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 264
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 273
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 308
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_card_lock_of_fst_card_info  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_card_lock_of_fst_card_info(void) 
{ 


  {
#line 389
  if (ldv_spin_card_lock_of_fst_card_info == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_card_lock_of_fst_card_info = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_card_lock_of_fst_card_info(void) 
{ 


  {
#line 398
  if (ldv_spin_card_lock_of_fst_card_info == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_card_lock_of_fst_card_info = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_card_lock_of_fst_card_info(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_card_lock_of_fst_card_info == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_card_lock_of_fst_card_info = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_card_lock_of_fst_card_info(void) 
{ 


  {
#line 433
  if (ldv_spin_card_lock_of_fst_card_info == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_card_lock_of_fst_card_info(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_card_lock_of_fst_card_info == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_card_lock_of_fst_card_info(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_card_lock_of_fst_card_info();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_card_lock_of_fst_card_info(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_card_lock_of_fst_card_info(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_card_lock_of_fst_card_info == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_card_lock_of_fst_card_info = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 514
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_d_lock_of_dentry = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 523
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_d_lock_of_dentry = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_d_lock_of_dentry = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 558
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_d_lock_of_dentry = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_dcache_lock  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_dcache_lock(void) 
{ 


  {
#line 639
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_dcache_lock = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_dcache_lock(void) 
{ 


  {
#line 648
  if (ldv_spin_dcache_lock == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_dcache_lock = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_dcache_lock = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_dcache_lock(void) 
{ 


  {
#line 683
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_dcache_lock == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_dcache_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_dcache_lock();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_dcache_lock(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_dcache_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_dcache_lock = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_fst_work_q_lock  ;
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_fst_work_q_lock(void) 
{ 


  {
#line 764
  if (ldv_spin_fst_work_q_lock == 1) {

  } else {
#line 764
    ldv_error();
  }
#line 766
  ldv_spin_fst_work_q_lock = 2;
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_fst_work_q_lock(void) 
{ 


  {
#line 773
  if (ldv_spin_fst_work_q_lock == 2) {

  } else {
#line 773
    ldv_error();
  }
#line 775
  ldv_spin_fst_work_q_lock = 1;
#line 776
  return;
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_fst_work_q_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 784
  if (ldv_spin_fst_work_q_lock == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 787
  is_spin_held_by_another_thread = ldv_undef_int();
#line 790
  if (is_spin_held_by_another_thread) {
#line 793
    return (0);
  } else {
#line 798
    ldv_spin_fst_work_q_lock = 2;
#line 800
    return (1);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_fst_work_q_lock(void) 
{ 


  {
#line 808
  if (ldv_spin_fst_work_q_lock == 1) {

  } else {
#line 808
    ldv_error();
  }
#line 809
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_fst_work_q_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 817
  is_spin_held_by_another_thread = ldv_undef_int();
#line 820
  if (ldv_spin_fst_work_q_lock == 1 && ! is_spin_held_by_another_thread) {
#line 823
    return (0);
  } else {
#line 828
    return (1);
  }
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_fst_work_q_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 836
  tmp = ldv_spin_is_locked_fst_work_q_lock();
#line 836
  if (tmp) {
#line 836
    tmp___0 = 0;
  } else {
#line 836
    tmp___0 = 1;
  }
#line 836
  return (tmp___0);
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_fst_work_q_lock(void) 
{ 
  int is_spin_contended ;

  {
#line 845
  is_spin_contended = ldv_undef_int();
#line 848
  if (is_spin_contended) {
#line 851
    return (0);
  } else {
#line 856
    return (1);
  }
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_fst_work_q_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 866
  if (ldv_spin_fst_work_q_lock == 1) {

  } else {
#line 866
    ldv_error();
  }
#line 869
  atomic_value_after_dec = ldv_undef_int();
#line 872
  if (atomic_value_after_dec == 0) {
#line 875
    ldv_spin_fst_work_q_lock = 2;
#line 877
    return (1);
  } else {

  }
#line 881
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 886 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 889
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 889
    ldv_error();
  }
#line 891
  ldv_spin_i_lock_of_inode = 2;
#line 892
  return;
}
}
#line 895 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 898
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 898
    ldv_error();
  }
#line 900
  ldv_spin_i_lock_of_inode = 1;
#line 901
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 909
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 909
    ldv_error();
  }
#line 912
  is_spin_held_by_another_thread = ldv_undef_int();
#line 915
  if (is_spin_held_by_another_thread) {
#line 918
    return (0);
  } else {
#line 923
    ldv_spin_i_lock_of_inode = 2;
#line 925
    return (1);
  }
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 933
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 933
    ldv_error();
  }
#line 934
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 942
  is_spin_held_by_another_thread = ldv_undef_int();
#line 945
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 948
    return (0);
  } else {
#line 953
    return (1);
  }
}
}
#line 958 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 961
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 961
  if (tmp) {
#line 961
    tmp___0 = 0;
  } else {
#line 961
    tmp___0 = 1;
  }
#line 961
  return (tmp___0);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 970
  is_spin_contended = ldv_undef_int();
#line 973
  if (is_spin_contended) {
#line 976
    return (0);
  } else {
#line 981
    return (1);
  }
}
}
#line 986 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 991
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 991
    ldv_error();
  }
#line 994
  atomic_value_after_dec = ldv_undef_int();
#line 997
  if (atomic_value_after_dec == 0) {
#line 1000
    ldv_spin_i_lock_of_inode = 2;
#line 1002
    return (1);
  } else {

  }
#line 1006
  return (0);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 1014
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1014
    ldv_error();
  }
#line 1016
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 1017
  return;
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 1023
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 1023
    ldv_error();
  }
#line 1025
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 1026
  return;
}
}
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1034
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1034
    ldv_error();
  }
#line 1037
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1040
  if (is_spin_held_by_another_thread) {
#line 1043
    return (0);
  } else {
#line 1048
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 1050
    return (1);
  }
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 1058
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1058
    ldv_error();
  }
#line 1059
  return;
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1067
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1070
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 1073
    return (0);
  } else {
#line 1078
    return (1);
  }
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1086
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 1086
  if (tmp) {
#line 1086
    tmp___0 = 0;
  } else {
#line 1086
    tmp___0 = 1;
  }
#line 1086
  return (tmp___0);
}
}
#line 1090 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 1095
  is_spin_contended = ldv_undef_int();
#line 1098
  if (is_spin_contended) {
#line 1101
    return (0);
  } else {
#line 1106
    return (1);
  }
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 1116
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1116
    ldv_error();
  }
#line 1119
  atomic_value_after_dec = ldv_undef_int();
#line 1122
  if (atomic_value_after_dec == 0) {
#line 1125
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 1127
    return (1);
  } else {

  }
#line 1131
  return (0);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_node_size_lock_of_pglist_data  ;
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 1139
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 1139
    ldv_error();
  }
#line 1141
  ldv_spin_node_size_lock_of_pglist_data = 2;
#line 1142
  return;
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 1148
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {

  } else {
#line 1148
    ldv_error();
  }
#line 1150
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 1151
  return;
}
}
#line 1154 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1159
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 1159
    ldv_error();
  }
#line 1162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1165
  if (is_spin_held_by_another_thread) {
#line 1168
    return (0);
  } else {
#line 1173
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 1175
    return (1);
  }
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 1183
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 1183
    ldv_error();
  }
#line 1184
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1195
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && ! is_spin_held_by_another_thread) {
#line 1198
    return (0);
  } else {
#line 1203
    return (1);
  }
}
}
#line 1208 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1211
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
#line 1211
  if (tmp) {
#line 1211
    tmp___0 = 0;
  } else {
#line 1211
    tmp___0 = 1;
  }
#line 1211
  return (tmp___0);
}
}
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
#line 1220
  is_spin_contended = ldv_undef_int();
#line 1223
  if (is_spin_contended) {
#line 1226
    return (0);
  } else {
#line 1231
    return (1);
  }
}
}
#line 1236 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 1241
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 1241
    ldv_error();
  }
#line 1244
  atomic_value_after_dec = ldv_undef_int();
#line 1247
  if (atomic_value_after_dec == 0) {
#line 1250
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 1252
    return (1);
  } else {

  }
#line 1256
  return (0);
}
}
#line 1258 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 1261 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 1264
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1264
    ldv_error();
  }
#line 1266
  ldv_spin_siglock_of_sighand_struct = 2;
#line 1267
  return;
}
}
#line 1270 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 1273
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 1273
    ldv_error();
  }
#line 1275
  ldv_spin_siglock_of_sighand_struct = 1;
#line 1276
  return;
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1284
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1284
    ldv_error();
  }
#line 1287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1290
  if (is_spin_held_by_another_thread) {
#line 1293
    return (0);
  } else {
#line 1298
    ldv_spin_siglock_of_sighand_struct = 2;
#line 1300
    return (1);
  }
}
}
#line 1305 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 1308
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1308
    ldv_error();
  }
#line 1309
  return;
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1320
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 1323
    return (0);
  } else {
#line 1328
    return (1);
  }
}
}
#line 1333 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1336
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 1336
  if (tmp) {
#line 1336
    tmp___0 = 0;
  } else {
#line 1336
    tmp___0 = 1;
  }
#line 1336
  return (tmp___0);
}
}
#line 1340 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 1345
  is_spin_contended = ldv_undef_int();
#line 1348
  if (is_spin_contended) {
#line 1351
    return (0);
  } else {
#line 1356
    return (1);
  }
}
}
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 1366
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1366
    ldv_error();
  }
#line 1369
  atomic_value_after_dec = ldv_undef_int();
#line 1372
  if (atomic_value_after_dec == 0) {
#line 1375
    ldv_spin_siglock_of_sighand_struct = 2;
#line 1377
    return (1);
  } else {

  }
#line 1381
  return (0);
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_tx_global_lock_of_net_device  ;
#line 1386 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
#line 1389
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
#line 1389
    ldv_error();
  }
#line 1391
  ldv_spin_tx_global_lock_of_net_device = 2;
#line 1392
  return;
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
#line 1398
  if (ldv_spin_tx_global_lock_of_net_device == 2) {

  } else {
#line 1398
    ldv_error();
  }
#line 1400
  ldv_spin_tx_global_lock_of_net_device = 1;
#line 1401
  return;
}
}
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1409
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
#line 1409
    ldv_error();
  }
#line 1412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1415
  if (is_spin_held_by_another_thread) {
#line 1418
    return (0);
  } else {
#line 1423
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 1425
    return (1);
  }
}
}
#line 1430 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
#line 1433
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
#line 1433
    ldv_error();
  }
#line 1434
  return;
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1445
  if (ldv_spin_tx_global_lock_of_net_device == 1 && ! is_spin_held_by_another_thread) {
#line 1448
    return (0);
  } else {
#line 1453
    return (1);
  }
}
}
#line 1458 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1461
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
#line 1461
  if (tmp) {
#line 1461
    tmp___0 = 0;
  } else {
#line 1461
    tmp___0 = 1;
  }
#line 1461
  return (tmp___0);
}
}
#line 1465 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
#line 1470
  is_spin_contended = ldv_undef_int();
#line 1473
  if (is_spin_contended) {
#line 1476
    return (0);
  } else {
#line 1481
    return (1);
  }
}
}
#line 1486 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 1491
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
#line 1491
    ldv_error();
  }
#line 1494
  atomic_value_after_dec = ldv_undef_int();
#line 1497
  if (atomic_value_after_dec == 0) {
#line 1500
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 1502
    return (1);
  } else {

  }
#line 1506
  return (0);
}
}
#line 1510 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 1513
  ldv_spin__xmit_lock_of_netdev_queue = 1;
#line 1515
  ldv_spin_addr_list_lock_of_net_device = 1;
#line 1517
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 1519
  ldv_spin_card_lock_of_fst_card_info = 1;
#line 1521
  ldv_spin_d_lock_of_dentry = 1;
#line 1523
  ldv_spin_dcache_lock = 1;
#line 1525
  ldv_spin_fst_work_q_lock = 1;
#line 1527
  ldv_spin_i_lock_of_inode = 1;
#line 1529
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 1531
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 1533
  ldv_spin_siglock_of_sighand_struct = 1;
#line 1535
  ldv_spin_tx_global_lock_of_net_device = 1;
#line 1536
  return;
}
}
#line 1539 "/work/ldvuser/novikov/work/current--X--drivers/net/wan/farsync.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 1542
  if (ldv_spin__xmit_lock_of_netdev_queue == 1) {

  } else {
#line 1542
    ldv_error();
  }
#line 1544
  if (ldv_spin_addr_list_lock_of_net_device == 1) {

  } else {
#line 1544
    ldv_error();
  }
#line 1546
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 1546
    ldv_error();
  }
#line 1548
  if (ldv_spin_card_lock_of_fst_card_info == 1) {

  } else {
#line 1548
    ldv_error();
  }
#line 1550
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 1550
    ldv_error();
  }
#line 1552
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 1552
    ldv_error();
  }
#line 1554
  if (ldv_spin_fst_work_q_lock == 1) {

  } else {
#line 1554
    ldv_error();
  }
#line 1556
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 1556
    ldv_error();
  }
#line 1558
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1558
    ldv_error();
  }
#line 1560
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 1560
    ldv_error();
  }
#line 1562
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1562
    ldv_error();
  }
#line 1564
  if (ldv_spin_tx_global_lock_of_net_device == 1) {

  } else {
#line 1564
    ldv_error();
  }
#line 1565
  return;
}
}
