/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_809_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_813_3 {
   unsigned long miss ;
   unsigned long hit ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
union __anonunion_ldv_814_1 {
   struct __anonstruct_ldv_809_2 ldv_809 ;
   struct __anonstruct_ldv_813_3 ldv_813 ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion_ldv_814_1 ldv_814 ;
};
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 90 "include/linux/types.h"
typedef unsigned int u_int;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 183 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 188 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   char primary_hash ;
   char secondary_hash ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
};
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 109
struct pt_regs;
#line 207
struct pid;
#line 510
struct task_struct;
#line 511
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 240 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1797_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1797_8 ldv_1797 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 272
struct page;
#line 280
struct file;
#line 302
struct seq_file;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2088_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2103_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2104_14 {
   struct __anonstruct_ldv_2088_15 ldv_2088 ;
   struct __anonstruct_ldv_2103_16 ldv_2103 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2104_14 ldv_2104 ;
};
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned char ist : 3 ;
   unsigned char zero0 : 5 ;
   unsigned char type : 5 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct64 gate_desc;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
#line 292 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1093
struct thread_struct;
#line 1094
struct tss_struct;
#line 96 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr_amd)(unsigned int  , int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   struct pv_lazy_ops lazy_mode ;
};
#line 351
struct raw_spinlock;
#line 49 "include/linux/err.h"
struct ds_context;
#line 51
struct bts_tracer;
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 193 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
#line 240 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long stack[64U] ;
};
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6274_21 {
   u64 rip ;
   u64 rdp ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6280_22 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6281_20 {
   struct __anonstruct_ldv_6274_21 ldv_6274 ;
   struct __anonstruct_ldv_6280_22 ldv_6280 ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6290_23 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_6281_20 ldv_6281 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_6290_23 ldv_6290 ;
};
#line 333 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 405
struct kmem_cache;
#line 409 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 614 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
#line 614 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_6780_27 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_28 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_29 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_6802_26 {
   struct __anonstruct_ldv_6780_27 ldv_6780 ;
   struct __anonstruct_futex_28 futex ;
   struct __anonstruct_nanosleep_29 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6802_26 ldv_6802 ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_31 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_31 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 21 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 164 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_32 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_32 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_33 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 104 "include/linux/math64.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 220 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 634 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 153
struct rw_semaphore;
#line 155 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 186
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 196 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
#line 254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 1093 "include/linux/mmzone.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 405
struct kobject;
#line 406 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 40 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 215 "include/linux/moduleparam.h"
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 34 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 238 "include/linux/timer.h"
struct hrtimer;
#line 239
enum hrtimer_restart;
#line 251
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 284 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 145 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 273 "include/linux/rcupdate.h"
struct tracepoint;
#line 274 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 180
struct module_sect_attrs;
#line 180
struct module_notes_attrs;
#line 180 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 478
struct device_driver;
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160
struct prio_tree_node;
#line 160 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 115
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_12411_96 {
   u16 inuse ;
   u16 objects ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12412_95 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12411_96 ldv_12411 ;
};
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_12417_98 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12421_97 {
   struct __anonstruct_ldv_12417_98 ldv_12417 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12425_99 {
   unsigned long index ;
   void *freelist ;
};
#line 29 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12412_95 ldv_12412 ;
   union __anonunion_ldv_12421_97 ldv_12421 ;
   union __anonunion_ldv_12425_99 ldv_12425 ;
   struct list_head lru ;
};
#line 116 "include/linux/mm_types.h"
struct __anonstruct_vm_set_101 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 116 "include/linux/mm_types.h"
union __anonunion_shared_100 {
   struct __anonstruct_vm_set_101 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 116
struct anon_vma;
#line 116
struct vm_operations_struct;
#line 116
struct mempolicy;
#line 116 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_100 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 178 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 187 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 193
struct mmu_notifier_mm;
#line 193 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 281
struct file_ra_state;
#line 282
struct user_struct;
#line 283
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 174 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 223
struct inode;
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_102 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_102 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 375 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 198
struct pid_namespace;
#line 198 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 555 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 36 "include/linux/fiemap.h"
struct export_operations;
#line 38
struct iovec;
#line 39
struct kiocb;
#line 40
struct pipe_inode_info;
#line 41
struct poll_table_struct;
#line 42
struct kstatfs;
#line 43
struct cred;
#line 346 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 405 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 117 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 150 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 186 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 208
struct quota_format_type;
#line 209 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 251 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 279 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 293 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 319 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 334 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 495 "include/linux/fs.h"
union __anonunion_arg_105 {
   char *buf ;
   void *data ;
};
#line 495 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_104 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_105 arg ;
   int error ;
};
#line 495 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_104 read_descriptor_t;
#line 498 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 546
struct backing_dev_info;
#line 547 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 568
struct hd_struct;
#line 568
struct gendisk;
#line 568 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 638
struct inode_operations;
#line 638
struct file_operations;
#line 638
struct file_lock;
#line 638
struct cdev;
#line 638 "include/linux/fs.h"
union __anonunion_ldv_15705_106 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 638
struct dnotify_struct;
#line 638 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_15705_106 ldv_15705 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 804 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 812 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 835 "include/linux/fs.h"
union __anonunion_f_u_107 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 835 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_107 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 958
struct files_struct;
#line 958 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 959 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 964 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_109 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_108 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_109 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_108 fl_u ;
};
#line 1066 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1243
struct file_system_type;
#line 1243
struct super_operations;
#line 1243
struct xattr_handler;
#line 1243
struct mtd_info;
#line 1243 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
#line 1368 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1412 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1452 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1494 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1678 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2100
struct bio;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "include/linux/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 267 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 267 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 317 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 68 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 77
struct signal_struct;
#line 78
struct tty_port;
#line 79 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*raise_dtr_rts)(struct tty_port * ) ;
};
#line 190 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 205 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 333
struct class;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 464 "include/linux/mod_devicetable.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 25 "include/linux/ioport.h"
struct pci_dev;
#line 184
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct driver_private;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 152 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 182
struct class_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 207
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 270 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
#line 299 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 360 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 369
struct dma_coherent_mem;
#line 369 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_111 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_111 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_113 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_114 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_115 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_116 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_117 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_118 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_112 {
   int _pad[28U] ;
   struct __anonstruct__kill_113 _kill ;
   struct __anonstruct__timer_114 _timer ;
   struct __anonstruct__rt_115 _rt ;
   struct __anonstruct__sigchld_116 _sigchld ;
   struct __anonstruct__sigfault_117 _sigfault ;
   struct __anonstruct__sigpoll_118 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_112 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_121 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_121 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 126 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 150 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 458 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 841 "include/linux/sysctl.h"
struct nsproxy;
#line 28 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 31 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32
struct key_type;
#line 34
struct keyring_list;
#line 114
struct key_user;
#line 114 "include/linux/key.h"
union __anonunion_type_data_122 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 114 "include/linux/key.h"
union __anonunion_payload_123 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 114 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_122 type_data ;
   union __anonunion_payload_123 payload ;
};
#line 284 "include/linux/key.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 75 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 89 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 211
struct futex_pi_state;
#line 212
struct robust_list_head;
#line 139 "include/linux/sched.h"
struct cfs_rq;
#line 140
struct task_group;
#line 337
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
struct kioctx;
#line 57 "include/linux/uio.h"
union __anonunion_ki_obj_124 {
   void *user ;
   struct task_struct *tsk ;
};
#line 57 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_124 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 406 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 441 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 449 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 466 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 493 "include/linux/sched.h"
union __anonunion_ldv_21878_125 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 493 "include/linux/sched.h"
union __anonunion_ldv_21883_126 {
   pid_t session ;
   pid_t __session ;
};
#line 493
struct taskstats;
#line 493
struct tty_audit_buf;
#line 493 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_21878_125 ldv_21878 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_21883_126 ldv_21883 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 646 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 692
struct reclaim_state;
#line 693 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 711 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 753
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 835 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 858
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 872 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 957
struct io_context;
#line 978
struct audit_context;
#line 980
struct rq;
#line 981 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   int (*needs_post_schedule)(struct rq * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1035 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1040 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1109
struct rt_rq;
#line 1109 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1125
struct linux_binfmt;
#line 1125
struct css_set;
#line 1125
struct compat_robust_list_head;
#line 1125
struct ftrace_ret_stack;
#line 1125 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
#line 575 "include/linux/i2c.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3U] ;
};
#line 172 "include/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 184 "include/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5U] ;
};
#line 270 "include/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 326 "include/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 339 "include/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 348 "include/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 360 "include/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 376 "include/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 385
struct backlight_device;
#line 386
struct fb_info;
#line 387 "include/linux/fb.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
#line 47 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   unsigned int state ;
};
#line 64 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 199 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 443 "include/linux/fb.h"
struct fb_videomode;
#line 443 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   unsigned char gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 546 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 557 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info * , void * , void * , unsigned int  ) ;
   void (*readio)(struct fb_info * , void * , void * , unsigned int  ) ;
};
#line 586 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info * , struct list_head * ) ;
};
#line 596 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info * , int  ) ;
   int (*fb_release)(struct fb_info * , int  ) ;
   ssize_t (*fb_read)(struct fb_info * , char * , size_t  , loff_t * ) ;
   ssize_t (*fb_write)(struct fb_info * , char const   * , size_t  , loff_t * ) ;
   int (*fb_check_var)(struct fb_var_screeninfo * , struct fb_info * ) ;
   int (*fb_set_par)(struct fb_info * ) ;
   int (*fb_setcolreg)(unsigned int  , unsigned int  , unsigned int  , unsigned int  ,
                       unsigned int  , struct fb_info * ) ;
   int (*fb_setcmap)(struct fb_cmap * , struct fb_info * ) ;
   int (*fb_blank)(int  , struct fb_info * ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo * , struct fb_info * ) ;
   void (*fb_fillrect)(struct fb_info * , struct fb_fillrect  const  * ) ;
   void (*fb_copyarea)(struct fb_info * , struct fb_copyarea  const  * ) ;
   void (*fb_imageblit)(struct fb_info * , struct fb_image  const  * ) ;
   int (*fb_cursor)(struct fb_info * , struct fb_cursor * ) ;
   void (*fb_rotate)(struct fb_info * , int  ) ;
   int (*fb_sync)(struct fb_info * ) ;
   int (*fb_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_compat_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_mmap)(struct fb_info * , struct vm_area_struct * ) ;
   void (*fb_save_state)(struct fb_info * ) ;
   void (*fb_restore_state)(struct fb_info * ) ;
   void (*fb_get_caps)(struct fb_info * , struct fb_blit_caps * , struct fb_var_screeninfo * ) ;
};
#line 676 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 693 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 705 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 714 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 725 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 734 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info * , struct fb_tilemap * ) ;
   void (*fb_tilecopy)(struct fb_info * , struct fb_tilearea * ) ;
   void (*fb_tilefill)(struct fb_info * , struct fb_tilerect * ) ;
   void (*fb_tileblit)(struct fb_info * , struct fb_tileblit * ) ;
   void (*fb_tilecursor)(struct fb_info * , struct fb_tilecursor * ) ;
   int (*fb_get_tilemax)(struct fb_info * ) ;
};
#line 753 "include/linux/fb.h"
struct fb_info {
   int node ;
   int flags ;
   struct mutex lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
};
#line 1082 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 69 "include/linux/io.h"
struct hotplug_slot;
#line 69 "include/linux/io.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 110 "include/linux/pci.h"
typedef int pci_power_t;
#line 128 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 129
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 154 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 169 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 180
struct pcie_link_state;
#line 181
struct pci_vpd;
#line 182
struct pci_driver;
#line 182 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char state_saved : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12U] ;
   struct bin_attribute *res_attr_wc[12U] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 304
struct pci_ops;
#line 304 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16U] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 349 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 384 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 397 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 406 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 434 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 765 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 39 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 264 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 271 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
#line 1197 "include/linux/pci.h"
struct vgastate {
   void *vgabase ;
   unsigned long membase ;
   __u32 memsize ;
   __u32 flags ;
   __u32 depth ;
   __u32 num_attr ;
   __u32 num_crtc ;
   __u32 num_gfx ;
   __u32 num_seq ;
   void *vidstate ;
};
#line 480 "include/video/vga.h"
struct vga_regset {
   u8 regnum ;
   u8 lowbit ;
   u8 highbit ;
};
#line 17 "include/linux/svga.h"
struct svga_fb_format {
   u32 bits_per_pixel ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   u32 nonstd ;
   u32 type ;
   u32 type_aux ;
   u32 visual ;
   u32 xpanstep ;
   u32 xresstep ;
};
#line 38 "include/linux/svga.h"
struct svga_timing_regs {
   struct vga_regset  const  *h_total_regs ;
   struct vga_regset  const  *h_display_regs ;
   struct vga_regset  const  *h_blank_start_regs ;
   struct vga_regset  const  *h_blank_end_regs ;
   struct vga_regset  const  *h_sync_start_regs ;
   struct vga_regset  const  *h_sync_end_regs ;
   struct vga_regset  const  *v_total_regs ;
   struct vga_regset  const  *v_display_regs ;
   struct vga_regset  const  *v_blank_start_regs ;
   struct vga_regset  const  *v_blank_end_regs ;
   struct vga_regset  const  *v_sync_start_regs ;
   struct vga_regset  const  *v_sync_end_regs ;
};
#line 54 "include/linux/svga.h"
struct svga_pll {
   u16 m_min ;
   u16 m_max ;
   u16 n_min ;
   u16 n_max ;
   u16 r_min ;
   u16 r_max ;
   u32 f_vco_min ;
   u32 f_vco_max ;
   u32 f_base ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 156 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 160 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 181 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct dac_info;
#line 181 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct arkfb_info {
   int mclk_freq ;
   int mtrr_reg ;
   struct dac_info *dac ;
   struct vgastate state ;
   struct mutex open_lock ;
   unsigned int ref_count ;
   u32 pseudo_palette[16U] ;
};
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
struct dac_ops {
   int (*dac_get_mode)(struct dac_info * ) ;
   int (*dac_set_mode)(struct dac_info * , int  ) ;
   int (*dac_get_freq)(struct dac_info * , int  ) ;
   int (*dac_set_freq)(struct dac_info * , int  , u32  ) ;
   void (*dac_release)(struct dac_info * ) ;
};
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
struct dac_info {
   struct dac_ops *dacops ;
   void (*dac_read_regs)(void * , u8 * , int  ) ;
   void (*dac_write_regs)(void * , u8 * , int  ) ;
   void *data ;
};
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
struct ics5342_info {
   struct dac_info dac ;
   u8 mode ;
};
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
enum __anonenum_103 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 79 "include/linux/compiler.h"
extern void ftrace_likely_update(struct ftrace_branch_data * , int  , int  ) ;
#line 8 "include/linux/dynamic_debug.h"
extern long long dynamic_debug_enabled ;
#line 9
extern long long dynamic_debug_enabled2 ;
#line 238 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 54
extern char *strcpy(char * , char const   * ) ;
#line 379 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
extern struct pv_cpu_ops pv_cpu_ops ;
#line 1003 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static void slow_down_io(void) 
{ 


  {
#line 1005
  (*(pv_cpu_ops.io_delay))();
#line 1006
  return;
}
}
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 126
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 152
extern void mutex_unlock(struct mutex * ) ;
#line 226 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 229
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 217 "include/linux/slub_def.h"
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 220
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 224
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 86 "include/linux/module.h"
extern struct module __this_module ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
void ldv_check_alloc_flags(gfp_t flags ) ;
#line 430 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 432
  tmp = kobject_name(& dev->kobj);
#line 432
  return (tmp);
}
}
#line 457 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 459
  return ((void *)dev->driver_data);
}
}
#line 462 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 464
  dev->driver_data = data;
#line 465
  return;
}
}
#line 562
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 20
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 29
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val , void volatile   *addr ) 
{ 


  {
#line 29
  __asm__  volatile   ("movw %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
#line 30
  return;
}
}
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 32
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)));
#line 33
  return;
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 34
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)));
#line 35
  return;
}
}
#line 118 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static unsigned char inb_p(unsigned short port ) 
{ 
  unsigned char _v ;

  {
#line 118
  __asm__  volatile   ("inb %w1,%0": "=a" (_v): "Nd" (port));
#line 118
  slow_down_io();
#line 118
  return (_v);
}
}
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outb(unsigned char value , unsigned short port ) 
{ 


  {
#line 127
  __asm__  volatile   ("outb %b0,%w1": : "a" (value), "Nd" (port));
#line 128
  return;
}
}
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outb_p(unsigned char value , unsigned short port ) 
{ 


  {
#line 127
  __asm__  volatile   ("outb %b0,%w1": : "a" (value), "Nd" (port));
#line 127
  slow_down_io();
#line 128
  return;
}
}
#line 128 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outw(unsigned short value , unsigned short port ) 
{ 


  {
#line 128
  __asm__  volatile   ("outw %w0,%w1": : "a" (value), "Nd" (port));
#line 129
  return;
}
}
#line 69 "include/asm-generic/iomap.h"
extern void *pci_iomap(struct pci_dev * , int  , unsigned long  ) ;
#line 70
extern void pci_iounmap(struct pci_dev * , void * ) ;
#line 160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
extern void memset_io(void volatile   * , int  , size_t  ) ;
#line 931 "include/linux/fb.h"
extern void cfb_fillrect(struct fb_info * , struct fb_fillrect  const  * ) ;
#line 932
extern void cfb_copyarea(struct fb_info * , struct fb_copyarea  const  * ) ;
#line 933
extern void cfb_imageblit(struct fb_info * , struct fb_image  const  * ) ;
#line 946
extern int register_framebuffer(struct fb_info * ) ;
#line 947
extern int unregister_framebuffer(struct fb_info * ) ;
#line 954
extern void fb_set_suspend(struct fb_info * , int  ) ;
#line 1015
extern struct fb_info *framebuffer_alloc(size_t  , struct device * ) ;
#line 1016
extern void framebuffer_release(struct fb_info * ) ;
#line 1074
extern int fb_alloc_cmap(struct fb_cmap * , int  , int  ) ;
#line 1075
extern void fb_dealloc_cmap(struct fb_cmap * ) ;
#line 1108
extern int fb_find_mode(struct fb_var_screeninfo * , struct fb_info * , char const   * ,
                        struct fb_videomode  const  * , unsigned int  , struct fb_videomode  const  * ,
                        unsigned int  ) ;
#line 607 "include/linux/pci.h"
extern int pci_bus_read_config_word(struct pci_bus * , unsigned int  , int  , u16 * ) ;
#line 622 "include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev *dev , int where , u16 *val ) 
{ 
  int tmp ;

  {
#line 624
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
#line 624
  return (tmp);
}
}
#line 645
extern int pci_enable_device(struct pci_dev * ) ;
#line 657
extern void pci_disable_device(struct pci_dev * ) ;
#line 658
extern void pci_set_master(struct pci_dev * ) ;
#line 690
extern int pci_save_state(struct pci_dev * ) ;
#line 691
extern int pci_restore_state(struct pci_dev * ) ;
#line 693
extern int pci_set_power_state(struct pci_dev * , pci_power_t  ) ;
#line 694
extern pci_power_t pci_choose_state(struct pci_dev * , pm_message_t  ) ;
#line 722
extern int pci_request_regions(struct pci_dev * , char const   * ) ;
#line 724
extern void pci_release_regions(struct pci_dev * ) ;
#line 743
extern int __pci_register_driver(struct pci_driver * , struct module * , char const   * ) ;
#line 752
extern void pci_unregister_driver(struct pci_driver * ) ;
#line 1077 "include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
#line 1079
  tmp = dev_get_drvdata((struct device  const  *)(& pdev->dev));
#line 1079
  return (tmp);
}
}
#line 1082 "include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
#line 1084
  dev_set_drvdata(& pdev->dev, data);
#line 1085
  return;
}
}
#line 1090 "include/linux/pci.h"
__inline static char const   *pci_name(struct pci_dev *pdev ) 
{ 
  char const   *tmp ;

  {
#line 1092
  tmp = dev_name((struct device  const  *)(& pdev->dev));
#line 1092
  return (tmp);
}
}
#line 217 "include/video/vga.h"
extern int save_vga(struct vgastate * ) ;
#line 218
extern int restore_vga(struct vgastate * ) ;
#line 224 "include/video/vga.h"
__inline static unsigned char vga_io_r(unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 226
  tmp = inb_p((int )port);
#line 226
  return (tmp);
}
}
#line 229 "include/video/vga.h"
__inline static void vga_io_w(unsigned short port , unsigned char val ) 
{ 


  {
#line 231
  outb_p((int )val, (int )port);
#line 232
  return;
}
}
#line 234 "include/video/vga.h"
__inline static void vga_io_w_fast(unsigned short port , unsigned char reg , unsigned char val ) 
{ 


  {
#line 237
  outw((int )((unsigned short )((int )((short )((int )val << 8)) | (int )((short )reg))),
       (int )port);
#line 238
  return;
}
}
#line 240 "include/video/vga.h"
__inline static unsigned char vga_mm_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 242
  tmp = readb((void const volatile   *)regbase + (unsigned long )port);
#line 242
  return (tmp);
}
}
#line 245 "include/video/vga.h"
__inline static void vga_mm_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
#line 247
  writeb((int )val, (void volatile   *)regbase + (unsigned long )port);
#line 248
  return;
}
}
#line 250 "include/video/vga.h"
__inline static void vga_mm_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                   unsigned char val ) 
{ 


  {
#line 253
  writew((int )((unsigned short )((int )((short )((int )val << 8)) | (int )((short )reg))),
         (void volatile   *)regbase + (unsigned long )port);
#line 254
  return;
}
}
#line 256 "include/video/vga.h"
__inline static unsigned char vga_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;
  unsigned char tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 258
  ______f.func = "vga_r";
#line 258
  ______f.file = "include/video/vga.h";
#line 258
  ______f.line = 258U;
#line 258
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 258
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 258
  ______r = (unsigned long )regbase != (unsigned long )((void *)0);
#line 258
  if (______r != 0) {
#line 258
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 258
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 258
  if (______r != 0) {
#line 259
    tmp = vga_mm_r(regbase, (int )port);
#line 259
    return (tmp);
  } else {
#line 261
    tmp___0 = vga_io_r((int )port);
#line 261
    return (tmp___0);
  }
}
}
#line 264 "include/video/vga.h"
__inline static void vga_w(void *regbase , unsigned short port , unsigned char val ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 266
  ______f.func = "vga_w";
#line 266
  ______f.file = "include/video/vga.h";
#line 266
  ______f.line = 266U;
#line 266
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 266
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 266
  ______r = (unsigned long )regbase != (unsigned long )((void *)0);
#line 266
  if (______r != 0) {
#line 266
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 266
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 266
  if (______r != 0) {
#line 267
    vga_mm_w(regbase, (int )port, (int )val);
  } else {
#line 269
    vga_io_w((int )port, (int )val);
  }
#line 270
  return;
}
}
#line 273 "include/video/vga.h"
__inline static void vga_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                unsigned char val ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 276
  ______f.func = "vga_w_fast";
#line 276
  ______f.file = "include/video/vga.h";
#line 276
  ______f.line = 276U;
#line 276
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 276
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 276
  ______r = (unsigned long )regbase != (unsigned long )((void *)0);
#line 276
  if (______r != 0) {
#line 276
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 276
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 276
  if (______r != 0) {
#line 277
    vga_mm_w_fast(regbase, (int )port, (int )reg, (int )val);
  } else {
#line 279
    vga_io_w_fast((int )port, (int )reg, (int )val);
  }
#line 280
  return;
}
}
#line 287 "include/video/vga.h"
__inline static unsigned char vga_rcrt(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 289
  vga_w(regbase, 980, (int )reg);
#line 290
  tmp = vga_r(regbase, 981);
#line 290
  return (tmp);
}
}
#line 293 "include/video/vga.h"
__inline static void vga_wcrt(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 296
  vga_w_fast(regbase, 980, (int )reg, (int )val);
#line 297
  return;
}
}
#line 340 "include/video/vga.h"
__inline static unsigned char vga_rseq(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 342
  vga_w(regbase, 964, (int )reg);
#line 343
  tmp = vga_r(regbase, 965);
#line 343
  return (tmp);
}
}
#line 346 "include/video/vga.h"
__inline static void vga_wseq(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 349
  vga_w_fast(regbase, 964, (int )reg, (int )val);
#line 350
  return;
}
}
#line 398 "include/video/vga.h"
__inline static void vga_wgfx(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 401
  vga_w_fast(regbase, 974, (int )reg, (int )val);
#line 402
  return;
}
}
#line 79 "include/linux/svga.h"
__inline static void svga_wseq_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 81
  tmp = vga_rseq(0, (int )index);
#line 81
  vga_wseq(0, (int )index, (int )((unsigned char )((int )((signed char )((int )data & (int )mask)) | ((int )((signed char )tmp) & ~ ((int )((signed char )mask))))));
#line 82
  return;
}
}
#line 86 "include/linux/svga.h"
__inline static void svga_wcrt_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 88
  tmp = vga_rcrt(0, (int )index);
#line 88
  vga_wcrt(0, (int )index, (int )((unsigned char )((int )((signed char )((int )data & (int )mask)) | ((int )((signed char )tmp) & ~ ((int )((signed char )mask))))));
#line 89
  return;
}
}
#line 91 "include/linux/svga.h"
__inline static int svga_primary_device(struct pci_dev *dev ) 
{ 
  u16 flags ;

  {
#line 94
  pci_read_config_word(dev, 4, & flags);
#line 95
  return ((int )flags & 1);
}
}
#line 99
extern void svga_wcrt_multi(struct vga_regset  const  * , u32  ) ;
#line 102
extern void svga_set_default_gfx_regs(void) ;
#line 103
extern void svga_set_default_atc_regs(void) ;
#line 104
extern void svga_set_default_seq_regs(void) ;
#line 105
extern void svga_set_default_crt_regs(void) ;
#line 106
extern void svga_set_textmode_vga_regs(void) ;
#line 109
extern void svga_tilecopy(struct fb_info * , struct fb_tilearea * ) ;
#line 110
extern void svga_tilefill(struct fb_info * , struct fb_tilerect * ) ;
#line 111
extern void svga_tileblit(struct fb_info * , struct fb_tileblit * ) ;
#line 112
extern void svga_tilecursor(struct fb_info * , struct fb_tilecursor * ) ;
#line 113
extern int svga_get_tilemax(struct fb_info * ) ;
#line 114
extern void svga_get_caps(struct fb_info * , struct fb_blit_caps * , struct fb_var_screeninfo * ) ;
#line 117
extern int svga_compute_pll(struct svga_pll  const  * , u32  , u16 * , u16 * , u16 * ,
                            int  ) ;
#line 118
extern int svga_check_timings(struct svga_timing_regs  const  * , struct fb_var_screeninfo * ,
                              int  ) ;
#line 119
extern void svga_set_timings(struct svga_timing_regs  const  * , struct fb_var_screeninfo * ,
                             u32  , u32  , u32  , u32  , u32  , int  ) ;
#line 121
extern int svga_match_format(struct svga_fb_format  const  * , struct fb_var_screeninfo * ,
                             struct fb_fix_screeninfo * ) ;
#line 118 "include/linux/console.h"
extern void acquire_console_sem(void) ;
#line 120
extern void release_console_sem(void) ;
#line 115 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
extern int mtrr_add(unsigned long  , unsigned long  , unsigned int  , bool  ) ;
#line 119
extern int mtrr_del(int  , unsigned long  , unsigned long  ) ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct svga_fb_format  const  arkfb_formats[9U]  = 
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
  {      {0U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 3U, 9U, 3U,
      8U, 8U}, 
        {4U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 3U,
      8U, 16U}, 
        {4U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 1U, 2U, 1U, 3U,
      8U, 16U}, 
        {8U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 3U,
      8U, 8U}, 
        {16U, {10U, 5U, 0U}, {5U, 5U, 0U}, {0U, 5U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      4U, 4U}, 
        {16U, {11U, 5U, 0U}, {5U, 6U, 0U}, {0U, 5U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      4U, 4U}, 
        {24U, {16U, 8U, 0U}, {8U, 8U, 0U}, {0U, 8U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      8U, 8U}, 
        {32U, {16U, 8U, 0U}, {8U, 8U, 0U}, {0U, 8U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      2U, 2U}, 
        {65535U, {0U, 0U, 0U}, {0U, 0U, 0U}, {0U, 0U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U,
      0U, 0U, 0U}};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_total_regs[3U]  = {      {0U, 0U, 7U}, 
        {65U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_display_regs[3U]  = {      {1U, 0U, 7U}, 
        {65U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_blank_start_regs[3U]  = {      {2U, 0U, 7U}, 
        {65U, 5U, 5U}, 
        {255U, 0U, 0U}};
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_blank_end_regs[3U]  = {      {3U, 0U, 4U}, 
        {5U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_sync_start_regs[3U]  = {      {4U, 0U, 7U}, 
        {65U, 4U, 4U}, 
        {255U, 0U, 0U}};
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_sync_end_regs[2U]  = {      {5U, 0U, 4U}, 
        {255U, 0U, 0U}};
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_total_regs[5U]  = {      {6U, 0U, 7U}, 
        {7U, 0U, 0U}, 
        {7U, 5U, 5U}, 
        {64U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_display_regs[5U]  = {      {18U, 0U, 7U}, 
        {7U, 1U, 1U}, 
        {7U, 6U, 6U}, 
        {64U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_blank_start_regs[5U]  = {      {21U, 0U, 7U}, 
        {7U, 3U, 3U}, 
        {9U, 5U, 5U}, 
        {64U, 5U, 5U}, 
        {255U, 0U, 0U}};
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_blank_end_regs[2U]  = {      {22U, 0U, 7U}, 
        {255U, 0U, 0U}};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_sync_start_regs[5U]  = {      {16U, 0U, 7U}, 
        {7U, 2U, 2U}, 
        {7U, 7U, 7U}, 
        {64U, 4U, 4U}, 
        {255U, 0U, 0U}};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_sync_end_regs[2U]  = {      {17U, 0U, 3U}, 
        {255U, 0U, 0U}};
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_line_compare_regs[4U]  = {      {24U, 0U, 7U}, 
        {7U, 4U, 4U}, 
        {9U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_start_address_regs[4U]  = {      {13U, 0U, 7U}, 
        {12U, 0U, 7U}, 
        {64U, 0U, 2U}, 
        {255U, 0U, 0U}};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_offset_regs[3U]  = {      {19U, 0U, 7U}, 
        {65U, 3U, 3U}, 
        {255U, 0U, 0U}};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct svga_timing_regs  const  ark_timing_regs  = 
#line 105
     {(struct vga_regset  const  *)(& ark_h_total_regs), (struct vga_regset  const  *)(& ark_h_display_regs),
    (struct vga_regset  const  *)(& ark_h_blank_start_regs), (struct vga_regset  const  *)(& ark_h_blank_end_regs),
    (struct vga_regset  const  *)(& ark_h_sync_start_regs), (struct vga_regset  const  *)(& ark_h_sync_end_regs),
    (struct vga_regset  const  *)(& ark_v_total_regs), (struct vga_regset  const  *)(& ark_v_display_regs),
    (struct vga_regset  const  *)(& ark_v_blank_start_regs), (struct vga_regset  const  *)(& ark_v_blank_end_regs),
    (struct vga_regset  const  *)(& ark_v_sync_start_regs), (struct vga_regset  const  *)(& ark_v_sync_end_regs)};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static char *mode_option  =    (char *)"640x480-8@60";
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int mtrr  =    1;
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int threshold  =    4;
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_settile(struct fb_info *info , struct fb_tilemap *map ) 
{ 
  u8 const   *font ;
  u8 *fb ;
  int i ;
  int c ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 149
  font = map->data;
#line 150
  fb = (u8 *)info->screen_base;
#line 153
  ______f.func = "arkfb_settile";
#line 153
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 153
  ______f.line = 154U;
#line 153
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 153
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 153
  ______r = ((map->width != 8U || map->height != 16U) || map->depth != 1U) || map->length != 256U;
#line 153
  if (______r != 0) {
#line 153
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 153
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 153
  if (______r != 0) {
#line 155
    printk("<3>fb%d: unsupported font parameters: width %d, height %d, depth %d, length %d\n",
           info->node, map->width, map->height, map->depth, map->length);
#line 158
    return;
  } else {

  }
#line 161
  fb = fb + 2UL;
#line 162
  c = 0;
#line 162
  goto ldv_27541;
  ldv_27540: 
#line 163
  i = 0;
#line 163
  goto ldv_27535;
  ldv_27534: 
#line 164
  __writeb((int )*(font + (unsigned long )i), (void volatile   *)fb + (unsigned long )(i * 4));
#line 165
  __writeb((int )*(font + (unsigned long )i), (void volatile   *)(fb + ((unsigned long )(i * 4) + 1024UL)));
#line 163
  i = i + 1;
  ldv_27535: ;
#line 163
  if ((__u32 )i < map->height) {
#line 164
    goto ldv_27534;
  } else {

  }
#line 167
  fb = fb + 128UL;
#line 169
  ______f___0.func = "arkfb_settile";
#line 169
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 169
  ______f___0.line = 169U;
#line 169
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 169
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 169
  ______r___0 = c % 8 == 7;
#line 169
  if (______r___0 != 0) {
#line 169
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 169
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 169
  if (______r___0 != 0) {
#line 170
    fb = fb + 1024UL;
  } else {

  }
#line 172
  font = font + (unsigned long )map->height;
#line 162
  c = c + 1;
  ldv_27541: ;
#line 162
  if ((__u32 )c < map->length) {
#line 163
    goto ldv_27540;
  } else {

  }

#line 167
  return;
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct fb_tile_ops arkfb_tile_ops  =    {& arkfb_settile, & svga_tilecopy, & svga_tilefill, & svga_tileblit, & svga_tilecursor,
    & svga_get_tilemax};
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static u32 expand_color(u32 c ) 
{ 


  {
#line 192
  return (((((c & 1U) | ((c & 2U) << 7)) | ((c & 4U) << 14)) | ((c & 8U) << 21)) * 255U);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_iplan_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 tmp ;
  u32 bg ;
  u32 tmp___0 ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp___1 ;
  u32 *tmp___2 ;

  {
#line 198
  tmp = expand_color(image->fg_color);
#line 198
  fg = tmp;
#line 199
  tmp___0 = expand_color(image->bg_color);
#line 199
  bg = tmp___0;
#line 206
  src1 = (u8 const   *)image->data;
#line 207
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )image->dy * info->fix.line_length) + (unsigned long )(((unsigned int )image->dx / 8U) * 4U)));
#line 210
  y = 0;
#line 210
  goto ldv_27564;
  ldv_27563: 
#line 211
  src = src1;
#line 212
  dst = (u32 *)dst1;
#line 213
  x = 0;
#line 213
  goto ldv_27561;
  ldv_27560: 
#line 214
  tmp___1 = src;
#line 214
  src = src + 1;
#line 214
  val = (u32 )((int )*tmp___1 * 16843009);
#line 215
  val = (val & fg) | (~ val & bg);
#line 216
  tmp___2 = dst;
#line 216
  dst = dst + 1;
#line 216
  __writel(val, (void volatile   *)tmp___2);
#line 213
  x = x + 8;
  ldv_27561: ;
#line 213
  if ((unsigned int )x < (unsigned int )image->width) {
#line 214
    goto ldv_27560;
  } else {

  }
#line 218
  src1 = src1 + (unsigned long )((unsigned int )image->width / 8U);
#line 219
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 210
  y = y + 1;
  ldv_27564: ;
#line 210
  if ((unsigned int )y < (unsigned int )image->height) {
#line 211
    goto ldv_27563;
  } else {

  }

#line 215
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_iplan_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 
  u32 fg ;
  u32 tmp ;
  u8 *dst1 ;
  u32 *dst ;
  int x ;
  int y ;
  u32 *tmp___0 ;

  {
#line 227
  tmp = expand_color(rect->color);
#line 227
  fg = tmp;
#line 232
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )rect->dy * info->fix.line_length) + (unsigned long )(((unsigned int )rect->dx / 8U) * 4U)));
#line 235
  y = 0;
#line 235
  goto ldv_27579;
  ldv_27578: 
#line 236
  dst = (u32 *)dst1;
#line 237
  x = 0;
#line 237
  goto ldv_27576;
  ldv_27575: 
#line 238
  tmp___0 = dst;
#line 238
  dst = dst + 1;
#line 238
  __writel(fg, (void volatile   *)tmp___0);
#line 237
  x = x + 8;
  ldv_27576: ;
#line 237
  if ((unsigned int )x < (unsigned int )rect->width) {
#line 238
    goto ldv_27575;
  } else {

  }
#line 240
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 235
  y = y + 1;
  ldv_27579: ;
#line 235
  if ((unsigned int )y < (unsigned int )rect->height) {
#line 236
    goto ldv_27578;
  } else {

  }

#line 240
  return;
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static u32 expand_pixel(u32 c ) 
{ 


  {
#line 249
  return ((((((((((c & 1U) << 24) | ((c & 2U) << 27)) | ((c & 4U) << 14)) | ((c & 8U) << 17)) | ((c & 16U) << 4)) | ((c & 32U) << 7)) | ((c & 64U) >> 6)) | ((c & 128U) >> 3)) * 15U);
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_cfb4_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 bg ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp ;
  u32 *tmp___0 ;

  {
#line 256
  fg = (unsigned int )image->fg_color * 286331153U;
#line 257
  bg = (unsigned int )image->bg_color * 286331153U;
#line 264
  src1 = (u8 const   *)image->data;
#line 265
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )image->dy * info->fix.line_length) + (unsigned long )(((unsigned int )image->dx / 8U) * 4U)));
#line 268
  y = 0;
#line 268
  goto ldv_27601;
  ldv_27600: 
#line 269
  src = src1;
#line 270
  dst = (u32 *)dst1;
#line 271
  x = 0;
#line 271
  goto ldv_27598;
  ldv_27597: 
#line 272
  tmp = src;
#line 272
  src = src + 1;
#line 272
  val = expand_pixel((u32 )*tmp);
#line 273
  val = (val & fg) | (~ val & bg);
#line 274
  tmp___0 = dst;
#line 274
  dst = dst + 1;
#line 274
  __writel(val, (void volatile   *)tmp___0);
#line 271
  x = x + 8;
  ldv_27598: ;
#line 271
  if ((unsigned int )x < (unsigned int )image->width) {
#line 272
    goto ldv_27597;
  } else {

  }
#line 276
  src1 = src1 + (unsigned long )((unsigned int )image->width / 8U);
#line 277
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 268
  y = y + 1;
  ldv_27601: ;
#line 268
  if ((unsigned int )y < (unsigned int )image->height) {
#line 269
    goto ldv_27600;
  } else {

  }

#line 273
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 284
  ______f___0.func = "arkfb_imageblit";
#line 284
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 284
  ______f___0.line = 285U;
#line 284
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 284
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 284
  ______r___0 = ((info->var.bits_per_pixel == 4U && (unsigned int )((unsigned char )image->depth) == 1U) && ((unsigned int )image->width & 7U) == 0U) && ((unsigned int )image->dx & 7U) == 0U;
#line 284
  if (______r___0 != 0) {
#line 284
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 284
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 284
  if (______r___0 != 0) {
#line 286
    ______f.func = "arkfb_imageblit";
#line 286
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 286
    ______f.line = 286U;
#line 286
    ______f.ldv_814.ldv_809.correct = 0UL;
#line 286
    ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 286
    ______r = info->fix.type == 2U;
#line 286
    if (______r != 0) {
#line 286
      ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 286
      ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
    }
#line 286
    if (______r != 0) {
#line 287
      arkfb_iplan_imageblit(info, image);
    } else {
#line 289
      arkfb_cfb4_imageblit(info, image);
    }
  } else {
#line 291
    cfb_imageblit(info, image);
  }
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 296
  ______f.func = "arkfb_fillrect";
#line 296
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 296
  ______f.line = 298U;
#line 296
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 296
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 296
  ______r = ((info->var.bits_per_pixel == 4U && ((unsigned int )rect->width & 7U) == 0U) && ((unsigned int )rect->dx & 7U) == 0U) && info->fix.type == 2U;
#line 296
  if (______r != 0) {
#line 296
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 296
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 296
  if (______r != 0) {
#line 299
    arkfb_iplan_fillrect(info, rect);
  } else {
#line 301
    cfb_fillrect(info, rect);
  }
#line 302
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static void dac_write_reg(struct dac_info *info , u8 reg , u8 val ) 
{ 
  u8 code[2U] ;

  {
#line 357
  code[0] = reg;
#line 357
  code[1] = val;
#line 358
  (*(info->dac_write_regs))(info->data, (u8 *)(& code), 1);
#line 359
  return;
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static void dac_write_regs(struct dac_info *info , u8 *code , int count ) 
{ 


  {
#line 363
  (*(info->dac_write_regs))(info->data, code, count);
#line 364
  return;
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static int dac_set_mode(struct dac_info *info , int mode ) 
{ 
  int tmp ;

  {
#line 368
  tmp = (*((info->dacops)->dac_set_mode))(info, mode);
#line 368
  return (tmp);
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static int dac_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  int tmp ;

  {
#line 373
  tmp = (*((info->dacops)->dac_set_freq))(info, channel, freq);
#line 373
  return (tmp);
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static void dac_release(struct dac_info *info ) 
{ 


  {
#line 378
  (*((info->dacops)->dac_release))(info);
#line 379
  return;
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static u8 const   ics5342_mode_table[10U]  = 
#line 396
  {      1U,      33U,      97U,      65U, 
        (unsigned char)0,      17U,      49U,      81U, 
        145U,      113U};
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int ics5342_set_mode(struct dac_info *info , int mode ) 
{ 
  u8 code ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 406
  ______f.func = "ics5342_set_mode";
#line 406
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 406
  ______f.line = 406U;
#line 406
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 406
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 406
  ______r = mode > 9;
#line 406
  if (______r != 0) {
#line 406
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 406
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 406
  if (______r != 0) {
#line 407
    return (-22);
  } else {

  }
#line 409
  code = ics5342_mode_table[mode];
#line 411
  ______f___0.func = "ics5342_set_mode";
#line 411
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 411
  ______f___0.line = 411U;
#line 411
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 411
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 411
  ______r___0 = (unsigned int )code == 0U;
#line 411
  if (______r___0 != 0) {
#line 411
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 411
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 411
  if (______r___0 != 0) {
#line 412
    return (-22);
  } else {

  }
#line 414
  dac_write_reg(info, 6, (int )code & 240);
#line 415
  ((struct ics5342_info *)info)->mode = (u8 )mode;
#line 417
  return (0);
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct svga_pll  const  ics5342_pll  = 
#line 420
     {3U, 129U, 3U, 33U, 0U, 3U, 60000U, 250000U, 14318U};
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct svga_pll  const  ics5342_pll_pd4  = 
#line 424
     {3U, 129U, 3U, 33U, 2U, 2U, 60000U, 335000U, 14318U};
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int ics5342_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  u16 m ;
  u16 n ;
  u16 r ;
  int rv ;
  int tmp ;
  u8 code[6U] ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 435
  tmp = svga_compute_pll((unsigned int )((struct ics5342_info *)info)->mode == 5U ? & ics5342_pll_pd4 : & ics5342_pll,
                         freq, & m, & n, & r, 0);
#line 435
  rv = tmp;
#line 439
  ______f.func = "ics5342_set_freq";
#line 439
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 439
  ______f.line = 439U;
#line 439
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 439
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 439
  ______r = rv < 0;
#line 439
  if (______r != 0) {
#line 439
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 439
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 439
  if (______r != 0) {
#line 440
    return (-22);
  } else {
#line 442
    code[0] = 4U;
#line 442
    code[1] = 3U;
#line 442
    code[2] = 5U;
#line 442
    code[3] = (unsigned int )((unsigned char )m) - 2U;
#line 442
    code[4] = 5U;
#line 442
    code[5] = (unsigned char )(((int )((signed char )n) - 2) | (int )((signed char )((int )r << 5)));
#line 443
    dac_write_regs(info, (u8 *)(& code), 3);
#line 444
    return (0);
  }
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void ics5342_release(struct dac_info *info ) 
{ 


  {
#line 450
  ics5342_set_mode(info, 0);
#line 451
  kfree((void const   *)info);
#line 452
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct dac_ops ics5342_ops  =    {0, & ics5342_set_mode, 0, & ics5342_set_freq, & ics5342_release};
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct dac_info *ics5342_init(void (*drr)(void * , u8 * , int  ) , void (*dwr)(void * ,
                                                                                      u8 * ,
                                                                                      int  ) ,
                                     void *data ) 
{ 
  struct dac_info *info ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 463
  tmp = kzalloc(40UL, 208U);
#line 463
  info = (struct dac_info *)tmp;
#line 465
  ______f.func = "ics5342_init";
#line 465
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 465
  ______f.line = 465U;
#line 465
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 465
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 465
  ______r = (unsigned long )info == (unsigned long )((struct dac_info *)0);
#line 465
  if (______r != 0) {
#line 465
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 465
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 465
  if (______r != 0) {
#line 466
    return (0);
  } else {

  }
#line 468
  info->dacops = & ics5342_ops;
#line 469
  info->dac_read_regs = drr;
#line 470
  info->dac_write_regs = dwr;
#line 471
  info->data = data;
#line 472
  ((struct ics5342_info *)info)->mode = 0U;
#line 473
  return (info);
}
}
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static unsigned short dac_regs[4U]  = {      968U,      969U,      966U,      967U};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void ark_dac_read_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
#line 484
  tmp = vga_rseq(0, 28);
#line 484
  regval = tmp;
#line 486
  goto ldv_27748;
  ldv_27747: 
#line 488
  vga_wseq(0, 28, (int )((unsigned char )((((int )*code & 4) != 0 ? -128 : 0) | (int )((signed char )regval))));
#line 489
  *(code + 1UL) = vga_r(0, (int )dac_regs[(int )*code & 3]);
#line 490
  count = count - 1;
#line 491
  code = code + 2UL;
  ldv_27748: ;
#line 486
  if (count != 0) {
#line 487
    goto ldv_27747;
  } else {

  }
#line 494
  vga_wseq(0, 28, (int )regval);
#line 495
  return;
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void ark_dac_write_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
#line 499
  tmp = vga_rseq(0, 28);
#line 499
  regval = tmp;
#line 501
  goto ldv_27757;
  ldv_27756: 
#line 503
  vga_wseq(0, 28, (int )((unsigned char )((((int )*code & 4) != 0 ? -128 : 0) | (int )((signed char )regval))));
#line 504
  vga_w(0, (int )dac_regs[(int )*code & 3], (int )*(code + 1UL));
#line 505
  count = count - 1;
#line 506
  code = code + 2UL;
  ldv_27757: ;
#line 501
  if (count != 0) {
#line 502
    goto ldv_27756;
  } else {

  }
#line 509
  vga_wseq(0, 28, (int )regval);
#line 510
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void ark_set_pixclock(struct fb_info *info , u32 pixclock ) 
{ 
  struct arkfb_info *par ;
  u8 regval ;
  int rv ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 515
  par = (struct arkfb_info *)info->par;
#line 518
  tmp = dac_set_freq(par->dac, 0, 1000000000U / pixclock);
#line 518
  rv = tmp;
#line 519
  ______f.func = "ark_set_pixclock";
#line 519
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 519
  ______f.line = 519U;
#line 519
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 519
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 519
  ______r = rv < 0;
#line 519
  if (______r != 0) {
#line 519
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 519
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 519
  if (______r != 0) {
#line 520
    printk("<3>fb%d: cannot set requested pixclock, keeping old value\n", info->node);
#line 521
    return;
  } else {

  }
#line 525
  regval = vga_r(0, 972);
#line 526
  vga_w(0, 962, (int )((unsigned int )regval | 12U));
#line 527
  return;
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_open(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 534
  par = (struct arkfb_info *)info->par;
#line 536
  mutex_lock_nested(& par->open_lock, 0U);
#line 537
  ______f.func = "arkfb_open";
#line 537
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 537
  ______f.line = 537U;
#line 537
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 537
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 537
  ______r = par->ref_count == 0U;
#line 537
  if (______r != 0) {
#line 537
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 537
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 537
  if (______r != 0) {
#line 538
    memset((void *)(& par->state), 0, 56UL);
#line 539
    par->state.flags = 31U;
#line 540
    par->state.num_crtc = 96U;
#line 541
    par->state.num_seq = 48U;
#line 542
    save_vga(& par->state);
  } else {

  }
#line 545
  par->ref_count = par->ref_count + 1U;
#line 546
  mutex_unlock(& par->open_lock);
#line 548
  return (0);
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_release(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 555
  par = (struct arkfb_info *)info->par;
#line 557
  mutex_lock_nested(& par->open_lock, 0U);
#line 558
  ______f.func = "arkfb_release";
#line 558
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 558
  ______f.line = 558U;
#line 558
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 558
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 558
  ______r = par->ref_count == 0U;
#line 558
  if (______r != 0) {
#line 558
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 558
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 558
  if (______r != 0) {
#line 559
    mutex_unlock(& par->open_lock);
#line 560
    return (-22);
  } else {

  }
#line 563
  ______f___0.func = "arkfb_release";
#line 563
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 563
  ______f___0.line = 563U;
#line 563
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 563
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 563
  ______r___0 = par->ref_count == 1U;
#line 563
  if (______r___0 != 0) {
#line 563
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 563
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 563
  if (______r___0 != 0) {
#line 564
    restore_vga(& par->state);
#line 565
    dac_set_mode(par->dac, 0);
  } else {

  }
#line 568
  par->ref_count = par->ref_count - 1U;
#line 569
  mutex_unlock(& par->open_lock);
#line 571
  return (0);
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  int rv ;
  int mem ;
  int step ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 581
  rv = svga_match_format((struct svga_fb_format  const  *)(& arkfb_formats), var,
                         0);
#line 582
  ______f.func = "arkfb_check_var";
#line 582
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 582
  ______f.line = 582U;
#line 582
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 582
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 582
  ______r = rv < 0;
#line 582
  if (______r != 0) {
#line 582
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 582
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 582
  if (______r != 0) {
#line 584
    printk("<3>fb%d: unsupported mode requested\n", info->node);
#line 585
    return (rv);
  } else {

  }
#line 589
  ______f___0.func = "arkfb_check_var";
#line 589
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 589
  ______f___0.line = 589U;
#line 589
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 589
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 589
  ______r___0 = var->xres > var->xres_virtual;
#line 589
  if (______r___0 != 0) {
#line 589
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 589
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 589
  if (______r___0 != 0) {
#line 590
    var->xres_virtual = var->xres;
  } else {

  }
#line 592
  ______f___1.func = "arkfb_check_var";
#line 592
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 592
  ______f___1.line = 592U;
#line 592
  ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 592
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 592
  ______r___1 = var->yres > var->yres_virtual;
#line 592
  if (______r___1 != 0) {
#line 592
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 592
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
#line 592
  if (______r___1 != 0) {
#line 593
    var->yres_virtual = var->yres;
  } else {

  }
#line 596
  step = (int )((unsigned int )arkfb_formats[rv].xresstep - 1U);
#line 597
  var->xres_virtual = (var->xres_virtual + (__u32 )step) & (__u32 )(~ step);
#line 601
  mem = (int )((var->bits_per_pixel * var->xres_virtual >> 3) * var->yres_virtual);
#line 602
  ______f___2.func = "arkfb_check_var";
#line 602
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 602
  ______f___2.line = 602U;
#line 602
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 602
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 602
  ______r___2 = (unsigned long )mem > info->screen_size;
#line 602
  if (______r___2 != 0) {
#line 602
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 602
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 602
  if (______r___2 != 0) {
#line 604
    printk("<3>fb%d: not enough framebuffer memory (%d kB requested , %d kB available)\n",
           info->node, mem >> 10, (unsigned int )(info->screen_size >> 10));
#line 605
    return (-22);
  } else {

  }
#line 608
  rv = svga_check_timings(& ark_timing_regs, var, info->node);
#line 609
  ______f___3.func = "arkfb_check_var";
#line 609
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 609
  ______f___3.line = 609U;
#line 609
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 609
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 609
  ______r___3 = rv < 0;
#line 609
  if (______r___3 != 0) {
#line 609
    ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 609
    ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
  }
#line 609
  if (______r___3 != 0) {
#line 611
    printk("<3>fb%d: invalid timings requested\n", info->node);
#line 612
    return (rv);
  } else {

  }
#line 616
  ______f___4.func = "arkfb_check_var";
#line 616
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 616
  ______f___4.line = 616U;
#line 616
  ______f___4.ldv_814.ldv_809.correct = 0UL;
#line 616
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
#line 616
  ______r___4 = (int )var->vmode & 1;
#line 616
  if (______r___4 != 0) {
#line 616
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 616
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
#line 616
  if (______r___4 != 0) {
#line 617
    return (-22);
  } else {

  }
#line 619
  return (0);
}
}
#line 624 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_set_par(struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  u32 value ;
  u32 mode ;
  u32 hmul ;
  u32 hdiv ;
  u32 offset_value ;
  u32 screen_size ;
  u32 bpp ;
  u8 regval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct _ddebug descriptor ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int __ret ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  long tmp ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int __ret___0 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  long tmp___4 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  struct _ddebug descriptor___1 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int __ret___1 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  long tmp___8 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  long tmp___9 ;
  long tmp___10 ;
  int tmp___11 ;
  struct _ddebug descriptor___2 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int __ret___2 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  long tmp___12 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  long tmp___13 ;
  long tmp___14 ;
  int tmp___15 ;
  struct _ddebug descriptor___3 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int __ret___3 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  long tmp___16 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  long tmp___17 ;
  long tmp___18 ;
  int tmp___19 ;
  struct _ddebug descriptor___4 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;
  int __ret___4 ;
  int ______r___28 ;
  struct ftrace_branch_data ______f___28 ;
  int ______r___29 ;
  struct ftrace_branch_data ______f___29 ;
  long tmp___20 ;
  int ______r___30 ;
  struct ftrace_branch_data ______f___30 ;
  int ______r___31 ;
  struct ftrace_branch_data ______f___31 ;
  long tmp___21 ;
  long tmp___22 ;
  int tmp___23 ;
  struct _ddebug descriptor___5 ;
  int ______r___32 ;
  struct ftrace_branch_data ______f___32 ;
  int __ret___5 ;
  int ______r___33 ;
  struct ftrace_branch_data ______f___33 ;
  int ______r___34 ;
  struct ftrace_branch_data ______f___34 ;
  long tmp___24 ;
  int ______r___35 ;
  struct ftrace_branch_data ______f___35 ;
  int ______r___36 ;
  struct ftrace_branch_data ______f___36 ;
  long tmp___25 ;
  long tmp___26 ;
  int tmp___27 ;
  int ______r___37 ;
  struct ftrace_branch_data ______f___37 ;
  struct _ddebug descriptor___6 ;
  int ______r___38 ;
  struct ftrace_branch_data ______f___38 ;
  int __ret___6 ;
  int ______r___39 ;
  struct ftrace_branch_data ______f___39 ;
  int ______r___40 ;
  struct ftrace_branch_data ______f___40 ;
  long tmp___28 ;
  int ______r___41 ;
  struct ftrace_branch_data ______f___41 ;
  int ______r___42 ;
  struct ftrace_branch_data ______f___42 ;
  long tmp___29 ;
  long tmp___30 ;
  int tmp___31 ;
  struct _ddebug descriptor___7 ;
  int ______r___43 ;
  struct ftrace_branch_data ______f___43 ;
  int __ret___7 ;
  int ______r___44 ;
  struct ftrace_branch_data ______f___44 ;
  int ______r___45 ;
  struct ftrace_branch_data ______f___45 ;
  long tmp___32 ;
  int ______r___46 ;
  struct ftrace_branch_data ______f___46 ;
  int ______r___47 ;
  struct ftrace_branch_data ______f___47 ;
  long tmp___33 ;
  long tmp___34 ;
  int tmp___35 ;
  struct _ddebug descriptor___8 ;
  int ______r___48 ;
  struct ftrace_branch_data ______f___48 ;
  int __ret___8 ;
  int ______r___49 ;
  struct ftrace_branch_data ______f___49 ;
  int ______r___50 ;
  struct ftrace_branch_data ______f___50 ;
  long tmp___36 ;
  int ______r___51 ;
  struct ftrace_branch_data ______f___51 ;
  int ______r___52 ;
  struct ftrace_branch_data ______f___52 ;
  long tmp___37 ;
  long tmp___38 ;
  int tmp___39 ;
  struct _ddebug descriptor___9 ;
  int ______r___53 ;
  struct ftrace_branch_data ______f___53 ;
  int __ret___9 ;
  int ______r___54 ;
  struct ftrace_branch_data ______f___54 ;
  int ______r___55 ;
  struct ftrace_branch_data ______f___55 ;
  long tmp___40 ;
  int ______r___56 ;
  struct ftrace_branch_data ______f___56 ;
  int ______r___57 ;
  struct ftrace_branch_data ______f___57 ;
  long tmp___41 ;
  long tmp___42 ;
  int tmp___43 ;

  {
#line 626
  par = (struct arkfb_info *)info->par;
#line 628
  bpp = info->var.bits_per_pixel;
#line 631
  ______f.func = "arkfb_set_par";
#line 631
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 631
  ______f.line = 631U;
#line 631
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 631
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 631
  ______r = bpp != 0U;
#line 631
  if (______r != 0) {
#line 631
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 631
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 631
  if (______r != 0) {
#line 632
    info->fix.ypanstep = 1U;
#line 633
    info->fix.line_length = (info->var.xres_virtual * bpp) / 8U;
#line 635
    info->flags = info->flags & -131073;
#line 636
    info->tileops = 0;
#line 639
    info->pixmap.blit_x = bpp == 4U ? 128U : 4294967295U;
#line 640
    info->pixmap.blit_y = 4294967295U;
#line 642
    offset_value = (info->var.xres_virtual * bpp) / 64U;
#line 643
    screen_size = info->var.yres_virtual * info->fix.line_length;
  } else {
#line 645
    info->fix.ypanstep = 16U;
#line 646
    info->fix.line_length = 0U;
#line 648
    info->flags = info->flags | 131072;
#line 649
    info->tileops = & arkfb_tile_ops;
#line 652
    info->pixmap.blit_x = 128U;
#line 653
    info->pixmap.blit_y = 32768U;
#line 655
    offset_value = info->var.xres_virtual / 16U;
#line 656
    screen_size = (info->var.xres_virtual * info->var.yres_virtual) / 64U;
  }
#line 659
  info->var.xoffset = 0U;
#line 660
  info->var.yoffset = 0U;
#line 661
  info->var.activate = 0U;
#line 664
  svga_wcrt_mask(17, 0, 128);
#line 667
  svga_wseq_mask(1, 32, 32);
#line 668
  svga_wcrt_mask(23, 0, 128);
#line 671
  svga_set_default_gfx_regs();
#line 672
  svga_set_default_atc_regs();
#line 673
  svga_set_default_seq_regs();
#line 674
  svga_set_default_crt_regs();
#line 675
  svga_wcrt_multi((struct vga_regset  const  *)(& ark_line_compare_regs), 4294967295U);
#line 676
  svga_wcrt_multi((struct vga_regset  const  *)(& ark_start_address_regs), 0U);
#line 679
  svga_wseq_mask(16, 31, 31);
#line 680
  svga_wseq_mask(18, 3, 3);
#line 682
  vga_wseq(0, 19, (int )((unsigned char )(info->fix.smem_start >> 16)));
#line 683
  vga_wseq(0, 20, (int )((unsigned char )(info->fix.smem_start >> 24)));
#line 684
  vga_wseq(0, 21, 0);
#line 685
  vga_wseq(0, 22, 0);
#line 689
  regval = (u8 )((((int )((signed char )((threshold & 14) >> 1)) | (int )((signed char )(threshold << 7))) | (int )((signed char )((threshold & 16) << 1))) | 16);
#line 690
  vga_wseq(0, 24, (int )regval);
#line 693
  descriptor.modname = "arkfb";
#line 693
  descriptor.function = "arkfb_set_par";
#line 693
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
  descriptor.format = "fb%d: offset register       : %d\n";
#line 693
  descriptor.primary_hash = 16;
#line 693
  descriptor.secondary_hash = 32;
#line 693
  descriptor.lineno = 693U;
#line 693
  descriptor.flags = 0U;
#line 693
  ______f___0.func = "arkfb_set_par";
#line 693
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
  ______f___0.line = 693U;
#line 693
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 693
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 693
  __ret = 0;
#line 693
  ______f___3.func = "arkfb_set_par";
#line 693
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
  ______f___3.line = 693U;
#line 693
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 693
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 693
  ______f___4.func = "arkfb_set_par";
#line 693
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
  ______f___4.line = 693U;
#line 693
  ______f___4.ldv_814.ldv_809.correct = 0UL;
#line 693
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
#line 693
  tmp___0 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 693
  if (tmp___0 != 0L) {
#line 693
    tmp___1 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 693
    if (tmp___1 != 0L) {
#line 693
      tmp___2 = 1;
    } else {
#line 693
      tmp___2 = 0;
    }
  } else {
#line 693
    tmp___2 = 0;
  }
#line 693
  ______r___4 = tmp___2;
#line 693
  ftrace_likely_update(& ______f___4, ______r___4, 0);
#line 693
  ______r___3 = ______r___4 != 0;
#line 693
  if (______r___3 != 0) {
#line 693
    ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 693
    ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
  }
#line 693
  if (______r___3 != 0) {
#line 693
    ______f___1.func = "arkfb_set_par";
#line 693
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
    ______f___1.line = 693U;
#line 693
    ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 693
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 693
    ______f___2.func = "arkfb_set_par";
#line 693
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 693
    ______f___2.line = 693U;
#line 693
    ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 693
    ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 693
    tmp = __builtin_expect((unsigned int )descriptor.flags != 0U, 1L);
#line 693
    ______r___2 = (int )tmp;
#line 693
    ftrace_likely_update(& ______f___2, ______r___2, 0);
#line 693
    ______r___1 = ______r___2 != 0;
#line 693
    if (______r___1 != 0) {
#line 693
      ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 693
      ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
    }
#line 693
    if (______r___1 != 0) {
#line 693
      __ret = 1;
    } else {

    }
  } else {

  }
#line 693
  ______r___0 = __ret != 0;
#line 693
  if (______r___0 != 0) {
#line 693
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 693
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 693
  if (______r___0 != 0) {
#line 693
    printk("<7>arkfb:fb%d: offset register       : %d\n", info->node, offset_value);
  } else {

  }
#line 694
  svga_wcrt_multi((struct vga_regset  const  *)(& ark_offset_regs), offset_value);
#line 697
  svga_wcrt_mask(64, 8, 8);
#line 699
  ______f___5.func = "arkfb_set_par";
#line 699
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 699
  ______f___5.line = 699U;
#line 699
  ______f___5.ldv_814.ldv_809.correct = 0UL;
#line 699
  ______f___5.ldv_814.ldv_809.incorrect = 0UL;
#line 699
  ______r___5 = (info->var.vmode & 2U) != 0U;
#line 699
  if (______r___5 != 0) {
#line 699
    ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 699
    ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
  }
#line 699
  if (______r___5 != 0) {
#line 700
    svga_wcrt_mask(9, 128, 128);
  } else {
#line 702
    svga_wcrt_mask(9, 0, 128);
  }
#line 704
  ______f___6.func = "arkfb_set_par";
#line 704
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 704
  ______f___6.line = 704U;
#line 704
  ______f___6.ldv_814.ldv_809.correct = 0UL;
#line 704
  ______f___6.ldv_814.ldv_809.incorrect = 0UL;
#line 704
  ______r___6 = (int )info->var.vmode & 1;
#line 704
  if (______r___6 != 0) {
#line 704
    ______f___6.ldv_814.ldv_813.hit = ______f___6.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 704
    ______f___6.ldv_814.ldv_813.miss = ______f___6.ldv_814.ldv_813.miss + 1UL;
  }
#line 704
  if (______r___6 != 0) {
#line 705
    svga_wcrt_mask(68, 4, 4);
  } else {
#line 707
    svga_wcrt_mask(68, 0, 4);
  }
#line 709
  hmul = 1U;
#line 710
  hdiv = 1U;
#line 711
  tmp___3 = svga_match_format((struct svga_fb_format  const  *)(& arkfb_formats),
                              & info->var, & info->fix);
#line 711
  mode = (u32 )tmp___3;
#line 714
  switch (mode) {
  case (u32 )0: 
#line 716
  descriptor___0.modname = "arkfb";
#line 716
  descriptor___0.function = "arkfb_set_par";
#line 716
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
  descriptor___0.format = "fb%d: text mode\n";
#line 716
  descriptor___0.primary_hash = 16;
#line 716
  descriptor___0.secondary_hash = 32;
#line 716
  descriptor___0.lineno = 716U;
#line 716
  descriptor___0.flags = 0U;
#line 716
  ______f___7.func = "arkfb_set_par";
#line 716
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
  ______f___7.line = 716U;
#line 716
  ______f___7.ldv_814.ldv_809.correct = 0UL;
#line 716
  ______f___7.ldv_814.ldv_809.incorrect = 0UL;
#line 716
  __ret___0 = 0;
#line 716
  ______f___10.func = "arkfb_set_par";
#line 716
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
  ______f___10.line = 716U;
#line 716
  ______f___10.ldv_814.ldv_809.correct = 0UL;
#line 716
  ______f___10.ldv_814.ldv_809.incorrect = 0UL;
#line 716
  ______f___11.func = "arkfb_set_par";
#line 716
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
  ______f___11.line = 716U;
#line 716
  ______f___11.ldv_814.ldv_809.correct = 0UL;
#line 716
  ______f___11.ldv_814.ldv_809.incorrect = 0UL;
#line 716
  tmp___5 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 716
  if (tmp___5 != 0L) {
#line 716
    tmp___6 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 716
    if (tmp___6 != 0L) {
#line 716
      tmp___7 = 1;
    } else {
#line 716
      tmp___7 = 0;
    }
  } else {
#line 716
    tmp___7 = 0;
  }
#line 716
  ______r___11 = tmp___7;
#line 716
  ftrace_likely_update(& ______f___11, ______r___11, 0);
#line 716
  ______r___10 = ______r___11 != 0;
#line 716
  if (______r___10 != 0) {
#line 716
    ______f___10.ldv_814.ldv_813.hit = ______f___10.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 716
    ______f___10.ldv_814.ldv_813.miss = ______f___10.ldv_814.ldv_813.miss + 1UL;
  }
#line 716
  if (______r___10 != 0) {
#line 716
    ______f___8.func = "arkfb_set_par";
#line 716
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
    ______f___8.line = 716U;
#line 716
    ______f___8.ldv_814.ldv_809.correct = 0UL;
#line 716
    ______f___8.ldv_814.ldv_809.incorrect = 0UL;
#line 716
    ______f___9.func = "arkfb_set_par";
#line 716
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 716
    ______f___9.line = 716U;
#line 716
    ______f___9.ldv_814.ldv_809.correct = 0UL;
#line 716
    ______f___9.ldv_814.ldv_809.incorrect = 0UL;
#line 716
    tmp___4 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 1L);
#line 716
    ______r___9 = (int )tmp___4;
#line 716
    ftrace_likely_update(& ______f___9, ______r___9, 0);
#line 716
    ______r___8 = ______r___9 != 0;
#line 716
    if (______r___8 != 0) {
#line 716
      ______f___8.ldv_814.ldv_813.hit = ______f___8.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 716
      ______f___8.ldv_814.ldv_813.miss = ______f___8.ldv_814.ldv_813.miss + 1UL;
    }
#line 716
    if (______r___8 != 0) {
#line 716
      __ret___0 = 1;
    } else {

    }
  } else {

  }
#line 716
  ______r___7 = __ret___0 != 0;
#line 716
  if (______r___7 != 0) {
#line 716
    ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 716
    ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
  }
#line 716
  if (______r___7 != 0) {
#line 716
    printk("<7>arkfb:fb%d: text mode\n", info->node);
  } else {

  }
#line 717
  svga_set_textmode_vga_regs();
#line 719
  vga_wseq(0, 17, 16);
#line 720
  svga_wcrt_mask(70, 0, 4);
#line 721
  dac_set_mode(par->dac, 0);
#line 723
  goto ldv_28004;
  case (u32 )1: 
#line 725
  descriptor___1.modname = "arkfb";
#line 725
  descriptor___1.function = "arkfb_set_par";
#line 725
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
  descriptor___1.format = "fb%d: 4 bit pseudocolor\n";
#line 725
  descriptor___1.primary_hash = 16;
#line 725
  descriptor___1.secondary_hash = 32;
#line 725
  descriptor___1.lineno = 725U;
#line 725
  descriptor___1.flags = 0U;
#line 725
  ______f___12.func = "arkfb_set_par";
#line 725
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
  ______f___12.line = 725U;
#line 725
  ______f___12.ldv_814.ldv_809.correct = 0UL;
#line 725
  ______f___12.ldv_814.ldv_809.incorrect = 0UL;
#line 725
  __ret___1 = 0;
#line 725
  ______f___15.func = "arkfb_set_par";
#line 725
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
  ______f___15.line = 725U;
#line 725
  ______f___15.ldv_814.ldv_809.correct = 0UL;
#line 725
  ______f___15.ldv_814.ldv_809.incorrect = 0UL;
#line 725
  ______f___16.func = "arkfb_set_par";
#line 725
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
  ______f___16.line = 725U;
#line 725
  ______f___16.ldv_814.ldv_809.correct = 0UL;
#line 725
  ______f___16.ldv_814.ldv_809.incorrect = 0UL;
#line 725
  tmp___9 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 725
  if (tmp___9 != 0L) {
#line 725
    tmp___10 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 725
    if (tmp___10 != 0L) {
#line 725
      tmp___11 = 1;
    } else {
#line 725
      tmp___11 = 0;
    }
  } else {
#line 725
    tmp___11 = 0;
  }
#line 725
  ______r___16 = tmp___11;
#line 725
  ftrace_likely_update(& ______f___16, ______r___16, 0);
#line 725
  ______r___15 = ______r___16 != 0;
#line 725
  if (______r___15 != 0) {
#line 725
    ______f___15.ldv_814.ldv_813.hit = ______f___15.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 725
    ______f___15.ldv_814.ldv_813.miss = ______f___15.ldv_814.ldv_813.miss + 1UL;
  }
#line 725
  if (______r___15 != 0) {
#line 725
    ______f___13.func = "arkfb_set_par";
#line 725
    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
    ______f___13.line = 725U;
#line 725
    ______f___13.ldv_814.ldv_809.correct = 0UL;
#line 725
    ______f___13.ldv_814.ldv_809.incorrect = 0UL;
#line 725
    ______f___14.func = "arkfb_set_par";
#line 725
    ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 725
    ______f___14.line = 725U;
#line 725
    ______f___14.ldv_814.ldv_809.correct = 0UL;
#line 725
    ______f___14.ldv_814.ldv_809.incorrect = 0UL;
#line 725
    tmp___8 = __builtin_expect((unsigned int )descriptor___1.flags != 0U, 1L);
#line 725
    ______r___14 = (int )tmp___8;
#line 725
    ftrace_likely_update(& ______f___14, ______r___14, 0);
#line 725
    ______r___13 = ______r___14 != 0;
#line 725
    if (______r___13 != 0) {
#line 725
      ______f___13.ldv_814.ldv_813.hit = ______f___13.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 725
      ______f___13.ldv_814.ldv_813.miss = ______f___13.ldv_814.ldv_813.miss + 1UL;
    }
#line 725
    if (______r___13 != 0) {
#line 725
      __ret___1 = 1;
    } else {

    }
  } else {

  }
#line 725
  ______r___12 = __ret___1 != 0;
#line 725
  if (______r___12 != 0) {
#line 725
    ______f___12.ldv_814.ldv_813.hit = ______f___12.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 725
    ______f___12.ldv_814.ldv_813.miss = ______f___12.ldv_814.ldv_813.miss + 1UL;
  }
#line 725
  if (______r___12 != 0) {
#line 725
    printk("<7>arkfb:fb%d: 4 bit pseudocolor\n", info->node);
  } else {

  }
#line 726
  vga_wgfx(0, 5, 64);
#line 728
  vga_wseq(0, 17, 16);
#line 729
  svga_wcrt_mask(70, 0, 4);
#line 730
  dac_set_mode(par->dac, 0);
#line 731
  goto ldv_28004;
  case (u32 )2: 
#line 733
  descriptor___2.modname = "arkfb";
#line 733
  descriptor___2.function = "arkfb_set_par";
#line 733
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
  descriptor___2.format = "fb%d: 4 bit pseudocolor, planar\n";
#line 733
  descriptor___2.primary_hash = 16;
#line 733
  descriptor___2.secondary_hash = 32;
#line 733
  descriptor___2.lineno = 733U;
#line 733
  descriptor___2.flags = 0U;
#line 733
  ______f___17.func = "arkfb_set_par";
#line 733
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
  ______f___17.line = 733U;
#line 733
  ______f___17.ldv_814.ldv_809.correct = 0UL;
#line 733
  ______f___17.ldv_814.ldv_809.incorrect = 0UL;
#line 733
  __ret___2 = 0;
#line 733
  ______f___20.func = "arkfb_set_par";
#line 733
  ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
  ______f___20.line = 733U;
#line 733
  ______f___20.ldv_814.ldv_809.correct = 0UL;
#line 733
  ______f___20.ldv_814.ldv_809.incorrect = 0UL;
#line 733
  ______f___21.func = "arkfb_set_par";
#line 733
  ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
  ______f___21.line = 733U;
#line 733
  ______f___21.ldv_814.ldv_809.correct = 0UL;
#line 733
  ______f___21.ldv_814.ldv_809.incorrect = 0UL;
#line 733
  tmp___13 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 733
  if (tmp___13 != 0L) {
#line 733
    tmp___14 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 733
    if (tmp___14 != 0L) {
#line 733
      tmp___15 = 1;
    } else {
#line 733
      tmp___15 = 0;
    }
  } else {
#line 733
    tmp___15 = 0;
  }
#line 733
  ______r___21 = tmp___15;
#line 733
  ftrace_likely_update(& ______f___21, ______r___21, 0);
#line 733
  ______r___20 = ______r___21 != 0;
#line 733
  if (______r___20 != 0) {
#line 733
    ______f___20.ldv_814.ldv_813.hit = ______f___20.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 733
    ______f___20.ldv_814.ldv_813.miss = ______f___20.ldv_814.ldv_813.miss + 1UL;
  }
#line 733
  if (______r___20 != 0) {
#line 733
    ______f___18.func = "arkfb_set_par";
#line 733
    ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
    ______f___18.line = 733U;
#line 733
    ______f___18.ldv_814.ldv_809.correct = 0UL;
#line 733
    ______f___18.ldv_814.ldv_809.incorrect = 0UL;
#line 733
    ______f___19.func = "arkfb_set_par";
#line 733
    ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 733
    ______f___19.line = 733U;
#line 733
    ______f___19.ldv_814.ldv_809.correct = 0UL;
#line 733
    ______f___19.ldv_814.ldv_809.incorrect = 0UL;
#line 733
    tmp___12 = __builtin_expect((unsigned int )descriptor___2.flags != 0U, 1L);
#line 733
    ______r___19 = (int )tmp___12;
#line 733
    ftrace_likely_update(& ______f___19, ______r___19, 0);
#line 733
    ______r___18 = ______r___19 != 0;
#line 733
    if (______r___18 != 0) {
#line 733
      ______f___18.ldv_814.ldv_813.hit = ______f___18.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 733
      ______f___18.ldv_814.ldv_813.miss = ______f___18.ldv_814.ldv_813.miss + 1UL;
    }
#line 733
    if (______r___18 != 0) {
#line 733
      __ret___2 = 1;
    } else {

    }
  } else {

  }
#line 733
  ______r___17 = __ret___2 != 0;
#line 733
  if (______r___17 != 0) {
#line 733
    ______f___17.ldv_814.ldv_813.hit = ______f___17.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 733
    ______f___17.ldv_814.ldv_813.miss = ______f___17.ldv_814.ldv_813.miss + 1UL;
  }
#line 733
  if (______r___17 != 0) {
#line 733
    printk("<7>arkfb:fb%d: 4 bit pseudocolor, planar\n", info->node);
  } else {

  }
#line 735
  vga_wseq(0, 17, 16);
#line 736
  svga_wcrt_mask(70, 0, 4);
#line 737
  dac_set_mode(par->dac, 0);
#line 738
  goto ldv_28004;
  case (u32 )3: 
#line 740
  descriptor___3.modname = "arkfb";
#line 740
  descriptor___3.function = "arkfb_set_par";
#line 740
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
  descriptor___3.format = "fb%d: 8 bit pseudocolor\n";
#line 740
  descriptor___3.primary_hash = 16;
#line 740
  descriptor___3.secondary_hash = 32;
#line 740
  descriptor___3.lineno = 740U;
#line 740
  descriptor___3.flags = 0U;
#line 740
  ______f___22.func = "arkfb_set_par";
#line 740
  ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
  ______f___22.line = 740U;
#line 740
  ______f___22.ldv_814.ldv_809.correct = 0UL;
#line 740
  ______f___22.ldv_814.ldv_809.incorrect = 0UL;
#line 740
  __ret___3 = 0;
#line 740
  ______f___25.func = "arkfb_set_par";
#line 740
  ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
  ______f___25.line = 740U;
#line 740
  ______f___25.ldv_814.ldv_809.correct = 0UL;
#line 740
  ______f___25.ldv_814.ldv_809.incorrect = 0UL;
#line 740
  ______f___26.func = "arkfb_set_par";
#line 740
  ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
  ______f___26.line = 740U;
#line 740
  ______f___26.ldv_814.ldv_809.correct = 0UL;
#line 740
  ______f___26.ldv_814.ldv_809.incorrect = 0UL;
#line 740
  tmp___17 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 740
  if (tmp___17 != 0L) {
#line 740
    tmp___18 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 740
    if (tmp___18 != 0L) {
#line 740
      tmp___19 = 1;
    } else {
#line 740
      tmp___19 = 0;
    }
  } else {
#line 740
    tmp___19 = 0;
  }
#line 740
  ______r___26 = tmp___19;
#line 740
  ftrace_likely_update(& ______f___26, ______r___26, 0);
#line 740
  ______r___25 = ______r___26 != 0;
#line 740
  if (______r___25 != 0) {
#line 740
    ______f___25.ldv_814.ldv_813.hit = ______f___25.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 740
    ______f___25.ldv_814.ldv_813.miss = ______f___25.ldv_814.ldv_813.miss + 1UL;
  }
#line 740
  if (______r___25 != 0) {
#line 740
    ______f___23.func = "arkfb_set_par";
#line 740
    ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
    ______f___23.line = 740U;
#line 740
    ______f___23.ldv_814.ldv_809.correct = 0UL;
#line 740
    ______f___23.ldv_814.ldv_809.incorrect = 0UL;
#line 740
    ______f___24.func = "arkfb_set_par";
#line 740
    ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 740
    ______f___24.line = 740U;
#line 740
    ______f___24.ldv_814.ldv_809.correct = 0UL;
#line 740
    ______f___24.ldv_814.ldv_809.incorrect = 0UL;
#line 740
    tmp___16 = __builtin_expect((unsigned int )descriptor___3.flags != 0U, 1L);
#line 740
    ______r___24 = (int )tmp___16;
#line 740
    ftrace_likely_update(& ______f___24, ______r___24, 0);
#line 740
    ______r___23 = ______r___24 != 0;
#line 740
    if (______r___23 != 0) {
#line 740
      ______f___23.ldv_814.ldv_813.hit = ______f___23.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 740
      ______f___23.ldv_814.ldv_813.miss = ______f___23.ldv_814.ldv_813.miss + 1UL;
    }
#line 740
    if (______r___23 != 0) {
#line 740
      __ret___3 = 1;
    } else {

    }
  } else {

  }
#line 740
  ______r___22 = __ret___3 != 0;
#line 740
  if (______r___22 != 0) {
#line 740
    ______f___22.ldv_814.ldv_813.hit = ______f___22.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 740
    ______f___22.ldv_814.ldv_813.miss = ______f___22.ldv_814.ldv_813.miss + 1UL;
  }
#line 740
  if (______r___22 != 0) {
#line 740
    printk("<7>arkfb:fb%d: 8 bit pseudocolor\n", info->node);
  } else {

  }
#line 742
  vga_wseq(0, 17, 22);
#line 744
  ______f___37.func = "arkfb_set_par";
#line 744
  ______f___37.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 744
  ______f___37.line = 744U;
#line 744
  ______f___37.ldv_814.ldv_809.correct = 0UL;
#line 744
  ______f___37.ldv_814.ldv_809.incorrect = 0UL;
#line 744
  ______r___37 = info->var.pixclock > 20000U;
#line 744
  if (______r___37 != 0) {
#line 744
    ______f___37.ldv_814.ldv_813.hit = ______f___37.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 744
    ______f___37.ldv_814.ldv_813.miss = ______f___37.ldv_814.ldv_813.miss + 1UL;
  }
#line 744
  if (______r___37 != 0) {
#line 745
    descriptor___4.modname = "arkfb";
#line 745
    descriptor___4.function = "arkfb_set_par";
#line 745
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
    descriptor___4.format = "fb%d: not using multiplex\n";
#line 745
    descriptor___4.primary_hash = 16;
#line 745
    descriptor___4.secondary_hash = 32;
#line 745
    descriptor___4.lineno = 745U;
#line 745
    descriptor___4.flags = 0U;
#line 745
    ______f___27.func = "arkfb_set_par";
#line 745
    ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
    ______f___27.line = 745U;
#line 745
    ______f___27.ldv_814.ldv_809.correct = 0UL;
#line 745
    ______f___27.ldv_814.ldv_809.incorrect = 0UL;
#line 745
    __ret___4 = 0;
#line 745
    ______f___30.func = "arkfb_set_par";
#line 745
    ______f___30.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
    ______f___30.line = 745U;
#line 745
    ______f___30.ldv_814.ldv_809.correct = 0UL;
#line 745
    ______f___30.ldv_814.ldv_809.incorrect = 0UL;
#line 745
    ______f___31.func = "arkfb_set_par";
#line 745
    ______f___31.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
    ______f___31.line = 745U;
#line 745
    ______f___31.ldv_814.ldv_809.correct = 0UL;
#line 745
    ______f___31.ldv_814.ldv_809.incorrect = 0UL;
#line 745
    tmp___21 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 745
    if (tmp___21 != 0L) {
#line 745
      tmp___22 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL,
                                  1L);
#line 745
      if (tmp___22 != 0L) {
#line 745
        tmp___23 = 1;
      } else {
#line 745
        tmp___23 = 0;
      }
    } else {
#line 745
      tmp___23 = 0;
    }
#line 745
    ______r___31 = tmp___23;
#line 745
    ftrace_likely_update(& ______f___31, ______r___31, 0);
#line 745
    ______r___30 = ______r___31 != 0;
#line 745
    if (______r___30 != 0) {
#line 745
      ______f___30.ldv_814.ldv_813.hit = ______f___30.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 745
      ______f___30.ldv_814.ldv_813.miss = ______f___30.ldv_814.ldv_813.miss + 1UL;
    }
#line 745
    if (______r___30 != 0) {
#line 745
      ______f___28.func = "arkfb_set_par";
#line 745
      ______f___28.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
      ______f___28.line = 745U;
#line 745
      ______f___28.ldv_814.ldv_809.correct = 0UL;
#line 745
      ______f___28.ldv_814.ldv_809.incorrect = 0UL;
#line 745
      ______f___29.func = "arkfb_set_par";
#line 745
      ______f___29.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 745
      ______f___29.line = 745U;
#line 745
      ______f___29.ldv_814.ldv_809.correct = 0UL;
#line 745
      ______f___29.ldv_814.ldv_809.incorrect = 0UL;
#line 745
      tmp___20 = __builtin_expect((unsigned int )descriptor___4.flags != 0U, 1L);
#line 745
      ______r___29 = (int )tmp___20;
#line 745
      ftrace_likely_update(& ______f___29, ______r___29, 0);
#line 745
      ______r___28 = ______r___29 != 0;
#line 745
      if (______r___28 != 0) {
#line 745
        ______f___28.ldv_814.ldv_813.hit = ______f___28.ldv_814.ldv_813.hit + 1UL;
      } else {
#line 745
        ______f___28.ldv_814.ldv_813.miss = ______f___28.ldv_814.ldv_813.miss + 1UL;
      }
#line 745
      if (______r___28 != 0) {
#line 745
        __ret___4 = 1;
      } else {

      }
    } else {

    }
#line 745
    ______r___27 = __ret___4 != 0;
#line 745
    if (______r___27 != 0) {
#line 745
      ______f___27.ldv_814.ldv_813.hit = ______f___27.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 745
      ______f___27.ldv_814.ldv_813.miss = ______f___27.ldv_814.ldv_813.miss + 1UL;
    }
#line 745
    if (______r___27 != 0) {
#line 745
      printk("<7>arkfb:fb%d: not using multiplex\n", info->node);
    } else {

    }
#line 746
    svga_wcrt_mask(70, 0, 4);
#line 747
    dac_set_mode(par->dac, 0);
  } else {
#line 749
    descriptor___5.modname = "arkfb";
#line 749
    descriptor___5.function = "arkfb_set_par";
#line 749
    descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
    descriptor___5.format = "fb%d: using multiplex\n";
#line 749
    descriptor___5.primary_hash = 16;
#line 749
    descriptor___5.secondary_hash = 32;
#line 749
    descriptor___5.lineno = 749U;
#line 749
    descriptor___5.flags = 0U;
#line 749
    ______f___32.func = "arkfb_set_par";
#line 749
    ______f___32.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
    ______f___32.line = 749U;
#line 749
    ______f___32.ldv_814.ldv_809.correct = 0UL;
#line 749
    ______f___32.ldv_814.ldv_809.incorrect = 0UL;
#line 749
    __ret___5 = 0;
#line 749
    ______f___35.func = "arkfb_set_par";
#line 749
    ______f___35.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
    ______f___35.line = 749U;
#line 749
    ______f___35.ldv_814.ldv_809.correct = 0UL;
#line 749
    ______f___35.ldv_814.ldv_809.incorrect = 0UL;
#line 749
    ______f___36.func = "arkfb_set_par";
#line 749
    ______f___36.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
    ______f___36.line = 749U;
#line 749
    ______f___36.ldv_814.ldv_809.correct = 0UL;
#line 749
    ______f___36.ldv_814.ldv_809.incorrect = 0UL;
#line 749
    tmp___25 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 749
    if (tmp___25 != 0L) {
#line 749
      tmp___26 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL,
                                  1L);
#line 749
      if (tmp___26 != 0L) {
#line 749
        tmp___27 = 1;
      } else {
#line 749
        tmp___27 = 0;
      }
    } else {
#line 749
      tmp___27 = 0;
    }
#line 749
    ______r___36 = tmp___27;
#line 749
    ftrace_likely_update(& ______f___36, ______r___36, 0);
#line 749
    ______r___35 = ______r___36 != 0;
#line 749
    if (______r___35 != 0) {
#line 749
      ______f___35.ldv_814.ldv_813.hit = ______f___35.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 749
      ______f___35.ldv_814.ldv_813.miss = ______f___35.ldv_814.ldv_813.miss + 1UL;
    }
#line 749
    if (______r___35 != 0) {
#line 749
      ______f___33.func = "arkfb_set_par";
#line 749
      ______f___33.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
      ______f___33.line = 749U;
#line 749
      ______f___33.ldv_814.ldv_809.correct = 0UL;
#line 749
      ______f___33.ldv_814.ldv_809.incorrect = 0UL;
#line 749
      ______f___34.func = "arkfb_set_par";
#line 749
      ______f___34.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 749
      ______f___34.line = 749U;
#line 749
      ______f___34.ldv_814.ldv_809.correct = 0UL;
#line 749
      ______f___34.ldv_814.ldv_809.incorrect = 0UL;
#line 749
      tmp___24 = __builtin_expect((unsigned int )descriptor___5.flags != 0U, 1L);
#line 749
      ______r___34 = (int )tmp___24;
#line 749
      ftrace_likely_update(& ______f___34, ______r___34, 0);
#line 749
      ______r___33 = ______r___34 != 0;
#line 749
      if (______r___33 != 0) {
#line 749
        ______f___33.ldv_814.ldv_813.hit = ______f___33.ldv_814.ldv_813.hit + 1UL;
      } else {
#line 749
        ______f___33.ldv_814.ldv_813.miss = ______f___33.ldv_814.ldv_813.miss + 1UL;
      }
#line 749
      if (______r___33 != 0) {
#line 749
        __ret___5 = 1;
      } else {

      }
    } else {

    }
#line 749
    ______r___32 = __ret___5 != 0;
#line 749
    if (______r___32 != 0) {
#line 749
      ______f___32.ldv_814.ldv_813.hit = ______f___32.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 749
      ______f___32.ldv_814.ldv_813.miss = ______f___32.ldv_814.ldv_813.miss + 1UL;
    }
#line 749
    if (______r___32 != 0) {
#line 749
      printk("<7>arkfb:fb%d: using multiplex\n", info->node);
    } else {

    }
#line 750
    svga_wcrt_mask(70, 4, 4);
#line 751
    dac_set_mode(par->dac, 5);
#line 752
    hdiv = 2U;
  }
#line 754
  goto ldv_28004;
  case (u32 )4: 
#line 756
  descriptor___6.modname = "arkfb";
#line 756
  descriptor___6.function = "arkfb_set_par";
#line 756
  descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
  descriptor___6.format = "fb%d: 5/5/5 truecolor\n";
#line 756
  descriptor___6.primary_hash = 16;
#line 756
  descriptor___6.secondary_hash = 32;
#line 756
  descriptor___6.lineno = 756U;
#line 756
  descriptor___6.flags = 0U;
#line 756
  ______f___38.func = "arkfb_set_par";
#line 756
  ______f___38.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
  ______f___38.line = 756U;
#line 756
  ______f___38.ldv_814.ldv_809.correct = 0UL;
#line 756
  ______f___38.ldv_814.ldv_809.incorrect = 0UL;
#line 756
  __ret___6 = 0;
#line 756
  ______f___41.func = "arkfb_set_par";
#line 756
  ______f___41.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
  ______f___41.line = 756U;
#line 756
  ______f___41.ldv_814.ldv_809.correct = 0UL;
#line 756
  ______f___41.ldv_814.ldv_809.incorrect = 0UL;
#line 756
  ______f___42.func = "arkfb_set_par";
#line 756
  ______f___42.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
  ______f___42.line = 756U;
#line 756
  ______f___42.ldv_814.ldv_809.correct = 0UL;
#line 756
  ______f___42.ldv_814.ldv_809.incorrect = 0UL;
#line 756
  tmp___29 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 756
  if (tmp___29 != 0L) {
#line 756
    tmp___30 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 756
    if (tmp___30 != 0L) {
#line 756
      tmp___31 = 1;
    } else {
#line 756
      tmp___31 = 0;
    }
  } else {
#line 756
    tmp___31 = 0;
  }
#line 756
  ______r___42 = tmp___31;
#line 756
  ftrace_likely_update(& ______f___42, ______r___42, 0);
#line 756
  ______r___41 = ______r___42 != 0;
#line 756
  if (______r___41 != 0) {
#line 756
    ______f___41.ldv_814.ldv_813.hit = ______f___41.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 756
    ______f___41.ldv_814.ldv_813.miss = ______f___41.ldv_814.ldv_813.miss + 1UL;
  }
#line 756
  if (______r___41 != 0) {
#line 756
    ______f___39.func = "arkfb_set_par";
#line 756
    ______f___39.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
    ______f___39.line = 756U;
#line 756
    ______f___39.ldv_814.ldv_809.correct = 0UL;
#line 756
    ______f___39.ldv_814.ldv_809.incorrect = 0UL;
#line 756
    ______f___40.func = "arkfb_set_par";
#line 756
    ______f___40.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 756
    ______f___40.line = 756U;
#line 756
    ______f___40.ldv_814.ldv_809.correct = 0UL;
#line 756
    ______f___40.ldv_814.ldv_809.incorrect = 0UL;
#line 756
    tmp___28 = __builtin_expect((unsigned int )descriptor___6.flags != 0U, 1L);
#line 756
    ______r___40 = (int )tmp___28;
#line 756
    ftrace_likely_update(& ______f___40, ______r___40, 0);
#line 756
    ______r___39 = ______r___40 != 0;
#line 756
    if (______r___39 != 0) {
#line 756
      ______f___39.ldv_814.ldv_813.hit = ______f___39.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 756
      ______f___39.ldv_814.ldv_813.miss = ______f___39.ldv_814.ldv_813.miss + 1UL;
    }
#line 756
    if (______r___39 != 0) {
#line 756
      __ret___6 = 1;
    } else {

    }
  } else {

  }
#line 756
  ______r___38 = __ret___6 != 0;
#line 756
  if (______r___38 != 0) {
#line 756
    ______f___38.ldv_814.ldv_813.hit = ______f___38.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 756
    ______f___38.ldv_814.ldv_813.miss = ______f___38.ldv_814.ldv_813.miss + 1UL;
  }
#line 756
  if (______r___38 != 0) {
#line 756
    printk("<7>arkfb:fb%d: 5/5/5 truecolor\n", info->node);
  } else {

  }
#line 758
  vga_wseq(0, 17, 26);
#line 759
  svga_wcrt_mask(70, 4, 4);
#line 760
  dac_set_mode(par->dac, 6);
#line 761
  goto ldv_28004;
  case (u32 )5: 
#line 763
  descriptor___7.modname = "arkfb";
#line 763
  descriptor___7.function = "arkfb_set_par";
#line 763
  descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
  descriptor___7.format = "fb%d: 5/6/5 truecolor\n";
#line 763
  descriptor___7.primary_hash = 16;
#line 763
  descriptor___7.secondary_hash = 32;
#line 763
  descriptor___7.lineno = 763U;
#line 763
  descriptor___7.flags = 0U;
#line 763
  ______f___43.func = "arkfb_set_par";
#line 763
  ______f___43.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
  ______f___43.line = 763U;
#line 763
  ______f___43.ldv_814.ldv_809.correct = 0UL;
#line 763
  ______f___43.ldv_814.ldv_809.incorrect = 0UL;
#line 763
  __ret___7 = 0;
#line 763
  ______f___46.func = "arkfb_set_par";
#line 763
  ______f___46.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
  ______f___46.line = 763U;
#line 763
  ______f___46.ldv_814.ldv_809.correct = 0UL;
#line 763
  ______f___46.ldv_814.ldv_809.incorrect = 0UL;
#line 763
  ______f___47.func = "arkfb_set_par";
#line 763
  ______f___47.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
  ______f___47.line = 763U;
#line 763
  ______f___47.ldv_814.ldv_809.correct = 0UL;
#line 763
  ______f___47.ldv_814.ldv_809.incorrect = 0UL;
#line 763
  tmp___33 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 763
  if (tmp___33 != 0L) {
#line 763
    tmp___34 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 763
    if (tmp___34 != 0L) {
#line 763
      tmp___35 = 1;
    } else {
#line 763
      tmp___35 = 0;
    }
  } else {
#line 763
    tmp___35 = 0;
  }
#line 763
  ______r___47 = tmp___35;
#line 763
  ftrace_likely_update(& ______f___47, ______r___47, 0);
#line 763
  ______r___46 = ______r___47 != 0;
#line 763
  if (______r___46 != 0) {
#line 763
    ______f___46.ldv_814.ldv_813.hit = ______f___46.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 763
    ______f___46.ldv_814.ldv_813.miss = ______f___46.ldv_814.ldv_813.miss + 1UL;
  }
#line 763
  if (______r___46 != 0) {
#line 763
    ______f___44.func = "arkfb_set_par";
#line 763
    ______f___44.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
    ______f___44.line = 763U;
#line 763
    ______f___44.ldv_814.ldv_809.correct = 0UL;
#line 763
    ______f___44.ldv_814.ldv_809.incorrect = 0UL;
#line 763
    ______f___45.func = "arkfb_set_par";
#line 763
    ______f___45.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 763
    ______f___45.line = 763U;
#line 763
    ______f___45.ldv_814.ldv_809.correct = 0UL;
#line 763
    ______f___45.ldv_814.ldv_809.incorrect = 0UL;
#line 763
    tmp___32 = __builtin_expect((unsigned int )descriptor___7.flags != 0U, 1L);
#line 763
    ______r___45 = (int )tmp___32;
#line 763
    ftrace_likely_update(& ______f___45, ______r___45, 0);
#line 763
    ______r___44 = ______r___45 != 0;
#line 763
    if (______r___44 != 0) {
#line 763
      ______f___44.ldv_814.ldv_813.hit = ______f___44.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 763
      ______f___44.ldv_814.ldv_813.miss = ______f___44.ldv_814.ldv_813.miss + 1UL;
    }
#line 763
    if (______r___44 != 0) {
#line 763
      __ret___7 = 1;
    } else {

    }
  } else {

  }
#line 763
  ______r___43 = __ret___7 != 0;
#line 763
  if (______r___43 != 0) {
#line 763
    ______f___43.ldv_814.ldv_813.hit = ______f___43.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 763
    ______f___43.ldv_814.ldv_813.miss = ______f___43.ldv_814.ldv_813.miss + 1UL;
  }
#line 763
  if (______r___43 != 0) {
#line 763
    printk("<7>arkfb:fb%d: 5/6/5 truecolor\n", info->node);
  } else {

  }
#line 765
  vga_wseq(0, 17, 26);
#line 766
  svga_wcrt_mask(70, 4, 4);
#line 767
  dac_set_mode(par->dac, 7);
#line 768
  goto ldv_28004;
  case (u32 )6: 
#line 770
  descriptor___8.modname = "arkfb";
#line 770
  descriptor___8.function = "arkfb_set_par";
#line 770
  descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
  descriptor___8.format = "fb%d: 8/8/8 truecolor\n";
#line 770
  descriptor___8.primary_hash = 16;
#line 770
  descriptor___8.secondary_hash = 32;
#line 770
  descriptor___8.lineno = 770U;
#line 770
  descriptor___8.flags = 0U;
#line 770
  ______f___48.func = "arkfb_set_par";
#line 770
  ______f___48.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
  ______f___48.line = 770U;
#line 770
  ______f___48.ldv_814.ldv_809.correct = 0UL;
#line 770
  ______f___48.ldv_814.ldv_809.incorrect = 0UL;
#line 770
  __ret___8 = 0;
#line 770
  ______f___51.func = "arkfb_set_par";
#line 770
  ______f___51.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
  ______f___51.line = 770U;
#line 770
  ______f___51.ldv_814.ldv_809.correct = 0UL;
#line 770
  ______f___51.ldv_814.ldv_809.incorrect = 0UL;
#line 770
  ______f___52.func = "arkfb_set_par";
#line 770
  ______f___52.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
  ______f___52.line = 770U;
#line 770
  ______f___52.ldv_814.ldv_809.correct = 0UL;
#line 770
  ______f___52.ldv_814.ldv_809.incorrect = 0UL;
#line 770
  tmp___37 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 770
  if (tmp___37 != 0L) {
#line 770
    tmp___38 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 770
    if (tmp___38 != 0L) {
#line 770
      tmp___39 = 1;
    } else {
#line 770
      tmp___39 = 0;
    }
  } else {
#line 770
    tmp___39 = 0;
  }
#line 770
  ______r___52 = tmp___39;
#line 770
  ftrace_likely_update(& ______f___52, ______r___52, 0);
#line 770
  ______r___51 = ______r___52 != 0;
#line 770
  if (______r___51 != 0) {
#line 770
    ______f___51.ldv_814.ldv_813.hit = ______f___51.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 770
    ______f___51.ldv_814.ldv_813.miss = ______f___51.ldv_814.ldv_813.miss + 1UL;
  }
#line 770
  if (______r___51 != 0) {
#line 770
    ______f___49.func = "arkfb_set_par";
#line 770
    ______f___49.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
    ______f___49.line = 770U;
#line 770
    ______f___49.ldv_814.ldv_809.correct = 0UL;
#line 770
    ______f___49.ldv_814.ldv_809.incorrect = 0UL;
#line 770
    ______f___50.func = "arkfb_set_par";
#line 770
    ______f___50.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 770
    ______f___50.line = 770U;
#line 770
    ______f___50.ldv_814.ldv_809.correct = 0UL;
#line 770
    ______f___50.ldv_814.ldv_809.incorrect = 0UL;
#line 770
    tmp___36 = __builtin_expect((unsigned int )descriptor___8.flags != 0U, 1L);
#line 770
    ______r___50 = (int )tmp___36;
#line 770
    ftrace_likely_update(& ______f___50, ______r___50, 0);
#line 770
    ______r___49 = ______r___50 != 0;
#line 770
    if (______r___49 != 0) {
#line 770
      ______f___49.ldv_814.ldv_813.hit = ______f___49.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 770
      ______f___49.ldv_814.ldv_813.miss = ______f___49.ldv_814.ldv_813.miss + 1UL;
    }
#line 770
    if (______r___49 != 0) {
#line 770
      __ret___8 = 1;
    } else {

    }
  } else {

  }
#line 770
  ______r___48 = __ret___8 != 0;
#line 770
  if (______r___48 != 0) {
#line 770
    ______f___48.ldv_814.ldv_813.hit = ______f___48.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 770
    ______f___48.ldv_814.ldv_813.miss = ______f___48.ldv_814.ldv_813.miss + 1UL;
  }
#line 770
  if (______r___48 != 0) {
#line 770
    printk("<7>arkfb:fb%d: 8/8/8 truecolor\n", info->node);
  } else {

  }
#line 772
  vga_wseq(0, 17, 22);
#line 773
  svga_wcrt_mask(70, 4, 4);
#line 774
  dac_set_mode(par->dac, 8);
#line 775
  hmul = 3U;
#line 776
  hdiv = 2U;
#line 777
  goto ldv_28004;
  case (u32 )7: 
#line 779
  descriptor___9.modname = "arkfb";
#line 779
  descriptor___9.function = "arkfb_set_par";
#line 779
  descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
  descriptor___9.format = "fb%d: 8/8/8/8 truecolor\n";
#line 779
  descriptor___9.primary_hash = 16;
#line 779
  descriptor___9.secondary_hash = 32;
#line 779
  descriptor___9.lineno = 779U;
#line 779
  descriptor___9.flags = 0U;
#line 779
  ______f___53.func = "arkfb_set_par";
#line 779
  ______f___53.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
  ______f___53.line = 779U;
#line 779
  ______f___53.ldv_814.ldv_809.correct = 0UL;
#line 779
  ______f___53.ldv_814.ldv_809.incorrect = 0UL;
#line 779
  __ret___9 = 0;
#line 779
  ______f___56.func = "arkfb_set_par";
#line 779
  ______f___56.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
  ______f___56.line = 779U;
#line 779
  ______f___56.ldv_814.ldv_809.correct = 0UL;
#line 779
  ______f___56.ldv_814.ldv_809.incorrect = 0UL;
#line 779
  ______f___57.func = "arkfb_set_par";
#line 779
  ______f___57.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
  ______f___57.line = 779U;
#line 779
  ______f___57.ldv_814.ldv_809.correct = 0UL;
#line 779
  ______f___57.ldv_814.ldv_809.incorrect = 0UL;
#line 779
  tmp___41 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 779
  if (tmp___41 != 0L) {
#line 779
    tmp___42 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 779
    if (tmp___42 != 0L) {
#line 779
      tmp___43 = 1;
    } else {
#line 779
      tmp___43 = 0;
    }
  } else {
#line 779
    tmp___43 = 0;
  }
#line 779
  ______r___57 = tmp___43;
#line 779
  ftrace_likely_update(& ______f___57, ______r___57, 0);
#line 779
  ______r___56 = ______r___57 != 0;
#line 779
  if (______r___56 != 0) {
#line 779
    ______f___56.ldv_814.ldv_813.hit = ______f___56.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 779
    ______f___56.ldv_814.ldv_813.miss = ______f___56.ldv_814.ldv_813.miss + 1UL;
  }
#line 779
  if (______r___56 != 0) {
#line 779
    ______f___54.func = "arkfb_set_par";
#line 779
    ______f___54.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
    ______f___54.line = 779U;
#line 779
    ______f___54.ldv_814.ldv_809.correct = 0UL;
#line 779
    ______f___54.ldv_814.ldv_809.incorrect = 0UL;
#line 779
    ______f___55.func = "arkfb_set_par";
#line 779
    ______f___55.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 779
    ______f___55.line = 779U;
#line 779
    ______f___55.ldv_814.ldv_809.correct = 0UL;
#line 779
    ______f___55.ldv_814.ldv_809.incorrect = 0UL;
#line 779
    tmp___40 = __builtin_expect((unsigned int )descriptor___9.flags != 0U, 1L);
#line 779
    ______r___55 = (int )tmp___40;
#line 779
    ftrace_likely_update(& ______f___55, ______r___55, 0);
#line 779
    ______r___54 = ______r___55 != 0;
#line 779
    if (______r___54 != 0) {
#line 779
      ______f___54.ldv_814.ldv_813.hit = ______f___54.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 779
      ______f___54.ldv_814.ldv_813.miss = ______f___54.ldv_814.ldv_813.miss + 1UL;
    }
#line 779
    if (______r___54 != 0) {
#line 779
      __ret___9 = 1;
    } else {

    }
  } else {

  }
#line 779
  ______r___53 = __ret___9 != 0;
#line 779
  if (______r___53 != 0) {
#line 779
    ______f___53.ldv_814.ldv_813.hit = ______f___53.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 779
    ______f___53.ldv_814.ldv_813.miss = ______f___53.ldv_814.ldv_813.miss + 1UL;
  }
#line 779
  if (______r___53 != 0) {
#line 779
    printk("<7>arkfb:fb%d: 8/8/8/8 truecolor\n", info->node);
  } else {

  }
#line 781
  vga_wseq(0, 17, 30);
#line 782
  svga_wcrt_mask(70, 4, 4);
#line 783
  dac_set_mode(par->dac, 9);
#line 784
  hmul = 2U;
#line 785
  goto ldv_28004;
  default: 
#line 787
  printk("<3>fb%d: unsupported mode - bug\n", info->node);
#line 788
  return (-22);
  }
  ldv_28004: 
#line 791
  ark_set_pixclock(info, (info->var.pixclock * hdiv) / hmul);
#line 792
  svga_set_timings(& ark_timing_regs, & info->var, hmul, hdiv, (info->var.vmode & 2U) != 0U ? 2U : 1U,
                   (int )info->var.vmode & 1 ? 2U : 1U, hmul, info->node);
#line 798
  value = ((info->var.xres + info->var.left_margin) + info->var.right_margin) + info->var.hsync_len;
#line 799
  value = ((value * hmul) / hdiv) / 8U - 5U;
#line 800
  vga_wcrt(0, 66, (int )((unsigned char )((value + 1U) / 2U)));
#line 802
  memset_io((void volatile   *)info->screen_base, 0, (size_t )screen_size);
#line 804
  svga_wcrt_mask(23, 128, 128);
#line 805
  svga_wseq_mask(1, 0, 32);
#line 807
  return (0);
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_setcolreg(u_int regno , u_int red , u_int green , u_int blue , u_int transp ,
                           struct fb_info *fb ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 815
  switch (fb->var.bits_per_pixel) {
  case (__u32 )0: ;
  case (__u32 )4: 
#line 818
  ______f.func = "arkfb_setcolreg";
#line 818
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 818
  ______f.line = 818U;
#line 818
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 818
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 818
  ______r = regno > 15U;
#line 818
  if (______r != 0) {
#line 818
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 818
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 818
  if (______r != 0) {
#line 819
    return (-22);
  } else {

  }
#line 821
  ______f___0.func = "arkfb_setcolreg";
#line 821
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 821
  ______f___0.line = 822U;
#line 821
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 821
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 821
  ______r___0 = fb->var.bits_per_pixel == 4U && fb->var.nonstd == 0U;
#line 821
  if (______r___0 != 0) {
#line 821
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 821
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 821
  if (______r___0 != 0) {
#line 823
    outb(240, 966);
#line 824
    outb((int )((unsigned int )((unsigned char )regno) * 16U), 968);
  } else {
#line 826
    outb(15, 966);
#line 827
    outb((int )((unsigned char )regno), 968);
  }
#line 829
  outb((int )((unsigned char )(red >> 10)), 969);
#line 830
  outb((int )((unsigned char )(green >> 10)), 969);
#line 831
  outb((int )((unsigned char )(blue >> 10)), 969);
#line 832
  goto ldv_28771;
  case (__u32 )8: 
#line 834
  ______f___1.func = "arkfb_setcolreg";
#line 834
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 834
  ______f___1.line = 834U;
#line 834
  ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 834
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 834
  ______r___1 = regno > 255U;
#line 834
  if (______r___1 != 0) {
#line 834
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 834
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
#line 834
  if (______r___1 != 0) {
#line 835
    return (-22);
  } else {

  }
#line 837
  outb(255, 966);
#line 838
  outb((int )((unsigned char )regno), 968);
#line 839
  outb((int )((unsigned char )(red >> 10)), 969);
#line 840
  outb((int )((unsigned char )(green >> 10)), 969);
#line 841
  outb((int )((unsigned char )(blue >> 10)), 969);
#line 842
  goto ldv_28771;
  case (__u32 )16: 
#line 844
  ______f___2.func = "arkfb_setcolreg";
#line 844
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 844
  ______f___2.line = 844U;
#line 844
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 844
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 844
  ______r___2 = regno > 15U;
#line 844
  if (______r___2 != 0) {
#line 844
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 844
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 844
  if (______r___2 != 0) {
#line 845
    return (0);
  } else {

  }
#line 847
  ______f___4.func = "arkfb_setcolreg";
#line 847
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 847
  ______f___4.line = 847U;
#line 847
  ______f___4.ldv_814.ldv_809.correct = 0UL;
#line 847
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
#line 847
  ______r___4 = fb->var.green.length == 5U;
#line 847
  if (______r___4 != 0) {
#line 847
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 847
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
#line 847
  if (______r___4 != 0) {
#line 848
    *((u32 *)fb->pseudo_palette + (unsigned long )regno) = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
  } else {
#line 850
    ______f___3.func = "arkfb_setcolreg";
#line 850
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 850
    ______f___3.line = 850U;
#line 850
    ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 850
    ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 850
    ______r___3 = fb->var.green.length == 6U;
#line 850
    if (______r___3 != 0) {
#line 850
      ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 850
      ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
    }
#line 850
    if (______r___3 != 0) {
#line 851
      *((u32 *)fb->pseudo_palette + (unsigned long )regno) = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
    } else {
#line 854
      return (-22);
    }
  }
#line 855
  goto ldv_28771;
  case (__u32 )24: ;
  case (__u32 )32: 
#line 858
  ______f___5.func = "arkfb_setcolreg";
#line 858
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 858
  ______f___5.line = 858U;
#line 858
  ______f___5.ldv_814.ldv_809.correct = 0UL;
#line 858
  ______f___5.ldv_814.ldv_809.incorrect = 0UL;
#line 858
  ______r___5 = regno > 15U;
#line 858
  if (______r___5 != 0) {
#line 858
    ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 858
    ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
  }
#line 858
  if (______r___5 != 0) {
#line 859
    return (0);
  } else {

  }
#line 861
  *((u32 *)fb->pseudo_palette + (unsigned long )regno) = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
#line 863
  goto ldv_28771;
  default: ;
#line 865
  return (-22);
  }
  ldv_28771: ;
#line 868
  return (0);
}
}
#line 873 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_blank(int blank_mode , struct fb_info *info ) 
{ 
  struct _ddebug descriptor ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int __ret___0 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  long tmp___3 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  struct _ddebug descriptor___1 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int __ret___1 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  long tmp___7 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  long tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;

  {
#line 875
  switch (blank_mode) {
  case 0: 
#line 877
  descriptor.modname = "arkfb";
#line 877
  descriptor.function = "arkfb_blank";
#line 877
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
  descriptor.format = "fb%d: unblank\n";
#line 877
  descriptor.primary_hash = 16;
#line 877
  descriptor.secondary_hash = 32;
#line 877
  descriptor.lineno = 877U;
#line 877
  descriptor.flags = 0U;
#line 877
  ______f.func = "arkfb_blank";
#line 877
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
  ______f.line = 877U;
#line 877
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 877
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 877
  __ret = 0;
#line 877
  ______f___2.func = "arkfb_blank";
#line 877
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
  ______f___2.line = 877U;
#line 877
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 877
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 877
  ______f___3.func = "arkfb_blank";
#line 877
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
  ______f___3.line = 877U;
#line 877
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 877
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 877
  tmp___0 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 877
  if (tmp___0 != 0L) {
#line 877
    tmp___1 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 877
    if (tmp___1 != 0L) {
#line 877
      tmp___2 = 1;
    } else {
#line 877
      tmp___2 = 0;
    }
  } else {
#line 877
    tmp___2 = 0;
  }
#line 877
  ______r___3 = tmp___2;
#line 877
  ftrace_likely_update(& ______f___3, ______r___3, 0);
#line 877
  ______r___2 = ______r___3 != 0;
#line 877
  if (______r___2 != 0) {
#line 877
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 877
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 877
  if (______r___2 != 0) {
#line 877
    ______f___0.func = "arkfb_blank";
#line 877
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
    ______f___0.line = 877U;
#line 877
    ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 877
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 877
    ______f___1.func = "arkfb_blank";
#line 877
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 877
    ______f___1.line = 877U;
#line 877
    ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 877
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 877
    tmp = __builtin_expect((unsigned int )descriptor.flags != 0U, 1L);
#line 877
    ______r___1 = (int )tmp;
#line 877
    ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 877
    ______r___0 = ______r___1 != 0;
#line 877
    if (______r___0 != 0) {
#line 877
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 877
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
#line 877
    if (______r___0 != 0) {
#line 877
      __ret = 1;
    } else {

    }
  } else {

  }
#line 877
  ______r = __ret != 0;
#line 877
  if (______r != 0) {
#line 877
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 877
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 877
  if (______r != 0) {
#line 877
    printk("<7>arkfb:fb%d: unblank\n", info->node);
  } else {

  }
#line 878
  svga_wseq_mask(1, 0, 32);
#line 879
  svga_wcrt_mask(23, 128, 128);
#line 880
  goto ldv_28880;
  case 1: 
#line 882
  descriptor___0.modname = "arkfb";
#line 882
  descriptor___0.function = "arkfb_blank";
#line 882
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
  descriptor___0.format = "fb%d: blank\n";
#line 882
  descriptor___0.primary_hash = 16;
#line 882
  descriptor___0.secondary_hash = 32;
#line 882
  descriptor___0.lineno = 882U;
#line 882
  descriptor___0.flags = 0U;
#line 882
  ______f___4.func = "arkfb_blank";
#line 882
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
  ______f___4.line = 882U;
#line 882
  ______f___4.ldv_814.ldv_809.correct = 0UL;
#line 882
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
#line 882
  __ret___0 = 0;
#line 882
  ______f___7.func = "arkfb_blank";
#line 882
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
  ______f___7.line = 882U;
#line 882
  ______f___7.ldv_814.ldv_809.correct = 0UL;
#line 882
  ______f___7.ldv_814.ldv_809.incorrect = 0UL;
#line 882
  ______f___8.func = "arkfb_blank";
#line 882
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
  ______f___8.line = 882U;
#line 882
  ______f___8.ldv_814.ldv_809.correct = 0UL;
#line 882
  ______f___8.ldv_814.ldv_809.incorrect = 0UL;
#line 882
  tmp___4 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 882
  if (tmp___4 != 0L) {
#line 882
    tmp___5 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 882
    if (tmp___5 != 0L) {
#line 882
      tmp___6 = 1;
    } else {
#line 882
      tmp___6 = 0;
    }
  } else {
#line 882
    tmp___6 = 0;
  }
#line 882
  ______r___8 = tmp___6;
#line 882
  ftrace_likely_update(& ______f___8, ______r___8, 0);
#line 882
  ______r___7 = ______r___8 != 0;
#line 882
  if (______r___7 != 0) {
#line 882
    ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 882
    ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
  }
#line 882
  if (______r___7 != 0) {
#line 882
    ______f___5.func = "arkfb_blank";
#line 882
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
    ______f___5.line = 882U;
#line 882
    ______f___5.ldv_814.ldv_809.correct = 0UL;
#line 882
    ______f___5.ldv_814.ldv_809.incorrect = 0UL;
#line 882
    ______f___6.func = "arkfb_blank";
#line 882
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 882
    ______f___6.line = 882U;
#line 882
    ______f___6.ldv_814.ldv_809.correct = 0UL;
#line 882
    ______f___6.ldv_814.ldv_809.incorrect = 0UL;
#line 882
    tmp___3 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 1L);
#line 882
    ______r___6 = (int )tmp___3;
#line 882
    ftrace_likely_update(& ______f___6, ______r___6, 0);
#line 882
    ______r___5 = ______r___6 != 0;
#line 882
    if (______r___5 != 0) {
#line 882
      ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 882
      ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
    }
#line 882
    if (______r___5 != 0) {
#line 882
      __ret___0 = 1;
    } else {

    }
  } else {

  }
#line 882
  ______r___4 = __ret___0 != 0;
#line 882
  if (______r___4 != 0) {
#line 882
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 882
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
#line 882
  if (______r___4 != 0) {
#line 882
    printk("<7>arkfb:fb%d: blank\n", info->node);
  } else {

  }
#line 883
  svga_wseq_mask(1, 32, 32);
#line 884
  svga_wcrt_mask(23, 128, 128);
#line 885
  goto ldv_28880;
  case 4: ;
  case 3: ;
  case 2: 
#line 889
  descriptor___1.modname = "arkfb";
#line 889
  descriptor___1.function = "arkfb_blank";
#line 889
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
  descriptor___1.format = "fb%d: sync down\n";
#line 889
  descriptor___1.primary_hash = 16;
#line 889
  descriptor___1.secondary_hash = 32;
#line 889
  descriptor___1.lineno = 889U;
#line 889
  descriptor___1.flags = 0U;
#line 889
  ______f___9.func = "arkfb_blank";
#line 889
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
  ______f___9.line = 889U;
#line 889
  ______f___9.ldv_814.ldv_809.correct = 0UL;
#line 889
  ______f___9.ldv_814.ldv_809.incorrect = 0UL;
#line 889
  __ret___1 = 0;
#line 889
  ______f___12.func = "arkfb_blank";
#line 889
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
  ______f___12.line = 889U;
#line 889
  ______f___12.ldv_814.ldv_809.correct = 0UL;
#line 889
  ______f___12.ldv_814.ldv_809.incorrect = 0UL;
#line 889
  ______f___13.func = "arkfb_blank";
#line 889
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
  ______f___13.line = 889U;
#line 889
  ______f___13.ldv_814.ldv_809.correct = 0UL;
#line 889
  ______f___13.ldv_814.ldv_809.incorrect = 0UL;
#line 889
  tmp___8 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 889
  if (tmp___8 != 0L) {
#line 889
    tmp___9 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 889
    if (tmp___9 != 0L) {
#line 889
      tmp___10 = 1;
    } else {
#line 889
      tmp___10 = 0;
    }
  } else {
#line 889
    tmp___10 = 0;
  }
#line 889
  ______r___13 = tmp___10;
#line 889
  ftrace_likely_update(& ______f___13, ______r___13, 0);
#line 889
  ______r___12 = ______r___13 != 0;
#line 889
  if (______r___12 != 0) {
#line 889
    ______f___12.ldv_814.ldv_813.hit = ______f___12.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 889
    ______f___12.ldv_814.ldv_813.miss = ______f___12.ldv_814.ldv_813.miss + 1UL;
  }
#line 889
  if (______r___12 != 0) {
#line 889
    ______f___10.func = "arkfb_blank";
#line 889
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
    ______f___10.line = 889U;
#line 889
    ______f___10.ldv_814.ldv_809.correct = 0UL;
#line 889
    ______f___10.ldv_814.ldv_809.incorrect = 0UL;
#line 889
    ______f___11.func = "arkfb_blank";
#line 889
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 889
    ______f___11.line = 889U;
#line 889
    ______f___11.ldv_814.ldv_809.correct = 0UL;
#line 889
    ______f___11.ldv_814.ldv_809.incorrect = 0UL;
#line 889
    tmp___7 = __builtin_expect((unsigned int )descriptor___1.flags != 0U, 1L);
#line 889
    ______r___11 = (int )tmp___7;
#line 889
    ftrace_likely_update(& ______f___11, ______r___11, 0);
#line 889
    ______r___10 = ______r___11 != 0;
#line 889
    if (______r___10 != 0) {
#line 889
      ______f___10.ldv_814.ldv_813.hit = ______f___10.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 889
      ______f___10.ldv_814.ldv_813.miss = ______f___10.ldv_814.ldv_813.miss + 1UL;
    }
#line 889
    if (______r___10 != 0) {
#line 889
      __ret___1 = 1;
    } else {

    }
  } else {

  }
#line 889
  ______r___9 = __ret___1 != 0;
#line 889
  if (______r___9 != 0) {
#line 889
    ______f___9.ldv_814.ldv_813.hit = ______f___9.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 889
    ______f___9.ldv_814.ldv_813.miss = ______f___9.ldv_814.ldv_813.miss + 1UL;
  }
#line 889
  if (______r___9 != 0) {
#line 889
    printk("<7>arkfb:fb%d: sync down\n", info->node);
  } else {

  }
#line 890
  svga_wseq_mask(1, 32, 32);
#line 891
  svga_wcrt_mask(23, 0, 128);
#line 892
  goto ldv_28880;
  }
  ldv_28880: ;
#line 894
  return (0);
}
}
#line 900 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  unsigned int offset ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 905
  ______f.func = "arkfb_pan_display";
#line 905
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 905
  ______f.line = 905U;
#line 905
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 905
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 905
  ______r = var->bits_per_pixel == 0U;
#line 905
  if (______r != 0) {
#line 905
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 905
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 905
  if (______r != 0) {
#line 906
    offset = (var->yoffset / 16U) * (var->xres_virtual / 2U) + var->xoffset / 2U;
#line 907
    offset = offset >> 2;
  } else {
#line 909
    offset = var->yoffset * info->fix.line_length + (var->xoffset * var->bits_per_pixel) / 8U;
#line 911
    offset = offset >> (var->bits_per_pixel == 4U ? 2 : 3);
  }
#line 915
  svga_wcrt_multi((struct vga_regset  const  *)(& ark_start_address_regs), offset);
#line 917
  return (0);
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct fb_ops arkfb_ops  = 
#line 926
     {& __this_module, & arkfb_open, & arkfb_release, 0, 0, & arkfb_check_var, & arkfb_set_par,
    & arkfb_setcolreg, 0, & arkfb_blank, & arkfb_pan_display, & arkfb_fillrect, & cfb_copyarea,
    & arkfb_imageblit, 0, 0, 0, 0, 0, 0, 0, 0, & svga_get_caps};
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) 
{ 
  struct fb_info *info ;
  struct arkfb_info *par ;
  int rc ;
  u8 regval ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  struct lock_class_key __key ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  char const   *tmp___19 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 954
  ______f.func = "ark_pci_probe";
#line 954
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 954
  ______f.line = 954U;
#line 954
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 954
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 954
  tmp___1 = svga_primary_device(dev);
#line 954
  ______r = tmp___1 == 0;
#line 954
  if (______r != 0) {
#line 954
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 954
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 954
  if (______r != 0) {
#line 955
    tmp = dev_name((struct device  const  *)(& dev->dev));
#line 955
    tmp___0 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 955
    printk("<6>%s %s: ignoring secondary device\n", tmp___0, tmp);
#line 956
    return (-19);
  } else {

  }
#line 960
  info = framebuffer_alloc(296UL, & dev->dev);
#line 961
  ______f___0.func = "ark_pci_probe";
#line 961
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 961
  ______f___0.line = 961U;
#line 961
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 961
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 961
  ______r___0 = (unsigned long )info == (unsigned long )((struct fb_info *)0);
#line 961
  if (______r___0 != 0) {
#line 961
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 961
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 961
  if (______r___0 != 0) {
#line 962
    tmp___2 = dev_name((struct device  const  *)(& dev->dev));
#line 962
    tmp___3 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 962
    printk("<3>%s %s: cannot allocate memory\n", tmp___3, tmp___2);
#line 963
    return (-12);
  } else {

  }
#line 966
  par = (struct arkfb_info *)info->par;
#line 967
  __mutex_init(& par->open_lock, "&par->open_lock", & __key);
#line 969
  info->flags = 8256;
#line 970
  info->fbops = & arkfb_ops;
#line 973
  rc = pci_enable_device(dev);
#line 974
  ______f___1.func = "ark_pci_probe";
#line 974
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 974
  ______f___1.line = 974U;
#line 974
  ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 974
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 974
  ______r___1 = rc < 0;
#line 974
  if (______r___1 != 0) {
#line 974
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 974
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
#line 974
  if (______r___1 != 0) {
#line 975
    tmp___4 = dev_name((struct device  const  *)info->device);
#line 975
    tmp___5 = dev_driver_string((struct device  const  *)info->device);
#line 975
    printk("<3>%s %s: cannot enable PCI device\n", tmp___5, tmp___4);
#line 976
    goto err_enable_device;
  } else {

  }
#line 979
  rc = pci_request_regions(dev, "arkfb");
#line 980
  ______f___2.func = "ark_pci_probe";
#line 980
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 980
  ______f___2.line = 980U;
#line 980
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 980
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 980
  ______r___2 = rc < 0;
#line 980
  if (______r___2 != 0) {
#line 980
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 980
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 980
  if (______r___2 != 0) {
#line 981
    tmp___6 = dev_name((struct device  const  *)info->device);
#line 981
    tmp___7 = dev_driver_string((struct device  const  *)info->device);
#line 981
    printk("<3>%s %s: cannot reserve framebuffer region\n", tmp___7, tmp___6);
#line 982
    goto err_request_regions;
  } else {

  }
#line 985
  par->dac = ics5342_init(& ark_dac_read_regs, & ark_dac_write_regs, (void *)info);
#line 986
  ______f___3.func = "ark_pci_probe";
#line 986
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 986
  ______f___3.line = 986U;
#line 986
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 986
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 986
  ______r___3 = (unsigned long )par->dac == (unsigned long )((struct dac_info *)0);
#line 986
  if (______r___3 != 0) {
#line 986
    ______f___3.ldv_814.ldv_813.hit = ______f___3.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 986
    ______f___3.ldv_814.ldv_813.miss = ______f___3.ldv_814.ldv_813.miss + 1UL;
  }
#line 986
  if (______r___3 != 0) {
#line 987
    rc = -12;
#line 988
    tmp___8 = dev_name((struct device  const  *)info->device);
#line 988
    tmp___9 = dev_driver_string((struct device  const  *)info->device);
#line 988
    printk("<3>%s %s: RAMDAC initialization failed\n", tmp___9, tmp___8);
#line 989
    goto err_dac;
  } else {

  }
#line 992
  info->fix.smem_start = (unsigned long )dev->resource[0].start;
#line 993
  info->fix.smem_len = dev->resource[0].start != 0ULL || dev->resource[0].end != dev->resource[0].start ? ((__u32 )dev->resource[0].end - (__u32 )dev->resource[0].start) + 1U : 0U;
#line 996
  tmp___10 = pci_iomap(dev, 0, 0UL);
#line 996
  info->screen_base = (char *)tmp___10;
#line 997
  ______f___4.func = "ark_pci_probe";
#line 997
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 997
  ______f___4.line = 997U;
#line 997
  ______f___4.ldv_814.ldv_809.correct = 0UL;
#line 997
  ______f___4.ldv_814.ldv_809.incorrect = 0UL;
#line 997
  ______r___4 = (unsigned long )info->screen_base == (unsigned long )((char *)0);
#line 997
  if (______r___4 != 0) {
#line 997
    ______f___4.ldv_814.ldv_813.hit = ______f___4.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 997
    ______f___4.ldv_814.ldv_813.miss = ______f___4.ldv_814.ldv_813.miss + 1UL;
  }
#line 997
  if (______r___4 != 0) {
#line 998
    rc = -12;
#line 999
    tmp___11 = dev_name((struct device  const  *)info->device);
#line 999
    tmp___12 = dev_driver_string((struct device  const  *)info->device);
#line 999
    printk("<3>%s %s: iomap for framebuffer failed\n", tmp___12, tmp___11);
#line 1000
    goto err_iomap;
  } else {

  }
#line 1004
  regval = vga_rseq(0, 16);
#line 1005
  info->screen_size = (unsigned long )((1 << ((int )regval >> 6)) << 20);
#line 1006
  info->fix.smem_len = (__u32 )info->screen_size;
#line 1008
  strcpy((char *)(& info->fix.id), "ARK 2000PV");
#line 1009
  info->fix.mmio_start = 0UL;
#line 1010
  info->fix.mmio_len = 0U;
#line 1011
  info->fix.type = 0U;
#line 1012
  info->fix.visual = 3U;
#line 1013
  info->fix.ypanstep = 0U;
#line 1014
  info->fix.accel = 0U;
#line 1015
  info->pseudo_palette = (void *)(& par->pseudo_palette);
#line 1018
  rc = fb_find_mode(& info->var, info, (char const   *)mode_option, 0, 0U, 0, 8U);
#line 1019
  ______f___5.func = "ark_pci_probe";
#line 1019
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1019
  ______f___5.line = 1019U;
#line 1019
  ______f___5.ldv_814.ldv_809.correct = 0UL;
#line 1019
  ______f___5.ldv_814.ldv_809.incorrect = 0UL;
#line 1019
  ______r___5 = rc != 1 && rc != 2;
#line 1019
  if (______r___5 != 0) {
#line 1019
    ______f___5.ldv_814.ldv_813.hit = ______f___5.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1019
    ______f___5.ldv_814.ldv_813.miss = ______f___5.ldv_814.ldv_813.miss + 1UL;
  }
#line 1019
  if (______r___5 != 0) {
#line 1020
    rc = -22;
#line 1021
    tmp___13 = dev_name((struct device  const  *)info->device);
#line 1021
    tmp___14 = dev_driver_string((struct device  const  *)info->device);
#line 1021
    printk("<3>%s %s: mode %s not found\n", tmp___14, tmp___13, mode_option);
#line 1022
    goto err_find_mode;
  } else {

  }
#line 1025
  rc = fb_alloc_cmap(& info->cmap, 256, 0);
#line 1026
  ______f___6.func = "ark_pci_probe";
#line 1026
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1026
  ______f___6.line = 1026U;
#line 1026
  ______f___6.ldv_814.ldv_809.correct = 0UL;
#line 1026
  ______f___6.ldv_814.ldv_809.incorrect = 0UL;
#line 1026
  ______r___6 = rc < 0;
#line 1026
  if (______r___6 != 0) {
#line 1026
    ______f___6.ldv_814.ldv_813.hit = ______f___6.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1026
    ______f___6.ldv_814.ldv_813.miss = ______f___6.ldv_814.ldv_813.miss + 1UL;
  }
#line 1026
  if (______r___6 != 0) {
#line 1027
    tmp___15 = dev_name((struct device  const  *)info->device);
#line 1027
    tmp___16 = dev_driver_string((struct device  const  *)info->device);
#line 1027
    printk("<3>%s %s: cannot allocate colormap\n", tmp___16, tmp___15);
#line 1028
    goto err_alloc_cmap;
  } else {

  }
#line 1031
  rc = register_framebuffer(info);
#line 1032
  ______f___7.func = "ark_pci_probe";
#line 1032
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1032
  ______f___7.line = 1032U;
#line 1032
  ______f___7.ldv_814.ldv_809.correct = 0UL;
#line 1032
  ______f___7.ldv_814.ldv_809.incorrect = 0UL;
#line 1032
  ______r___7 = rc < 0;
#line 1032
  if (______r___7 != 0) {
#line 1032
    ______f___7.ldv_814.ldv_813.hit = ______f___7.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1032
    ______f___7.ldv_814.ldv_813.miss = ______f___7.ldv_814.ldv_813.miss + 1UL;
  }
#line 1032
  if (______r___7 != 0) {
#line 1033
    tmp___17 = dev_name((struct device  const  *)info->device);
#line 1033
    tmp___18 = dev_driver_string((struct device  const  *)info->device);
#line 1033
    printk("<3>%s %s: cannot register framebugger\n", tmp___18, tmp___17);
#line 1034
    goto err_reg_fb;
  } else {

  }
#line 1037
  tmp___19 = pci_name(dev);
#line 1037
  printk("<6>fb%d: %s on %s, %d MB RAM\n", info->node, (char *)(& info->fix.id), tmp___19,
         info->fix.smem_len >> 20);
#line 1041
  pci_set_drvdata(dev, (void *)info);
#line 1044
  ______f___8.func = "ark_pci_probe";
#line 1044
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1044
  ______f___8.line = 1044U;
#line 1044
  ______f___8.ldv_814.ldv_809.correct = 0UL;
#line 1044
  ______f___8.ldv_814.ldv_809.incorrect = 0UL;
#line 1044
  ______r___8 = mtrr != 0;
#line 1044
  if (______r___8 != 0) {
#line 1044
    ______f___8.ldv_814.ldv_813.hit = ______f___8.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1044
    ______f___8.ldv_814.ldv_813.miss = ______f___8.ldv_814.ldv_813.miss + 1UL;
  }
#line 1044
  if (______r___8 != 0) {
#line 1045
    par->mtrr_reg = -1;
#line 1046
    par->mtrr_reg = mtrr_add(info->fix.smem_start, (unsigned long )info->fix.smem_len,
                             1U, 1);
  } else {

  }
#line 1050
  return (0);
  err_reg_fb: 
#line 1054
  fb_dealloc_cmap(& info->cmap);
  err_alloc_cmap: ;
  err_find_mode: 
#line 1057
  pci_iounmap(dev, (void *)info->screen_base);
  err_iomap: 
#line 1059
  dac_release(par->dac);
  err_dac: 
#line 1061
  pci_release_regions(dev);
  err_request_regions: ;
  err_enable_device: 
#line 1065
  framebuffer_release(info);
#line 1066
  return (rc);
}
}
#line 1071 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void ark_pci_remove(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 1073
  tmp = pci_get_drvdata(dev);
#line 1073
  info = (struct fb_info *)tmp;
#line 1075
  ______f___0.func = "ark_pci_remove";
#line 1075
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1075
  ______f___0.line = 1075U;
#line 1075
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 1075
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 1075
  ______r___0 = (unsigned long )info != (unsigned long )((struct fb_info *)0);
#line 1075
  if (______r___0 != 0) {
#line 1075
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1075
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 1075
  if (______r___0 != 0) {
#line 1076
    par = (struct arkfb_info *)info->par;
#line 1079
    ______f.func = "ark_pci_remove";
#line 1079
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1079
    ______f.line = 1079U;
#line 1079
    ______f.ldv_814.ldv_809.correct = 0UL;
#line 1079
    ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1079
    ______r = par->mtrr_reg >= 0;
#line 1079
    if (______r != 0) {
#line 1079
      ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 1079
      ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
    }
#line 1079
    if (______r != 0) {
#line 1080
      mtrr_del(par->mtrr_reg, 0UL, 0UL);
#line 1081
      par->mtrr_reg = -1;
    } else {

    }
#line 1085
    dac_release(par->dac);
#line 1086
    unregister_framebuffer(info);
#line 1087
    fb_dealloc_cmap(& info->cmap);
#line 1089
    pci_iounmap(dev, (void *)info->screen_base);
#line 1090
    pci_release_regions(dev);
#line 1093
    pci_set_drvdata(dev, 0);
#line 1094
    framebuffer_release(info);
  } else {

  }
#line 1096
  return;
}
}
#line 1102 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int ark_pci_suspend(struct pci_dev *dev , pm_message_t state ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  pci_power_t tmp___2 ;

  {
#line 1104
  tmp = pci_get_drvdata(dev);
#line 1104
  info = (struct fb_info *)tmp;
#line 1105
  par = (struct arkfb_info *)info->par;
#line 1107
  tmp___0 = dev_name((struct device  const  *)info->device);
#line 1107
  tmp___1 = dev_driver_string((struct device  const  *)info->device);
#line 1107
  printk("<6>%s %s: suspend\n", tmp___1, tmp___0);
#line 1109
  acquire_console_sem();
#line 1110
  mutex_lock_nested(& par->open_lock, 0U);
#line 1112
  ______f.func = "ark_pci_suspend";
#line 1112
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1112
  ______f.line = 1112U;
#line 1112
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 1112
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1112
  ______r = state.event == 1 || par->ref_count == 0U;
#line 1112
  if (______r != 0) {
#line 1112
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1112
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 1112
  if (______r != 0) {
#line 1113
    mutex_unlock(& par->open_lock);
#line 1114
    release_console_sem();
#line 1115
    return (0);
  } else {

  }
#line 1118
  fb_set_suspend(info, 1);
#line 1120
  pci_save_state(dev);
#line 1121
  pci_disable_device(dev);
#line 1122
  tmp___2 = pci_choose_state(dev, state);
#line 1122
  pci_set_power_state(dev, tmp___2);
#line 1124
  mutex_unlock(& par->open_lock);
#line 1125
  release_console_sem();
#line 1127
  return (0);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int ark_pci_resume(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___2 ;

  {
#line 1135
  tmp = pci_get_drvdata(dev);
#line 1135
  info = (struct fb_info *)tmp;
#line 1136
  par = (struct arkfb_info *)info->par;
#line 1138
  tmp___0 = dev_name((struct device  const  *)info->device);
#line 1138
  tmp___1 = dev_driver_string((struct device  const  *)info->device);
#line 1138
  printk("<6>%s %s: resume\n", tmp___1, tmp___0);
#line 1140
  acquire_console_sem();
#line 1141
  mutex_lock_nested(& par->open_lock, 0U);
#line 1143
  ______f.func = "ark_pci_resume";
#line 1143
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1143
  ______f.line = 1143U;
#line 1143
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 1143
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1143
  ______r = par->ref_count == 0U;
#line 1143
  if (______r != 0) {
#line 1143
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1143
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 1143
  if (______r != 0) {
#line 1144
    goto fail;
  } else {

  }
#line 1146
  pci_set_power_state(dev, 0);
#line 1147
  pci_restore_state(dev);
#line 1149
  ______f___0.func = "ark_pci_resume";
#line 1149
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1149
  ______f___0.line = 1149U;
#line 1149
  ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 1149
  ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 1149
  tmp___2 = pci_enable_device(dev);
#line 1149
  ______r___0 = tmp___2 != 0;
#line 1149
  if (______r___0 != 0) {
#line 1149
    ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1149
    ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
  }
#line 1149
  if (______r___0 != 0) {
#line 1150
    goto fail;
  } else {

  }
#line 1152
  pci_set_master(dev);
#line 1154
  arkfb_set_par(info);
#line 1155
  fb_set_suspend(info, 0);
  fail: 
#line 1158
  mutex_unlock(& par->open_lock);
#line 1159
  release_console_sem();
#line 1160
  return (0);
}
}
#line 1169 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct pci_device_id ark_devices[2U]  = {      {60888U, 41113U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 1175 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
struct pci_device_id  const  __mod_pci_device_table  ;
#line 1177 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static struct pci_driver arkfb_pci_driver  = 
#line 1177
     {{0, 0}, (char *)"arkfb", (struct pci_device_id  const  *)(& ark_devices), & ark_pci_probe,
    & ark_pci_remove, & ark_pci_suspend, 0, 0, & ark_pci_resume, 0, 0, {0, 0, 0, 0,
                                                                        0, 0, 0, 0,
                                                                        0, 0, 0, 0},
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}};
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static void arkfb_cleanup(void) 
{ 
  struct _ddebug descriptor ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 1190
  descriptor.modname = "arkfb";
#line 1190
  descriptor.function = "arkfb_cleanup";
#line 1190
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
  descriptor.format = "arkfb: cleaning up\n";
#line 1190
  descriptor.primary_hash = 16;
#line 1190
  descriptor.secondary_hash = 32;
#line 1190
  descriptor.lineno = 1190U;
#line 1190
  descriptor.flags = 0U;
#line 1190
  ______f.func = "arkfb_cleanup";
#line 1190
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
  ______f.line = 1190U;
#line 1190
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 1190
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1190
  __ret = 0;
#line 1190
  ______f___2.func = "arkfb_cleanup";
#line 1190
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
  ______f___2.line = 1190U;
#line 1190
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 1190
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 1190
  ______f___3.func = "arkfb_cleanup";
#line 1190
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
  ______f___3.line = 1190U;
#line 1190
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 1190
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 1190
  tmp___0 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 1190
  if (tmp___0 != 0L) {
#line 1190
    tmp___1 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 1190
    if (tmp___1 != 0L) {
#line 1190
      tmp___2 = 1;
    } else {
#line 1190
      tmp___2 = 0;
    }
  } else {
#line 1190
    tmp___2 = 0;
  }
#line 1190
  ______r___3 = tmp___2;
#line 1190
  ftrace_likely_update(& ______f___3, ______r___3, 0);
#line 1190
  ______r___2 = ______r___3 != 0;
#line 1190
  if (______r___2 != 0) {
#line 1190
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1190
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 1190
  if (______r___2 != 0) {
#line 1190
    ______f___0.func = "arkfb_cleanup";
#line 1190
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
    ______f___0.line = 1190U;
#line 1190
    ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 1190
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 1190
    ______f___1.func = "arkfb_cleanup";
#line 1190
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1190
    ______f___1.line = 1190U;
#line 1190
    ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 1190
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 1190
    tmp = __builtin_expect((unsigned int )descriptor.flags != 0U, 1L);
#line 1190
    ______r___1 = (int )tmp;
#line 1190
    ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 1190
    ______r___0 = ______r___1 != 0;
#line 1190
    if (______r___0 != 0) {
#line 1190
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 1190
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
#line 1190
    if (______r___0 != 0) {
#line 1190
      __ret = 1;
    } else {

    }
  } else {

  }
#line 1190
  ______r = __ret != 0;
#line 1190
  if (______r != 0) {
#line 1190
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1190
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 1190
  if (______r != 0) {
#line 1190
    printk("<7>arkfb:arkfb: cleaning up\n");
  } else {

  }
#line 1191
  pci_unregister_driver(& arkfb_pci_driver);
#line 1192
  return;
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
static int arkfb_init(void) 
{ 
  struct _ddebug descriptor ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int __ret ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1209
  descriptor.modname = "arkfb";
#line 1209
  descriptor.function = "arkfb_init";
#line 1209
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
  descriptor.format = "arkfb: initializing\n";
#line 1209
  descriptor.primary_hash = 16;
#line 1209
  descriptor.secondary_hash = 32;
#line 1209
  descriptor.lineno = 1209U;
#line 1209
  descriptor.flags = 0U;
#line 1209
  ______f.func = "arkfb_init";
#line 1209
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
  ______f.line = 1209U;
#line 1209
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 1209
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1209
  __ret = 0;
#line 1209
  ______f___2.func = "arkfb_init";
#line 1209
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
  ______f___2.line = 1209U;
#line 1209
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 1209
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 1209
  ______f___3.func = "arkfb_init";
#line 1209
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
  ______f___3.line = 1209U;
#line 1209
  ______f___3.ldv_814.ldv_809.correct = 0UL;
#line 1209
  ______f___3.ldv_814.ldv_809.incorrect = 0UL;
#line 1209
  tmp___0 = __builtin_expect((dynamic_debug_enabled & 65536LL) != 0LL, 1L);
#line 1209
  if (tmp___0 != 0L) {
#line 1209
    tmp___1 = __builtin_expect((dynamic_debug_enabled2 & 4294967296LL) != 0LL, 1L);
#line 1209
    if (tmp___1 != 0L) {
#line 1209
      tmp___2 = 1;
    } else {
#line 1209
      tmp___2 = 0;
    }
  } else {
#line 1209
    tmp___2 = 0;
  }
#line 1209
  ______r___3 = tmp___2;
#line 1209
  ftrace_likely_update(& ______f___3, ______r___3, 0);
#line 1209
  ______r___2 = ______r___3 != 0;
#line 1209
  if (______r___2 != 0) {
#line 1209
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1209
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 1209
  if (______r___2 != 0) {
#line 1209
    ______f___0.func = "arkfb_init";
#line 1209
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
    ______f___0.line = 1209U;
#line 1209
    ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 1209
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 1209
    ______f___1.func = "arkfb_init";
#line 1209
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1209
    ______f___1.line = 1209U;
#line 1209
    ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 1209
    ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 1209
    tmp = __builtin_expect((unsigned int )descriptor.flags != 0U, 1L);
#line 1209
    ______r___1 = (int )tmp;
#line 1209
    ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 1209
    ______r___0 = ______r___1 != 0;
#line 1209
    if (______r___0 != 0) {
#line 1209
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 1209
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
#line 1209
    if (______r___0 != 0) {
#line 1209
      __ret = 1;
    } else {

    }
  } else {

  }
#line 1209
  ______r = __ret != 0;
#line 1209
  if (______r != 0) {
#line 1209
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1209
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 1209
  if (______r != 0) {
#line 1209
    printk("<7>arkfb:arkfb: initializing\n");
  } else {

  }
#line 1210
  tmp___3 = __pci_register_driver(& arkfb_pci_driver, & __this_module, "arkfb");
#line 1210
  return (tmp___3);
}
}
#line 1232
extern void ldv_check_final_state(void) ;
#line 1235
extern void ldv_check_return_value(int  ) ;
#line 1238
extern void ldv_check_return_value_probe(int  ) ;
#line 1241
extern void ldv_initialize(void) ;
#line 1244
extern void ldv_handler_precall(void) ;
#line 1247
extern int nondet_int(void) ;
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1253 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
void main(void) 
{ 
  struct fb_info *var_group1 ;
  struct fb_tilemap *var_group2 ;
  struct dac_info *var_group3 ;
  int var_ics5342_set_mode_15_p1 ;
  int var_ics5342_set_freq_16_p1 ;
  u32 var_ics5342_set_freq_16_p2 ;
  int var_arkfb_open_22_p1 ;
  int var_arkfb_release_23_p1 ;
  struct fb_var_screeninfo *var_group4 ;
  u_int var_arkfb_setcolreg_26_p0 ;
  u_int var_arkfb_setcolreg_26_p1 ;
  u_int var_arkfb_setcolreg_26_p2 ;
  u_int var_arkfb_setcolreg_26_p3 ;
  u_int var_arkfb_setcolreg_26_p4 ;
  struct fb_info *var_arkfb_setcolreg_26_p5 ;
  int var_arkfb_blank_27_p0 ;
  struct fb_fillrect  const  *var_arkfb_fillrect_7_p1 ;
  struct fb_image  const  *var_arkfb_imageblit_6_p1 ;
  struct pci_dev *var_group5 ;
  struct pci_device_id  const  *var_ark_pci_probe_29_p1 ;
  int res_ark_pci_probe_29 ;
  struct pci_dev *var_group6 ;
  pm_message_t var_ark_pci_suspend_31_p1 ;
  int ldv_s_arkfb_pci_driver_pci_driver ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___1 ;

  {
#line 1747
  ldv_s_arkfb_pci_driver_pci_driver = 0;
#line 1706
  LDV_IN_INTERRUPT = 1;
#line 1715
  ldv_initialize();
#line 1738
  ldv_handler_precall();
#line 1739
  ______f.func = "main";
#line 1739
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 1739
  ______f.line = 1739U;
#line 1739
  ______f.ldv_814.ldv_809.correct = 0UL;
#line 1739
  ______f.ldv_814.ldv_809.incorrect = 0UL;
#line 1739
  tmp = arkfb_init();
#line 1739
  ______r = tmp != 0;
#line 1739
  if (______r != 0) {
#line 1739
    ______f.ldv_814.ldv_813.hit = ______f.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 1739
    ______f.ldv_814.ldv_813.miss = ______f.ldv_814.ldv_813.miss + 1UL;
  }
#line 1739
  if (______r != 0) {
#line 1740
    goto ldv_final;
  } else {

  }
#line 1751
  goto ldv_29401;
  ldv_29400: 
#line 1755
  tmp___0 = nondet_int();
#line 1755
  switch (tmp___0) {
  case 0: 
#line 1772
  ldv_handler_precall();
#line 1773
  arkfb_settile(var_group1, var_group2);
#line 1794
  goto ldv_29372;
  case 1: 
#line 1811
  ldv_handler_precall();
#line 1812
  ics5342_set_mode(var_group3, var_ics5342_set_mode_15_p1);
#line 1832
  goto ldv_29372;
  case 2: 
#line 1849
  ldv_handler_precall();
#line 1850
  ics5342_set_freq(var_group3, var_ics5342_set_freq_16_p1, var_ics5342_set_freq_16_p2);
#line 1870
  goto ldv_29372;
  case 3: 
#line 1887
  ldv_handler_precall();
#line 1888
  ics5342_release(var_group3);
#line 1908
  goto ldv_29372;
  case 4: 
#line 1925
  ldv_handler_precall();
#line 1926
  arkfb_open(var_group1, var_arkfb_open_22_p1);
#line 1946
  goto ldv_29372;
  case 5: 
#line 1963
  ldv_handler_precall();
#line 1964
  arkfb_release(var_group1, var_arkfb_release_23_p1);
#line 1984
  goto ldv_29372;
  case 6: 
#line 2001
  ldv_handler_precall();
#line 2002
  arkfb_check_var(var_group4, var_group1);
#line 2022
  goto ldv_29372;
  case 7: 
#line 2039
  ldv_handler_precall();
#line 2040
  arkfb_set_par(var_group1);
#line 2060
  goto ldv_29372;
  case 8: 
#line 2077
  ldv_handler_precall();
#line 2078
  arkfb_setcolreg(var_arkfb_setcolreg_26_p0, var_arkfb_setcolreg_26_p1, var_arkfb_setcolreg_26_p2,
                  var_arkfb_setcolreg_26_p3, var_arkfb_setcolreg_26_p4, var_arkfb_setcolreg_26_p5);
#line 2098
  goto ldv_29372;
  case 9: 
#line 2115
  ldv_handler_precall();
#line 2116
  arkfb_blank(var_arkfb_blank_27_p0, var_group1);
#line 2136
  goto ldv_29372;
  case 10: 
#line 2153
  ldv_handler_precall();
#line 2154
  arkfb_pan_display(var_group4, var_group1);
#line 2174
  goto ldv_29372;
  case 11: 
#line 2190
  ldv_handler_precall();
#line 2191
  arkfb_fillrect(var_group1, var_arkfb_fillrect_7_p1);
#line 2212
  goto ldv_29372;
  case 12: 
#line 2228
  ldv_handler_precall();
#line 2229
  arkfb_imageblit(var_group1, var_arkfb_imageblit_6_p1);
#line 2250
  goto ldv_29372;
  case 13: 
#line 2254
  ______f___1.func = "main";
#line 2254
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 2254
  ______f___1.line = 2254U;
#line 2254
  ______f___1.ldv_814.ldv_809.correct = 0UL;
#line 2254
  ______f___1.ldv_814.ldv_809.incorrect = 0UL;
#line 2254
  ______r___1 = ldv_s_arkfb_pci_driver_pci_driver == 0;
#line 2254
  if (______r___1 != 0) {
#line 2254
    ______f___1.ldv_814.ldv_813.hit = ______f___1.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 2254
    ______f___1.ldv_814.ldv_813.miss = ______f___1.ldv_814.ldv_813.miss + 1UL;
  }
#line 2254
  if (______r___1 != 0) {
#line 2267
    res_ark_pci_probe_29 = ark_pci_probe(var_group5, var_ark_pci_probe_29_p1);
#line 2268
    ldv_check_return_value(res_ark_pci_probe_29);
#line 2269
    ldv_check_return_value_probe(res_ark_pci_probe_29);
#line 2270
    ______f___0.func = "main";
#line 2270
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 2270
    ______f___0.line = 2270U;
#line 2270
    ______f___0.ldv_814.ldv_809.correct = 0UL;
#line 2270
    ______f___0.ldv_814.ldv_809.incorrect = 0UL;
#line 2270
    ______r___0 = res_ark_pci_probe_29 != 0;
#line 2270
    if (______r___0 != 0) {
#line 2270
      ______f___0.ldv_814.ldv_813.hit = ______f___0.ldv_814.ldv_813.hit + 1UL;
    } else {
#line 2270
      ______f___0.ldv_814.ldv_813.miss = ______f___0.ldv_814.ldv_813.miss + 1UL;
    }
#line 2270
    if (______r___0 != 0) {
#line 2271
      goto ldv_module_exit;
    } else {

    }
#line 2283
    ldv_s_arkfb_pci_driver_pci_driver = ldv_s_arkfb_pci_driver_pci_driver + 1;
  } else {

  }
#line 2289
  goto ldv_29372;
  case 14: 
#line 2293
  ______f___2.func = "main";
#line 2293
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared";
#line 2293
  ______f___2.line = 2293U;
#line 2293
  ______f___2.ldv_814.ldv_809.correct = 0UL;
#line 2293
  ______f___2.ldv_814.ldv_809.incorrect = 0UL;
#line 2293
  ______r___2 = ldv_s_arkfb_pci_driver_pci_driver == 1;
#line 2293
  if (______r___2 != 0) {
#line 2293
    ______f___2.ldv_814.ldv_813.hit = ______f___2.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 2293
    ______f___2.ldv_814.ldv_813.miss = ______f___2.ldv_814.ldv_813.miss + 1UL;
  }
#line 2293
  if (______r___2 != 0) {
#line 2308
    ldv_handler_precall();
#line 2309
    ark_pci_remove(var_group5);
#line 2319
    ldv_s_arkfb_pci_driver_pci_driver = 0;
  } else {

  }
#line 2325
  goto ldv_29372;
  case 15: 
#line 2347
  ldv_handler_precall();
#line 2348
  ark_pci_suspend(var_group6, var_ark_pci_suspend_31_p1);
#line 2363
  goto ldv_29372;
  case 16: 
#line 2385
  ldv_handler_precall();
#line 2386
  ark_pci_resume(var_group6);
#line 2401
  goto ldv_29372;
  default: ;
#line 2402
  goto ldv_29372;
  }
  ldv_29372: ;
  ldv_29401: 
#line 1751
  tmp___1 = nondet_int();
#line 1751
  if (tmp___1 != 0 || ldv_s_arkfb_pci_driver_pci_driver != 0) {
#line 1753
    goto ldv_29400;
  } else {

  }

  ldv_module_exit: 
#line 2431
  ldv_handler_precall();
#line 2432
  arkfb_cleanup();
  ldv_final: 
#line 2439
  ldv_check_final_state();
#line 2442
  return;
}
}
#line 2457 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 2463
  ldv_check_alloc_flags(ldv_func_arg1);
#line 2465
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 2465
  return (tmp);
}
}
#line 2479 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 2485
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2487
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 2488
  return ((void *)0);
}
}
#line 2523 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 2529
  ldv_check_alloc_flags(ldv_func_arg2);
#line 2531
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 2532
  return ((void *)0);
}
}
#line 2534 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/video/arkfb.c.prepared"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 2540
  ldv_check_alloc_flags(flags);
#line 2541
  return ((void *)0);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin  =    LDV_SPIN_UNLOCKED;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
#line 28
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 28
    ldv_error();
  }
#line 29
  return;
}
}
#line 31
extern struct page *ldv_some_page(void) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
#line 37
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 37
    ldv_error();
  }
#line 39
  tmp = ldv_some_page();
#line 39
  return (tmp);
}
}
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_nonatomic(void) 
{ 


  {
#line 46
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
#line 46
    ldv_error();
  }
#line 47
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_lock(void) 
{ 


  {
#line 53
  ldv_spin = LDV_SPIN_LOCKED;
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_unlock(void) 
{ 


  {
#line 60
  ldv_spin = LDV_SPIN_UNLOCKED;
#line 61
  return;
}
}
#line 71
int ldv_spin_trylock(void) ;
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___650  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_spin_trylock",
    "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c",
    71, {{0UL, 0UL}}};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin_trylock(void) 
{ 
  int is_lock ;
  int ______r ;

  {
#line 69
  is_lock = ldv_undef_int();
#line 71
  ______r = ! (! is_lock);
#line 71
  if (______r) {
#line 71
    ______f___650.ldv_814.ldv_813.hit = ______f___650.ldv_814.ldv_813.hit + 1UL;
  } else {
#line 71
    ______f___650.ldv_814.ldv_813.miss = ______f___650.ldv_814.ldv_813.miss + 1UL;
  }
#line 71
  if (______r) {
#line 74
    return (0);
  } else {
#line 79
    ldv_spin = LDV_SPIN_LOCKED;
#line 81
    return (1);
  }
}
}
