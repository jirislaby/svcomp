/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 111 "include/linux/types.h"
typedef __u8 uint8_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 183 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 188 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 190 "include/linux/types.h"
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
#line 190 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_7 atomic_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
union __anonunion____missing_field_name_9 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_9 __annonCompField4 ;
};
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 116 "include/linux/kernel.h"
struct completion;
#line 211
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_13 pgd_t;
#line 277
struct page;
#line 290
struct file;
#line 307
struct seq_file;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
#line 46 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct thread_struct;
#line 52
struct cpumask;
#line 321
struct raw_spinlock;
#line 13 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 91
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_27 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_28 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_26 {
   struct __anonstruct____missing_field_name_27 __annonCompField11 ;
   struct __anonstruct____missing_field_name_28 __annonCompField12 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_29 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_26 __annonCompField13 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_29 __annonCompField14 ;
} __attribute__((__aligned__(16))) ;
#line 337 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 423
struct kmem_cache;
#line 425
struct ds_context;
#line 425 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_31 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_31 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_33 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_34 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_35 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_36 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_32 {
   struct __anonstruct____missing_field_name_33 __annonCompField16 ;
   struct __anonstruct_futex_34 futex ;
   struct __anonstruct_nanosleep_35 nanosleep ;
   struct __anonstruct_poll_36 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_32 __annonCompField17 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_37 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_37 raw_rwlock_t;
#line 366 "include/linux/lockdep.h"
struct lock_class_key {

};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_38 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_38 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_39 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_39 rwlock_t;
#line 14 "include/linux/time.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int flags , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_41 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_41 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
};
#line 69 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
};
#line 50 "include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 167 "include/linux/ioport.h"
struct device;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 10 "include/linux/timer.h"
struct tvec_base;
#line 12 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 240
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 43 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 43 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 196 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
   int (*runtime_suspend)(struct device *dev ) ;
   int (*runtime_resume)(struct device *dev ) ;
   int (*runtime_idle)(struct device *dev ) ;
};
#line 351
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 384
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 403
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 410 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int ignore_children : 1 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_108 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_108 mm_context_t;
#line 10 "include/linux/gfp.h"
struct vm_area_struct;
#line 45 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 20 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 42
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_118 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_118 __annonCompField18 ;
};
#line 56 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 62 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 49 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
#line 16 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 37 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 48 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 64 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 71 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
#line 8 "include/asm-generic/module.h"
struct mod_arch_specific {

};
#line 35 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 49 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 59
struct module_param_attrs;
#line 59 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 227
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 234
struct module_sect_attrs;
#line 234
struct module_notes_attrs;
#line 234
struct ftrace_event_call;
#line 234 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
};
#line 665
struct device_driver;
#line 19 "include/linux/klist.h"
struct klist_node;
#line 39 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_map_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 30 "include/linux/device.h"
struct device_private;
#line 32
struct driver_private;
#line 33
struct class;
#line 34
struct class_private;
#line 35
struct bus_type;
#line 36
struct bus_type_private;
#line 38 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 51
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 157 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 189
struct class_attribute;
#line 189 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   char *(*devnode)(struct device *dev , mode_t *mode ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 211
struct device_type;
#line 252 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 299 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   char *(*devnode)(struct device *dev , mode_t *mode ) ;
   void (*release)(struct device *dev ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 310 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 370 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 379
struct dma_coherent_mem;
#line 379 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device *dev ) ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 407 "include/linux/mod_devicetable.h"
struct spi_device_id {
   char name[32] ;
   kernel_ulong_t driver_data  __attribute__((__aligned__(sizeof(kernel_ulong_t )))) ;
};
#line 68 "include/linux/spi/spi.h"
struct spi_master;
#line 68 "include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 mode ;
   u8 bits_per_word ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32] ;
};
#line 143
struct spi_message;
#line 174 "include/linux/spi/spi.h"
struct spi_driver {
   struct spi_device_id  const  *id_table ;
   int (*probe)(struct spi_device *spi ) ;
   int (*remove)(struct spi_device *spi ) ;
   void (*shutdown)(struct spi_device *spi ) ;
   int (*suspend)(struct spi_device *spi , pm_message_t mesg ) ;
   int (*resume)(struct spi_device *spi ) ;
   struct device_driver driver ;
};
#line 234 "include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u16 flags ;
   int (*setup)(struct spi_device *spi ) ;
   int (*transfer)(struct spi_device *spi , struct spi_message *mesg ) ;
   void (*cleanup)(struct spi_device *spi ) ;
};
#line 416 "include/linux/spi/spi.h"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   unsigned int cs_change : 1 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 465 "include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *context ) ;
   void *context ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 4 "include/linux/spi/tdo24m.h"
enum tdo24m_model {
    TDO24M = 0,
    TDO35S = 1
} ;
#line 9 "include/linux/spi/tdo24m.h"
struct tdo24m_platform_data {
   enum tdo24m_model model ;
};
#line 99 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 568
struct dentry;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 23 "include/linux/mm_types.h"
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_124 {
   u16 inuse ;
   u16 objects ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_123 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_124 __annonCompField19 ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_126 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_125 {
   struct __anonstruct____missing_field_name_126 __annonCompField21 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_127 {
   unsigned long index ;
   void *freelist ;
};
#line 40 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_123 __annonCompField20 ;
   union __anonunion____missing_field_name_125 __annonCompField22 ;
   union __anonunion____missing_field_name_127 __annonCompField23 ;
   struct list_head lru ;
};
#line 134 "include/linux/mm_types.h"
struct __anonstruct_vm_set_129 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 134 "include/linux/mm_types.h"
union __anonunion_shared_128 {
   struct __anonstruct_vm_set_129 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 134
struct anon_vma;
#line 134
struct vm_operations_struct;
#line 134
struct mempolicy;
#line 134 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_128 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 191 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 196 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 202
struct linux_binfmt;
#line 202
struct mmu_notifier_mm;
#line 202 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_130 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_130 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_132 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_133 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_134 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_135 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_136 {
   void *_addr ;
   short _addr_lsb ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_137 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_131 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_132 _kill ;
   struct __anonstruct__timer_133 _timer ;
   struct __anonstruct__rt_134 _rt ;
   struct __anonstruct__sigchld_135 _sigchld ;
   struct __anonstruct__sigfault_136 _sigfault ;
   struct __anonstruct__sigpoll_137 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_131 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 5 "include/linux/path.h"
struct vfsmount;
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_140 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_140 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 27 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 28
struct hrtimer_cpu_base;
#line 44
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 103 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 141 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 170 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 18 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 947 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 76
struct signal_struct;
#line 77
struct cred;
#line 79
struct key_type;
#line 81
struct keyring_list;
#line 124
struct key_user;
#line 124 "include/linux/key.h"
union __anonunion____missing_field_name_195 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 124 "include/linux/key.h"
union __anonunion_type_data_196 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
#line 124 "include/linux/key.h"
union __anonunion_payload_197 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 124 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_195 __annonCompField24 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_196 type_data ;
   union __anonunion_payload_197 payload ;
};
#line 18 "include/linux/selinux.h"
struct audit_context;
#line 23 "include/linux/cred.h"
struct inode;
#line 31 "include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
#line 83 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 116 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 98 "include/linux/sched.h"
struct futex_pi_state;
#line 99
struct robust_list_head;
#line 100
struct bio;
#line 101
struct fs_struct;
#line 102
struct bts_context;
#line 103
struct perf_event_context;
#line 153
struct cfs_rq;
#line 154
struct task_group;
#line 357
struct user_namespace;
#line 58 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 15 "include/linux/aio.h"
struct kioctx;
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_199 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87
struct eventfd_ctx;
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_199 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 481 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 488 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 496 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 514 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 550 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 563
struct tty_struct;
#line 563
struct taskstats;
#line 563
struct tty_audit_buf;
#line 563 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 701 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct delayed_work work ;
   atomic_long_t locked_vm ;
};
#line 750
struct backing_dev_info;
#line 751
struct reclaim_state;
#line 754 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 770 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 815
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 892 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int cpu_power ;
   unsigned long cpumask[0] ;
};
#line 919
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 937 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   unsigned int smt_gain ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0] ;
};
#line 1043
struct io_context;
#line 1054
struct pipe_inode_info;
#line 1057
struct rq;
#line 1066 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int flags ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sd_flag , int flags ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   unsigned int (*get_rr_interval)(struct task_struct *task ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 1118 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 avg_running ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1197
struct rt_rq;
#line 1197 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1215
struct files_struct;
#line 1215
struct irqaction;
#line 1215
struct css_set;
#line 1215
struct compat_robust_list_head;
#line 1215 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
};
#line 154 "include/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3] ;
};
#line 184 "include/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 237 "include/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5] ;
};
#line 276 "include/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 297
enum __anonenum_200 {
    FB_BLANK_UNBLANK = 0,
    FB_BLANK_NORMAL = 0 + 1,
    FB_BLANK_VSYNC_SUSPEND = 1 + 1,
    FB_BLANK_HSYNC_SUSPEND = 2 + 1,
    FB_BLANK_POWERDOWN = 3 + 1
} ;
#line 336 "include/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 345 "include/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 354 "include/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 378 "include/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 382 "include/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 89 "include/linux/dcache.h"
union __anonunion_d_u_201 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 89
struct dentry_operations;
#line 89
struct super_block;
#line 89 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_201 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
#line 134 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 16 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 384 "include/linux/fs.h"
struct export_operations;
#line 390
struct poll_table_struct;
#line 391
struct kstatfs;
#line 446 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 106 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 127 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 17 "include/linux/dqblk_qtree.h"
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 197 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 212
struct quota_format_type;
#line 214 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 284 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 321 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 335 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 511 "include/linux/fs.h"
struct writeback_control;
#line 554 "include/linux/fs.h"
union __anonunion_arg_207 {
   char *buf ;
   void *data ;
};
#line 554 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_206 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_207 arg ;
   int error ;
};
#line 554 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_206 read_descriptor_t;
#line 567 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 618 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 642
struct hd_struct;
#line 642
struct gendisk;
#line 642 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 716
struct posix_acl;
#line 719
struct inode_operations;
#line 719
struct file_operations;
#line 719
struct file_lock;
#line 719
struct cdev;
#line 719 "include/linux/fs.h"
union __anonunion____missing_field_name_208 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 719 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_208 __annonCompField25 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 874 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 885 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 908 "include/linux/fs.h"
union __anonunion_f_u_209 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 908 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_209 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1027 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1029 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1034 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1056 "include/linux/fs.h"
struct fasync_struct;
#line 1056 "include/linux/fs.h"
struct __anonstruct_afs_211 {
   struct list_head link ;
   int state ;
};
#line 1056 "include/linux/fs.h"
union __anonunion_fl_u_210 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_211 afs ;
};
#line 1056 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_210 fl_u ;
};
#line 1281 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1316
struct file_system_type;
#line 1316
struct super_operations;
#line 1316
struct xattr_handler;
#line 1316
struct mtd_info;
#line 1316 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1435 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1482 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1511 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1555 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1738 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 35 "include/linux/backlight.h"
struct backlight_device;
#line 36
struct fb_info;
#line 38 "include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
#line 54 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   unsigned int state ;
};
#line 78 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 438 "include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 449
struct fb_videomode;
#line 449 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4] ;
   __u8 monitor[14] ;
   __u8 serial_no[14] ;
   __u8 ascii[14] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 552 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 575 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
   void (*readio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
};
#line 593 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info *info , struct list_head *pagelist ) ;
};
#line 611 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *info , int user ) ;
   int (*fb_release)(struct fb_info *info , int user ) ;
   ssize_t (*fb_read)(struct fb_info *info , char *buf , size_t count , loff_t *ppos ) ;
   ssize_t (*fb_write)(struct fb_info *info , char const   *buf , size_t count , loff_t *ppos ) ;
   int (*fb_check_var)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   int (*fb_set_par)(struct fb_info *info ) ;
   int (*fb_setcolreg)(unsigned int regno , unsigned int red , unsigned int green ,
                       unsigned int blue , unsigned int transp , struct fb_info *info ) ;
   int (*fb_setcmap)(struct fb_cmap *cmap , struct fb_info *info ) ;
   int (*fb_blank)(int blank , struct fb_info *info ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   void (*fb_fillrect)(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
   void (*fb_copyarea)(struct fb_info *info , struct fb_copyarea  const  *region ) ;
   void (*fb_imageblit)(struct fb_info *info , struct fb_image  const  *image ) ;
   int (*fb_cursor)(struct fb_info *info , struct fb_cursor *cursor ) ;
   void (*fb_rotate)(struct fb_info *info , int angle ) ;
   int (*fb_sync)(struct fb_info *info ) ;
   int (*fb_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_compat_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_mmap)(struct fb_info *info , struct vm_area_struct *vma ) ;
   void (*fb_get_caps)(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
   void (*fb_destroy)(struct fb_info *info ) ;
};
#line 688 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 697 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 708 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 717 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 728 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 737 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *info , struct fb_tilemap *map ) ;
   void (*fb_tilecopy)(struct fb_info *info , struct fb_tilearea *area ) ;
   void (*fb_tilefill)(struct fb_info *info , struct fb_tilerect *rect ) ;
   void (*fb_tileblit)(struct fb_info *info , struct fb_tileblit *blit ) ;
   void (*fb_tilecursor)(struct fb_info *info , struct fb_tilecursor *cursor ) ;
   int (*fb_get_tilemax)(struct fb_info *info ) ;
};
#line 813 "include/linux/fb.h"
struct fb_info {
   int node ;
   int flags ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   resource_size_t aperture_base ;
   resource_size_t aperture_size ;
};
#line 1093 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 31 "include/linux/lcd.h"
struct lcd_device;
#line 34 "include/linux/lcd.h"
struct lcd_properties {
   int max_contrast ;
};
#line 39 "include/linux/lcd.h"
struct lcd_ops {
   int (*get_power)(struct lcd_device * ) ;
   int (*set_power)(struct lcd_device * , int power ) ;
   int (*get_contrast)(struct lcd_device * ) ;
   int (*set_contrast)(struct lcd_device * , int contrast ) ;
   int (*set_mode)(struct lcd_device * , struct fb_videomode * ) ;
   int (*check_fb)(struct lcd_device * , struct fb_info * ) ;
};
#line 56 "include/linux/lcd.h"
struct lcd_device {
   struct lcd_properties props ;
   struct mutex ops_lock ;
   struct lcd_ops *ops ;
   struct mutex update_lock ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 28 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
struct tdo24m {
   struct spi_device *spi_dev ;
   struct lcd_device *lcd_dev ;
   struct spi_message msg ;
   struct spi_transfer xfer ;
   uint8_t *buf ;
   int (*adj_mode)(struct tdo24m *lcd , int mode ) ;
   int color_invert ;
   int power ;
   int mode ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 21 "include/linux/log2.h"
extern  __attribute__((__noreturn__)) int ____ilog2_NaN(void)  __attribute__((__const__)) ;
#line 241 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size )  __attribute__((__const__)) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> (12 - 1);
#line 14
  order = -1;
#line 15
  while (1) {
#line 16
    size = size >> 1;
#line 17
    order = order + 1;
#line 15
    if (size) {

    } else {
#line 15
      break;
    }
  }
#line 19
  return (order);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect(! (! ((unsigned long )ptr >= 0xfffffffffffff001UL)), 0);
#line 34
  return (tmp);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head *new , struct list_head *prev , struct list_head *next ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 314 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask , unsigned int order ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return (kobj->name);
}
}
#line 201 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void)  __attribute__((__no_instrument_function__)) ;
#line 201 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 203
  while (1) {
#line 203
    break;
  }
#line 205
  return;
}
}
#line 138 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 47 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 47 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 47
  tmp = __builtin_expect(! (! __tracepoint_kmalloc.state), 0);
#line 47
  if (tmp) {
#line 47
    while (1) {
#line 47
      rcu_read_lock_sched_notrace();
#line 47
      _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 47
      while (1) {
#line 47
        break;
      }
#line 47
      it_func = _________p1;
#line 47
      if (it_func) {
#line 47
        while (1) {
#line 47
          (*((void (*)(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                       size_t bytes_alloc , gfp_t gfp_flags ))*it_func))(call_site,
                                                                         ptr, bytes_req,
                                                                         bytes_alloc,
                                                                         gfp_flags);
#line 47
          it_func = it_func + 1;
#line 47
          if (*it_func) {

          } else {
#line 47
            break;
          }
        }
      } else {

      }
#line 47
      rcu_read_lock_sched_notrace();
#line 47
      break;
    }
  } else {

  }
#line 47
  return;
}
}
#line 63 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 66
  return;
}
}
#line 142 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[12 + 2] ;
#line 148 "include/linux/slub_def.h"
__inline static int ( __attribute__((__always_inline__)) kmalloc_index)(size_t size ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  int tmp___44 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;

  {
#line 150
  if (! size) {
#line 151
    return (0);
  } else {

  }
#line 153
  if (size <= (size_t )8) {
#line 154
    if (8 < 1) {
#line 154
      tmp = ____ilog2_NaN();
#line 154
      tmp___65 = tmp;
    } else {
#line 154
      if (8ULL & (1ULL << 63)) {
#line 154
        tmp___64 = 63;
      } else {
#line 154
        if (8ULL & (1ULL << 62)) {
#line 154
          tmp___63 = 62;
        } else {
#line 154
          if (8ULL & (1ULL << 61)) {
#line 154
            tmp___62 = 61;
          } else {
#line 154
            if (8ULL & (1ULL << 60)) {
#line 154
              tmp___61 = 60;
            } else {
#line 154
              if (8ULL & (1ULL << 59)) {
#line 154
                tmp___60 = 59;
              } else {
#line 154
                if (8ULL & (1ULL << 58)) {
#line 154
                  tmp___59 = 58;
                } else {
#line 154
                  if (8ULL & (1ULL << 57)) {
#line 154
                    tmp___58 = 57;
                  } else {
#line 154
                    if (8ULL & (1ULL << 56)) {
#line 154
                      tmp___57 = 56;
                    } else {
#line 154
                      if (8ULL & (1ULL << 55)) {
#line 154
                        tmp___56 = 55;
                      } else {
#line 154
                        if (8ULL & (1ULL << 54)) {
#line 154
                          tmp___55 = 54;
                        } else {
#line 154
                          if (8ULL & (1ULL << 53)) {
#line 154
                            tmp___54 = 53;
                          } else {
#line 154
                            if (8ULL & (1ULL << 52)) {
#line 154
                              tmp___53 = 52;
                            } else {
#line 154
                              if (8ULL & (1ULL << 51)) {
#line 154
                                tmp___52 = 51;
                              } else {
#line 154
                                if (8ULL & (1ULL << 50)) {
#line 154
                                  tmp___51 = 50;
                                } else {
#line 154
                                  if (8ULL & (1ULL << 49)) {
#line 154
                                    tmp___50 = 49;
                                  } else {
#line 154
                                    if (8ULL & (1ULL << 48)) {
#line 154
                                      tmp___49 = 48;
                                    } else {
#line 154
                                      if (8ULL & (1ULL << 47)) {
#line 154
                                        tmp___48 = 47;
                                      } else {
#line 154
                                        if (8ULL & (1ULL << 46)) {
#line 154
                                          tmp___47 = 46;
                                        } else {
#line 154
                                          if (8ULL & (1ULL << 45)) {
#line 154
                                            tmp___46 = 45;
                                          } else {
#line 154
                                            if (8ULL & (1ULL << 44)) {
#line 154
                                              tmp___45 = 44;
                                            } else {
#line 154
                                              if (8ULL & (1ULL << 43)) {
#line 154
                                                tmp___44 = 43;
                                              } else {
#line 154
                                                if (8ULL & (1ULL << 42)) {
#line 154
                                                  tmp___43 = 42;
                                                } else {
#line 154
                                                  if (8ULL & (1ULL << 41)) {
#line 154
                                                    tmp___42 = 41;
                                                  } else {
#line 154
                                                    if (8ULL & (1ULL << 40)) {
#line 154
                                                      tmp___41 = 40;
                                                    } else {
#line 154
                                                      if (8ULL & (1ULL << 39)) {
#line 154
                                                        tmp___40 = 39;
                                                      } else {
#line 154
                                                        if (8ULL & (1ULL << 38)) {
#line 154
                                                          tmp___39 = 38;
                                                        } else {
#line 154
                                                          if (8ULL & (1ULL << 37)) {
#line 154
                                                            tmp___38 = 37;
                                                          } else {
#line 154
                                                            if (8ULL & (1ULL << 36)) {
#line 154
                                                              tmp___37 = 36;
                                                            } else {
#line 154
                                                              if (8ULL & (1ULL << 35)) {
#line 154
                                                                tmp___36 = 35;
                                                              } else {
#line 154
                                                                if (8ULL & (1ULL << 34)) {
#line 154
                                                                  tmp___35 = 34;
                                                                } else {
#line 154
                                                                  if (8ULL & (1ULL << 33)) {
#line 154
                                                                    tmp___34 = 33;
                                                                  } else {
#line 154
                                                                    if (8ULL & (1ULL << 32)) {
#line 154
                                                                      tmp___33 = 32;
                                                                    } else {
#line 154
                                                                      if (8ULL & (1ULL << 31)) {
#line 154
                                                                        tmp___32 = 31;
                                                                      } else {
#line 154
                                                                        if (8ULL & (1ULL << 30)) {
#line 154
                                                                          tmp___31 = 30;
                                                                        } else {
#line 154
                                                                          if (8ULL & (1ULL << 29)) {
#line 154
                                                                            tmp___30 = 29;
                                                                          } else {
#line 154
                                                                            if (8ULL & (1ULL << 28)) {
#line 154
                                                                              tmp___29 = 28;
                                                                            } else {
#line 154
                                                                              if (8ULL & (1ULL << 27)) {
#line 154
                                                                                tmp___28 = 27;
                                                                              } else {
#line 154
                                                                                if (8ULL & (1ULL << 26)) {
#line 154
                                                                                  tmp___27 = 26;
                                                                                } else {
#line 154
                                                                                  if (8ULL & (1ULL << 25)) {
#line 154
                                                                                    tmp___26 = 25;
                                                                                  } else {
#line 154
                                                                                    if (8ULL & (1ULL << 24)) {
#line 154
                                                                                      tmp___25 = 24;
                                                                                    } else {
#line 154
                                                                                      if (8ULL & (1ULL << 23)) {
#line 154
                                                                                        tmp___24 = 23;
                                                                                      } else {
#line 154
                                                                                        if (8ULL & (1ULL << 22)) {
#line 154
                                                                                          tmp___23 = 22;
                                                                                        } else {
#line 154
                                                                                          if (8ULL & (1ULL << 21)) {
#line 154
                                                                                            tmp___22 = 21;
                                                                                          } else {
#line 154
                                                                                            if (8ULL & (1ULL << 20)) {
#line 154
                                                                                              tmp___21 = 20;
                                                                                            } else {
#line 154
                                                                                              if (8ULL & (1ULL << 19)) {
#line 154
                                                                                                tmp___20 = 19;
                                                                                              } else {
#line 154
                                                                                                if (8ULL & (1ULL << 18)) {
#line 154
                                                                                                  tmp___19 = 18;
                                                                                                } else {
#line 154
                                                                                                  if (8ULL & (1ULL << 17)) {
#line 154
                                                                                                    tmp___18 = 17;
                                                                                                  } else {
#line 154
                                                                                                    if (8ULL & (1ULL << 16)) {
#line 154
                                                                                                      tmp___17 = 16;
                                                                                                    } else {
#line 154
                                                                                                      if (8ULL & (1ULL << 15)) {
#line 154
                                                                                                        tmp___16 = 15;
                                                                                                      } else {
#line 154
                                                                                                        if (8ULL & (1ULL << 14)) {
#line 154
                                                                                                          tmp___15 = 14;
                                                                                                        } else {
#line 154
                                                                                                          if (8ULL & (1ULL << 13)) {
#line 154
                                                                                                            tmp___14 = 13;
                                                                                                          } else {
#line 154
                                                                                                            if (8ULL & (1ULL << 12)) {
#line 154
                                                                                                              tmp___13 = 12;
                                                                                                            } else {
#line 154
                                                                                                              if (8ULL & (1ULL << 11)) {
#line 154
                                                                                                                tmp___12 = 11;
                                                                                                              } else {
#line 154
                                                                                                                if (8ULL & (1ULL << 10)) {
#line 154
                                                                                                                  tmp___11 = 10;
                                                                                                                } else {
#line 154
                                                                                                                  if (8ULL & (1ULL << 9)) {
#line 154
                                                                                                                    tmp___10 = 9;
                                                                                                                  } else {
#line 154
                                                                                                                    if (8ULL & (1ULL << 8)) {
#line 154
                                                                                                                      tmp___9 = 8;
                                                                                                                    } else {
#line 154
                                                                                                                      if (8ULL & (1ULL << 7)) {
#line 154
                                                                                                                        tmp___8 = 7;
                                                                                                                      } else {
#line 154
                                                                                                                        if (8ULL & (1ULL << 6)) {
#line 154
                                                                                                                          tmp___7 = 6;
                                                                                                                        } else {
#line 154
                                                                                                                          if (8ULL & (1ULL << 5)) {
#line 154
                                                                                                                            tmp___6 = 5;
                                                                                                                          } else {
#line 154
                                                                                                                            if (8ULL & (1ULL << 4)) {
#line 154
                                                                                                                              tmp___5 = 4;
                                                                                                                            } else {
#line 154
                                                                                                                              if (8ULL & (1ULL << 3)) {
#line 154
                                                                                                                                tmp___4 = 3;
                                                                                                                              } else {
#line 154
                                                                                                                                if (8ULL & (1ULL << 2)) {
#line 154
                                                                                                                                  tmp___3 = 2;
                                                                                                                                } else {
#line 154
                                                                                                                                  if (8ULL & (1ULL << 1)) {
#line 154
                                                                                                                                    tmp___2 = 1;
                                                                                                                                  } else {
#line 154
                                                                                                                                    if (8ULL & (1ULL << 0)) {
#line 154
                                                                                                                                      tmp___1 = 0;
                                                                                                                                    } else {
#line 154
                                                                                                                                      tmp___0 = ____ilog2_NaN();
#line 154
                                                                                                                                      tmp___1 = tmp___0;
                                                                                                                                    }
#line 154
                                                                                                                                    tmp___2 = tmp___1;
                                                                                                                                  }
#line 154
                                                                                                                                  tmp___3 = tmp___2;
                                                                                                                                }
#line 154
                                                                                                                                tmp___4 = tmp___3;
                                                                                                                              }
#line 154
                                                                                                                              tmp___5 = tmp___4;
                                                                                                                            }
#line 154
                                                                                                                            tmp___6 = tmp___5;
                                                                                                                          }
#line 154
                                                                                                                          tmp___7 = tmp___6;
                                                                                                                        }
#line 154
                                                                                                                        tmp___8 = tmp___7;
                                                                                                                      }
#line 154
                                                                                                                      tmp___9 = tmp___8;
                                                                                                                    }
#line 154
                                                                                                                    tmp___10 = tmp___9;
                                                                                                                  }
#line 154
                                                                                                                  tmp___11 = tmp___10;
                                                                                                                }
#line 154
                                                                                                                tmp___12 = tmp___11;
                                                                                                              }
#line 154
                                                                                                              tmp___13 = tmp___12;
                                                                                                            }
#line 154
                                                                                                            tmp___14 = tmp___13;
                                                                                                          }
#line 154
                                                                                                          tmp___15 = tmp___14;
                                                                                                        }
#line 154
                                                                                                        tmp___16 = tmp___15;
                                                                                                      }
#line 154
                                                                                                      tmp___17 = tmp___16;
                                                                                                    }
#line 154
                                                                                                    tmp___18 = tmp___17;
                                                                                                  }
#line 154
                                                                                                  tmp___19 = tmp___18;
                                                                                                }
#line 154
                                                                                                tmp___20 = tmp___19;
                                                                                              }
#line 154
                                                                                              tmp___21 = tmp___20;
                                                                                            }
#line 154
                                                                                            tmp___22 = tmp___21;
                                                                                          }
#line 154
                                                                                          tmp___23 = tmp___22;
                                                                                        }
#line 154
                                                                                        tmp___24 = tmp___23;
                                                                                      }
#line 154
                                                                                      tmp___25 = tmp___24;
                                                                                    }
#line 154
                                                                                    tmp___26 = tmp___25;
                                                                                  }
#line 154
                                                                                  tmp___27 = tmp___26;
                                                                                }
#line 154
                                                                                tmp___28 = tmp___27;
                                                                              }
#line 154
                                                                              tmp___29 = tmp___28;
                                                                            }
#line 154
                                                                            tmp___30 = tmp___29;
                                                                          }
#line 154
                                                                          tmp___31 = tmp___30;
                                                                        }
#line 154
                                                                        tmp___32 = tmp___31;
                                                                      }
#line 154
                                                                      tmp___33 = tmp___32;
                                                                    }
#line 154
                                                                    tmp___34 = tmp___33;
                                                                  }
#line 154
                                                                  tmp___35 = tmp___34;
                                                                }
#line 154
                                                                tmp___36 = tmp___35;
                                                              }
#line 154
                                                              tmp___37 = tmp___36;
                                                            }
#line 154
                                                            tmp___38 = tmp___37;
                                                          }
#line 154
                                                          tmp___39 = tmp___38;
                                                        }
#line 154
                                                        tmp___40 = tmp___39;
                                                      }
#line 154
                                                      tmp___41 = tmp___40;
                                                    }
#line 154
                                                    tmp___42 = tmp___41;
                                                  }
#line 154
                                                  tmp___43 = tmp___42;
                                                }
#line 154
                                                tmp___44 = tmp___43;
                                              }
#line 154
                                              tmp___45 = tmp___44;
                                            }
#line 154
                                            tmp___46 = tmp___45;
                                          }
#line 154
                                          tmp___47 = tmp___46;
                                        }
#line 154
                                        tmp___48 = tmp___47;
                                      }
#line 154
                                      tmp___49 = tmp___48;
                                    }
#line 154
                                    tmp___50 = tmp___49;
                                  }
#line 154
                                  tmp___51 = tmp___50;
                                }
#line 154
                                tmp___52 = tmp___51;
                              }
#line 154
                              tmp___53 = tmp___52;
                            }
#line 154
                            tmp___54 = tmp___53;
                          }
#line 154
                          tmp___55 = tmp___54;
                        }
#line 154
                        tmp___56 = tmp___55;
                      }
#line 154
                      tmp___57 = tmp___56;
                    }
#line 154
                    tmp___58 = tmp___57;
                  }
#line 154
                  tmp___59 = tmp___58;
                }
#line 154
                tmp___60 = tmp___59;
              }
#line 154
              tmp___61 = tmp___60;
            }
#line 154
            tmp___62 = tmp___61;
          }
#line 154
          tmp___63 = tmp___62;
        }
#line 154
        tmp___64 = tmp___63;
      }
#line 154
      tmp___65 = tmp___64;
    }
#line 154
    return (tmp___65);
  } else {

  }
#line 156
  if ((8 <= 32 && size > (size_t )64) && size <= (size_t )96) {
#line 157
    return (1);
  } else {

  }
#line 158
  if ((8 <= 64 && size > (size_t )128) && size <= (size_t )192) {
#line 159
    return (2);
  } else {

  }
#line 160
  if (size <= (size_t )8) {
#line 160
    return (3);
  } else {

  }
#line 161
  if (size <= (size_t )16) {
#line 161
    return (4);
  } else {

  }
#line 162
  if (size <= (size_t )32) {
#line 162
    return (5);
  } else {

  }
#line 163
  if (size <= (size_t )64) {
#line 163
    return (6);
  } else {

  }
#line 164
  if (size <= (size_t )128) {
#line 164
    return (7);
  } else {

  }
#line 165
  if (size <= (size_t )256) {
#line 165
    return (8);
  } else {

  }
#line 166
  if (size <= (size_t )512) {
#line 166
    return (9);
  } else {

  }
#line 167
  if (size <= (size_t )1024) {
#line 167
    return (10);
  } else {

  }
#line 168
  if (size <= (size_t )(2 * 1024)) {
#line 168
    return (11);
  } else {

  }
#line 169
  if (size <= (size_t )(4 * 1024)) {
#line 169
    return (12);
  } else {

  }
#line 174
  if (size <= (size_t )(8 * 1024)) {
#line 174
    return (13);
  } else {

  }
#line 175
  if (size <= (size_t )(16 * 1024)) {
#line 175
    return (14);
  } else {

  }
#line 176
  if (size <= (size_t )(32 * 1024)) {
#line 176
    return (15);
  } else {

  }
#line 177
  if (size <= (size_t )(64 * 1024)) {
#line 177
    return (16);
  } else {

  }
#line 178
  if (size <= (size_t )(128 * 1024)) {
#line 178
    return (17);
  } else {

  }
#line 179
  if (size <= (size_t )(256 * 1024)) {
#line 179
    return (18);
  } else {

  }
#line 180
  if (size <= (size_t )(512 * 1024)) {
#line 180
    return (19);
  } else {

  }
#line 181
  if (size <= (size_t )(1024 * 1024)) {
#line 181
    return (20);
  } else {

  }
#line 182
  if (size <= (size_t )((2 * 1024) * 1024)) {
#line 182
    return (21);
  } else {

  }
#line 183
  return (-1);
}
}
#line 200 "include/linux/slub_def.h"
__inline static struct kmem_cache *( __attribute__((__always_inline__)) kmalloc_slab)(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 202
  tmp = kmalloc_index(size);
#line 202
  index = tmp;
#line 204
  if (index == 0) {
#line 205
    return ((void *)0);
  } else {

  }
#line 207
  return (& kmalloc_caches[index]);
}
}
#line 217
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 218
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 223 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmem_cache_alloc_notrace)(struct kmem_cache *s ,
                                                                                     gfp_t gfpflags ) 
{ 
  void *tmp ;

  {
#line 226
  tmp = kmem_cache_alloc(s, gfpflags);
#line 226
  return (tmp);
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc_large)(size_t size ,
                                                                          gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc(ret, size, 1, flags);
#line 236
  trace_kmalloc((unsigned long )((void *)0), ret, size, (1UL << 12) << order, flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 2UL * (1UL << 12)) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if (! (flags & 1U)) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if (! s) {
#line 253
        return ((void *)16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), ret, size, s->size, flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 68 "include/linux/module.h"
int init_module(void) ;
#line 69
void cleanup_module(void) ;
#line 88
extern struct module __this_module ;
#line 145 "include/linux/device.h"
extern void driver_unregister(struct device_driver *drv ) ;
#line 433 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 435
  tmp = kobject_name(& dev->kobj);
#line 435
  return (tmp);
}
}
#line 494
extern void *dev_get_drvdata(struct device  const  *dev ) ;
#line 495
extern void dev_set_drvdata(struct device *dev , void *data ) ;
#line 575
extern char const   *dev_driver_string(struct device  const  *dev ) ;
#line 189 "include/linux/spi/spi.h"
extern int spi_register_driver(struct spi_driver *sdrv ) ;
#line 196 "include/linux/spi/spi.h"
__inline static void spi_unregister_driver(struct spi_driver *sdrv ) 
{ 


  {
#line 198
  if (sdrv) {
#line 199
    driver_unregister(& sdrv->driver);
  } else {

  }
#line 200
  return;
}
}
#line 497 "include/linux/spi/spi.h"
__inline static void spi_message_init(struct spi_message *m ) 
{ 


  {
#line 499
  memset(m, 0, sizeof(*m));
#line 500
  INIT_LIST_HEAD(& m->transfers);
#line 501
  return;
}
}
#line 503 "include/linux/spi/spi.h"
__inline static void spi_message_add_tail(struct spi_transfer *t , struct spi_message *m ) 
{ 


  {
#line 506
  list_add_tail(& t->transfer_list, & m->transfers);
#line 507
  return;
}
}
#line 542
extern int spi_setup(struct spi_device *spi ) ;
#line 552
extern int spi_sync(struct spi_device *spi , struct spi_message *message ) ;
#line 80 "include/linux/lcd.h"
extern struct lcd_device *lcd_device_register(char const   *name , struct device *parent ,
                                              void *devdata , struct lcd_ops *ops ) ;
#line 82
extern void lcd_device_unregister(struct lcd_device *ld ) ;
#line 86 "include/linux/lcd.h"
__inline static void *lcd_get_data(struct lcd_device *ld_dev ) 
{ 
  void *tmp ;

  {
#line 88
  tmp = dev_get_drvdata(& ld_dev->dev);
#line 88
  return (tmp);
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_panel_reset[5]  = {      (0 << 30) | 1,      (0 << 30) | 0,      (0 << 30) | 0,      (0 << 30) | 0, 
        -1};
#line 58 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_panel_on[5]  = {      (0 << 30) | 41,      (((((2 << 30) | (184 << 18)) | 131072) | (255 << 9)) | 256) | 249,      (0 << 30) | 17,      (((1 << 30) | (176 << 9)) | 256) | 22, 
        -1};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_panel_off[5]  = {      (0 << 30) | 40,      (((((2 << 30) | (184 << 18)) | 131072) | (128 << 9)) | 256) | 2,      (0 << 30) | 16,      (((1 << 30) | (176 << 9)) | 256) | 0, 
        -1};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_vga_pass_through_tdo24m[6]  = {      (((1 << 30) | (176 << 9)) | 256) | 22,      (((1 << 30) | (188 << 9)) | 256) | 128,      (((1 << 30) | (225 << 9)) | 256) | 0,      (((1 << 30) | (54 << 9)) | 256) | 80, 
        (((1 << 30) | (59 << 9)) | 256) | 0,      -1};
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_qvga_pass_through_tdo24m[6]  = {      (((1 << 30) | (176 << 9)) | 256) | 22,      (((1 << 30) | (188 << 9)) | 256) | 129,      (((1 << 30) | (225 << 9)) | 256) | 0,      (((1 << 30) | (54 << 9)) | 256) | 80, 
        (((1 << 30) | (59 << 9)) | 256) | 34,      -1};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_vga_transfer_tdo24m[10]  = 
#line 92
  {      (((1 << 30) | (207 << 9)) | 256) | 2,      (((((2 << 30) | (208 << 18)) | 131072) | (8 << 9)) | 256) | 4,      (((1 << 30) | (209 << 9)) | 256) | 1,      (((((2 << 30) | (210 << 18)) | 131072) | (20 << 9)) | 256) | 0, 
        (((((2 << 30) | (211 << 18)) | 131072) | (26 << 9)) | 256) | 15,      (((((2 << 30) | (212 << 18)) | 131072) | (31 << 9)) | 256) | 175,      (((1 << 30) | (213 << 9)) | 256) | 20,      (0 << 30) | 33, 
        (0 << 30) | 41,      -1};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_qvga_transfer[10]  = 
#line 105
  {      (((1 << 30) | (214 << 9)) | 256) | 2,      (((((2 << 30) | (215 << 18)) | 131072) | (8 << 9)) | 256) | 4,      (((1 << 30) | (216 << 9)) | 256) | 1,      (((((2 << 30) | (217 << 18)) | 131072) | (0 << 9)) | 256) | 8, 
        (((((2 << 30) | (222 << 18)) | 131072) | (5 << 9)) | 256) | 10,      (((((2 << 30) | (223 << 18)) | 131072) | (10 << 9)) | 256) | 25,      (((1 << 30) | (224 << 9)) | 256) | 10,      (0 << 30) | 33, 
        (0 << 30) | 41,      -1};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_vga_pass_through_tdo35s[5]  = {      (((1 << 30) | (176 << 9)) | 256) | 22,      (((1 << 30) | (188 << 9)) | 256) | 128,      (((1 << 30) | (225 << 9)) | 256) | 0,      (((1 << 30) | (59 << 9)) | 256) | 0, 
        -1};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_qvga_pass_through_tdo35s[5]  = {      (((1 << 30) | (176 << 9)) | 256) | 22,      (((1 << 30) | (188 << 9)) | 256) | 129,      (((1 << 30) | (225 << 9)) | 256) | 0,      (((1 << 30) | (59 << 9)) | 256) | 34, 
        -1};
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_vga_transfer_tdo35s[10]  = 
#line 134
  {      (((1 << 30) | (207 << 9)) | 256) | 2,      (((((2 << 30) | (208 << 18)) | 131072) | (8 << 9)) | 256) | 4,      (((1 << 30) | (209 << 9)) | 256) | 1,      (((((2 << 30) | (210 << 18)) | 131072) | (0 << 9)) | 256) | 30, 
        (((((2 << 30) | (211 << 18)) | 131072) | (20 << 9)) | 256) | 40,      (((((2 << 30) | (212 << 18)) | 131072) | (40 << 9)) | 256) | 100,      (((1 << 30) | (213 << 9)) | 256) | 40,      (0 << 30) | 33, 
        (0 << 30) | 41,      -1};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static uint32_t lcd_panel_config[28]  = 
#line 147
  {      (((((2 << 30) | (184 << 18)) | 131072) | (255 << 9)) | 256) | 249,      (0 << 30) | 17,      (((1 << 30) | (186 << 9)) | 256) | 1,      (((1 << 30) | (187 << 9)) | 256) | 0, 
        (((1 << 30) | (58 << 9)) | 256) | 96,      (((1 << 30) | (191 << 9)) | 256) | 16,      (((1 << 30) | (177 << 9)) | 256) | 86,      (((1 << 30) | (178 << 9)) | 256) | 51, 
        (((1 << 30) | (179 << 9)) | 256) | 17,      (((1 << 30) | (180 << 9)) | 256) | 2,      (((1 << 30) | (181 << 9)) | 256) | 53,      (((1 << 30) | (182 << 9)) | 256) | 64, 
        (((1 << 30) | (183 << 9)) | 256) | 3,      (((1 << 30) | (189 << 9)) | 256) | 0,      (((1 << 30) | (190 << 9)) | 256) | 0,      (((1 << 30) | (192 << 9)) | 256) | 17, 
        (((1 << 30) | (193 << 9)) | 256) | 17,      (((1 << 30) | (194 << 9)) | 256) | 17,      (((((2 << 30) | (195 << 18)) | 131072) | (32 << 9)) | 256) | 64,      (((((2 << 30) | (196 << 18)) | 131072) | (96 << 9)) | 256) | 192, 
        (((((2 << 30) | (197 << 18)) | 131072) | (16 << 9)) | 256) | 32,      (((1 << 30) | (198 << 9)) | 256) | 192,      (((((2 << 30) | (199 << 18)) | 131072) | (51 << 9)) | 256) | 67,      (((1 << 30) | (200 << 9)) | 256) | 68, 
        (((1 << 30) | (201 << 9)) | 256) | 51,      (((1 << 30) | (202 << 9)) | 256) | 0,      (((((2 << 30) | (236 << 18)) | 131072) | (1 << 9)) | 256) | 240,      -1};
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_writes(struct tdo24m *lcd , uint32_t *array ) 
{ 
  struct spi_transfer *x ;
  uint32_t data ;
  uint32_t *p ;
  int nparams ;
  int err ;

  {
#line 180
  x = & lcd->xfer;
#line 181
  p = array;
#line 182
  err = 0;
#line 184
  while (1) {
#line 184
    if (*p != (uint32_t )-1) {

    } else {
#line 184
      break;
    }
#line 185
    if (! lcd->color_invert && *p == (uint32_t )((0 << 30) | 33)) {
#line 186
      goto __Cont;
    } else {

    }
#line 188
    nparams = (*p >> 30) & 3U;
#line 190
    data = *p << (7 - nparams);
#line 191
    switch (nparams) {
    case 0: 
#line 193
    *(lcd->buf + 0) = (data >> 8) & 255U;
#line 194
    *(lcd->buf + 1) = data & 255U;
#line 195
    break;
    case 1: 
#line 197
    *(lcd->buf + 0) = (data >> 16) & 255U;
#line 198
    *(lcd->buf + 1) = (data >> 8) & 255U;
#line 199
    *(lcd->buf + 2) = data & 255U;
#line 200
    break;
    case 2: 
#line 202
    *(lcd->buf + 0) = (data >> 24) & 255U;
#line 203
    *(lcd->buf + 1) = (data >> 16) & 255U;
#line 204
    *(lcd->buf + 2) = (data >> 8) & 255U;
#line 205
    *(lcd->buf + 3) = data & 255U;
#line 206
    break;
    default: 
#line 208
    goto __Cont;
    }
#line 210
    x->len = nparams + 2;
#line 211
    err = spi_sync(lcd->spi_dev, & lcd->msg);
#line 212
    if (err) {
#line 213
      break;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 184
    p = p + 1;
  }
#line 216
  return (err);
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_adj_mode(struct tdo24m *lcd , int mode ) 
{ 


  {
#line 221
  switch (mode) {
  case 1: 
#line 223
  tdo24m_writes(lcd, lcd_vga_pass_through_tdo24m);
#line 224
  tdo24m_writes(lcd, lcd_panel_config);
#line 225
  tdo24m_writes(lcd, lcd_vga_transfer_tdo24m);
#line 226
  break;
  case 0: 
#line 228
  tdo24m_writes(lcd, lcd_qvga_pass_through_tdo24m);
#line 229
  tdo24m_writes(lcd, lcd_panel_config);
#line 230
  tdo24m_writes(lcd, lcd_qvga_transfer);
#line 231
  break;
  default: 
#line 233
  return (-22);
  }
#line 236
  lcd->mode = mode;
#line 237
  return (0);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo35s_adj_mode(struct tdo24m *lcd , int mode ) 
{ 


  {
#line 242
  switch (mode) {
  case 1: 
#line 244
  tdo24m_writes(lcd, lcd_vga_pass_through_tdo35s);
#line 245
  tdo24m_writes(lcd, lcd_panel_config);
#line 246
  tdo24m_writes(lcd, lcd_vga_transfer_tdo35s);
#line 247
  break;
  case 0: 
#line 249
  tdo24m_writes(lcd, lcd_qvga_pass_through_tdo35s);
#line 250
  tdo24m_writes(lcd, lcd_panel_config);
#line 251
  tdo24m_writes(lcd, lcd_qvga_transfer);
#line 252
  break;
  default: 
#line 254
  return (-22);
  }
#line 257
  lcd->mode = mode;
#line 258
  return (0);
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_power_on(struct tdo24m *lcd ) 
{ 
  int err ;

  {
#line 265
  err = tdo24m_writes(lcd, lcd_panel_on);
#line 266
  if (err) {
#line 267
    goto out;
  } else {

  }
#line 269
  err = tdo24m_writes(lcd, lcd_panel_reset);
#line 270
  if (err) {
#line 271
    goto out;
  } else {

  }
#line 273
  err = (*(lcd->adj_mode))(lcd, lcd->mode);
  out: 
#line 275
  return (err);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_power_off(struct tdo24m *lcd ) 
{ 
  int tmp ;

  {
#line 280
  tmp = tdo24m_writes(lcd, lcd_panel_off);
#line 280
  return (tmp);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_power(struct tdo24m *lcd , int power ) 
{ 
  int ret ;

  {
#line 285
  ret = 0;
#line 287
  if (power <= FB_BLANK_NORMAL && ! (lcd->power <= FB_BLANK_NORMAL)) {
#line 288
    ret = tdo24m_power_on(lcd);
  } else
#line 289
  if (! (power <= FB_BLANK_NORMAL) && lcd->power <= FB_BLANK_NORMAL) {
#line 290
    ret = tdo24m_power_off(lcd);
  } else {

  }
#line 292
  if (! ret) {
#line 293
    lcd->power = power;
  } else {

  }
#line 295
  return (ret);
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_set_power(struct lcd_device *ld , int power ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;
  int tmp___0 ;

  {
#line 301
  tmp = lcd_get_data(ld);
#line 301
  lcd = tmp;
#line 302
  tmp___0 = tdo24m_power(lcd, power);
#line 302
  return (tmp___0);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_get_power(struct lcd_device *ld ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;

  {
#line 307
  tmp = lcd_get_data(ld);
#line 307
  lcd = tmp;
#line 308
  return (lcd->power);
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_set_mode(struct lcd_device *ld , struct fb_videomode *m ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;
  int mode ;
  int tmp___0 ;

  {
#line 313
  tmp = lcd_get_data(ld);
#line 313
  lcd = tmp;
#line 314
  mode = 0;
#line 316
  if (m->xres == (u32 )640 || m->xres == (u32 )480) {
#line 317
    mode = 1;
  } else {

  }
#line 319
  if (lcd->mode == mode) {
#line 320
    return (0);
  } else {

  }
#line 322
  tmp___0 = (*(lcd->adj_mode))(lcd, mode);
#line 322
  return (tmp___0);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static struct lcd_ops tdo24m_ops  =    {& tdo24m_get_power, & tdo24m_set_power, 0, 0, & tdo24m_set_mode, 0};
#line 331
static int tdo24m_probe(struct spi_device *spi )  __attribute__((__section__(".devinit.text"))) ;
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_probe(struct spi_device *spi ) 
{ 
  struct tdo24m *lcd ;
  struct spi_message *m ;
  struct spi_transfer *x ;
  struct tdo24m_platform_data *pdata ;
  enum tdo24m_model model ;
  int err ;
  void *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
#line 340
  pdata = spi->dev.platform_data;
#line 341
  if (pdata) {
#line 342
    model = pdata->model;
  } else {
#line 344
    model = TDO24M;
  }
#line 346
  spi->bits_per_word = 8;
#line 347
  spi->mode = 2 | 1;
#line 348
  err = spi_setup(spi);
#line 349
  if (err) {
#line 350
    return (err);
  } else {

  }
#line 352
  tmp = kzalloc(sizeof(struct tdo24m ), (16U | 64U) | 128U);
#line 352
  lcd = tmp;
#line 353
  if (! lcd) {
#line 354
    return (-12);
  } else {

  }
#line 356
  lcd->spi_dev = spi;
#line 357
  lcd->power = FB_BLANK_POWERDOWN;
#line 358
  lcd->mode = 1;
#line 360
  tmp___0 = kmalloc(4, (16U | 64U) | 128U);
#line 360
  lcd->buf = tmp___0;
#line 361
  if ((unsigned long )lcd->buf == (unsigned long )((void *)0)) {
#line 362
    kfree(lcd);
#line 363
    return (-12);
  } else {

  }
#line 366
  m = & lcd->msg;
#line 367
  x = & lcd->xfer;
#line 369
  spi_message_init(m);
#line 371
  x->cs_change = 1;
#line 372
  x->tx_buf = lcd->buf + 0;
#line 373
  spi_message_add_tail(x, m);
#line 375
  switch ((unsigned int )model) {
  case (unsigned int )TDO24M: 
#line 377
  lcd->color_invert = 1;
#line 378
  lcd->adj_mode = & tdo24m_adj_mode;
#line 379
  break;
  case (unsigned int )TDO35S: 
#line 381
  lcd->adj_mode = & tdo35s_adj_mode;
#line 382
  lcd->color_invert = 0;
#line 383
  break;
  default: 
#line 385
  tmp___1 = dev_name(& spi->dev);
#line 385
  tmp___2 = dev_driver_string(& spi->dev);
#line 385
  printk("<3>%s %s: Unsupported model", tmp___2, tmp___1);
#line 386
  goto out_free;
  }
#line 389
  lcd->lcd_dev = lcd_device_register("tdo24m", & spi->dev, lcd, & tdo24m_ops);
#line 391
  tmp___4 = IS_ERR(lcd->lcd_dev);
#line 391
  if (tmp___4) {
#line 392
    tmp___3 = PTR_ERR(lcd->lcd_dev);
#line 392
    err = tmp___3;
#line 393
    goto out_free;
  } else {

  }
#line 396
  dev_set_drvdata(& spi->dev, lcd);
#line 397
  err = tdo24m_power(lcd, FB_BLANK_UNBLANK);
#line 398
  if (err) {
#line 399
    goto out_unregister;
  } else {

  }
#line 401
  return (0);
  out_unregister: 
#line 404
  lcd_device_unregister(lcd->lcd_dev);
  out_free: 
#line 406
  kfree(lcd->buf);
#line 407
  kfree(lcd);
#line 408
  return (err);
}
}
#line 411
static int tdo24m_remove(struct spi_device *spi )  __attribute__((__section__(".devexit.text"))) ;
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_remove(struct spi_device *spi ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;

  {
#line 413
  tmp = dev_get_drvdata(& spi->dev);
#line 413
  lcd = tmp;
#line 415
  tdo24m_power(lcd, FB_BLANK_POWERDOWN);
#line 416
  lcd_device_unregister(lcd->lcd_dev);
#line 417
  kfree(lcd->buf);
#line 418
  kfree(lcd);
#line 420
  return (0);
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_suspend(struct spi_device *spi , pm_message_t state ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;
  int tmp___0 ;

  {
#line 426
  tmp = dev_get_drvdata(& spi->dev);
#line 426
  lcd = tmp;
#line 428
  tmp___0 = tdo24m_power(lcd, FB_BLANK_POWERDOWN);
#line 428
  return (tmp___0);
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_resume(struct spi_device *spi ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;
  int tmp___0 ;

  {
#line 433
  tmp = dev_get_drvdata(& spi->dev);
#line 433
  lcd = tmp;
#line 435
  tmp___0 = tdo24m_power(lcd, FB_BLANK_UNBLANK);
#line 435
  return (tmp___0);
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static void tdo24m_shutdown(struct spi_device *spi ) 
{ 
  struct tdo24m *lcd ;
  void *tmp ;

  {
#line 445
  tmp = dev_get_drvdata(& spi->dev);
#line 445
  lcd = tmp;
#line 447
  tdo24m_power(lcd, FB_BLANK_POWERDOWN);
#line 448
  return;
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static struct spi_driver tdo24m_driver  =    {0, & tdo24m_probe, & tdo24m_remove, & tdo24m_shutdown, & tdo24m_suspend, & tdo24m_resume,
    {"tdo24m", 0, & __this_module, 0, (_Bool)0, 0, 0, 0, 0, 0, 0, 0, 0}};
#line 462
static int tdo24m_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int tdo24m_init(void) 
{ 
  int tmp ;

  {
#line 464
  tmp = spi_register_driver(& tdo24m_driver);
#line 464
  return (tmp);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 466
  tmp = tdo24m_init();
#line 466
  return (tmp);
}
}
#line 468
static void tdo24m_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static void tdo24m_exit(void) 
{ 


  {
#line 470
  spi_unregister_driver(& tdo24m_driver);
#line 471
  return;
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
void cleanup_module(void) 
{ 


  {
#line 472
  tdo24m_exit();
#line 472
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static char const   __mod_author474[41]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 474
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'E', 
        'r',      'i',      'c',      ' ', 
        'M',      'i',      'a',      'o', 
        ' ',      '<',      'e',      'r', 
        'i',      'c',      '.',      'm', 
        'i',      'a',      'o',      '@', 
        'm',      'a',      'r',      'v', 
        'e',      'l',      'l',      '.', 
        'c',      'o',      'm',      '>', 
        '\000'};
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static char const   __mod_description475[48]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 475
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'D',      'r',      'i',      'v', 
        'e',      'r',      ' ',      'f', 
        'o',      'r',      ' ',      'T', 
        'o',      'p',      'p',      'o', 
        'l',      'y',      ' ',      'T', 
        'D',      'O',      '2',      '4', 
        'M',      ' ',      'L',      'C', 
        'D',      ' ',      'P',      'a', 
        'n',      'e',      'l',      '\000'};
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static char const   __mod_license476[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 476
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static char const   __mod_alias477[17]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 477
  {      'a',      'l',      'i',      'a', 
        's',      '=',      's',      'p', 
        'i',      ':',      't',      'd', 
        'o',      '2',      '4',      'm', 
        '\000'};
#line 495
void ldv_check_final_state(void) ;
#line 498
extern void ldv_check_return_value(int res ) ;
#line 501
extern void ldv_check_return_value_probe(int res ) ;
#line 504
extern void ldv_initialize(void) ;
#line 507
extern void ldv_handler_precall(void) ;
#line 510
extern int nondet_int(void) ;
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
int LDV_IN_INTERRUPT  ;
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
static int res_tdo24m_probe_9  ;
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/backlight/tdo24m.c"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct lcd_device *var_group1 ;
  int var_tdo24m_set_power_6_p1 ;
  struct fb_videomode *var_group2 ;
  struct spi_device *var_group3 ;
  pm_message_t var_tdo24m_suspend_11_p1 ;
  int tmp ;
  int ldv_s_tdo24m_driver_spi_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 694
  LDV_IN_INTERRUPT = 1;
#line 703
  ldv_initialize();
#line 724
  ldv_handler_precall();
#line 725
  tmp = tdo24m_init();
#line 725
  if (tmp) {
#line 726
    goto ldv_final;
  } else {

  }
#line 729
  ldv_s_tdo24m_driver_spi_driver = 0;
#line 733
  while (1) {
#line 733
    tmp___1 = nondet_int();
#line 733
    if (tmp___1 || ! (ldv_s_tdo24m_driver_spi_driver == 0)) {

    } else {
#line 733
      break;
    }
#line 737
    tmp___0 = nondet_int();
#line 737
    switch (tmp___0) {
    case 0: 
#line 757
    ldv_handler_precall();
#line 758
    tdo24m_get_power(var_group1);
#line 772
    break;
    case 1: 
#line 791
    ldv_handler_precall();
#line 792
    tdo24m_set_power(var_group1, var_tdo24m_set_power_6_p1);
#line 806
    break;
    case 2: 
#line 825
    ldv_handler_precall();
#line 826
    tdo24m_set_mode(var_group1, var_group2);
#line 840
    break;
    case 3: 
#line 844
    if (ldv_s_tdo24m_driver_spi_driver == 0) {
#line 859
      res_tdo24m_probe_9 = tdo24m_probe(var_group3);
#line 860
      ldv_check_return_value(res_tdo24m_probe_9);
#line 861
      ldv_check_return_value_probe(res_tdo24m_probe_9);
#line 862
      if (res_tdo24m_probe_9) {
#line 863
        goto ldv_module_exit;
      } else {

      }
#line 871
      ldv_s_tdo24m_driver_spi_driver = ldv_s_tdo24m_driver_spi_driver + 1;
    } else {

    }
#line 877
    break;
    case 4: 
#line 881
    if (ldv_s_tdo24m_driver_spi_driver == 1) {
#line 896
      ldv_handler_precall();
#line 897
      tdo24m_remove(var_group3);
#line 905
      ldv_s_tdo24m_driver_spi_driver = 0;
    } else {

    }
#line 911
    break;
    case 5: 
#line 935
    ldv_handler_precall();
#line 936
    tdo24m_shutdown(var_group3);
#line 943
    break;
    case 6: 
#line 963
    ldv_handler_precall();
#line 964
    tdo24m_suspend(var_group3, var_tdo24m_suspend_11_p1);
#line 977
    break;
    case 7: 
#line 997
    ldv_handler_precall();
#line 998
    tdo24m_resume(var_group3);
#line 1011
    break;
    default: 
#line 1012
    break;
    }
  }
  ldv_module_exit: 
#line 1039
  ldv_handler_precall();
#line 1040
  tdo24m_exit();
  ldv_final: 
#line 1043
  ldv_check_final_state();
#line 1046
  return;
}
}
#line 136 "include/linux/mutex.h"
void mutex_lock(struct mutex *lock ) ;
#line 137
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) ;
#line 138
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) ;
#line 151
int mutex_trylock(struct mutex *lock ) ;
#line 152
void mutex_unlock(struct mutex *lock ) ;
#line 153
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ldv_mutex  =    1;
#line 18 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 25
  if (ldv_mutex == 1) {

  } else {
#line 25
    ldv_error();
  }
#line 28
  nondetermined = ldv_undef_int();
#line 31
  if (nondetermined) {
#line 34
    ldv_mutex = 2;
#line 36
    return (0);
  } else {
#line 41
    return (-4);
  }
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 53
  if (ldv_mutex == 1) {

  } else {
#line 53
    ldv_error();
  }
#line 56
  nondetermined = ldv_undef_int();
#line 59
  if (nondetermined) {
#line 62
    ldv_mutex = 2;
#line 64
    return (0);
  } else {
#line 69
    return (-4);
  }
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 79
  if (ldv_mutex == 1) {

  } else {
#line 79
    ldv_error();
  }
#line 82
  atomic_value_after_dec = ldv_undef_int();
#line 85
  if (atomic_value_after_dec == 0) {
#line 88
    ldv_mutex = 2;
#line 90
    return (1);
  } else {

  }
#line 94
  return (0);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_lock(struct mutex *lock ) 
{ 


  {
#line 104
  if (ldv_mutex == 1) {

  } else {
#line 104
    ldv_error();
  }
#line 106
  ldv_mutex = 2;
#line 107
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int mutex_trylock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 117
  if (ldv_mutex == 1) {

  } else {
#line 117
    ldv_error();
  }
#line 120
  nondetermined = ldv_undef_int();
#line 123
  if (nondetermined) {
#line 126
    ldv_mutex = 2;
#line 128
    return (1);
  } else {
#line 133
    return (0);
  }
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_unlock(struct mutex *lock ) 
{ 


  {
#line 143
  if (ldv_mutex == 2) {

  } else {
#line 143
    ldv_error();
  }
#line 145
  ldv_mutex = 1;
#line 146
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/video/backlight/tdo24m.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 152
  if (ldv_mutex == 1) {

  } else {
#line 152
    ldv_error();
  }
#line 153
  return;
}
}
