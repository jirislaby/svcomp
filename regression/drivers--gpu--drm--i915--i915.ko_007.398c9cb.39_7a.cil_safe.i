/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 22 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 120 "include/linux/types.h"
typedef __u32 uint32_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 195 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 200 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 58 "include/asm/alternative.h"
struct module;
#line 37 "include/linux/dynamic_printk.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "include/linux/kernel.h"
struct completion;
#line 103
struct pt_regs;
#line 191
struct pid;
#line 479
struct timespec;
#line 480
struct compat_timespec;
#line 481 "include/linux/kernel.h"
struct __anonstruct_ldv_1546_4 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 481 "include/linux/kernel.h"
struct __anonstruct_futex_5 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 481 "include/linux/kernel.h"
struct __anonstruct_nanosleep_6 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 481 "include/linux/kernel.h"
union __anonunion_ldv_1560_3 {
   struct __anonstruct_ldv_1546_4 ldv_1546 ;
   struct __anonstruct_futex_5 futex ;
   struct __anonstruct_nanosleep_6 nanosleep ;
};
#line 481 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1560_3 ldv_1560 ;
};
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "include/asm/page.h"
struct __anonstruct_pgd_t_8 {
   pgdval_t pgd ;
};
#line 56 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_8 pgd_t;
#line 57 "include/asm/page.h"
struct __anonstruct_pgprot_t_9 {
   pgprotval_t pgprot ;
};
#line 57 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_9 pgprot_t;
#line 154 "include/asm/page.h"
struct __anonstruct_ldv_1672_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 154 "include/asm/page.h"
struct __anonstruct_ldv_1687_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 154 "include/asm/page.h"
union __anonunion_ldv_1688_12 {
   struct __anonstruct_ldv_1672_13 ldv_1672 ;
   struct __anonstruct_ldv_1687_14 ldv_1687 ;
};
#line 154 "include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1688_12 ldv_1688 ;
};
#line 141 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_15 {
   unsigned long bits[1U] ;
};
#line 141 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_15 cpumask_t;
#line 522
struct thread_struct;
#line 524
struct mm_struct;
#line 324 "include/asm/paravirt.h"
struct raw_spinlock;
#line 21 "include/asm-generic/page.h"
struct task_struct;
#line 22
struct exec_domain;
#line 50 "include/asm/ds.h"
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
#line 203 "include/asm/ds.h"
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2U] ;
   ds_ovfl_callback_t callback[2U] ;
   void *buffer[2U] ;
   unsigned int pages[2U] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
#line 206 "include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 282 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "include/asm/processor.h"
struct __anonstruct_ldv_4477_20 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "include/asm/processor.h"
struct __anonstruct_ldv_4483_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "include/asm/processor.h"
union __anonunion_ldv_4484_19 {
   struct __anonstruct_ldv_4477_20 ldv_4477 ;
   struct __anonstruct_ldv_4483_21 ldv_4483 ;
};
#line 300 "include/asm/processor.h"
union __anonunion_ldv_4493_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4484_19 ldv_4484 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4493_22 ldv_4493 ;
};
#line 334 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 355 "include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 366 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 386 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 591 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_23 {
   unsigned long seg ;
};
#line 591 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_23 mm_segment_t;
#line 935 "include/asm/processor.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 9 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_24 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_24 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 31 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 156 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 192 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_25 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_25 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_26 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_26 rwlock_t;
#line 21 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_27 {
   int counter ;
};
#line 21 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_27 atomic_t;
#line 198 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_28 {
   long counter ;
};
#line 198 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_28 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 211 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_30 {
   unsigned long bits[1U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_30 nodemask_t;
#line 550 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 150
struct rw_semaphore;
#line 152 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 660 "include/linux/mmzone.h"
struct file;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 155 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 212
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 222 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_77 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_77 mm_context_t;
#line 236 "include/asm/topology.h"
struct pci_bus;
#line 992 "include/linux/mmzone.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 404
struct kobject;
#line 405 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 39 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 74 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 80
struct sysfs_dirent;
#line 130 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 103 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 109 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 116 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 133 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 192 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 15 "include/asm/tsc.h"
typedef unsigned long long cycles_t;
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 189
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 262 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 12 "include/asm/local.h"
struct __anonstruct_local_t_88 {
   atomic_long_t a ;
};
#line 12 "include/asm/local.h"
typedef struct __anonstruct_local_t_88 local_t;
#line 155 "include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 67
struct exception_table_entry;
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230
struct module_param_attrs;
#line 230
struct module_sect_attrs;
#line 230
struct module_notes_attrs;
#line 230 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8U] ;
};
#line 455
struct device_driver;
#line 576
struct file_operations;
#line 89 "include/linux/kdev_t.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_89 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_89 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 367 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
struct prio_tree_node;
#line 191 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 519 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 36 "include/linux/fiemap.h"
struct export_operations;
#line 38
struct iovec;
#line 39
struct kiocb;
#line 40
struct pipe_inode_info;
#line 41
struct poll_table_struct;
#line 42
struct kstatfs;
#line 322 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 372 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 109 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 142 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 199
struct quota_format_type;
#line 200 "include/linux/quota.h"
union __anonunion_u_91 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 200 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_91 u ;
};
#line 245 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 268 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 284 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 300 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 315 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 352
struct address_space;
#line 353
struct writeback_control;
#line 468 "include/linux/fs.h"
union __anonunion_arg_93 {
   char *buf ;
   void *data ;
};
#line 468 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_92 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_93 arg ;
   int error ;
};
#line 468 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_92 read_descriptor_t;
#line 471 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 526
struct backing_dev_info;
#line 527 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 548
struct hd_struct;
#line 548
struct gendisk;
#line 548 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 612
struct inode_operations;
#line 612
struct file_lock;
#line 612
struct cdev;
#line 612 "include/linux/fs.h"
union __anonunion_ldv_10949_94 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 612
struct dnotify_struct;
#line 612 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_10949_94 ldv_10949 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 778 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 786 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 809 "include/linux/fs.h"
union __anonunion_f_u_95 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 809 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_95 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 932
struct files_struct;
#line 932 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 933 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 938 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_97 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_96 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_97 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_96 fl_u ;
};
#line 1041 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1105
struct file_system_type;
#line 1105
struct super_operations;
#line 1105
struct xattr_handler;
#line 1105
struct mtd_info;
#line 1105 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1226 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1283 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1324 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1352
struct seq_file;
#line 1366 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1549 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1926
struct bio;
#line 49 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 51 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 52 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 445 "include/linux/mod_devicetable.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 25 "include/linux/ioport.h"
struct pci_dev;
#line 178
struct klist_node;
#line 179 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 69
struct dma_mapping_ops;
#line 69 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 14 "include/asm/device.h"
struct driver_private;
#line 15
struct class;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 179
struct class_attribute;
#line 179 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 204
struct device_type;
#line 235 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 267 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 296 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 357 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 366
struct dma_coherent_mem;
#line 366 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 537
struct hotplug_slot;
#line 537 "include/linux/device.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 81 "include/linux/pci.h"
typedef int pci_power_t;
#line 95 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 96
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 121 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 131 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 142
struct pcie_link_state;
#line 143
struct pci_vpd;
#line 144
struct pci_driver;
#line 144 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12U] ;
   struct bin_attribute *res_attr_wc[12U] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 263
struct pci_ops;
#line 263 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16U] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 311 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 346 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
   unsigned char use_driver_data : 1 ;
};
#line 360 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 369 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 397 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 89 "include/asm/io.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 786 "include/linux/pci.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_14983_100 {
   u16 inuse ;
   u16 objects ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14984_99 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14983_100 ldv_14983 ;
};
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_14989_102 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14993_101 {
   struct __anonstruct_ldv_14989_102 ldv_14989 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14997_103 {
   unsigned long index ;
   void *freelist ;
};
#line 28 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_14984_99 ldv_14984 ;
   union __anonunion_ldv_14993_101 ldv_14993 ;
   union __anonunion_ldv_14997_103 ldv_14997 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 100 "include/linux/mm_types.h"
struct __anonstruct_vm_set_105 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 100 "include/linux/mm_types.h"
union __anonunion_shared_104 {
   struct __anonstruct_vm_set_105 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 100
struct anon_vma;
#line 100
struct vm_operations_struct;
#line 100
struct mempolicy;
#line 100 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_104 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 163 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 169 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 175
struct kioctx;
#line 175
struct mmu_notifier_mm;
#line 175 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[42U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 262
struct user_struct;
#line 139 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 160 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct page * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 18 "include/asm/dma-mapping.h"
struct dma_mapping_ops {
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_single)(struct device * , phys_addr_t  , size_t  , int  ) ;
   void (*unmap_single)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , int  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , int  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_106 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_106 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 171 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 183 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_108 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_109 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_110 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_111 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_112 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_113 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_107 {
   int _pad[28U] ;
   struct __anonstruct__kill_108 _kill ;
   struct __anonstruct__timer_109 _timer ;
   struct __anonstruct__rt_110 _rt ;
   struct __anonstruct__sigchld_111 _sigchld ;
   struct __anonstruct__sigfault_112 _sigfault ;
   struct __anonstruct__sigpoll_113 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_107 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_116 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_116 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_PERCPU = 3,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 4
} ;
#line 94 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 148 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 176 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 402 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 138 "include/linux/sched.h"
struct cfs_rq;
#line 139
struct task_group;
#line 334
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_117 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_117 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 393 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 419 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 427 "include/linux/sched.h"
union __anonunion_ldv_18436_118 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 427 "include/linux/sched.h"
union __anonunion_ldv_18441_119 {
   pid_t session ;
   pid_t __session ;
};
#line 427
struct tty_struct;
#line 427
struct taskstats;
#line 427
struct tty_audit_buf;
#line 427 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_18436_118 ldv_18436 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_18441_119 ldv_18441 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 577 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 619
struct reclaim_state;
#line 620 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 643 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 684
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 691 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 751
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 765 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 835
struct io_context;
#line 836 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 887
struct audit_context;
#line 889
struct rq;
#line 890 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 941 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 946 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1012
struct rt_rq;
#line 1012 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1028
struct linux_binfmt;
#line 1028
struct css_set;
#line 1028
struct compat_robust_list_head;
#line 1028 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
};
#line 41 "include/linux/smp_lock.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 15 "include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "include/asm/compat.h"
typedef s32 compat_long_t;
#line 41 "include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 149 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 153 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 155 "include/asm/mtrr.h"
enum chipset_type {
    NOT_SUPPORTED = 0,
    SUPPORTED = 1
} ;
#line 160 "include/asm/mtrr.h"
struct agp_version {
   u16 major ;
   u16 minor ;
};
#line 44 "include/linux/agp_backend.h"
struct agp_kern_info {
   struct agp_version version ;
   struct pci_dev *device ;
   enum chipset_type chipset ;
   unsigned long mode ;
   unsigned long aper_base ;
   size_t aper_size ;
   int max_memory ;
   int current_memory ;
   bool cant_use_aperture ;
   unsigned long page_mask ;
   struct vm_operations_struct *vm_ops ;
};
#line 58
struct agp_bridge_data;
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 19 "include/linux/irqreturn.h"
typedef int irqreturn_t;
#line 63 "include/drm/drm.h"
typedef unsigned int drm_handle_t;
#line 65 "include/drm/drm.h"
typedef unsigned int drm_drawable_t;
#line 66 "include/drm/drm.h"
typedef unsigned int drm_magic_t;
#line 91 "include/drm/drm.h"
struct drm_tex_region {
   unsigned char next ;
   unsigned char prev ;
   unsigned char in_use ;
   unsigned char padding ;
   unsigned int age ;
};
#line 102 "include/drm/drm.h"
struct drm_hw_lock {
   unsigned int volatile   lock ;
   char padding[60U] ;
};
#line 165
enum drm_map_type {
    _DRM_FRAME_BUFFER = 0,
    _DRM_REGISTERS = 1,
    _DRM_SHM = 2,
    _DRM_AGP = 3,
    _DRM_SCATTER_GATHER = 4,
    _DRM_CONSISTENT = 5
} ;
#line 174
enum drm_map_flags {
    _DRM_RESTRICTED = 1,
    _DRM_READ_ONLY = 2,
    _DRM_LOCKED = 4,
    _DRM_KERNEL = 8,
    _DRM_WRITE_COMBINING = 16,
    _DRM_CONTAINS_LOCK = 32,
    _DRM_REMOVABLE = 64,
    _DRM_DRIVER = 128
} ;
#line 196 "include/drm/drm.h"
struct drm_map {
   unsigned long offset ;
   unsigned long size ;
   enum drm_map_type type ;
   enum drm_map_flags flags ;
   void *handle ;
   int mtrr ;
};
#line 225
enum drm_stat_type {
    _DRM_STAT_LOCK = 0,
    _DRM_STAT_OPENS = 1,
    _DRM_STAT_CLOSES = 2,
    _DRM_STAT_IOCTLS = 3,
    _DRM_STAT_LOCKS = 4,
    _DRM_STAT_UNLOCKS = 5,
    _DRM_STAT_VALUE = 6,
    _DRM_STAT_BYTE = 7,
    _DRM_STAT_COUNT = 8,
    _DRM_STAT_IRQ = 9,
    _DRM_STAT_PRIMARY = 10,
    _DRM_STAT_SECONDARY = 11,
    _DRM_STAT_DMA = 12,
    _DRM_STAT_SPECIAL = 13,
    _DRM_STAT_MISSED = 14
} ;
#line 390
enum drm_ctx_flags {
    _DRM_CONTEXT_PRESERVED = 1,
    _DRM_CONTEXT_2DONLY = 2
} ;
#line 548 "include/drm/drm.h"
struct drm_set_version {
   int drm_di_major ;
   int drm_di_minor ;
   int drm_dd_major ;
   int drm_dd_minor ;
};
#line 558 "include/drm/drm.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   struct rcu_head rcu_head ;
};
#line 57 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 144
struct drm_file;
#line 145
struct drm_device;
#line 44 "include/drm/drm_hashtab.h"
struct drm_open_hash {
   unsigned int size ;
   unsigned int order ;
   unsigned int fill ;
   struct hlist_head *table ;
   int use_vmalloc ;
};
#line 269 "include/drm/drmP.h"
typedef int drm_ioctl_t(struct drm_device * , void * , struct drm_file * );
#line 273 "include/drm/drmP.h"
struct drm_ioctl_desc {
   unsigned int cmd ;
   drm_ioctl_t *func ;
   int flags ;
};
#line 303
enum ldv_18132 {
    DRM_LIST_NONE = 0,
    DRM_LIST_FREE = 1,
    DRM_LIST_WAIT = 2,
    DRM_LIST_PEND = 3,
    DRM_LIST_PRIO = 4,
    DRM_LIST_RECLAIM = 5
} ;
#line 312 "include/drm/drmP.h"
struct drm_buf {
   int idx ;
   int total ;
   int order ;
   int used ;
   unsigned long offset ;
   void *address ;
   unsigned long bus_address ;
   struct drm_buf *next ;
   int volatile   waiting ;
   int volatile   pending ;
   wait_queue_head_t dma_wait ;
   struct drm_file *file_priv ;
   int context ;
   int while_locked ;
   enum ldv_18132 list ;
   int dev_priv_size ;
   void *dev_private ;
};
#line 334 "include/drm/drmP.h"
struct drm_waitlist {
   int count ;
   struct drm_buf **bufs ;
   struct drm_buf **rp ;
   struct drm_buf **wp ;
   struct drm_buf **end ;
   spinlock_t read_lock ;
   spinlock_t write_lock ;
};
#line 345 "include/drm/drmP.h"
struct drm_freelist {
   int initialized ;
   atomic_t count ;
   struct drm_buf *next ;
   wait_queue_head_t waiting ;
   int low_mark ;
   int high_mark ;
   atomic_t wfh ;
   spinlock_t lock ;
};
#line 357 "include/drm/drmP.h"
struct drm_dma_handle {
   dma_addr_t busaddr ;
   void *vaddr ;
   size_t size ;
};
#line 362 "include/drm/drmP.h"
typedef struct drm_dma_handle drm_dma_handle_t;
#line 363 "include/drm/drmP.h"
struct drm_buf_entry {
   int buf_size ;
   int buf_count ;
   struct drm_buf *buflist ;
   int seg_count ;
   int page_order ;
   struct drm_dma_handle **seglist ;
   struct drm_freelist freelist ;
};
#line 377
struct drm_minor;
#line 377 "include/drm/drmP.h"
struct drm_file {
   int authenticated ;
   int master ;
   pid_t pid ;
   uid_t uid ;
   drm_magic_t magic ;
   unsigned long ioctl_count ;
   struct list_head lhead ;
   struct drm_minor *minor ;
   int remove_auth_on_close ;
   unsigned long lock_count ;
   struct file *filp ;
   void *driver_priv ;
};
#line 393 "include/drm/drmP.h"
struct drm_queue {
   atomic_t use_count ;
   atomic_t finalization ;
   atomic_t block_count ;
   atomic_t block_read ;
   wait_queue_head_t read_queue ;
   atomic_t block_write ;
   wait_queue_head_t write_queue ;
   atomic_t total_queued ;
   atomic_t total_flushed ;
   atomic_t total_locks ;
   enum drm_ctx_flags flags ;
   struct drm_waitlist waitlist ;
   wait_queue_head_t flush_queue ;
};
#line 410 "include/drm/drmP.h"
struct drm_lock_data {
   struct drm_hw_lock *hw_lock ;
   struct drm_file *file_priv ;
   wait_queue_head_t lock_queue ;
   unsigned long lock_time ;
   spinlock_t spinlock ;
   uint32_t kernel_waiters ;
   uint32_t user_waiters ;
   int idle_has_lock ;
};
#line 425
enum ldv_18150 {
    _DRM_DMA_USE_AGP = 1,
    _DRM_DMA_USE_SG = 2,
    _DRM_DMA_USE_FB = 4,
    _DRM_DMA_USE_PCI_RO = 8
} ;
#line 432 "include/drm/drmP.h"
struct drm_device_dma {
   struct drm_buf_entry bufs[23U] ;
   int buf_count ;
   struct drm_buf **buflist ;
   int seg_count ;
   int page_count ;
   unsigned long *pagelist ;
   unsigned long byte_count ;
   enum ldv_18150 flags ;
};
#line 457 "include/drm/drmP.h"
struct drm_agp_head {
   struct agp_kern_info agp_info ;
   struct list_head memory ;
   unsigned long mode ;
   struct agp_bridge_data *bridge ;
   int enabled ;
   int acquired ;
   unsigned long base ;
   int agp_mtrr ;
   int cant_use_aperture ;
   unsigned long page_mask ;
};
#line 475 "include/drm/drmP.h"
struct drm_sg_mem {
   unsigned long handle ;
   void *virtual ;
   int pages ;
   struct page **pagelist ;
   dma_addr_t *busaddr ;
};
#line 486 "include/drm/drmP.h"
struct drm_sigdata {
   int context ;
   struct drm_hw_lock *lock ;
};
#line 523 "include/drm/drmP.h"
typedef struct drm_map drm_local_map_t;
#line 559 "include/drm/drmP.h"
struct drm_driver {
   int (*load)(struct drm_device * , unsigned long  ) ;
   int (*firstopen)(struct drm_device * ) ;
   int (*open)(struct drm_device * , struct drm_file * ) ;
   void (*preclose)(struct drm_device * , struct drm_file * ) ;
   void (*postclose)(struct drm_device * , struct drm_file * ) ;
   void (*lastclose)(struct drm_device * ) ;
   int (*unload)(struct drm_device * ) ;
   int (*suspend)(struct drm_device * , pm_message_t  ) ;
   int (*resume)(struct drm_device * ) ;
   int (*dma_ioctl)(struct drm_device * , void * , struct drm_file * ) ;
   void (*dma_ready)(struct drm_device * ) ;
   int (*dma_quiescent)(struct drm_device * ) ;
   int (*context_ctor)(struct drm_device * , int  ) ;
   int (*context_dtor)(struct drm_device * , int  ) ;
   int (*kernel_context_switch)(struct drm_device * , int  , int  ) ;
   void (*kernel_context_switch_unlock)(struct drm_device * ) ;
   int (*vblank_wait)(struct drm_device * , unsigned int * ) ;
   int (*vblank_wait2)(struct drm_device * , unsigned int * ) ;
   int (*dri_library_name)(struct drm_device * , char * ) ;
   int (*device_is_agp)(struct drm_device * ) ;
   irqreturn_t (*irq_handler)(int  , void * ) ;
   void (*irq_preinstall)(struct drm_device * ) ;
   void (*irq_postinstall)(struct drm_device * ) ;
   void (*irq_uninstall)(struct drm_device * ) ;
   void (*reclaim_buffers)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_locked)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_idlelocked)(struct drm_device * , struct drm_file * ) ;
   unsigned long (*get_map_ofs)(struct drm_map * ) ;
   unsigned long (*get_reg_ofs)(struct drm_device * ) ;
   void (*set_version)(struct drm_device * , struct drm_set_version * ) ;
   int major ;
   int minor ;
   int patchlevel ;
   char *name ;
   char *desc ;
   char *date ;
   u32 driver_features ;
   int dev_priv_size ;
   struct drm_ioctl_desc *ioctls ;
   int num_ioctls ;
   struct file_operations fops ;
   struct pci_driver pci_driver ;
};
#line 631 "include/drm/drmP.h"
struct drm_minor {
   int index ;
   int type ;
   dev_t device ;
   struct device kdev ;
   struct drm_device *dev ;
   struct proc_dir_entry *dev_root ;
};
#line 646 "include/drm/drmP.h"
struct drm_device {
   char *unique ;
   int unique_len ;
   char *devname ;
   int if_version ;
   int blocked ;
   spinlock_t count_lock ;
   struct mutex struct_mutex ;
   int open_count ;
   atomic_t ioctl_count ;
   atomic_t vma_count ;
   int buf_use ;
   atomic_t buf_alloc ;
   unsigned long counters ;
   enum drm_stat_type types[15U] ;
   atomic_t counts[15U] ;
   struct list_head filelist ;
   struct drm_open_hash magiclist ;
   struct list_head magicfree ;
   struct list_head maplist ;
   int map_count ;
   struct drm_open_hash map_hash ;
   struct list_head ctxlist ;
   int ctx_count ;
   struct mutex ctxlist_mutex ;
   struct idr ctx_idr ;
   struct list_head vmalist ;
   struct drm_lock_data lock ;
   int queue_count ;
   int queue_reserved ;
   int queue_slots ;
   struct drm_queue **queuelist ;
   struct drm_device_dma *dma ;
   int irq ;
   int irq_enabled ;
   long volatile   context_flag ;
   long volatile   interrupt_flag ;
   long volatile   dma_flag ;
   struct timer_list timer ;
   wait_queue_head_t context_wait ;
   int last_checked ;
   int last_context ;
   unsigned long last_switch ;
   struct work_struct work ;
   wait_queue_head_t vbl_queue ;
   atomic_t vbl_received ;
   atomic_t vbl_received2 ;
   spinlock_t vbl_lock ;
   struct list_head vbl_sigs ;
   struct list_head vbl_sigs2 ;
   unsigned int vbl_pending ;
   spinlock_t tasklet_lock ;
   void (*locked_tasklet_func)(struct drm_device * ) ;
   cycles_t ctx_start ;
   cycles_t lck_start ;
   struct fasync_struct *buf_async ;
   wait_queue_head_t buf_readers ;
   wait_queue_head_t buf_writers ;
   struct drm_agp_head *agp ;
   struct pci_dev *pdev ;
   int pci_vendor ;
   int pci_device ;
   struct drm_sg_mem *sg ;
   void *dev_private ;
   struct drm_sigdata sigdata ;
   sigset_t sigmask ;
   struct drm_driver *driver ;
   drm_local_map_t *agp_buffer_map ;
   unsigned int agp_buffer_token ;
   struct drm_minor *primary ;
   spinlock_t drw_lock ;
   struct idr drw_idr ;
};
#line 65 "include/drm/i915_drm.h"
struct _drm_i915_sarea {
   struct drm_tex_region texList[256U] ;
   int last_upload ;
   int last_enqueue ;
   int last_dispatch ;
   int ctxOwner ;
   int texAge ;
   int pf_enabled ;
   int pf_active ;
   int pf_current_page ;
   int perf_boxes ;
   int width ;
   int height ;
   drm_handle_t front_handle ;
   int front_offset ;
   int front_size ;
   drm_handle_t back_handle ;
   int back_offset ;
   int back_size ;
   drm_handle_t depth_handle ;
   int depth_offset ;
   int depth_size ;
   drm_handle_t tex_handle ;
   int tex_offset ;
   int tex_size ;
   int log_tex_granularity ;
   int pitch ;
   int rotation ;
   int rotated_offset ;
   int rotated_size ;
   int rotated_pitch ;
   int virtualX ;
   int virtualY ;
   unsigned int front_tiled ;
   unsigned int back_tiled ;
   unsigned int depth_tiled ;
   unsigned int rotated_tiled ;
   unsigned int rotated2_tiled ;
   int pipeA_x ;
   int pipeA_y ;
   int pipeA_w ;
   int pipeA_h ;
   int pipeB_x ;
   int pipeB_y ;
   int pipeB_w ;
   int pipeB_h ;
};
#line 116 "include/drm/i915_drm.h"
typedef struct _drm_i915_sarea drm_i915_sarea_t;
#line 269 "include/drm/i915_drm.h"
struct _drm_i915_ring_buffer {
   int tail_mask ;
   unsigned long Start ;
   unsigned long End ;
   unsigned long Size ;
   u8 *virtual_start ;
   int head ;
   int tail ;
   int space ;
   drm_local_map_t map ;
};
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_ring_buffer drm_i915_ring_buffer_t;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct mem_block {
   struct mem_block *next ;
   struct mem_block *prev ;
   int start ;
   int size ;
   struct drm_file *file_priv ;
};
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct _drm_i915_vbl_swap {
   struct list_head head ;
   drm_drawable_t drw_id ;
   unsigned int pipe ;
   unsigned int sequence ;
};
#line 83 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_vbl_swap drm_i915_vbl_swap_t;
#line 84 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_private {
   drm_local_map_t *sarea ;
   drm_local_map_t *mmio_map ;
   drm_i915_sarea_t *sarea_priv ;
   drm_i915_ring_buffer_t ring ;
   drm_dma_handle_t *status_page_dmah ;
   void *hw_status_page ;
   dma_addr_t dma_status_page ;
   unsigned long counter ;
   unsigned int status_gfx_addr ;
   drm_local_map_t hws_map ;
   unsigned int cpp ;
   int back_offset ;
   int front_offset ;
   int current_page ;
   int page_flipping ;
   wait_queue_head_t irq_queue ;
   atomic_t irq_received ;
   atomic_t irq_emitted ;
   spinlock_t user_irq_lock ;
   int user_irq_refcount ;
   u32 irq_mask_reg ;
   int tex_lru_log_granularity ;
   int allow_batchbuffer ;
   struct mem_block *agp_heap ;
   unsigned int sr01 ;
   unsigned int adpa ;
   unsigned int ppcr ;
   unsigned int dvob ;
   unsigned int dvoc ;
   unsigned int lvds ;
   int vblank_pipe ;
   spinlock_t swaps_lock ;
   drm_i915_vbl_swap_t vbl_swaps ;
   unsigned int swaps_pending ;
   u8 saveLBB ;
   u32 saveDSPACNTR ;
   u32 saveDSPBCNTR ;
   u32 saveDSPARB ;
   u32 savePIPEACONF ;
   u32 savePIPEBCONF ;
   u32 savePIPEASRC ;
   u32 savePIPEBSRC ;
   u32 saveFPA0 ;
   u32 saveFPA1 ;
   u32 saveDPLL_A ;
   u32 saveDPLL_A_MD ;
   u32 saveHTOTAL_A ;
   u32 saveHBLANK_A ;
   u32 saveHSYNC_A ;
   u32 saveVTOTAL_A ;
   u32 saveVBLANK_A ;
   u32 saveVSYNC_A ;
   u32 saveBCLRPAT_A ;
   u32 savePIPEASTAT ;
   u32 saveDSPASTRIDE ;
   u32 saveDSPASIZE ;
   u32 saveDSPAPOS ;
   u32 saveDSPAADDR ;
   u32 saveDSPASURF ;
   u32 saveDSPATILEOFF ;
   u32 savePFIT_PGM_RATIOS ;
   u32 saveBLC_PWM_CTL ;
   u32 saveBLC_PWM_CTL2 ;
   u32 saveFPB0 ;
   u32 saveFPB1 ;
   u32 saveDPLL_B ;
   u32 saveDPLL_B_MD ;
   u32 saveHTOTAL_B ;
   u32 saveHBLANK_B ;
   u32 saveHSYNC_B ;
   u32 saveVTOTAL_B ;
   u32 saveVBLANK_B ;
   u32 saveVSYNC_B ;
   u32 saveBCLRPAT_B ;
   u32 savePIPEBSTAT ;
   u32 saveDSPBSTRIDE ;
   u32 saveDSPBSIZE ;
   u32 saveDSPBPOS ;
   u32 saveDSPBADDR ;
   u32 saveDSPBSURF ;
   u32 saveDSPBTILEOFF ;
   u32 saveVGA0 ;
   u32 saveVGA1 ;
   u32 saveVGA_PD ;
   u32 saveVGACNTRL ;
   u32 saveADPA ;
   u32 saveLVDS ;
   u32 savePP_ON_DELAYS ;
   u32 savePP_OFF_DELAYS ;
   u32 saveDVOA ;
   u32 saveDVOB ;
   u32 saveDVOC ;
   u32 savePP_ON ;
   u32 savePP_OFF ;
   u32 savePP_CONTROL ;
   u32 savePP_DIVISOR ;
   u32 savePFIT_CONTROL ;
   u32 save_palette_a[256U] ;
   u32 save_palette_b[256U] ;
   u32 saveFBC_CFB_BASE ;
   u32 saveFBC_LL_BASE ;
   u32 saveFBC_CONTROL ;
   u32 saveFBC_CONTROL2 ;
   u32 saveIER ;
   u32 saveIIR ;
   u32 saveIMR ;
   u32 saveCACHE_MODE_0 ;
   u32 saveD_STATE ;
   u32 saveCG_2D_DIS ;
   u32 saveMI_ARB_STATE ;
   u32 saveSWF0[16U] ;
   u32 saveSWF1[16U] ;
   u32 saveSWF2[3U] ;
   u8 saveMSR ;
   u8 saveSR[8U] ;
   u8 saveGR[25U] ;
   u8 saveAR_INDEX ;
   u8 saveAR[21U] ;
   u8 saveDACMASK ;
   u8 saveDACDATA[768U] ;
   u8 saveCR[37U] ;
};
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
enum pipe {
    PIPE_A = 0,
    PIPE_B = 1
} ;
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
typedef int ldv_func_ret_type___1;
#line 123 "include/linux/types.h"
typedef __u64 uint64_t;
#line 282 "include/asm/sigcontext.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 220 "include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100U] ;
};
#line 67 "include/drm/drm.h"
struct drm_clip_rect {
   unsigned short x1 ;
   unsigned short y1 ;
   unsigned short x2 ;
   unsigned short y2 ;
};
#line 1145 "include/drm/drmP.h"
enum ldv_18415 {
    I915_INIT_DMA = 1,
    I915_CLEANUP_DMA = 2,
    I915_RESUME_DMA = 3
} ;
#line 1151 "include/drm/drmP.h"
struct _drm_i915_init {
   enum ldv_18415 func ;
   unsigned int mmio_offset ;
   int sarea_priv_offset ;
   unsigned int ring_start ;
   unsigned int ring_end ;
   unsigned int ring_size ;
   unsigned int front_offset ;
   unsigned int back_offset ;
   unsigned int depth_offset ;
   unsigned int w ;
   unsigned int h ;
   unsigned int pitch ;
   unsigned int pitch_bits ;
   unsigned int back_pitch ;
   unsigned int depth_pitch ;
   unsigned int cpp ;
   unsigned int chipset ;
};
#line 64 "include/drm/i915_drm.h"
typedef struct _drm_i915_init drm_i915_init_t;
#line 117 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 174 "include/drm/i915_drm.h"
typedef struct _drm_i915_batchbuffer drm_i915_batchbuffer_t;
#line 175 "include/drm/i915_drm.h"
struct _drm_i915_cmdbuffer {
   char *buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 186 "include/drm/i915_drm.h"
typedef struct _drm_i915_cmdbuffer drm_i915_cmdbuffer_t;
#line 197 "include/drm/i915_drm.h"
struct drm_i915_getparam {
   int param ;
   int *value ;
};
#line 207 "include/drm/i915_drm.h"
typedef struct drm_i915_getparam drm_i915_getparam_t;
#line 208 "include/drm/i915_drm.h"
struct drm_i915_setparam {
   int param ;
   int value ;
};
#line 218 "include/drm/i915_drm.h"
typedef struct drm_i915_setparam drm_i915_setparam_t;
#line 265 "include/drm/i915_drm.h"
struct drm_i915_hws_addr {
   uint64_t addr ;
};
#line 268 "include/drm/i915_drm.h"
typedef struct drm_i915_hws_addr drm_i915_hws_addr_t;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct drm_i915_private drm_i915_private_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 83 "include/drm/drm.h"
struct drm_drawable_info {
   unsigned int num_rects ;
   struct drm_clip_rect *rects ;
};
#line 453
enum drm_vblank_seq_type {
    _DRM_VBLANK_ABSOLUTE = 0,
    _DRM_VBLANK_RELATIVE = 1,
    _DRM_VBLANK_NEXTONMISS = 268435456,
    _DRM_VBLANK_SECONDARY = 536870912,
    _DRM_VBLANK_SIGNAL = 1073741824
} ;
#line 187 "include/drm/i915_drm.h"
struct drm_i915_irq_emit {
   int *irq_seq ;
};
#line 192 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_emit drm_i915_irq_emit_t;
#line 193 "include/drm/i915_drm.h"
struct drm_i915_irq_wait {
   int irq_seq ;
};
#line 196 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_wait drm_i915_irq_wait_t;
#line 248 "include/drm/i915_drm.h"
struct drm_i915_vblank_pipe {
   int pipe ;
};
#line 256 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_pipe drm_i915_vblank_pipe_t;
#line 257 "include/drm/i915_drm.h"
struct drm_i915_vblank_swap {
   drm_drawable_t drawable ;
   enum drm_vblank_seq_type seqtype ;
   unsigned int sequence ;
};
#line 264 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_swap drm_i915_vblank_swap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 219 "include/drm/i915_drm.h"
struct drm_i915_mem_alloc {
   int region ;
   int alignment ;
   int size ;
   int *region_offset ;
};
#line 229 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_alloc drm_i915_mem_alloc_t;
#line 230 "include/drm/i915_drm.h"
struct drm_i915_mem_free {
   int region ;
   int region_offset ;
};
#line 234 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_free drm_i915_mem_free_t;
#line 235 "include/drm/i915_drm.h"
struct drm_i915_mem_init_heap {
   int region ;
   int size ;
   int start ;
};
#line 240 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_init_heap drm_i915_mem_init_heap_t;
#line 241 "include/drm/i915_drm.h"
struct drm_i915_mem_destroy_heap {
   int region ;
};
#line 247 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_destroy_heap drm_i915_mem_destroy_heap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 272 "include/drm/drmP.h"
typedef int drm_ioctl_compat_t(struct file * , unsigned int  , unsigned long  );
#line 269 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer32 {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_batchbuffer32 drm_i915_batchbuffer32_t;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct _drm_i915_cmdbuffer32 {
   u32 buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_cmdbuffer32 drm_i915_cmdbuffer32_t;
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_irq_emit32 {
   u32 irq_seq ;
};
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_irq_emit32 drm_i915_irq_emit32_t;
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_getparam32 {
   int param ;
   u32 value ;
};
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_getparam32 drm_i915_getparam32_t;
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_mem_alloc32 {
   int region ;
   int alignment ;
   int size ;
   u32 region_offset ;
};
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_mem_alloc32 drm_i915_mem_alloc32_t;
#line 197 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) ;
#line 38
extern void __ldv_spin_unlock(spinlock_t * ) ;
#line 41
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) ;
#line 75
extern int __ldv_spin_trylock(spinlock_t * ) ;
#line 78
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) ;
#line 84
void ldv_spin_lock_alloc_lock_of_task_struct(void) ;
#line 85
void ldv_spin_unlock_alloc_lock_of_task_struct(void) ;
#line 92
void ldv_spin_lock_d_lock_of_dentry(void) ;
#line 93
void ldv_spin_unlock_d_lock_of_dentry(void) ;
#line 100
void ldv_spin_lock_dcache_lock(void) ;
#line 101
void ldv_spin_unlock_dcache_lock(void) ;
#line 116
void ldv_spin_lock_i_lock_of_inode(void) ;
#line 117
void ldv_spin_unlock_i_lock_of_inode(void) ;
#line 124
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
#line 125
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
#line 126
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) ;
#line 132
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 133
void ldv_spin_unlock_siglock_of_sighand_struct(void) ;
#line 16 "include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 559 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus * , unsigned int  , int  , u8 * ) ;
#line 565
extern int pci_bus_write_config_byte(struct pci_bus * , unsigned int  , int  , u8  ) ;
#line 572 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 574
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 574
  return (tmp);
}
}
#line 585 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 587
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, (int )val);
#line 587
  return (tmp);
}
}
#line 599
extern int pci_enable_device(struct pci_dev * ) ;
#line 611
extern void pci_disable_device(struct pci_dev * ) ;
#line 612
extern void pci_set_master(struct pci_dev * ) ;
#line 639
extern int pci_save_state(struct pci_dev * ) ;
#line 640
extern int pci_restore_state(struct pci_dev * ) ;
#line 641
extern int pci_set_power_state(struct pci_dev * , pci_power_t  ) ;
#line 20 "include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 20
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 29
  return;
}
}
#line 118 "include/asm/io_64.h"
__inline static unsigned char inb(unsigned short port ) 
{ 
  unsigned char _v ;

  {
#line 118
  __asm__  volatile   ("inb %w1,%0": "=a" (_v): "Nd" (port));
#line 118
  return (_v);
}
}
#line 127 "include/asm/io_64.h"
__inline static void outb(unsigned char value , unsigned short port ) 
{ 


  {
#line 127
  __asm__  volatile   ("outb %b0,%w1": : "a" (value), "Nd" (port));
#line 128
  return;
}
}
#line 840 "include/drm/drmP.h"
extern int drm_init(struct drm_driver * ) ;
#line 841
extern void drm_exit(struct drm_driver * ) ;
#line 842
extern int drm_ioctl(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
#line 849
extern int drm_open(struct inode * , struct file * ) ;
#line 851
extern int drm_fasync(int  , struct file * , int  ) ;
#line 852
extern int drm_release(struct inode * , struct file * ) ;
#line 855
extern int drm_mmap(struct file * , struct vm_area_struct * ) ;
#line 856
extern unsigned long drm_core_get_map_ofs(struct drm_map * ) ;
#line 857
extern unsigned long drm_core_get_reg_ofs(struct drm_device * ) ;
#line 858
extern unsigned int drm_poll(struct file * , struct poll_table_struct * ) ;
#line 981
extern void drm_core_reclaim_buffers(struct drm_device * , struct drm_file * ) ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_ioctl_desc i915_ioctls[18U] ;
#line 216
int i915_max_ioctl ;
#line 220
int i915_driver_load(struct drm_device *dev , unsigned long flags ) ;
#line 221
int i915_driver_unload(struct drm_device *dev ) ;
#line 222
void i915_driver_lastclose(struct drm_device *dev ) ;
#line 223
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 225
int i915_driver_device_is_agp(struct drm_device *dev ) ;
#line 226
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 235
int i915_driver_vblank_wait(struct drm_device *dev , unsigned int *sequence ) ;
#line 236
int i915_driver_vblank_wait2(struct drm_device *dev , unsigned int *sequence ) ;
#line 237
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) ;
#line 238
void i915_driver_irq_preinstall(struct drm_device *dev ) ;
#line 239
void i915_driver_irq_postinstall(struct drm_device *dev ) ;
#line 240
void i915_driver_irq_uninstall(struct drm_device *dev ) ;
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct pci_device_id pciidlist[24U]  = 
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
  {      {32902U, 13687U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 9570U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 13698U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 9586U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 9602U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 9610U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 9618U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10098U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10146U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10158U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10610U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10626U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10642U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10658U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10674U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10690U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10706U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10754U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10770U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 10818U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 11778U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 11794U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {32902U, 11810U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static bool i915_pipe_enabled(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 132
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 134
  if ((unsigned int )pipe == 0U) {
#line 135
    tmp = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24596U);
#line 135
    return ((tmp & 2147483648U) != 0U);
  } else {
#line 137
    tmp___0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24600U);
#line 137
    return ((tmp___0 & 2147483648U) != 0U);
  }
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_save_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 142
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 143
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 147
  tmp = i915_pipe_enabled(dev, pipe);
#line 147
  if (tmp) {
#line 147
    tmp___0 = 0;
  } else {
#line 147
    tmp___0 = 1;
  }
#line 147
  if (tmp___0) {
#line 148
    return;
  } else {

  }
#line 150
  if ((unsigned int )pipe == 0U) {
#line 151
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 153
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 155
  i = 0;
#line 155
  goto ldv_22954;
  ldv_22953: 
#line 156
  *(array + (unsigned long )i) = readl((void const volatile   *)((dev_priv->mmio_map)->handle + ((unsigned long )(i << 2) + reg)));
#line 155
  i = i + 1;
  ldv_22954: ;
#line 155
  if (i <= 255) {
#line 156
    goto ldv_22953;
  } else {

  }

#line 160
  return;
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_restore_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 161
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 162
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 166
  tmp = i915_pipe_enabled(dev, pipe);
#line 166
  if (tmp) {
#line 166
    tmp___0 = 0;
  } else {
#line 166
    tmp___0 = 1;
  }
#line 166
  if (tmp___0) {
#line 167
    return;
  } else {

  }
#line 169
  if ((unsigned int )pipe == 0U) {
#line 170
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 172
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 174
  i = 0;
#line 174
  goto ldv_22965;
  ldv_22964: 
#line 175
  writel(*(array + (unsigned long )i), (void volatile   *)((dev_priv->mmio_map)->handle + ((unsigned long )(i << 2) + reg)));
#line 174
  i = i + 1;
  ldv_22965: ;
#line 174
  if (i <= 255) {
#line 175
    goto ldv_22964;
  } else {

  }

#line 179
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static u8 i915_read_indexed(u16 index_port , u16 data_port , u8 reg ) 
{ 
  unsigned char tmp ;

  {
#line 180
  outb((int )reg, (int )index_port);
#line 181
  tmp = inb((int )data_port);
#line 181
  return (tmp);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static u8 i915_read_ar(u16 st01 , u8 reg , u16 palette_enable ) 
{ 
  unsigned char tmp ;

  {
#line 186
  inb((int )st01);
#line 187
  outb((int )((unsigned char )palette_enable) | (int )reg, 960);
#line 188
  tmp = inb(961);
#line 188
  return (tmp);
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_write_ar(u8 st01 , u8 reg , u8 val , u16 palette_enable ) 
{ 


  {
#line 193
  inb((int )st01);
#line 194
  outb((int )((unsigned char )palette_enable) | (int )reg, 960);
#line 195
  outb((int )val, 960);
#line 196
  return;
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_write_indexed(u16 index_port , u16 data_port , u8 reg , u8 val ) 
{ 


  {
#line 200
  outb((int )reg, (int )index_port);
#line 201
  outb((int )val, (int )data_port);
#line 202
  return;
}
}
#line 204 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_save_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;
  u8 tmp ;

  {
#line 206
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 211
  dev_priv->saveDACMASK = inb(966);
#line 213
  outb(0, 967);
#line 215
  i = 0;
#line 215
  goto ldv_22998;
  ldv_22997: 
#line 216
  dev_priv->saveDACDATA[i] = inb(969);
#line 215
  i = i + 1;
  ldv_22998: ;
#line 215
  if (i <= 767) {
#line 216
    goto ldv_22997;
  } else {

  }
#line 219
  dev_priv->saveMSR = inb(972);
#line 220
  if ((int )dev_priv->saveMSR & 1) {
#line 221
    cr_index = 980U;
#line 222
    cr_data = 981U;
#line 223
    st01 = 986U;
  } else {
#line 225
    cr_index = 948U;
#line 226
    cr_data = 949U;
#line 227
    st01 = 954U;
  }
#line 231
  tmp = i915_read_indexed((int )cr_index, (int )cr_data, 17);
#line 231
  i915_write_indexed((int )cr_index, (int )cr_data, 17, (int )tmp & 127);
#line 234
  i = 0;
#line 234
  goto ldv_23001;
  ldv_23000: 
#line 235
  dev_priv->saveCR[i] = i915_read_indexed((int )cr_index, (int )cr_data, (int )((u8 )i));
#line 234
  i = i + 1;
  ldv_23001: ;
#line 234
  if (i <= 36) {
#line 235
    goto ldv_23000;
  } else {

  }
#line 238
  dev_priv->saveCR[17] = (unsigned int )dev_priv->saveCR[17] & 127U;
#line 241
  inb((int )st01);
#line 242
  dev_priv->saveAR_INDEX = inb(960);
#line 243
  i = 0;
#line 243
  goto ldv_23004;
  ldv_23003: 
#line 244
  dev_priv->saveAR[i] = i915_read_ar((int )st01, (int )((u8 )i), 0);
#line 243
  i = i + 1;
  ldv_23004: ;
#line 243
  if (i <= 20) {
#line 244
    goto ldv_23003;
  } else {

  }
#line 245
  inb((int )st01);
#line 246
  outb((int )dev_priv->saveAR_INDEX, 960);
#line 247
  inb((int )st01);
#line 250
  i = 0;
#line 250
  goto ldv_23007;
  ldv_23006: 
#line 251
  dev_priv->saveGR[i] = i915_read_indexed(974, 975, (int )((u8 )i));
#line 250
  i = i + 1;
  ldv_23007: ;
#line 250
  if (i <= 8) {
#line 251
    goto ldv_23006;
  } else {

  }
#line 254
  dev_priv->saveGR[16] = i915_read_indexed(974, 975, 16);
#line 256
  dev_priv->saveGR[17] = i915_read_indexed(974, 975, 17);
#line 258
  dev_priv->saveGR[24] = i915_read_indexed(974, 975, 24);
#line 262
  i = 0;
#line 262
  goto ldv_23010;
  ldv_23009: 
#line 263
  dev_priv->saveSR[i] = i915_read_indexed(964, 965, (int )((u8 )i));
#line 262
  i = i + 1;
  ldv_23010: ;
#line 262
  if (i <= 7) {
#line 263
    goto ldv_23009;
  } else {

  }

#line 267
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_restore_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;

  {
#line 269
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 274
  outb((int )dev_priv->saveMSR, 962);
#line 275
  if ((int )dev_priv->saveMSR & 1) {
#line 276
    cr_index = 980U;
#line 277
    cr_data = 981U;
#line 278
    st01 = 986U;
  } else {
#line 280
    cr_index = 948U;
#line 281
    cr_data = 949U;
#line 282
    st01 = 954U;
  }
#line 286
  i = 0;
#line 286
  goto ldv_23021;
  ldv_23020: 
#line 287
  i915_write_indexed(964, 965, (int )((u8 )i), (int )dev_priv->saveSR[i]);
#line 286
  i = i + 1;
  ldv_23021: ;
#line 286
  if (i <= 6) {
#line 287
    goto ldv_23020;
  } else {

  }
#line 292
  i915_write_indexed((int )cr_index, (int )cr_data, 17, (int )dev_priv->saveCR[17]);
#line 293
  i = 0;
#line 293
  goto ldv_23024;
  ldv_23023: 
#line 294
  i915_write_indexed((int )cr_index, (int )cr_data, (int )((u8 )i), (int )dev_priv->saveCR[i]);
#line 293
  i = i + 1;
  ldv_23024: ;
#line 293
  if (i <= 36) {
#line 294
    goto ldv_23023;
  } else {

  }
#line 297
  i = 0;
#line 297
  goto ldv_23027;
  ldv_23026: 
#line 298
  i915_write_indexed(974, 975, (int )((u8 )i), (int )dev_priv->saveGR[i]);
#line 297
  i = i + 1;
  ldv_23027: ;
#line 297
  if (i <= 8) {
#line 298
    goto ldv_23026;
  } else {

  }
#line 301
  i915_write_indexed(974, 975, 16, (int )dev_priv->saveGR[16]);
#line 303
  i915_write_indexed(974, 975, 17, (int )dev_priv->saveGR[17]);
#line 305
  i915_write_indexed(974, 975, 24, (int )dev_priv->saveGR[24]);
#line 309
  inb((int )st01);
#line 310
  i = 0;
#line 310
  goto ldv_23030;
  ldv_23029: 
#line 311
  i915_write_ar((int )((u8 )st01), (int )((u8 )i), (int )dev_priv->saveAR[i], 0);
#line 310
  i = i + 1;
  ldv_23030: ;
#line 310
  if (i <= 20) {
#line 311
    goto ldv_23029;
  } else {

  }
#line 312
  inb((int )st01);
#line 313
  outb((int )((unsigned int )dev_priv->saveAR_INDEX | 32U), 960);
#line 314
  inb((int )st01);
#line 317
  outb((int )dev_priv->saveDACMASK, 966);
#line 319
  outb(0, 968);
#line 321
  i = 0;
#line 321
  goto ldv_23033;
  ldv_23032: 
#line 322
  outb((int )dev_priv->saveDACDATA[i], 969);
#line 321
  i = i + 1;
  ldv_23033: ;
#line 321
  if (i <= 767) {
#line 322
    goto ldv_23032;
  } else {

  }

#line 326
  return;
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_suspend(struct drm_device *dev , pm_message_t state ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;

  {
#line 328
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 331
  if ((unsigned long )dev == (unsigned long )((struct drm_device *)0) || (unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 332
    printk("<3>dev: %p, dev_priv: %p\n", dev, dev_priv);
#line 333
    printk("<3>DRM not initialized, aborting suspend.\n");
#line 334
    return (-19);
  } else {

  }
#line 337
  if (state.event == 8) {
#line 338
    return (0);
  } else {

  }
#line 340
  pci_save_state(dev->pdev);
#line 341
  pci_read_config_byte(dev->pdev, 244, & dev_priv->saveLBB);
#line 344
  dev_priv->saveDSPARB = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 458800U);
#line 347
  dev_priv->savePIPEACONF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 458760U);
#line 348
  dev_priv->savePIPEASRC = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393244U);
#line 349
  dev_priv->saveFPA0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24640U);
#line 350
  dev_priv->saveFPA1 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24644U);
#line 351
  dev_priv->saveDPLL_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24596U);
#line 352
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 353
    dev_priv->saveDPLL_A_MD = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24604U);
  } else {

  }
#line 354
  dev_priv->saveHTOTAL_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393216U);
#line 355
  dev_priv->saveHBLANK_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393220U);
#line 356
  dev_priv->saveHSYNC_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393224U);
#line 357
  dev_priv->saveVTOTAL_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393228U);
#line 358
  dev_priv->saveVBLANK_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393232U);
#line 359
  dev_priv->saveVSYNC_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393236U);
#line 360
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393248U);
#line 362
  dev_priv->saveDSPACNTR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459136U);
#line 363
  dev_priv->saveDSPASTRIDE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459144U);
#line 364
  dev_priv->saveDSPASIZE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459152U);
#line 365
  dev_priv->saveDSPAPOS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459148U);
#line 366
  dev_priv->saveDSPAADDR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459140U);
#line 367
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 368
    dev_priv->saveDSPASURF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459164U);
#line 369
    dev_priv->saveDSPATILEOFF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459172U);
  } else {

  }
#line 371
  i915_save_palette(dev, PIPE_A);
#line 372
  dev_priv->savePIPEASTAT = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 458788U);
#line 375
  dev_priv->savePIPEBCONF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 462856U);
#line 376
  dev_priv->savePIPEBSRC = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397340U);
#line 377
  dev_priv->saveFPB0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24648U);
#line 378
  dev_priv->saveFPB1 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24652U);
#line 379
  dev_priv->saveDPLL_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24600U);
#line 380
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 381
    dev_priv->saveDPLL_B_MD = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24608U);
  } else {

  }
#line 382
  dev_priv->saveHTOTAL_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397312U);
#line 383
  dev_priv->saveHBLANK_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397316U);
#line 384
  dev_priv->saveHSYNC_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397320U);
#line 385
  dev_priv->saveVTOTAL_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397324U);
#line 386
  dev_priv->saveVBLANK_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397328U);
#line 387
  dev_priv->saveVSYNC_B = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397332U);
#line 388
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 393248U);
#line 390
  dev_priv->saveDSPBCNTR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463232U);
#line 391
  dev_priv->saveDSPBSTRIDE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463240U);
#line 392
  dev_priv->saveDSPBSIZE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463248U);
#line 393
  dev_priv->saveDSPBPOS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463244U);
#line 394
  dev_priv->saveDSPBADDR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463236U);
#line 395
  if (dev->pci_device == 10754 || dev->pci_device == 10818) {
#line 396
    dev_priv->saveDSPBSURF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463260U);
#line 397
    dev_priv->saveDSPBTILEOFF = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463268U);
  } else {

  }
#line 399
  i915_save_palette(dev, PIPE_B);
#line 400
  dev_priv->savePIPEBSTAT = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 462884U);
#line 403
  dev_priv->saveADPA = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397568U);
#line 406
  dev_priv->savePP_CONTROL = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397828U);
#line 407
  dev_priv->savePFIT_PGM_RATIOS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397876U);
#line 408
  dev_priv->saveBLC_PWM_CTL = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397908U);
#line 409
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 410
    dev_priv->saveBLC_PWM_CTL2 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397904U);
  } else {

  }
#line 411
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 412
    dev_priv->saveLVDS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397696U);
  } else {

  }
#line 413
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 414
    dev_priv->savePFIT_CONTROL = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397872U);
  } else {

  }
#line 415
  dev_priv->savePP_ON_DELAYS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397832U);
#line 416
  dev_priv->savePP_OFF_DELAYS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397836U);
#line 417
  dev_priv->savePP_DIVISOR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 397840U);
#line 422
  dev_priv->saveFBC_CFB_BASE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 12800U);
#line 423
  dev_priv->saveFBC_LL_BASE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 12804U);
#line 424
  dev_priv->saveFBC_CONTROL2 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 12820U);
#line 425
  dev_priv->saveFBC_CONTROL = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 12808U);
#line 428
  dev_priv->saveIIR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 429
  dev_priv->saveIER = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8352U);
#line 430
  dev_priv->saveIMR = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 433
  dev_priv->saveVGA0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24576U);
#line 434
  dev_priv->saveVGA1 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24580U);
#line 435
  dev_priv->saveVGA_PD = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24592U);
#line 436
  dev_priv->saveVGACNTRL = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463872U);
#line 439
  dev_priv->saveD_STATE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 24836U);
#line 440
  dev_priv->saveCG_2D_DIS = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 25088U);
#line 443
  dev_priv->saveCACHE_MODE_0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8480U);
#line 446
  dev_priv->saveMI_ARB_STATE = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8420U);
#line 449
  i = 0;
#line 449
  goto ldv_23042;
  ldv_23041: 
#line 450
  dev_priv->saveSWF0[i] = readl((void const volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 463888));
#line 451
  dev_priv->saveSWF1[i] = readl((void const volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 459792));
#line 449
  i = i + 1;
  ldv_23042: ;
#line 449
  if (i <= 15) {
#line 450
    goto ldv_23041;
  } else {

  }
#line 453
  i = 0;
#line 453
  goto ldv_23045;
  ldv_23044: 
#line 454
  dev_priv->saveSWF2[i] = readl((void const volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 467988));
#line 453
  i = i + 1;
  ldv_23045: ;
#line 453
  if (i <= 2) {
#line 454
    goto ldv_23044;
  } else {

  }
#line 456
  i915_save_vga(dev);
#line 458
  if (state.event == 2) {
#line 460
    pci_disable_device(dev->pdev);
#line 461
    pci_set_power_state(dev->pdev, 3);
  } else {

  }
#line 464
  return (0);
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_resume(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 469
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 472
  pci_set_power_state(dev->pdev, 0);
#line 473
  pci_restore_state(dev->pdev);
#line 474
  tmp = pci_enable_device(dev->pdev);
#line 474
  if (tmp != 0) {
#line 475
    return (-1);
  } else {

  }
#line 476
  pci_set_master(dev->pdev);
#line 478
  pci_write_config_byte(dev->pdev, 244, (int )dev_priv->saveLBB);
#line 480
  writel(dev_priv->saveDSPARB, (void volatile   *)(dev_priv->mmio_map)->handle + 458800U);
#line 484
  if ((int )dev_priv->saveDPLL_A < 0) {
#line 485
    writel(dev_priv->saveDPLL_A & 2147483647U, (void volatile   *)(dev_priv->mmio_map)->handle + 24596U);
#line 487
    __const_udelay(644250UL);
  } else {

  }
#line 489
  writel(dev_priv->saveFPA0, (void volatile   *)(dev_priv->mmio_map)->handle + 24640U);
#line 490
  writel(dev_priv->saveFPA1, (void volatile   *)(dev_priv->mmio_map)->handle + 24644U);
#line 492
  writel(dev_priv->saveDPLL_A, (void volatile   *)(dev_priv->mmio_map)->handle + 24596U);
#line 493
  __const_udelay(644250UL);
#line 494
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 495
    writel(dev_priv->saveDPLL_A_MD, (void volatile   *)(dev_priv->mmio_map)->handle + 24604U);
  } else {

  }
#line 496
  __const_udelay(644250UL);
#line 499
  writel(dev_priv->saveHTOTAL_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393216U);
#line 500
  writel(dev_priv->saveHBLANK_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393220U);
#line 501
  writel(dev_priv->saveHSYNC_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393224U);
#line 502
  writel(dev_priv->saveVTOTAL_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393228U);
#line 503
  writel(dev_priv->saveVBLANK_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393232U);
#line 504
  writel(dev_priv->saveVSYNC_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393236U);
#line 505
  writel(dev_priv->saveBCLRPAT_A, (void volatile   *)(dev_priv->mmio_map)->handle + 393248U);
#line 508
  writel(dev_priv->saveDSPASIZE, (void volatile   *)(dev_priv->mmio_map)->handle + 459152U);
#line 509
  writel(dev_priv->saveDSPAPOS, (void volatile   *)(dev_priv->mmio_map)->handle + 459148U);
#line 510
  writel(dev_priv->savePIPEASRC, (void volatile   *)(dev_priv->mmio_map)->handle + 393244U);
#line 511
  writel(dev_priv->saveDSPAADDR, (void volatile   *)(dev_priv->mmio_map)->handle + 459140U);
#line 512
  writel(dev_priv->saveDSPASTRIDE, (void volatile   *)(dev_priv->mmio_map)->handle + 459144U);
#line 513
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 514
    writel(dev_priv->saveDSPASURF, (void volatile   *)(dev_priv->mmio_map)->handle + 459164U);
#line 515
    writel(dev_priv->saveDSPATILEOFF, (void volatile   *)(dev_priv->mmio_map)->handle + 459172U);
  } else {

  }
#line 518
  writel(dev_priv->savePIPEACONF, (void volatile   *)(dev_priv->mmio_map)->handle + 458760U);
#line 520
  i915_restore_palette(dev, PIPE_A);
#line 522
  writel(dev_priv->saveDSPACNTR, (void volatile   *)(dev_priv->mmio_map)->handle + 459136U);
#line 523
  tmp___0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 459140U);
#line 523
  writel(tmp___0, (void volatile   *)(dev_priv->mmio_map)->handle + 459140U);
#line 526
  if ((int )dev_priv->saveDPLL_B < 0) {
#line 527
    writel(dev_priv->saveDPLL_B & 2147483647U, (void volatile   *)(dev_priv->mmio_map)->handle + 24600U);
#line 529
    __const_udelay(644250UL);
  } else {

  }
#line 531
  writel(dev_priv->saveFPB0, (void volatile   *)(dev_priv->mmio_map)->handle + 24648U);
#line 532
  writel(dev_priv->saveFPB1, (void volatile   *)(dev_priv->mmio_map)->handle + 24652U);
#line 534
  writel(dev_priv->saveDPLL_B, (void volatile   *)(dev_priv->mmio_map)->handle + 24600U);
#line 535
  __const_udelay(644250UL);
#line 536
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 537
    writel(dev_priv->saveDPLL_B_MD, (void volatile   *)(dev_priv->mmio_map)->handle + 24608U);
  } else {

  }
#line 538
  __const_udelay(644250UL);
#line 541
  writel(dev_priv->saveHTOTAL_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397312U);
#line 542
  writel(dev_priv->saveHBLANK_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397316U);
#line 543
  writel(dev_priv->saveHSYNC_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397320U);
#line 544
  writel(dev_priv->saveVTOTAL_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397324U);
#line 545
  writel(dev_priv->saveVBLANK_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397328U);
#line 546
  writel(dev_priv->saveVSYNC_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397332U);
#line 547
  writel(dev_priv->saveBCLRPAT_B, (void volatile   *)(dev_priv->mmio_map)->handle + 397344U);
#line 550
  writel(dev_priv->saveDSPBSIZE, (void volatile   *)(dev_priv->mmio_map)->handle + 463248U);
#line 551
  writel(dev_priv->saveDSPBPOS, (void volatile   *)(dev_priv->mmio_map)->handle + 463244U);
#line 552
  writel(dev_priv->savePIPEBSRC, (void volatile   *)(dev_priv->mmio_map)->handle + 397340U);
#line 553
  writel(dev_priv->saveDSPBADDR, (void volatile   *)(dev_priv->mmio_map)->handle + 463236U);
#line 554
  writel(dev_priv->saveDSPBSTRIDE, (void volatile   *)(dev_priv->mmio_map)->handle + 463240U);
#line 555
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 556
    writel(dev_priv->saveDSPBSURF, (void volatile   *)(dev_priv->mmio_map)->handle + 463260U);
#line 557
    writel(dev_priv->saveDSPBTILEOFF, (void volatile   *)(dev_priv->mmio_map)->handle + 463268U);
  } else {

  }
#line 560
  writel(dev_priv->savePIPEBCONF, (void volatile   *)(dev_priv->mmio_map)->handle + 462856U);
#line 562
  i915_restore_palette(dev, PIPE_B);
#line 564
  writel(dev_priv->saveDSPBCNTR, (void volatile   *)(dev_priv->mmio_map)->handle + 463232U);
#line 565
  tmp___1 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 463236U);
#line 565
  writel(tmp___1, (void volatile   *)(dev_priv->mmio_map)->handle + 463236U);
#line 568
  writel(dev_priv->saveADPA, (void volatile   *)(dev_priv->mmio_map)->handle + 397568U);
#line 571
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 572
    writel(dev_priv->saveBLC_PWM_CTL2, (void volatile   *)(dev_priv->mmio_map)->handle + 397904U);
  } else {

  }
#line 573
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 574
    writel(dev_priv->saveLVDS, (void volatile   *)(dev_priv->mmio_map)->handle + 397696U);
  } else {

  }
#line 575
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 576
    writel(dev_priv->savePFIT_CONTROL, (void volatile   *)(dev_priv->mmio_map)->handle + 397872U);
  } else {

  }
#line 578
  writel(dev_priv->savePFIT_PGM_RATIOS, (void volatile   *)(dev_priv->mmio_map)->handle + 397876U);
#line 579
  writel(dev_priv->saveBLC_PWM_CTL, (void volatile   *)(dev_priv->mmio_map)->handle + 397908U);
#line 580
  writel(dev_priv->savePP_ON_DELAYS, (void volatile   *)(dev_priv->mmio_map)->handle + 397832U);
#line 581
  writel(dev_priv->savePP_OFF_DELAYS, (void volatile   *)(dev_priv->mmio_map)->handle + 397836U);
#line 582
  writel(dev_priv->savePP_DIVISOR, (void volatile   *)(dev_priv->mmio_map)->handle + 397840U);
#line 583
  writel(dev_priv->savePP_CONTROL, (void volatile   *)(dev_priv->mmio_map)->handle + 397828U);
#line 588
  writel(dev_priv->saveFBC_CFB_BASE, (void volatile   *)(dev_priv->mmio_map)->handle + 12800U);
#line 589
  writel(dev_priv->saveFBC_LL_BASE, (void volatile   *)(dev_priv->mmio_map)->handle + 12804U);
#line 590
  writel(dev_priv->saveFBC_CONTROL2, (void volatile   *)(dev_priv->mmio_map)->handle + 12820U);
#line 591
  writel(dev_priv->saveFBC_CONTROL, (void volatile   *)(dev_priv->mmio_map)->handle + 12808U);
#line 594
  writel(dev_priv->saveVGACNTRL, (void volatile   *)(dev_priv->mmio_map)->handle + 463872U);
#line 595
  writel(dev_priv->saveVGA0, (void volatile   *)(dev_priv->mmio_map)->handle + 24576U);
#line 596
  writel(dev_priv->saveVGA1, (void volatile   *)(dev_priv->mmio_map)->handle + 24580U);
#line 597
  writel(dev_priv->saveVGA_PD, (void volatile   *)(dev_priv->mmio_map)->handle + 24592U);
#line 598
  __const_udelay(644250UL);
#line 601
  writel(dev_priv->saveD_STATE, (void volatile   *)(dev_priv->mmio_map)->handle + 24836U);
#line 602
  writel(dev_priv->saveCG_2D_DIS, (void volatile   *)(dev_priv->mmio_map)->handle + 25088U);
#line 605
  writel(dev_priv->saveCACHE_MODE_0 | 4294901760U, (void volatile   *)(dev_priv->mmio_map)->handle + 8480U);
#line 608
  writel(dev_priv->saveMI_ARB_STATE | 4294901760U, (void volatile   *)(dev_priv->mmio_map)->handle + 8420U);
#line 610
  i = 0;
#line 610
  goto ldv_23053;
  ldv_23052: 
#line 611
  writel(dev_priv->saveSWF0[i], (void volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 463888));
#line 612
  writel(dev_priv->saveSWF1[i + 7], (void volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 459792));
#line 610
  i = i + 1;
  ldv_23053: ;
#line 610
  if (i <= 15) {
#line 611
    goto ldv_23052;
  } else {

  }
#line 614
  i = 0;
#line 614
  goto ldv_23056;
  ldv_23055: 
#line 615
  writel(dev_priv->saveSWF2[i], (void volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )((i << 2) + 467988));
#line 614
  i = i + 1;
  ldv_23056: ;
#line 614
  if (i <= 2) {
#line 615
    goto ldv_23055;
  } else {

  }
#line 617
  i915_restore_vga(dev);
#line 619
  return (0);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct drm_driver driver  = 
#line 622
     {& i915_driver_load, 0, 0, & i915_driver_preclose, 0, & i915_driver_lastclose,
    & i915_driver_unload, & i915_suspend, & i915_resume, 0, 0, 0, 0, 0, 0, 0, & i915_driver_vblank_wait,
    & i915_driver_vblank_wait2, 0, & i915_driver_device_is_agp, & i915_driver_irq_handler,
    & i915_driver_irq_preinstall, & i915_driver_irq_postinstall, & i915_driver_irq_uninstall,
    & drm_core_reclaim_buffers, 0, 0, & drm_core_get_map_ofs, & drm_core_get_reg_ofs,
    0, 1, 6, 0, (char *)"i915", (char *)"Intel Graphics", (char *)"20060119", 2499U,
    0, (struct drm_ioctl_desc *)(& i915_ioctls), 0, {& __this_module, 0, 0, 0, 0,
                                                     0, 0, & drm_poll, & drm_ioctl,
                                                     0, & i915_compat_ioctl, & drm_mmap,
                                                     & drm_open, 0, & drm_release,
                                                     0, 0, & drm_fasync, 0, 0, 0,
                                                     0, 0, 0, 0, 0, 0}, {{0, 0}, (char *)"i915",
                                                                         (struct pci_device_id  const  *)(& pciidlist),
                                                                         0, 0, 0,
                                                                         0, 0, 0,
                                                                         0, 0, 0,
                                                                         {0, 0, 0,
                                                                          0, 0, 0,
                                                                          0, 0, 0,
                                                                          0, 0, 0},
                                                                         {{{0U}, 0U,
                                                                           0U, 0,
                                                                           {0, 0,
                                                                            0, 0}},
                                                                          {0, 0},
                                                                          (unsigned char)0}}};
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_init(void) 
{ 
  int tmp ;

  {
#line 675
  driver.num_ioctls = i915_max_ioctl;
#line 676
  tmp = drm_init(& driver);
#line 676
  return (tmp);
}
}
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_exit(void) 
{ 


  {
#line 681
  drm_exit(& driver);
#line 682
  return;
}
}
#line 707
void ldv_check_final_state(void) ;
#line 716
void ldv_initialize(void) ;
#line 719
extern void ldv_handler_precall(void) ;
#line 722
extern int nondet_int(void) ;
#line 725 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_device *var_group1 ;
  pm_message_t var_i915_suspend_9_p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 758
  LDV_IN_INTERRUPT = 1;
#line 767
  ldv_initialize();
#line 776
  ldv_handler_precall();
#line 777
  tmp = i915_init();
#line 777
  if (tmp != 0) {
#line 778
    goto ldv_final;
  } else {

  }
#line 782
  goto ldv_23102;
  ldv_23101: 
#line 785
  tmp___0 = nondet_int();
#line 785
  switch (tmp___0) {
  case 0: 
#line 795
  ldv_handler_precall();
#line 796
  i915_suspend(var_group1, var_i915_suspend_9_p1);
#line 807
  goto ldv_23098;
  case 1: 
#line 816
  ldv_handler_precall();
#line 817
  i915_resume(var_group1);
#line 828
  goto ldv_23098;
  default: ;
#line 829
  goto ldv_23098;
  }
  ldv_23098: ;
  ldv_23102: 
#line 782
  tmp___1 = nondet_int();
#line 782
  if (tmp___1 != 0) {
#line 783
    goto ldv_23101;
  } else {

  }

#line 844
  ldv_handler_precall();
#line 845
  i915_exit();
  ldv_final: 
#line 848
  ldv_check_final_state();
#line 851
  return;
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 860
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 862
  __ldv_spin_lock(ldv_func_arg1);
#line 863
  return;
}
}
#line 865 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 870
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 872
  __ldv_spin_unlock(ldv_func_arg1);
#line 873
  return;
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 880
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 880
  ldv_func_res = tmp;
#line 882
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 882
  return (tmp___0);
#line 884
  return (ldv_func_res);
}
}
#line 887 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 892
  ldv_spin_lock_dcache_lock();
#line 894
  __ldv_spin_lock(ldv_func_arg1);
#line 895
  return;
}
}
#line 897 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 902
  ldv_spin_lock_d_lock_of_dentry();
#line 904
  __ldv_spin_lock(ldv_func_arg1);
#line 905
  return;
}
}
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 912
  ldv_spin_unlock_d_lock_of_dentry();
#line 914
  __ldv_spin_unlock(ldv_func_arg1);
#line 915
  return;
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 922
  ldv_spin_unlock_dcache_lock();
#line 924
  __ldv_spin_unlock(ldv_func_arg1);
#line 925
  return;
}
}
#line 927 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 932
  ldv_spin_lock_d_lock_of_dentry();
#line 934
  __ldv_spin_lock(ldv_func_arg1);
#line 935
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 942
  ldv_spin_unlock_d_lock_of_dentry();
#line 944
  __ldv_spin_unlock(ldv_func_arg1);
#line 945
  return;
}
}
#line 947 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 952
  ldv_spin_lock_i_lock_of_inode();
#line 954
  __ldv_spin_lock(ldv_func_arg1);
#line 955
  return;
}
}
#line 957 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 962
  ldv_spin_unlock_i_lock_of_inode();
#line 964
  __ldv_spin_unlock(ldv_func_arg1);
#line 965
  return;
}
}
#line 967 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 972
  ldv_spin_lock_d_lock_of_dentry();
#line 974
  __ldv_spin_lock(ldv_func_arg1);
#line 975
  return;
}
}
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 982
  ldv_spin_unlock_d_lock_of_dentry();
#line 984
  __ldv_spin_unlock(ldv_func_arg1);
#line 985
  return;
}
}
#line 987 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 992
  ldv_spin_lock_siglock_of_sighand_struct();
#line 994
  __ldv_spin_lock(ldv_func_arg1);
#line 995
  return;
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1002
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1004
  __ldv_spin_unlock(ldv_func_arg1);
#line 1005
  return;
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1012
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1014
  __ldv_spin_lock(ldv_func_arg1);
#line 1015
  return;
}
}
#line 1017 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1022
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1024
  __ldv_spin_unlock(ldv_func_arg1);
#line 1025
  return;
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1032
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1034
  __ldv_spin_unlock(ldv_func_arg1);
#line 1035
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 51 "include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 205 "include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (8UL) {
  case 2UL: 
#line 208
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4754;
  case 4UL: 
#line 208
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4754;
  case 8UL: 
#line 208
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_4754;
  default: 
#line 208
  __bad_pda_field();
  }
  ldv_4754: 
#line 208
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 209
  return (ti);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_37(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_41(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_38(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_42(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_43(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_45(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_47(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_49(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_51(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_53(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_54(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_39(spinlock_t *ldv_func_arg1 ) ;
#line 47 "include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int  ) ;
#line 101 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 759 "include/linux/pci.h"
extern int pci_enable_msi(struct pci_dev * ) ;
#line 761
extern void pci_disable_msi(struct pci_dev * ) ;
#line 19 "include/asm/uaccess_64.h"
extern unsigned long copy_user_generic(void * , void const   * , unsigned int  ) ;
#line 22
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 29 "include/asm/uaccess_64.h"
__inline static int __copy_from_user(void *dst , void const   *src , unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 31
  ret = 0;
#line 33
  tmp = copy_user_generic(dst, src, size);
#line 33
  return ((int )tmp);
#line 34
  switch (size) {
  case 1U: 
#line 35
  __asm__  volatile   ("1:\tmovb %2,%b1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=q" (*((u8 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (1), "0" (ret));
#line 37
  return (ret);
  case 2U: 
#line 38
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (2), "0" (ret));
#line 40
  return (ret);
  case 4U: 
#line 41
  __asm__  volatile   ("1:\tmovl %2,%k1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u32 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (4), "0" (ret));
#line 43
  return (ret);
  case 8U: 
#line 44
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (8), "0" (ret));
#line 46
  return (ret);
  case 10U: 
#line 48
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (16), "0" (ret));
#line 50
  tmp___0 = __builtin_expect(ret != 0, 0L);
#line 50
  if (tmp___0 != 0L) {
#line 51
    return (ret);
  } else {

  }
#line 52
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (2), "0" (ret));
#line 55
  return (ret);
  case 16U: 
#line 57
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (16), "0" (ret));
#line 59
  tmp___1 = __builtin_expect(ret != 0, 0L);
#line 59
  if (tmp___1 != 0L) {
#line 60
    return (ret);
  } else {

  }
#line 61
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (8), "0" (ret));
#line 64
  return (ret);
  default: 
#line 66
  tmp___2 = copy_user_generic(dst, src, size);
#line 66
  return ((int )tmp___2);
  }
}
}
#line 952 "include/drm/drmP.h"
extern int drm_addmap(struct drm_device * , unsigned int  , unsigned int  , enum drm_map_type  ,
                      enum drm_map_flags  , drm_local_map_t ** ) ;
#line 957
extern int drm_rmmap(struct drm_device * , drm_local_map_t * ) ;
#line 972
extern unsigned long drm_get_resource_start(struct drm_device * , unsigned int  ) ;
#line 974
extern unsigned long drm_get_resource_len(struct drm_device * , unsigned int  ) ;
#line 988
extern int drm_irq_uninstall(struct drm_device * ) ;
#line 1035
extern unsigned int drm_debug ;
#line 1042
extern drm_local_map_t *drm_getsarea(struct drm_device * ) ;
#line 1063
extern drm_dma_handle_t *drm_pci_alloc(struct drm_device * , size_t  , size_t  , dma_addr_t  ) ;
#line 1066
extern void drm_pci_free(struct drm_device * , drm_dma_handle_t * ) ;
#line 1091
extern void drm_core_ioremap(struct drm_map * , struct drm_device * ) ;
#line 1093
extern void drm_core_ioremapfree(struct drm_map * , struct drm_device * ) ;
#line 1129 "include/drm/drmP.h"
__inline static void *drm_alloc(size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1131
  tmp = kmalloc(size, 208U);
#line 1131
  return (tmp);
}
}
#line 1135 "include/drm/drmP.h"
__inline static void drm_free(void *pt , size_t size , int area ) 
{ 


  {
#line 1137
  kfree((void const   *)pt);
#line 1138
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_kernel_lost_context(struct drm_device *dev ) ;
#line 230
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 232
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 241
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 243
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 245
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 249
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 251
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 253
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 255
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 257
void i915_mem_takedown(struct mem_block **heap ) ;
#line 258
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) ;
#line 313
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) ;
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  u32 acthd_reg ;
  u32 last_acthd ;
  unsigned int tmp ;
  u32 acthd ;
  u32 last_head ;
  unsigned int tmp___0 ;
  int i ;
  unsigned int tmp___1 ;

  {
#line 124
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 125
  ring = & dev_priv->ring;
#line 126
  acthd_reg = ((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810 ? 8308U : 8392U;
#line 127
  tmp = readl((void const volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )acthd_reg);
#line 127
  last_acthd = tmp;
#line 129
  tmp___0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8244U);
#line 129
  last_head = tmp___0 & 2097148U;
#line 132
  i = 0;
#line 132
  goto ldv_22949;
  ldv_22948: 
#line 133
  tmp___1 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8244U);
#line 133
  ring->head = (int )tmp___1 & 2097148;
#line 134
  acthd = readl((void const volatile   *)(dev_priv->mmio_map)->handle + (unsigned long )acthd_reg);
#line 135
  ring->space = ring->head + (-8 - ring->tail);
#line 136
  if (ring->space < 0) {
#line 137
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 138
  if (ring->space >= n) {
#line 139
    return (0);
  } else {

  }
#line 141
  (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
#line 143
  if ((u32 )ring->head != last_head) {
#line 144
    i = 0;
  } else {

  }
#line 145
  if (acthd != last_acthd) {
#line 146
    i = 0;
  } else {

  }
#line 148
  last_head = (u32 )ring->head;
#line 149
  last_acthd = acthd;
#line 150
  msleep_interruptible(10U);
#line 132
  i = i + 1;
  ldv_22949: ;
#line 132
  if (i <= 99999) {
#line 133
    goto ldv_22948;
  } else {

  }

#line 154
  return (-16);
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_init_phys_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 163
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 165
  dev_priv->status_page_dmah = drm_pci_alloc(dev, 4096UL, 4096UL, 4294967295ULL);
#line 168
  if ((unsigned long )dev_priv->status_page_dmah == (unsigned long )((drm_dma_handle_t *)0)) {
#line 169
    printk("<3>[drm:%s] *ERROR* Can not allocate hardware status page\n", "i915_init_phys_hws");
#line 170
    return (-12);
  } else {

  }
#line 172
  dev_priv->hw_status_page = (dev_priv->status_page_dmah)->vaddr;
#line 173
  dev_priv->dma_status_page = (dev_priv->status_page_dmah)->busaddr;
#line 175
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 177
  writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)(dev_priv->mmio_map)->handle + 8320U);
#line 178
  if (drm_debug != 0U) {
#line 178
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_init_phys_hws");
  } else {

  }
#line 179
  return (0);
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_free_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 188
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 189
  if ((unsigned long )dev_priv->status_page_dmah != (unsigned long )((drm_dma_handle_t *)0)) {
#line 190
    drm_pci_free(dev, dev_priv->status_page_dmah);
#line 191
    dev_priv->status_page_dmah = 0;
  } else {

  }
#line 194
  if (dev_priv->status_gfx_addr != 0U) {
#line 195
    dev_priv->status_gfx_addr = 0U;
#line 196
    drm_core_ioremapfree(& dev_priv->hws_map, dev);
  } else {

  }
#line 200
  writel(536866816U, (void volatile   *)(dev_priv->mmio_map)->handle + 8320U);
#line 201
  return;
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_kernel_lost_context(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 205
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 206
  ring = & dev_priv->ring;
#line 208
  tmp = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8244U);
#line 208
  ring->head = (int )tmp & 2097148;
#line 209
  tmp___0 = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 209
  ring->tail = (int )tmp___0 & 2097144;
#line 210
  ring->space = ring->head + (-8 - ring->tail);
#line 211
  if (ring->space < 0) {
#line 212
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 214
  if (ring->head == ring->tail) {
#line 215
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 1;
  } else {

  }
#line 216
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_cleanup(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 220
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 225
  if (dev->irq_enabled != 0) {
#line 226
    drm_irq_uninstall(dev);
  } else {

  }
#line 228
  if ((unsigned long )dev_priv->ring.virtual_start != (unsigned long )((u8 *)0)) {
#line 229
    drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 230
    dev_priv->ring.virtual_start = 0;
#line 231
    dev_priv->ring.map.handle = 0;
#line 232
    dev_priv->ring.map.size = 0UL;
  } else {

  }
#line 236
  if ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 237
    i915_free_hws(dev);
  } else {

  }
#line 239
  return (0);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_initialize(struct drm_device *dev , drm_i915_init_t *init ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 244
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 246
  dev_priv->sarea = drm_getsarea(dev);
#line 247
  if ((unsigned long )dev_priv->sarea == (unsigned long )((drm_local_map_t *)0)) {
#line 248
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_initialize");
#line 249
    i915_dma_cleanup(dev);
#line 250
    return (-22);
  } else {

  }
#line 253
  dev_priv->sarea_priv = (drm_i915_sarea_t *)(dev_priv->sarea)->handle + (unsigned long )init->sarea_priv_offset;
#line 256
  dev_priv->ring.Start = (unsigned long )init->ring_start;
#line 257
  dev_priv->ring.End = (unsigned long )init->ring_end;
#line 258
  dev_priv->ring.Size = (unsigned long )init->ring_size;
#line 259
  dev_priv->ring.tail_mask = (int )((unsigned int )dev_priv->ring.Size - 1U);
#line 261
  dev_priv->ring.map.offset = (unsigned long )init->ring_start;
#line 262
  dev_priv->ring.map.size = (unsigned long )init->ring_size;
#line 263
  dev_priv->ring.map.type = _DRM_FRAME_BUFFER;
#line 264
  dev_priv->ring.map.flags = 0;
#line 265
  dev_priv->ring.map.mtrr = 0;
#line 267
  drm_core_ioremap(& dev_priv->ring.map, dev);
#line 269
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 270
    i915_dma_cleanup(dev);
#line 271
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_initialize");
#line 273
    return (-12);
  } else {

  }
#line 276
  dev_priv->ring.virtual_start = (u8 *)dev_priv->ring.map.handle;
#line 278
  dev_priv->cpp = init->cpp;
#line 279
  dev_priv->back_offset = (int )init->back_offset;
#line 280
  dev_priv->front_offset = (int )init->front_offset;
#line 281
  dev_priv->current_page = 0;
#line 282
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 286
  dev_priv->allow_batchbuffer = 1;
#line 288
  return (0);
}
}
#line 291 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_resume(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 293
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 295
  if (drm_debug != 0U) {
#line 295
    printk("<7>[drm:%s] %s\n", "i915_dma_resume", "i915_dma_resume");
  } else {

  }
#line 297
  if ((unsigned long )dev_priv->sarea == (unsigned long )((drm_local_map_t *)0)) {
#line 298
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_dma_resume");
#line 299
    return (-22);
  } else {

  }
#line 302
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 303
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_dma_resume");
#line 305
    return (-12);
  } else {

  }
#line 309
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 310
    printk("<3>[drm:%s] *ERROR* Can not find hardware status page\n", "i915_dma_resume");
#line 311
    return (-22);
  } else {

  }
#line 313
  if (drm_debug != 0U) {
#line 313
    printk("<7>[drm:%s] hw status page @ %p\n", "i915_dma_resume", dev_priv->hw_status_page);
  } else {

  }
#line 315
  if (dev_priv->status_gfx_addr != 0U) {
#line 316
    writel(dev_priv->status_gfx_addr, (void volatile   *)(dev_priv->mmio_map)->handle + 8320U);
  } else {
#line 318
    writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)(dev_priv->mmio_map)->handle + 8320U);
  }
#line 319
  if (drm_debug != 0U) {
#line 319
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_dma_resume");
  } else {

  }
#line 321
  return (0);
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_init(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_init_t *init ;
  int retcode ;

  {
#line 327
  init = (drm_i915_init_t *)data;
#line 328
  retcode = 0;
#line 330
  switch ((unsigned int )init->func) {
  case 1U: 
#line 332
  retcode = i915_initialize(dev, init);
#line 333
  goto ldv_22988;
  case 2U: 
#line 335
  retcode = i915_dma_cleanup(dev);
#line 336
  goto ldv_22988;
  case 3U: 
#line 338
  retcode = i915_dma_resume(dev);
#line 339
  goto ldv_22988;
  default: 
#line 341
  retcode = -22;
#line 342
  goto ldv_22988;
  }
  ldv_22988: ;
#line 345
  return (retcode);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int do_validate_cmd(int cmd ) 
{ 


  {
#line 359
  switch ((int )((unsigned int )cmd >> 29)) {
  case 0: ;
#line 361
  switch ((cmd >> 23) & 63) {
  case 0: ;
#line 363
  return (1);
  case 4: ;
#line 365
  return (1);
  default: ;
#line 367
  return (0);
  }
#line 369
  goto ldv_22999;
  case 1: ;
#line 371
  return (0);
  case 2: ;
#line 373
  return ((cmd & 255) + 2);
  case 3: ;
#line 375
  if (((cmd >> 24) & 31) <= 24) {
#line 376
    return (1);
  } else {

  }
#line 378
  switch ((cmd >> 24) & 31) {
  case 28: ;
#line 380
  return (1);
  case 29: ;
#line 382
  switch ((cmd >> 16) & 255) {
  case 3: ;
#line 384
  return ((cmd & 31) + 2);
  case 4: ;
#line 386
  return ((cmd & 15) + 2);
  default: ;
#line 388
  return ((cmd & 65535) + 2);
  }
  case 30: ;
#line 391
  if ((cmd & 8388608) != 0) {
#line 392
    return ((cmd & 65535) + 1);
  } else {
#line 394
    return (1);
  }
  case 31: ;
#line 396
  if ((cmd & 8388608) == 0) {
#line 397
    return ((cmd & 131071) + 2);
  } else
#line 398
  if ((cmd & 131072) != 0) {
#line 399
    if ((cmd & 65535) == 0) {
#line 400
      return (0);
    } else {
#line 402
      return (((cmd & 65535) + 1) / 2 + 1);
    }
  } else {
#line 404
    return (2);
  }
  default: ;
#line 406
  return (0);
  }
  default: ;
#line 409
  return (0);
  }
  ldv_22999: ;
#line 412
  return (0);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int validate_cmd(int cmd ) 
{ 
  int ret ;
  int tmp ;

  {
#line 417
  tmp = do_validate_cmd(cmd);
#line 417
  ret = tmp;
#line 421
  return (ret);
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_emit_cmds(struct drm_device *dev , int *buffer , int dwords ) 
{ 
  drm_i915_private_t *dev_priv ;
  int i ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int cmd ;
  int sz ;
  int tmp ;
  int tmp___0 ;

  {
#line 426
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 430
  if ((unsigned long )(dwords + 1) * 4UL >= dev_priv->ring.Size - 8UL) {
#line 431
    return (-22);
  } else {

  }
#line 433
  if (dev_priv->ring.space < ((dwords + 1) & -2) * 4) {
#line 433
    i915_wait_ring(dev, ((dwords + 1) & -2) * 4, "i915_emit_cmds");
  } else {

  }
#line 433
  outcount = 0U;
#line 433
  outring = (unsigned int )dev_priv->ring.tail;
#line 433
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 433
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 435
  i = 0;
#line 435
  goto ldv_23034;
  ldv_23033: 
#line 438
  tmp = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                         4U);
#line 438
  if (tmp != 0) {
#line 439
    return (-22);
  } else {

  }
#line 441
  sz = validate_cmd(cmd);
#line 441
  if (sz == 0 || i + sz > dwords) {
#line 442
    return (-22);
  } else {

  }
#line 444
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 444
  outcount = outcount + 1U;
#line 444
  outring = outring + 4U;
#line 444
  outring = outring & ringmask;
#line 446
  goto ldv_23031;
  ldv_23030: 
#line 447
  tmp___0 = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                             4U);
#line 447
  if (tmp___0 != 0) {
#line 449
    return (-22);
  } else {

  }
#line 451
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 451
  outcount = outcount + 1U;
#line 451
  outring = outring + 4U;
#line 451
  outring = outring & ringmask;
  ldv_23031: 
#line 446
  i = i + 1;
#line 446
  sz = sz - 1;
#line 446
  if (sz != 0) {
#line 447
    goto ldv_23030;
  } else {

  }

  ldv_23034: ;
#line 435
  if (i < dwords) {
#line 436
    goto ldv_23033;
  } else {

  }

#line 455
  if (dwords & 1) {
#line 456
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 456
    outcount = outcount + 1U;
#line 456
    outring = outring + 4U;
#line 456
    outring = outring & ringmask;
  } else {

  }
#line 458
  dev_priv->ring.tail = (int )outring;
#line 458
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 458
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 460
  return (0);
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i ,
                         int DR1 , int DR4 ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect box ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int tmp ;

  {
#line 467
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 471
  tmp = __copy_from_user((void *)(& box), (void const   *)boxes + (unsigned long )i,
                         8U);
#line 471
  if (tmp != 0) {
#line 472
    return (-14);
  } else {

  }
#line 475
  if ((((int )box.y2 <= (int )box.y1 || (int )box.x2 <= (int )box.x1) || (unsigned int )box.y2 == 0U) || (unsigned int )box.x2 == 0U) {
#line 476
    printk("<3>[drm:%s] *ERROR* Bad box %d,%d..%d,%d\n", "i915_emit_box", (int )box.x1,
           (int )box.y1, (int )box.x2, (int )box.y2);
#line 478
    return (-22);
  } else {

  }
#line 481
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 482
    if (dev_priv->ring.space <= 15) {
#line 482
      i915_wait_ring(dev, 16, "i915_emit_box");
    } else {

    }
#line 482
    outcount = 0U;
#line 482
    outring = (unsigned int )dev_priv->ring.tail;
#line 482
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 482
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 483
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2030043138U;
#line 483
    outcount = outcount + 1U;
#line 483
    outring = outring + 4U;
#line 483
    outring = outring & ringmask;
#line 484
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 484
    outcount = outcount + 1U;
#line 484
    outring = outring + 4U;
#line 484
    outring = outring & ringmask;
#line 485
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 485
    outcount = outcount + 1U;
#line 485
    outring = outring + 4U;
#line 485
    outring = outring & ringmask;
#line 486
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 486
    outcount = outcount + 1U;
#line 486
    outring = outring + 4U;
#line 486
    outring = outring & ringmask;
#line 487
    dev_priv->ring.tail = (int )outring;
#line 487
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 487
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  } else {
#line 489
    if (dev_priv->ring.space <= 23) {
#line 489
      i915_wait_ring(dev, 24, "i915_emit_box");
    } else {

    }
#line 489
    outcount = 0U;
#line 489
    outring = (unsigned int )dev_priv->ring.tail;
#line 489
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 489
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 490
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2105540611U;
#line 490
    outcount = outcount + 1U;
#line 490
    outring = outring + 4U;
#line 490
    outring = outring & ringmask;
#line 491
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR1;
#line 491
    outcount = outcount + 1U;
#line 491
    outring = outring + 4U;
#line 491
    outring = outring & ringmask;
#line 492
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 492
    outcount = outcount + 1U;
#line 492
    outring = outring + 4U;
#line 492
    outring = outring & ringmask;
#line 493
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 493
    outcount = outcount + 1U;
#line 493
    outring = outring + 4U;
#line 493
    outring = outring & ringmask;
#line 494
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 494
    outcount = outcount + 1U;
#line 494
    outring = outring + 4U;
#line 494
    outring = outring & ringmask;
#line 495
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 495
    outcount = outcount + 1U;
#line 495
    outring = outring + 4U;
#line 495
    outring = outring & ringmask;
#line 496
    dev_priv->ring.tail = (int )outring;
#line 496
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 496
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  }
#line 499
  return (0);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static void i915_emit_breadcrumb(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 508
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 511
  dev_priv->counter = dev_priv->counter + 1UL;
#line 511
  (dev_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
#line 513
  if (dev_priv->counter > 2147483647UL) {
#line 514
    dev_priv->counter = 1UL;
#line 514
    (dev_priv->sarea_priv)->last_enqueue = 1;
  } else {

  }
#line 516
  if (dev_priv->ring.space <= 15) {
#line 516
    i915_wait_ring(dev, 16, "i915_emit_breadcrumb");
  } else {

  }
#line 516
  outcount = 0U;
#line 516
  outring = (unsigned int )dev_priv->ring.tail;
#line 516
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 516
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 517
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 517
  outcount = outcount + 1U;
#line 517
  outring = outring + 4U;
#line 517
  outring = outring & ringmask;
#line 518
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 20U;
#line 518
  outcount = outcount + 1U;
#line 518
  outring = outring + 4U;
#line 518
  outring = outring & ringmask;
#line 519
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->counter;
#line 519
  outcount = outcount + 1U;
#line 519
  outring = outring + 4U;
#line 519
  outring = outring & ringmask;
#line 520
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 520
  outcount = outcount + 1U;
#line 520
  outring = outring + 4U;
#line 520
  outring = outring & ringmask;
#line 521
  dev_priv->ring.tail = (int )outring;
#line 521
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 521
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 522
  return;
}
}
#line 524 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_cmdbuffer(struct drm_device *dev , drm_i915_cmdbuffer_t *cmd ) 
{ 
  int nbox ;
  int i ;
  int count ;
  int ret ;

  {
#line 527
  nbox = cmd->num_cliprects;
#line 528
  i = 0;
#line 530
  if ((cmd->sz & 3) != 0) {
#line 531
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_cmdbuffer");
#line 532
    return (-22);
  } else {

  }
#line 535
  i915_kernel_lost_context(dev);
#line 537
  count = nbox != 0 ? nbox : 1;
#line 539
  i = 0;
#line 539
  goto ldv_23069;
  ldv_23068: ;
#line 540
  if (i < nbox) {
#line 541
    ret = i915_emit_box(dev, cmd->cliprects, i, cmd->DR1, cmd->DR4);
#line 543
    if (ret != 0) {
#line 544
      return (ret);
    } else {

    }
  } else {

  }
#line 547
  ret = i915_emit_cmds(dev, (int *)cmd->buf, cmd->sz / 4);
#line 548
  if (ret != 0) {
#line 549
    return (ret);
  } else {

  }
#line 539
  i = i + 1;
  ldv_23069: ;
#line 539
  if (i < count) {
#line 540
    goto ldv_23068;
  } else {

  }
#line 552
  i915_emit_breadcrumb(dev);
#line 553
  return (0);
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_batchbuffer(struct drm_device *dev , drm_i915_batchbuffer_t *batch ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 559
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 560
  boxes = batch->cliprects;
#line 561
  nbox = batch->num_cliprects;
#line 562
  i = 0;
#line 565
  if (((batch->start | batch->used) & 7) != 0) {
#line 566
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_batchbuffer");
#line 567
    return (-22);
  } else {

  }
#line 570
  i915_kernel_lost_context(dev);
#line 572
  count = nbox != 0 ? nbox : 1;
#line 574
  i = 0;
#line 574
  goto ldv_23087;
  ldv_23086: ;
#line 575
  if (i < nbox) {
#line 576
    tmp = i915_emit_box(dev, boxes, i, batch->DR1, batch->DR4);
#line 576
    ret = tmp;
#line 578
    if (ret != 0) {
#line 579
      return (ret);
    } else {

    }
  } else {

  }
#line 582
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 583
    if (dev_priv->ring.space <= 7) {
#line 583
      i915_wait_ring(dev, 8, "i915_dispatch_batchbuffer");
    } else {

    }
#line 583
    outcount = 0U;
#line 583
    outring = (unsigned int )dev_priv->ring.tail;
#line 583
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 583
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 584
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 585
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411042176U;
#line 585
      outcount = outcount + 1U;
#line 585
      outring = outring + 4U;
#line 585
      outring = outring & ringmask;
#line 586
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )batch->start;
#line 586
      outcount = outcount + 1U;
#line 586
      outring = outring + 4U;
#line 586
      outring = outring & ringmask;
    } else {
#line 588
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411041920U;
#line 588
      outcount = outcount + 1U;
#line 588
      outring = outring + 4U;
#line 588
      outring = outring & ringmask;
#line 589
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 589
      outcount = outcount + 1U;
#line 589
      outring = outring + 4U;
#line 589
      outring = outring & ringmask;
    }
#line 591
    dev_priv->ring.tail = (int )outring;
#line 591
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 591
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  } else {
#line 593
    if (dev_priv->ring.space <= 15) {
#line 593
      i915_wait_ring(dev, 16, "i915_dispatch_batchbuffer");
    } else {

    }
#line 593
    outcount = 0U;
#line 593
    outring = (unsigned int )dev_priv->ring.tail;
#line 593
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 593
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 594
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 402653185U;
#line 594
    outcount = outcount + 1U;
#line 594
    outring = outring + 4U;
#line 594
    outring = outring & ringmask;
#line 595
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 595
    outcount = outcount + 1U;
#line 595
    outring = outring + 4U;
#line 595
    outring = outring & ringmask;
#line 596
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((batch->start + batch->used) + -4);
#line 596
    outcount = outcount + 1U;
#line 596
    outring = outring + 4U;
#line 596
    outring = outring & ringmask;
#line 597
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 597
    outcount = outcount + 1U;
#line 597
    outring = outring + 4U;
#line 597
    outring = outring & ringmask;
#line 598
    dev_priv->ring.tail = (int )outring;
#line 598
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 598
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  }
#line 574
  i = i + 1;
  ldv_23087: ;
#line 574
  if (i < count) {
#line 575
    goto ldv_23086;
  } else {

  }
#line 602
  i915_emit_breadcrumb(dev);
#line 604
  return (0);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_flip(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  unsigned long tmp ;

  {
#line 609
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 612
  if (drm_debug != 0U) {
#line 612
    printk("<7>[drm:%s] %s: page=%d pfCurrentPage=%d\n", "i915_dispatch_flip", "i915_dispatch_flip",
           dev_priv->current_page, (dev_priv->sarea_priv)->pf_current_page);
  } else {

  }
#line 617
  i915_kernel_lost_context(dev);
#line 619
  if (dev_priv->ring.space <= 7) {
#line 619
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 619
  outcount = 0U;
#line 619
  outring = (unsigned int )dev_priv->ring.tail;
#line 619
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 619
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 620
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 33554433U;
#line 620
  outcount = outcount + 1U;
#line 620
  outring = outring + 4U;
#line 620
  outring = outring & ringmask;
#line 621
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 621
  outcount = outcount + 1U;
#line 621
  outring = outring + 4U;
#line 621
  outring = outring & ringmask;
#line 622
  dev_priv->ring.tail = (int )outring;
#line 622
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 622
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 624
  if (dev_priv->ring.space <= 23) {
#line 624
    i915_wait_ring(dev, 24, "i915_dispatch_flip");
  } else {

  }
#line 624
  outcount = 0U;
#line 624
  outring = (unsigned int )dev_priv->ring.tail;
#line 624
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 624
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 625
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 171966466U;
#line 625
  outcount = outcount + 1U;
#line 625
  outring = outring + 4U;
#line 625
  outring = outring & ringmask;
#line 626
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 626
  outcount = outcount + 1U;
#line 626
  outring = outring + 4U;
#line 626
  outring = outring & ringmask;
#line 627
  if (dev_priv->current_page == 0) {
#line 628
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->back_offset;
#line 628
    outcount = outcount + 1U;
#line 628
    outring = outring + 4U;
#line 628
    outring = outring & ringmask;
#line 629
    dev_priv->current_page = 1;
  } else {
#line 631
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->front_offset;
#line 631
    outcount = outcount + 1U;
#line 631
    outring = outring + 4U;
#line 631
    outring = outring & ringmask;
#line 632
    dev_priv->current_page = 0;
  }
#line 634
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 634
  outcount = outcount + 1U;
#line 634
  outring = outring + 4U;
#line 634
  outring = outring & ringmask;
#line 635
  dev_priv->ring.tail = (int )outring;
#line 635
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 635
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 637
  if (dev_priv->ring.space <= 7) {
#line 637
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 637
  outcount = 0U;
#line 637
  outring = (unsigned int )dev_priv->ring.tail;
#line 637
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 637
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 638
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 25165828U;
#line 638
  outcount = outcount + 1U;
#line 638
  outring = outring + 4U;
#line 638
  outring = outring & ringmask;
#line 639
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 639
  outcount = outcount + 1U;
#line 639
  outring = outring + 4U;
#line 639
  outring = outring & ringmask;
#line 640
  dev_priv->ring.tail = (int )outring;
#line 640
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 640
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 642
  tmp = dev_priv->counter;
#line 642
  dev_priv->counter = dev_priv->counter + 1UL;
#line 642
  (dev_priv->sarea_priv)->last_enqueue = (int )tmp;
#line 644
  if (dev_priv->ring.space <= 15) {
#line 644
    i915_wait_ring(dev, 16, "i915_dispatch_flip");
  } else {

  }
#line 644
  outcount = 0U;
#line 644
  outring = (unsigned int )dev_priv->ring.tail;
#line 644
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 644
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 645
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 645
  outcount = outcount + 1U;
#line 645
  outring = outring + 4U;
#line 645
  outring = outring & ringmask;
#line 646
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 20U;
#line 646
  outcount = outcount + 1U;
#line 646
  outring = outring + 4U;
#line 646
  outring = outring & ringmask;
#line 647
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->counter;
#line 647
  outcount = outcount + 1U;
#line 647
  outring = outring + 4U;
#line 647
  outring = outring & ringmask;
#line 648
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 648
  outcount = outcount + 1U;
#line 648
  outring = outring + 4U;
#line 648
  outring = outring & ringmask;
#line 649
  dev_priv->ring.tail = (int )outring;
#line 649
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 649
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 651
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 652
  return (0);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_quiescent(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 657
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 659
  i915_kernel_lost_context(dev);
#line 660
  tmp = i915_wait_ring(dev, (int )((unsigned int )dev_priv->ring.Size - 8U), "i915_quiescent");
#line 660
  return (tmp);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flush_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 666
  if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 666
    printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
           "i915_flush_ioctl", "i915_flush_ioctl", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
           dev->lock.file_priv, file_priv);
#line 666
    return (-22);
  } else {

  }
#line 668
  tmp = i915_quiescent(dev);
#line 668
  return (tmp);
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_batchbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 *hw_status ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_batchbuffer_t *batch ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 674
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 675
  hw_status = (u32 *)dev_priv->hw_status_page;
#line 676
  sarea_priv = dev_priv->sarea_priv;
#line 678
  batch = (drm_i915_batchbuffer_t *)data;
#line 681
  if (dev_priv->allow_batchbuffer == 0) {
#line 682
    printk("<3>[drm:%s] *ERROR* Batchbuffer ioctl disabled\n", "i915_batchbuffer");
#line 683
    return (-22);
  } else {

  }
#line 686
  if (drm_debug != 0U) {
#line 686
    printk("<7>[drm:%s] i915 batchbuffer, start %x used %d cliprects %d\n", "i915_batchbuffer",
           batch->start, batch->used, batch->num_cliprects);
  } else {

  }
#line 689
  if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 689
    printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
           "i915_batchbuffer", "i915_batchbuffer", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
           dev->lock.file_priv, file_priv);
#line 689
    return (-22);
  } else {

  }
#line 691
  if (batch->num_cliprects != 0) {
#line 691
    tmp = current_thread_info();
#line 691
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batch->cliprects),
              "g" ((long )((unsigned long )batch->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 691
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 691
    if (tmp___0 == 0L) {
#line 694
      return (-14);
    } else {

    }
  } else {

  }
#line 696
  ret = i915_dispatch_batchbuffer(dev, batch);
#line 698
  sarea_priv->last_dispatch = (int )*(hw_status + 5UL);
#line 699
  return (ret);
}
}
#line 702 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_cmdbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  u32 *hw_status ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_cmdbuffer_t *cmdbuf ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 705
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 706
  hw_status = (u32 *)dev_priv->hw_status_page;
#line 707
  sarea_priv = dev_priv->sarea_priv;
#line 709
  cmdbuf = (drm_i915_cmdbuffer_t *)data;
#line 712
  if (drm_debug != 0U) {
#line 712
    printk("<7>[drm:%s] i915 cmdbuffer, buf %p sz %d cliprects %d\n", "i915_cmdbuffer",
           cmdbuf->buf, cmdbuf->sz, cmdbuf->num_cliprects);
  } else {

  }
#line 715
  if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 715
    printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
           "i915_cmdbuffer", "i915_cmdbuffer", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
           dev->lock.file_priv, file_priv);
#line 715
    return (-22);
  } else {

  }
#line 718
  if (cmdbuf->num_cliprects != 0) {
#line 718
    tmp = current_thread_info();
#line 718
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuf->cliprects),
              "g" ((long )((unsigned long )cmdbuf->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 718
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 718
    if (tmp___0 == 0L) {
#line 721
      printk("<3>[drm:%s] *ERROR* Fault accessing cliprects\n", "i915_cmdbuffer");
#line 722
      return (-14);
    } else {

    }
  } else {

  }
#line 725
  ret = i915_dispatch_cmdbuffer(dev, cmdbuf);
#line 726
  if (ret != 0) {
#line 727
    printk("<3>[drm:%s] *ERROR* i915_dispatch_cmdbuffer failed\n", "i915_cmdbuffer");
#line 728
    return (ret);
  } else {

  }
#line 731
  sarea_priv->last_dispatch = (int )*(hw_status + 5UL);
#line 732
  return (0);
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flip_bufs(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 738
  if (drm_debug != 0U) {
#line 738
    printk("<7>[drm:%s] %s\n", "i915_flip_bufs", "i915_flip_bufs");
  } else {

  }
#line 740
  if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 740
    printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
           "i915_flip_bufs", "i915_flip_bufs", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
           dev->lock.file_priv, file_priv);
#line 740
    return (-22);
  } else {

  }
#line 742
  tmp = i915_dispatch_flip(dev);
#line 742
  return (tmp);
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_getparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_getparam_t *param ;
  int value ;
  unsigned long tmp ;

  {
#line 748
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 749
  param = (drm_i915_getparam_t *)data;
#line 752
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 753
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_getparam");
#line 754
    return (-22);
  } else {

  }
#line 757
  switch (param->param) {
  case 1: 
#line 759
  value = dev->irq_enabled;
#line 760
  goto ldv_23153;
  case 2: 
#line 762
  value = dev_priv->allow_batchbuffer != 0;
#line 763
  goto ldv_23153;
  case 3: 
#line 765
  value = (int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL);
#line 766
  goto ldv_23153;
  default: 
#line 768
  printk("<3>[drm:%s] *ERROR* Unknown parameter %d\n", "i915_getparam", param->param);
#line 769
  return (-22);
  }
  ldv_23153: 
#line 772
  tmp = copy_to_user((void *)param->value, (void const   *)(& value), 4U);
#line 772
  if (tmp != 0UL) {
#line 773
    printk("<3>[drm:%s] *ERROR* DRM_COPY_TO_USER failed\n", "i915_getparam");
#line 774
    return (-14);
  } else {

  }
#line 777
  return (0);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_setparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_setparam_t *param ;

  {
#line 783
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 784
  param = (drm_i915_setparam_t *)data;
#line 786
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 787
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_setparam");
#line 788
    return (-22);
  } else {

  }
#line 791
  switch (param->param) {
  case 1: ;
#line 793
  goto ldv_23166;
  case 2: 
#line 795
  dev_priv->tex_lru_log_granularity = param->value;
#line 796
  goto ldv_23166;
  case 3: 
#line 798
  dev_priv->allow_batchbuffer = param->value;
#line 799
  goto ldv_23166;
  default: 
#line 801
  printk("<3>[drm:%s] *ERROR* unknown parameter %d\n", "i915_setparam", param->param);
#line 802
  return (-22);
  }
  ldv_23166: ;
#line 805
  return (0);
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_set_status_page(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_hws_addr_t *hws ;

  {
#line 811
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 812
  hws = (drm_i915_hws_addr_t *)data;
#line 814
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && ((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 815
    return (-22);
  } else {

  }
#line 817
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 818
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_set_status_page");
#line 819
    return (-22);
  } else {

  }
#line 822
  printk("<7>set status page addr 0x%08x\n", (unsigned int )hws->addr);
#line 824
  dev_priv->status_gfx_addr = (unsigned int )hws->addr & 536866816U;
#line 826
  dev_priv->hws_map.offset = (unsigned long )((unsigned long long )(dev->agp)->base + hws->addr);
#line 827
  dev_priv->hws_map.size = 4096UL;
#line 828
  dev_priv->hws_map.type = _DRM_FRAME_BUFFER;
#line 829
  dev_priv->hws_map.flags = 0;
#line 830
  dev_priv->hws_map.mtrr = 0;
#line 832
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 833
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 834
    i915_dma_cleanup(dev);
#line 835
    dev_priv->status_gfx_addr = 0U;
#line 836
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for G33 hw status page\n",
           "i915_set_status_page");
#line 838
    return (-12);
  } else {

  }
#line 840
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 842
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 843
  writel(dev_priv->status_gfx_addr, (void volatile   *)(dev_priv->mmio_map)->handle + 8320U);
#line 844
  if (drm_debug != 0U) {
#line 844
    printk("<7>[drm:%s] load hws HWS_PGA with gfx mem 0x%x\n", "i915_set_status_page",
           dev_priv->status_gfx_addr);
  } else {

  }
#line 846
  if (drm_debug != 0U) {
#line 846
    printk("<7>[drm:%s] load hws at %p\n", "i915_set_status_page", dev_priv->hw_status_page);
  } else {

  }
#line 847
  return (0);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_load(struct drm_device *dev , unsigned long flags ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long base ;
  unsigned long size ;
  int ret ;
  int mmio_bar ;
  void *tmp ;
  struct lock_class_key __key ;

  {
#line 852
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 854
  ret = 0;
#line 854
  mmio_bar = (((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706);
#line 857
  dev->counters = dev->counters + 4UL;
#line 858
  dev->types[6] = _DRM_STAT_IRQ;
#line 859
  dev->types[7] = _DRM_STAT_PRIMARY;
#line 860
  dev->types[8] = _DRM_STAT_SECONDARY;
#line 861
  dev->types[9] = _DRM_STAT_DMA;
#line 863
  tmp = drm_alloc(3856UL, 2);
#line 863
  dev_priv = (struct drm_i915_private *)tmp;
#line 864
  if ((unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 865
    return (-12);
  } else {

  }
#line 867
  memset((void *)dev_priv, 0, 3856UL);
#line 869
  dev->dev_private = (void *)dev_priv;
#line 872
  base = drm_get_resource_start(dev, (unsigned int )mmio_bar);
#line 873
  size = drm_get_resource_len(dev, (unsigned int )mmio_bar);
#line 875
  ret = drm_addmap(dev, (unsigned int )base, (unsigned int )size, _DRM_REGISTERS,
                   136, & dev_priv->mmio_map);
#line 880
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && ((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 881
    ret = i915_init_phys_hws(dev);
#line 882
    if (ret != 0) {
#line 883
      return (ret);
    } else {

    }
  } else {

  }
#line 893
  if (dev->pci_device != 10098 && (dev->pci_device != 10146 && dev->pci_device != 10158)) {
#line 894
    pci_enable_msi(dev->pdev);
  } else {

  }
#line 896
  __spin_lock_init(& dev_priv->user_irq_lock, "&dev_priv->user_irq_lock", & __key);
#line 898
  return (ret);
}
}
#line 901 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_unload(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 903
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 905
  if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 906
    pci_disable_msi(dev->pdev);
  } else {

  }
#line 908
  i915_free_hws(dev);
#line 910
  if ((unsigned long )dev_priv->mmio_map != (unsigned long )((drm_local_map_t *)0)) {
#line 911
    drm_rmmap(dev, dev_priv->mmio_map);
  } else {

  }
#line 913
  drm_free(dev->dev_private, 3856UL, 2);
#line 916
  return (0);
}
}
#line 919 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_lastclose(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 921
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 923
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 924
    return;
  } else {

  }
#line 926
  if ((unsigned long )dev_priv->agp_heap != (unsigned long )((struct mem_block *)0)) {
#line 927
    i915_mem_takedown(& dev_priv->agp_heap);
  } else {

  }
#line 929
  i915_dma_cleanup(dev);
#line 930
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 934
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 935
  i915_mem_release(dev, file_priv, dev_priv->agp_heap);
#line 936
  return;
}
}
#line 938 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
struct drm_ioctl_desc i915_ioctls[18U]  = 
#line 938
  {      {0U, & i915_dma_init, 7}, 
        {1U, & i915_flush_ioctl, 1}, 
        {2U, & i915_flip_bufs, 1}, 
        {3U, & i915_batchbuffer, 1}, 
        {4U, & i915_irq_emit, 1}, 
        {5U, & i915_irq_wait, 1}, 
        {6U, & i915_getparam, 1}, 
        {7U, & i915_setparam, 7}, 
        {8U, & i915_mem_alloc, 1}, 
        {9U, & i915_mem_free, 1}, 
        {10U, & i915_mem_init_heap, 7}, 
        {11U, & i915_cmdbuffer, 1}, 
        {12U, & i915_mem_destroy_heap, 7}, 
        {13U, & i915_vblank_pipe_set, 7}, 
        {14U, & i915_vblank_pipe_get, 1}, 
        {15U, & i915_vblank_swap, 1}, 
        {0U, 0, 0}, 
        {17U, & i915_set_status_page, 1}};
#line 958 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_max_ioctl  =    18;
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_device_is_agp(struct drm_device *dev ) 
{ 


  {
#line 973
  return (1);
}
}
#line 976 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_37(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 981
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 983
  __ldv_spin_lock(ldv_func_arg1);
#line 984
  return;
}
}
#line 986 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_38(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 991
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 993
  __ldv_spin_unlock(ldv_func_arg1);
#line 994
  return;
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int ldv___ldv_spin_trylock_39(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1001
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 1001
  ldv_func_res = tmp;
#line 1003
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 1003
  return (tmp___0);
#line 1005
  return (ldv_func_res);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_40(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1013
  ldv_spin_lock_dcache_lock();
#line 1015
  __ldv_spin_lock(ldv_func_arg1);
#line 1016
  return;
}
}
#line 1018 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_41(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1023
  ldv_spin_lock_d_lock_of_dentry();
#line 1025
  __ldv_spin_lock(ldv_func_arg1);
#line 1026
  return;
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_42(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1033
  ldv_spin_unlock_d_lock_of_dentry();
#line 1035
  __ldv_spin_unlock(ldv_func_arg1);
#line 1036
  return;
}
}
#line 1038 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_43(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1043
  ldv_spin_unlock_dcache_lock();
#line 1045
  __ldv_spin_unlock(ldv_func_arg1);
#line 1046
  return;
}
}
#line 1048 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1053
  ldv_spin_lock_d_lock_of_dentry();
#line 1055
  __ldv_spin_lock(ldv_func_arg1);
#line 1056
  return;
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_45(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1063
  ldv_spin_unlock_d_lock_of_dentry();
#line 1065
  __ldv_spin_unlock(ldv_func_arg1);
#line 1066
  return;
}
}
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1073
  ldv_spin_lock_i_lock_of_inode();
#line 1075
  __ldv_spin_lock(ldv_func_arg1);
#line 1076
  return;
}
}
#line 1078 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_47(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1083
  ldv_spin_unlock_i_lock_of_inode();
#line 1085
  __ldv_spin_unlock(ldv_func_arg1);
#line 1086
  return;
}
}
#line 1088 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1093
  ldv_spin_lock_d_lock_of_dentry();
#line 1095
  __ldv_spin_lock(ldv_func_arg1);
#line 1096
  return;
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_49(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1103
  ldv_spin_unlock_d_lock_of_dentry();
#line 1105
  __ldv_spin_unlock(ldv_func_arg1);
#line 1106
  return;
}
}
#line 1108 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_50(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1113
  ldv_spin_lock_siglock_of_sighand_struct();
#line 1115
  __ldv_spin_lock(ldv_func_arg1);
#line 1116
  return;
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_51(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1123
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1125
  __ldv_spin_unlock(ldv_func_arg1);
#line 1126
  return;
}
}
#line 1128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_lock_52(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1133
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 1135
  __ldv_spin_lock(ldv_func_arg1);
#line 1136
  return;
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_53(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1143
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 1145
  __ldv_spin_unlock(ldv_func_arg1);
#line 1146
  return;
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv___ldv_spin_unlock_54(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1153
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 1155
  __ldv_spin_unlock(ldv_func_arg1);
#line 1156
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 301 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 23 "include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (8UL) {
  case 2UL: 
#line 25
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4087;
  case 4UL: 
#line 25
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4087;
  case 8UL: 
#line 25
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4087;
  default: 
#line 25
  __bad_pda_field();
  }
  ldv_4087: ;
#line 25
  return (ret__);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 78
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 78
  return (tmp);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 95 "include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1 ) ;
#line 48
void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1 ) ;
#line 52
void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1 ) ;
#line 56
void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1 ) ;
#line 60
void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1 ) ;
#line 64
void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1 ) ;
#line 68
void ldv___ldv_spin_lock_106(spinlock_t *ldv_func_arg1 ) ;
#line 72
void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1 ) ;
#line 76
void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1 ) ;
#line 81
void ldv___ldv_spin_unlock_74(spinlock_t *ldv_func_arg1 ) ;
#line 85
void ldv___ldv_spin_unlock_78(spinlock_t *ldv_func_arg1 ) ;
#line 89
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) ;
#line 93
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) ;
#line 97
void ldv___ldv_spin_unlock_83(spinlock_t *ldv_func_arg1 ) ;
#line 101
void ldv___ldv_spin_unlock_85(spinlock_t *ldv_func_arg1 ) ;
#line 105
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) ;
#line 109
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) ;
#line 113
void ldv___ldv_spin_unlock_90(spinlock_t *ldv_func_arg1 ) ;
#line 117
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) ;
#line 121
void ldv___ldv_spin_unlock_94(spinlock_t *ldv_func_arg1 ) ;
#line 125
void ldv___ldv_spin_unlock_96(spinlock_t *ldv_func_arg1 ) ;
#line 129
void ldv___ldv_spin_unlock_98(spinlock_t *ldv_func_arg1 ) ;
#line 133
void ldv___ldv_spin_unlock_99(spinlock_t *ldv_func_arg1 ) ;
#line 137
void ldv___ldv_spin_unlock_101(spinlock_t *ldv_func_arg1 ) ;
#line 141
void ldv___ldv_spin_unlock_103(spinlock_t *ldv_func_arg1 ) ;
#line 145
void ldv___ldv_spin_unlock_105(spinlock_t *ldv_func_arg1 ) ;
#line 149
void ldv___ldv_spin_unlock_107(spinlock_t *ldv_func_arg1 ) ;
#line 153
void ldv___ldv_spin_unlock_108(spinlock_t *ldv_func_arg1 ) ;
#line 157
void ldv___ldv_spin_unlock_110(spinlock_t *ldv_func_arg1 ) ;
#line 161
void ldv___ldv_spin_unlock_111(spinlock_t *ldv_func_arg1 ) ;
#line 165
void ldv___ldv_spin_unlock_113(spinlock_t *ldv_func_arg1 ) ;
#line 170
int ldv___ldv_spin_trylock_75(spinlock_t *ldv_func_arg1 ) ;
#line 200
void ldv_spin_lock_drw_lock_of_drm_device(void) ;
#line 201
void ldv_spin_unlock_drw_lock_of_drm_device(void) ;
#line 232
void ldv_spin_lock_swaps_lock_of_drm_i915_private(void) ;
#line 233
void ldv_spin_unlock_swaps_lock_of_drm_i915_private(void) ;
#line 240
void ldv_spin_lock_user_irq_lock_of_drm_i915_private(void) ;
#line 241
void ldv_spin_unlock_user_irq_lock_of_drm_i915_private(void) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 111
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 113
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 135
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 182 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 184
  if (size != 0UL && 0xffffffffffffffffUL / size < n) {
#line 185
    return (0);
  } else {

  }
#line 186
  tmp = __kmalloc(n * size, flags | 32768U);
#line 186
  return (tmp);
}
}
#line 329 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2000 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2002
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2002
  return (tmp);
}
}
#line 2020 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2022
  tmp = test_tsk_thread_flag(p, 2);
#line 2022
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2022
  return ((int )tmp___0);
}
}
#line 922 "include/drm/drmP.h"
extern struct drm_drawable_info *drm_get_drawable_info(struct drm_device * , drm_drawable_t  ) ;
#line 996
extern void drm_vbl_send_signals(struct drm_device * ) ;
#line 997
extern void drm_locked_tasklet(struct drm_device * , void (*)(struct drm_device * ) ) ;
#line 1141 "include/drm/drmP.h"
__inline static void *drm_calloc(size_t nmemb , size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1143
  tmp = kcalloc(nmemb, size, 208U);
#line 1143
  return (tmp);
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 127
  if ((dev_priv->irq_mask_reg & mask) != 0U) {
#line 128
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & ~ mask;
#line 129
    writel(dev_priv->irq_mask_reg, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 130
    readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8360U);
  } else {

  }
#line 132
  return;
}
}
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static void i915_disable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 137
  if ((dev_priv->irq_mask_reg & mask) != mask) {
#line 138
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg | mask;
#line 139
    writel(dev_priv->irq_mask_reg, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 140
    readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8360U);
  } else {

  }
#line 142
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static void i915_vblank_tasklet(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct list_head *list ;
  struct list_head *tmp ;
  struct list_head hits ;
  struct list_head *hit ;
  int nhits ;
  int nrects ;
  int slice[2U] ;
  int upper[2U] ;
  int lower[2U] ;
  int i ;
  unsigned int counter[2U] ;
  struct drm_drawable_info *drw ;
  drm_i915_sarea_t *sarea_priv ;
  u32 cpp ;
  u32 cmd ;
  u32 src_pitch ;
  u32 dst_pitch ;
  u32 ropcpp ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  drm_i915_vbl_swap_t *vbl_swap ;
  struct list_head  const  *__mptr ;
  drm_i915_vbl_swap_t *swap_cmp ;
  struct list_head  const  *__mptr___0 ;
  struct drm_drawable_info *drw_cmp ;
  struct drm_drawable_info *tmp___0 ;
  int _max1 ;
  int _max2 ;
  int _max1___0 ;
  int _max2___0 ;
  drm_i915_vbl_swap_t *swap_hit ;
  struct list_head  const  *__mptr___1 ;
  struct drm_clip_rect *rect ;
  int num_rects ;
  int pipe ;
  unsigned short top ;
  unsigned short bottom ;
  int y1 ;
  unsigned short _max1___1 ;
  unsigned short _max2___1 ;
  int y2 ;
  unsigned short _min1 ;
  unsigned short _min2 ;
  int tmp___1 ;
  int tmp___2 ;
  drm_i915_vbl_swap_t *swap_hit___0 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 151
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 155
  counter[0] = (unsigned int )dev->vbl_received.counter;
#line 155
  counter[1] = (unsigned int )dev->vbl_received2.counter;
#line 158
  sarea_priv = dev_priv->sarea_priv;
#line 159
  cpp = dev_priv->cpp;
#line 160
  cmd = cpp == 4U ? 1425014790U : 1421869062U;
#line 164
  src_pitch = (u32 )sarea_priv->pitch * cpp;
#line 165
  dst_pitch = (u32 )sarea_priv->pitch * cpp;
#line 166
  ropcpp = ((cpp - 1U) << 24) | 13369344U;
#line 169
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && sarea_priv->front_tiled != 0U) {
#line 170
    cmd = cmd | 2048U;
#line 171
    dst_pitch = dst_pitch >> 2;
  } else {

  }
#line 173
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && sarea_priv->back_tiled != 0U) {
#line 174
    cmd = cmd | 32768U;
#line 175
    src_pitch = src_pitch >> 2;
  } else {

  }
#line 178
  if (drm_debug != 0U) {
#line 178
    printk("<7>[drm:%s] \n", "i915_vblank_tasklet");
  } else {

  }
#line 180
  INIT_LIST_HEAD(& hits);
#line 182
  nrects = 0;
#line 182
  nhits = nrects;
#line 184
  ldv___ldv_spin_lock_91(& dev_priv->swaps_lock);
#line 187
  list = dev_priv->vbl_swaps.head.next;
#line 187
  tmp = list->next;
#line 187
  goto ldv_23076;
  ldv_23075: 
#line 189
  __mptr = (struct list_head  const  *)list;
#line 189
  vbl_swap = (drm_i915_vbl_swap_t *)__mptr;
#line 191
  if (counter[vbl_swap->pipe] - vbl_swap->sequence > 8388608U) {
#line 192
    goto ldv_23067;
  } else {

  }
#line 194
  list_del(list);
#line 195
  dev_priv->swaps_pending = dev_priv->swaps_pending - 1U;
#line 197
  ldv___ldv_spin_unlock_92(& dev_priv->swaps_lock);
#line 198
  ldv___ldv_spin_lock_93(& dev->drw_lock);
#line 200
  drw = drm_get_drawable_info(dev, vbl_swap->drw_id);
#line 202
  if ((unsigned long )drw == (unsigned long )((struct drm_drawable_info *)0)) {
#line 203
    ldv___ldv_spin_unlock_94(& dev->drw_lock);
#line 204
    drm_free((void *)vbl_swap, 32UL, 2);
#line 205
    ldv___ldv_spin_lock_95(& dev_priv->swaps_lock);
#line 206
    goto ldv_23067;
  } else {

  }
#line 209
  hit = hits.next;
#line 209
  goto ldv_23074;
  ldv_23073: 
#line 211
  __mptr___0 = (struct list_head  const  *)hit;
#line 211
  swap_cmp = (drm_i915_vbl_swap_t *)__mptr___0;
#line 212
  tmp___0 = drm_get_drawable_info(dev, swap_cmp->drw_id);
#line 212
  drw_cmp = tmp___0;
#line 215
  if ((unsigned long )drw_cmp != (unsigned long )((struct drm_drawable_info *)0) && (int )(drw_cmp->rects)->y1 > (int )(drw->rects)->y1) {
#line 217
    list_add_tail(list, hit);
#line 218
    goto ldv_23072;
  } else {

  }
#line 209
  hit = hit->next;
  ldv_23074: 
#line 209
  __builtin_prefetch((void const   *)hit->next);
#line 209
  if ((unsigned long )(& hits) != (unsigned long )hit) {
#line 210
    goto ldv_23073;
  } else {

  }
  ldv_23072: 
#line 222
  ldv___ldv_spin_unlock_96(& dev->drw_lock);
#line 225
  if ((unsigned long )(& hits) == (unsigned long )hit) {
#line 226
    list_add_tail(list, hits.prev);
  } else {

  }
#line 228
  nhits = nhits + 1;
#line 230
  ldv___ldv_spin_lock_97(& dev_priv->swaps_lock);
  ldv_23067: 
#line 187
  list = tmp;
#line 187
  tmp = list->next;
  ldv_23076: ;
#line 187
  if ((unsigned long )(& dev_priv->vbl_swaps.head) != (unsigned long )list) {
#line 188
    goto ldv_23075;
  } else {

  }

#line 233
  if (nhits == 0) {
#line 234
    ldv___ldv_spin_unlock_98(& dev_priv->swaps_lock);
#line 235
    return;
  } else {

  }
#line 238
  ldv___ldv_spin_unlock_99(& dev_priv->swaps_lock);
#line 240
  i915_kernel_lost_context(dev);
#line 242
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 243
    if (dev_priv->ring.space <= 15) {
#line 243
      i915_wait_ring(dev, 16, "i915_vblank_tasklet");
    } else {

    }
#line 243
    outcount = 0U;
#line 243
    outring = (unsigned int )dev_priv->ring.tail;
#line 243
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 243
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 245
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2030043138U;
#line 245
    outcount = outcount + 1U;
#line 245
    outring = outring + 4U;
#line 245
    outring = outring & ringmask;
#line 246
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 246
    outcount = outcount + 1U;
#line 246
    outring = outring + 4U;
#line 246
    outring = outring & ringmask;
#line 247
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(((sarea_priv->width + -1) & 65535) | ((sarea_priv->height + -1) << 16));
#line 247
    outcount = outcount + 1U;
#line 247
    outring = outring + 4U;
#line 247
    outring = outring & ringmask;
#line 248
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 248
    outcount = outcount + 1U;
#line 248
    outring = outring + 4U;
#line 248
    outring = outring & ringmask;
#line 249
    dev_priv->ring.tail = (int )outring;
#line 249
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 249
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  } else {
#line 251
    if (dev_priv->ring.space <= 23) {
#line 251
      i915_wait_ring(dev, 24, "i915_vblank_tasklet");
    } else {

    }
#line 251
    outcount = 0U;
#line 251
    outring = (unsigned int )dev_priv->ring.tail;
#line 251
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 251
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 253
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2105540611U;
#line 253
    outcount = outcount + 1U;
#line 253
    outring = outring + 4U;
#line 253
    outring = outring & ringmask;
#line 254
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 254
    outcount = outcount + 1U;
#line 254
    outring = outring + 4U;
#line 254
    outring = outring & ringmask;
#line 255
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 255
    outcount = outcount + 1U;
#line 255
    outring = outring + 4U;
#line 255
    outring = outring & ringmask;
#line 256
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(sarea_priv->width | (sarea_priv->height << 16));
#line 256
    outcount = outcount + 1U;
#line 256
    outring = outring + 4U;
#line 256
    outring = outring & ringmask;
#line 257
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(sarea_priv->width | (sarea_priv->height << 16));
#line 257
    outcount = outcount + 1U;
#line 257
    outring = outring + 4U;
#line 257
    outring = outring & ringmask;
#line 258
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 258
    outcount = outcount + 1U;
#line 258
    outring = outring + 4U;
#line 258
    outring = outring & ringmask;
#line 260
    dev_priv->ring.tail = (int )outring;
#line 260
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 260
    writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  }
#line 263
  sarea_priv->ctxOwner = 0;
#line 265
  upper[1] = 0;
#line 265
  upper[0] = upper[1];
#line 266
  _max1 = sarea_priv->pipeA_h / nhits;
#line 266
  _max2 = 1;
#line 266
  slice[0] = _max1 > _max2 ? _max1 : _max2;
#line 267
  _max1___0 = sarea_priv->pipeB_h / nhits;
#line 267
  _max2___0 = 1;
#line 267
  slice[1] = _max1___0 > _max2___0 ? _max1___0 : _max2___0;
#line 268
  lower[0] = sarea_priv->pipeA_y + slice[0];
#line 269
  lower[1] = sarea_priv->pipeB_y + slice[0];
#line 271
  ldv___ldv_spin_lock_100(& dev->drw_lock);
#line 278
  i = 0;
#line 278
  goto ldv_23109;
  ldv_23108: ;
#line 281
  if (i == nhits) {
#line 282
    lower[1] = sarea_priv->height;
#line 282
    lower[0] = lower[1];
  } else {

  }
#line 284
  hit = hits.next;
#line 284
  goto ldv_23106;
  ldv_23105: 
#line 286
  __mptr___1 = (struct list_head  const  *)hit;
#line 286
  swap_hit = (drm_i915_vbl_swap_t *)__mptr___1;
#line 291
  drw = drm_get_drawable_info(dev, swap_hit->drw_id);
#line 293
  if ((unsigned long )drw == (unsigned long )((struct drm_drawable_info *)0)) {
#line 294
    goto ldv_23092;
  } else {

  }
#line 296
  rect = drw->rects;
#line 297
  pipe = (int )swap_hit->pipe;
#line 298
  top = (unsigned short )upper[pipe];
#line 299
  bottom = (unsigned short )lower[pipe];
#line 301
  num_rects = (int )drw->num_rects;
#line 301
  goto ldv_23103;
  ldv_23102: 
#line 302
  _max1___1 = rect->y1;
#line 302
  _max2___1 = top;
#line 302
  y1 = (int )_max1___1 > (int )_max2___1 ? (int )_max1___1 : (int )_max2___1;
#line 303
  _min1 = rect->y2;
#line 303
  _min2 = bottom;
#line 303
  y2 = (int )_min1 < (int )_min2 ? (int )_min1 : (int )_min2;
#line 305
  if (y1 >= y2) {
#line 306
    goto ldv_23101;
  } else {

  }
#line 308
  if (dev_priv->ring.space <= 31) {
#line 308
    i915_wait_ring(dev, 32, "i915_vblank_tasklet");
  } else {

  }
#line 308
  outcount = 0U;
#line 308
  outring = (unsigned int )dev_priv->ring.tail;
#line 308
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 308
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 310
  *((unsigned int volatile   *)virt + (unsigned long )outring) = cmd;
#line 310
  outcount = outcount + 1U;
#line 310
  outring = outring + 4U;
#line 310
  outring = outring & ringmask;
#line 311
  *((unsigned int volatile   *)virt + (unsigned long )outring) = ropcpp | dst_pitch;
#line 311
  outcount = outcount + 1U;
#line 311
  outring = outring + 4U;
#line 311
  outring = outring & ringmask;
#line 312
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((y1 << 16) | (int )rect->x1);
#line 312
  outcount = outcount + 1U;
#line 312
  outring = outring + 4U;
#line 312
  outring = outring & ringmask;
#line 313
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((y2 << 16) | (int )rect->x2);
#line 313
  outcount = outcount + 1U;
#line 313
  outring = outring + 4U;
#line 313
  outring = outring & ringmask;
#line 314
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )sarea_priv->front_offset;
#line 314
  outcount = outcount + 1U;
#line 314
  outring = outring + 4U;
#line 314
  outring = outring & ringmask;
#line 315
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((y1 << 16) | (int )rect->x1);
#line 315
  outcount = outcount + 1U;
#line 315
  outring = outring + 4U;
#line 315
  outring = outring & ringmask;
#line 316
  *((unsigned int volatile   *)virt + (unsigned long )outring) = src_pitch;
#line 316
  outcount = outcount + 1U;
#line 316
  outring = outring + 4U;
#line 316
  outring = outring & ringmask;
#line 317
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )sarea_priv->back_offset;
#line 317
  outcount = outcount + 1U;
#line 317
  outring = outring + 4U;
#line 317
  outring = outring & ringmask;
#line 319
  dev_priv->ring.tail = (int )outring;
#line 319
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 319
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
  ldv_23101: 
#line 301
  rect = rect + 1;
  ldv_23103: 
#line 301
  tmp___1 = num_rects;
#line 301
  num_rects = num_rects - 1;
#line 301
  if (tmp___1 != 0) {
#line 302
    goto ldv_23102;
  } else {

  }

  ldv_23092: 
#line 284
  hit = hit->next;
  ldv_23106: 
#line 284
  __builtin_prefetch((void const   *)hit->next);
#line 284
  if ((unsigned long )(& hits) != (unsigned long )hit) {
#line 285
    goto ldv_23105;
  } else {

  }
#line 280
  upper[0] = lower[0];
#line 280
  lower[0] = lower[0] + slice[0];
#line 280
  upper[1] = lower[1];
#line 280
  lower[1] = lower[1] + slice[1];
  ldv_23109: 
#line 278
  tmp___2 = i;
#line 278
  i = i + 1;
#line 278
  if (tmp___2 < nhits) {
#line 279
    goto ldv_23108;
  } else {

  }
#line 324
  ldv___ldv_spin_unlock_101(& dev->drw_lock);
#line 326
  hit = hits.next;
#line 326
  tmp = hit->next;
#line 326
  goto ldv_23115;
  ldv_23114: 
#line 328
  __mptr___2 = (struct list_head  const  *)hit;
#line 328
  swap_hit___0 = (drm_i915_vbl_swap_t *)__mptr___2;
#line 330
  list_del(hit);
#line 332
  drm_free((void *)swap_hit___0, 32UL, 2);
#line 326
  hit = tmp;
#line 326
  tmp = hit->next;
  ldv_23115: ;
#line 326
  if ((unsigned long )(& hits) != (unsigned long )hit) {
#line 327
    goto ldv_23114;
  } else {

  }

#line 331
  return;
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  u32 pipea_stats ;
  u32 pipeb_stats ;
  u32 iir ;
  int vblank_pipe ;

  {
#line 338
  dev = (struct drm_device *)arg;
#line 339
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 343
  pipea_stats = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 458788U);
#line 344
  pipeb_stats = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 462884U);
#line 346
  if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 347
    writel(4294967295U, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
  } else {

  }
#line 348
  iir = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 350
  if (drm_debug != 0U) {
#line 350
    printk("<7>[drm:%s] iir=%08x\n", "i915_driver_irq_handler", iir);
  } else {

  }
#line 352
  if (iir == 0U) {
#line 353
    if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 354
      writel(dev_priv->irq_mask_reg, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 355
      readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8360U);
    } else {

    }
#line 357
    return (0);
  } else {

  }
#line 360
  writel(iir, (void volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 361
  if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 362
    writel(dev_priv->irq_mask_reg, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
  } else {

  }
#line 363
  readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 365
  (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL);
#line 367
  if ((iir & 2U) != 0U) {
#line 368
    __wake_up(& dev_priv->irq_queue, 1U, 1, 0);
  } else {

  }
#line 370
  if ((iir & 160U) != 0U) {
#line 372
    vblank_pipe = dev_priv->vblank_pipe;
#line 374
    if ((vblank_pipe & 3) == 3) {
#line 377
      if ((iir & 128U) != 0U) {
#line 378
        atomic_inc(& dev->vbl_received);
      } else {

      }
#line 379
      if ((iir & 32U) != 0U) {
#line 380
        atomic_inc(& dev->vbl_received2);
      } else {

      }
    } else
#line 381
    if (((iir & 128U) != 0U && vblank_pipe & 1) || ((iir & 32U) != 0U && (vblank_pipe & 2) != 0)) {
#line 385
      atomic_inc(& dev->vbl_received);
    } else {

    }
#line 387
    __wake_up(& dev->vbl_queue, 1U, 1, 0);
#line 388
    drm_vbl_send_signals(dev);
#line 390
    if (dev_priv->swaps_pending != 0U) {
#line 391
      drm_locked_tasklet(dev, & i915_vblank_tasklet);
    } else {

    }
#line 392
    writel(pipea_stats | 131074U, (void volatile   *)(dev_priv->mmio_map)->handle + 458788U);
#line 395
    writel(pipeb_stats | 131074U, (void volatile   *)(dev_priv->mmio_map)->handle + 462884U);
  } else {

  }
#line 400
  return (1);
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_emit_irq(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 405
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 408
  i915_kernel_lost_context(dev);
#line 410
  if (drm_debug != 0U) {
#line 410
    printk("<7>[drm:%s] \n", "i915_emit_irq");
  } else {

  }
#line 412
  dev_priv->counter = dev_priv->counter + 1UL;
#line 412
  (dev_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
#line 414
  if (dev_priv->counter > 2147483647UL) {
#line 415
    dev_priv->counter = 1UL;
#line 415
    (dev_priv->sarea_priv)->last_enqueue = 1;
  } else {

  }
#line 417
  if (dev_priv->ring.space <= 23) {
#line 417
    i915_wait_ring(dev, 24, "i915_emit_irq");
  } else {

  }
#line 417
  outcount = 0U;
#line 417
  outring = (unsigned int )dev_priv->ring.tail;
#line 417
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 417
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 418
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 418
  outcount = outcount + 1U;
#line 418
  outring = outring + 4U;
#line 418
  outring = outring & ringmask;
#line 419
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 20U;
#line 419
  outcount = outcount + 1U;
#line 419
  outring = outring + 4U;
#line 419
  outring = outring & ringmask;
#line 420
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->counter;
#line 420
  outcount = outcount + 1U;
#line 420
  outring = outring + 4U;
#line 420
  outring = outring & ringmask;
#line 421
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 421
  outcount = outcount + 1U;
#line 421
  outring = outring + 4U;
#line 421
  outring = outring & ringmask;
#line 422
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 422
  outcount = outcount + 1U;
#line 422
  outring = outring + 4U;
#line 422
  outring = outring & ringmask;
#line 423
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 16777216U;
#line 423
  outcount = outcount + 1U;
#line 423
  outring = outring + 4U;
#line 423
  outring = outring & ringmask;
#line 424
  dev_priv->ring.tail = (int )outring;
#line 424
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 424
  writel(outring, (void volatile   *)(dev_priv->mmio_map)->handle + 8240U);
#line 426
  return ((int )dev_priv->counter);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static void i915_user_irq_get(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 431
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 433
  ldv___ldv_spin_lock_102(& dev_priv->user_irq_lock);
#line 434
  if (dev->irq_enabled != 0) {
#line 434
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount + 1;
#line 434
    if (dev_priv->user_irq_refcount == 1) {
#line 435
      i915_enable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 436
  ldv___ldv_spin_unlock_103(& dev_priv->user_irq_lock);
#line 437
  return;
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static void i915_user_irq_put(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 441
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 443
  ldv___ldv_spin_lock_104(& dev_priv->user_irq_lock);
#line 444
  tmp = __builtin_expect(dev->irq_enabled != 0, 0L);
#line 444
  if (tmp != 0L) {
#line 444
    tmp___0 = __builtin_expect(dev_priv->user_irq_refcount <= 0, 0L);
#line 444
    if (tmp___0 != 0L) {
#line 444
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"),
                           "i" (444), "i" (24UL));
      ldv_23145: ;
#line 444
      goto ldv_23145;
    } else {

    }
  } else {

  }
#line 445
  if (dev->irq_enabled != 0) {
#line 445
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount - 1;
#line 445
    if (dev_priv->user_irq_refcount == 0) {
#line 446
      i915_disable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 447
  ldv___ldv_spin_unlock_105(& dev_priv->user_irq_lock);
#line 448
  return;
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_wait_irq(struct drm_device *dev , int irq_nr ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 452
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 453
  ret = 0;
#line 455
  if (drm_debug != 0U) {
#line 455
    printk("<7>[drm:%s] irq_nr=%d breadcrumb=%d\n", "i915_wait_irq", irq_nr, *((u32 volatile   *)dev_priv->hw_status_page + 5UL));
  } else {

  }
#line 458
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL) >= (unsigned int )irq_nr) {
#line 459
    (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL);
#line 460
    return (0);
  } else {

  }
#line 463
  (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
#line 465
  i915_user_irq_get(dev);
#line 466
  tmp = get_current();
#line 466
  entry.flags = 0U;
#line 466
  entry.private = (void *)tmp;
#line 466
  entry.func = & default_wake_function;
#line 466
  entry.task_list.next = 0;
#line 466
  entry.task_list.prev = 0;
#line 466
  end = (unsigned long )jiffies + 750UL;
#line 466
  add_wait_queue(& dev_priv->irq_queue, & entry);
  ldv_23162: 
#line 466
  tmp___0 = get_current();
#line 466
  tmp___0->state = 1L;
#line 466
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL) >= (unsigned int )irq_nr) {
#line 466
    goto ldv_23155;
  } else {

  }
#line 466
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )end >= 0L) {
#line 466
    ret = -16;
#line 466
    goto ldv_23155;
  } else {

  }
#line 466
  schedule_timeout(2L);
#line 466
  tmp___1 = get_current();
#line 466
  tmp___2 = signal_pending(tmp___1);
#line 466
  if (tmp___2 != 0) {
#line 466
    ret = -4;
#line 466
    goto ldv_23155;
  } else {

  }
#line 466
  goto ldv_23162;
  ldv_23155: 
#line 466
  tmp___3 = get_current();
#line 466
  tmp___3->state = 0L;
#line 466
  remove_wait_queue(& dev_priv->irq_queue, & entry);
#line 468
  i915_user_irq_put(dev);
#line 470
  if (ret == -16) {
#line 471
    printk("<3>[drm:%s] *ERROR* EBUSY -- rec: %d emitted: %d\n", "i915_wait_irq",
           *((u32 volatile   *)dev_priv->hw_status_page + 5UL), (int )dev_priv->counter);
  } else {

  }
#line 475
  (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 5UL);
#line 476
  return (ret);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_driver_vblank_do_wait(struct drm_device *dev , unsigned int *sequence ,
                                      atomic_t *counter ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int cur_vblank ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 482
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 484
  ret = 0;
#line 486
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 487
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_driver_vblank_do_wait");
#line 488
    return (-22);
  } else {

  }
#line 491
  tmp = get_current();
#line 491
  entry.flags = 0U;
#line 491
  entry.private = (void *)tmp;
#line 491
  entry.func = & default_wake_function;
#line 491
  entry.task_list.next = 0;
#line 491
  entry.task_list.prev = 0;
#line 491
  end = (unsigned long )jiffies + 750UL;
#line 491
  add_wait_queue(& dev->vbl_queue, & entry);
  ldv_23181: 
#line 491
  tmp___0 = get_current();
#line 491
  tmp___0->state = 1L;
#line 491
  cur_vblank = (unsigned int )counter->counter;
#line 491
  if (cur_vblank - *sequence <= 8388608U) {
#line 491
    goto ldv_23174;
  } else {

  }
#line 491
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )end >= 0L) {
#line 491
    ret = -16;
#line 491
    goto ldv_23174;
  } else {

  }
#line 491
  schedule_timeout(2L);
#line 491
  tmp___1 = get_current();
#line 491
  tmp___2 = signal_pending(tmp___1);
#line 491
  if (tmp___2 != 0) {
#line 491
    ret = -4;
#line 491
    goto ldv_23174;
  } else {

  }
#line 491
  goto ldv_23181;
  ldv_23174: 
#line 491
  tmp___3 = get_current();
#line 491
  tmp___3->state = 0L;
#line 491
  remove_wait_queue(& dev->vbl_queue, & entry);
#line 495
  *sequence = cur_vblank;
#line 497
  return (ret);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_driver_vblank_wait(struct drm_device *dev , unsigned int *sequence ) 
{ 
  int tmp ;

  {
#line 503
  tmp = i915_driver_vblank_do_wait(dev, sequence, & dev->vbl_received);
#line 503
  return (tmp);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_driver_vblank_wait2(struct drm_device *dev , unsigned int *sequence ) 
{ 
  int tmp ;

  {
#line 508
  tmp = i915_driver_vblank_do_wait(dev, sequence, & dev->vbl_received2);
#line 508
  return (tmp);
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_emit_t *emit ;
  int result ;
  unsigned long tmp ;

  {
#line 516
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 517
  emit = (drm_i915_irq_emit_t *)data;
#line 520
  if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 520
    printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
           "i915_irq_emit", "i915_irq_emit", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
           dev->lock.file_priv, file_priv);
#line 520
    return (-22);
  } else {

  }
#line 522
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 523
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_emit");
#line 524
    return (-22);
  } else {

  }
#line 527
  result = i915_emit_irq(dev);
#line 529
  tmp = copy_to_user((void *)emit->irq_seq, (void const   *)(& result), 4U);
#line 529
  if (tmp != 0UL) {
#line 530
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_irq_emit");
#line 531
    return (-14);
  } else {

  }
#line 534
  return (0);
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_wait_t *irqwait ;
  int tmp ;

  {
#line 542
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 543
  irqwait = (drm_i915_irq_wait_t *)data;
#line 545
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 546
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_wait");
#line 547
    return (-22);
  } else {

  }
#line 550
  tmp = i915_wait_irq(dev, irqwait->irq_seq);
#line 550
  return (tmp);
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;
  u32 enable_mask ;
  u32 disable_mask ;

  {
#line 558
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 559
  pipe = (drm_i915_vblank_pipe_t *)data;
#line 560
  enable_mask = 0U;
#line 560
  disable_mask = 0U;
#line 562
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 563
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_set");
#line 564
    return (-22);
  } else {

  }
#line 567
  if ((pipe->pipe & -4) != 0) {
#line 568
    printk("<3>[drm:%s] *ERROR* called with invalid pipe 0x%x\n", "i915_vblank_pipe_set",
           pipe->pipe);
#line 569
    return (-22);
  } else {

  }
#line 572
  if (pipe->pipe & 1) {
#line 573
    enable_mask = enable_mask | 128U;
  } else {
#line 575
    disable_mask = disable_mask | 128U;
  }
#line 577
  if ((pipe->pipe & 2) != 0) {
#line 578
    enable_mask = enable_mask | 32U;
  } else {
#line 580
    disable_mask = disable_mask | 32U;
  }
#line 582
  i915_enable_irq(dev_priv, enable_mask);
#line 583
  i915_disable_irq(dev_priv, disable_mask);
#line 585
  dev_priv->vblank_pipe = pipe->pipe;
#line 587
  return (0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;
  u16 flag ;
  unsigned int tmp ;

  {
#line 593
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 594
  pipe = (drm_i915_vblank_pipe_t *)data;
#line 597
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 598
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_get");
#line 599
    return (-22);
  } else {

  }
#line 602
  tmp = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 602
  flag = (u16 )tmp;
#line 603
  pipe->pipe = 0;
#line 604
  if (((int )flag & 128) != 0) {
#line 605
    pipe->pipe = pipe->pipe | 1;
  } else {

  }
#line 606
  if (((int )flag & 32) != 0) {
#line 607
    pipe->pipe = pipe->pipe | 2;
  } else {

  }
#line 609
  return (0);
}
}
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_swap_t *swap ;
  drm_i915_vbl_swap_t *vbl_swap ;
  unsigned int pipe ;
  unsigned int seqtype ;
  unsigned int curseq ;
  struct list_head *list ;
  struct drm_drawable_info *tmp ;
  struct list_head  const  *__mptr ;
  void *tmp___0 ;

  {
#line 618
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 619
  swap = (drm_i915_vblank_swap_t *)data;
#line 625
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 626
    printk("<3>[drm:%s] *ERROR* %s called with no initialization\n", "i915_vblank_swap",
           "i915_vblank_swap");
#line 627
    return (-22);
  } else {

  }
#line 630
  if ((dev_priv->sarea_priv)->rotation != 0) {
#line 631
    if (drm_debug != 0U) {
#line 631
      printk("<7>[drm:%s] Rotation not supported\n", "i915_vblank_swap");
    } else {

    }
#line 632
    return (-22);
  } else {

  }
#line 635
  if (((unsigned int )swap->seqtype & 3489660926U) != 0U) {
#line 637
    printk("<3>[drm:%s] *ERROR* Invalid sequence type 0x%x\n", "i915_vblank_swap",
           (unsigned int )swap->seqtype);
#line 638
    return (-22);
  } else {

  }
#line 641
  pipe = ((unsigned int )swap->seqtype & 536870912U) != 0U;
#line 643
  seqtype = (unsigned int )swap->seqtype & 1U;
#line 645
  if (((dev_priv->vblank_pipe >> (int )pipe) & 1) == 0) {
#line 646
    printk("<3>[drm:%s] *ERROR* Invalid pipe %d\n", "i915_vblank_swap", pipe);
#line 647
    return (-22);
  } else {

  }
#line 650
  ldv___ldv_spin_lock_106(& dev->drw_lock);
#line 652
  tmp = drm_get_drawable_info(dev, swap->drawable);
#line 652
  if ((unsigned long )tmp == (unsigned long )((struct drm_drawable_info *)0)) {
#line 653
    ldv___ldv_spin_unlock_107(& dev->drw_lock);
#line 654
    if (drm_debug != 0U) {
#line 654
      printk("<7>[drm:%s] Invalid drawable ID %d\n", "i915_vblank_swap", swap->drawable);
    } else {

    }
#line 655
    return (-22);
  } else {

  }
#line 658
  ldv___ldv_spin_unlock_108(& dev->drw_lock);
#line 660
  curseq = (unsigned int )(pipe != 0U ? & dev->vbl_received2 : & dev->vbl_received)->counter;
#line 662
  if (seqtype == 1U) {
#line 663
    swap->sequence = swap->sequence + curseq;
  } else {

  }
#line 665
  if (curseq - swap->sequence <= 8388608U) {
#line 666
    if (((unsigned int )swap->seqtype & 268435456U) != 0U) {
#line 667
      swap->sequence = curseq + 1U;
    } else {
#line 669
      if (drm_debug != 0U) {
#line 669
        printk("<7>[drm:%s] Missed target sequence\n", "i915_vblank_swap");
      } else {

      }
#line 670
      return (-22);
    }
  } else {

  }
#line 674
  ldv___ldv_spin_lock_109(& dev_priv->swaps_lock);
#line 676
  list = dev_priv->vbl_swaps.head.next;
#line 676
  goto ldv_23243;
  ldv_23242: 
#line 677
  __mptr = (struct list_head  const  *)list;
#line 677
  vbl_swap = (drm_i915_vbl_swap_t *)__mptr;
#line 679
  if ((vbl_swap->drw_id == swap->drawable && vbl_swap->pipe == pipe) && vbl_swap->sequence == swap->sequence) {
#line 682
    ldv___ldv_spin_unlock_110(& dev_priv->swaps_lock);
#line 683
    if (drm_debug != 0U) {
#line 683
      printk("<7>[drm:%s] Already scheduled\n", "i915_vblank_swap");
    } else {

    }
#line 684
    return (0);
  } else {

  }
#line 676
  list = list->next;
  ldv_23243: 
#line 676
  __builtin_prefetch((void const   *)list->next);
#line 676
  if ((unsigned long )(& dev_priv->vbl_swaps.head) != (unsigned long )list) {
#line 677
    goto ldv_23242;
  } else {

  }
#line 688
  ldv___ldv_spin_unlock_111(& dev_priv->swaps_lock);
#line 690
  if (dev_priv->swaps_pending > 99U) {
#line 691
    if (drm_debug != 0U) {
#line 691
      printk("<7>[drm:%s] Too many swaps queued\n", "i915_vblank_swap");
    } else {

    }
#line 692
    return (-16);
  } else {

  }
#line 695
  tmp___0 = drm_calloc(1UL, 32UL, 2);
#line 695
  vbl_swap = (drm_i915_vbl_swap_t *)tmp___0;
#line 697
  if ((unsigned long )vbl_swap == (unsigned long )((drm_i915_vbl_swap_t *)0)) {
#line 698
    printk("<3>[drm:%s] *ERROR* Failed to allocate memory to queue swap\n", "i915_vblank_swap");
#line 699
    return (-12);
  } else {

  }
#line 702
  if (drm_debug != 0U) {
#line 702
    printk("<7>[drm:%s] \n", "i915_vblank_swap");
  } else {

  }
#line 704
  vbl_swap->drw_id = swap->drawable;
#line 705
  vbl_swap->pipe = pipe;
#line 706
  vbl_swap->sequence = swap->sequence;
#line 708
  ldv___ldv_spin_lock_112(& dev_priv->swaps_lock);
#line 710
  list_add_tail(& vbl_swap->head, & dev_priv->vbl_swaps.head);
#line 711
  dev_priv->swaps_pending = dev_priv->swaps_pending + 1U;
#line 713
  ldv___ldv_spin_unlock_113(& dev_priv->swaps_lock);
#line 715
  return (0);
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_preinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 722
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 724
  writel(65534U, (void volatile   *)(dev_priv->mmio_map)->handle + 8344U);
#line 725
  writel(0U, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 726
  writel(0U, (void volatile   *)(dev_priv->mmio_map)->handle + 8352U);
#line 727
  return;
}
}
#line 729 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_postinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct lock_class_key __key ;

  {
#line 731
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 733
  __spin_lock_init(& dev_priv->swaps_lock, "&dev_priv->swaps_lock", & __key);
#line 734
  INIT_LIST_HEAD(& dev_priv->vbl_swaps.head);
#line 735
  dev_priv->swaps_pending = 0U;
#line 737
  if (dev_priv->vblank_pipe == 0) {
#line 738
    dev_priv->vblank_pipe = 1;
  } else {

  }
#line 741
  dev_priv->irq_mask_reg = 4294967295U;
#line 742
  if (dev_priv->vblank_pipe & 1) {
#line 743
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & 4294967167U;
  } else {

  }
#line 744
  if ((dev_priv->vblank_pipe & 2) != 0) {
#line 745
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & 4294967263U;
  } else {

  }
#line 747
  writel(dev_priv->irq_mask_reg, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 748
  writel(162U, (void volatile   *)(dev_priv->mmio_map)->handle + 8352U);
#line 749
  readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8352U);
#line 751
  init_waitqueue_head(& dev_priv->irq_queue);
#line 752
  return;
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_uninstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  u16 temp ;
  unsigned int tmp ;

  {
#line 756
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 759
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 760
    return;
  } else {

  }
#line 762
  writel(65535U, (void volatile   *)(dev_priv->mmio_map)->handle + 8344U);
#line 763
  writel(65535U, (void volatile   *)(dev_priv->mmio_map)->handle + 8360U);
#line 764
  writel(0U, (void volatile   *)(dev_priv->mmio_map)->handle + 8352U);
#line 766
  tmp = readl((void const volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 766
  temp = (u16 )tmp;
#line 767
  writel((unsigned int )temp, (void volatile   *)(dev_priv->mmio_map)->handle + 8356U);
#line 768
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 775
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 777
  __ldv_spin_lock(ldv_func_arg1);
#line 778
  return;
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_74(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 785
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 787
  __ldv_spin_unlock(ldv_func_arg1);
#line 788
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int ldv___ldv_spin_trylock_75(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 795
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 795
  ldv_func_res = tmp;
#line 797
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 797
  return (tmp___0);
#line 799
  return (ldv_func_res);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 807
  ldv_spin_lock_dcache_lock();
#line 809
  __ldv_spin_lock(ldv_func_arg1);
#line 810
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 817
  ldv_spin_lock_d_lock_of_dentry();
#line 819
  __ldv_spin_lock(ldv_func_arg1);
#line 820
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_78(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 827
  ldv_spin_unlock_d_lock_of_dentry();
#line 829
  __ldv_spin_unlock(ldv_func_arg1);
#line 830
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_79(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 837
  ldv_spin_unlock_dcache_lock();
#line 839
  __ldv_spin_unlock(ldv_func_arg1);
#line 840
  return;
}
}
#line 842 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 847
  ldv_spin_lock_d_lock_of_dentry();
#line 849
  __ldv_spin_lock(ldv_func_arg1);
#line 850
  return;
}
}
#line 852 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_81(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 857
  ldv_spin_unlock_d_lock_of_dentry();
#line 859
  __ldv_spin_unlock(ldv_func_arg1);
#line 860
  return;
}
}
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 867
  ldv_spin_lock_i_lock_of_inode();
#line 869
  __ldv_spin_lock(ldv_func_arg1);
#line 870
  return;
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_83(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 877
  ldv_spin_unlock_i_lock_of_inode();
#line 879
  __ldv_spin_unlock(ldv_func_arg1);
#line 880
  return;
}
}
#line 882 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 887
  ldv_spin_lock_d_lock_of_dentry();
#line 889
  __ldv_spin_lock(ldv_func_arg1);
#line 890
  return;
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_85(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 897
  ldv_spin_unlock_d_lock_of_dentry();
#line 899
  __ldv_spin_unlock(ldv_func_arg1);
#line 900
  return;
}
}
#line 902 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 907
  ldv_spin_lock_siglock_of_sighand_struct();
#line 909
  __ldv_spin_lock(ldv_func_arg1);
#line 910
  return;
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_87(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 917
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 919
  __ldv_spin_unlock(ldv_func_arg1);
#line 920
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 927
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 929
  __ldv_spin_lock(ldv_func_arg1);
#line 930
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_89(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 937
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 939
  __ldv_spin_unlock(ldv_func_arg1);
#line 940
  return;
}
}
#line 942 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_90(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 947
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 949
  __ldv_spin_unlock(ldv_func_arg1);
#line 950
  return;
}
}
#line 952 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 957
  ldv_spin_lock_swaps_lock_of_drm_i915_private();
#line 959
  __ldv_spin_lock(ldv_func_arg1);
#line 960
  return;
}
}
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_92(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 967
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 969
  __ldv_spin_unlock(ldv_func_arg1);
#line 970
  return;
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 977
  ldv_spin_lock_drw_lock_of_drm_device();
#line 979
  __ldv_spin_lock(ldv_func_arg1);
#line 980
  return;
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_94(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 987
  ldv_spin_unlock_drw_lock_of_drm_device();
#line 989
  __ldv_spin_unlock(ldv_func_arg1);
#line 990
  return;
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 997
  ldv_spin_lock_swaps_lock_of_drm_i915_private();
#line 999
  __ldv_spin_lock(ldv_func_arg1);
#line 1000
  return;
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_96(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1007
  ldv_spin_unlock_drw_lock_of_drm_device();
#line 1009
  __ldv_spin_unlock(ldv_func_arg1);
#line 1010
  return;
}
}
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1017
  ldv_spin_lock_swaps_lock_of_drm_i915_private();
#line 1019
  __ldv_spin_lock(ldv_func_arg1);
#line 1020
  return;
}
}
#line 1022 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_98(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1027
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 1029
  __ldv_spin_unlock(ldv_func_arg1);
#line 1030
  return;
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_99(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1037
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 1039
  __ldv_spin_unlock(ldv_func_arg1);
#line 1040
  return;
}
}
#line 1042 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1047
  ldv_spin_lock_drw_lock_of_drm_device();
#line 1049
  __ldv_spin_lock(ldv_func_arg1);
#line 1050
  return;
}
}
#line 1052 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_101(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1057
  ldv_spin_unlock_drw_lock_of_drm_device();
#line 1059
  __ldv_spin_unlock(ldv_func_arg1);
#line 1060
  return;
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1067
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 1069
  __ldv_spin_lock(ldv_func_arg1);
#line 1070
  return;
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_103(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1077
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 1079
  __ldv_spin_unlock(ldv_func_arg1);
#line 1080
  return;
}
}
#line 1082 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1087
  ldv_spin_lock_user_irq_lock_of_drm_i915_private();
#line 1089
  __ldv_spin_lock(ldv_func_arg1);
#line 1090
  return;
}
}
#line 1092 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_105(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1097
  ldv_spin_unlock_user_irq_lock_of_drm_i915_private();
#line 1099
  __ldv_spin_unlock(ldv_func_arg1);
#line 1100
  return;
}
}
#line 1102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_106(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1107
  ldv_spin_lock_drw_lock_of_drm_device();
#line 1109
  __ldv_spin_lock(ldv_func_arg1);
#line 1110
  return;
}
}
#line 1112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_107(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1117
  ldv_spin_unlock_drw_lock_of_drm_device();
#line 1119
  __ldv_spin_unlock(ldv_func_arg1);
#line 1120
  return;
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_108(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1127
  ldv_spin_unlock_drw_lock_of_drm_device();
#line 1129
  __ldv_spin_unlock(ldv_func_arg1);
#line 1130
  return;
}
}
#line 1132 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1137
  ldv_spin_lock_swaps_lock_of_drm_i915_private();
#line 1139
  __ldv_spin_lock(ldv_func_arg1);
#line 1140
  return;
}
}
#line 1142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_110(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1147
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 1149
  __ldv_spin_unlock(ldv_func_arg1);
#line 1150
  return;
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_111(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1157
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 1159
  __ldv_spin_unlock(ldv_func_arg1);
#line 1160
  return;
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1167
  ldv_spin_lock_swaps_lock_of_drm_i915_private();
#line 1169
  __ldv_spin_lock(ldv_func_arg1);
#line 1170
  return;
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv___ldv_spin_unlock_113(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 1177
  ldv_spin_unlock_swaps_lock_of_drm_i915_private();
#line 1179
  __ldv_spin_unlock(ldv_func_arg1);
#line 1180
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_155(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_158(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_159(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_162(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_164(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_166(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_168(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_170(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_156(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_160(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_161(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_163(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_165(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_167(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_169(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_171(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_172(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_157(spinlock_t *ldv_func_arg1 ) ;
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void mark_block(struct drm_device *dev , struct mem_block *p , int in_use ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_sarea_t *sarea_priv ;
  struct drm_tex_region *list ;
  unsigned int shift ;
  unsigned int nr ;
  unsigned int start ;
  unsigned int end ;
  unsigned int i ;
  int age ;

  {
#line 131
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 132
  sarea_priv = dev_priv->sarea_priv;
#line 140
  shift = (unsigned int )dev_priv->tex_lru_log_granularity;
#line 141
  nr = 255U;
#line 143
  start = (unsigned int )(p->start >> (int )shift);
#line 144
  end = (unsigned int )(((p->start + p->size) + -1) >> (int )shift);
#line 146
  sarea_priv->texAge = sarea_priv->texAge + 1;
#line 146
  age = sarea_priv->texAge;
#line 147
  list = (struct drm_tex_region *)(& sarea_priv->texList);
#line 152
  i = start;
#line 152
  goto ldv_22951;
  ldv_22950: 
#line 153
  (list + (unsigned long )i)->in_use = (unsigned char )in_use;
#line 154
  (list + (unsigned long )i)->age = (unsigned int )age;
#line 158
  (list + (unsigned long )(list + (unsigned long )i)->next)->prev = (list + (unsigned long )i)->prev;
#line 159
  (list + (unsigned long )(list + (unsigned long )i)->prev)->next = (list + (unsigned long )i)->next;
#line 163
  (list + (unsigned long )i)->prev = (unsigned char )nr;
#line 164
  (list + (unsigned long )i)->next = (list + (unsigned long )nr)->next;
#line 165
  (list + (unsigned long )(list + (unsigned long )nr)->next)->prev = (unsigned char )i;
#line 166
  (list + (unsigned long )nr)->next = (unsigned char )i;
#line 152
  i = i + 1U;
  ldv_22951: ;
#line 152
  if (i <= end) {
#line 153
    goto ldv_22950;
  } else {

  }

#line 157
  return;
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *split_block(struct mem_block *p , int start , int size ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *newblock ;
  void *tmp ;
  struct mem_block *newblock___0 ;
  void *tmp___0 ;

  {
#line 178
  if (p->start < start) {
#line 179
    tmp = drm_alloc(32UL, 14);
#line 179
    newblock = (struct mem_block *)tmp;
#line 181
    if ((unsigned long )newblock == (unsigned long )((struct mem_block *)0)) {
#line 182
      goto out;
    } else {

    }
#line 183
    newblock->start = start;
#line 184
    newblock->size = p->size + (p->start - start);
#line 185
    newblock->file_priv = 0;
#line 186
    newblock->next = p->next;
#line 187
    newblock->prev = p;
#line 188
    (p->next)->prev = newblock;
#line 189
    p->next = newblock;
#line 190
    p->size = p->size - newblock->size;
#line 191
    p = newblock;
  } else {

  }
#line 195
  if (p->size > size) {
#line 196
    tmp___0 = drm_alloc(32UL, 14);
#line 196
    newblock___0 = (struct mem_block *)tmp___0;
#line 198
    if ((unsigned long )newblock___0 == (unsigned long )((struct mem_block *)0)) {
#line 199
      goto out;
    } else {

    }
#line 200
    newblock___0->start = start + size;
#line 201
    newblock___0->size = p->size - size;
#line 202
    newblock___0->file_priv = 0;
#line 203
    newblock___0->next = p->next;
#line 204
    newblock___0->prev = p;
#line 205
    (p->next)->prev = newblock___0;
#line 206
    p->next = newblock___0;
#line 207
    p->size = size;
  } else {

  }
  out: 
#line 212
  p->file_priv = file_priv;
#line 213
  return (p);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *alloc_block(struct mem_block *heap , int size , int align2 ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *p ;
  int mask ;
  int start ;
  struct mem_block *tmp ;

  {
#line 220
  mask = (1 << align2) + -1;
#line 222
  p = heap->next;
#line 222
  goto ldv_22972;
  ldv_22971: 
#line 223
  start = (p->start + mask) & ~ mask;
#line 224
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && start + size <= p->start + p->size) {
#line 225
    tmp = split_block(p, start, size, file_priv);
#line 225
    return (tmp);
  } else {

  }
#line 222
  p = p->next;
  ldv_22972: ;
#line 222
  if ((unsigned long )p != (unsigned long )heap) {
#line 223
    goto ldv_22971;
  } else {

  }

#line 228
  return (0);
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *find_block(struct mem_block *heap , int start ) 
{ 
  struct mem_block *p ;

  {
#line 235
  p = heap->next;
#line 235
  goto ldv_22980;
  ldv_22979: ;
#line 236
  if (p->start == start) {
#line 237
    return (p);
  } else {

  }
#line 235
  p = p->next;
  ldv_22980: ;
#line 235
  if ((unsigned long )p != (unsigned long )heap) {
#line 236
    goto ldv_22979;
  } else {

  }

#line 239
  return (0);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void free_block(struct mem_block *p ) 
{ 
  struct mem_block *q ;
  struct mem_block *q___0 ;

  {
#line 244
  p->file_priv = 0;
#line 249
  if ((unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 250
    q = p->next;
#line 251
    p->size = p->size + q->size;
#line 252
    p->next = q->next;
#line 253
    (p->next)->prev = p;
#line 254
    drm_free((void *)q, 32UL, 14);
  } else {

  }
#line 257
  if ((unsigned long )(p->prev)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 258
    q___0 = p->prev;
#line 259
    q___0->size = q___0->size + p->size;
#line 260
    q___0->next = p->next;
#line 261
    (q___0->next)->prev = q___0;
#line 262
    drm_free((void *)p, 32UL, 14);
  } else {

  }
#line 264
  return;
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static int init_heap(struct mem_block **heap , int start , int size ) 
{ 
  struct mem_block *blocks ;
  void *tmp ;
  void *tmp___0 ;
  struct mem_block *tmp___1 ;
  struct mem_block *tmp___2 ;

  {
#line 270
  tmp = drm_alloc(32UL, 14);
#line 270
  blocks = (struct mem_block *)tmp;
#line 272
  if ((unsigned long )blocks == (unsigned long )((struct mem_block *)0)) {
#line 273
    return (-12);
  } else {

  }
#line 275
  tmp___0 = drm_alloc(32UL, 14);
#line 275
  *heap = (struct mem_block *)tmp___0;
#line 276
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 277
    drm_free((void *)blocks, 32UL, 14);
#line 278
    return (-12);
  } else {

  }
#line 281
  blocks->start = start;
#line 282
  blocks->size = size;
#line 283
  blocks->file_priv = 0;
#line 284
  tmp___1 = *heap;
#line 284
  blocks->prev = tmp___1;
#line 284
  blocks->next = tmp___1;
#line 286
  memset((void *)*heap, 0, 32UL);
#line 287
  (*heap)->file_priv = 0xffffffffffffffffUL;
#line 288
  tmp___2 = blocks;
#line 288
  (*heap)->prev = tmp___2;
#line 288
  (*heap)->next = tmp___2;
#line 289
  return (0);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 299
  if ((unsigned long )heap == (unsigned long )((struct mem_block *)0) || (unsigned long )heap->next == (unsigned long )((struct mem_block *)0)) {
#line 300
    return;
  } else {

  }
#line 302
  p = heap->next;
#line 302
  goto ldv_23000;
  ldv_22999: ;
#line 303
  if ((unsigned long )p->file_priv == (unsigned long )file_priv) {
#line 304
    p->file_priv = 0;
#line 305
    mark_block(dev, p, 0);
  } else {

  }
#line 302
  p = p->next;
  ldv_23000: ;
#line 302
  if ((unsigned long )p != (unsigned long )heap) {
#line 303
    goto ldv_22999;
  } else {

  }
#line 312
  p = heap->next;
#line 312
  goto ldv_23007;
  ldv_23006: ;
#line 313
  goto ldv_23004;
  ldv_23003: 
#line 314
  q = p->next;
#line 315
  p->size = p->size + q->size;
#line 316
  p->next = q->next;
#line 317
  (p->next)->prev = p;
#line 318
  drm_free((void *)q, 32UL, 14);
  ldv_23004: ;
#line 313
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && (unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 314
    goto ldv_23003;
  } else {

  }
#line 312
  p = p->next;
  ldv_23007: ;
#line 312
  if ((unsigned long )p != (unsigned long )heap) {
#line 313
    goto ldv_23006;
  } else {

  }

#line 317
  return;
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_takedown(struct mem_block **heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 329
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 330
    return;
  } else {

  }
#line 332
  p = (*heap)->next;
#line 332
  goto ldv_23015;
  ldv_23014: 
#line 333
  q = p;
#line 334
  p = p->next;
#line 335
  drm_free((void *)q, 32UL, 14);
  ldv_23015: ;
#line 332
  if ((unsigned long )*heap != (unsigned long )p) {
#line 333
    goto ldv_23014;
  } else {

  }
#line 338
  drm_free((void *)*heap, 32UL, 14);
#line 339
  *heap = 0;
#line 340
  return;
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block **get_heap(drm_i915_private_t *dev_priv , int region ) 
{ 


  {
#line 344
  switch (region) {
  case 1: ;
#line 346
  return (& dev_priv->agp_heap);
  default: ;
#line 348
  return (0);
  }
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_alloc_t *alloc ;
  struct mem_block *block ;
  struct mem_block **heap ;
  unsigned long tmp ;

  {
#line 357
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 358
  alloc = (drm_i915_mem_alloc_t *)data;
#line 361
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 362
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_alloc");
#line 363
    return (-22);
  } else {

  }
#line 366
  heap = get_heap(dev_priv, alloc->region);
#line 367
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 368
    return (-14);
  } else {

  }
#line 373
  if (alloc->alignment <= 11) {
#line 374
    alloc->alignment = 12;
  } else {

  }
#line 376
  block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
#line 378
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 379
    return (-12);
  } else {

  }
#line 381
  mark_block(dev, block, 1);
#line 383
  tmp = copy_to_user((void *)alloc->region_offset, (void const   *)(& block->start),
                     4U);
#line 383
  if (tmp != 0UL) {
#line 385
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_mem_alloc");
#line 386
    return (-14);
  } else {

  }
#line 389
  return (0);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_free_t *memfree ;
  struct mem_block *block ;
  struct mem_block **heap ;

  {
#line 395
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 396
  memfree = (drm_i915_mem_free_t *)data;
#line 399
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 400
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_free");
#line 401
    return (-22);
  } else {

  }
#line 404
  heap = get_heap(dev_priv, memfree->region);
#line 405
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 406
    return (-14);
  } else {

  }
#line 408
  block = find_block(*heap, memfree->region_offset);
#line 409
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 410
    return (-14);
  } else {

  }
#line 412
  if ((unsigned long )block->file_priv != (unsigned long )file_priv) {
#line 413
    return (-1);
  } else {

  }
#line 415
  mark_block(dev, block, 0);
#line 416
  free_block(block);
#line 417
  return (0);
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_init_heap_t *initheap ;
  struct mem_block **heap ;
  int tmp ;

  {
#line 423
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 424
  initheap = (drm_i915_mem_init_heap_t *)data;
#line 427
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 428
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_init_heap");
#line 429
    return (-22);
  } else {

  }
#line 432
  heap = get_heap(dev_priv, initheap->region);
#line 433
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 434
    return (-14);
  } else {

  }
#line 436
  if ((unsigned long )*heap != (unsigned long )((struct mem_block *)0)) {
#line 437
    printk("<3>[drm:%s] *ERROR* heap already initialized?", "i915_mem_init_heap");
#line 438
    return (-14);
  } else {

  }
#line 441
  tmp = init_heap(heap, initheap->start, initheap->size);
#line 441
  return (tmp);
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_destroy_heap_t *destroyheap ;
  struct mem_block **heap ;

  {
#line 447
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 448
  destroyheap = (drm_i915_mem_destroy_heap_t *)data;
#line 451
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 452
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_destroy_heap");
#line 453
    return (-22);
  } else {

  }
#line 456
  heap = get_heap(dev_priv, destroyheap->region);
#line 457
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 458
    printk("<3>[drm:%s] *ERROR* get_heap failed", "i915_mem_destroy_heap");
#line 459
    return (-14);
  } else {

  }
#line 462
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 463
    printk("<3>[drm:%s] *ERROR* heap not initialized?", "i915_mem_destroy_heap");
#line 464
    return (-14);
  } else {

  }
#line 467
  i915_mem_takedown(heap);
#line 468
  return (0);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_155(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 476
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 478
  __ldv_spin_lock(ldv_func_arg1);
#line 479
  return;
}
}
#line 481 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_156(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 486
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 488
  __ldv_spin_unlock(ldv_func_arg1);
#line 489
  return;
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int ldv___ldv_spin_trylock_157(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 496
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 496
  ldv_func_res = tmp;
#line 498
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 498
  return (tmp___0);
#line 500
  return (ldv_func_res);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_158(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 508
  ldv_spin_lock_dcache_lock();
#line 510
  __ldv_spin_lock(ldv_func_arg1);
#line 511
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_159(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 518
  ldv_spin_lock_d_lock_of_dentry();
#line 520
  __ldv_spin_lock(ldv_func_arg1);
#line 521
  return;
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_160(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 528
  ldv_spin_unlock_d_lock_of_dentry();
#line 530
  __ldv_spin_unlock(ldv_func_arg1);
#line 531
  return;
}
}
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_161(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 538
  ldv_spin_unlock_dcache_lock();
#line 540
  __ldv_spin_unlock(ldv_func_arg1);
#line 541
  return;
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_162(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 548
  ldv_spin_lock_d_lock_of_dentry();
#line 550
  __ldv_spin_lock(ldv_func_arg1);
#line 551
  return;
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_163(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 558
  ldv_spin_unlock_d_lock_of_dentry();
#line 560
  __ldv_spin_unlock(ldv_func_arg1);
#line 561
  return;
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_164(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 568
  ldv_spin_lock_i_lock_of_inode();
#line 570
  __ldv_spin_lock(ldv_func_arg1);
#line 571
  return;
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_165(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 578
  ldv_spin_unlock_i_lock_of_inode();
#line 580
  __ldv_spin_unlock(ldv_func_arg1);
#line 581
  return;
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_166(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 588
  ldv_spin_lock_d_lock_of_dentry();
#line 590
  __ldv_spin_lock(ldv_func_arg1);
#line 591
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_167(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 598
  ldv_spin_unlock_d_lock_of_dentry();
#line 600
  __ldv_spin_unlock(ldv_func_arg1);
#line 601
  return;
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_168(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 608
  ldv_spin_lock_siglock_of_sighand_struct();
#line 610
  __ldv_spin_lock(ldv_func_arg1);
#line 611
  return;
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_169(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 618
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 620
  __ldv_spin_unlock(ldv_func_arg1);
#line 621
  return;
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_lock_170(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 628
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 630
  __ldv_spin_lock(ldv_func_arg1);
#line 631
  return;
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_171(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 638
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 640
  __ldv_spin_unlock(ldv_func_arg1);
#line 641
  return;
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void ldv___ldv_spin_unlock_172(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 648
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 650
  __ldv_spin_unlock(ldv_func_arg1);
#line 651
  return;
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_191(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_194(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_196(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_199(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_200(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_203(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_205(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_207(spinlock_t *ldv_func_arg1 ) ;
#line 41
void ldv___ldv_spin_unlock_192(spinlock_t *ldv_func_arg1 ) ;
#line 45
void ldv___ldv_spin_unlock_195(spinlock_t *ldv_func_arg1 ) ;
#line 49
void ldv___ldv_spin_unlock_197(spinlock_t *ldv_func_arg1 ) ;
#line 53
void ldv___ldv_spin_unlock_198(spinlock_t *ldv_func_arg1 ) ;
#line 57
void ldv___ldv_spin_unlock_201(spinlock_t *ldv_func_arg1 ) ;
#line 61
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) ;
#line 65
void ldv___ldv_spin_unlock_204(spinlock_t *ldv_func_arg1 ) ;
#line 69
void ldv___ldv_spin_unlock_206(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_208(spinlock_t *ldv_func_arg1 ) ;
#line 78
int ldv___ldv_spin_trylock_193(spinlock_t *ldv_func_arg1 ) ;
#line 207 "include/asm/compat.h"
__inline static void *compat_alloc_user_space(long len ) 
{ 
  struct pt_regs *regs ;
  struct task_struct *tmp ;

  {
#line 209
  tmp = get_current();
#line 209
  regs = (struct pt_regs *)(tmp->thread.sp0 + 0xffffffffffffffffUL);
#line 210
  return ((void *)(regs->sp - (unsigned long )len));
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 210 "include/asm/uaccess.h"
extern void __put_user_bad(void) ;
#line 24 "include/asm/uaccess_64.h"
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 844 "include/drm/drmP.h"
extern long drm_compat_ioctl(struct file * , unsigned int  , unsigned long  ) ;
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_batchbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_batchbuffer32_t batchbuffer32 ;
  drm_i915_batchbuffer_t *batchbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 136
  tmp = copy_from_user((void *)(& batchbuffer32), (void const   *)arg, 24U);
#line 136
  if (tmp != 0UL) {
#line 138
    return (-14);
  } else {

  }
#line 140
  tmp___0 = compat_alloc_user_space(32L);
#line 140
  batchbuffer = (drm_i915_batchbuffer_t *)tmp___0;
#line 141
  tmp___1 = current_thread_info();
#line 141
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batchbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 141
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 148
  if (tmp___2 == 0L) {
#line 150
    return (-14);
  } else {
#line 142
    __pu_err = 0L;
#line 142
    switch (4UL) {
    case 1UL: 
#line 142
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 142
    goto ldv_22729;
    case 2UL: 
#line 142
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 142
    goto ldv_22729;
    case 4UL: 
#line 142
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 142
    goto ldv_22729;
    case 8UL: 
#line 142
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 142
    goto ldv_22729;
    default: 
#line 142
    __put_user_bad();
    }
    ldv_22729: ;
#line 148
    if (__pu_err != 0L) {
#line 150
      return (-14);
    } else {
#line 143
      __pu_err___0 = 0L;
#line 143
      switch (4UL) {
      case 1UL: 
#line 143
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 143
      goto ldv_22737;
      case 2UL: 
#line 143
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 143
      goto ldv_22737;
      case 4UL: 
#line 143
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 143
      goto ldv_22737;
      case 8UL: 
#line 143
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 143
      goto ldv_22737;
      default: 
#line 143
      __put_user_bad();
      }
      ldv_22737: ;
#line 148
      if (__pu_err___0 != 0L) {
#line 150
        return (-14);
      } else {
#line 144
        __pu_err___1 = 0L;
#line 144
        switch (4UL) {
        case 1UL: 
#line 144
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 144
        goto ldv_22745;
        case 2UL: 
#line 144
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 144
        goto ldv_22745;
        case 4UL: 
#line 144
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 144
        goto ldv_22745;
        case 8UL: 
#line 144
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 144
        goto ldv_22745;
        default: 
#line 144
        __put_user_bad();
        }
        ldv_22745: ;
#line 148
        if (__pu_err___1 != 0L) {
#line 150
          return (-14);
        } else {
#line 145
          __pu_err___2 = 0L;
#line 145
          switch (4UL) {
          case 1UL: 
#line 145
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 145
          goto ldv_22753;
          case 2UL: 
#line 145
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 145
          goto ldv_22753;
          case 4UL: 
#line 145
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 145
          goto ldv_22753;
          case 8UL: 
#line 145
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 145
          goto ldv_22753;
          default: 
#line 145
          __put_user_bad();
          }
          ldv_22753: ;
#line 148
          if (__pu_err___2 != 0L) {
#line 150
            return (-14);
          } else {
#line 146
            __pu_err___3 = 0L;
#line 146
            switch (4UL) {
            case 1UL: 
#line 146
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 146
            goto ldv_22761;
            case 2UL: 
#line 146
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 146
            goto ldv_22761;
            case 4UL: 
#line 146
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 146
            goto ldv_22761;
            case 8UL: 
#line 146
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 146
            goto ldv_22761;
            default: 
#line 146
            __put_user_bad();
            }
            ldv_22761: ;
#line 148
            if (__pu_err___3 != 0L) {
#line 150
              return (-14);
            } else {
#line 148
              __pu_err___4 = 0L;
#line 148
              switch (8UL) {
              case 1UL: 
#line 148
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 148
              goto ldv_22769;
              case 2UL: 
#line 148
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 148
              goto ldv_22769;
              case 4UL: 
#line 148
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 148
              goto ldv_22769;
              case 8UL: 
#line 148
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 148
              goto ldv_22769;
              default: 
#line 148
              __put_user_bad();
              }
              ldv_22769: ;
#line 148
              if (__pu_err___4 != 0L) {
#line 150
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 152
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864643U, (unsigned long )batchbuffer);
#line 152
  return (tmp___3);
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_cmdbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_cmdbuffer32_t cmdbuffer32 ;
  drm_i915_cmdbuffer_t *cmdbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 172
  tmp = copy_from_user((void *)(& cmdbuffer32), (void const   *)arg, 24U);
#line 172
  if (tmp != 0UL) {
#line 174
    return (-14);
  } else {

  }
#line 176
  tmp___0 = compat_alloc_user_space(32L);
#line 176
  cmdbuffer = (drm_i915_cmdbuffer_t *)tmp___0;
#line 177
  tmp___1 = current_thread_info();
#line 177
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 177
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 184
  if (tmp___2 == 0L) {
#line 186
    return (-14);
  } else {
#line 178
    __pu_err = 0L;
#line 178
    switch (8UL) {
    case 1UL: 
#line 178
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 178
    goto ldv_22795;
    case 2UL: 
#line 178
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 178
    goto ldv_22795;
    case 4UL: 
#line 178
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 178
    goto ldv_22795;
    case 8UL: 
#line 178
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 178
    goto ldv_22795;
    default: 
#line 178
    __put_user_bad();
    }
    ldv_22795: ;
#line 184
    if (__pu_err != 0L) {
#line 186
      return (-14);
    } else {
#line 180
      __pu_err___0 = 0L;
#line 180
      switch (4UL) {
      case 1UL: 
#line 180
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 180
      goto ldv_22803;
      case 2UL: 
#line 180
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 180
      goto ldv_22803;
      case 4UL: 
#line 180
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 180
      goto ldv_22803;
      case 8UL: 
#line 180
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 180
      goto ldv_22803;
      default: 
#line 180
      __put_user_bad();
      }
      ldv_22803: ;
#line 184
      if (__pu_err___0 != 0L) {
#line 186
        return (-14);
      } else {
#line 181
        __pu_err___1 = 0L;
#line 181
        switch (4UL) {
        case 1UL: 
#line 181
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 181
        goto ldv_22811;
        case 2UL: 
#line 181
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 181
        goto ldv_22811;
        case 4UL: 
#line 181
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 181
        goto ldv_22811;
        case 8UL: 
#line 181
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 181
        goto ldv_22811;
        default: 
#line 181
        __put_user_bad();
        }
        ldv_22811: ;
#line 184
        if (__pu_err___1 != 0L) {
#line 186
          return (-14);
        } else {
#line 182
          __pu_err___2 = 0L;
#line 182
          switch (4UL) {
          case 1UL: 
#line 182
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 182
          goto ldv_22819;
          case 2UL: 
#line 182
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 182
          goto ldv_22819;
          case 4UL: 
#line 182
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 182
          goto ldv_22819;
          case 8UL: 
#line 182
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 182
          goto ldv_22819;
          default: 
#line 182
          __put_user_bad();
          }
          ldv_22819: ;
#line 184
          if (__pu_err___2 != 0L) {
#line 186
            return (-14);
          } else {
#line 183
            __pu_err___3 = 0L;
#line 183
            switch (4UL) {
            case 1UL: 
#line 183
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 183
            goto ldv_22827;
            case 2UL: 
#line 183
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 183
            goto ldv_22827;
            case 4UL: 
#line 183
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 183
            goto ldv_22827;
            case 8UL: 
#line 183
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 183
            goto ldv_22827;
            default: 
#line 183
            __put_user_bad();
            }
            ldv_22827: ;
#line 184
            if (__pu_err___3 != 0L) {
#line 186
              return (-14);
            } else {
#line 184
              __pu_err___4 = 0L;
#line 184
              switch (8UL) {
              case 1UL: 
#line 184
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 184
              goto ldv_22835;
              case 2UL: 
#line 184
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 184
              goto ldv_22835;
              case 4UL: 
#line 184
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 184
              goto ldv_22835;
              case 8UL: 
#line 184
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 184
              goto ldv_22835;
              default: 
#line 184
              __put_user_bad();
              }
              ldv_22835: ;
#line 184
              if (__pu_err___4 != 0L) {
#line 186
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 188
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864651U, (unsigned long )cmdbuffer);
#line 188
  return (tmp___3);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_irq_emit(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_irq_emit32_t req32 ;
  drm_i915_irq_emit_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  int tmp___3 ;

  {
#line 202
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 4U);
#line 202
  if (tmp != 0UL) {
#line 203
    return (-14);
  } else {

  }
#line 205
  tmp___0 = compat_alloc_user_space(8L);
#line 205
  request = (drm_i915_irq_emit_t *)tmp___0;
#line 206
  tmp___1 = current_thread_info();
#line 206
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (8L), "rm" (tmp___1->addr_limit.seg));
#line 206
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 207
  if (tmp___2 == 0L) {
#line 209
    return (-14);
  } else {
#line 207
    __pu_err = 0L;
#line 207
    switch (8UL) {
    case 1UL: 
#line 207
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 207
    goto ldv_22856;
    case 2UL: 
#line 207
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 207
    goto ldv_22856;
    case 4UL: 
#line 207
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 207
    goto ldv_22856;
    case 8UL: 
#line 207
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 207
    goto ldv_22856;
    default: 
#line 207
    __put_user_bad();
    }
    ldv_22856: ;
#line 207
    if (__pu_err != 0L) {
#line 209
      return (-14);
    } else {

    }
  }
#line 211
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3221775428U, (unsigned long )request);
#line 211
  return (tmp___3);
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_getparam(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_getparam32_t req32 ;
  drm_i915_getparam_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  int tmp___3 ;

  {
#line 225
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 8U);
#line 225
  if (tmp != 0UL) {
#line 226
    return (-14);
  } else {

  }
#line 228
  tmp___0 = compat_alloc_user_space(16L);
#line 228
  request = (drm_i915_getparam_t *)tmp___0;
#line 229
  tmp___1 = current_thread_info();
#line 229
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (16L), "rm" (tmp___1->addr_limit.seg));
#line 229
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 231
  if (tmp___2 == 0L) {
#line 233
    return (-14);
  } else {
#line 230
    __pu_err = 0L;
#line 230
    switch (4UL) {
    case 1UL: 
#line 230
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 230
    goto ldv_22878;
    case 2UL: 
#line 230
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 230
    goto ldv_22878;
    case 4UL: 
#line 230
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 230
    goto ldv_22878;
    case 8UL: 
#line 230
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 230
    goto ldv_22878;
    default: 
#line 230
    __put_user_bad();
    }
    ldv_22878: ;
#line 231
    if (__pu_err != 0L) {
#line 233
      return (-14);
    } else {
#line 231
      __pu_err___0 = 0L;
#line 231
      switch (8UL) {
      case 1UL: 
#line 231
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 231
      goto ldv_22886;
      case 2UL: 
#line 231
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 231
      goto ldv_22886;
      case 4UL: 
#line 231
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 231
      goto ldv_22886;
      case 8UL: 
#line 231
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 231
      goto ldv_22886;
      default: 
#line 231
      __put_user_bad();
      }
      ldv_22886: ;
#line 231
      if (__pu_err___0 != 0L) {
#line 233
        return (-14);
      } else {

      }
    }
  }
#line 235
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222299718U, (unsigned long )request);
#line 235
  return (tmp___3);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_alloc(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_mem_alloc32_t req32 ;
  drm_i915_mem_alloc_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  int tmp___3 ;

  {
#line 252
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 16U);
#line 252
  if (tmp != 0UL) {
#line 253
    return (-14);
  } else {

  }
#line 255
  tmp___0 = compat_alloc_user_space(24L);
#line 255
  request = (drm_i915_mem_alloc_t *)tmp___0;
#line 256
  tmp___1 = current_thread_info();
#line 256
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (24L), "rm" (tmp___1->addr_limit.seg));
#line 256
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 260
  if (tmp___2 == 0L) {
#line 262
    return (-14);
  } else {
#line 257
    __pu_err = 0L;
#line 257
    switch (4UL) {
    case 1UL: 
#line 257
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 257
    goto ldv_22910;
    case 2UL: 
#line 257
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 257
    goto ldv_22910;
    case 4UL: 
#line 257
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 257
    goto ldv_22910;
    case 8UL: 
#line 257
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 257
    goto ldv_22910;
    default: 
#line 257
    __put_user_bad();
    }
    ldv_22910: ;
#line 260
    if (__pu_err != 0L) {
#line 262
      return (-14);
    } else {
#line 258
      __pu_err___0 = 0L;
#line 258
      switch (4UL) {
      case 1UL: 
#line 258
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 258
      goto ldv_22918;
      case 2UL: 
#line 258
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 258
      goto ldv_22918;
      case 4UL: 
#line 258
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 258
      goto ldv_22918;
      case 8UL: 
#line 258
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 258
      goto ldv_22918;
      default: 
#line 258
      __put_user_bad();
      }
      ldv_22918: ;
#line 260
      if (__pu_err___0 != 0L) {
#line 262
        return (-14);
      } else {
#line 259
        __pu_err___1 = 0L;
#line 259
        switch (4UL) {
        case 1UL: 
#line 259
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 259
        goto ldv_22926;
        case 2UL: 
#line 259
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 259
        goto ldv_22926;
        case 4UL: 
#line 259
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 259
        goto ldv_22926;
        case 8UL: 
#line 259
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 259
        goto ldv_22926;
        default: 
#line 259
        __put_user_bad();
        }
        ldv_22926: ;
#line 260
        if (__pu_err___1 != 0L) {
#line 262
          return (-14);
        } else {
#line 260
          __pu_err___2 = 0L;
#line 260
          switch (8UL) {
          case 1UL: 
#line 260
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 260
          goto ldv_22934;
          case 2UL: 
#line 260
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 260
          goto ldv_22934;
          case 4UL: 
#line 260
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 260
          goto ldv_22934;
          case 8UL: 
#line 260
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 260
          goto ldv_22934;
          default: 
#line 260
          __put_user_bad();
          }
          ldv_22934: ;
#line 260
          if (__pu_err___2 != 0L) {
#line 262
            return (-14);
          } else {

          }
        }
      }
    }
  }
#line 264
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222824008U, (unsigned long )request);
#line 264
  return (tmp___3);
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
drm_ioctl_compat_t *i915_compat_ioctls[12U]  = 
#line 268
  {      0,      0,      0,      & compat_i915_batchbuffer, 
        & compat_i915_irq_emit,      0,      & compat_i915_getparam,      0, 
        & compat_i915_alloc,      0,      0,      & compat_i915_cmdbuffer};
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  unsigned int nr ;
  drm_ioctl_compat_t *fn ;
  int ret ;
  long tmp ;

  {
#line 287
  nr = cmd & 255U;
#line 288
  fn = 0;
#line 291
  if (nr <= 63U) {
#line 292
    tmp = drm_compat_ioctl(filp, cmd, arg);
#line 292
    return (tmp);
  } else {

  }
#line 294
  if (nr <= 75U) {
#line 295
    fn = i915_compat_ioctls[nr - 64U];
  } else {

  }
#line 297
  lock_kernel();
#line 298
  if ((unsigned long )fn != (unsigned long )((drm_ioctl_compat_t *)0)) {
#line 299
    ret = (*fn)(filp, cmd, arg);
  } else {
#line 301
    ret = drm_ioctl((filp->f_path.dentry)->d_inode, filp, cmd, arg);
  }
#line 302
  unlock_kernel();
#line 304
  return ((long )ret);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_191(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 312
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 314
  __ldv_spin_lock(ldv_func_arg1);
#line 315
  return;
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_192(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 322
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 324
  __ldv_spin_unlock(ldv_func_arg1);
#line 325
  return;
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
int ldv___ldv_spin_trylock_193(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 332
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 332
  ldv_func_res = tmp;
#line 334
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 334
  return (tmp___0);
#line 336
  return (ldv_func_res);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_194(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 344
  ldv_spin_lock_siglock_of_sighand_struct();
#line 346
  __ldv_spin_lock(ldv_func_arg1);
#line 347
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_195(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 354
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 356
  __ldv_spin_unlock(ldv_func_arg1);
#line 357
  return;
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_196(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 364
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 366
  __ldv_spin_lock(ldv_func_arg1);
#line 367
  return;
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_197(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 374
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 376
  __ldv_spin_unlock(ldv_func_arg1);
#line 377
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_198(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 384
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 386
  __ldv_spin_unlock(ldv_func_arg1);
#line 387
  return;
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_199(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 394
  ldv_spin_lock_dcache_lock();
#line 396
  __ldv_spin_lock(ldv_func_arg1);
#line 397
  return;
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_200(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 404
  ldv_spin_lock_d_lock_of_dentry();
#line 406
  __ldv_spin_lock(ldv_func_arg1);
#line 407
  return;
}
}
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_201(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 414
  ldv_spin_unlock_d_lock_of_dentry();
#line 416
  __ldv_spin_unlock(ldv_func_arg1);
#line 417
  return;
}
}
#line 419 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_202(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 424
  ldv_spin_unlock_dcache_lock();
#line 426
  __ldv_spin_unlock(ldv_func_arg1);
#line 427
  return;
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_203(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 434
  ldv_spin_lock_d_lock_of_dentry();
#line 436
  __ldv_spin_lock(ldv_func_arg1);
#line 437
  return;
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_204(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 444
  ldv_spin_unlock_d_lock_of_dentry();
#line 446
  __ldv_spin_unlock(ldv_func_arg1);
#line 447
  return;
}
}
#line 449 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_205(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 454
  ldv_spin_lock_i_lock_of_inode();
#line 456
  __ldv_spin_lock(ldv_func_arg1);
#line 457
  return;
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_206(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 464
  ldv_spin_unlock_i_lock_of_inode();
#line 466
  __ldv_spin_unlock(ldv_func_arg1);
#line 467
  return;
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_lock_207(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 474
  ldv_spin_lock_d_lock_of_dentry();
#line 476
  __ldv_spin_lock(ldv_func_arg1);
#line 477
  return;
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/dscv/ri/39_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
void ldv___ldv_spin_unlock_208(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 484
  ldv_spin_unlock_d_lock_of_dentry();
#line 486
  __ldv_spin_unlock(ldv_func_arg1);
#line 487
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 139
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_d_lock_of_dentry = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 148
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_d_lock_of_dentry = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_d_lock_of_dentry = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 183
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_d_lock_of_dentry = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_dcache_lock  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_dcache_lock(void) 
{ 


  {
#line 264
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_dcache_lock = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_dcache_lock(void) 
{ 


  {
#line 273
  if (ldv_spin_dcache_lock == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_dcache_lock = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_dcache_lock = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_dcache_lock(void) 
{ 


  {
#line 308
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_dcache_lock == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_dcache_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_dcache_lock();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_dcache_lock(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_dcache_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_dcache_lock = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_drw_lock_of_drm_device  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_drw_lock_of_drm_device(void) 
{ 


  {
#line 389
  if (ldv_spin_drw_lock_of_drm_device == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_drw_lock_of_drm_device = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_drw_lock_of_drm_device(void) 
{ 


  {
#line 398
  if (ldv_spin_drw_lock_of_drm_device == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_drw_lock_of_drm_device = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_drw_lock_of_drm_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_drw_lock_of_drm_device == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_drw_lock_of_drm_device = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_drw_lock_of_drm_device(void) 
{ 


  {
#line 433
  if (ldv_spin_drw_lock_of_drm_device == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_drw_lock_of_drm_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_drw_lock_of_drm_device == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_drw_lock_of_drm_device(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_drw_lock_of_drm_device();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_drw_lock_of_drm_device(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_drw_lock_of_drm_device(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_drw_lock_of_drm_device == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_drw_lock_of_drm_device = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 514
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_i_lock_of_inode = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 523
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_i_lock_of_inode = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_i_lock_of_inode = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 558
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_i_lock_of_inode = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 639
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 648
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 683
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 764
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 764
    ldv_error();
  }
#line 766
  ldv_spin_siglock_of_sighand_struct = 2;
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 773
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 773
    ldv_error();
  }
#line 775
  ldv_spin_siglock_of_sighand_struct = 1;
#line 776
  return;
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 784
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 787
  is_spin_held_by_another_thread = ldv_undef_int();
#line 790
  if (is_spin_held_by_another_thread) {
#line 793
    return (0);
  } else {
#line 798
    ldv_spin_siglock_of_sighand_struct = 2;
#line 800
    return (1);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 808
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 808
    ldv_error();
  }
#line 809
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 817
  is_spin_held_by_another_thread = ldv_undef_int();
#line 820
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 823
    return (0);
  } else {
#line 828
    return (1);
  }
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 836
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 836
  if (tmp) {
#line 836
    tmp___0 = 0;
  } else {
#line 836
    tmp___0 = 1;
  }
#line 836
  return (tmp___0);
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 845
  is_spin_contended = ldv_undef_int();
#line 848
  if (is_spin_contended) {
#line 851
    return (0);
  } else {
#line 856
    return (1);
  }
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 866
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 866
    ldv_error();
  }
#line 869
  atomic_value_after_dec = ldv_undef_int();
#line 872
  if (atomic_value_after_dec == 0) {
#line 875
    ldv_spin_siglock_of_sighand_struct = 2;
#line 877
    return (1);
  } else {

  }
#line 881
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_swaps_lock_of_drm_i915_private  ;
#line 886 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_swaps_lock_of_drm_i915_private(void) 
{ 


  {
#line 889
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1) {

  } else {
#line 889
    ldv_error();
  }
#line 891
  ldv_spin_swaps_lock_of_drm_i915_private = 2;
#line 892
  return;
}
}
#line 895 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_swaps_lock_of_drm_i915_private(void) 
{ 


  {
#line 898
  if (ldv_spin_swaps_lock_of_drm_i915_private == 2) {

  } else {
#line 898
    ldv_error();
  }
#line 900
  ldv_spin_swaps_lock_of_drm_i915_private = 1;
#line 901
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_swaps_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 909
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1) {

  } else {
#line 909
    ldv_error();
  }
#line 912
  is_spin_held_by_another_thread = ldv_undef_int();
#line 915
  if (is_spin_held_by_another_thread) {
#line 918
    return (0);
  } else {
#line 923
    ldv_spin_swaps_lock_of_drm_i915_private = 2;
#line 925
    return (1);
  }
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_swaps_lock_of_drm_i915_private(void) 
{ 


  {
#line 933
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1) {

  } else {
#line 933
    ldv_error();
  }
#line 934
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_swaps_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 942
  is_spin_held_by_another_thread = ldv_undef_int();
#line 945
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1 && ! is_spin_held_by_another_thread) {
#line 948
    return (0);
  } else {
#line 953
    return (1);
  }
}
}
#line 958 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_swaps_lock_of_drm_i915_private(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 961
  tmp = ldv_spin_is_locked_swaps_lock_of_drm_i915_private();
#line 961
  if (tmp) {
#line 961
    tmp___0 = 0;
  } else {
#line 961
    tmp___0 = 1;
  }
#line 961
  return (tmp___0);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_swaps_lock_of_drm_i915_private(void) 
{ 
  int is_spin_contended ;

  {
#line 970
  is_spin_contended = ldv_undef_int();
#line 973
  if (is_spin_contended) {
#line 976
    return (0);
  } else {
#line 981
    return (1);
  }
}
}
#line 986 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_swaps_lock_of_drm_i915_private(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 991
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1) {

  } else {
#line 991
    ldv_error();
  }
#line 994
  atomic_value_after_dec = ldv_undef_int();
#line 997
  if (atomic_value_after_dec == 0) {
#line 1000
    ldv_spin_swaps_lock_of_drm_i915_private = 2;
#line 1002
    return (1);
  } else {

  }
#line 1006
  return (0);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_user_irq_lock_of_drm_i915_private  ;
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 1014
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 1014
    ldv_error();
  }
#line 1016
  ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 1017
  return;
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 1023
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 2) {

  } else {
#line 1023
    ldv_error();
  }
#line 1025
  ldv_spin_user_irq_lock_of_drm_i915_private = 1;
#line 1026
  return;
}
}
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1034
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 1034
    ldv_error();
  }
#line 1037
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1040
  if (is_spin_held_by_another_thread) {
#line 1043
    return (0);
  } else {
#line 1048
    ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 1050
    return (1);
  }
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_user_irq_lock_of_drm_i915_private(void) 
{ 


  {
#line 1058
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 1058
    ldv_error();
  }
#line 1059
  return;
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 1067
  is_spin_held_by_another_thread = ldv_undef_int();
#line 1070
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1 && ! is_spin_held_by_another_thread) {
#line 1073
    return (0);
  } else {
#line 1078
    return (1);
  }
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1086
  tmp = ldv_spin_is_locked_user_irq_lock_of_drm_i915_private();
#line 1086
  if (tmp) {
#line 1086
    tmp___0 = 0;
  } else {
#line 1086
    tmp___0 = 1;
  }
#line 1086
  return (tmp___0);
}
}
#line 1090 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_user_irq_lock_of_drm_i915_private(void) 
{ 
  int is_spin_contended ;

  {
#line 1095
  is_spin_contended = ldv_undef_int();
#line 1098
  if (is_spin_contended) {
#line 1101
    return (0);
  } else {
#line 1106
    return (1);
  }
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_user_irq_lock_of_drm_i915_private(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 1116
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 1116
    ldv_error();
  }
#line 1119
  atomic_value_after_dec = ldv_undef_int();
#line 1122
  if (atomic_value_after_dec == 0) {
#line 1125
    ldv_spin_user_irq_lock_of_drm_i915_private = 2;
#line 1127
    return (1);
  } else {

  }
#line 1131
  return (0);
}
}
#line 1135 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 1138
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 1140
  ldv_spin_d_lock_of_dentry = 1;
#line 1142
  ldv_spin_dcache_lock = 1;
#line 1144
  ldv_spin_drw_lock_of_drm_device = 1;
#line 1146
  ldv_spin_i_lock_of_inode = 1;
#line 1148
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 1150
  ldv_spin_siglock_of_sighand_struct = 1;
#line 1152
  ldv_spin_swaps_lock_of_drm_i915_private = 1;
#line 1154
  ldv_spin_user_irq_lock_of_drm_i915_private = 1;
#line 1155
  return;
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/15/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 1161
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 1161
    ldv_error();
  }
#line 1163
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 1163
    ldv_error();
  }
#line 1165
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 1165
    ldv_error();
  }
#line 1167
  if (ldv_spin_drw_lock_of_drm_device == 1) {

  } else {
#line 1167
    ldv_error();
  }
#line 1169
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 1169
    ldv_error();
  }
#line 1171
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 1171
    ldv_error();
  }
#line 1173
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 1173
    ldv_error();
  }
#line 1175
  if (ldv_spin_swaps_lock_of_drm_i915_private == 1) {

  } else {
#line 1175
    ldv_error();
  }
#line 1177
  if (ldv_spin_user_irq_lock_of_drm_i915_private == 1) {

  } else {
#line 1177
    ldv_error();
  }
#line 1178
  return;
}
}
