/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 109 "include/linux/kernel.h"
struct completion;
#line 110
struct pt_regs;
#line 209
struct pid;
#line 730
struct task_struct;
#line 731
struct mm_struct;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1833_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1833_8 ldv_1833 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2052_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2067_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2068_14 {
   struct __anonstruct_ldv_2052_15 ldv_2052 ;
   struct __anonstruct_ldv_2067_16 ldv_2067 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2068_14 ldv_2068 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_TYPE_NR = 19
} ;
#line 121
struct thread_struct;
#line 123
struct cpumask;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 593 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4650_20 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4656_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4657_19 {
   struct __anonstruct_ldv_4650_20 ldv_4650 ;
   struct __anonstruct_ldv_4656_21 ldv_4656 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4666_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4657_19 ldv_4657 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4666_22 ldv_4666 ;
};
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426
struct ds_context;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 634 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 170 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 427 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5556_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5557_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5556_27 ldv_5556 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5557_26 ldv_5557 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 40 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 41
struct compat_timespec;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5695_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 42
struct pollfd;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5718_29 {
   struct __anonstruct_ldv_5695_30 ldv_5695 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5718_29 ldv_5718 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 393 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299
struct hlist_nulls_node;
#line 299 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[8U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 643 "include/linux/mmzone.h"
struct rw_semaphore;
#line 645 "include/linux/mmzone.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 752
struct ctl_table;
#line 165 "include/linux/ioport.h"
struct device;
#line 36 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 45 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 46 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 216
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 226
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 233
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 240 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 33 "include/linux/kmod.h"
struct key;
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 406
struct kobject;
#line 407 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10605_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10605_110 ldv_10605 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 300 "include/linux/rcupdate.h"
struct tracepoint;
#line 301 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 57 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 67 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 181
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 187
struct module_sect_attrs;
#line 187
struct module_notes_attrs;
#line 187
struct ftrace_event_call;
#line 187 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 544
struct device_driver;
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 37 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 38 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 52 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 141 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_112 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_113 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_113 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_114 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_114 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_115 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_115 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_116 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_116 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_117 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_117 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_118 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_118 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_119 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_119 ifs_ifsu ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifrn_120 {
   char ifrn_name[16U] ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifru_121 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 155 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_120 ifr_ifrn ;
   union __anonunion_ifr_ifru_121 ifr_ifru ;
};
#line 122 "include/linux/if_ether.h"
struct prio_tree_node;
#line 122 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 164
struct address_space;
#line 30 "include/linux/mm_types.h"
typedef unsigned long mm_counter_t;
#line 31 "include/linux/mm_types.h"
struct __anonstruct_ldv_12281_124 {
   u16 inuse ;
   u16 objects ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_12282_123 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12281_124 ldv_12281 ;
};
#line 31 "include/linux/mm_types.h"
struct __anonstruct_ldv_12287_126 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_12290_125 {
   struct __anonstruct_ldv_12287_126 ldv_12287 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 31 "include/linux/mm_types.h"
union __anonunion_ldv_12294_127 {
   unsigned long index ;
   void *freelist ;
};
#line 31 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12282_123 ldv_12282 ;
   union __anonunion_ldv_12290_125 ldv_12290 ;
   union __anonunion_ldv_12294_127 ldv_12294 ;
   struct list_head lru ;
};
#line 127 "include/linux/mm_types.h"
struct __anonstruct_vm_set_129 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 127 "include/linux/mm_types.h"
union __anonunion_shared_128 {
   struct __anonstruct_vm_set_129 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 127
struct anon_vma;
#line 127
struct vm_operations_struct;
#line 127
struct mempolicy;
#line 127 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_128 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 189 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 195 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 201
struct linux_binfmt;
#line 201
struct mmu_notifier_mm;
#line 201 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 108 "include/linux/kmemcheck.h"
enum ldv_12312 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12312 socket_state;
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct pipe_inode_info;
#line 165
struct inode;
#line 166
struct net;
#line 183
struct fasync_struct;
#line 183
struct sock;
#line 183
struct proto_ops;
#line 183 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   int type_begin[0U] ;
   short type ;
   int type_end[0U] ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 148 "include/linux/net.h"
struct kiocb;
#line 149 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 838 "include/linux/sysctl.h"
struct nsproxy;
#line 839
struct ctl_table_root;
#line 840 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 949
struct ctl_table_header;
#line 967 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 985 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1035 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1069 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 281 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 308 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 369 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 378
struct dma_coherent_mem;
#line 378 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 19
struct rlimit;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 174 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 631
struct hrtimer_clock_base;
#line 632
struct hrtimer_cpu_base;
#line 641
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 646 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 442
struct net_device;
#line 443 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 253 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 254
struct sec_path;
#line 254 "include/linux/skbuff.h"
struct __anonstruct_ldv_17966_133 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_17967_132 {
   __wsum csum ;
   struct __anonstruct_ldv_17966_133 ldv_17966 ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_17999_134 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 254 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   struct sock *sk ;
   ktime_t tstamp ;
   struct net_device *dev ;
   unsigned long _skb_dst ;
   struct sec_path *sp ;
   char cb[48U] ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_17967_132 ldv_17967 ;
   __u32 priority ;
   int flags1_begin[0U] ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   int flags1_end[0U] ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   int flags2_begin[0U] ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   int flags2_end[0U] ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_17999_134 ldv_17999 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 419
struct dst_entry;
#line 429
struct rtable;
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 70 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 85 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 93 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 102 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 198 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 220 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 259 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 268 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 285 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 307 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 314 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 320 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 326 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 338 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 338 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 338 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 355 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 369 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
};
#line 517
struct prot_inuse;
#line 518 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[75U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[26U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   rwlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 70 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 70 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 312 "include/linux/in.h"
union __anonunion_in6_u_137 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 312 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_137 in6_u ;
};
#line 235 "include/linux/netfilter.h"
struct flowi;
#line 296 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_139 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_140 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_dn_u_141 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 296 "include/linux/netfilter.h"
union __anonunion_nl_u_138 {
   struct __anonstruct_ip4_u_139 ip4_u ;
   struct __anonstruct_ip6_u_140 ip6_u ;
   struct __anonstruct_dn_u_141 dn_u ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_ports_143 {
   __be16 sport ;
   __be16 dport ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_icmpt_144 {
   __u8 type ;
   __u8 code ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_dnports_145 {
   __le16 sport ;
   __le16 dport ;
};
#line 296 "include/linux/netfilter.h"
struct __anonstruct_mht_146 {
   __u8 type ;
};
#line 296 "include/linux/netfilter.h"
union __anonunion_uli_u_142 {
   struct __anonstruct_ports_143 ports ;
   struct __anonstruct_icmpt_144 icmpt ;
   struct __anonstruct_dnports_145 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_146 mht ;
};
#line 296 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_138 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_142 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_147 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_147 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 193
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 200
struct pid_namespace;
#line 200 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 568 "include/linux/capability.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 415 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 474 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 321 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 336 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 564 "include/linux/fs.h"
union __anonunion_arg_150 {
   char *buf ;
   void *data ;
};
#line 564 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_149 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_150 arg ;
   int error ;
};
#line 564 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_149 read_descriptor_t;
#line 567 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 616
struct backing_dev_info;
#line 617 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 638
struct hd_struct;
#line 638
struct gendisk;
#line 638 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 706
struct posix_acl;
#line 707
struct inode_operations;
#line 707
struct file_operations;
#line 707
struct file_lock;
#line 707
struct cdev;
#line 707 "include/linux/fs.h"
union __anonunion_ldv_21258_151 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 707 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_21258_151 ldv_21258 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 875 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 883 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 906 "include/linux/fs.h"
union __anonunion_f_u_152 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 906 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_152 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1029
struct files_struct;
#line 1029 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_154 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_153 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_154 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_153 fl_u ;
};
#line 1134 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1311
struct file_system_type;
#line 1311
struct super_operations;
#line 1311
struct xattr_handler;
#line 1311
struct mtd_info;
#line 1311 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1429 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1467
struct block_device_operations;
#line 1468 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1508 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1551 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1731 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2187
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 350 "include/linux/netfilter.h"
struct ebt_table;
#line 351 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
};
#line 464 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 15 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 55
struct net_generic;
#line 56 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 93 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 109 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 128 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 228 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 260 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 265 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 292 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 498
struct Qdisc;
#line 498 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 520 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 675
enum ldv_18650 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 684
struct iw_handler_def;
#line 684
struct iw_public_data;
#line 684
struct net_bridge_port;
#line 684
struct macvlan_port;
#line 684
struct garp_port;
#line 684
struct rtnl_link_ops;
#line 684 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   struct netdev_hw_addr_list uc ;
   int uc_promisc ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_18650 reg_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
};
#line 1106
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2086 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
};
#line 78 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 133
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_157 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_157 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_159 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_160 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_161 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_162 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_163 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_164 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_158 {
   int _pad[28U] ;
   struct __anonstruct__kill_159 _kill ;
   struct __anonstruct__timer_160 _timer ;
   struct __anonstruct__rt_161 _rt ;
   struct __anonstruct__sigchld_162 _sigchld ;
   struct __anonstruct__sigfault_163 _sigfault ;
   struct __anonstruct__sigpoll_164 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_158 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_167 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_167 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 98 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26869_168 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_169 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_170 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26869_168 ldv_26869 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_169 type_data ;
   union __anonunion_payload_170 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct fs_struct;
#line 266
struct bts_context;
#line 267
struct perf_event_context;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 151
struct task_group;
#line 351
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_171 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_171 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 441 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 483 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 491 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 498 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 515 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 551
struct tty_struct;
#line 551
struct taskstats;
#line 551
struct tty_audit_buf;
#line 551 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 696 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct delayed_work work ;
   atomic_long_t locked_vm ;
};
#line 746
struct reclaim_state;
#line 747 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 765 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 807
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 890 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int cpu_power ;
   unsigned long cpumask[0U] ;
};
#line 917
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 931 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   unsigned int smt_gain ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0U] ;
};
#line 1033
struct io_context;
#line 1056
struct rq;
#line 1057 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1120 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1125 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1196
struct rt_rq;
#line 1196 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1213
struct mem_cgroup;
#line 1213 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1552
struct css_set;
#line 1552
struct compat_robust_list_head;
#line 1552 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 101
struct request_sock;
#line 3177 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 772 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 91
struct neigh_table;
#line 91 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 349
struct dn_route;
#line 349 "include/net/neighbour.h"
union __anonunion_ldv_31484_176 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 349 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[13U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_31484_176 ldv_31484 ;
};
#line 99 "include/net/sock.h"
struct __anonstruct_socket_lock_t_177 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 99 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_177 socket_lock_t;
#line 99
struct proto;
#line 100 "include/net/sock.h"
union __anonunion_ldv_31614_178 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 100 "include/net/sock.h"
union __anonunion_ldv_31620_179 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 100 "include/net/sock.h"
union __anonunion_ldv_31628_180 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 100 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_31614_178 ldv_31614 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_31620_179 ldv_31620 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_31628_180 ldv_31628 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 152 "include/net/sock.h"
struct __anonstruct_sk_backlog_181 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 152 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   int flags_begin[0U] ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int flags_end[0U] ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_181 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 613
struct request_sock_ops;
#line 614
struct timewait_sock_ops;
#line 615
struct inet_hashinfo;
#line 616
struct raw_hashinfo;
#line 617
struct udp_table;
#line 617 "include/net/sock.h"
union __anonunion_h_182 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 617 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_182 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 171 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 184 "include/linux/drbd.h"
struct __anonstruct_ldv_32691_183 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 184 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_32691_183 ldv_32691 ;
   unsigned int i ;
};
#line 108 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 109
struct crypto_async_request;
#line 110
struct crypto_aead;
#line 111
struct crypto_blkcipher;
#line 112
struct crypto_hash;
#line 113
struct crypto_rng;
#line 114
struct crypto_tfm;
#line 115
struct crypto_type;
#line 116
struct aead_givcrypt_request;
#line 117
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 258 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 267 "include/linux/crypto.h"
union __anonunion_cra_u_184 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 267 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_184 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 319 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 339 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 354 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 363 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 371 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 383 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 390 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 398 "include/linux/crypto.h"
union __anonunion_crt_u_185 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 398 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_185 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 427 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 431 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 435 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 447 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 451 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
};
#line 49 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
};
#line 66
struct bdi_writeback;
#line 36 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 43 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 59 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 72 "include/linux/mempool.h"
struct as_io_context {
   spinlock_t lock ;
   void (*dtor)(struct as_io_context * ) ;
   void (*exit)(struct as_io_context * ) ;
   unsigned long state ;
   atomic_t nr_queued ;
   atomic_t nr_dispatched ;
   unsigned long last_end_request ;
   unsigned long ttime_total ;
   unsigned long ttime_samples ;
   unsigned long ttime_mean ;
   unsigned int seek_samples ;
   sector_t last_request_pos ;
   u64 seek_total ;
   sector_t seek_mean ;
};
#line 56 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   unsigned long last_waited ;
   int nr_batch_requests ;
   struct as_io_context *aic ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_36290_193 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   int cpu ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   sector_t __sector ;
   unsigned int __data_len ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_36290_193 ldv_36290 ;
   void *elevator_private ;
   void *elevator_private2 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   int ref_count ;
   unsigned short cmd_len ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 19 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 20 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 21 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 22 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 25 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 26 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 27 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 28 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 30 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 31 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 32 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 60 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 68 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 80 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 259 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 260 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 261 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 262 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 263 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 271 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 273 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 274 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 275 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 276 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 277
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 284 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 290 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 299 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_hw_segments ;
   unsigned short max_phys_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 327 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1213 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1233 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1234 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1235 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1236 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1237 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1278 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   unsigned long long (*set_capacity)(struct gendisk * , unsigned long long  ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 126 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 480 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 49 "include/linux/route.h"
union __anonunion_u_199 {
   struct dst_entry dst ;
};
#line 49
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   union __anonunion_u_199 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 212 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1548 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 338 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 393 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 416 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 437 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 want_lose ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u32 queue_order_type ;
};
#line 478 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 483 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 571 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 601
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 629
struct drbd_work;
#line 639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 643
struct drbd_tl_epoch;
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 682 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 715 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   struct drbd_epoch *epoch ;
   unsigned int flags ;
   u64 block_id ;
};
#line 777
struct drbd_bitmap;
#line 778 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 813 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
};
#line 72 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 130 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 865 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 872
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 879 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1059
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2251 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct semaphore bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 138 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 145
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 54 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 175 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[9U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
};
#line 224 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[9U] ;
   struct rcu_head rcu_head ;
};
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_MAX_CMD = 37,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 644 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 737 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 859 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 178 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 250
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 511
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 707
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1375
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3231
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 4593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int ldv_func_ret_type___4;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_201 {
   u32 pos ;
   u32 extent ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_201 updates[62U] ;
   u32 xor_sum ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 1489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
typedef int ldv_func_ret_type___2;
#line 53 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_111 {
   atomic_long_t a ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_111 local_t;
#line 177 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_27483 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 34 "include/linux/kmod.h"
struct subprocess_info;
#line 59
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 717 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 66 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    AFTER_LAST_ERR_CODE = 153
} ;
#line 299 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 335 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char overwrite_peer : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
};
#line 100 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 117 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 126 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_overwrite_peer = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_resize_size = 16413,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 98 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 1998 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 9 "include/asm-generic/bitops/hweight.h"
extern unsigned long hweight64(__u64  ) ;
#line 43 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 45
  tmp = hweight64((__u64 )w);
#line 45
  return (tmp);
}
}
#line 178
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 188
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 127 "include/linux/kernel.h"
extern void __might_sleep(char * , int  , int  ) ;
#line 240
extern int printk(char const   *  , ...) ;
#line 243
extern int __printk_ratelimit(char const   * ) ;
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1909;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1909;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1909;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1909;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1909: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4325: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4325;
  } else {

  }

#line 19
  return (order);
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 23
  return ((int )v->counter);
}
}
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 35
  v->counter = i;
#line 36
  return;
}
}
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 93
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 96
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 244 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 152 "include/linux/mutex.h"
extern void mutex_unlock(struct mutex * ) ;
#line 155
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 19
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 23
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 27
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long per_cpu__kernel_stack ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 220
  switch (8UL) {
  case 1UL: 
#line 220
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5739;
  case 2UL: 
#line 220
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5739;
  case 4UL: 
#line 220
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5739;
  case 8UL: 
#line 220
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5739;
  default: 
#line 220
  __bad_percpu_size();
  }
  ldv_5739: 
#line 220
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 222
  return (ti);
}
}
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 268 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 270
  return (& lock->ldv_5557.rlock);
}
}
#line 304 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 306
  _raw_spin_lock_irq(& lock->ldv_5557.rlock);
#line 307
  return;
}
}
#line 329 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 331
  _raw_spin_unlock_irq(& lock->ldv_5557.rlock);
#line 332
  return;
}
}
#line 334 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 336
  _raw_spin_unlock_irqrestore(& lock->ldv_5557.rlock, flags);
#line 337
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 445
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 298 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 301 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 303
  tmp = alloc_pages_current(gfp_mask, order);
#line 303
  return (tmp);
}
}
#line 314
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 326
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 195 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 199
  return;
}
}
#line 138 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10947: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10947;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 142 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 148 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 150
  if (size == 0UL) {
#line 151
    return (0);
  } else {

  }
#line 153
  if (size <= 8UL) {
#line 154
    return (3);
  } else {

  }
#line 156
  if (size > 64UL && size <= 96UL) {
#line 157
    return (1);
  } else {

  }
#line 158
  if (size > 128UL && size <= 192UL) {
#line 159
    return (2);
  } else {

  }
#line 160
  if (size <= 8UL) {
#line 160
    return (3);
  } else {

  }
#line 161
  if (size <= 16UL) {
#line 161
    return (4);
  } else {

  }
#line 162
  if (size <= 32UL) {
#line 162
    return (5);
  } else {

  }
#line 163
  if (size <= 64UL) {
#line 163
    return (6);
  } else {

  }
#line 164
  if (size <= 128UL) {
#line 164
    return (7);
  } else {

  }
#line 165
  if (size <= 256UL) {
#line 165
    return (8);
  } else {

  }
#line 166
  if (size <= 512UL) {
#line 166
    return (9);
  } else {

  }
#line 167
  if (size <= 1024UL) {
#line 167
    return (10);
  } else {

  }
#line 168
  if (size <= 2048UL) {
#line 168
    return (11);
  } else {

  }
#line 169
  if (size <= 4096UL) {
#line 169
    return (12);
  } else {

  }
#line 174
  if (size <= 8192UL) {
#line 174
    return (13);
  } else {

  }
#line 175
  if (size <= 16384UL) {
#line 175
    return (14);
  } else {

  }
#line 176
  if (size <= 32768UL) {
#line 176
    return (15);
  } else {

  }
#line 177
  if (size <= 65536UL) {
#line 177
    return (16);
  } else {

  }
#line 178
  if (size <= 131072UL) {
#line 178
    return (17);
  } else {

  }
#line 179
  if (size <= 262144UL) {
#line 179
    return (18);
  } else {

  }
#line 180
  if (size <= 524288UL) {
#line 180
    return (19);
  } else {

  }
#line 181
  if (size <= 1048576UL) {
#line 181
    return (20);
  } else {

  }
#line 182
  if (size <= 2097152UL) {
#line 182
    return (21);
  } else {

  }
#line 183
  return (-1);
}
}
#line 200 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 202
  tmp = kmalloc_index(size);
#line 202
  index = tmp;
#line 204
  if (index == 0) {
#line 205
    return (0);
  } else {

  }
#line 207
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 218
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 221
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 28 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5557.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5557.ldv_5556.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 42
extern void down(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 433 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 435
  tmp = kobject_name(& dev->kobj);
#line 435
  return (tmp);
}
}
#line 575
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 590 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 592
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2189 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 349 "include/linux/sched.h"
extern void schedule(void) ;
#line 2393
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 62 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 64
  pagefault_disable();
#line 65
  tmp = lowmem_page_address(page);
#line 65
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 836 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 838
  return ((bdev->bd_disk)->queue);
}
}
#line 1003
extern int blkdev_issue_flush(struct block_device * , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 141
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 144
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 144
    tmp = _drbd_insert_fault(mdev, type);
#line 144
    if (tmp != 0U) {
#line 144
      tmp___0 = 1;
    } else {
#line 144
      tmp___0 = 0;
    }
  } else {
#line 144
    tmp___0 = 0;
  }
#line 144
  return (tmp___0);
}
}
#line 164
struct ratelimit_state drbd_ratelimit_state ;
#line 1081
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1303
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1304
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) ;
#line 1305
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1306
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1307
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1308
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1310
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1313
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1315
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1316
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1317
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1318
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1319
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1320
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1322
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1323
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1324
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1325
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1327
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1328
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1329
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1332
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1335
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1338
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1339
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1341
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1356
rwlock_t global_state_lock ;
#line 1373
char *ppsize(char *buf , unsigned long long size ) ;
#line 1393
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1599 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1605
  _raw_read_lock(& global_state_lock);
#line 1606
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1607
  _raw_read_unlock(& global_state_lock);
#line 1609
  return (rv);
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40815;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32691.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32691.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40815;
  }
  ldv_40815: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1664
  if (error != 0) {
#line 1666
    tmp = spinlock_check(& mdev->req_lock);
#line 1666
    flags = _raw_spin_lock_irqsave(tmp);
#line 1667
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1668
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1696 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1698
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1701
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1704
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 1966 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1969
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 1969
  if (tmp != 0) {
#line 1970
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1971
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1971
  if (tmp___2 < 0) {
#line 1971
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           1971);
  } else {

  }
#line 1972
  return;
}
}
#line 1975 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 1979
  atomic_inc(& mdev->local_cnt);
#line 1980
  io_allowed = (unsigned int )mdev->state.ldv_32691.disk >= (unsigned int )mins;
#line 1981
  if (io_allowed == 0) {
#line 1982
    put_ldev(mdev);
  } else {

  }
#line 1983
  return (io_allowed);
}
}
#line 2224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2226
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2227
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2228
  return;
}
}
#line 2238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2242
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2242
  if (tmp != 0) {
#line 2243
    return;
  } else {

  }
#line 2245
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 0);
#line 2246
  if (r != 0) {
#line 2247
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2248
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2250
  return;
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 119
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 119
  return (tmp);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 125
  b = mdev->bitmap;
#line 126
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 126
  if (tmp == 0) {
#line 127
    return;
  } else {

  }
#line 128
  tmp___9 = get_current();
#line 128
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 128
    tmp___7 = get_current();
#line 128
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 128
      tmp___5 = get_current();
#line 128
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 128
        tmp___3 = get_current();
#line 128
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 128
        tmp___4 = (char *)"worker";
      }
#line 128
      tmp___6 = tmp___4;
    } else {
#line 128
      tmp___6 = (char *)"asender";
    }
#line 128
    tmp___8 = tmp___6;
  } else {
#line 128
    tmp___8 = (char *)"receiver";
  }
#line 128
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 129
  return;
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___4 ;
  char *tmp___5 ;
  struct task_struct *tmp___6 ;
  char *tmp___7 ;
  struct task_struct *tmp___8 ;
  char *tmp___9 ;
  struct task_struct *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 140
  b = mdev->bitmap;
#line 143
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 144
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 145
    return;
  } else {

  }
#line 148
  trylock_failed = down_trylock(& b->bm_change);
#line 150
  if (trylock_failed != 0) {
#line 151
    tmp___10 = get_current();
#line 151
    if ((unsigned long )tmp___10 != (unsigned long )mdev->receiver.task) {
#line 151
      tmp___8 = get_current();
#line 151
      if ((unsigned long )tmp___8 != (unsigned long )mdev->asender.task) {
#line 151
        tmp___6 = get_current();
#line 151
        if ((unsigned long )tmp___6 != (unsigned long )mdev->worker.task) {
#line 151
          tmp___4 = get_current();
#line 151
          tmp___5 = (char *)(& tmp___4->comm);
        } else {
#line 151
          tmp___5 = (char *)"worker";
        }
#line 151
        tmp___7 = tmp___5;
      } else {
#line 151
        tmp___7 = (char *)"asender";
      }
#line 151
      tmp___9 = tmp___7;
    } else {
#line 151
      tmp___9 = (char *)"receiver";
    }
#line 151
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 151
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 151
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___12, tmp___11, tmp___9, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 159
    down(& b->bm_change);
  } else {

  }
#line 161
  tmp___15 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 161
  if (tmp___15 != 0) {
#line 162
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 162
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 162
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___14, tmp___13);
  } else {

  }
#line 164
  b->bm_why = why;
#line 165
  b->bm_task = get_current();
#line 166
  return;
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 170
  b = mdev->bitmap;
#line 171
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 172
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 173
    return;
  } else {

  }
#line 176
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 176
  if (tmp___3 == 0) {
#line 177
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 179
  b->bm_why = 0;
#line 180
  b->bm_task = 0;
#line 181
  up(& b->bm_change);
#line 182
  return;
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 191
  page_nr = offset >> 9;
#line 192
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 192
  if (tmp != 0L) {
#line 192
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (192), "i" (12UL));
    ldv_41086: ;
#line 192
    goto ldv_41086;
  } else {

  }
#line 193
  page = *(b->bm_pages + page_nr);
#line 195
  tmp___0 = kmap_atomic(page, km);
#line 195
  return ((unsigned long *)tmp___0);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 200
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 200
  return (tmp);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 205
  pagefault_enable();
#line 206
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 210
  return;
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 235
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 236
    return;
  } else {

  }
#line 238
  i = 0UL;
#line 238
  goto ldv_41105;
  ldv_41104: ;
#line 239
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 240
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 243
    goto ldv_41103;
  } else {

  }
#line 245
  __free_pages(*(pages + i), 0U);
#line 246
  *(pages + i) = 0;
  ldv_41103: 
#line 238
  i = i + 1UL;
  ldv_41105: ;
#line 238
  if (i < number) {
#line 239
    goto ldv_41104;
  } else {

  }

#line 243
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 252
  if (v != 0) {
#line 253
    vfree((void const   *)ptr);
  } else {
#line 255
    kfree((void const   *)ptr);
  }
#line 256
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 263
  old_pages = b->bm_pages;
#line 265
  vmalloced = 0U;
#line 266
  have = b->bm_number_of_pages;
#line 268
  tmp = __builtin_expect(have == 0UL, 0L);
#line 268
  if (tmp != 0L) {
#line 268
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 268
    if (tmp___0 != 0L) {
#line 268
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (268), "i" (12UL));
      ldv_41122: ;
#line 268
      goto ldv_41122;
    } else {

    }
  } else {

  }
#line 269
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 269
  if (tmp___1 != 0L) {
#line 269
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 269
    if (tmp___2 != 0L) {
#line 269
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (269), "i" (12UL));
      ldv_41123: ;
#line 269
      goto ldv_41123;
    } else {

    }
  } else {

  }
#line 271
  if (have == want) {
#line 272
    return (old_pages);
  } else {

  }
#line 279
  bytes = (unsigned int )want * 8U;
#line 280
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 280
  new_pages = (struct page **)tmp___3;
#line 281
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 282
    tmp___4 = vmalloc((unsigned long )bytes);
#line 282
    new_pages = (struct page **)tmp___4;
#line 283
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 284
      return (0);
    } else {

    }
#line 285
    vmalloced = 1U;
  } else {

  }
#line 288
  memset((void *)new_pages, 0, (size_t )bytes);
#line 289
  if (want >= have) {
#line 290
    i = 0U;
#line 290
    goto ldv_41125;
    ldv_41124: 
#line 291
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 290
    i = i + 1U;
    ldv_41125: ;
#line 290
    if ((unsigned long )i < have) {
#line 291
      goto ldv_41124;
    } else {

    }

#line 292
    goto ldv_41128;
    ldv_41127: 
#line 293
    page = alloc_pages(131282U, 0U);
#line 294
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 295
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 296
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 297
      return (0);
    } else {

    }
#line 299
    *(new_pages + (unsigned long )i) = page;
#line 292
    i = i + 1U;
    ldv_41128: ;
#line 292
    if ((unsigned long )i < want) {
#line 293
      goto ldv_41127;
    } else {

    }

  } else {
#line 302
    i = 0U;
#line 302
    goto ldv_41131;
    ldv_41130: 
#line 303
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 302
    i = i + 1U;
    ldv_41131: ;
#line 302
    if ((unsigned long )i < want) {
#line 303
      goto ldv_41130;
    } else {

    }

  }
#line 309
  if (vmalloced != 0U) {
#line 310
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 312
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 314
  return (new_pages);
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
#line 323
  b = mdev->bitmap;
#line 324
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 324
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 324
  if (tmp != 0L) {
#line 324
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       324);
  } else {

  }
#line 324
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 325
  tmp___0 = kzalloc(312UL, 208U);
#line 325
  b = (struct drbd_bitmap *)tmp___0;
#line 326
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 327
    return (-12);
  } else {

  }
#line 328
  spinlock_check(& b->bm_lock);
#line 328
  __raw_spin_lock_init(& b->bm_lock.ldv_5557.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 329
  sema_init(& b->bm_change, 1);
#line 330
  __init_waitqueue_head(& b->bm_io_wait, & __key___0);
#line 332
  mdev->bitmap = b;
#line 334
  return (0);
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 339
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 339
  if (_b != 0) {
#line 339
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 339
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 339
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           339);
  } else {

  }
#line 339
  if (_b != 0) {
#line 339
    return (0UL);
  } else {

  }
#line 340
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 347
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 347
  if (_b != 0) {
#line 347
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 347
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 347
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           347);
  } else {

  }
#line 347
  if (_b != 0) {
#line 347
    return;
  } else {

  }
#line 348
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 349
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 349
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 350
  kfree((void const   *)mdev->bitmap);
#line 351
  mdev->bitmap = 0;
#line 352
  return;
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 361
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 362
  w = b->bm_bits >> 6;
#line 363
  cleared = 0;
#line 366
  p_addr = bm_map_paddr(b, w);
#line 367
  bm = p_addr + (w & 511UL);
#line 368
  if (b->bm_words > w) {
#line 369
    tmp = hweight_long(*bm & ~ mask);
#line 369
    cleared = (int )tmp;
#line 370
    *bm = *bm & mask;
#line 371
    w = w + (size_t )1;
#line 371
    bm = bm + 1;
  } else {

  }
#line 374
  if (b->bm_words > w) {
#line 375
    tmp___0 = hweight_long(*bm);
#line 375
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 376
    *bm = 0UL;
  } else {

  }
#line 378
  bm_unmap(p_addr);
#line 379
  return (cleared);
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 384
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 385
  w = b->bm_bits >> 6;
#line 388
  p_addr = bm_map_paddr(b, w);
#line 389
  bm = p_addr + (w & 511UL);
#line 390
  if (b->bm_words > w) {
#line 391
    *bm = *bm | ~ mask;
#line 392
    bm = bm + 1;
#line 392
    w = w + (size_t )1;
  } else {

  }
#line 395
  if (b->bm_words > w) {
#line 396
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 398
  bm_unmap(p_addr);
#line 399
  return;
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 403
  offset = 0UL;
#line 404
  bits = 0UL;
#line 407
  goto ldv_41186;
  ldv_41185: 
#line 408
  __min1 = b->bm_words - offset;
#line 408
  __min2 = 512UL;
#line 408
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 408
  i = do_now;
#line 409
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 410
  bm = p_addr + (offset & 511UL);
#line 411
  goto ldv_41182;
  ldv_41181: 
#line 416
  tmp = bm;
#line 416
  bm = bm + 1;
#line 416
  tmp___0 = hweight_long(*tmp);
#line 416
  bits = tmp___0 + bits;
  ldv_41182: 
#line 411
  tmp___1 = i;
#line 411
  i = i - 1UL;
#line 411
  if (tmp___1 != 0UL) {
#line 412
    goto ldv_41181;
  } else {

  }
#line 418
  __bm_unmap(p_addr, KM_USER0);
#line 419
  offset = offset + do_now;
#line 420
  __might_sleep((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                420, 0);
#line 420
  _cond_resched();
  ldv_41186: ;
#line 407
  if (b->bm_words > offset) {
#line 408
    goto ldv_41185;
  } else {

  }

#line 423
  return (bits);
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 428
  tmp = __bm_count_bits(b, 0);
#line 428
  return (tmp);
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 433
  tmp = __bm_count_bits(b, 1);
#line 433
  return (tmp);
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 444
  end = offset + len;
#line 446
  if (b->bm_words < end) {
#line 447
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 448
    return;
  } else {

  }
#line 451
  goto ldv_41209;
  ldv_41208: 
#line 452
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 452
  __min2 = end;
#line 452
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 453
  p_addr = bm_map_paddr(b, offset);
#line 454
  bm = p_addr + (offset & 511UL);
#line 455
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 456
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 458
    goto ldv_41207;
  } else {

  }
#line 460
  memset((void *)bm, c, do_now * 8UL);
#line 461
  bm_unmap(p_addr);
#line 462
  offset = offset + do_now;
  ldv_41209: ;
#line 451
  if (offset < end) {
#line 452
    goto ldv_41208;
  } else {

  }
  ldv_41207: ;
#line 456
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 476
  b = mdev->bitmap;
#line 479
  opages = 0;
#line 480
  err = 0;
#line 483
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 483
  if (_b != 0) {
#line 483
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 483
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 483
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           483);
  } else {

  }
#line 483
  if (_b != 0) {
#line 483
    return (-12);
  } else {

  }
#line 485
  drbd_bm_lock(mdev, (char *)"resize");
#line 487
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 490
  if (b->bm_dev_capacity == capacity) {
#line 491
    goto out;
  } else {

  }
#line 493
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 495
  if (capacity == 0UL) {
#line 496
    spin_lock_irq(& b->bm_lock);
#line 497
    opages = b->bm_pages;
#line 498
    onpages = b->bm_number_of_pages;
#line 499
    owords = b->bm_words;
#line 500
    b->bm_pages = 0;
#line 501
    tmp___6 = 0UL;
#line 501
    b->bm_dev_capacity = tmp___6;
#line 501
    tmp___5 = tmp___6;
#line 501
    b->bm_words = tmp___5;
#line 501
    tmp___4 = tmp___5;
#line 501
    b->bm_bits = tmp___4;
#line 501
    tmp___3 = tmp___4;
#line 501
    b->bm_set = tmp___3;
#line 501
    b->bm_number_of_pages = tmp___3;
#line 506
    spin_unlock_irq(& b->bm_lock);
#line 507
    bm_free_pages(opages, onpages);
#line 508
    bm_vk_free((void *)opages, opages_vmalloced);
#line 509
    goto out;
  } else {

  }
#line 511
  bits = (capacity + 7UL) >> 3;
#line 518
  words = (bits + 63UL) >> 6;
#line 520
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 520
  if (tmp___9 != 0) {
#line 521
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 521
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 521
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 521
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             521);
    } else {

    }
#line 522
    put_ldev(mdev);
  } else {

  }
#line 526
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 527
  have = b->bm_number_of_pages;
#line 528
  if (want == have) {
#line 529
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 529
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 529
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 529
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             529);
    } else {

    }
#line 530
    npages = b->bm_pages;
  } else {
#line 532
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 532
    if (tmp___12 != 0) {
#line 533
      npages = 0;
    } else {
#line 535
      npages = bm_realloc_pages(b, want);
    }
  }
#line 538
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 539
    err = -12;
#line 540
    goto out;
  } else {

  }
#line 543
  spin_lock_irq(& b->bm_lock);
#line 544
  opages = b->bm_pages;
#line 545
  owords = b->bm_words;
#line 546
  obits = b->bm_bits;
#line 548
  growing = bits > obits;
#line 549
  if ((unsigned long )opages != (unsigned long )((struct page **)0)) {
#line 550
    bm_set_surplus(b);
  } else {

  }
#line 552
  b->bm_pages = npages;
#line 553
  b->bm_number_of_pages = want;
#line 554
  b->bm_bits = bits;
#line 555
  b->bm_words = words;
#line 556
  b->bm_dev_capacity = capacity;
#line 558
  if (growing != 0) {
#line 559
    bm_memset(b, owords, 255, words - owords);
#line 560
    b->bm_set = b->bm_set + (bits - obits);
  } else {

  }
#line 563
  if (want < have) {
#line 565
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 568
  p_addr = bm_map_paddr(b, words);
#line 569
  bm = p_addr + (words & 511UL);
#line 570
  *bm = 2205418087UL;
#line 571
  bm_unmap(p_addr);
#line 573
  bm_clear_surplus(b);
#line 575
  spin_unlock_irq(& b->bm_lock);
#line 576
  if ((unsigned long )opages != (unsigned long )npages) {
#line 577
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 578
  if (growing == 0) {
#line 579
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 580
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 580
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 580
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 583
  drbd_bm_unlock(mdev);
#line 584
  return (err);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 597
  b = mdev->bitmap;
#line 601
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 601
  if (_b != 0) {
#line 601
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           601);
  } else {

  }
#line 601
  if (_b != 0) {
#line 601
    return (0UL);
  } else {

  }
#line 602
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 602
  if (_b___0 != 0) {
#line 602
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           602);
  } else {

  }
#line 602
  if (_b___0 != 0) {
#line 602
    return (0UL);
  } else {

  }
#line 604
  tmp___3 = spinlock_check(& b->bm_lock);
#line 604
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 605
  s = b->bm_set;
#line 606
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 608
  return (s);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 615
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 615
  if (tmp == 0) {
#line 616
    return (0UL);
  } else {

  }
#line 617
  s = _drbd_bm_total_weight(mdev);
#line 618
  put_ldev(mdev);
#line 619
  return (s);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 624
  b = mdev->bitmap;
#line 625
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 625
  if (_b != 0) {
#line 625
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           625);
  } else {

  }
#line 625
  if (_b != 0) {
#line 625
    return (0UL);
  } else {

  }
#line 626
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 626
  if (_b___0 != 0) {
#line 626
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           626);
  } else {

  }
#line 626
  if (_b___0 != 0) {
#line 626
    return (0UL);
  } else {

  }
#line 628
  return (b->bm_words);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 633
  b = mdev->bitmap;
#line 634
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 634
  if (_b != 0) {
#line 634
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           634);
  } else {

  }
#line 634
  if (_b != 0) {
#line 634
    return (0UL);
  } else {

  }
#line 636
  return (b->bm_bits);
}
}
#line 644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 647
  b = mdev->bitmap;
#line 652
  end = offset + number;
#line 654
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 654
  if (_b != 0) {
#line 654
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           654);
  } else {

  }
#line 654
  if (_b != 0) {
#line 654
    return;
  } else {

  }
#line 655
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 655
  if (_b___0 != 0) {
#line 655
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 655
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 655
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           655);
  } else {

  }
#line 655
  if (_b___0 != 0) {
#line 655
    return;
  } else {

  }
#line 656
  if (number == 0UL) {
#line 657
    return;
  } else {

  }
#line 658
  __ret_warn_on = b->bm_words <= offset;
#line 658
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 658
  if (tmp___3 != 0L) {
#line 658
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       658);
  } else {

  }
#line 658
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 659
  __ret_warn_on___0 = b->bm_words < end;
#line 659
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 659
  if (tmp___4 != 0L) {
#line 659
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       659);
  } else {

  }
#line 659
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 661
  spin_lock_irq(& b->bm_lock);
#line 662
  goto ldv_41296;
  ldv_41295: 
#line 663
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 663
  __min2 = end;
#line 663
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 664
  p_addr = bm_map_paddr(b, offset);
#line 665
  bm = p_addr + (offset & 511UL);
#line 666
  offset = offset + do_now;
#line 667
  goto ldv_41293;
  ldv_41292: 
#line 668
  bits = hweight_long(*bm);
#line 669
  tmp___5 = buffer;
#line 669
  buffer = buffer + 1;
#line 669
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 670
  tmp___6 = bm;
#line 670
  bm = bm + 1;
#line 670
  *tmp___6 = word;
#line 671
  tmp___7 = hweight_long(word);
#line 671
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_41293: 
#line 667
  tmp___8 = do_now;
#line 667
  do_now = do_now - (size_t )1;
#line 667
  if (tmp___8 != 0UL) {
#line 668
    goto ldv_41292;
  } else {

  }
#line 673
  bm_unmap(p_addr);
  ldv_41296: ;
#line 662
  if (offset < end) {
#line 663
    goto ldv_41295;
  } else {

  }

#line 680
  if (b->bm_words == end) {
#line 681
    tmp___9 = bm_clear_surplus(b);
#line 681
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 683
  spin_unlock_irq(& b->bm_lock);
#line 684
  return;
}
}
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 692
  b = mdev->bitmap;
#line 696
  end = offset + number;
#line 698
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 698
  if (_b != 0) {
#line 698
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 698
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 698
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           698);
  } else {

  }
#line 698
  if (_b != 0) {
#line 698
    return;
  } else {

  }
#line 699
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 699
  if (_b___0 != 0) {
#line 699
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           699);
  } else {

  }
#line 699
  if (_b___0 != 0) {
#line 699
    return;
  } else {

  }
#line 701
  spin_lock_irq(& b->bm_lock);
#line 702
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 705
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 705
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 705
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 710
    goto ldv_41321;
    ldv_41320: 
#line 711
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 711
    __min2 = end;
#line 711
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 712
    p_addr = bm_map_paddr(b, offset);
#line 713
    bm = p_addr + (offset & 511UL);
#line 714
    offset = offset + do_now;
#line 715
    goto ldv_41318;
    ldv_41317: 
#line 716
    tmp___5 = buffer;
#line 716
    buffer = buffer + 1;
#line 716
    tmp___6 = bm;
#line 716
    bm = bm + 1;
#line 716
    *tmp___5 = *tmp___6;
    ldv_41318: 
#line 715
    tmp___7 = do_now;
#line 715
    do_now = do_now - (size_t )1;
#line 715
    if (tmp___7 != 0UL) {
#line 716
      goto ldv_41317;
    } else {

    }
#line 717
    bm_unmap(p_addr);
    ldv_41321: ;
#line 710
    if (offset < end) {
#line 711
      goto ldv_41320;
    } else {

    }

  }
#line 720
  spin_unlock_irq(& b->bm_lock);
#line 721
  return;
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 726
  b = mdev->bitmap;
#line 727
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 727
  if (_b != 0) {
#line 727
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           727);
  } else {

  }
#line 727
  if (_b != 0) {
#line 727
    return;
  } else {

  }
#line 728
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 728
  if (_b___0 != 0) {
#line 728
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           728);
  } else {

  }
#line 728
  if (_b___0 != 0) {
#line 728
    return;
  } else {

  }
#line 730
  spin_lock_irq(& b->bm_lock);
#line 731
  bm_memset(b, 0UL, 255, b->bm_words);
#line 732
  bm_clear_surplus(b);
#line 733
  b->bm_set = b->bm_bits;
#line 734
  spin_unlock_irq(& b->bm_lock);
#line 735
  return;
}
}
#line 738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 740
  b = mdev->bitmap;
#line 741
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 741
  if (_b != 0) {
#line 741
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 741
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 741
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           741);
  } else {

  }
#line 741
  if (_b != 0) {
#line 741
    return;
  } else {

  }
#line 742
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 742
  if (_b___0 != 0) {
#line 742
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 742
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 742
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           742);
  } else {

  }
#line 742
  if (_b___0 != 0) {
#line 742
    return;
  } else {

  }
#line 744
  spin_lock_irq(& b->bm_lock);
#line 745
  bm_memset(b, 0UL, 0, b->bm_words);
#line 746
  b->bm_set = 0UL;
#line 747
  spin_unlock_irq(& b->bm_lock);
#line 748
  return;
}
}
#line 750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 752
  b = (struct drbd_bitmap *)bio->bi_private;
#line 753
  uptodate = (int )bio->bi_flags & 1;
#line 760
  if (error == 0 && uptodate == 0) {
#line 761
    error = -5;
  } else {

  }
#line 763
  if (error != 0) {
#line 766
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 768
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 768
  if (tmp != 0) {
#line 769
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 771
  bio_put(bio);
#line 772
  return;
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 777
  tmp = bio_alloc(208U, 1);
#line 777
  bio = tmp;
#line 779
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 781
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 785
  __min1 = 4096U;
#line 785
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 785
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 785
  len = __min1 < __min2 ? __min1 : __min2;
#line 788
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 789
  bio->bi_sector = on_disk_sector;
#line 790
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 791
  bio->bi_private = (void *)b;
#line 792
  bio->bi_end_io = & bm_async_io_complete;
#line 794
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 794
  if (tmp___1 != 0) {
#line 795
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 796
    bio_endio(bio, -5);
  } else {
#line 798
    submit_bio(rw, bio);
  }
#line 799
  return;
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 840
  b = mdev->bitmap;
#line 845
  err = 0;
#line 847
  tmp = bm_is_locked(b);
#line 847
  __ret_warn_on = tmp == 0;
#line 847
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 847
  if (tmp___0 != 0L) {
#line 847
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       847);
  } else {

  }
#line 847
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 851
  tmp___1 = drbd_bm_words(mdev);
#line 851
  bm_words = (int )tmp___1;
#line 852
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 858
  now = jiffies;
#line 859
  atomic_set(& b->bm_async_io, num_pages);
#line 860
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 863
  i = 0;
#line 863
  goto ldv_41373;
  ldv_41372: 
#line 864
  bm_page_io_async(mdev, b, i, rw);
#line 863
  i = i + 1;
  ldv_41373: ;
#line 863
  if (i < num_pages) {
#line 864
    goto ldv_41372;
  } else {

  }
#line 866
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 866
  drbd_blk_run_queue(tmp___2);
#line 867
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 867
  if (tmp___3 == 0) {
#line 867
    goto ldv_41375;
  } else {

  }
#line 867
  tmp___4 = get_current();
#line 867
  __wait.flags = 0U;
#line 867
  __wait.private = (void *)tmp___4;
#line 867
  __wait.func = & autoremove_wake_function;
#line 867
  __wait.task_list.next = & __wait.task_list;
#line 867
  __wait.task_list.prev = & __wait.task_list;
  ldv_41378: 
#line 867
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 867
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 867
  if (tmp___5 == 0) {
#line 867
    goto ldv_41377;
  } else {

  }
#line 867
  schedule();
#line 867
  goto ldv_41378;
  ldv_41377: 
#line 867
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_41375: 
#line 869
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 869
  if (tmp___8 != 0) {
#line 870
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 871
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 872
    err = -5;
  } else {

  }
#line 875
  now = jiffies;
#line 876
  if (rw == 1) {
#line 880
    drbd_md_flush(mdev);
  } else {
#line 883
    b->bm_set = bm_count_bits_swap_endian(b);
#line 884
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 887
  now = b->bm_set;
#line 889
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 889
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 892
  return (err);
}
}
#line 899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 901
  tmp = bm_rw(mdev, 0);
#line 901
  return (tmp);
}
}
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 910
  tmp = bm_rw(mdev, 1);
#line 910
  return (tmp);
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 924
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 927
  err = 0;
#line 929
  ldv_mutex_lock_4(& mdev->md_io_mutex);
#line 930
  tmp = drbd_bm_words(mdev);
#line 930
  bm_words = (int )tmp;
#line 931
  offset = (int )(enr << 6);
#line 932
  _min1 = 64;
#line 932
  _min2 = bm_words - offset;
#line 932
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 933
  if (num_words <= 63) {
#line 934
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 934
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 935
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 935
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 937
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 937
  if (tmp___4 == 0) {
#line 939
    err = -5;
#line 940
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 940
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 940
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 943
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 944
    i = 0;
#line 944
    goto ldv_41401;
    ldv_41400: 
#line 945
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 944
    i = i + 1;
    ldv_41401: ;
#line 944
    if (i <= 3) {
#line 945
      goto ldv_41400;
    } else {

    }

  } else {

  }
#line 947
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 948
  ldv_mutex_unlock_5(& mdev->md_io_mutex);
#line 949
  return (err);
}
}
#line 959 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 962
  b = mdev->bitmap;
#line 963
  i = 0xffffffffffffffffUL;
#line 967
  if (b->bm_bits < bm_fo) {
#line 968
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 970
    goto ldv_41417;
    ldv_41416: 
#line 972
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 973
    offset = bit_offset >> 6;
#line 974
    p_addr = __bm_map_paddr(b, offset, km);
#line 976
    if ((int )find_zero_bit != 0) {
#line 977
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 979
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 981
    __bm_unmap(p_addr, km);
#line 982
    if (i <= 32767UL) {
#line 983
      i = bit_offset + i;
#line 984
      if (b->bm_bits <= i) {
#line 985
        goto ldv_41414;
      } else {

      }
#line 986
      goto found;
    } else {

    }
#line 988
    bm_fo = bit_offset + 32768UL;
    ldv_41417: ;
#line 970
    if (b->bm_bits > bm_fo) {
#line 971
      goto ldv_41416;
    } else {

    }
    ldv_41414: 
#line 990
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 993
  return (i);
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 999
  b = mdev->bitmap;
#line 1000
  i = 0xffffffffffffffffUL;
#line 1002
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1002
  if (_b != 0) {
#line 1002
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1002);
  } else {

  }
#line 1002
  if (_b != 0) {
#line 1002
    return (i);
  } else {

  }
#line 1003
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1003
  if (_b___0 != 0) {
#line 1003
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1003
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1003
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1003);
  } else {

  }
#line 1003
  if (_b___0 != 0) {
#line 1003
    return (i);
  } else {

  }
#line 1005
  spin_lock_irq(& b->bm_lock);
#line 1006
  tmp___3 = bm_is_locked(b);
#line 1006
  if (tmp___3 != 0) {
#line 1007
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1009
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1011
  spin_unlock_irq(& b->bm_lock);
#line 1012
  return (i);
}
}
#line 1015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1017
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1017
  return (tmp);
}
}
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1033
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1033
  return (tmp);
}
}
#line 1036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1039
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1039
  return (tmp);
}
}
#line 1048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long e ,
                        int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1051
  b = mdev->bitmap;
#line 1052
  p_addr = 0;
#line 1054
  last_page_nr = 0xffffffffffffffffUL;
#line 1055
  c = 0;
#line 1057
  if (b->bm_bits <= e) {
#line 1058
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1060
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1062
  bitnr = s;
#line 1062
  goto ldv_41457;
  ldv_41456: 
#line 1063
  offset = bitnr >> 6;
#line 1064
  page_nr = offset >> 9;
#line 1065
  if (page_nr != last_page_nr) {
#line 1066
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1067
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1068
    p_addr = __bm_map_paddr(b, offset, km);
#line 1069
    last_page_nr = page_nr;
  } else {

  }
#line 1071
  if (val != 0) {
#line 1072
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1072
    c = (tmp___1 == 0) + c;
  } else {
#line 1074
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1074
    c = c - (tmp___2 != 0);
  }
#line 1062
  bitnr = bitnr + 1UL;
  ldv_41457: ;
#line 1062
  if (bitnr <= e) {
#line 1063
    goto ldv_41456;
  } else {

  }

#line 1076
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1077
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1078
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1079
  return (c);
}
}
#line 1086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                      int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 1090
  b = mdev->bitmap;
#line 1091
  c = 0;
#line 1093
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1093
  if (_b != 0) {
#line 1093
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1093
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1093
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1093);
  } else {

  }
#line 1093
  if (_b != 0) {
#line 1093
    return (1);
  } else {

  }
#line 1094
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1094
  if (_b___0 != 0) {
#line 1094
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1094
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1094
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1094);
  } else {

  }
#line 1094
  if (_b___0 != 0) {
#line 1094
    return (0);
  } else {

  }
#line 1096
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1096
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1097
  tmp___4 = bm_is_locked(b);
#line 1097
  if (tmp___4 != 0) {
#line 1098
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1100
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1102
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1103
  return (c);
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1109
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1109
  return (tmp);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1115
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1115
  return (- tmp);
}
}
#line 1120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1125
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1125
  paddr = (unsigned long *)tmp;
#line 1126
  i = first_word;
#line 1126
  goto ldv_41496;
  ldv_41495: 
#line 1127
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1127
  bits = (int )tmp___0;
#line 1128
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1129
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1126
  i = i + 1;
  ldv_41496: ;
#line 1126
  if (i < last_word) {
#line 1127
    goto ldv_41495;
  } else {

  }
#line 1131
  pagefault_enable();
#line 1132
  return;
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1148
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1149
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1156
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1158
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1159
    return;
  } else {

  }
#line 1165
  if (sl != 0UL) {
#line 1166
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1168
  first_page = (int )(sl >> 15);
#line 1169
  last_page = (int )(el >> 15);
#line 1173
  first_word = (int )(sl >> 6) & 511;
#line 1174
  last_word = 512;
#line 1177
  page_nr = first_page;
#line 1177
  goto ldv_41512;
  ldv_41511: 
#line 1178
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1179
  __might_sleep((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1179, 0);
#line 1179
  _cond_resched();
#line 1180
  first_word = 0;
#line 1177
  page_nr = page_nr + 1;
  ldv_41512: ;
#line 1177
  if (page_nr < last_page) {
#line 1178
    goto ldv_41511;
  } else {

  }
#line 1184
  last_word = (int )(el >> 6) & 511;
#line 1185
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1192
  if (el <= (unsigned long )e) {
#line 1193
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1194
  return;
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long offset ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1206
  b = mdev->bitmap;
#line 1210
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1210
  if (_b != 0) {
#line 1210
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1210
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1210
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1210);
  } else {

  }
#line 1210
  if (_b != 0) {
#line 1210
    return (0);
  } else {

  }
#line 1211
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1211
  if (_b___0 != 0) {
#line 1211
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1211
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1211
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1211);
  } else {

  }
#line 1211
  if (_b___0 != 0) {
#line 1211
    return (0);
  } else {

  }
#line 1213
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1213
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1214
  tmp___4 = bm_is_locked(b);
#line 1214
  if (tmp___4 != 0) {
#line 1215
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1216
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1217
    offset = bitnr >> 6;
#line 1218
    p_addr = bm_map_paddr(b, offset);
#line 1219
    tmp___5 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1219
    i = tmp___5 != 0;
#line 1220
    bm_unmap(p_addr);
  } else
#line 1221
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1222
    i = -1;
  } else {
#line 1224
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___7, tmp___6, bitnr, b->bm_bits);
#line 1225
    i = 0;
  }
#line 1228
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1229
  return (i);
}
}
#line 1233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int _b___1 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1236
  b = mdev->bitmap;
#line 1237
  p_addr = 0;
#line 1237
  page_nr = 0xffffffffffffffffUL;
#line 1239
  c = 0;
#line 1246
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1246
  if (_b != 0) {
#line 1246
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1246
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1246
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1246);
  } else {

  }
#line 1246
  if (_b != 0) {
#line 1246
    return (1);
  } else {

  }
#line 1247
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1247
  if (_b___0 != 0) {
#line 1247
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1247);
  } else {

  }
#line 1247
  if (_b___0 != 0) {
#line 1247
    return (1);
  } else {

  }
#line 1249
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1249
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1250
  tmp___4 = bm_is_locked(b);
#line 1250
  if (tmp___4 != 0) {
#line 1251
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1252
  bitnr = s;
#line 1252
  goto ldv_41554;
  ldv_41553: 
#line 1253
  w = bitnr >> 6;
#line 1254
  if (w >> 9 != page_nr) {
#line 1255
    page_nr = w >> 9;
#line 1256
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1257
      bm_unmap(p_addr);
    } else {

    }
#line 1258
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1260
  _b___1 = b->bm_bits <= bitnr;
#line 1260
  if (_b___1 != 0) {
#line 1260
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1260
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1260
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___9, tmp___8, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1260);
  } else {

  }
#line 1260
  if (_b___1 != 0) {
#line 1261
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1261
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1261
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
  } else {
#line 1263
    tmp___7 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1263
    c = (tmp___7 != 0) + c;
  }
#line 1252
  bitnr = bitnr + 1UL;
  ldv_41554: ;
#line 1252
  if (bitnr <= (unsigned long )e) {
#line 1253
    goto ldv_41553;
  } else {

  }

#line 1266
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1267
    bm_unmap(p_addr);
  } else {

  }
#line 1268
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1269
  return (c);
}
}
#line 1287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1289
  b = mdev->bitmap;
#line 1294
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1294
  if (_b != 0) {
#line 1294
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1294
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1294
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1294);
  } else {

  }
#line 1294
  if (_b != 0) {
#line 1294
    return (0);
  } else {

  }
#line 1295
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1295
  if (_b___0 != 0) {
#line 1295
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1295
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1295
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1295);
  } else {

  }
#line 1295
  if (_b___0 != 0) {
#line 1295
    return (0);
  } else {

  }
#line 1297
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1297
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1298
  tmp___4 = bm_is_locked(b);
#line 1298
  if (tmp___4 != 0) {
#line 1299
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1301
  s = (int )(enr << 6);
#line 1302
  _min1 = (enr + 1UL) << 6;
#line 1302
  _min2 = b->bm_words;
#line 1302
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1303
  count = 0;
#line 1304
  if ((size_t )s < b->bm_words) {
#line 1305
    n = e - s;
#line 1306
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1307
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1308
    goto ldv_41580;
    ldv_41579: 
#line 1309
    tmp___5 = bm;
#line 1309
    bm = bm + 1;
#line 1309
    tmp___6 = hweight_long(*tmp___5);
#line 1309
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
    ldv_41580: 
#line 1308
    tmp___7 = n;
#line 1308
    n = n - 1;
#line 1308
    if (tmp___7 != 0) {
#line 1309
      goto ldv_41579;
    } else {

    }
#line 1310
    bm_unmap(p_addr);
  } else {
#line 1312
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___9,
           tmp___8, s);
  }
#line 1314
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1315
  return (count);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1321
  b = mdev->bitmap;
#line 1325
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1325
  if (_b != 0) {
#line 1325
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1325
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1325
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1325);
  } else {

  }
#line 1325
  if (_b != 0) {
#line 1325
    return (0UL);
  } else {

  }
#line 1326
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1326
  if (_b___0 != 0) {
#line 1326
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1326
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1326
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1326);
  } else {

  }
#line 1326
  if (_b___0 != 0) {
#line 1326
    return (0UL);
  } else {

  }
#line 1328
  spin_lock_irq(& b->bm_lock);
#line 1329
  tmp___3 = bm_is_locked(b);
#line 1329
  if (tmp___3 != 0) {
#line 1330
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1331
  weight = b->bm_set;
#line 1333
  s = (int )((unsigned int )al_enr * 16U);
#line 1334
  __min1 = (size_t )(s + 16);
#line 1334
  __min2 = b->bm_words;
#line 1334
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1336
  if ((e + -1) >> 9 != s >> 9) {
#line 1336
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1337);
  } else {

  }
#line 1338
  count = 0;
#line 1339
  if ((size_t )s < b->bm_words) {
#line 1340
    do_now = e - s;
#line 1340
    i = do_now;
#line 1341
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1342
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1343
    goto ldv_41604;
    ldv_41603: 
#line 1344
    tmp___6 = hweight_long(*bm);
#line 1344
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1345
    *bm = 0xffffffffffffffffUL;
#line 1346
    bm = bm + 1;
    ldv_41604: 
#line 1343
    tmp___7 = i;
#line 1343
    i = i - 1;
#line 1343
    if (tmp___7 != 0) {
#line 1344
      goto ldv_41603;
    } else {

    }
#line 1348
    bm_unmap(p_addr);
#line 1349
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1350
    if ((size_t )e == b->bm_words) {
#line 1351
      tmp___8 = bm_clear_surplus(b);
#line 1351
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1353
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1355
  weight = b->bm_set - weight;
#line 1356
  spin_unlock_irq(& b->bm_lock);
#line 1357
  return (weight);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1365
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1367
  mutex_lock(ldv_func_arg1);
#line 1368
  return;
}
}
#line 1370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1375
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1377
  mutex_unlock(ldv_func_arg1);
#line 1378
  return;
}
}
#line 1380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1385
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1387
  mutex_unlock(ldv_func_arg1);
#line 1388
  return;
}
}
#line 1390 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1395
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1397
  mutex_lock(ldv_func_arg1);
#line 1398
  return;
}
}
#line 1400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1405
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1407
  mutex_unlock(ldv_func_arg1);
#line 1408
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_12(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_11(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 279
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 280
char const   *drbd_role_str(enum drbd_role s ) ;
#line 281
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 163
struct drbd_conf **minor_table ;
#line 1021 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1025
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1027
  return (mdev);
}
}
#line 1361
int proc_details ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1493
struct file_operations  const  drbd_proc_fops ;
#line 1990 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2003
  tmp = drbd_bm_total_weight(mdev);
#line 2003
  *bits_left = tmp - mdev->rs_failed;
#line 2006
  if (*bits_left > mdev->rs_total) {
#line 2012
    __asm__  volatile   ("": : : "memory");
#line 2013
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 2013
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2016
    *per_mil_done = 0U;
  } else {
#line 2019
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2022
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2024
  return;
}
}
#line 69 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 73
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 94
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 96
  x = (int )(res / 50U);
#line 97
  y = 20 - x;
#line 98
  seq_printf(seq, "\t[");
#line 99
  i = 1;
#line 99
  goto ldv_41092;
  ldv_41091: 
#line 100
  seq_printf(seq, "=");
#line 99
  i = i + 1;
  ldv_41092: ;
#line 99
  if (i < x) {
#line 100
    goto ldv_41091;
  } else {

  }
#line 101
  seq_printf(seq, ">");
#line 102
  i = 0;
#line 102
  goto ldv_41095;
  ldv_41094: 
#line 103
  seq_printf(seq, ".");
#line 102
  i = i + 1;
  ldv_41095: ;
#line 102
  if (i < y) {
#line 103
    goto ldv_41094;
  } else {

  }
#line 104
  seq_printf(seq, "] ");
#line 106
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 108
  if (mdev->rs_total > 1048576UL) {
#line 109
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 113
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 126
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 128
  if (dt > 20UL) {
#line 131
    seq_printf(seq, "stalled\n");
#line 132
    return;
  } else {

  }
#line 135
  if (dt == 0UL) {
#line 136
    dt = dt + 1UL;
  } else {

  }
#line 137
  db = mdev->rs_mark_left - rs_left;
#line 138
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 140
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 144
  dbdt = db / dt << 2;
#line 145
  if (dbdt > 1000UL) {
#line 146
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 149
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 153
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 154
  if (dt == 0UL) {
#line 155
    dt = 1UL;
  } else {

  }
#line 156
  db = mdev->rs_total - rs_left;
#line 157
  dbdt = db / dt << 2;
#line 158
  if (dbdt > 1000UL) {
#line 159
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 162
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 164
  seq_printf(seq, " K/sec\n");
#line 165
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 169
  __mptr = (struct lc_element  const  *)e;
#line 169
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 171
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 174
  return;
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 179
  hole = 0;
#line 183
  write_ordering_chars[0] = 110;
#line 183
  write_ordering_chars[1] = 100;
#line 183
  write_ordering_chars[2] = 102;
#line 183
  write_ordering_chars[3] = 98;
#line 190
  tmp = drbd_buildtag();
#line 190
  seq_printf(seq, "version: 8.3.6 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 91, tmp);
#line 213
  i = 0;
#line 213
  goto ldv_41115;
  ldv_41114: 
#line 214
  mdev = minor_to_mdev((unsigned int )i);
#line 215
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 216
    hole = 1;
#line 217
    goto ldv_41113;
  } else {

  }
#line 219
  if (hole != 0) {
#line 220
    hole = 0;
#line 221
    seq_printf(seq, "\n");
  } else {

  }
#line 224
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 226
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 229
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 231
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 231
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 231
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 231
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 231
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 231
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_32691.pdsk);
#line 231
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_32691.disk);
#line 231
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_32691.peer);
#line 231
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_32691.role);
#line 231
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 261
    tmp___9 = drbd_bm_total_weight(mdev);
#line 261
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 264
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) {
#line 266
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 268
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U) {
#line 269
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 275
  if (proc_details > 0) {
#line 275
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 275
    if (tmp___10 != 0) {
#line 276
      lc_seq_printf_stats(seq, mdev->resync);
#line 277
      lc_seq_printf_stats(seq, mdev->act_log);
#line 278
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 281
  if (proc_details > 1) {
#line 282
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 283
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_41113: 
#line 213
  i = i + 1;
  ldv_41115: ;
#line 213
  if ((unsigned int )i < minor_count) {
#line 214
    goto ldv_41114;
  } else {

  }

#line 289
  return (0);
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 294
  tmp = PDE((struct inode  const  *)inode);
#line 294
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 294
  return (tmp___0);
}
}
#line 315
void ldv_check_final_state(void) ;
#line 318
extern void ldv_check_return_value(int  ) ;
#line 324
void ldv_initialize(void) ;
#line 327
extern void ldv_handler_precall(void) ;
#line 330
extern int nondet_int(void) ;
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 368
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 358
  LDV_IN_INTERRUPT = 1;
#line 367
  ldv_initialize();
#line 371
  goto ldv_41146;
  ldv_41145: 
#line 375
  tmp = nondet_int();
#line 375
  switch (tmp) {
  case 0: ;
#line 380
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 385
    ldv_handler_precall();
#line 386
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 387
    ldv_check_return_value(res_drbd_proc_open_3);
#line 388
    if (res_drbd_proc_open_3 != 0) {
#line 389
      goto ldv_module_exit;
    } else {

    }
#line 390
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 396
  goto ldv_41143;
  default: ;
#line 397
  goto ldv_41143;
  }
  ldv_41143: ;
  ldv_41146: 
#line 371
  tmp___0 = nondet_int();
#line 371
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 373
    goto ldv_41145;
  } else {

  }

  ldv_module_exit: ;
#line 406
  ldv_check_final_state();
#line 409
  return;
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 418
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 420
  mutex_lock(ldv_func_arg1);
#line 421
  return;
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 428
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 430
  mutex_unlock(ldv_func_arg1);
#line 431
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 438
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 440
  mutex_unlock(ldv_func_arg1);
#line 441
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 180 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 337
extern void dump_stack(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 257 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 261
  first = list->next;
#line 262
  last = list->prev;
#line 264
  first->prev = prev;
#line 265
  prev->next = first;
#line 267
  last->next = next;
#line 268
  next->prev = last;
#line 269
  return;
}
}
#line 302 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 305
  tmp = list_empty((struct list_head  const  *)list);
#line 305
  if (tmp == 0) {
#line 306
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 307
    INIT_LIST_HEAD(list);
  } else {

  }
#line 309
  return;
}
}
#line 104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 106
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
#line 109
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 164 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10796: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10796;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___0(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 43 "include/linux/semaphore.h"
extern int down_interruptible(struct semaphore * ) ;
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 297 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 299
  tmp = PageTail(page);
#line 299
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 299
  if (tmp___0 != 0L) {
#line 300
    return (page->ldv_12290.first_page);
  } else {

  }
#line 301
  return (page);
}
}
#line 304 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 306
  tmp = compound_head(page);
#line 306
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 306
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_16767: ;
#line 63
    goto ldv_16767;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_16768: ;
#line 65
    goto ldv_16768;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_16769: ;
#line 66
    goto ldv_16769;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 345 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2050
extern void flush_signals(struct task_struct * ) ;
#line 2083
extern void force_sig(int  , struct task_struct * ) ;
#line 965 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 770 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1061 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1063
  return (q->limits.max_segment_size);
}
}
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 626
  __asm__  volatile   ("": : : "memory");
#line 627
  return (thi->t_state);
}
}
#line 1030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1032
  return (mdev->minor);
}
}
#line 1043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1045
  ldv_mutex_lock_17(& mdev->data.mutex);
#line 1048
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1048
  if (tmp != 0L) {
#line 1049
    ldv_mutex_unlock_18(& mdev->data.mutex);
#line 1050
    return (0);
  } else {

  }
#line 1052
  return (1);
}
}
#line 1055 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1057
  ldv_mutex_unlock_19(& mdev->data.mutex);
#line 1058
  return;
}
}
#line 1077
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1086
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1088
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1105
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1109
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1114
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1122
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1128
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1130
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1132
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1135
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1137
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1141
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1147
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1150
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1153
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1154
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1157
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1162
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1348
mempool_t *drbd_request_mempool ;
#line 1356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1383
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1386
int drbd_worker(struct drbd_thread *thi ) ;
#line 1387
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1388
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1389
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1390
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1391
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1395
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1399
  if (mdev->ov_last_oos_size != 0UL) {
#line 1400
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1404
  mdev->ov_last_oos_size = 0UL;
#line 1405
  return;
}
}
#line 1408
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) ;
#line 1411
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1412
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1413
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1414
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1415
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1416
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1417
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1418
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1420
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1421
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1422
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1423
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1424
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1425
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1426
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1427
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1429
void resync_timer_fn(unsigned long data ) ;
#line 1433
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1438
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1449 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1453
  if (level == 1) {
#line 1454
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1456
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1458
  return (err);
}
}
#line 1461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1463
  val = 1;
#line 1464
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1466
  return;
}
}
#line 1468 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1470
  val = 0;
#line 1471
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1473
  return;
}
}
#line 1489
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1499
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1500
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1502
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1503
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1504
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1505
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1508
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1512
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1587 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1589
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp == 0) {
#line 1589
    goto ldv_41458;
  } else {

  }
#line 1589
  tmp___0 = get_current();
#line 1589
  __wait.flags = 0U;
#line 1589
  __wait.private = (void *)tmp___0;
#line 1589
  __wait.func = & autoremove_wake_function;
#line 1589
  __wait.task_list.next = & __wait.task_list;
#line 1589
  __wait.task_list.prev = & __wait.task_list;
  ldv_41461: 
#line 1589
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1589
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp___1 == 0) {
#line 1589
    goto ldv_41460;
  } else {

  }
#line 1589
  schedule();
#line 1589
  goto ldv_41461;
  ldv_41460: 
#line 1589
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_41458: ;
#line 1592
  return;
}
}
#line 1593 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1595
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1596
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1597
  return;
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_41484;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32691.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32691.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_41484;
  }
  ldv_41484: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1664
  if (error != 0) {
#line 1666
    tmp = spinlock_check(& mdev->req_lock);
#line 1666
    flags = _raw_spin_lock_irqsave(tmp);
#line 1667
    __drbd_chk_io_error____0(mdev, forcedetach, where);
#line 1668
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1712
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1798 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1801
  tmp = spinlock_check(& q->q_lock);
#line 1801
  flags = _raw_spin_lock_irqsave(tmp);
#line 1802
  list_add_tail(& w->list, & q->q);
#line 1803
  up(& q->s);
#line 1805
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1806
  return;
}
}
#line 1808 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1810
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1810
  if (tmp != 0) {
#line 1811
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1812
  return;
}
}
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1816
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1817
  wake_asender(mdev);
#line 1818
  return;
}
}
#line 1820 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1824
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1824
  return (tmp);
}
}
#line 1839 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1841
  _drbd_thread_stop(thi, 0, 1);
#line 1842
  return;
}
}
#line 1899 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1901
  atomic_inc(& mdev->rs_pending_cnt);
#line 1902
  return;
}
}
#line 2230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2232
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2232
  if (tmp___0 != 0) {
#line 2233
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2233
    drbd_blk_run_queue(tmp);
#line 2234
    put_ldev(mdev);
  } else {

  }
#line 2236
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_41734;
  ldv_41733: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_41734: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_41733;
  } else {

  }

#line 31
  return (0);
}
}
#line 35
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 36
void drbd_endio_read_sec(struct bio *bio , int error ) ;
#line 37
void drbd_endio_write_sec(struct bio *bio , int error ) ;
#line 38
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 47
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 48
    tmp = mdev_to_minor(mdev);
#line 48
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 51
    dump_stack();
#line 52
    bio_endio(bio, -19);
#line 53
    return;
  } else {

  }
#line 56
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 56
  if (tmp___0 != 0) {
#line 57
    bio_endio(bio, -5);
  } else {
#line 59
    generic_make_request(bio);
  }
#line 60
  return;
}
}
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 110
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 111
  md_io->error = error;
#line 113
  complete(& md_io->event);
#line 114
  return;
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  raw_spinlock_t *tmp___5 ;
  int tmp___6 ;

  {
#line 121
  flags = 0UL;
#line 122
  e = 0;
#line 124
  uptodate = (int )bio->bi_flags & 1;
#line 126
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 127
  mdev = e->mdev;
#line 129
  if (error != 0) {
#line 130
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    printk("<4>%s %s: read: error=%d s=%llus\n", tmp___0, tmp, error, (unsigned long long )e->sector);
  } else {

  }
#line 132
  if (error == 0 && uptodate == 0) {
#line 133
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    printk("<4>%s %s: read: setting error to -EIO s=%llus\n", tmp___2, tmp___1, (unsigned long long )e->sector);
#line 138
    error = -5;
  } else {

  }
#line 141
  if (e->block_id == 0ULL) {
#line 141
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 141
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 141
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           141);
  } else {

  }
#line 143
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 143
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 144
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 145
  list_del(& e->w.list);
#line 146
  tmp___6 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 146
  if (tmp___6 != 0) {
#line 147
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 148
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 150
  drbd_chk_io_error____0(mdev, error, 0, "drbd_endio_read_sec");
#line 151
  drbd_queue_work(& mdev->data.work, & e->w);
#line 152
  put_ldev(mdev);
#line 153
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_write_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  int uptodate ;
  int is_barrier ;
  bool tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 160
  flags = 0UL;
#line 161
  e = 0;
#line 167
  uptodate = (int )bio->bi_flags & 1;
#line 168
  tmp = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 168
  is_barrier = (int )tmp;
#line 170
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 171
  mdev = e->mdev;
#line 173
  if (error != 0) {
#line 174
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 174
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 174
    printk("<4>%s %s: write: error=%d s=%llus\n", tmp___1, tmp___0, error, (unsigned long long )e->sector);
  } else {

  }
#line 176
  if (error == 0 && uptodate == 0) {
#line 177
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    printk("<4>%s %s: write: setting error to -EIO s=%llus\n", tmp___3, tmp___2, (unsigned long long )e->sector);
#line 182
    error = -5;
  } else {

  }
#line 187
  if ((error != 0 && is_barrier != 0) && (e->flags & 8U) != 0U) {
#line 188
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 189
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 189
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 190
    list_del(& e->w.list);
#line 191
    e->w.cb = & w_e_reissue;
#line 194
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 195
    drbd_queue_work(& mdev->data.work, & e->w);
#line 196
    return;
  } else {

  }
#line 199
  if (e->block_id == 0ULL) {
#line 199
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 199
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 199
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___6, tmp___5,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           199);
  } else {

  }
#line 201
  tmp___7 = spinlock_check(& mdev->req_lock);
#line 201
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 202
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 203
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 209
  e_sector = e->sector;
#line 210
  do_al_complete_io = (int )e->flags & 1;
#line 212
  list_del(& e->w.list);
#line 213
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 220
  if (is_syncer_req != 0) {
#line 220
    tmp___8 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 220
    do_wake = tmp___8;
  } else {
#line 220
    tmp___9 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 220
    do_wake = tmp___9;
  }
#line 224
  if (error != 0) {
#line 225
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec");
  } else {

  }
#line 226
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 228
  if (is_syncer_req != 0) {
#line 229
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 231
  if (do_wake != 0) {
#line 232
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 234
  if (do_al_complete_io != 0) {
#line 235
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 237
  wake_asender(mdev);
#line 238
  put_ldev(mdev);
#line 239
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  raw_spinlock_t *tmp___5 ;

  {
#line 247
  req = (struct drbd_request *)bio->bi_private;
#line 248
  mdev = req->mdev;
#line 251
  uptodate = (int )bio->bi_flags & 1;
#line 253
  if (error != 0) {
#line 254
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 254
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 254
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 256
  if (error == 0 && uptodate == 0) {
#line 257
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 257
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 257
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 262
    error = -5;
  } else {

  }
#line 266
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 266
  if (tmp___3 != 0L) {
#line 267
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 2UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 273
    what = completed_ok;
  }
#line 275
  bio_put(req->private_bio);
#line 276
  tmp___4 = ERR_PTR((long )error);
#line 276
  req->private_bio = (struct bio *)tmp___4;
#line 278
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 278
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 279
  __req_mod(req, what, & m);
#line 280
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 282
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 283
    complete_master_bio(mdev, & m);
  } else {

  }
#line 284
  return;
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 288
  __mptr = (struct drbd_work  const  *)w;
#line 288
  req = (struct drbd_request *)__mptr;
#line 295
  drbd_req_free(req);
#line 297
  return (1);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 302
  __mptr = (struct drbd_work  const  *)w;
#line 302
  req = (struct drbd_request *)__mptr;
#line 308
  spin_lock_irq(& mdev->req_lock);
#line 309
  if ((cancel != 0 || (int )mdev->state.ldv_32691.conn <= 9) || (int )mdev->state.ldv_32691.pdsk <= 4) {
#line 312
    _req_mod(req, send_canceled);
#line 313
    spin_unlock_irq(& mdev->req_lock);
#line 314
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 314
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 314
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 315
    return (1);
  } else {

  }
#line 317
  spin_unlock_irq(& mdev->req_lock);
#line 319
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 319
  return (tmp___1);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 324
  _b = cancel != 0;
#line 324
  if (_b != 0) {
#line 324
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           324);
  } else {

  }
#line 324
  if (_b != 0) {
#line 324
    return (1);
  } else {

  }
#line 325
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 326
  return (1);
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 336
  desc.tfm = tfm;
#line 337
  desc.flags = 0U;
#line 339
  sg_init_table(& sg, 1U);
#line 340
  crypto_hash_init(& desc);
#line 342
  bvec = bio->bi_io_vec;
#line 342
  i = 0;
#line 342
  goto ldv_41952;
  ldv_41951: 
#line 343
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 344
  crypto_hash_update(& desc, & sg, sg.length);
#line 342
  bvec = bvec + 1;
#line 342
  i = i + 1;
  ldv_41952: ;
#line 342
  if ((int )bio->bi_vcnt > i) {
#line 343
    goto ldv_41951;
  } else {

  }
#line 346
  crypto_hash_final(& desc, (u8 *)digest);
#line 347
  return;
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 351
  __mptr = (struct drbd_work  const  *)w;
#line 351
  e = (struct drbd_epoch_entry *)__mptr;
#line 356
  if (e->block_id != 2205466966ULL) {
#line 356
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           356);
  } else {

  }
#line 358
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 358
  if (tmp___1 != 0L) {
#line 359
    drbd_free_ee(mdev, e);
#line 360
    return (1);
  } else {

  }
#line 363
  tmp___5 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 363
  if (tmp___5 != 0L) {
#line 364
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 364
    digest_size = (int )tmp___2;
#line 365
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 366
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 367
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 369
      inc_rs_pending(mdev);
#line 370
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 376
      kfree((void const   *)digest);
    } else {
#line 378
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 379
      ok = 0;
    }
  } else {
#line 382
    ok = 1;
  }
#line 384
  drbd_free_ee(mdev, e);
#line 386
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 386
  if (tmp___8 != 0L) {
#line 387
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 387
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 387
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 388
  return (ok);
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;

  {
#line 397
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 397
  if (tmp == 0) {
#line 398
    return (0);
  } else {

  }
#line 402
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 403
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 404
    put_ldev(mdev);
#line 405
    return (2);
  } else {

  }
#line 408
  spin_lock_irq(& mdev->req_lock);
#line 409
  list_add(& e->w.list, & mdev->read_ee);
#line 410
  spin_unlock_irq(& mdev->req_lock);
#line 412
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 413
  (e->private_bio)->bi_rw = 0UL;
#line 414
  e->w.cb = & w_e_send_csum;
#line 416
  mdev->read_cnt = mdev->read_cnt + (unsigned int )(size >> 9);
#line 417
  drbd_generic_make_request(mdev, 3, e->private_bio);
#line 419
  return (1);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 425
  mdev = (struct drbd_conf *)data;
#line 428
  tmp = spinlock_check(& mdev->req_lock);
#line 428
  flags = _raw_spin_lock_irqsave(tmp);
#line 430
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 430
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 430
  if (tmp___1 != 0L) {
#line 431
    queue = 1;
#line 432
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U) {
#line 433
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 435
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 437
    queue = 0;
#line 438
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 441
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 444
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 444
  if (tmp___2 != 0 && queue != 0) {
#line 445
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 446
  return;
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  unsigned int tmp___0 ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 453
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 453
  capacity = tmp;
#line 454
  tmp___0 = queue_max_segment_size(mdev->rq_queue);
#line 454
  max_segment_size = (int )tmp___0;
#line 458
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 458
  if (tmp___1 != 0L) {
#line 459
    return (1);
  } else {

  }
#line 461
  tmp___4 = __builtin_expect((int )mdev->state.ldv_32691.conn <= 9, 0L);
#line 461
  if (tmp___4 != 0L) {
#line 462
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 462
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 462
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___3,
           tmp___2);
#line 463
    return (0);
  } else {

  }
#line 466
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 272U) {
#line 467
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 467
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___7, tmp___6, tmp___5);
  } else {

  }
#line 470
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 470
  if (tmp___10 == 0) {
#line 475
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___9, tmp___8);
#line 476
    mdev->resync_work.cb = & w_resync_inactive;
#line 477
    return (1);
  } else {

  }
#line 480
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 481
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 483
  ldv_mutex_lock_20(& mdev->data.mutex);
#line 484
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 485
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 487
    mx = 1;
  }
#line 488
  ldv_mutex_unlock_21(& mdev->data.mutex);
#line 491
  if (number > mx) {
#line 492
    mx = number;
  } else {

  }
#line 495
  if (pe + number > mx) {
#line 496
    number = mx - pe;
  } else {

  }
#line 499
  i = 0;
#line 499
  goto ldv_42008;
  ldv_42007: 
#line 501
  ldv_mutex_lock_22(& mdev->data.mutex);
#line 502
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 503
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 504
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 506
    queued = 1;
#line 507
    sndbuf = 0;
  }
#line 509
  ldv_mutex_unlock_23(& mdev->data.mutex);
#line 510
  if (sndbuf / 2 < queued) {
#line 511
    goto requeue;
  } else {

  }
  next_sector: 
#line 514
  size = 4096;
#line 515
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 517
  if (bit == 0xffffffffffffffffUL) {
#line 518
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 519
    mdev->resync_work.cb = & w_resync_inactive;
#line 520
    put_ldev(mdev);
#line 521
    return (1);
  } else {

  }
#line 524
  sector = bit << 3;
#line 526
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 526
  if (tmp___11 != 0) {
#line 527
    mdev->bm_resync_fo = bit;
#line 528
    goto requeue;
  } else {

  }
#line 530
  mdev->bm_resync_fo = bit + 1UL;
#line 532
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 532
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 532
  if (tmp___13 != 0L) {
#line 533
    drbd_rs_complete_io(mdev, sector);
#line 534
    goto next_sector;
  } else {

  }
#line 550
  align = 1;
  ldv_42000: ;
#line 552
  if (size + 4096 > max_segment_size) {
#line 553
    goto ldv_41999;
  } else {

  }
#line 556
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 557
    goto ldv_41999;
  } else {

  }
#line 560
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 561
    goto ldv_41999;
  } else {

  }
#line 567
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 567
  if (tmp___14 != 1) {
#line 568
    goto ldv_41999;
  } else {

  }
#line 569
  bit = bit + 1UL;
#line 570
  size = size + 4096;
#line 571
  if (4096 << align <= size) {
#line 572
    align = align + 1;
  } else {

  }
#line 573
  i = i + 1;
#line 574
  goto ldv_42000;
  ldv_41999: ;
#line 577
  if (size > 4096) {
#line 578
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 582
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 583
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 584
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 585
    tmp___15 = read_for_csum(mdev, sector, size);
#line 585
    switch (tmp___15) {
    case 0: 
#line 587
    put_ldev(mdev);
#line 588
    return (0);
    case 2: 
#line 590
    drbd_rs_complete_io(mdev, sector);
#line 591
    mdev->bm_resync_fo = sector >> 3;
#line 592
    goto requeue;
    }
  } else {
#line 596
    inc_rs_pending(mdev);
#line 597
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 597
    if (tmp___22 == 0) {
#line 599
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 599
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 599
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 600
      atomic_dec(& mdev->rs_pending_cnt);
#line 600
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 600
      if (tmp___21 < 0) {
#line 600
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 600
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 600
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 600
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 600, tmp___18);
      } else {

      }
#line 601
      put_ldev(mdev);
#line 602
      return (0);
    } else {

    }
  }
#line 499
  i = i + 1;
  ldv_42008: ;
#line 499
  if (i < number) {
#line 500
    goto ldv_42007;
  } else {

  }
#line 607
  tmp___23 = drbd_bm_bits(mdev);
#line 607
  if (mdev->bm_resync_fo >= tmp___23) {
#line 614
    mdev->resync_work.cb = & w_resync_inactive;
#line 615
    put_ldev(mdev);
#line 616
    return (1);
  } else {

  }
  requeue: 
#line 620
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 621
  put_ldev(mdev);
#line 622
  return (1);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 629
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 629
  capacity = tmp;
#line 631
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 631
  if (tmp___0 != 0L) {
#line 632
    return (1);
  } else {

  }
#line 634
  tmp___3 = __builtin_expect((int )mdev->state.ldv_32691.conn <= 9, 0L);
#line 634
  if (tmp___3 != 0L) {
#line 635
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 635
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 635
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 636
    return (0);
  } else {

  }
#line 639
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 640
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 640
  if (tmp___4 > number) {
#line 641
    goto requeue;
  } else {

  }
#line 643
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 643
  number = number - tmp___5;
#line 645
  sector = mdev->ov_position;
#line 646
  i = 0;
#line 646
  goto ldv_42026;
  ldv_42025: ;
#line 647
  if (sector >= capacity) {
#line 648
    mdev->resync_work.cb = & w_resync_inactive;
#line 649
    return (1);
  } else {

  }
#line 652
  size = 4096;
#line 654
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 654
  if (tmp___6 != 0) {
#line 655
    mdev->ov_position = sector;
#line 656
    goto requeue;
  } else {

  }
#line 659
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 660
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 662
  inc_rs_pending(mdev);
#line 663
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 663
  if (tmp___11 == 0) {
#line 664
    atomic_dec(& mdev->rs_pending_cnt);
#line 664
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 664
    if (tmp___10 < 0) {
#line 664
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 664
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 664
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 664
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 664, tmp___7);
    } else {

    }
#line 665
    return (0);
  } else {

  }
#line 667
  sector = sector + 8UL;
#line 646
  i = i + 1;
  ldv_42026: ;
#line 646
  if (i < number) {
#line 647
    goto ldv_42025;
  } else {

  }
#line 669
  mdev->ov_position = sector;
  requeue: 
#line 672
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 673
  return (1);
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 679
  kfree((void const   *)w);
#line 680
  ov_oos_print(mdev);
#line 681
  drbd_resync_finished(mdev);
#line 683
  return (1);
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 688
  kfree((void const   *)w);
#line 690
  drbd_resync_finished(mdev);
#line 692
  return (1);
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 701
  khelper_cmd = 0;
#line 706
  tmp___3 = drbd_rs_del_all(mdev);
#line 706
  if (tmp___3 != 0) {
#line 712
    drbd_kick_lo(mdev);
#line 713
    tmp = get_current();
#line 713
    tmp->state = 1L;
#line 714
    schedule_timeout(25L);
#line 715
    tmp___0 = kmalloc___0(24UL, 32U);
#line 715
    w = (struct drbd_work *)tmp___0;
#line 716
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 717
      w->cb = & w_resync_finished;
#line 718
      drbd_queue_work(& mdev->data.work, w);
#line 719
      return (1);
    } else {

    }
#line 721
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 721
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 721
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 724
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 725
  if (dt == 0UL) {
#line 726
    dt = 1UL;
  } else {

  }
#line 727
  db = mdev->rs_total;
#line 728
  dbdt = db / dt << 2;
#line 729
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 731
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 731
  if (tmp___4 == 0) {
#line 732
    goto out;
  } else {

  }
#line 734
  spin_lock_irq(& mdev->req_lock);
#line 735
  os = mdev->state;
#line 739
  if ((int )os.ldv_32691.conn <= 10) {
#line 740
    goto out_unlock;
  } else {

  }
#line 742
  ns = os;
#line 743
  ns.ldv_32691.conn = 10U;
#line 745
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 745
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 745
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 750
  n_oos = drbd_bm_total_weight(mdev);
#line 752
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 753
    if (n_oos != 0UL) {
#line 754
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 756
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 759
      if (mdev->rs_failed != n_oos) {
#line 759
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               759);
      } else {

      }
#line 761
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 762
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 764
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 765
        s = mdev->rs_same_csum;
#line 766
        t = mdev->rs_total;
#line 767
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 770
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 770
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 770
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 779
  if (mdev->rs_failed != 0UL) {
#line 780
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 780
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 780
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 782
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 783
      ns.ldv_32691.disk = 4U;
#line 784
      ns.ldv_32691.pdsk = 8U;
    } else {
#line 786
      ns.ldv_32691.disk = 8U;
#line 787
      ns.ldv_32691.pdsk = 4U;
    }
  } else {
#line 790
    ns.ldv_32691.disk = 8U;
#line 791
    ns.ldv_32691.pdsk = 8U;
#line 793
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 794
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 796
        i = 1;
#line 796
        goto ldv_42056;
        ldv_42055: 
#line 797
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 796
        i = i + 1;
        ldv_42056: ;
#line 796
        if (i <= 3) {
#line 797
          goto ldv_42055;
        } else {

        }
#line 798
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 799
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 801
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 801
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 801
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 805
    drbd_uuid_set_bm(mdev, 0ULL);
#line 807
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 811
      i___0 = 0;
#line 811
      goto ldv_42060;
      ldv_42059: 
#line 812
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 811
      i___0 = i___0 + 1;
      ldv_42060: ;
#line 811
      if (i___0 <= 3) {
#line 812
        goto ldv_42059;
      } else {

      }

    } else {

    }
  }
#line 816
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 818
  spin_unlock_irq(& mdev->req_lock);
#line 819
  put_ldev(mdev);
  out: 
#line 821
  mdev->rs_total = 0UL;
#line 822
  mdev->rs_failed = 0UL;
#line 823
  mdev->rs_paused = 0UL;
#line 824
  mdev->ov_start_sector = 0UL;
#line 826
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 826
  if (tmp___19 != 0) {
#line 827
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 828
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 831
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 832
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 834
  return (1);
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 840
  tmp = drbd_bio_has_active_page(e->private_bio);
#line 840
  if (tmp != 0) {
#line 842
    spin_lock_irq(& mdev->req_lock);
#line 843
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 844
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 846
    drbd_free_ee(mdev, e);
  }
#line 847
  return;
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 857
  __mptr = (struct drbd_work  const  *)w;
#line 857
  e = (struct drbd_epoch_entry *)__mptr;
#line 860
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 860
  if (tmp___3 != 0L) {
#line 861
    drbd_free_ee(mdev, e);
#line 862
    atomic_dec(& mdev->unacked_cnt);
#line 862
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 862
    if (tmp___2 < 0) {
#line 862
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 862
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 862
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 862
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             862, tmp);
    } else {

    }
#line 863
    return (1);
  } else {

  }
#line 866
  tmp___7 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 866
  if (tmp___7 != 0L) {
#line 867
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 869
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 869
    if (tmp___6 != 0) {
#line 870
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 873
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 876
  atomic_dec(& mdev->unacked_cnt);
#line 876
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 876
  if (tmp___11 < 0) {
#line 876
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 876
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           876, tmp___8);
  } else {

  }
#line 878
  move_to_net_ee_or_free(mdev, e);
#line 880
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 880
  if (tmp___14 != 0L) {
#line 881
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 882
  return (ok);
}
}
#line 891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 893
  __mptr = (struct drbd_work  const  *)w;
#line 893
  e = (struct drbd_epoch_entry *)__mptr;
#line 896
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 896
  if (tmp___3 != 0L) {
#line 897
    drbd_free_ee(mdev, e);
#line 898
    atomic_dec(& mdev->unacked_cnt);
#line 898
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 898
    if (tmp___2 < 0) {
#line 898
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 898
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 898
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 898
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             898, tmp);
    } else {

    }
#line 899
    return (1);
  } else {

  }
#line 902
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 902
  if (tmp___4 != 0) {
#line 903
    drbd_rs_complete_io(mdev, e->sector);
#line 904
    put_ldev(mdev);
  } else {

  }
#line 907
  tmp___12 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 907
  if (tmp___12 != 0L) {
#line 908
    tmp___8 = __builtin_expect((int )mdev->state.ldv_32691.pdsk > 3, 1L);
#line 908
    if (tmp___8 != 0L) {
#line 909
      inc_rs_pending(mdev);
#line 910
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 912
      tmp___7 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 912
      if (tmp___7 != 0) {
#line 913
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 915
      ok = 1;
    }
  } else {
#line 918
    tmp___11 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 918
    if (tmp___11 != 0) {
#line 919
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 919
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 919
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 922
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 925
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 928
  atomic_dec(& mdev->unacked_cnt);
#line 928
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 928
  if (tmp___16 < 0) {
#line 928
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 928
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 928
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 928
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           928, tmp___13);
  } else {

  }
#line 930
  move_to_net_ee_or_free(mdev, e);
#line 932
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 932
  if (tmp___19 != 0L) {
#line 933
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 933
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 933
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 934
  return (ok);
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 939
  __mptr = (struct drbd_work  const  *)w;
#line 939
  e = (struct drbd_epoch_entry *)__mptr;
#line 942
  digest = 0;
#line 943
  eq = 0;
#line 945
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 945
  if (tmp___3 != 0L) {
#line 946
    drbd_free_ee(mdev, e);
#line 947
    atomic_dec(& mdev->unacked_cnt);
#line 947
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 947
    if (tmp___2 < 0) {
#line 947
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 947
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             947, tmp);
    } else {

    }
#line 948
    return (1);
  } else {

  }
#line 951
  drbd_rs_complete_io(mdev, e->sector);
#line 953
  di = (struct digest_info *)e->block_id;
#line 955
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 955
  if (tmp___11 != 0L) {
#line 959
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 960
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 960
      digest_size = (int )tmp___4;
#line 961
      if (di->digest_size != digest_size) {
#line 961
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               961);
      } else {

      }
#line 962
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 964
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 965
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 966
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 966
      eq = tmp___7 == 0;
#line 967
      kfree((void const   *)digest);
    } else {

    }
#line 970
    if (eq != 0) {
#line 971
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         971U);
#line 972
      mdev->rs_same_csum = mdev->rs_same_csum + 1UL;
#line 973
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 975
      inc_rs_pending(mdev);
#line 976
      e->block_id = 0xffffffffffffffffULL;
#line 977
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 980
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 981
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 981
    if (tmp___10 != 0) {
#line 982
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 982
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 982
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 985
  atomic_dec(& mdev->unacked_cnt);
#line 985
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 985
  if (tmp___15 < 0) {
#line 985
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 985
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           985, tmp___12);
  } else {

  }
#line 987
  kfree((void const   *)di);
#line 989
  move_to_net_ee_or_free(mdev, e);
#line 991
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 991
  if (tmp___18 != 0L) {
#line 992
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 993
  return (ok);
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 998
  __mptr = (struct drbd_work  const  *)w;
#line 998
  e = (struct drbd_epoch_entry *)__mptr;
#line 1001
  ok = 1;
#line 1003
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1003
  if (tmp != 0L) {
#line 1004
    goto out;
  } else {

  }
#line 1006
  tmp___0 = __builtin_expect(((e->private_bio)->bi_flags & 1UL) == 0UL, 0L);
#line 1006
  if (tmp___0 != 0L) {
#line 1007
    goto out;
  } else {

  }
#line 1009
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1009
  digest_size = (int )tmp___1;
#line 1011
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1012
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1013
    drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1014
    inc_rs_pending(mdev);
#line 1015
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1017
    if (ok == 0) {
#line 1018
      atomic_dec(& mdev->rs_pending_cnt);
#line 1018
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1018
      if (tmp___5 < 0) {
#line 1018
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1018
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1018
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1018
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 1018, tmp___2);
      } else {

      }
    } else {

    }
#line 1019
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1023
  drbd_free_ee(mdev, e);
#line 1025
  atomic_dec(& mdev->unacked_cnt);
#line 1025
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1025
  if (tmp___9 < 0) {
#line 1025
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1025
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1025
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1025
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1025, tmp___6);
  } else {

  }
#line 1027
  return (ok);
}
}
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1032
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1033
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1035
    mdev->ov_last_oos_start = sector;
#line 1036
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1038
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1038U);
#line 1039
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1040
  return;
}
}
#line 1042 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1044
  __mptr = (struct drbd_work  const  *)w;
#line 1044
  e = (struct drbd_epoch_entry *)__mptr;
#line 1048
  eq = 0;
#line 1050
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1050
  if (tmp___3 != 0L) {
#line 1051
    drbd_free_ee(mdev, e);
#line 1052
    atomic_dec(& mdev->unacked_cnt);
#line 1052
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1052
    if (tmp___2 < 0) {
#line 1052
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1052
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1052, tmp);
    } else {

    }
#line 1053
    return (1);
  } else {

  }
#line 1058
  drbd_rs_complete_io(mdev, e->sector);
#line 1060
  di = (struct digest_info *)e->block_id;
#line 1062
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1062
  if (tmp___11 != 0L) {
#line 1063
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1063
    digest_size = (int )tmp___4;
#line 1064
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1065
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1066
      drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1068
      if (di->digest_size != digest_size) {
#line 1068
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               1068);
      } else {

      }
#line 1069
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1069
      eq = tmp___7 == 0;
#line 1070
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1073
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1074
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1074
    if (tmp___10 != 0) {
#line 1075
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1075
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1075
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1078
  atomic_dec(& mdev->unacked_cnt);
#line 1078
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
  if (tmp___15 < 0) {
#line 1078
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1078
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1078
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1078
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1078, tmp___12);
  } else {

  }
#line 1080
  kfree((void const   *)di);
#line 1082
  if (eq == 0) {
#line 1083
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1085
    ov_oos_print(mdev);
  }
#line 1087
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1090
  drbd_free_ee(mdev, e);
#line 1092
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1092
  if (mdev->ov_left == 0UL) {
#line 1093
    ov_oos_print(mdev);
#line 1094
    drbd_resync_finished(mdev);
  } else {

  }
#line 1097
  return (ok);
}
}
#line 1100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1102
  __mptr = (struct drbd_work  const  *)w;
#line 1102
  b = (struct drbd_wq_barrier *)__mptr;
#line 1103
  complete(& b->done);
#line 1104
  return (1);
}
}
#line 1107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1109
  __mptr = (struct drbd_work  const  *)w;
#line 1109
  b = (struct drbd_tl_epoch *)__mptr;
#line 1110
  p = & mdev->data.sbuf.barrier;
#line 1111
  ok = 1;
#line 1118
  spin_lock_irq(& mdev->req_lock);
#line 1119
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_32691.conn <= 9) {
#line 1120
    cancel = 1;
  } else {

  }
#line 1121
  spin_unlock_irq(& mdev->req_lock);
#line 1122
  if (cancel != 0) {
#line 1123
    return (1);
  } else {

  }
#line 1125
  tmp = drbd_get_data_sock(mdev);
#line 1125
  if (tmp == 0) {
#line 1126
    return (0);
  } else {

  }
#line 1127
  p->barrier = b->br_number;
#line 1131
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1133
  drbd_put_data_sock(mdev);
#line 1135
  return (ok);
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1140
  if (cancel != 0) {
#line 1141
    return (1);
  } else {

  }
#line 1142
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1142
  return (tmp);
}
}
#line 1151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1153
  __mptr = (struct drbd_work  const  *)w;
#line 1153
  req = (struct drbd_request *)__mptr;
#line 1156
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1156
  if (tmp != 0L) {
#line 1157
    req_mod(req, send_canceled);
#line 1158
    return (1);
  } else {

  }
#line 1161
  ok = drbd_send_dblock(mdev, req);
#line 1162
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1164
  return (ok);
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1175
  __mptr = (struct drbd_work  const  *)w;
#line 1175
  req = (struct drbd_request *)__mptr;
#line 1178
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1178
  if (tmp != 0L) {
#line 1179
    req_mod(req, send_canceled);
#line 1180
    return (1);
  } else {

  }
#line 1183
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1186
  if (ok == 0) {
#line 1189
    if ((int )mdev->state.ldv_32691.conn > 9) {
#line 1190
      val.i = 0U;
#line 1190
      val.ldv_32691.conn = 5U;
#line 1190
      mask.i = 0U;
#line 1190
      mask.ldv_32691.conn = 31U;
#line 1190
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1192
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1194
  return (ok);
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1199
  odev = mdev;
  ldv_42214: ;
#line 1202
  if (odev->sync_conf.after == -1) {
#line 1203
    return (1);
  } else {

  }
#line 1204
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1205
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1205
  if (_b != 0) {
#line 1205
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1205
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1205
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1205);
  } else {

  }
#line 1205
  if (_b != 0) {
#line 1205
    return (1);
  } else {

  }
#line 1206
  if (((((int )odev->state.ldv_32691.conn > 15 && (int )odev->state.ldv_32691.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1210
    return (0);
  } else {

  }
#line 1211
  goto ldv_42214;
}
}
#line 1220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1223
  rv = 0;
#line 1225
  i = 0;
#line 1225
  goto ldv_42225;
  ldv_42224: 
#line 1226
  odev = minor_to_mdev((unsigned int )i);
#line 1227
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1228
    goto ldv_42221;
  } else {

  }
#line 1229
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1230
    goto ldv_42221;
  } else {

  }
#line 1231
  tmp___0 = _drbd_may_sync_now(odev);
#line 1231
  if (tmp___0 == 0) {
#line 1232
    __ns.i = odev->state.i;
#line 1232
    __ns.ldv_32691.aftr_isp = 1U;
#line 1232
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1232
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_42221: 
#line 1225
  i = i + 1;
  ldv_42225: ;
#line 1225
  if ((unsigned int )i < minor_count) {
#line 1226
    goto ldv_42224;
  } else {

  }

#line 1236
  return (rv);
}
}
#line 1245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1248
  rv = 0;
#line 1250
  i = 0;
#line 1250
  goto ldv_42237;
  ldv_42236: 
#line 1251
  odev = minor_to_mdev((unsigned int )i);
#line 1252
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1253
    goto ldv_42233;
  } else {

  }
#line 1254
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1255
    goto ldv_42233;
  } else {

  }
#line 1256
  if ((unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1257
    tmp___0 = _drbd_may_sync_now(odev);
#line 1257
    if (tmp___0 != 0) {
#line 1258
      __ns.i = odev->state.i;
#line 1258
      __ns.ldv_32691.aftr_isp = 0U;
#line 1258
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1258
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_42233: 
#line 1250
  i = i + 1;
  ldv_42237: ;
#line 1250
  if ((unsigned int )i < minor_count) {
#line 1251
    goto ldv_42236;
  } else {

  }

#line 1263
  return (rv);
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1268
  _raw_write_lock_irq(& global_state_lock);
#line 1269
  _drbd_resume_next(mdev);
#line 1270
  _raw_write_unlock_irq(& global_state_lock);
#line 1271
  return;
}
}
#line 1273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1275
  _raw_write_lock_irq(& global_state_lock);
#line 1276
  _drbd_pause_after(mdev);
#line 1277
  _raw_write_unlock_irq(& global_state_lock);
#line 1278
  return;
}
}
#line 1280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1284
  if (o_minor == -1) {
#line 1285
    return (101);
  } else {

  }
#line 1286
  if (o_minor < -1) {
#line 1287
    return (132);
  } else {
#line 1286
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1286
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1287
      return (132);
    } else {

    }
  }
#line 1290
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_42250: ;
#line 1292
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1293
    return (133);
  } else {

  }
#line 1296
  if (odev->sync_conf.after == -1) {
#line 1297
    return (101);
  } else {

  }
#line 1300
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1301
  goto ldv_42250;
}
}
#line 1304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1309
  _raw_write_lock_irq(& global_state_lock);
#line 1310
  retcode = sync_after_error(mdev, na);
#line 1311
  if (retcode == 101) {
#line 1312
    mdev->sync_conf.after = na;
    ldv_42257: 
#line 1314
    changes = _drbd_pause_after(mdev);
#line 1315
    tmp = _drbd_resume_next(mdev);
#line 1315
    changes = tmp | changes;
#line 1316
    if (changes != 0) {
#line 1317
      goto ldv_42257;
    } else {

    }

  } else {

  }
#line 1318
  _raw_write_unlock_irq(& global_state_lock);
#line 1319
  return (retcode);
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct task_struct *tmp___12 ;

  {
#line 1335
  if ((int )mdev->state.ldv_32691.conn > 15) {
#line 1336
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1337
    return;
  } else {

  }
#line 1341
  drbd_rs_cancel_all(mdev);
#line 1343
  if ((unsigned int )side == 17U) {
#line 1347
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1348
    r = (r >> 8) & 255;
#line 1349
    if (r > 0) {
#line 1350
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1352
      val.i = 0U;
#line 1352
      val.ldv_32691.conn = 1U;
#line 1352
      mask.i = 0U;
#line 1352
      mask.ldv_32691.conn = 31U;
#line 1352
      drbd_force_state(mdev, mask, val);
#line 1353
      return;
    } else {

    }
  } else {

  }
#line 1357
  drbd_state_lock(mdev);
#line 1359
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1359
  if (tmp___3 == 0) {
#line 1360
    drbd_state_unlock(mdev);
#line 1361
    return;
  } else {

  }
#line 1364
  if ((unsigned int )side == 17U) {
#line 1365
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1369
    get_random_bytes((void *)(& uuid), 8);
#line 1370
    drbd_uuid_set(mdev, 1, uuid);
#line 1371
    drbd_send_sync_uuid(mdev, uuid);
#line 1373
    if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 16U) {
#line 1373
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1373
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1373
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1373);
    } else {

    }
  }
#line 1376
  _raw_write_lock_irq(& global_state_lock);
#line 1377
  ns = mdev->state;
#line 1379
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1379
  ns.ldv_32691.aftr_isp = tmp___6 == 0;
#line 1381
  ns.ldv_32691.conn = (unsigned char )side;
#line 1383
  if ((unsigned int )side == 17U) {
#line 1384
    ns.ldv_32691.disk = 4U;
  } else {
#line 1386
    ns.ldv_32691.pdsk = 4U;
  }
#line 1388
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1389
  ns = mdev->state;
#line 1391
  if ((int )ns.ldv_32691.conn <= 9) {
#line 1392
    r = 0;
  } else {

  }
#line 1394
  if (r == 1) {
#line 1395
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1395
    mdev->rs_mark_left = tmp___7;
#line 1395
    mdev->rs_total = tmp___7;
#line 1397
    mdev->rs_failed = 0UL;
#line 1398
    mdev->rs_paused = 0UL;
#line 1399
    tmp___8 = jiffies;
#line 1399
    mdev->rs_mark_time = tmp___8;
#line 1399
    mdev->rs_start = tmp___8;
#line 1401
    mdev->rs_same_csum = 0UL;
#line 1402
    _drbd_pause_after(mdev);
  } else {

  }
#line 1404
  _raw_write_unlock_irq(& global_state_lock);
#line 1405
  drbd_state_unlock(mdev);
#line 1406
  put_ldev(mdev);
#line 1408
  if (r == 1) {
#line 1409
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_32691.conn);
#line 1409
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1414
    if (mdev->rs_total == 0UL) {
#line 1416
      request_ping(mdev);
#line 1417
      tmp___12 = get_current();
#line 1417
      tmp___12->state = 1L;
#line 1418
      schedule_timeout((long )(((mdev->net_conf)->ping_timeo * 250) / 9));
#line 1419
      drbd_resync_finished(mdev);
#line 1420
      return;
    } else {

    }
#line 1427
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1428
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1430
    drbd_md_sync(mdev);
  } else {

  }
#line 1432
  return;
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1436
  mdev = thi->mdev;
#line 1437
  w = 0;
#line 1438
  work_list.next = & work_list;
#line 1438
  work_list.prev = & work_list;
#line 1439
  intr = 0;
#line 1441
  tmp = mdev_to_minor(mdev);
#line 1441
  tmp___0 = get_current();
#line 1441
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1443
  goto ldv_42281;
  ldv_42291: 
#line 1444
  drbd_thread_current_set_cpu(mdev);
#line 1446
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1446
  if (tmp___1 != 0) {
#line 1447
    ldv_mutex_lock_24(& mdev->data.mutex);
#line 1448
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1449
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1450
    ldv_mutex_unlock_25(& mdev->data.mutex);
#line 1452
    intr = down_interruptible(& mdev->data.work.s);
#line 1454
    ldv_mutex_lock_26(& mdev->data.mutex);
#line 1455
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1456
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1457
    ldv_mutex_unlock_27(& mdev->data.mutex);
  } else {

  }
#line 1460
  if (intr != 0) {
#line 1461
    if (intr != -4) {
#line 1461
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1461
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1461
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1461);
    } else {

    }
#line 1462
    tmp___4 = get_current();
#line 1462
    flush_signals(tmp___4);
#line 1463
    tmp___5 = get_t_state(thi);
#line 1463
    _b = (unsigned int )tmp___5 == 1U;
#line 1463
    if (_b != 0) {
#line 1463
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1463
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1463
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1463);
    } else {

    }
#line 1463
    if (_b != 0) {
#line 1464
      goto ldv_42281;
    } else {

    }
#line 1465
    goto ldv_42282;
  } else {

  }
#line 1468
  tmp___8 = get_t_state(thi);
#line 1468
  if ((unsigned int )tmp___8 != 1U) {
#line 1469
    goto ldv_42282;
  } else {

  }
#line 1474
  w = 0;
#line 1475
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1476
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1476
  _b___0 = tmp___9 != 0;
#line 1476
  if (_b___0 != 0) {
#line 1476
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1476
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1476
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1476);
  } else {

  }
#line 1476
  if (_b___0 != 0) {
#line 1488
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1489
    goto ldv_42281;
  } else {

  }
#line 1491
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1491
  w = (struct drbd_work *)__mptr;
#line 1492
  list_del_init(& w->list);
#line 1493
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1495
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_32691.conn <= 9);
#line 1495
  if (tmp___12 == 0) {
#line 1497
    if ((int )mdev->state.ldv_32691.conn > 9) {
#line 1499
      val.i = 0U;
#line 1499
      val.ldv_32691.conn = 5U;
#line 1499
      mask.i = 0U;
#line 1499
      mask.ldv_32691.conn = 31U;
#line 1499
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_42281: 
#line 1443
  tmp___13 = get_t_state(thi);
#line 1443
  if ((unsigned int )tmp___13 == 1U) {
#line 1444
    goto ldv_42291;
  } else {

  }
  ldv_42282: 
#line 1502
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1502
  if (tmp___16 == 0) {
#line 1502
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1502
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1502
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1502);
  } else {

  }
#line 1503
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1503
  if (tmp___19 == 0) {
#line 1503
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1503
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1503
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1503);
  } else {

  }
#line 1505
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1506
  i = 0;
#line 1507
  goto ldv_42298;
  ldv_42297: 
#line 1508
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1509
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1511
  goto ldv_42295;
  ldv_42294: 
#line 1512
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1512
  w = (struct drbd_work *)__mptr___0;
#line 1513
  list_del_init(& w->list);
#line 1514
  (*(w->cb))(mdev, w, 1);
#line 1515
  i = i + 1;
  ldv_42295: 
#line 1511
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1511
  if (tmp___20 == 0) {
#line 1512
    goto ldv_42294;
  } else {

  }
#line 1518
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_42298: 
#line 1507
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1507
  if (tmp___21 == 0) {
#line 1508
    goto ldv_42297;
  } else {

  }
#line 1520
  sema_init(& mdev->data.work.s, 0);
#line 1526
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1528
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 0U || (unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1528
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1528
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1528
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1528);
  } else {

  }
#line 1531
  drbd_thread_stop(& mdev->receiver);
#line 1532
  drbd_mdev_cleanup(mdev);
#line 1534
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1534
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1534
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1536
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1537
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1538
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1540
  return (0);
}
}
#line 1543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1548
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1550
  mutex_lock(ldv_func_arg1);
#line 1551
  return;
}
}
#line 1553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1558
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1560
  mutex_unlock(ldv_func_arg1);
#line 1561
  return;
}
}
#line 1563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1568
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1570
  mutex_unlock(ldv_func_arg1);
#line 1571
  return;
}
}
#line 1573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_20(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1578
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1580
  mutex_lock(ldv_func_arg1);
#line 1581
  return;
}
}
#line 1583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1588
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1590
  mutex_unlock(ldv_func_arg1);
#line 1591
  return;
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_22(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1598
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1600
  mutex_lock(ldv_func_arg1);
#line 1601
  return;
}
}
#line 1603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1608
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1610
  mutex_unlock(ldv_func_arg1);
#line 1611
  return;
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1618
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1620
  mutex_lock(ldv_func_arg1);
#line 1621
  return;
}
}
#line 1623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1628
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1630
  mutex_unlock(ldv_func_arg1);
#line 1631
  return;
}
}
#line 1633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1638
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1640
  mutex_lock(ldv_func_arg1);
#line 1641
  return;
}
}
#line 1643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1648
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1650
  mutex_unlock(ldv_func_arg1);
#line 1651
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
void __builtin_prefetch(void const   *  , ...) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 551 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 553
  h->next = 0;
#line 554
  h->pprev = 0;
#line 555
  return;
}
}
#line 557 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 559
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 562 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 564
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 567 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 569
  next = n->next;
#line 570
  pprev = n->pprev;
#line 571
  *pprev = next;
#line 572
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 573
    next->pprev = pprev;
  } else {

  }
#line 574
  return;
}
}
#line 583 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 585
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 585
  if (tmp == 0) {
#line 586
    __hlist_del(n);
#line 587
    INIT_HLIST_NODE(n);
  } else {

  }
#line 589
  return;
}
}
#line 591 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 593
  first = h->first;
#line 594
  n->next = first;
#line 595
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 596
    first->pprev = & n->next;
  } else {

  }
#line 597
  h->first = n;
#line 598
  n->pprev = & h->first;
#line 599
  return;
}
}
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 61
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 64
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_44(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) ;
#line 28
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 220
  switch (8UL) {
  case 1UL: 
#line 220
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5782;
  case 2UL: 
#line 220
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5782;
  case 4UL: 
#line 220
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5782;
  case 8UL: 
#line 220
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5782;
  default: 
#line 220
  __bad_percpu_size();
  }
  ldv_5782: 
#line 220
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 222
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 279 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 281
  _raw_spin_lock(& lock->ldv_5557.rlock);
#line 282
  return;
}
}
#line 319 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 321
  _raw_spin_unlock(& lock->ldv_5557.rlock);
#line 322
  return;
}
}
#line 230 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 327 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10784: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10784;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___1(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 227 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 229
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 231
extern void sock_release(struct socket * ) ;
#line 234
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 331 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_16736: ;
#line 63
    goto ldv_16736;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_16737: ;
#line 65
    goto ldv_16737;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_16738: ;
#line 66
    goto ldv_16738;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2330 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2332
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2332
  return (tmp);
}
}
#line 2356 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2358
  tmp = test_tsk_thread_flag(p, 2);
#line 2358
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2358
  return ((int )tmp___0);
}
}
#line 282 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 486 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 489 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 491
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 52 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 54
  __might_sleep((char *)"include/linux/highmem.h", 54, 0);
#line 55
  tmp = lowmem_page_address(page);
#line 55
  return (tmp);
}
}
#line 58 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 60
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[38U] ;

  {
#line 229
  cmdnames[0] = "Data";
#line 229
  cmdnames[1] = "DataReply";
#line 229
  cmdnames[2] = "RSDataReply";
#line 229
  cmdnames[3] = "Barrier";
#line 229
  cmdnames[4] = "ReportBitMap";
#line 229
  cmdnames[5] = "BecomeSyncTarget";
#line 229
  cmdnames[6] = "BecomeSyncSource";
#line 229
  cmdnames[7] = "UnplugRemote";
#line 229
  cmdnames[8] = "DataRequest";
#line 229
  cmdnames[9] = "RSDataRequest";
#line 229
  cmdnames[10] = "SyncParam";
#line 229
  cmdnames[11] = "ReportProtocol";
#line 229
  cmdnames[12] = "ReportUUIDs";
#line 229
  cmdnames[13] = "ReportSizes";
#line 229
  cmdnames[14] = "ReportState";
#line 229
  cmdnames[15] = "ReportSyncUUID";
#line 229
  cmdnames[16] = "AuthChallenge";
#line 229
  cmdnames[17] = "AuthResponse";
#line 229
  cmdnames[18] = "StateChgRequest";
#line 229
  cmdnames[19] = "Ping";
#line 229
  cmdnames[20] = "PingAck";
#line 229
  cmdnames[21] = "RecvAck";
#line 229
  cmdnames[22] = "WriteAck";
#line 229
  cmdnames[23] = "RSWriteAck";
#line 229
  cmdnames[24] = "DiscardAck";
#line 229
  cmdnames[25] = "NegAck";
#line 229
  cmdnames[26] = "NegDReply";
#line 229
  cmdnames[27] = "NegRSDReply";
#line 229
  cmdnames[28] = "BarrierAck";
#line 229
  cmdnames[29] = "StateChgReply";
#line 229
  cmdnames[30] = "OVRequest";
#line 229
  cmdnames[31] = "OVReply";
#line 229
  cmdnames[32] = "OVResult";
#line 229
  cmdnames[33] = 0;
#line 229
  cmdnames[34] = 0;
#line 229
  cmdnames[35] = "SyncParam89";
#line 229
  cmdnames[36] = 0;
#line 229
  cmdnames[37] = 0;
#line 267
  if ((unsigned int )cmd == 65521U) {
#line 268
    return ("HandShakeM");
  } else {

  }
#line 269
  if ((unsigned int )cmd == 65522U) {
#line 270
    return ("HandShakeS");
  } else {

  }
#line 271
  if ((unsigned int )cmd == 65534U) {
#line 272
    return ("HandShake");
  } else {

  }
#line 273
  if ((unsigned int )cmd > 36U) {
#line 274
    return ("Unknown");
  } else {

  }
#line 275
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 296
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 309
  c->word_offset = c->bit_offset >> 6;
#line 310
  return;
}
}
#line 535 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 537
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 550
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 560 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 562
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1075
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1079
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1085
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1095
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1097
void tl_clear(struct drbd_conf *mdev ) ;
#line 1099
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1102
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1103
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1106
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) ;
#line 1108
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1117
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1119
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1120
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1124
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1126
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1143
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1145
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1166
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1167
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1168
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1349
mempool_t *drbd_ee_mempool ;
#line 1351
struct page *drbd_pp_pool ;
#line 1352
spinlock_t drbd_pp_lock ;
#line 1353
int drbd_pp_vacant ;
#line 1354
wait_queue_head_t drbd_pp_wait ;
#line 1374
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1377
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev ) ;
#line 1378
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1379
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1380
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1382
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1432
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1439
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1441
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1445
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1475 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1477
  val = 1;
#line 1478
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1480
  return;
}
}
#line 1482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1484
  val = 1;
#line 1485
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1487
  return;
}
}
#line 1498
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1501
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1527
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1626
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1626
  return (tmp);
}
}
#line 1680 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1682
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1685
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1688
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_41790;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_41790;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41790: ;
#line 1746
  return (s);
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1790
  tmp = spinlock_check(& q->q_lock);
#line 1790
  flags = _raw_spin_lock_irqsave(tmp);
#line 1791
  list_add(& w->list, & q->q);
#line 1792
  up(& q->s);
#line 1794
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1795
  return;
}
}
#line 1827 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1830
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1830
  return (tmp);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1836
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1836
  return (tmp);
}
}
#line 1918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1920
  atomic_inc(& mdev->unacked_cnt);
#line 1921
  return;
}
}
#line 1934 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1936
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 1936
  if (tmp != 0) {
#line 1937
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1938
  return;
}
}
#line 1946 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 1950
  atomic_inc(& mdev->net_cnt);
#line 1951
  have_net_conf = (int )mdev->state.ldv_32691.conn > 1;
#line 1952
  if (have_net_conf == 0) {
#line 1953
    put_net_conf(mdev);
  } else {

  }
#line 1954
  return (have_net_conf);
}
}
#line 2175 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2177
  mdev->ed_uuid = val;
#line 2178
  return;
}
}
#line 2180 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2187
  return ((int )a - (int )b);
}
}
#line 2196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2199
  spin_lock(& mdev->peer_seq_lock);
#line 2200
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2200
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2201
  mdev->peer_seq = m;
#line 2202
  spin_unlock(& mdev->peer_seq_lock);
#line 2203
  if (m == new_seq) {
#line 2204
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2205
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page___0(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_41999;
  ldv_41998: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_41999: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_41998;
  } else {

  }

#line 31
  return (0);
}
}
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 82
  tmp = crypto_tfm_alg_type(tfm);
#line 82
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_42062: ;
#line 207
    goto ldv_42062;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_42067: ;
#line 216
    goto ldv_42067;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_42085;
  ldv_42084: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_42085: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_42084;
      } else {
#line 240
        goto ldv_42086;
      }
    } else {
#line 240
      goto ldv_42086;
    }
  } else {

  }
  ldv_42086: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_42132: ;
#line 162
  goto ldv_42132;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 97
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 99
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 100
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 105
  spin_lock(& mdev->epoch_lock);
#line 106
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 106
  prev = (struct drbd_epoch *)__mptr;
#line 107
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 108
    prev = 0;
  } else {

  }
#line 109
  spin_unlock(& mdev->epoch_lock);
#line 110
  return (prev);
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_page_or_try_alloc(struct drbd_conf *mdev ) 
{ 
  struct page *page ;

  {
#line 117
  page = 0;
#line 121
  if (drbd_pp_vacant > 0) {
#line 122
    spin_lock(& drbd_pp_lock);
#line 123
    page = drbd_pp_pool;
#line 124
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 125
      drbd_pp_pool = (struct page *)page->ldv_12290.ldv_12287.private;
#line 126
      page->ldv_12290.ldv_12287.private = 0UL;
#line 127
      drbd_pp_vacant = drbd_pp_vacant - 1;
    } else {

    }
#line 129
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 134
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 135
    page = alloc_pages(514U, 0U);
  } else {

  }
#line 136
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 137
    atomic_inc(& mdev->pp_in_use);
  } else {

  }
#line 138
  return (page);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 146
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 146
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 147
    drbd_kick_lo(mdev);
  } else {

  }
#line 148
  return;
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 160
  le = mdev->net_ee.next;
#line 160
  tle = le->next;
#line 160
  goto ldv_42234;
  ldv_42233: 
#line 161
  __mptr = (struct list_head  const  *)le;
#line 161
  e = (struct drbd_epoch_entry *)__mptr;
#line 162
  tmp = drbd_bio_has_active_page___0(e->private_bio);
#line 162
  if (tmp != 0) {
#line 163
    goto ldv_42232;
  } else {

  }
#line 164
  list_move(le, to_be_freed);
#line 160
  le = tle;
#line 160
  tle = le->next;
  ldv_42234: ;
#line 160
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 161
    goto ldv_42233;
  } else {

  }
  ldv_42232: ;
#line 165
  return;
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 170
  reclaimed.next = & reclaimed;
#line 170
  reclaimed.prev = & reclaimed;
#line 173
  maybe_kick_lo(mdev);
#line 174
  spin_lock_irq(& mdev->req_lock);
#line 175
  reclaim_net_ee(mdev, & reclaimed);
#line 176
  spin_unlock_irq(& mdev->req_lock);
#line 178
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 178
  e = (struct drbd_epoch_entry *)__mptr;
#line 178
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 178
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 178
  goto ldv_42248;
  ldv_42247: 
#line 179
  drbd_free_ee(mdev, e);
#line 178
  e = t;
#line 178
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 178
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_42248: ;
#line 178
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 179
    goto ldv_42247;
  } else {

  }

#line 183
  return;
}
}
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , int retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 193
  page = 0;
#line 194
  tmp = get_current();
#line 194
  wait.flags = 0U;
#line 194
  wait.private = (void *)tmp;
#line 194
  wait.func = & autoremove_wake_function;
#line 194
  wait.task_list.next = & wait.task_list;
#line 194
  wait.task_list.prev = & wait.task_list;
#line 196
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 196
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 197
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 198
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 199
      return (page);
    } else {

    }
  } else {

  }
  ldv_42257: 
#line 203
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 205
  drbd_kick_lo_and_reclaim_net(mdev);
#line 207
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 207
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 208
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 209
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 210
      goto ldv_42256;
    } else {

    }
  } else {

  }
#line 213
  if (retry == 0) {
#line 214
    goto ldv_42256;
  } else {

  }
#line 216
  tmp___4 = get_current();
#line 216
  tmp___5 = signal_pending(tmp___4);
#line 216
  if (tmp___5 != 0) {
#line 217
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 217
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 217
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 218
    goto ldv_42256;
  } else {

  }
#line 221
  schedule();
#line 222
  goto ldv_42257;
  ldv_42256: 
#line 223
  finish_wait(& drbd_pp_wait, & wait);
#line 225
  return (page);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int free_it ;

  {
#line 234
  spin_lock(& drbd_pp_lock);
#line 235
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 236
    free_it = 1;
  } else {
#line 238
    page->ldv_12290.ldv_12287.private = (unsigned long )drbd_pp_pool;
#line 239
    drbd_pp_pool = page;
#line 240
    drbd_pp_vacant = drbd_pp_vacant + 1;
#line 241
    free_it = 0;
  }
#line 243
  spin_unlock(& drbd_pp_lock);
#line 245
  atomic_dec(& mdev->pp_in_use);
#line 247
  if (free_it != 0) {
#line 248
    __free_pages(page, 0U);
  } else {

  }
#line 250
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 251
  return;
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free_bio_pages(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct page *p_to_be_freed ;
  struct page *page ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 255
  p_to_be_freed = 0;
#line 260
  spin_lock(& drbd_pp_lock);
#line 261
  bvec = bio->bi_io_vec;
#line 261
  i = 0;
#line 261
  goto ldv_42272;
  ldv_42271: ;
#line 262
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 263
    (bvec->bv_page)->ldv_12290.ldv_12287.private = (unsigned long )p_to_be_freed;
#line 264
    p_to_be_freed = bvec->bv_page;
  } else {
#line 266
    (bvec->bv_page)->ldv_12290.ldv_12287.private = (unsigned long )drbd_pp_pool;
#line 267
    drbd_pp_pool = bvec->bv_page;
#line 268
    drbd_pp_vacant = drbd_pp_vacant + 1;
  }
#line 261
  bvec = bvec + 1;
#line 261
  i = i + 1;
  ldv_42272: ;
#line 261
  if ((int )bio->bi_vcnt > i) {
#line 262
    goto ldv_42271;
  } else {

  }
#line 271
  spin_unlock(& drbd_pp_lock);
#line 272
  atomic_sub((int )bio->bi_vcnt, & mdev->pp_in_use);
#line 274
  goto ldv_42275;
  ldv_42274: 
#line 275
  page = p_to_be_freed;
#line 276
  p_to_be_freed = (struct page *)page->ldv_12290.ldv_12287.private;
#line 277
  page->ldv_12290.ldv_12287.private = 0UL;
#line 278
  put_page(page);
  ldv_42275: ;
#line 274
  if ((unsigned long )p_to_be_freed != (unsigned long )((struct page *)0)) {
#line 275
    goto ldv_42274;
  } else {

  }
#line 281
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 282
  return;
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct request_queue *q ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  struct bio *bio ;
  unsigned int ds ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct bvec_merge_data bvm ;
  int l ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int __min1 ;
  int __min2 ;
  int tmp___20 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;

  {
#line 311
  tmp = drbd_insert_fault(mdev, 8U);
#line 311
  if (tmp != 0) {
#line 312
    return (0);
  } else {

  }
#line 314
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 314
  e = (struct drbd_epoch_entry *)tmp___0;
#line 315
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 316
    if ((gfp_mask & 512U) == 0U) {
#line 317
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 317
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 317
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 318
    return (0);
  } else {

  }
#line 321
  bio = bio_alloc(gfp_mask & 4294967293U, (int )(data_size / 4096U + ((data_size & 4095U) != 0U ? 1U : 0U)));
#line 322
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 323
    if ((gfp_mask & 512U) == 0U) {
#line 324
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 324
      printk("<3>%s %s: alloc_ee: Allocation of a bio failed\n", tmp___4, tmp___3);
    } else {

    }
#line 325
    goto fail1;
  } else {

  }
#line 328
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 329
  bio->bi_sector = sector;
#line 331
  ds = data_size;
#line 332
  goto ldv_42300;
  ldv_42299: 
#line 333
  page = drbd_pp_alloc(mdev, (int )gfp_mask & 16);
#line 334
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 335
    if ((gfp_mask & 512U) == 0U) {
#line 336
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
      printk("<3>%s %s: alloc_ee: Allocation of a page failed\n", tmp___6, tmp___5);
    } else {

    }
#line 337
    goto fail2;
  } else {

  }
#line 339
  __min1 = (int )ds;
#line 339
  __min2 = 4096;
#line 339
  tmp___20 = bio_add_page(bio, page, (unsigned int )(__min1 < __min2 ? __min1 : __min2),
                          0U);
#line 339
  if (tmp___20 == 0) {
#line 340
    drbd_pp_free(mdev, page);
#line 341
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 341
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 341
    printk("<3>%s %s: alloc_ee: bio_add_page(s=%llu,data_size=%u,ds=%u) failed\n",
           tmp___8, tmp___7, (unsigned long long )sector, data_size, ds);
#line 345
    q = bdev_get_queue(bio->bi_bdev);
#line 346
    if ((unsigned long )q->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 347
      bvm.bi_bdev = bio->bi_bdev;
#line 347
      bvm.bi_sector = bio->bi_sector;
#line 347
      bvm.bi_size = bio->bi_size;
#line 347
      bvm.bi_rw = bio->bi_rw;
#line 353
      tmp___9 = (*(q->merge_bvec_fn))(q, & bvm, bio->bi_io_vec + (unsigned long )bio->bi_vcnt);
#line 353
      l = tmp___9;
#line 355
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 355
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 355
      printk("<3>%s %s: merge_bvec_fn() = %d\n", tmp___11, tmp___10, l);
    } else {

    }
#line 359
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    printk("<3>%s %s: bio->bi_max_vecs = %d\n", tmp___13, tmp___12, bio->bi_max_vecs);
#line 360
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 360
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 360
    printk("<3>%s %s: bio->bi_vcnt = %d\n", tmp___15, tmp___14, (int )bio->bi_vcnt);
#line 361
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 361
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 361
    printk("<3>%s %s: bio->bi_size = %d\n", tmp___17, tmp___16, bio->bi_size);
#line 362
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    printk("<3>%s %s: bio->bi_phys_segments = %d\n", tmp___19, tmp___18, bio->bi_phys_segments);
#line 364
    goto fail2;
  } else {

  }
#line 367
  __min1___0 = (int )ds;
#line 367
  __min2___0 = 4096;
#line 367
  ds = ds - (unsigned int )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
  ldv_42300: ;
#line 332
  if (ds != 0U) {
#line 333
    goto ldv_42299;
  } else {

  }

#line 370
  if (bio->bi_size != data_size) {
#line 370
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 370
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 370
    printk("<3>%s %s: ASSERT( data_size == bio->bi_size ) in %s:%d\n", tmp___22, tmp___21,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           370);
  } else {

  }
#line 372
  bio->bi_private = (void *)e;
#line 373
  e->mdev = mdev;
#line 374
  e->sector = sector;
#line 375
  e->size = bio->bi_size;
#line 377
  e->private_bio = bio;
#line 378
  e->block_id = id;
#line 379
  INIT_HLIST_NODE(& e->colision);
#line 380
  e->epoch = 0;
#line 381
  e->flags = 0U;
#line 383
  return (e);
  fail2: 
#line 386
  drbd_pp_free_bio_pages(mdev, bio);
#line 387
  bio_put(bio);
  fail1: 
#line 389
  mempool_free((void *)e, drbd_ee_mempool);
#line 391
  return (0);
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 396
  bio = e->private_bio;
#line 397
  drbd_pp_free_bio_pages(mdev, bio);
#line 398
  bio_put(bio);
#line 399
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 399
  if (tmp___1 == 0) {
#line 399
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           399);
  } else {

  }
#line 400
  mempool_free((void *)e, drbd_ee_mempool);
#line 401
  return;
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 405
  work_list.next = & work_list;
#line 405
  work_list.prev = & work_list;
#line 407
  count = 0;
#line 409
  spin_lock_irq(& mdev->req_lock);
#line 410
  list_splice_init(list, & work_list);
#line 411
  spin_unlock_irq(& mdev->req_lock);
#line 413
  __mptr = (struct list_head  const  *)work_list.next;
#line 413
  e = (struct drbd_epoch_entry *)__mptr;
#line 413
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 413
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 413
  goto ldv_42322;
  ldv_42321: 
#line 414
  drbd_free_ee(mdev, e);
#line 415
  count = count + 1;
#line 413
  e = t;
#line 413
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 413
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_42322: ;
#line 413
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 414
    goto ldv_42321;
  } else {

  }

#line 417
  return (count);
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 432
  work_list.next = & work_list;
#line 432
  work_list.prev = & work_list;
#line 433
  reclaimed.next = & reclaimed;
#line 433
  reclaimed.prev = & reclaimed;
#line 435
  ok = (int )mdev->state.ldv_32691.conn > 8;
#line 437
  spin_lock_irq(& mdev->req_lock);
#line 438
  reclaim_net_ee(mdev, & reclaimed);
#line 439
  list_splice_init(& mdev->done_ee, & work_list);
#line 440
  spin_unlock_irq(& mdev->req_lock);
#line 442
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 442
  e = (struct drbd_epoch_entry *)__mptr;
#line 442
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 442
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 442
  goto ldv_42339;
  ldv_42338: 
#line 443
  drbd_free_ee(mdev, e);
#line 442
  e = t;
#line 442
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 442
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_42339: ;
#line 442
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 443
    goto ldv_42338;
  } else {

  }
#line 449
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 449
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 449
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 449
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 449
  goto ldv_42348;
  ldv_42347: 
#line 451
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 451
  ok = tmp != 0 && ok != 0;
#line 452
  drbd_free_ee(mdev, e);
#line 449
  e = t;
#line 449
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 449
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_42348: ;
#line 449
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 450
    goto ldv_42347;
  } else {

  }
#line 454
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 456
  return (ok);
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = get_current();
#line 461
  wait.flags = 0U;
#line 461
  wait.private = (void *)tmp;
#line 461
  wait.func = & autoremove_wake_function;
#line 461
  wait.task_list.next = & wait.task_list;
#line 461
  wait.task_list.prev = & wait.task_list;
#line 465
  goto ldv_42356;
  ldv_42355: 
#line 466
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 467
  spin_unlock_irq(& mdev->req_lock);
#line 468
  drbd_kick_lo(mdev);
#line 469
  schedule();
#line 470
  finish_wait(& mdev->ee_wait, & wait);
#line 471
  spin_lock_irq(& mdev->req_lock);
  ldv_42356: 
#line 465
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 465
  if (tmp___0 == 0) {
#line 466
    goto ldv_42355;
  } else {

  }

#line 470
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 477
  spin_lock_irq(& mdev->req_lock);
#line 478
  _drbd_wait_ee_list_empty(mdev, head);
#line 479
  spin_unlock_irq(& mdev->req_lock);
#line 480
  return;
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 487
  sk = sock->sk;
#line 488
  err = 0;
#line 490
  *what = "listen";
#line 491
  err = (*((sock->ops)->listen))(sock, 5);
#line 492
  if (err < 0) {
#line 493
    goto out;
  } else {

  }
#line 495
  *what = "sock_create_lite";
#line 496
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 498
  if (err < 0) {
#line 499
    goto out;
  } else {

  }
#line 501
  *what = "accept";
#line 502
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 503
  if (err < 0) {
#line 504
    sock_release(*newsock);
#line 505
    *newsock = 0;
#line 506
    goto out;
  } else {

  }
#line 508
  (*newsock)->ops = sock->ops;
  out: ;
#line 511
  return (err);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 518
  iov.iov_base = buf;
#line 518
  iov.iov_len = size;
#line 522
  msg.msg_name = 0;
#line 522
  msg.msg_namelen = 0;
#line 522
  msg.msg_iov = (struct iovec *)(& iov);
#line 522
  msg.msg_iovlen = 1UL;
#line 522
  msg.msg_control = 0;
#line 522
  msg.msg_controllen = 0UL;
#line 522
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 529
  tmp = current_thread_info___0();
#line 529
  oldfs = tmp->addr_limit;
#line 530
  tmp___0 = current_thread_info___0();
#line 530
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 530
  tmp___0->addr_limit = __constr_expr_0;
#line 531
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 532
  tmp___1 = current_thread_info___0();
#line 532
  tmp___1->addr_limit = oldfs;
#line 534
  return (rv);
}
}
#line 537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 540
  iov.iov_base = buf;
#line 540
  iov.iov_len = size;
#line 544
  msg.msg_name = 0;
#line 544
  msg.msg_namelen = 0;
#line 544
  msg.msg_iov = (struct iovec *)(& iov);
#line 544
  msg.msg_iovlen = 1UL;
#line 544
  msg.msg_control = 0;
#line 544
  msg.msg_controllen = 0UL;
#line 544
  msg.msg_flags = 16640U;
#line 551
  tmp = current_thread_info___0();
#line 551
  oldfs = tmp->addr_limit;
#line 552
  tmp___0 = current_thread_info___0();
#line 552
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 552
  tmp___0->addr_limit = __constr_expr_0;
  ldv_42394: 
#line 555
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 556
  if ((size_t )rv == size) {
#line 557
    goto ldv_42393;
  } else {

  }
#line 564
  if (rv < 0) {
#line 565
    if (rv == -104) {
#line 566
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 566
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 566
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 567
    if (rv != -512) {
#line 568
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 568
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 568
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 569
    goto ldv_42393;
  } else
#line 570
  if (rv == 0) {
#line 571
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 571
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 571
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 572
    goto ldv_42393;
  } else {
#line 578
    goto ldv_42393;
  }
#line 580
  goto ldv_42394;
  ldv_42393: 
#line 582
  tmp___7 = current_thread_info___0();
#line 582
  tmp___7->addr_limit = oldfs;
#line 584
  if ((size_t )rv != size) {
#line 585
    val.i = 0U;
#line 585
    val.ldv_32691.conn = 4U;
#line 585
    mask.i = 0U;
#line 585
    mask.ldv_32691.conn = 31U;
#line 585
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 587
  return (rv);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 596
  disconnect_on_error = 1;
#line 598
  tmp = get_net_conf(mdev);
#line 598
  if (tmp == 0) {
#line 599
    return (0);
  } else {

  }
#line 601
  what = "sock_create_kern";
#line 602
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 604
  if (err < 0) {
#line 605
    sock = 0;
#line 606
    goto out;
  } else {

  }
#line 609
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 609
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 609
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 619
  __min1 = (mdev->net_conf)->my_addr_len;
#line 619
  __min2 = 28;
#line 619
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 619
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 621
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 622
    src_in6.sin6_port = 0U;
  } else {
#line 624
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 626
  what = "bind before connect";
#line 627
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 630
  if (err < 0) {
#line 631
    goto out;
  } else {

  }
#line 635
  disconnect_on_error = 0;
#line 636
  what = "connect";
#line 637
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 642
  if (err < 0) {
#line 643
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 644
      sock_release(sock);
#line 645
      sock = 0;
    } else {

    }
#line 647
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 654
    disconnect_on_error = 0;
#line 655
    goto ldv_42426;
    default: 
#line 657
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_42426: ;
#line 659
    if (disconnect_on_error != 0) {
#line 660
      val.i = 0U;
#line 660
      val.ldv_32691.conn = 1U;
#line 660
      mask.i = 0U;
#line 660
      mask.ldv_32691.conn = 31U;
#line 660
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 662
  put_net_conf(mdev);
#line 663
  return (sock);
}
}
#line 666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 669
  s_estab = 0;
#line 672
  tmp = get_net_conf(mdev);
#line 672
  if (tmp == 0) {
#line 673
    return (0);
  } else {

  }
#line 675
  what = "sock_create_kern";
#line 676
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 678
  if (err != 0) {
#line 679
    s_listen = 0;
#line 680
    goto out;
  } else {

  }
#line 683
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 684
  tmp___0 = random32();
#line 684
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 686
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 687
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 688
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 690
  what = "bind before listen";
#line 691
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 694
  if (err < 0) {
#line 695
    goto out;
  } else {

  }
#line 697
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 700
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 701
    sock_release(s_listen);
  } else {

  }
#line 702
  if (err < 0) {
#line 703
    if ((err != -11 && err != -4) && err != -512) {
#line 704
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 705
      val.i = 0U;
#line 705
      val.ldv_32691.conn = 1U;
#line 705
      mask.i = 0U;
#line 705
      mask.ldv_32691.conn = 31U;
#line 705
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 708
  put_net_conf(mdev);
#line 710
  return (s_estab);
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 716
  h = & mdev->data.sbuf.header;
#line 718
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 718
  return (tmp);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 723
  h = & mdev->data.sbuf.header;
#line 726
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 728
  if (rr == 8 && h->magic == 1728214147U) {
#line 729
    tmp = __fswab16((int )h->command);
#line 729
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 731
  return (65535);
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 744
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 745
    return (0);
  } else {

  }
#line 747
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 749
  if (rr > 0 || rr == -11) {
#line 750
    return (1);
  } else {
#line 752
    sock_release(*sock);
#line 753
    *sock = 0;
#line 754
    return (0);
  }
}
}
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___29 ;

  {
#line 771
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 771
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 771
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 771
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           771);
  } else {

  }
#line 773
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 773
  if (tmp___3 != 0) {
#line 774
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 774
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 774
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 776
  val.i = 0U;
#line 776
  val.ldv_32691.conn = 8U;
#line 776
  mask.i = 0U;
#line 776
  mask.ldv_32691.conn = 31U;
#line 776
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 776
  if (tmp___4 <= 0) {
#line 777
    return (-2);
  } else {

  }
#line 779
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 781
  sock = 0;
#line 782
  msock = 0;
  ldv_42485: 
#line 785
  try = 0;
  ldv_42477: 
#line 787
  s = drbd_try_connect(mdev);
#line 788
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 789
    goto ldv_42476;
  } else {
#line 788
    try = try + 1;
#line 788
    if (try > 2) {
#line 789
      goto ldv_42476;
    } else {

    }
  }
#line 791
  tmp___5 = get_current();
#line 791
  tmp___5->state = 1L;
#line 792
  schedule_timeout(25L);
#line 793
  goto ldv_42477;
  ldv_42476: ;
#line 795
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 796
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 797
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 798
      sock = s;
#line 799
      s = 0;
    } else
#line 800
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 801
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 802
      msock = s;
#line 803
      s = 0;
    } else {
#line 805
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 806
      goto out_release_sockets;
    }
  } else {

  }
#line 810
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 811
    tmp___8 = get_current();
#line 811
    tmp___8->state = 1L;
#line 812
    schedule_timeout(25L);
#line 813
    ok = drbd_socket_okay(mdev, & sock);
#line 814
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 814
    ok = tmp___9 != 0 && ok != 0;
#line 815
    if (ok != 0) {
#line 816
      goto ldv_42479;
    } else {

    }
  } else {

  }
  retry: 
#line 820
  s = drbd_wait_for_connect(mdev);
#line 821
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 822
    tmp___10 = drbd_recv_fp(mdev, s);
#line 822
    try = (int )tmp___10;
#line 823
    drbd_socket_okay(mdev, & sock);
#line 824
    drbd_socket_okay(mdev, & msock);
#line 825
    switch (try) {
    case 65522: ;
#line 827
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 828
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 828
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 828
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 829
      sock_release(sock);
    } else {

    }
#line 831
    sock = s;
#line 832
    goto ldv_42482;
    case 65521: ;
#line 834
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 835
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 836
      sock_release(msock);
    } else {

    }
#line 838
    msock = s;
#line 839
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 840
    goto ldv_42482;
    default: 
#line 842
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 842
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 842
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 843
    sock_release(s);
#line 844
    tmp___17 = random32();
#line 844
    if ((int )tmp___17 & 1) {
#line 845
      goto retry;
    } else {

    }
    }
    ldv_42482: ;
  } else {

  }
#line 849
  if ((int )mdev->state.ldv_32691.conn <= 1) {
#line 850
    goto out_release_sockets;
  } else {

  }
#line 851
  tmp___20 = get_current();
#line 851
  tmp___21 = signal_pending(tmp___20);
#line 851
  if (tmp___21 != 0) {
#line 852
    tmp___18 = get_current();
#line 852
    flush_signals(tmp___18);
#line 853
    __asm__  volatile   ("": : : "memory");
#line 854
    tmp___19 = get_t_state(& mdev->receiver);
#line 854
    if ((unsigned int )tmp___19 == 2U) {
#line 855
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 858
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 859
    ok = drbd_socket_okay(mdev, & sock);
#line 860
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 860
    ok = tmp___22 != 0 && ok != 0;
#line 861
    if (ok != 0) {
#line 862
      goto ldv_42479;
    } else {

    }
  } else {

  }
#line 864
  goto ldv_42485;
  ldv_42479: 
#line 866
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 867
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 869
  (sock->sk)->sk_allocation = 16U;
#line 870
  (msock->sk)->sk_allocation = 16U;
#line 872
  (sock->sk)->sk_priority = 4U;
#line 873
  (msock->sk)->sk_priority = 6U;
#line 875
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 876
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 877
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 880
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 881
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 882
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 890
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 890
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 890
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 893
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 894
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 898
  drbd_tcp_nodelay(sock);
#line 899
  drbd_tcp_nodelay(msock);
#line 901
  mdev->data.socket = sock;
#line 902
  mdev->meta.socket = msock;
#line 903
  mdev->last_received = jiffies;
#line 905
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 905
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 905
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 905
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           905);
  } else {

  }
#line 907
  h = drbd_do_handshake(mdev);
#line 908
  if (h <= 0) {
#line 909
    return (h);
  } else {

  }
#line 911
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 913
    tmp___28 = drbd_do_auth(mdev);
#line 913
    if (tmp___28 == 0) {
#line 914
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 914
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 914
      printk("<3>%s %s: Authentication of peer failed\n", tmp___27, tmp___26);
#line 915
      return (-1);
    } else {

    }
  } else {

  }
#line 919
  val___0.i = 0U;
#line 919
  val___0.ldv_32691.conn = 9U;
#line 919
  mask___0.i = 0U;
#line 919
  mask___0.ldv_32691.conn = 31U;
#line 919
  tmp___29 = drbd_request_state(mdev, mask___0, val___0);
#line 919
  if (tmp___29 <= 0) {
#line 920
    return (0);
  } else {

  }
#line 922
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 923
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 925
  atomic_set(& mdev->packet_seq, 0);
#line 926
  mdev->peer_seq = 0U;
#line 928
  drbd_thread_start(& mdev->asender);
#line 930
  drbd_send_protocol(mdev);
#line 931
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 932
  drbd_send_sizes(mdev, 0);
#line 933
  drbd_send_uuids(mdev);
#line 934
  drbd_send_state(mdev);
#line 935
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 936
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 938
  return (1);
  out_release_sockets: ;
#line 941
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 942
    sock_release(sock);
  } else {

  }
#line 943
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 944
    sock_release(msock);
  } else {

  }
#line 945
  return (-1);
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 952
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 954
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 954
  if (tmp___1 != 0L) {
#line 955
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 956
    return (0);
  } else {

  }
#line 958
  tmp___2 = __fswab16((int )h->command);
#line 958
  h->command = tmp___2;
#line 959
  tmp___3 = __fswab16((int )h->length);
#line 959
  h->length = tmp___3;
#line 960
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 960
  if (tmp___7 != 0L) {
#line 961
    tmp___4 = __fswab32(h->magic);
#line 961
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 964
    return (0);
  } else {

  }
#line 966
  mdev->last_received = jiffies;
#line 968
  return (1);
}
}
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 975
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 975
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 975
    if (tmp___1 != 0) {
#line 976
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 0);
#line 977
      if (rv != 0) {
#line 978
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 978
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 978
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 982
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 984
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 987
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 987
  return (tmp___2);
}
}
#line 990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 992
  fw = (struct flush_work *)w;
#line 993
  epoch = fw->epoch;
#line 995
  kfree((void const   *)w);
#line 997
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 997
  if (tmp == 0) {
#line 998
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1000
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_32691.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1003
  return (1);
}
}
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 1018
  schedule_flush = 0;
#line 1019
  rv = FE_STILL_LIVE;
#line 1021
  spin_lock(& mdev->epoch_lock);
  ldv_42529: 
#line 1023
  next_epoch = 0;
#line 1024
  finish = 0;
#line 1026
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1028
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1030
  atomic_dec(& epoch->active);
#line 1031
  goto ldv_42518;
  case 1U: 
#line 1033
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1037
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1037
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1040
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1041
  goto ldv_42518;
  case 2U: 
#line 1043
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1044
  goto ldv_42518;
  case 3U: ;
#line 1047
  goto ldv_42518;
  }
  ldv_42518: ;
#line 1050
  if (epoch_size != 0) {
#line 1050
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1050
    if (tmp___3 == 0) {
#line 1050
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1050
      if (tmp___4 != 0) {
#line 1050
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1050
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1050
          if (tmp___5 == 0) {
#line 1056
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1056
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1060
              finish = 1;
#line 1061
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1056
            if (epoch_size == 1) {
#line 1056
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1056
              if (tmp___2 != 0) {
#line 1060
                finish = 1;
#line 1061
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1056
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1056
            if (((unsigned int )ev & 32U) != 0U) {
#line 1060
              finish = 1;
#line 1061
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1062
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1062
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1064
                atomic_inc(& epoch->active);
#line 1065
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1068
  if (finish != 0) {
#line 1069
    if (((unsigned int )ev & 32U) == 0U) {
#line 1070
      spin_unlock(& mdev->epoch_lock);
#line 1071
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1072
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1074
    atomic_dec(& mdev->unacked_cnt);
#line 1074
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
    if (tmp___9 < 0) {
#line 1074
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1074, tmp___6);
    } else {

    }
#line 1076
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1077
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1077
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1078
      list_del(& epoch->list);
#line 1079
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1080
      mdev->epochs = mdev->epochs - 1U;
#line 1081
      kfree((void const   *)epoch);
#line 1083
      if ((unsigned int )rv == 0U) {
#line 1084
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1086
      epoch->flags = 0UL;
#line 1087
      atomic_set(& epoch->epoch_size, 0);
#line 1089
      if ((unsigned int )rv == 0U) {
#line 1090
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1094
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1095
    goto ldv_42528;
  } else {

  }
#line 1097
  epoch = next_epoch;
#line 1098
  goto ldv_42529;
  ldv_42528: 
#line 1100
  spin_unlock(& mdev->epoch_lock);
#line 1102
  if (schedule_flush != 0) {
#line 1104
    tmp___10 = kmalloc___1(32UL, 32U);
#line 1104
    fw = (struct flush_work *)tmp___10;
#line 1105
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1106
      fw->w.cb = & w_flush;
#line 1107
      fw->epoch = epoch;
#line 1108
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1110
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1110
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1110
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1111
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1113
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1114
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1118
  return (rv);
}
}
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1129
  write_ordering_str[0] = (char *)"none";
#line 1129
  write_ordering_str[1] = (char *)"drain";
#line 1129
  write_ordering_str[2] = (char *)"flush";
#line 1129
  write_ordering_str[3] = (char *)"barrier";
#line 1136
  pwo = mdev->write_ordering;
#line 1137
  _min1 = pwo;
#line 1137
  _min2 = wo;
#line 1137
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1138
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1139
    wo = WO_bdev_flush;
  } else {

  }
#line 1140
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1141
    wo = WO_drain_io;
  } else {

  }
#line 1142
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1143
    wo = WO_none;
  } else {

  }
#line 1144
  mdev->write_ordering = wo;
#line 1145
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1146
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1146
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1146
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1147
  return;
}
}
#line 1155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;

  {
#line 1157
  e = (struct drbd_epoch_entry *)w;
#line 1158
  bio = e->private_bio;
#line 1170
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1170
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1171
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1171
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1171
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1177
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1178
  bio->bi_sector = e->sector;
#line 1179
  bio->bi_size = e->size;
#line 1180
  bio->bi_idx = 0U;
#line 1182
  bio->bi_flags = bio->bi_flags & 0xf000000000000000UL;
#line 1183
  bio->bi_flags = bio->bi_flags | 1UL;
#line 1186
  bio->bi_phys_segments = 0U;
#line 1187
  bio->bi_next = 0;
#line 1193
  e->w.cb = & e_end_block;
#line 1196
  bio->bi_rw = bio->bi_rw & 0xffffffffffffffdfUL;
#line 1198
  drbd_generic_make_request(mdev, 4, bio);
#line 1200
  return (1);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  enum finish_epoch tmp___4 ;
  void *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  enum finish_epoch tmp___9 ;
  int tmp___10 ;

  {
#line 1206
  p = (struct p_barrier *)h;
#line 1209
  _b = (unsigned int )h->length != 8U;
#line 1209
  if (_b != 0) {
#line 1209
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1209
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1209
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1209);
  } else {

  }
#line 1209
  if (_b != 0) {
#line 1209
    return (0);
  } else {

  }
#line 1211
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1212
  _b___0 = (int )h->length != rv;
#line 1212
  if (_b___0 != 0) {
#line 1212
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1212
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1212
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1212);
  } else {

  }
#line 1212
  if (_b___0 != 0) {
#line 1212
    return (0);
  } else {

  }
#line 1214
  inc_unacked(mdev);
#line 1216
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1217
    drbd_kick_lo(mdev);
  } else {

  }
#line 1219
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1220
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1220
  rv = (int )tmp___3;
#line 1227
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1230
  if (rv == 2) {
#line 1231
    return (1);
  } else {

  }
#line 1232
  goto ldv_42562;
  case 2U: ;
  case 1U: ;
#line 1236
  if (rv == 0) {
#line 1237
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1238
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1239
    tmp___4 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1239
    rv = (int )tmp___4;
  } else {

  }
#line 1241
  if (rv == 2) {
#line 1242
    return (1);
  } else {

  }
#line 1247
  goto ldv_42562;
  }
  ldv_42562: 
#line 1252
  tmp___5 = kmalloc___1(40UL, 16U);
#line 1252
  epoch = (struct drbd_epoch *)tmp___5;
#line 1253
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1254
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1254
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1254
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___7, tmp___6);
#line 1255
    tmp___8 = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1255
    issue_flush = tmp___8 == 0;
#line 1256
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1257
    if (issue_flush != 0) {
#line 1258
      tmp___9 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1258
      rv = (int )tmp___9;
#line 1259
      if (rv == 2) {
#line 1260
        return (1);
      } else {

      }
    } else {

    }
#line 1263
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1265
    return (1);
  } else {

  }
#line 1268
  epoch->flags = 0UL;
#line 1269
  atomic_set(& epoch->epoch_size, 0);
#line 1270
  atomic_set(& epoch->active, 0);
#line 1272
  spin_lock(& mdev->epoch_lock);
#line 1273
  tmp___10 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1273
  if (tmp___10 != 0) {
#line 1274
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1275
    mdev->current_epoch = epoch;
#line 1276
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1279
    kfree((void const   *)epoch);
  }
#line 1281
  spin_unlock(& mdev->epoch_lock);
#line 1283
  return (1);
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio_vec *bvec ;
  struct page *page ;
  struct bio *bio ;
  int dgs ;
  int ds ;
  int i ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __min1 ;
  int __min2 ;
  void *tmp___6 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int __min1___1 ;
  int __min2___1 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;

  {
#line 1296
  dig_in = mdev->int_dig_in;
#line 1297
  dig_vv = mdev->int_dig_vv;
#line 1299
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1299
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1299
    dgs = (int )tmp;
  } else {
#line 1299
    dgs = 0;
  }
#line 1302
  if (dgs != 0) {
#line 1303
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1304
    if (rr != dgs) {
#line 1305
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1305
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1305
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1307
      return (0);
    } else {

    }
  } else {

  }
#line 1311
  data_size = data_size - dgs;
#line 1313
  _b = (data_size & 511) != 0;
#line 1313
  if (_b != 0) {
#line 1313
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1313
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1313
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1313);
  } else {

  }
#line 1313
  if (_b != 0) {
#line 1313
    return (0);
  } else {

  }
#line 1314
  _b___0 = (unsigned int )data_size > 32768U;
#line 1314
  if (_b___0 != 0) {
#line 1314
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1314);
  } else {

  }
#line 1314
  if (_b___0 != 0) {
#line 1314
    return (0);
  } else {

  }
#line 1319
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1320
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1321
    return (0);
  } else {

  }
#line 1322
  bio = e->private_bio;
#line 1323
  ds = data_size;
#line 1324
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1324
  i = (int )bio->bi_idx;
#line 1324
  goto ldv_42596;
  ldv_42595: 
#line 1325
  page = bvec->bv_page;
#line 1326
  __min1 = ds;
#line 1326
  __min2 = 4096;
#line 1326
  tmp___6 = kmap(page);
#line 1326
  rr = drbd_recv(mdev, tmp___6, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1327
  kunmap(page);
#line 1328
  __min1___1 = ds;
#line 1328
  __min2___1 = 4096;
#line 1328
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1329
    drbd_free_ee(mdev, e);
#line 1330
    __min1___0 = ds;
#line 1330
    __min2___0 = 4096;
#line 1330
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___8,
           tmp___7, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1332
    return (0);
  } else {

  }
#line 1334
  ds = ds - rr;
#line 1324
  bvec = bvec + 1;
#line 1324
  i = i + 1;
  ldv_42596: ;
#line 1324
  if ((int )bio->bi_vcnt > i) {
#line 1325
    goto ldv_42595;
  } else {

  }

#line 1337
  if (dgs != 0) {
#line 1338
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1339
    tmp___11 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1339
    if (tmp___11 != 0) {
#line 1340
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1340
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1340
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___10, tmp___9);
#line 1341
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1343
      drbd_free_ee(mdev, e);
#line 1344
      return (0);
    } else {

    }
  } else {

  }
#line 1347
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1348
  return (e);
}
}
#line 1354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1357
  rv = 1;
#line 1360
  page = drbd_pp_alloc(mdev, 1);
#line 1362
  data = kmap(page);
#line 1363
  goto ldv_42617;
  ldv_42616: 
#line 1364
  __min1 = data_size;
#line 1364
  __min2 = 4096;
#line 1364
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1365
  __min1___1 = data_size;
#line 1365
  __min2___1 = 4096;
#line 1365
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1366
    rv = 0;
#line 1367
    __min1___0 = data_size;
#line 1367
    __min2___0 = 4096;
#line 1367
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1369
    goto ldv_42615;
  } else {

  }
#line 1371
  data_size = data_size - rr;
  ldv_42617: ;
#line 1363
  if (data_size != 0) {
#line 1364
    goto ldv_42616;
  } else {

  }
  ldv_42615: 
#line 1373
  kunmap(page);
#line 1374
  drbd_pp_free(mdev, page);
#line 1375
  return (rv);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1384
  dig_in = mdev->int_dig_in;
#line 1385
  dig_vv = mdev->int_dig_vv;
#line 1387
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1387
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1387
    dgs = (int )tmp;
  } else {
#line 1387
    dgs = 0;
  }
#line 1390
  if (dgs != 0) {
#line 1391
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1392
    if (rr != dgs) {
#line 1393
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1395
      return (0);
    } else {

    }
  } else {

  }
#line 1399
  data_size = data_size - dgs;
#line 1403
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1405
  bio = req->master_bio;
#line 1406
  if (bio->bi_sector != sector) {
#line 1406
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1406
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1406
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1406);
  } else {

  }
#line 1408
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1408
  i = (int )bio->bi_idx;
#line 1408
  goto ldv_42636;
  ldv_42635: 
#line 1409
  __min1 = data_size;
#line 1409
  __min2 = (int )bvec->bv_len;
#line 1409
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1410
  tmp___4 = kmap(bvec->bv_page);
#line 1410
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1413
  kunmap(bvec->bv_page);
#line 1414
  if (rr != expect) {
#line 1415
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1418
    return (0);
  } else {

  }
#line 1420
  data_size = data_size - rr;
#line 1408
  bvec = bvec + 1;
#line 1408
  i = i + 1;
  ldv_42636: ;
#line 1408
  if ((int )bio->bi_vcnt > i) {
#line 1409
    goto ldv_42635;
  } else {

  }

#line 1423
  if (dgs != 0) {
#line 1424
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1425
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1425
    if (tmp___9 != 0) {
#line 1426
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1426
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1426
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1427
      return (0);
    } else {

    }
  } else {

  }
#line 1431
  if (data_size != 0) {
#line 1431
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1431
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1431
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1431);
  } else {

  }
#line 1432
  return (1);
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1439
  e = (struct drbd_epoch_entry *)w;
#line 1440
  sector = e->sector;
#line 1443
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1443
  if (tmp___1 == 0) {
#line 1443
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1443);
  } else {

  }
#line 1445
  tmp___2 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1445
  if (tmp___2 != 0L) {
#line 1446
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1446U);
#line 1447
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1450
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1452
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1454
  atomic_dec(& mdev->unacked_cnt);
#line 1454
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1454
  if (tmp___6 < 0) {
#line 1454
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1454
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1454, tmp___3);
  } else {

  }
#line 1456
  return (ok);
}
}
#line 1459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1463
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1464
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1465
    put_ldev(mdev);
#line 1466
    return (0);
  } else {

  }
#line 1469
  atomic_dec(& mdev->rs_pending_cnt);
#line 1469
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1469
  if (tmp___2 < 0) {
#line 1469
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1469
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1469, tmp);
  } else {

  }
#line 1471
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1472
  (e->private_bio)->bi_rw = 1UL;
#line 1473
  e->w.cb = & e_end_resync_block;
#line 1475
  inc_unacked(mdev);
#line 1479
  spin_lock_irq(& mdev->req_lock);
#line 1480
  list_add(& e->w.list, & mdev->sync_ee);
#line 1481
  spin_unlock_irq(& mdev->req_lock);
#line 1483
  drbd_generic_make_request(mdev, 2, e->private_bio);
#line 1486
  maybe_kick_lo(mdev);
#line 1487
  return (1);
}
}
#line 1490 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1496
  p = (struct p_data *)h;
#line 1498
  header_size = 24U;
#line 1499
  data_size = (unsigned int )h->length - header_size;
#line 1501
  _b = data_size == 0U;
#line 1501
  if (_b != 0) {
#line 1501
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1501
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1501
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1501);
  } else {

  }
#line 1501
  if (_b != 0) {
#line 1501
    return (0);
  } else {

  }
#line 1503
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1503
  if ((unsigned int )tmp___1 != header_size) {
#line 1504
    return (0);
  } else {

  }
#line 1506
  tmp___2 = __fswab64(p->sector);
#line 1506
  sector = (sector_t )tmp___2;
#line 1508
  spin_lock_irq(& mdev->req_lock);
#line 1509
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1510
  spin_unlock_irq(& mdev->req_lock);
#line 1511
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1511
  if (tmp___5 != 0L) {
#line 1512
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1512
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1512
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1513
    return (0);
  } else {

  }
#line 1519
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1521
  if (ok != 0) {
#line 1522
    req_mod(req, data_received);
  } else {

  }
#line 1527
  return (ok);
}
}
#line 1530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1535
  p = (struct p_data *)h;
#line 1537
  header_size = 24U;
#line 1538
  data_size = (unsigned int )h->length - header_size;
#line 1540
  _b = data_size == 0U;
#line 1540
  if (_b != 0) {
#line 1540
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1540
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1540
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1540);
  } else {

  }
#line 1540
  if (_b != 0) {
#line 1540
    return (0);
  } else {

  }
#line 1542
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1542
  if ((unsigned int )tmp___1 != header_size) {
#line 1543
    return (0);
  } else {

  }
#line 1545
  tmp___2 = __fswab64(p->sector);
#line 1545
  sector = (sector_t )tmp___2;
#line 1546
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1546
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1546
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1546
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1546);
  } else {

  }
#line 1548
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1548
  if (tmp___8 != 0) {
#line 1552
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1554
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1554
    if (tmp___7 != 0) {
#line 1555
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1555
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1555
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1557
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1559
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1562
  return (ok);
}
}
#line 1568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1570
  e = (struct drbd_epoch_entry *)w;
#line 1571
  sector = e->sector;
#line 1573
  ok = 1;
#line 1575
  if ((e->flags & 8U) != 0U) {
#line 1576
    epoch = previous_epoch(mdev, e->epoch);
#line 1577
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1578
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1581
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1582
    tmp___0 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1582
    if (tmp___0 != 0L) {
#line 1583
      pcmd = ((int )mdev->state.ldv_32691.conn > 15 && (int )mdev->state.ldv_32691.conn <= 21) && (e->flags & 4U) != 0U ? 23 : 22;
#line 1587
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1587
      ok = tmp & ok;
#line 1588
      if (pcmd == 23) {
#line 1589
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1589U);
      } else {

      }
    } else {
#line 1591
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1595
    atomic_dec(& mdev->unacked_cnt);
#line 1595
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1595
    if (tmp___4 < 0) {
#line 1595
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1595
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1595
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1595
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1595, tmp___1);
    } else {

    }
  } else {

  }
#line 1599
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1600
    spin_lock_irq(& mdev->req_lock);
#line 1601
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1601
    if (tmp___7 != 0) {
#line 1601
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1601
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1601
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1601);
    } else {

    }
#line 1602
    hlist_del_init(& e->colision);
#line 1603
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1605
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1605
    if (tmp___10 == 0) {
#line 1605
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1605
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1605
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1605);
    } else {

    }
  }
#line 1608
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1610
  return (ok);
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1615
  e = (struct drbd_epoch_entry *)w;
#line 1616
  ok = 1;
#line 1618
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1618
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1618
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1618
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1618);
  } else {

  }
#line 1619
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1621
  spin_lock_irq(& mdev->req_lock);
#line 1622
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1622
  if (tmp___3 != 0) {
#line 1622
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1622);
  } else {

  }
#line 1623
  hlist_del_init(& e->colision);
#line 1624
  spin_unlock_irq(& mdev->req_lock);
#line 1626
  atomic_dec(& mdev->unacked_cnt);
#line 1626
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1626
  if (tmp___7 < 0) {
#line 1626
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1626
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1626
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1626
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1626, tmp___4);
  } else {

  }
#line 1628
  return (ok);
}
}
#line 1652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1654
  tmp = get_current();
#line 1654
  wait.flags = 0U;
#line 1654
  wait.private = (void *)tmp;
#line 1654
  wait.func = & autoremove_wake_function;
#line 1654
  wait.task_list.next = & wait.task_list;
#line 1654
  wait.task_list.prev = & wait.task_list;
#line 1657
  ret = 0;
#line 1658
  spin_lock(& mdev->peer_seq_lock);
  ldv_42719: 
#line 1660
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1661
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1661
  if (tmp___0 <= 0) {
#line 1662
    goto ldv_42718;
  } else {

  }
#line 1663
  tmp___1 = get_current();
#line 1663
  tmp___2 = signal_pending(tmp___1);
#line 1663
  if (tmp___2 != 0) {
#line 1664
    ret = -512;
#line 1665
    goto ldv_42718;
  } else {

  }
#line 1667
  p_seq = mdev->peer_seq;
#line 1668
  spin_unlock(& mdev->peer_seq_lock);
#line 1669
  timeout = schedule_timeout(7500L);
#line 1670
  spin_lock(& mdev->peer_seq_lock);
#line 1671
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1672
    ret = -110;
#line 1673
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1674
    goto ldv_42718;
  } else {

  }
#line 1676
  goto ldv_42719;
  ldv_42718: 
#line 1677
  finish_wait(& mdev->seq_wait, & wait);
#line 1678
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1679
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1680
  spin_unlock(& mdev->peer_seq_lock);
#line 1681
  return (ret);
}
}
#line 1685 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;

  {
#line 1689
  p = (struct p_data *)h;
#line 1691
  rw = 1;
#line 1694
  header_size = 24;
#line 1695
  data_size = (int )h->length - header_size;
#line 1697
  _b = data_size == 0;
#line 1697
  if (_b != 0) {
#line 1697
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1697
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1697
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1697);
  } else {

  }
#line 1697
  if (_b != 0) {
#line 1697
    return (0);
  } else {

  }
#line 1699
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1699
  if (tmp___1 != header_size) {
#line 1700
    return (0);
  } else {

  }
#line 1702
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1702
  if (tmp___7 == 0) {
#line 1703
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1703
    if (tmp___4 != 0) {
#line 1704
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1704
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1704
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1706
    spin_lock(& mdev->peer_seq_lock);
#line 1707
    tmp___5 = __fswab32(p->seq_num);
#line 1707
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1708
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1709
    spin_unlock(& mdev->peer_seq_lock);
#line 1711
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1712
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1713
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1713
    return (tmp___6);
  } else {

  }
#line 1721
  tmp___8 = __fswab64(p->sector);
#line 1721
  sector = (sector_t )tmp___8;
#line 1722
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1723
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1724
    put_ldev(mdev);
#line 1725
    return (0);
  } else {

  }
#line 1728
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1729
  e->w.cb = & e_end_block;
#line 1731
  spin_lock(& mdev->epoch_lock);
#line 1732
  e->epoch = mdev->current_epoch;
#line 1733
  atomic_inc(& (e->epoch)->epoch_size);
#line 1734
  atomic_inc(& (e->epoch)->active);
#line 1736
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1736
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1736
    if (tmp___11 == 1) {
#line 1741
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1741
      epoch = (struct drbd_epoch *)__mptr;
#line 1742
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1743
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1744
        rw = rw | 32;
#line 1745
        e->flags = e->flags | 8U;
      } else {
#line 1747
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1747
        if (tmp___9 > 1) {
#line 1749
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1750
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1751
          rw = rw | 32;
#line 1752
          e->flags = e->flags | 8U;
        } else {
#line 1747
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1747
          if (tmp___10 == 0) {
#line 1749
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1750
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1751
            rw = rw | 32;
#line 1752
            e->flags = e->flags | 8U;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1756
  spin_unlock(& mdev->epoch_lock);
#line 1758
  tmp___12 = __fswab32(p->dp_flags);
#line 1758
  dp_flags = tmp___12;
#line 1759
  if ((int )dp_flags & 1) {
#line 1760
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1760
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1760
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1763
  if ((dp_flags & 2U) != 0U) {
#line 1764
    rw = rw | 192;
  } else {

  }
#line 1765
  if ((dp_flags & 4U) != 0U) {
#line 1766
    e->flags = e->flags | 4U;
  } else {

  }
#line 1769
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1770
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1774
    size = (int const   )e->size;
#line 1775
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1775
    discard = tmp___15;
#line 1776
    tmp___16 = get_current();
#line 1776
    wait.flags = 0U;
#line 1776
    wait.private = (void *)tmp___16;
#line 1776
    wait.func = & autoremove_wake_function;
#line 1776
    wait.task_list.next = & wait.task_list;
#line 1776
    wait.task_list.prev = & wait.task_list;
#line 1782
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1782
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1782
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1782
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1782);
    } else {

    }
#line 1783
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1783
    if (tmp___19 != 0L) {
#line 1783
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1783), "i" (12UL));
      ldv_42744: ;
#line 1783
      goto ldv_42744;
    } else {

    }
#line 1784
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1784
    if (tmp___20 != 0L) {
#line 1784
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1784), "i" (12UL));
      ldv_42745: ;
#line 1784
      goto ldv_42745;
    } else {

    }
#line 1820
    tmp___21 = __fswab32(p->seq_num);
#line 1820
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1820
    if (tmp___22 != 0) {
#line 1821
      goto out_interrupted;
    } else {

    }
#line 1823
    spin_lock_irq(& mdev->req_lock);
#line 1825
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1825
    hlist_add_head(& e->colision, tmp___23);
#line 1828
    slot = tl_hash_slot(mdev, sector);
#line 1829
    first = 1;
    ldv_42757: 
#line 1831
    have_unacked = 0;
#line 1832
    have_conflict = 0;
#line 1833
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1835
    n = slot->first;
#line 1835
    goto ldv_42754;
    ldv_42753: 
#line 1836
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1836
    if (tmp___28 != 0) {
#line 1839
      if (first != 0) {
#line 1840
        tmp___24 = get_current();
#line 1840
        tmp___25 = get_current();
#line 1840
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1840
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1840
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1845
      if ((i->rq_state & 8UL) != 0UL) {
#line 1846
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1847
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1835
    n = n->next;
    ldv_42754: ;
#line 1835
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1835
      __builtin_prefetch((void const   *)n->next);
#line 1835
      if (1 != 0) {
#line 1835
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1835
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1835
        if (1 != 0) {
#line 1836
          goto ldv_42753;
        } else {
#line 1838
          goto ldv_42755;
        }
      } else {
#line 1838
        goto ldv_42755;
      }
    } else {

    }
    ldv_42755: ;
#line 1851
    if (have_conflict == 0) {
#line 1852
      goto ldv_42756;
    } else {

    }
#line 1855
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1856
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1856
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1856
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1858
      inc_unacked(mdev);
#line 1859
      e->w.cb = & e_send_discard_ack;
#line 1860
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1862
      spin_unlock_irq(& mdev->req_lock);
#line 1867
      put_ldev(mdev);
#line 1868
      wake_asender(mdev);
#line 1869
      finish_wait(& mdev->misc_wait, & wait);
#line 1870
      return (1);
    } else {

    }
#line 1873
    tmp___31 = get_current();
#line 1873
    tmp___32 = signal_pending(tmp___31);
#line 1873
    if (tmp___32 != 0) {
#line 1874
      hlist_del_init(& e->colision);
#line 1876
      spin_unlock_irq(& mdev->req_lock);
#line 1878
      finish_wait(& mdev->misc_wait, & wait);
#line 1879
      goto out_interrupted;
    } else {

    }
#line 1882
    spin_unlock_irq(& mdev->req_lock);
#line 1883
    if (first != 0) {
#line 1884
      first = 0;
#line 1885
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1885
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1885
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 1887
    if (discard != 0) {
#line 1890
      if (have_unacked != 0) {
#line 1890
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1890
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1890
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               1890);
      } else {

      }
    } else {

    }
#line 1892
    schedule();
#line 1893
    spin_lock_irq(& mdev->req_lock);
#line 1894
    goto ldv_42757;
    ldv_42756: 
#line 1895
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1898
  list_add(& e->w.list, & mdev->active_ee);
#line 1899
  spin_unlock_irq(& mdev->req_lock);
#line 1901
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1903
  inc_unacked(mdev);
#line 1906
  goto ldv_42759;
  case 2: 
#line 1910
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1911
  goto ldv_42759;
  case 1: ;
#line 1914
  goto ldv_42759;
  }
  ldv_42759: ;
#line 1917
  if (*((unsigned int *)mdev + 451UL) == 0U) {
#line 1919
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1919U);
#line 1920
    e->flags = e->flags | 1U;
#line 1921
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1924
  (e->private_bio)->bi_rw = (unsigned long )rw;
#line 1925
  drbd_generic_make_request(mdev, 4, e->private_bio);
#line 1928
  maybe_kick_lo(mdev);
#line 1929
  return (1);
  out_interrupted: 
#line 1935
  put_ldev(mdev);
#line 1936
  drbd_free_ee(mdev, e);
#line 1937
  return (0);
}
}
#line 1940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  void *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  struct task_struct *tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  struct task_struct *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 1943
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1943
  capacity = tmp;
#line 1945
  di = 0;
#line 1948
  p = (struct p_block_req *)h;
#line 1950
  brps = 24;
#line 1952
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 1952
  if (tmp___0 != brps) {
#line 1953
    return (0);
  } else {

  }
#line 1955
  tmp___1 = __fswab64(p->sector);
#line 1955
  sector = (sector_t )tmp___1;
#line 1956
  tmp___2 = __fswab32(p->blksize);
#line 1956
  size = (int )tmp___2;
#line 1958
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1959
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1959
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1959
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1960, (unsigned long long )sector, size);
#line 1961
    return (0);
  } else {

  }
#line 1963
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1964
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1964
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1964
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1965, (unsigned long long )sector, size);
#line 1966
    return (0);
  } else {

  }
#line 1969
  tmp___10 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1969
  if (tmp___10 == 0) {
#line 1970
    tmp___9 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1970
    if (tmp___9 != 0) {
#line 1971
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 1973
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 1975
    return (1);
  } else {

  }
#line 1981
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 1982
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1983
    put_ldev(mdev);
#line 1984
    return (0);
  } else {

  }
#line 1987
  (e->private_bio)->bi_rw = 0UL;
#line 1988
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 1990
  switch ((int )h->command) {
  case 8: 
#line 1992
  e->w.cb = & w_e_end_data_req;
#line 1993
  fault_type = 5U;
#line 1994
  goto ldv_42777;
  case 9: 
#line 1996
  e->w.cb = & w_e_end_rsdata_req;
#line 1997
  fault_type = 3U;
#line 2003
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2003
  if (tmp___15 == 0) {
#line 2006
    tmp___13 = get_current();
#line 2006
    tmp___14 = signal_pending(tmp___13);
#line 2006
    if (tmp___14 == 0) {
#line 2006
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2006
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2006
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___12, tmp___11,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2006);
    } else {

    }
#line 2007
    goto out_free_e;
  } else {

  }
#line 2009
  goto ldv_42777;
  case 31: ;
  case 33: 
#line 2013
  fault_type = 3U;
#line 2014
  digest_size = (int )h->length - brps;
#line 2015
  tmp___16 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2015
  di = (struct digest_info *)tmp___16;
#line 2016
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2017
    goto out_free_e;
  } else {

  }
#line 2019
  di->digest_size = digest_size;
#line 2020
  di->digest = (void *)di + 16U;
#line 2022
  tmp___17 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2022
  if (tmp___17 != digest_size) {
#line 2023
    goto out_free_e;
  } else {

  }
#line 2025
  e->block_id = (unsigned long long )di;
#line 2026
  if ((unsigned int )h->command == 33U) {
#line 2027
    if (mdev->agreed_pro_version <= 88) {
#line 2027
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2027
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2027
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___19,
             tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2027);
    } else {

    }
#line 2028
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2029
  if ((unsigned int )h->command == 31U) {
#line 2030
    e->w.cb = & w_e_end_ov_reply;
#line 2031
    atomic_dec(& mdev->rs_pending_cnt);
#line 2031
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2031
    if (tmp___23 < 0) {
#line 2031
      tmp___20 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2031
      tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2031
      tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2031
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___22, tmp___21,
             "receive_DataRequest", 2031, tmp___20);
    } else {

    }
#line 2032
    goto ldv_42777;
  } else {

  }
#line 2035
  tmp___28 = drbd_rs_begin_io(mdev, sector);
#line 2035
  if (tmp___28 == 0) {
#line 2037
    tmp___26 = get_current();
#line 2037
    tmp___27 = signal_pending(tmp___26);
#line 2037
    if (tmp___27 == 0) {
#line 2037
      tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2037
      tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2037
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___25, tmp___24,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2037);
    } else {

    }
#line 2038
    goto out_free_e;
  } else {

  }
#line 2040
  goto ldv_42777;
  case 30: ;
#line 2043
  if ((int )mdev->state.ldv_32691.conn > 9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 304U) {
#line 2045
    tmp___29 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 2045
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2045
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2045
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___31,
           tmp___30, tmp___29);
  } else {

  }
#line 2047
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2049
    mdev->ov_start_sector = sector;
#line 2050
    mdev->ov_position = sector;
#line 2051
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2052
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2052
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2052
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___33, tmp___32, (unsigned long long )sector);
  } else {

  }
#line 2055
  e->w.cb = & w_e_end_ov_req;
#line 2056
  fault_type = 3U;
#line 2062
  tmp___38 = drbd_rs_begin_io(mdev, sector);
#line 2062
  if (tmp___38 == 0) {
#line 2065
    tmp___36 = get_current();
#line 2065
    tmp___37 = signal_pending(tmp___36);
#line 2065
    if (tmp___37 == 0) {
#line 2065
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2065
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2065
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___35, tmp___34,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2065);
    } else {

    }
#line 2066
    goto out_free_e;
  } else {

  }
#line 2068
  goto ldv_42777;
  default: 
#line 2072
  tmp___39 = cmdname((enum drbd_packets )h->command);
#line 2072
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2072
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2072
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___41, tmp___40,
         tmp___39);
#line 2074
  fault_type = 9U;
  }
  ldv_42777: 
#line 2077
  spin_lock_irq(& mdev->req_lock);
#line 2078
  list_add(& e->w.list, & mdev->read_ee);
#line 2079
  spin_unlock_irq(& mdev->req_lock);
#line 2081
  inc_unacked(mdev);
#line 2083
  drbd_generic_make_request(mdev, (int )fault_type, e->private_bio);
#line 2084
  maybe_kick_lo(mdev);
#line 2086
  return (1);
  out_free_e: 
#line 2089
  kfree((void const   *)di);
#line 2090
  put_ldev(mdev);
#line 2091
  drbd_free_ee(mdev, e);
#line 2092
  return (0);
}
}
#line 2095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2097
  rv = -100;
#line 2100
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2101
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2103
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2104
  ch_self = mdev->comm_bm_set;
#line 2106
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2110
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2110
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2110
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2111
  goto ldv_42798;
  case 0: ;
#line 2113
  goto ldv_42798;
  case 1: ;
#line 2115
  if (self == 0 && peer == 1) {
#line 2116
    rv = -1;
#line 2117
    goto ldv_42798;
  } else {

  }
#line 2119
  if (self == 1 && peer == 0) {
#line 2120
    rv = 1;
#line 2121
    goto ldv_42798;
  } else {

  }
  case 2: ;
#line 2125
  if (self == 0 && peer == 1) {
#line 2126
    rv = 1;
#line 2127
    goto ldv_42798;
  } else {

  }
#line 2129
  if (self == 1 && peer == 0) {
#line 2130
    rv = -1;
#line 2131
    goto ldv_42798;
  } else {

  }
#line 2134
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2134
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2134
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2137
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2138
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2138
    rv = tmp___3 != 0 ? -1 : 1;
#line 2140
    goto ldv_42798;
  } else {
#line 2142
    if (ch_peer == 0UL) {
#line 2142
      rv = 1;
#line 2142
      goto ldv_42798;
    } else {

    }
#line 2143
    if (ch_self == 0UL) {
#line 2143
      rv = -1;
#line 2143
      goto ldv_42798;
    } else {

    }
  }
#line 2145
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2146
    goto ldv_42798;
  } else {

  }
  case 4: ;
#line 2148
  if (ch_self < ch_peer) {
#line 2149
    rv = -1;
  } else
#line 2150
  if (ch_self > ch_peer) {
#line 2151
    rv = 1;
  } else {
#line 2154
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2154
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2156
  goto ldv_42798;
  case 5: 
#line 2158
  rv = -1;
#line 2159
  goto ldv_42798;
  case 6: 
#line 2161
  rv = 1;
  }
  ldv_42798: ;
#line 2164
  return (rv);
}
}
#line 2167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2169
  rv = -100;
#line 2171
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2172
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2174
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2180
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2180
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2180
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2181
  goto ldv_42818;
  case 0: ;
#line 2183
  goto ldv_42818;
  case 7: 
#line 2185
  hg = drbd_asb_recover_0p(mdev);
#line 2186
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 2187
    rv = hg;
  } else {

  }
#line 2188
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2189
    rv = hg;
  } else {

  }
#line 2190
  goto ldv_42818;
  case 10: 
#line 2192
  rv = drbd_asb_recover_0p(mdev);
#line 2193
  goto ldv_42818;
  case 8: ;
#line 2195
  return ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U ? 1 : -1);
  case 9: 
#line 2197
  hg = drbd_asb_recover_0p(mdev);
#line 2198
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2199
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2203
    val.i = 0U;
#line 2203
    val.ldv_32691.role = 2U;
#line 2203
    mask.i = 0U;
#line 2203
    mask.ldv_32691.role = 3U;
#line 2203
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2204
    if (self != 1) {
#line 2205
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2207
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2207
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2207
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2208
      rv = hg;
    }
  } else {
#line 2211
    rv = hg;
  }
  }
  ldv_42818: ;
#line 2214
  return (rv);
}
}
#line 2217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2219
  rv = -100;
#line 2221
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2222
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2224
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2232
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2232
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2232
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2233
  goto ldv_42842;
  case 10: 
#line 2235
  rv = drbd_asb_recover_0p(mdev);
#line 2236
  goto ldv_42842;
  case 0: ;
#line 2238
  goto ldv_42842;
  case 9: 
#line 2240
  hg = drbd_asb_recover_0p(mdev);
#line 2241
  if (hg == -1) {
#line 2245
    val.i = 0U;
#line 2245
    val.ldv_32691.role = 2U;
#line 2245
    mask.i = 0U;
#line 2245
    mask.ldv_32691.role = 3U;
#line 2245
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2246
    if (self != 1) {
#line 2247
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2249
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2249
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2249
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2250
      rv = hg;
    }
  } else {
#line 2253
    rv = hg;
  }
  }
  ldv_42842: ;
#line 2256
  return (rv);
}
}
#line 2259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2262
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2263
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2263
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2263
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2264
    return;
  } else {

  }
#line 2266
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2266
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2266
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2267
  return;
}
}
#line 2286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2291
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2292
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2294
  *rule_nr = 10;
#line 2295
  if (self == 4ULL && peer == 4ULL) {
#line 2296
    return (0);
  } else {

  }
#line 2298
  *rule_nr = 20;
#line 2299
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2301
    return (-2);
  } else {

  }
#line 2303
  *rule_nr = 30;
#line 2304
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2306
    return (2);
  } else {

  }
#line 2308
  if (self == peer) {
#line 2311
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2313
      if (mdev->agreed_pro_version <= 90) {
#line 2314
        return (-1001);
      } else {

      }
#line 2316
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2318
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2318
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2318
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2319
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2321
        if ((int )mdev->state.ldv_32691.disk > 2) {
#line 2321
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2321
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2321
          tmp___2 = 0ULL;
        }
#line 2321
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2323
        *rule_nr = 34;
      } else {
#line 2325
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2325
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2325
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2326
        *rule_nr = 36;
      }
#line 2329
      return (1);
    } else {

    }
#line 2332
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2334
      if (mdev->agreed_pro_version <= 90) {
#line 2335
        return (-1001);
      } else {

      }
#line 2337
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2339
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2339
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2339
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2341
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2342
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2343
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2345
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2346
        *rule_nr = 35;
      } else {
#line 2348
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2348
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2348
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2349
        *rule_nr = 37;
      }
#line 2352
      return (-1);
    } else {

    }
#line 2356
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2356
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2360
    *rule_nr = 40;
#line 2362
    switch (rct) {
    case 0: ;
#line 2363
    return (0);
    case 1: ;
#line 2364
    return (1);
    case 2: ;
#line 2365
    return (-1);
    case 3: 
#line 2367
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2368
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2372
  *rule_nr = 50;
#line 2373
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2374
  if (self == peer) {
#line 2375
    return (-1);
  } else {

  }
#line 2377
  *rule_nr = 51;
#line 2378
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2379
  if (self == peer) {
#line 2380
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2381
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2382
    if (self == peer) {
#line 2386
      if (mdev->agreed_pro_version <= 90) {
#line 2387
        return (-1001);
      } else {

      }
#line 2389
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2390
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2391
      return (-1);
    } else {

    }
  } else {

  }
#line 2395
  *rule_nr = 60;
#line 2396
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2397
  i = 2;
#line 2397
  goto ldv_42872;
  ldv_42871: 
#line 2398
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2399
  if (self == peer) {
#line 2400
    return (-2);
  } else {

  }
#line 2397
  i = i + 1;
  ldv_42872: ;
#line 2397
  if (i <= 3) {
#line 2398
    goto ldv_42871;
  } else {

  }
#line 2403
  *rule_nr = 70;
#line 2404
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2405
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2406
  if (self == peer) {
#line 2407
    return (1);
  } else {

  }
#line 2409
  *rule_nr = 71;
#line 2410
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2411
  if (self == peer) {
#line 2412
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2413
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2414
    if (self == peer) {
#line 2418
      if (mdev->agreed_pro_version <= 90) {
#line 2419
        return (-1001);
      } else {

      }
#line 2421
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2422
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2424
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2424
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2424
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2426
      if ((int )mdev->state.ldv_32691.disk > 2) {
#line 2426
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2426
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2426
        tmp___13 = 0ULL;
      }
#line 2426
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2429
      return (1);
    } else {

    }
  } else {

  }
#line 2434
  *rule_nr = 80;
#line 2435
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2436
  i = 2;
#line 2436
  goto ldv_42875;
  ldv_42874: 
#line 2437
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2438
  if (self == peer) {
#line 2439
    return (2);
  } else {

  }
#line 2436
  i = i + 1;
  ldv_42875: ;
#line 2436
  if (i <= 3) {
#line 2437
    goto ldv_42874;
  } else {

  }
#line 2442
  *rule_nr = 90;
#line 2443
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2444
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2445
  if (self == peer && self != 0ULL) {
#line 2446
    return (100);
  } else {

  }
#line 2448
  *rule_nr = 100;
#line 2449
  i = 2;
#line 2449
  goto ldv_42881;
  ldv_42880: 
#line 2450
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2451
  j = 2;
#line 2451
  goto ldv_42878;
  ldv_42877: 
#line 2452
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2453
  if (self == peer) {
#line 2454
    return (-100);
  } else {

  }
#line 2451
  j = j + 1;
  ldv_42878: ;
#line 2451
  if (j <= 3) {
#line 2452
    goto ldv_42877;
  } else {

  }
#line 2449
  i = i + 1;
  ldv_42881: ;
#line 2449
  if (i <= 3) {
#line 2450
    goto ldv_42880;
  } else {

  }

#line 2458
  return (-1000);
}
}
#line 2464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___1 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  long __x___2 ;
  unsigned long tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  unsigned long tmp___30 ;

  {
#line 2468
  rv = C_MASK;
#line 2471
  mydisk = (enum drbd_disk_state )mdev->state.ldv_32691.disk;
#line 2472
  if ((unsigned int )mydisk == 3U) {
#line 2473
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_32691.disk;
  } else {

  }
#line 2475
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2475
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2475
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2476
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2477
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2480
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2482
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2482
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2482
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2484
  if (hg == -1000) {
#line 2485
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2485
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2485
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2486
    return (C_MASK);
  } else {

  }
#line 2488
  if (hg == -1001) {
#line 2489
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2489
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2489
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2490
    return (C_MASK);
  } else {

  }
#line 2493
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2495
    if (hg == -100) {
#line 2495
      tmp___7 = 1;
    } else {
#line 2495
      __x = (long )hg;
#line 2495
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2495
        tmp___7 = 1;
      } else {
#line 2495
        tmp___7 = 0;
      }
    }
#line 2495
    f = tmp___7;
#line 2496
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2497
    if (f != 0) {
#line 2498
      hg = hg * 2;
    } else {

    }
#line 2499
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2503
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2504
    pcount = ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2506
    forced = hg == -100;
#line 2508
    switch (pcount) {
    case 0: 
#line 2510
    hg = drbd_asb_recover_0p(mdev);
#line 2511
    goto ldv_42898;
    case 1: 
#line 2513
    hg = drbd_asb_recover_1p(mdev);
#line 2514
    goto ldv_42898;
    case 2: 
#line 2516
    hg = drbd_asb_recover_2p(mdev);
#line 2517
    goto ldv_42898;
    }
    ldv_42898: 
#line 2519
    __x___0 = (long )hg;
#line 2519
    if ((__x___0 < 0L ? - __x___0 : __x___0) <= 99L) {
#line 2520
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2520
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2520
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2523
      if (forced != 0) {
#line 2524
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2524
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2524
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2526
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2531
  if (hg == -100) {
#line 2532
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2533
      hg = -1;
    } else {

    }
#line 2534
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2535
      hg = 1;
    } else {

    }
#line 2537
    __x___1 = (long )hg;
#line 2537
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2538
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2538
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2538
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2543
  if (hg == -100) {
#line 2544
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2544
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2544
    printk("<1>%s %s: Split-Brain detected, dropping connection!\n", tmp___17, tmp___16);
#line 2545
    drbd_khelper(mdev, (char *)"split-brain");
#line 2546
    return (C_MASK);
  } else {

  }
#line 2549
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2550
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2550
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2550
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2551
    return (C_MASK);
  } else {

  }
#line 2554
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && (int )mdev->state.ldv_32691.disk > 6) {
#line 2556
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2558
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2561
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2561
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2561
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2562
    return (C_MASK);
    case 10: 
#line 2564
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2564
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2564
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2569
  __x___2 = (long )hg;
#line 2569
  if ((__x___2 < 0L ? - __x___2 : __x___2) > 1L) {
#line 2570
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2570
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2570
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___25, tmp___24);
#line 2571
    tmp___26 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2571
    if (tmp___26 != 0) {
#line 2572
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2575
  if (hg > 0) {
#line 2576
    rv = C_WF_BITMAP_S;
  } else
#line 2577
  if (hg < 0) {
#line 2578
    rv = C_WF_BITMAP_T;
  } else {
#line 2580
    rv = C_CONNECTED;
#line 2581
    tmp___30 = drbd_bm_total_weight(mdev);
#line 2581
    if (tmp___30 != 0UL) {
#line 2582
      tmp___27 = drbd_bm_total_weight(mdev);
#line 2582
      tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2582
      tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2582
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___29, tmp___28,
             tmp___27);
    } else {

    }
  }
#line 2587
  return (rv);
}
}
#line 2591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2594
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2596
    return (0);
  } else {

  }
#line 2599
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2601
    return (1);
  } else {

  }
#line 2604
  if ((unsigned int )peer == (unsigned int )self) {
#line 2605
    return (0);
  } else {

  }
#line 2608
  return (1);
}
}
#line 2611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2613
  p = (struct p_protocol *)h;
#line 2617
  p_integrity_alg[0] = '\000';
#line 2617
  tmp = 1U;
#line 2617
  while (1) {
#line 2617
    if (tmp >= 64U) {
#line 2617
      break;
    } else {

    }
#line 2617
    p_integrity_alg[tmp] = (char)0;
#line 2617
    tmp = tmp + 1U;
  }
#line 2619
  header_size = 24;
#line 2620
  data_size = (int )h->length - header_size;
#line 2622
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2622
  if (tmp___0 != header_size) {
#line 2623
    return (0);
  } else {

  }
#line 2625
  tmp___1 = __fswab32(p->protocol);
#line 2625
  p_proto = (int )tmp___1;
#line 2626
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2626
  p_after_sb_0p = (int )tmp___2;
#line 2627
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2627
  p_after_sb_1p = (int )tmp___3;
#line 2628
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2628
  p_after_sb_2p = (int )tmp___4;
#line 2629
  tmp___5 = __fswab32(p->want_lose);
#line 2629
  p_want_lose = (int )tmp___5;
#line 2630
  tmp___6 = __fswab32(p->two_primaries);
#line 2630
  p_two_primaries = (int )tmp___6;
#line 2632
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2633
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2633
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2633
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2634
    goto disconnect;
  } else {

  }
#line 2637
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2637
  if (tmp___11 != 0) {
#line 2638
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2638
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2638
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2639
    goto disconnect;
  } else {

  }
#line 2642
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2642
  if (tmp___14 != 0) {
#line 2643
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2643
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2643
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2644
    goto disconnect;
  } else {

  }
#line 2647
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2647
  if (tmp___17 != 0) {
#line 2648
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2649
    goto disconnect;
  } else {

  }
#line 2652
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2653
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2654
    goto disconnect;
  } else {

  }
#line 2657
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2658
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2658
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2658
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2659
    goto disconnect;
  } else {

  }
#line 2662
  if (mdev->agreed_pro_version > 86) {
#line 2663
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2665
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2665
    if (tmp___22 != data_size) {
#line 2666
      return (0);
    } else {

    }
#line 2668
    p_integrity_alg[63] = 0;
#line 2669
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2669
    if (tmp___25 != 0) {
#line 2670
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2670
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2670
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2671
      goto disconnect;
    } else {

    }
#line 2673
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2673
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2673
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2677
  return (1);
  disconnect: 
#line 2680
  val.i = 0U;
#line 2680
  val.ldv_32691.conn = 1U;
#line 2680
  mask.i = 0U;
#line 2680
  mask.ldv_32691.conn = 31U;
#line 2680
  drbd_force_state(mdev, mask, val);
#line 2681
  return (0);
}
}
#line 2689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2694
  if ((int )((signed char )*alg) == 0) {
#line 2695
    return (0);
  } else {

  }
#line 2697
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2698
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2698
  if (tmp___2 != 0L) {
#line 2699
    tmp = PTR_ERR((void const   *)tfm);
#line 2699
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2699
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2699
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2701
    return (tfm);
  } else {

  }
#line 2703
  tmp___6 = crypto_hash_tfm(tfm);
#line 2703
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2703
  if (tmp___7 == 0) {
#line 2704
    crypto_free_hash(tfm);
#line 2705
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2705
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2705
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2706
    tmp___5 = ERR_PTR(-22L);
#line 2706
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2708
  return (tfm);
}
}
#line 2711 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2713
  ok = 1;
#line 2714
  p = (struct p_rs_param_89 *)h;
#line 2716
  verify_tfm = 0;
#line 2717
  csums_tfm = 0;
#line 2718
  apv = mdev->agreed_pro_version;
#line 2720
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2725
  if ((unsigned int )h->length > exp_max_sz) {
#line 2726
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2728
    return (0);
  } else {

  }
#line 2731
  if (apv <= 88) {
#line 2732
    header_size = 4U;
#line 2733
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2735
    header_size = 132U;
#line 2736
    data_size = (unsigned int )h->length - header_size;
#line 2737
    if (data_size != 0U) {
#line 2737
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2737);
    } else {

    }
  }
#line 2741
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2743
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2743
  if ((unsigned int )tmp___3 != header_size) {
#line 2744
    return (0);
  } else {

  }
#line 2746
  tmp___4 = __fswab32(p->rate);
#line 2746
  mdev->sync_conf.rate = (int )tmp___4;
#line 2748
  if (apv > 87) {
#line 2749
    if (apv == 88) {
#line 2750
      if (data_size > 64U) {
#line 2751
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2751
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2751
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2754
        return (0);
      } else {

      }
#line 2757
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2757
      if ((unsigned int )tmp___7 != data_size) {
#line 2758
        return (0);
      } else {

      }
#line 2762
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2762
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2762
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2762
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2762);
      } else {

      }
#line 2763
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2768
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2768
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2768
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2768
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2768);
      } else {

      }
#line 2769
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2769
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2769
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2769
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2769);
      } else {

      }
#line 2770
      p->verify_alg[63] = 0;
#line 2771
      p->csums_alg[63] = 0;
    }
#line 2774
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2774
    if (tmp___17 != 0) {
#line 2775
      if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2776
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2776
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2776
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2778
        goto disconnect;
      } else {

      }
#line 2780
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2782
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2782
      if (tmp___16 != 0L) {
#line 2783
        verify_tfm = 0;
#line 2784
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2788
    if (apv > 88) {
#line 2788
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2788
      if (tmp___21 != 0) {
#line 2789
        if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2790
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2790
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2790
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2792
          goto disconnect;
        } else {

        }
#line 2794
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2796
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2796
        if (tmp___20 != 0L) {
#line 2797
          csums_tfm = 0;
#line 2798
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2803
    spin_lock(& mdev->peer_seq_lock);
#line 2805
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2806
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2807
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2807
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2808
      crypto_free_hash(mdev->verify_tfm);
#line 2809
      mdev->verify_tfm = verify_tfm;
#line 2810
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2810
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2810
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2812
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2813
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2814
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2814
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2815
      crypto_free_hash(mdev->csums_tfm);
#line 2816
      mdev->csums_tfm = csums_tfm;
#line 2817
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2817
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2817
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2819
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2822
  return (ok);
  disconnect: 
#line 2826
  crypto_free_hash(csums_tfm);
#line 2828
  crypto_free_hash(verify_tfm);
#line 2829
  val.i = 0U;
#line 2829
  val.ldv_32691.conn = 1U;
#line 2829
  mask.i = 0U;
#line 2829
  mask.ldv_32691.conn = 31U;
#line 2829
  drbd_force_state(mdev, mask, val);
#line 2830
  return (0);
}
}
#line 2833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2835
  return;
}
}
#line 2840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2844
  if (a == 0UL || b == 0UL) {
#line 2845
    return;
  } else {

  }
#line 2846
  d = a > b ? a - b : b - a;
#line 2847
  if (a >> 3 < d || b >> 3 < d) {
#line 2848
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2848
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2848
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2849
  return;
}
}
#line 2852 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum drbd_conns nconn ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  union drbd_state val___3 ;
  union drbd_state mask___3 ;
  int tmp___16 ;
  int tmp___17 ;
  sector_t tmp___18 ;
  __u32 tmp___19 ;
  unsigned int tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  __u64 tmp___23 ;
  sector_t tmp___24 ;
  int tmp___25 ;

  {
#line 2854
  p = (struct p_sizes *)h;
#line 2855
  dd = 0;
#line 2858
  ldsc = 0;
#line 2861
  _b = (unsigned int )h->length != 32U;
#line 2861
  if (_b != 0) {
#line 2861
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2861
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2861
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           2861);
  } else {

  }
#line 2861
  if (_b != 0) {
#line 2861
    return (0);
  } else {

  }
#line 2862
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2862
  if (tmp___1 != (int )h->length) {
#line 2863
    return (0);
  } else {

  }
#line 2865
  tmp___2 = __fswab64(p->d_size);
#line 2865
  p_size = (sector_t )tmp___2;
#line 2866
  tmp___3 = __fswab64(p->u_size);
#line 2866
  p_usize = (sector_t )tmp___3;
#line 2868
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 2869
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2869
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2869
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 2870
    val.i = 0U;
#line 2870
    val.ldv_32691.conn = 1U;
#line 2870
    mask.i = 0U;
#line 2870
    mask.ldv_32691.conn = 31U;
#line 2870
    drbd_force_state(mdev, mask, val);
#line 2871
    return (0);
  } else {

  }
#line 2876
  mdev->p_size = p_size;
#line 2879
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2879
  if (tmp___14 != 0) {
#line 2880
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 2880
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 2882
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2887
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2888
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2888
        if (p_usize == 0UL) {
#line 2888
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2888
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2888
          _min2 = p_usize;
#line 2888
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2888
        p_usize = tmp___7;
      } else {
#line 2888
        p_usize = p_usize;
      }
    } else {

    }
#line 2891
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2893
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2894
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2895
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2895
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2895
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2901
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev);
#line 2901
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 2901
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_32691.disk > 4) && (int )mdev->state.ldv_32691.conn <= 9) {
#line 2905
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2905
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2905
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 2906
      val___0.i = 0U;
#line 2906
      val___0.ldv_32691.conn = 1U;
#line 2906
      mask___0.i = 0U;
#line 2906
      mask___0.ldv_32691.conn = 31U;
#line 2906
      drbd_force_state(mdev, mask___0, val___0);
#line 2907
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2908
      put_ldev(mdev);
#line 2909
      return (0);
    } else {

    }
#line 2911
    put_ldev(mdev);
  } else {

  }
#line 2915
  tmp___15 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2915
  if (tmp___15 != 0) {
#line 2916
    dd = drbd_determin_dev_size(mdev);
#line 2917
    put_ldev(mdev);
#line 2918
    if ((int )dd == -1) {
#line 2919
      return (0);
    } else {

    }
#line 2920
    drbd_md_sync(mdev);
  } else {
#line 2923
    drbd_set_my_capacity(mdev, p_size);
  }
#line 2926
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )mdev->state.ldv_32691.conn <= 10) {
#line 2926
    tmp___17 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2926
    if (tmp___17 != 0) {
#line 2927
      nconn = drbd_sync_handshake(mdev, (enum drbd_role )mdev->state.ldv_32691.peer,
                                  (enum drbd_disk_state )mdev->state.ldv_32691.pdsk);
#line 2929
      put_ldev(mdev);
#line 2931
      if ((unsigned int )nconn == 31U) {
#line 2932
        val___1.i = 0U;
#line 2932
        val___1.ldv_32691.conn = 1U;
#line 2932
        mask___1.i = 0U;
#line 2932
        mask___1.ldv_32691.conn = 31U;
#line 2932
        drbd_force_state(mdev, mask___1, val___1);
#line 2933
        return (0);
      } else {

      }
#line 2936
      val___3.i = 0U;
#line 2936
      val___3.ldv_32691.conn = (unsigned char )nconn;
#line 2936
      mask___3.i = 0U;
#line 2936
      mask___3.ldv_32691.conn = 31U;
#line 2936
      tmp___16 = drbd_request_state(mdev, mask___3, val___3);
#line 2936
      if (tmp___16 <= 0) {
#line 2937
        val___2.i = 0U;
#line 2937
        val___2.ldv_32691.conn = 1U;
#line 2937
        mask___2.i = 0U;
#line 2937
        mask___2.ldv_32691.conn = 31U;
#line 2937
        drbd_force_state(mdev, mask___2, val___2);
#line 2938
        return (0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2942
  tmp___22 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2942
  if (tmp___22 != 0) {
#line 2943
    tmp___18 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2943
    if ((mdev->ldev)->known_size != tmp___18) {
#line 2944
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2945
      ldsc = 1;
    } else {

    }
#line 2948
    tmp___19 = __fswab32(p->max_segment_size);
#line 2948
    max_seg_s = tmp___19;
#line 2949
    tmp___20 = queue_max_segment_size(mdev->rq_queue);
#line 2949
    if (tmp___20 != max_seg_s) {
#line 2950
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 2952
    tmp___21 = __fswab32(p->queue_order_type);
#line 2952
    drbd_setup_order_type(mdev, (int )tmp___21);
#line 2953
    put_ldev(mdev);
  } else {

  }
#line 2956
  if ((int )mdev->state.ldv_32691.conn > 9) {
#line 2957
    tmp___23 = __fswab64(p->c_size);
#line 2957
    tmp___24 = drbd_get_capacity(mdev->this_bdev);
#line 2957
    if (tmp___23 != (unsigned long long )tmp___24 || ldsc != 0) {
#line 2961
      drbd_send_sizes(mdev, 0);
    } else {

    }
#line 2963
    tmp___25 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2963
    if (tmp___25 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 902UL) == 160U)) {
#line 2965
      if ((int )mdev->state.ldv_32691.pdsk > 3 && (int )mdev->state.ldv_32691.disk > 3) {
#line 2967
        resync_after_online_grow(mdev);
      } else {
#line 2969
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 2973
  return (1);
}
}
#line 2976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 2978
  p = (struct p_uuids *)h;
#line 2982
  _b = (unsigned int )h->length != 48U;
#line 2982
  if (_b != 0) {
#line 2982
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2982
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2982
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           2982);
  } else {

  }
#line 2982
  if (_b != 0) {
#line 2982
    return (0);
  } else {

  }
#line 2983
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2983
  if (tmp___1 != (int )h->length) {
#line 2984
    return (0);
  } else {

  }
#line 2986
  tmp___2 = kmalloc___1(48UL, 16U);
#line 2986
  p_uuid = (u64 *)tmp___2;
#line 2988
  i = 0;
#line 2988
  goto ldv_43017;
  ldv_43016: 
#line 2989
  tmp___3 = __fswab64(p->uuid[i]);
#line 2989
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 2988
  i = i + 1;
  ldv_43017: ;
#line 2988
  if (i <= 5) {
#line 2989
    goto ldv_43016;
  } else {

  }
#line 2991
  kfree((void const   *)mdev->p_uuid);
#line 2992
  mdev->p_uuid = p_uuid;
#line 2994
  if ((((int )mdev->state.ldv_32691.conn <= 9 && (int )mdev->state.ldv_32691.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 2998
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2998
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2998
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 3000
    val.i = 0U;
#line 3000
    val.ldv_32691.conn = 1U;
#line 3000
    mask.i = 0U;
#line 3000
    mask.ldv_32691.conn = 31U;
#line 3000
    drbd_force_state(mdev, mask, val);
#line 3001
    return (0);
  } else {

  }
#line 3004
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3004
  if (tmp___8 != 0) {
#line 3005
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3010
    if (skip_initial_sync != 0) {
#line 3011
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3011
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3011
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 3012
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3014
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3015
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3016
      __ns.i = mdev->state.i;
#line 3016
      __ns.ldv_32691.disk = 8U;
#line 3016
      __ns.ldv_32691.pdsk = 8U;
#line 3016
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3018
      drbd_md_sync(mdev);
    } else {

    }
#line 3020
    put_ldev(mdev);
  } else {

  }
#line 3027
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3027
  if (tmp___9 == 0) {
#line 3027
    goto ldv_43026;
  } else {

  }
#line 3027
  tmp___10 = get_current();
#line 3027
  __wait.flags = 0U;
#line 3027
  __wait.private = (void *)tmp___10;
#line 3027
  __wait.func = & autoremove_wake_function;
#line 3027
  __wait.task_list.next = & __wait.task_list;
#line 3027
  __wait.task_list.prev = & __wait.task_list;
  ldv_43029: 
#line 3027
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3027
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3027
  if (tmp___11 == 0) {
#line 3027
    goto ldv_43028;
  } else {

  }
#line 3027
  schedule();
#line 3027
  goto ldv_43029;
  ldv_43028: 
#line 3027
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43026: ;
#line 3028
  if ((int )mdev->state.ldv_32691.conn > 9 && (int )mdev->state.ldv_32691.disk <= 3) {
#line 3029
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3031
  return (1);
}
}
#line 3038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3042
  c_tab[0] = 0;
#line 3042
  c_tab[1] = C_TEAR_DOWN;
#line 3042
  c_tab[2] = 0;
#line 3042
  c_tab[3] = 0;
#line 3042
  c_tab[4] = 0;
#line 3042
  c_tab[5] = 0;
#line 3042
  c_tab[6] = 0;
#line 3042
  c_tab[7] = 0;
#line 3042
  c_tab[8] = 0;
#line 3042
  c_tab[9] = 0;
#line 3042
  c_tab[10] = C_CONNECTED;
#line 3042
  c_tab[11] = C_STARTING_SYNC_T;
#line 3042
  c_tab[12] = C_STARTING_SYNC_S;
#line 3042
  c_tab[13] = 0;
#line 3042
  c_tab[14] = 0;
#line 3042
  c_tab[15] = 0;
#line 3042
  c_tab[16] = 0;
#line 3042
  c_tab[17] = 0;
#line 3042
  c_tab[18] = C_VERIFY_T;
#line 3042
  c_tab[19] = 0;
#line 3042
  c_tab[20] = 0;
#line 3042
  c_tab[21] = 0;
#line 3042
  c_tab[22] = 0;
#line 3042
  c_tab[23] = 0;
#line 3042
  c_tab[24] = 0;
#line 3042
  c_tab[25] = 0;
#line 3042
  c_tab[26] = 0;
#line 3042
  c_tab[27] = 0;
#line 3042
  c_tab[28] = 0;
#line 3042
  c_tab[29] = 0;
#line 3042
  c_tab[30] = 0;
#line 3042
  c_tab[31] = C_MASK;
#line 3052
  ms.i = ps.i;
#line 3054
  ms.ldv_32691.conn = (unsigned char )c_tab[(int )ps.ldv_32691.conn];
#line 3055
  ms.ldv_32691.peer = ps.ldv_32691.role;
#line 3056
  ms.ldv_32691.role = ps.ldv_32691.peer;
#line 3057
  ms.ldv_32691.pdsk = ps.ldv_32691.disk;
#line 3058
  ms.ldv_32691.disk = ps.ldv_32691.pdsk;
#line 3059
  ms.ldv_32691.peer_isp = (unsigned char )((int )ps.ldv_32691.aftr_isp | (int )ps.ldv_32691.user_isp);
#line 3061
  return (ms);
}
}
#line 3064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3066
  p = (struct p_req_state *)h;
#line 3070
  _b = (unsigned int )h->length != 8U;
#line 3070
  if (_b != 0) {
#line 3070
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3070
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3070
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3070);
  } else {

  }
#line 3070
  if (_b != 0) {
#line 3070
    return (0);
  } else {

  }
#line 3071
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3071
  if (tmp___1 != (int )h->length) {
#line 3072
    return (0);
  } else {

  }
#line 3074
  tmp___2 = __fswab32(p->mask);
#line 3074
  mask.i = tmp___2;
#line 3075
  tmp___3 = __fswab32(p->val);
#line 3075
  val.i = tmp___3;
#line 3077
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3077
  if (tmp___4 != 0) {
#line 3077
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3077
    if (tmp___5 != 0) {
#line 3079
      drbd_send_sr_reply(mdev, -19);
#line 3080
      return (1);
    } else {

    }
  } else {

  }
#line 3083
  mask = convert_state(mask);
#line 3084
  val = convert_state(val);
#line 3086
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3088
  drbd_send_sr_reply(mdev, rv);
#line 3089
  drbd_md_sync(mdev);
#line 3091
  return (1);
}
}
#line 3094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___11 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3096
  p = (struct p_state *)h;
#line 3102
  _b = (unsigned int )h->length != 4U;
#line 3102
  if (_b != 0) {
#line 3102
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3102
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3102
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3102);
  } else {

  }
#line 3102
  if (_b != 0) {
#line 3103
    return (0);
  } else {

  }
#line 3105
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3105
  if (tmp___1 != (int )h->length) {
#line 3106
    return (0);
  } else {

  }
#line 3108
  tmp___2 = __fswab32(p->state);
#line 3108
  peer_state.i = tmp___2;
#line 3110
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_32691.disk;
#line 3111
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3112
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3113
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3113
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3113
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3113
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3116
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3118
  nconn = (enum drbd_conns )mdev->state.ldv_32691.conn;
#line 3118
  oconn = nconn;
#line 3119
  spin_unlock_irq(& mdev->req_lock);
#line 3121
  if ((unsigned int )nconn == 9U) {
#line 3122
    nconn = C_CONNECTED;
  } else {

  }
#line 3124
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_32691.disk > 2) {
#line 3124
    tmp___11 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3124
    if (tmp___11 != 0) {
#line 3129
      cr = (unsigned int )oconn <= 9U;
#line 3132
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 6U)) | cr;
#line 3137
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3137
      cr = tmp___6 | cr;
#line 3140
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_32691.conn > 10 && (int )peer_state.ldv_32691.conn <= 14)) | cr;
#line 3144
      if (cr != 0) {
#line 3145
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_32691.role,
                                    real_peer_disk);
      } else {

      }
#line 3147
      put_ldev(mdev);
#line 3148
      if ((unsigned int )nconn == 31U) {
#line 3149
        if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 6U) {
#line 3150
          val.i = 0U;
#line 3150
          val.ldv_32691.disk = 0U;
#line 3150
          mask.i = 0U;
#line 3150
          mask.ldv_32691.disk = 15U;
#line 3150
          drbd_force_state(mdev, mask, val);
#line 3151
          nconn = C_CONNECTED;
        } else
#line 3152
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3153
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3153
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3153
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3154
          peer_state.ldv_32691.disk = 0U;
        } else {
#line 3156
          if ((unsigned int )oconn != 9U) {
#line 3156
            tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3156
            tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3156
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___10,
                   tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3156);
          } else {

          }
#line 3157
          val___0.i = 0U;
#line 3157
          val___0.ldv_32691.conn = 1U;
#line 3157
          mask___0.i = 0U;
#line 3157
          mask___0.ldv_32691.conn = 31U;
#line 3157
          drbd_force_state(mdev, mask___0, val___0);
#line 3158
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3163
  spin_lock_irq(& mdev->req_lock);
#line 3164
  if ((unsigned int )mdev->state.ldv_32691.conn != (unsigned int )oconn) {
#line 3165
    goto retry;
  } else {

  }
#line 3166
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3167
  ns.i = mdev->state.i;
#line 3168
  ns.ldv_32691.conn = (unsigned char )nconn;
#line 3169
  ns.ldv_32691.peer = peer_state.ldv_32691.role;
#line 3170
  ns.ldv_32691.pdsk = (unsigned char )real_peer_disk;
#line 3171
  ns.ldv_32691.peer_isp = (unsigned char )((int )peer_state.ldv_32691.aftr_isp | (int )peer_state.ldv_32691.user_isp);
#line 3172
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3173
    ns.ldv_32691.disk = mdev->new_state_tmp.ldv_32691.disk;
  } else {

  }
#line 3175
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3176
  ns = mdev->state;
#line 3177
  spin_unlock_irq(& mdev->req_lock);
#line 3179
  if (rv <= 0) {
#line 3180
    val___1.i = 0U;
#line 3180
    val___1.ldv_32691.conn = 1U;
#line 3180
    mask___1.i = 0U;
#line 3180
    mask___1.ldv_32691.conn = 31U;
#line 3180
    drbd_force_state(mdev, mask___1, val___1);
#line 3181
    return (0);
  } else {

  }
#line 3184
  if ((unsigned int )oconn > 9U) {
#line 3185
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_32691.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3190
      drbd_send_uuids(mdev);
#line 3191
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3195
  (mdev->net_conf)->want_lose = 0U;
#line 3197
  drbd_md_sync(mdev);
#line 3199
  return (1);
}
}
#line 3202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3204
  p = (struct p_rs_uuid *)h;
#line 3206
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_32691.conn <= 9) || (int )mdev->state.ldv_32691.disk <= 2) {
#line 3206
    goto ldv_43079;
  } else {

  }
#line 3206
  tmp = get_current();
#line 3206
  __wait.flags = 0U;
#line 3206
  __wait.private = (void *)tmp;
#line 3206
  __wait.func = & autoremove_wake_function;
#line 3206
  __wait.task_list.next = & __wait.task_list;
#line 3206
  __wait.task_list.prev = & __wait.task_list;
  ldv_43082: 
#line 3206
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3206
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_32691.conn <= 9) || (int )mdev->state.ldv_32691.disk <= 2) {
#line 3206
    goto ldv_43081;
  } else {

  }
#line 3206
  schedule();
#line 3206
  goto ldv_43082;
  ldv_43081: 
#line 3206
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43079: 
#line 3213
  _b = (unsigned int )h->length != 8U;
#line 3213
  if (_b != 0) {
#line 3213
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3213
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3213
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3213);
  } else {

  }
#line 3213
  if (_b != 0) {
#line 3213
    return (0);
  } else {

  }
#line 3214
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3214
  if (tmp___2 != (int )h->length) {
#line 3215
    return (0);
  } else {

  }
#line 3219
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3219
  if (tmp___6 != 0) {
#line 3220
    tmp___3 = __fswab64(p->uuid);
#line 3220
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3221
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3223
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3225
    put_ldev(mdev);
  } else {
#line 3227
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3227
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3227
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3229
  return (1);
}
}
#line 3235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3238
  __min1 = 511UL;
#line 3238
  __min2 = c->bm_words - c->word_offset;
#line 3238
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3239
  want = num_words * 8U;
#line 3241
  if ((unsigned int )h->length != want) {
#line 3242
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3242
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3242
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3243
    return (FAILED);
  } else {

  }
#line 3245
  if (want == 0U) {
#line 3246
    return (DONE);
  } else {

  }
#line 3247
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3247
  if ((unsigned int )tmp___1 != want) {
#line 3248
    return (FAILED);
  } else {

  }
#line 3250
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3252
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3253
  c->bit_offset = c->word_offset * 64UL;
#line 3254
  if (c->bit_offset > c->bm_bits) {
#line 3255
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3257
  return (OK);
}
}
#line 3261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3269
  s = c->bit_offset;
#line 3271
  len = (int )((unsigned int )p->head.length - 1U);
#line 3272
  tmp___0 = DCBP_get_start(p);
#line 3272
  toggle = tmp___0;
#line 3276
  tmp___1 = DCBP_get_pad_bits(p);
#line 3276
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3278
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3279
  if (bits < 0) {
#line 3280
    return (FAILED);
  } else {

  }
#line 3282
  have = bits;
#line 3282
  goto ldv_43118;
  ldv_43117: 
#line 3283
  bits = vli_decode_bits(& rl, look_ahead);
#line 3284
  if (bits <= 0) {
#line 3285
    return (FAILED);
  } else {

  }
#line 3287
  if (toggle != 0) {
#line 3288
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3289
    if (c->bm_bits <= e) {
#line 3290
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3290
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3290
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3291
      return (FAILED);
    } else {

    }
#line 3293
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3296
  if (have < bits) {
#line 3297
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3297
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3297
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3301
    return (FAILED);
  } else {

  }
#line 3303
  look_ahead = look_ahead >> bits;
#line 3304
  have = have - bits;
#line 3306
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3307
  if (bits < 0) {
#line 3308
    return (FAILED);
  } else {

  }
#line 3309
  look_ahead = (tmp << have) | look_ahead;
#line 3310
  have = have + bits;
#line 3282
  s = (unsigned long )((unsigned long long )s + rl);
#line 3282
  toggle = toggle == 0;
  ldv_43118: ;
#line 3282
  if (have > 0) {
#line 3283
    goto ldv_43117;
  } else {

  }
#line 3313
  c->bit_offset = s;
#line 3314
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3316
  return (c->bm_bits == s);
}
}
#line 3320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3324
  tmp___0 = DCBP_get_code(p);
#line 3324
  if ((unsigned int )tmp___0 == 2U) {
#line 3325
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3325
    return (tmp);
  } else {

  }
#line 3331
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3331
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3331
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3332
  val.i = 0U;
#line 3332
  val.ldv_32691.conn = 6U;
#line 3332
  mask.i = 0U;
#line 3332
  mask.ldv_32691.conn = 31U;
#line 3332
  drbd_force_state(mdev, mask, val);
#line 3333
  return (FAILED);
}
}
#line 3336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3340
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3343
  total = c->bytes[0] + c->bytes[1];
#line 3347
  if (total == 0U) {
#line 3348
    return;
  } else {

  }
#line 3351
  if (total >= plain) {
#line 3352
    return;
  } else {

  }
#line 3355
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3358
  if (r > 1000U) {
#line 3359
    r = 1000U;
  } else {

  }
#line 3361
  r = 1000U - r;
#line 3362
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3362
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3362
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3363
  return;
}
}
#line 3378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3383
  ok = 0;
#line 3385
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3385
  if (tmp == 0) {
#line 3385
    goto ldv_43145;
  } else {

  }
#line 3385
  tmp___0 = get_current();
#line 3385
  __wait.flags = 0U;
#line 3385
  __wait.private = (void *)tmp___0;
#line 3385
  __wait.func = & autoremove_wake_function;
#line 3385
  __wait.task_list.next = & __wait.task_list;
#line 3385
  __wait.task_list.prev = & __wait.task_list;
  ldv_43148: 
#line 3385
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3385
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3385
  if (tmp___1 == 0) {
#line 3385
    goto ldv_43147;
  } else {

  }
#line 3385
  schedule();
#line 3385
  goto ldv_43148;
  ldv_43147: 
#line 3385
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43145: 
#line 3387
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3391
  tmp___2 = __get_free_pages(16U, 0U);
#line 3391
  buffer = (void *)tmp___2;
#line 3392
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3393
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3393
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3393
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3394
    goto out;
  } else {

  }
#line 3397
  tmp___5 = drbd_bm_bits(mdev);
#line 3397
  tmp___6 = drbd_bm_words(mdev);
#line 3397
  __constr_expr_0.bm_bits = tmp___5;
#line 3397
  __constr_expr_0.bm_words = tmp___6;
#line 3397
  __constr_expr_0.bit_offset = 0UL;
#line 3397
  __constr_expr_0.word_offset = 0UL;
#line 3397
  __constr_expr_0.packets[0] = 0U;
#line 3397
  __constr_expr_0.packets[1] = 0U;
#line 3397
  __constr_expr_0.bytes[0] = 0U;
#line 3397
  __constr_expr_0.bytes[1] = 0U;
#line 3397
  c = __constr_expr_0;
  ldv_43157: ;
#line 3403
  if ((unsigned int )h->command == 4U) {
#line 3404
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3405
  if ((unsigned int )h->command == 36U) {
#line 3410
    if ((unsigned int )h->length > 4088U) {
#line 3411
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3411
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3411
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3412
      goto out;
    } else {

    }
#line 3415
    p = (struct p_compressed_bm *)buffer;
#line 3416
    __len = 8UL;
#line 3416
    if (__len > 63UL) {
#line 3416
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3416
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3417
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3417
    if (tmp___9 != (int )h->length) {
#line 3418
      goto out;
    } else {

    }
#line 3419
    if ((unsigned int )p->head.length <= 1U) {
#line 3420
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3420
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3420
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3421
      return (2);
    } else {

    }
#line 3423
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3425
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3425
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3425
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3426
    goto out;
  }
#line 3429
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3430
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3432
  if ((unsigned int )ret != 0U) {
#line 3433
    goto ldv_43156;
  } else {

  }
#line 3435
  tmp___14 = drbd_recv_header(mdev, h);
#line 3435
  if (tmp___14 == 0) {
#line 3436
    goto out;
  } else {

  }
#line 3437
  if ((unsigned int )ret == 0U) {
#line 3438
    goto ldv_43157;
  } else {

  }
  ldv_43156: ;
#line 3438
  if ((unsigned int )ret == 2U) {
#line 3439
    goto out;
  } else {

  }
#line 3441
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3443
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 224U) {
#line 3444
    tmp___15 = drbd_send_bitmap(mdev);
#line 3444
    ok = tmp___15 == 0;
#line 3445
    if (ok == 0) {
#line 3446
      goto out;
    } else {

    }
#line 3448
    val.i = 0U;
#line 3448
    val.ldv_32691.conn = 15U;
#line 3448
    mask.i = 0U;
#line 3448
    mask.ldv_32691.conn = 31U;
#line 3448
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3449
    if (ok != 1) {
#line 3449
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3449
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3449
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             3449);
    } else {

    }
  } else
#line 3450
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 208U) {
#line 3453
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 3453
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3453
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3453
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3457
  ok = 1;
  out: 
#line 3459
  drbd_bm_unlock(mdev);
#line 3460
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 902UL) == 208U) {
#line 3461
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3462
  free_pages((unsigned long )buffer, 0U);
#line 3463
  return (ok);
}
}
#line 3466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3472
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3472
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3472
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3475
  size = (int )h->length;
#line 3476
  goto ldv_43178;
  ldv_43177: 
#line 3477
  __min1 = size;
#line 3477
  __min2 = 128;
#line 3477
  want = __min1 < __min2 ? __min1 : __min2;
#line 3478
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3479
  _b = r <= 0;
#line 3479
  if (_b != 0) {
#line 3479
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3479
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3479
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3479);
  } else {

  }
#line 3479
  if (_b != 0) {
#line 3479
    goto ldv_43176;
  } else {

  }
#line 3480
  size = size - r;
  ldv_43178: ;
#line 3476
  if (size > 0) {
#line 3477
    goto ldv_43177;
  } else {

  }
  ldv_43176: ;
#line 3482
  return (size == 0);
}
}
#line 3485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3487
  if ((int )mdev->state.ldv_32691.disk > 3) {
#line 3488
    drbd_kick_lo(mdev);
  } else {

  }
#line 3492
  drbd_tcp_quickack(mdev->data.socket);
#line 3494
  return (1);
}
}
#line 3499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[38U]  = 
#line 3499
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0};
#line 3525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3531
  header = & mdev->data.rbuf.header;
#line 3533
  goto ldv_43208;
  ldv_43207: 
#line 3534
  drbd_thread_current_set_cpu(mdev);
#line 3535
  tmp = drbd_recv_header(mdev, header);
#line 3535
  if (tmp == 0) {
#line 3536
    val.i = 0U;
#line 3536
    val.ldv_32691.conn = 6U;
#line 3536
    mask.i = 0U;
#line 3536
    mask.ldv_32691.conn = 31U;
#line 3536
    drbd_force_state(mdev, mask, val);
#line 3537
    goto ldv_43198;
  } else {

  }
#line 3540
  if ((unsigned int )header->command <= 36U) {
#line 3541
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3542
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3544
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3545
  if ((unsigned int )header->command > 257U) {
#line 3546
    handler = & receive_skip;
  } else {
#line 3548
    handler = 0;
  }
#line 3550
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3550
  if (tmp___2 != 0L) {
#line 3551
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3553
    val___0.i = 0U;
#line 3553
    val___0.ldv_32691.conn = 6U;
#line 3553
    mask___0.i = 0U;
#line 3553
    mask___0.ldv_32691.conn = 31U;
#line 3553
    drbd_force_state(mdev, mask___0, val___0);
#line 3554
    goto ldv_43198;
  } else {

  }
#line 3556
  tmp___6 = (*handler)(mdev, header);
#line 3556
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3556
  if (tmp___7 != 0L) {
#line 3557
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3557
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3557
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3557
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3559
    val___1.i = 0U;
#line 3559
    val___1.ldv_32691.conn = 6U;
#line 3559
    mask___1.i = 0U;
#line 3559
    mask___1.ldv_32691.conn = 31U;
#line 3559
    drbd_force_state(mdev, mask___1, val___1);
#line 3560
    goto ldv_43198;
  } else {

  }
  ldv_43208: 
#line 3533
  tmp___8 = get_t_state(& mdev->receiver);
#line 3533
  if ((unsigned int )tmp___8 == 1U) {
#line 3534
    goto ldv_43207;
  } else {

  }
  ldv_43198: ;
#line 3538
  return;
}
}
#line 3565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3576
  spin_lock_irq(& mdev->req_lock);
#line 3577
  i = 0;
#line 3577
  goto ldv_43225;
  ldv_43224: 
#line 3578
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3579
  pos = slot->first;
#line 3579
  goto ldv_43222;
  ldv_43221: 
#line 3585
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3585
  if (tmp___2 == 0) {
#line 3585
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3585
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3585
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3585);
  } else {

  }
#line 3588
  _req_mod(req, connection_lost_while_pending);
#line 3579
  pos = tmp;
  ldv_43222: ;
#line 3579
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3579
    tmp = pos->next;
#line 3579
    if (1 != 0) {
#line 3579
      __mptr = (struct hlist_node  const  *)pos;
#line 3579
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3579
      if (1 != 0) {
#line 3580
        goto ldv_43221;
      } else {
#line 3582
        goto ldv_43223;
      }
    } else {
#line 3582
      goto ldv_43223;
    }
  } else {

  }
  ldv_43223: 
#line 3577
  i = i + 1;
  ldv_43225: ;
#line 3577
  if (i <= 14) {
#line 3578
    goto ldv_43224;
  } else {

  }
#line 3591
  i = 0;
#line 3591
  goto ldv_43228;
  ldv_43227: 
#line 3592
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3592
  if (tmp___5 == 0) {
#line 3593
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3593
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3593
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3591
  i = i + 1;
  ldv_43228: ;
#line 3591
  if (i <= 14) {
#line 3592
    goto ldv_43227;
  } else {

  }
#line 3596
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3597
  spin_unlock_irq(& mdev->req_lock);
#line 3598
  return;
}
}
#line 3600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3604
  barr.w.cb = & w_prev_work_done;
#line 3605
  init_completion(& barr.done);
#line 3606
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3607
  wait_for_completion(& barr.done);
#line 3608
  return;
}
}
#line 3610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___6 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;

  {
#line 3614
  rv = 0;
#line 3617
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 0U) {
#line 3618
    return;
  } else {

  }
#line 3619
  if ((int )mdev->state.ldv_32691.conn > 7) {
#line 3620
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32691.conn);
#line 3620
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3620
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3620
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3624
  drbd_thread_stop(& mdev->asender);
#line 3626
  ldv_mutex_lock_42(& mdev->data.mutex);
#line 3627
  drbd_free_sock(mdev);
#line 3628
  ldv_mutex_unlock_43(& mdev->data.mutex);
#line 3630
  spin_lock_irq(& mdev->req_lock);
#line 3631
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3632
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3633
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3634
  spin_unlock_irq(& mdev->req_lock);
#line 3646
  drbd_rs_cancel_all(mdev);
#line 3647
  mdev->rs_total = 0UL;
#line 3648
  mdev->rs_failed = 0UL;
#line 3649
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3650
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3653
  del_timer_sync(& mdev->resync_timer);
#line 3654
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3655
  resync_timer_fn((unsigned long )mdev);
#line 3660
  drbd_flush_workqueue(mdev);
#line 3664
  drbd_process_done_ee(mdev);
#line 3666
  kfree((void const   *)mdev->p_uuid);
#line 3667
  mdev->p_uuid = 0;
#line 3669
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) == 0U) {
#line 3670
    tl_clear(mdev);
  } else {

  }
#line 3672
  drbd_fail_pending_reads(mdev);
#line 3674
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3674
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3674
  printk("<6>%s %s: Connection closed\n", tmp___3, tmp___2);
#line 3676
  drbd_md_sync(mdev);
#line 3678
  fp = FP_DONT_CARE;
#line 3679
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3679
  if (tmp___4 != 0) {
#line 3680
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3681
    put_ldev(mdev);
  } else {

  }
#line 3684
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3685
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_32691.pdsk > 5) {
#line 3686
      tmp___5 = drbd_try_outdate_peer(mdev);
#line 3686
      nps = tmp___5;
#line 3687
      val.i = 0U;
#line 3687
      val.ldv_32691.pdsk = (unsigned char )nps;
#line 3687
      mask.i = 0U;
#line 3687
      mask.ldv_32691.pdsk = 15U;
#line 3687
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3691
  spin_lock_irq(& mdev->req_lock);
#line 3692
  os = mdev->state;
#line 3693
  if ((int )os.ldv_32691.conn > 1) {
#line 3695
    ns = os;
#line 3696
    ns.ldv_32691.conn = 2U;
#line 3697
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3699
  spin_unlock_irq(& mdev->req_lock);
#line 3701
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3703
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3703
    if (tmp___6 == 0) {
#line 3703
      goto ldv_43248;
    } else {

    }
#line 3703
    tmp___7 = get_current();
#line 3703
    __wait.flags = 0U;
#line 3703
    __wait.private = (void *)tmp___7;
#line 3703
    __wait.func = & autoremove_wake_function;
#line 3703
    __wait.task_list.next = & __wait.task_list;
#line 3703
    __wait.task_list.prev = & __wait.task_list;
    ldv_43251: 
#line 3703
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3703
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3703
    if (tmp___8 == 0) {
#line 3703
      goto ldv_43250;
    } else {

    }
#line 3703
    schedule();
#line 3703
    goto ldv_43251;
    ldv_43250: 
#line 3703
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43248: 
#line 3707
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3707
    if (tmp___9 == 0) {
#line 3707
      goto ldv_43252;
    } else {

    }
#line 3707
    tmp___10 = get_current();
#line 3707
    __wait___0.flags = 0U;
#line 3707
    __wait___0.private = (void *)tmp___10;
#line 3707
    __wait___0.func = & autoremove_wake_function;
#line 3707
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3707
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43255: 
#line 3707
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3707
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3707
    if (tmp___11 == 0) {
#line 3707
      goto ldv_43254;
    } else {

    }
#line 3707
    schedule();
#line 3707
    goto ldv_43255;
    ldv_43254: 
#line 3707
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43252: 
#line 3709
    spin_lock_irq(& mdev->req_lock);
#line 3711
    h = mdev->ee_hash;
#line 3711
    goto ldv_43257;
    ldv_43256: ;
#line 3712
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3713
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3713
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3713
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___13,
             tmp___12, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3711
    h = h + 1;
    ldv_43257: ;
#line 3711
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3712
      goto ldv_43256;
    } else {

    }
#line 3715
    kfree((void const   *)mdev->ee_hash);
#line 3716
    mdev->ee_hash = 0;
#line 3717
    mdev->ee_hash_s = 0U;
#line 3720
    h = mdev->tl_hash;
#line 3720
    goto ldv_43260;
    ldv_43259: ;
#line 3721
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3722
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3722
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3722
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___15,
             tmp___14, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3720
    h = h + 1;
    ldv_43260: ;
#line 3720
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3721
      goto ldv_43259;
    } else {

    }
#line 3724
    kfree((void const   *)mdev->tl_hash);
#line 3725
    mdev->tl_hash = 0;
#line 3726
    mdev->tl_hash_s = 0U;
#line 3727
    spin_unlock_irq(& mdev->req_lock);
#line 3729
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3730
    mdev->cram_hmac_tfm = 0;
#line 3732
    kfree((void const   *)mdev->net_conf);
#line 3733
    mdev->net_conf = 0;
#line 3734
    val___0.i = 0U;
#line 3734
    val___0.ldv_32691.conn = 0U;
#line 3734
    mask___0.i = 0U;
#line 3734
    mask___0.ldv_32691.conn = 31U;
#line 3734
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3744
  tmp___16 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3744
  i = (unsigned int )tmp___16;
#line 3745
  if (i != 0U) {
#line 3746
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3746
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3746
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___18, tmp___17,
           i);
  } else {

  }
#line 3747
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3747
  i = (unsigned int )tmp___19;
#line 3748
  if (i != 0U) {
#line 3749
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3749
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3749
    printk("<6>%s %s: pp_in_use = %u, expected 0\n", tmp___21, tmp___20, i);
  } else {

  }
#line 3751
  tmp___24 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3751
  if (tmp___24 == 0) {
#line 3751
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3751
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3751
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___23,
           tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3751);
  } else {

  }
#line 3752
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3752
  if (tmp___27 == 0) {
#line 3752
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3752);
  } else {

  }
#line 3753
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3753
  if (tmp___30 == 0) {
#line 3753
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3753
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3753
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3753);
  } else {

  }
#line 3754
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3754
  if (tmp___33 == 0) {
#line 3754
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3754);
  } else {

  }
#line 3757
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3758
  tmp___36 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3758
  if (tmp___36 == 0) {
#line 3758
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3758
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3758
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3758);
  } else {

  }
#line 3759
  return;
}
}
#line 3770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3773
  p = & mdev->data.sbuf.handshake;
#line 3776
  tmp___1 = ldv_mutex_lock_interruptible_44(& mdev->data.mutex);
#line 3776
  if (tmp___1 != 0) {
#line 3777
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3777
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3777
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 3778
    return (0);
  } else {

  }
#line 3781
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3782
    ldv_mutex_unlock_45(& mdev->data.mutex);
#line 3783
    return (0);
  } else {

  }
#line 3786
  memset((void *)p, 0, 80UL);
#line 3787
  p->protocol_min = 1442840576U;
#line 3788
  p->protocol_max = 1526726656U;
#line 3789
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3791
  ldv_mutex_unlock_46(& mdev->data.mutex);
#line 3792
  return (ok);
}
}
#line 3802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 3805
  p = & mdev->data.rbuf.handshake;
#line 3806
  expect = 72;
#line 3810
  rv = drbd_send_handshake(mdev);
#line 3811
  if (rv == 0) {
#line 3812
    return (0);
  } else {

  }
#line 3814
  rv = drbd_recv_header(mdev, & p->head);
#line 3815
  if (rv == 0) {
#line 3816
    return (0);
  } else {

  }
#line 3818
  if ((unsigned int )p->head.command != 65534U) {
#line 3819
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3819
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3819
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3819
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 3821
    return (-1);
  } else {

  }
#line 3824
  if ((int )p->head.length != expect) {
#line 3825
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3825
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3825
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 3827
    return (-1);
  } else {

  }
#line 3830
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3832
  if (rv != expect) {
#line 3833
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3833
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3833
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 3834
    return (0);
  } else {

  }
#line 3837
  tmp___6 = __fswab32(p->protocol_min);
#line 3837
  p->protocol_min = tmp___6;
#line 3838
  tmp___7 = __fswab32(p->protocol_max);
#line 3838
  p->protocol_max = tmp___7;
#line 3839
  if (p->protocol_max == 0U) {
#line 3840
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3842
  if (p->protocol_min > 91U || p->protocol_max <= 85U) {
#line 3844
    goto incompat;
  } else {

  }
#line 3846
  __min1 = 91;
#line 3846
  __min2 = (int )p->protocol_max;
#line 3846
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3848
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3848
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3848
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 3851
  return (1);
  incompat: 
#line 3854
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3854
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3854
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 91, p->protocol_min, p->protocol_max);
#line 3858
  return (-1);
}
}
#line 3870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 3874
  response = 0;
#line 3875
  right_response = 0;
#line 3876
  peers_ch = 0;
#line 3878
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3878
  key_len = (unsigned int )tmp;
#line 3883
  desc.tfm = mdev->cram_hmac_tfm;
#line 3884
  desc.flags = 0U;
#line 3886
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3888
  if (rv != 0) {
#line 3889
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3889
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3889
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 3890
    rv = 0;
#line 3891
    goto fail;
  } else {

  }
#line 3894
  get_random_bytes((void *)(& my_challenge), 64);
#line 3896
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 3897
  if (rv == 0) {
#line 3898
    goto fail;
  } else {

  }
#line 3900
  rv = drbd_recv_header(mdev, & p);
#line 3901
  if (rv == 0) {
#line 3902
    goto fail;
  } else {

  }
#line 3904
  if ((unsigned int )p.command != 16U) {
#line 3905
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 3905
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3905
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3905
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 3907
    rv = 0;
#line 3908
    goto fail;
  } else {

  }
#line 3911
  if ((unsigned int )p.length > 128U) {
#line 3912
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3912
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3912
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 3913
    rv = 0;
#line 3914
    goto fail;
  } else {

  }
#line 3917
  tmp___7 = kmalloc___1((size_t )p.length, 16U);
#line 3917
  peers_ch = (char *)tmp___7;
#line 3918
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 3919
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3919
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3919
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 3920
    rv = 0;
#line 3921
    goto fail;
  } else {

  }
#line 3924
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 3926
  if ((int )p.length != rv) {
#line 3927
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3927
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3927
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 3928
    rv = 0;
#line 3929
    goto fail;
  } else {

  }
#line 3932
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 3933
  tmp___12 = kmalloc___1((size_t )resp_size, 16U);
#line 3933
  response = (char *)tmp___12;
#line 3934
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3935
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3935
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3935
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 3936
    rv = 0;
#line 3937
    goto fail;
  } else {

  }
#line 3940
  sg_init_table(& sg, 1U);
#line 3941
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 3943
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 3944
  if (rv != 0) {
#line 3945
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3945
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3945
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 3946
    rv = 0;
#line 3947
    goto fail;
  } else {

  }
#line 3950
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 3951
  if (rv == 0) {
#line 3952
    goto fail;
  } else {

  }
#line 3954
  rv = drbd_recv_header(mdev, & p);
#line 3955
  if (rv == 0) {
#line 3956
    goto fail;
  } else {

  }
#line 3958
  if ((unsigned int )p.command != 17U) {
#line 3959
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 3959
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3959
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3959
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 3961
    rv = 0;
#line 3962
    goto fail;
  } else {

  }
#line 3965
  if ((unsigned int )p.length != resp_size) {
#line 3966
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3966
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3966
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 3967
    rv = 0;
#line 3968
    goto fail;
  } else {

  }
#line 3971
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 3973
  if ((unsigned int )rv != resp_size) {
#line 3974
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 3975
    rv = 0;
#line 3976
    goto fail;
  } else {

  }
#line 3979
  tmp___24 = kmalloc___1((size_t )resp_size, 16U);
#line 3979
  right_response = (char *)tmp___24;
#line 3980
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3981
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3981
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3981
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 3982
    rv = 0;
#line 3983
    goto fail;
  } else {

  }
#line 3986
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 3988
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 3989
  if (rv != 0) {
#line 3990
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3990
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3990
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 3991
    rv = 0;
#line 3992
    goto fail;
  } else {

  }
#line 3995
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 3995
  rv = tmp___29 == 0;
#line 3997
  if (rv != 0) {
#line 3998
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3998
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3998
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {

  }
  fail: 
#line 4002
  kfree((void const   *)peers_ch);
#line 4003
  kfree((void const   *)response);
#line 4004
  kfree((void const   *)right_response);
#line 4006
  return (rv);
}
}
#line 4010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 4012
  mdev = thi->mdev;
#line 4013
  tmp = mdev_to_minor(mdev);
#line 4013
  minor = tmp;
#line 4016
  tmp___0 = get_current();
#line 4016
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4018
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_43305: 
#line 4021
  h = drbd_connect(mdev);
#line 4022
  if (h == 0) {
#line 4023
    drbd_disconnect(mdev);
#line 4024
    tmp___3 = get_current();
#line 4024
    tmp___3->state = 1L;
#line 4025
    schedule_timeout(250L);
  } else {

  }
#line 4027
  if (h == -1) {
#line 4028
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4028
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4028
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4029
    val.i = 0U;
#line 4029
    val.ldv_32691.conn = 1U;
#line 4029
    mask.i = 0U;
#line 4029
    mask.ldv_32691.conn = 31U;
#line 4029
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4031
  if (h == 0) {
#line 4032
    goto ldv_43305;
  } else {

  }

#line 4033
  if (h > 0) {
#line 4034
    tmp___6 = get_net_conf(mdev);
#line 4034
    if (tmp___6 != 0) {
#line 4035
      drbdd(mdev);
#line 4036
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4040
  drbd_disconnect(mdev);
#line 4042
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4043
  return (0);
}
}
#line 4048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4050
  p = (struct p_req_state_reply *)h;
#line 4052
  tmp = __fswab32(p->retcode);
#line 4052
  retcode = (int )tmp;
#line 4054
  if (retcode > 0) {
#line 4055
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4057
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4058
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4058
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4058
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4058
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4061
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4063
  return (1);
}
}
#line 4066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4068
  tmp = drbd_send_ping_ack(mdev);
#line 4068
  return (tmp);
}
}
#line 4072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 4075
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4077
  return (1);
}
}
#line 4080 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4082
  p = (struct p_block_ack *)h;
#line 4083
  tmp = __fswab64(p->sector);
#line 4083
  sector = (sector_t )tmp;
#line 4084
  tmp___0 = __fswab32(p->blksize);
#line 4084
  blksize = (int )tmp___0;
#line 4086
  if (mdev->agreed_pro_version <= 88) {
#line 4086
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4086
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4086
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4086);
  } else {

  }
#line 4088
  tmp___3 = __fswab32(p->seq_num);
#line 4088
  update_peer_seq(mdev, tmp___3);
#line 4090
  drbd_rs_complete_io(mdev, sector);
#line 4091
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4091U);
#line 4093
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4094
  atomic_dec(& mdev->rs_pending_cnt);
#line 4094
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4094
  if (tmp___7 < 0) {
#line 4094
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4094
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4094
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4094
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4094, tmp___4);
  } else {

  }
#line 4096
  return (1);
}
}
#line 4101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4104
  tmp = tl_hash_slot(mdev, sector);
#line 4104
  slot = tmp;
#line 4108
  n = slot->first;
#line 4108
  goto ldv_43346;
  ldv_43345: ;
#line 4109
  if ((unsigned long )req == (unsigned long )id) {
#line 4110
    if (req->sector != sector) {
#line 4111
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4111
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4111
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4115
      goto ldv_43344;
    } else {

    }
#line 4117
    return (req);
  } else {

  }
#line 4108
  n = n->next;
  ldv_43346: ;
#line 4108
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4108
    __builtin_prefetch((void const   *)n->next);
#line 4108
    if (1 != 0) {
#line 4108
      __mptr = (struct hlist_node  const  *)n;
#line 4108
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4108
      if (1 != 0) {
#line 4109
        goto ldv_43345;
      } else {
#line 4111
        goto ldv_43344;
      }
    } else {
#line 4111
      goto ldv_43344;
    }
  } else {

  }
  ldv_43344: 
#line 4120
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4120
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4120
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4122
  return (0);
}
}
#line 4128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4135
  spin_lock_irq(& mdev->req_lock);
#line 4136
  req = (*validator)(mdev, id, sector);
#line 4137
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4137
  if (tmp___1 != 0L) {
#line 4138
    spin_unlock_irq(& mdev->req_lock);
#line 4139
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4139
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4139
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4140
    return (0);
  } else {

  }
#line 4142
  __req_mod(req, what, & m);
#line 4143
  spin_unlock_irq(& mdev->req_lock);
#line 4145
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4146
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4147
  return (1);
}
}
#line 4150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4152
  p = (struct p_block_ack *)h;
#line 4153
  tmp = __fswab64(p->sector);
#line 4153
  sector = (sector_t )tmp;
#line 4154
  tmp___0 = __fswab32(p->blksize);
#line 4154
  blksize = (int )tmp___0;
#line 4157
  tmp___1 = __fswab32(p->seq_num);
#line 4157
  update_peer_seq(mdev, tmp___1);
#line 4159
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4160
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4160U);
#line 4161
    atomic_dec(& mdev->rs_pending_cnt);
#line 4161
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4161
    if (tmp___5 < 0) {
#line 4161
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4161
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4161
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4161
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4161, tmp___2);
    } else {

    }
#line 4162
    return (1);
  } else {

  }
#line 4164
  tmp___6 = __fswab16((int )h->command);
#line 4164
  switch ((int )tmp___6) {
  case 23: ;
#line 4166
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4166
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4166
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4166
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4166);
  } else {

  }
#line 4167
  what = write_acked_by_peer_and_sis;
#line 4168
  goto ldv_43374;
  case 22: ;
#line 4170
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4170
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4170
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4170
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4170);
  } else {

  }
#line 4171
  what = write_acked_by_peer;
#line 4172
  goto ldv_43374;
  case 21: ;
#line 4174
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4174
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4174
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4174
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4174);
  } else {

  }
#line 4175
  what = recv_acked_by_peer;
#line 4176
  goto ldv_43374;
  case 24: ;
#line 4178
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4178
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4178
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4178
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4178);
  } else {

  }
#line 4179
  what = conflict_discarded_by_peer;
#line 4180
  goto ldv_43374;
  default: 
#line 4182
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4182
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4182
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
         4182);
#line 4183
  return (0);
  }
  ldv_43374: 
#line 4186
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4186
  return (tmp___17);
}
}
#line 4190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4192
  p = (struct p_block_ack *)h;
#line 4193
  tmp = __fswab64(p->sector);
#line 4193
  sector = (sector_t )tmp;
#line 4195
  tmp___2 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4195
  if (tmp___2 != 0) {
#line 4196
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4196
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4196
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4198
  tmp___3 = __fswab32(p->seq_num);
#line 4198
  update_peer_seq(mdev, tmp___3);
#line 4200
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4201
    tmp___4 = __fswab32(p->blksize);
#line 4201
    size = (int )tmp___4;
#line 4202
    atomic_dec(& mdev->rs_pending_cnt);
#line 4202
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4202
    if (tmp___8 < 0) {
#line 4202
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4202
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4202
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4202
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4202, tmp___5);
    } else {

    }
#line 4203
    drbd_rs_failed_io(mdev, sector, size);
#line 4204
    return (1);
  } else {

  }
#line 4206
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4206
  return (tmp___9);
}
}
#line 4210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4212
  p = (struct p_block_ack *)h;
#line 4213
  tmp = __fswab64(p->sector);
#line 4213
  sector = (sector_t )tmp;
#line 4215
  tmp___0 = __fswab32(p->seq_num);
#line 4215
  update_peer_seq(mdev, tmp___0);
#line 4216
  tmp___1 = __fswab32(p->blksize);
#line 4216
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4216
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4216
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4219
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4219
  return (tmp___4);
}
}
#line 4223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 4227
  p = (struct p_block_ack *)h;
#line 4229
  tmp = __fswab64(p->sector);
#line 4229
  sector = (sector_t )tmp;
#line 4230
  tmp___0 = __fswab32(p->blksize);
#line 4230
  size = (int )tmp___0;
#line 4231
  if (p->block_id != 0xffffffffffffffffULL) {
#line 4231
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4231
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4231
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4231);
  } else {

  }
#line 4233
  tmp___3 = __fswab32(p->seq_num);
#line 4233
  update_peer_seq(mdev, tmp___3);
#line 4235
  atomic_dec(& mdev->rs_pending_cnt);
#line 4235
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4235
  if (tmp___7 < 0) {
#line 4235
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4235
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4235
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4235
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_NegRSDReply",
           4235, tmp___4);
  } else {

  }
#line 4237
  tmp___8 = _get_ldev_if_state(mdev, D_FAILED);
#line 4237
  if (tmp___8 != 0) {
#line 4238
    drbd_rs_complete_io(mdev, sector);
#line 4239
    drbd_rs_failed_io(mdev, sector, size);
#line 4240
    put_ldev(mdev);
  } else {

  }
#line 4243
  return (1);
}
}
#line 4246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4248
  p = (struct p_barrier_ack *)h;
#line 4250
  tmp = __fswab32(p->set_size);
#line 4250
  tl_release(mdev, p->barrier, tmp);
#line 4252
  return (1);
}
}
#line 4255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4257
  p = (struct p_block_ack *)h;
#line 4262
  tmp = __fswab64(p->sector);
#line 4262
  sector = (sector_t )tmp;
#line 4263
  tmp___0 = __fswab32(p->blksize);
#line 4263
  size = (int )tmp___0;
#line 4265
  tmp___1 = __fswab32(p->seq_num);
#line 4265
  update_peer_seq(mdev, tmp___1);
#line 4267
  tmp___2 = __fswab64(p->block_id);
#line 4267
  if (tmp___2 == 4712ULL) {
#line 4268
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4270
    ov_oos_print(mdev);
  }
#line 4272
  drbd_rs_complete_io(mdev, sector);
#line 4273
  atomic_dec(& mdev->rs_pending_cnt);
#line 4273
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4273
  if (tmp___6 < 0) {
#line 4273
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4273
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4273
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4273
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4273, tmp___3);
  } else {

  }
#line 4275
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4275
  if (mdev->ov_left == 0UL) {
#line 4276
    tmp___7 = kmalloc___1(24UL, 16U);
#line 4276
    w = (struct drbd_work *)tmp___7;
#line 4277
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4278
      w->cb = & w_ov_finished;
#line 4279
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4281
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4281
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4281
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4282
      ov_oos_print(mdev);
#line 4283
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4286
  return (1);
}
}
#line 4294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[38U] ;

  {
#line 4296
  asender_tbl[0].pkt_size = 0UL;
#line 4296
  asender_tbl[0].process = 0;
#line 4296
  asender_tbl[1].pkt_size = 0UL;
#line 4296
  asender_tbl[1].process = 0;
#line 4296
  asender_tbl[2].pkt_size = 0UL;
#line 4296
  asender_tbl[2].process = 0;
#line 4296
  asender_tbl[3].pkt_size = 0UL;
#line 4296
  asender_tbl[3].process = 0;
#line 4296
  asender_tbl[4].pkt_size = 0UL;
#line 4296
  asender_tbl[4].process = 0;
#line 4296
  asender_tbl[5].pkt_size = 0UL;
#line 4296
  asender_tbl[5].process = 0;
#line 4296
  asender_tbl[6].pkt_size = 0UL;
#line 4296
  asender_tbl[6].process = 0;
#line 4296
  asender_tbl[7].pkt_size = 0UL;
#line 4296
  asender_tbl[7].process = 0;
#line 4296
  asender_tbl[8].pkt_size = 0UL;
#line 4296
  asender_tbl[8].process = 0;
#line 4296
  asender_tbl[9].pkt_size = 0UL;
#line 4296
  asender_tbl[9].process = 0;
#line 4296
  asender_tbl[10].pkt_size = 0UL;
#line 4296
  asender_tbl[10].process = 0;
#line 4296
  asender_tbl[11].pkt_size = 0UL;
#line 4296
  asender_tbl[11].process = 0;
#line 4296
  asender_tbl[12].pkt_size = 0UL;
#line 4296
  asender_tbl[12].process = 0;
#line 4296
  asender_tbl[13].pkt_size = 0UL;
#line 4296
  asender_tbl[13].process = 0;
#line 4296
  asender_tbl[14].pkt_size = 0UL;
#line 4296
  asender_tbl[14].process = 0;
#line 4296
  asender_tbl[15].pkt_size = 0UL;
#line 4296
  asender_tbl[15].process = 0;
#line 4296
  asender_tbl[16].pkt_size = 0UL;
#line 4296
  asender_tbl[16].process = 0;
#line 4296
  asender_tbl[17].pkt_size = 0UL;
#line 4296
  asender_tbl[17].process = 0;
#line 4296
  asender_tbl[18].pkt_size = 0UL;
#line 4296
  asender_tbl[18].process = 0;
#line 4296
  asender_tbl[19].pkt_size = 8UL;
#line 4296
  asender_tbl[19].process = & got_Ping;
#line 4296
  asender_tbl[20].pkt_size = 8UL;
#line 4296
  asender_tbl[20].process = & got_PingAck;
#line 4296
  asender_tbl[21].pkt_size = 32UL;
#line 4296
  asender_tbl[21].process = & got_BlockAck;
#line 4296
  asender_tbl[22].pkt_size = 32UL;
#line 4296
  asender_tbl[22].process = & got_BlockAck;
#line 4296
  asender_tbl[23].pkt_size = 32UL;
#line 4296
  asender_tbl[23].process = & got_BlockAck;
#line 4296
  asender_tbl[24].pkt_size = 32UL;
#line 4296
  asender_tbl[24].process = & got_BlockAck;
#line 4296
  asender_tbl[25].pkt_size = 32UL;
#line 4296
  asender_tbl[25].process = & got_NegAck;
#line 4296
  asender_tbl[26].pkt_size = 32UL;
#line 4296
  asender_tbl[26].process = & got_NegDReply;
#line 4296
  asender_tbl[27].pkt_size = 32UL;
#line 4296
  asender_tbl[27].process = & got_NegRSDReply;
#line 4296
  asender_tbl[28].pkt_size = 16UL;
#line 4296
  asender_tbl[28].process = & got_BarrierAck;
#line 4296
  asender_tbl[29].pkt_size = 12UL;
#line 4296
  asender_tbl[29].process = & got_RqSReply;
#line 4296
  asender_tbl[30].pkt_size = 0UL;
#line 4296
  asender_tbl[30].process = 0;
#line 4296
  asender_tbl[31].pkt_size = 0UL;
#line 4296
  asender_tbl[31].process = 0;
#line 4296
  asender_tbl[32].pkt_size = 32UL;
#line 4296
  asender_tbl[32].process = & got_OVResult;
#line 4296
  asender_tbl[33].pkt_size = 0UL;
#line 4296
  asender_tbl[33].process = 0;
#line 4296
  asender_tbl[34].pkt_size = 32UL;
#line 4296
  asender_tbl[34].process = & got_IsInSync;
#line 4296
  asender_tbl[35].pkt_size = 0UL;
#line 4296
  asender_tbl[35].process = 0;
#line 4296
  asender_tbl[36].pkt_size = 0UL;
#line 4296
  asender_tbl[36].process = 0;
#line 4296
  asender_tbl[37].pkt_size = 0UL;
#line 4296
  asender_tbl[37].process = 0;
#line 4315
  if (cmd > 37 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4316
    return (0);
  } else {

  }
#line 4317
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4322
  mdev = thi->mdev;
#line 4323
  h = & mdev->meta.rbuf.header;
#line 4324
  cmd = 0;
#line 4327
  buf = (void *)h;
#line 4328
  received = 0;
#line 4329
  expect = 8;
#line 4332
  tmp = mdev_to_minor(mdev);
#line 4332
  tmp___0 = get_current();
#line 4332
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4334
  tmp___1 = get_current();
#line 4334
  tmp___1->policy = 2U;
#line 4335
  tmp___2 = get_current();
#line 4335
  tmp___2->rt_priority = 2U;
#line 4337
  goto ldv_43452;
  ldv_43456: 
#line 4338
  drbd_thread_current_set_cpu(mdev);
#line 4339
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4339
  if (tmp___6 != 0) {
#line 4340
    tmp___3 = drbd_send_ping(mdev);
#line 4340
    _b = tmp___3 == 0;
#line 4340
    if (_b != 0) {
#line 4340
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4340
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4340
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4340);
    } else {

    }
#line 4340
    if (_b != 0) {
#line 4340
      goto reconnect;
    } else {

    }
#line 4341
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4347
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4347
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4347
    if (tmp___7 > 3) {
#line 4349
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_43451: 
#line 4351
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4352
  tmp___8 = get_current();
#line 4352
  flush_signals(tmp___8);
#line 4353
  tmp___11 = drbd_process_done_ee(mdev);
#line 4353
  if (tmp___11 == 0) {
#line 4354
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4354
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4354
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4355
    goto reconnect;
  } else {

  }
#line 4358
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4359
  spin_lock_irq(& mdev->req_lock);
#line 4360
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4361
  spin_unlock_irq(& mdev->req_lock);
#line 4365
  if (empty != 0) {
#line 4366
    goto ldv_43450;
  } else {

  }
#line 4367
  goto ldv_43451;
  ldv_43450: ;
#line 4369
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4370
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4373
  tmp___12 = get_current();
#line 4373
  tmp___13 = signal_pending(tmp___12);
#line 4373
  if (tmp___13 != 0) {
#line 4374
    goto ldv_43452;
  } else {

  }
#line 4376
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4378
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4380
  tmp___14 = get_current();
#line 4380
  flush_signals(tmp___14);
#line 4392
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4392
  if (tmp___21 != 0L) {
#line 4393
    received = received + rv;
#line 4394
    buf = buf + (unsigned long )rv;
  } else
#line 4395
  if (rv == 0) {
#line 4396
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4396
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4396
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4397
    goto reconnect;
  } else
#line 4398
  if (rv == -11) {
#line 4399
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4401
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4401
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4401
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4402
      goto reconnect;
    } else {

    }
#line 4404
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4405
    goto ldv_43452;
  } else
#line 4406
  if (rv == -4) {
#line 4407
    goto ldv_43452;
  } else {
#line 4409
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4409
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4409
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4410
    goto reconnect;
  }
#line 4413
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4414
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4414
    if (tmp___25 != 0L) {
#line 4415
      tmp___22 = __fswab32(h->magic);
#line 4415
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4415
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4415
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4418
      goto reconnect;
    } else {

    }
#line 4420
    tmp___26 = __fswab16((int )h->command);
#line 4420
    cmd = get_asender_cmd((int )tmp___26);
#line 4421
    tmp___27 = __fswab16((int )h->length);
#line 4421
    len = (int )tmp___27;
#line 4422
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4422
    if (tmp___31 != 0L) {
#line 4423
      tmp___28 = __fswab32(h->magic);
#line 4423
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4423
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4423
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4426
      goto disconnect;
    } else {

    }
#line 4428
    expect = (int )cmd->pkt_size;
#line 4429
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4429
    if (_b___0 != 0) {
#line 4429
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4429
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4429
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4429);
    } else {

    }
#line 4429
    if (_b___0 != 0) {
#line 4430
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4432
  if (received == expect) {
#line 4433
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4433
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4433
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4433
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4433);
    } else {

    }
#line 4434
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4434
    if (tmp___36 == 0) {
#line 4435
      goto reconnect;
    } else {

    }
#line 4437
    buf = (void *)h;
#line 4438
    received = 0;
#line 4439
    expect = 8;
#line 4440
    cmd = 0;
  } else {

  }
  ldv_43452: 
#line 4337
  tmp___37 = get_t_state(thi);
#line 4337
  if ((unsigned int )tmp___37 == 1U) {
#line 4338
    goto ldv_43456;
  } else {

  }

#line 4444
  if (0) {
    reconnect: 
#line 4446
    val.i = 0U;
#line 4446
    val.ldv_32691.conn = 5U;
#line 4446
    mask.i = 0U;
#line 4446
    mask.ldv_32691.conn = 31U;
#line 4446
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4448
  if (0) {
    disconnect: 
#line 4450
    val___0.i = 0U;
#line 4450
    val___0.ldv_32691.conn = 1U;
#line 4450
    mask___0.i = 0U;
#line 4450
    mask___0.ldv_32691.conn = 31U;
#line 4450
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4452
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4454
  if ((int )mdev->state.ldv_32691.conn > 9) {
#line 4454
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4454
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4454
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4454);
  } else {

  }
#line 4455
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4455
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4455
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4457
  return (0);
}
}
#line 4497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4509
  LDV_IN_INTERRUPT = 1;
#line 4518
  ldv_initialize();
#line 4520
  goto ldv_43485;
  ldv_43484: 
#line 4523
  tmp = nondet_int();
#line 4523
  switch (tmp) {
  default: ;
#line 4525
  goto ldv_43483;
  }
  ldv_43483: ;
  ldv_43485: 
#line 4520
  tmp___0 = nondet_int();
#line 4520
  if (tmp___0 != 0) {
#line 4521
    goto ldv_43484;
  } else {

  }


#line 4534
  ldv_check_final_state();
#line 4537
  return;
}
}
#line 4541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4546
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4548
  mutex_lock(ldv_func_arg1);
#line 4549
  return;
}
}
#line 4551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4556
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4558
  mutex_unlock(ldv_func_arg1);
#line 4559
  return;
}
}
#line 4561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4566
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4568
  mutex_unlock(ldv_func_arg1);
#line 4569
  return;
}
}
#line 4571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4576
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4578
  mutex_lock(ldv_func_arg1);
#line 4579
  return;
}
}
#line 4581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4586
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4588
  mutex_unlock(ldv_func_arg1);
#line 4589
  return;
}
}
#line 4591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_44(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___4 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4596
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4596
  ldv_func_res = tmp;
#line 4598
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4598
  return (tmp___0);
#line 4600
  return (ldv_func_res);
}
}
#line 4603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4608
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4610
  mutex_unlock(ldv_func_arg1);
#line 4611
  return;
}
}
#line 4613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4618
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4620
  mutex_unlock(ldv_func_arg1);
#line 4621
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 576 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 578
  __hlist_del(n);
#line 579
  n->next = 1048832;
#line 580
  n->pprev = 2097664;
#line 581
  return;
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 47
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 50
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 175
  __i = i;
#line 176
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 179
  return (i + __i);
}
}
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 184
  tmp = atomic_add_return(- i, v);
#line 184
  return (tmp);
}
}
#line 295 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 299
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_55(struct mutex *ldv_func_arg1 ) ;
#line 163 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int per_cpu__cpu_number ;
#line 81 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 119 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 121
  rcu_read_lock_sched_notrace();
#line 123
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 125
  return;
}
}
#line 141 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 143
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 145
  rcu_read_lock_sched_notrace();
#line 146
  return;
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10764: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10764;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___2(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 354 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 788 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1098
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1364
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1366
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40807;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32691.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32691.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40807;
  }
  ldv_40807: ;
#line 1651
  return;
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1878
  atomic_inc(& mdev->ap_pending_cnt);
#line 1879
  return;
}
}
#line 2030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2032
  mxb = 1000000;
#line 2033
  tmp = get_net_conf(mdev);
#line 2033
  if (tmp != 0) {
#line 2034
    mxb = (mdev->net_conf)->max_buffers;
#line 2035
    put_net_conf(mdev);
  } else {

  }
#line 2037
  return (mxb);
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2046
  switch ((unsigned int )s.ldv_32691.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2059
  goto ldv_40966;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2078
  return (0);
  }
  ldv_40966: ;
#line 2081
  switch ((unsigned int )s.ldv_32691.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2088
  goto ldv_40986;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2097
  return (0);
  }
  ldv_40986: ;
#line 2100
  return (1);
}
}
#line 2103 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2105
  tmp = drbd_get_max_buffers(mdev);
#line 2105
  mxb = tmp;
#line 2107
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2108
    return (0);
  } else {

  }
#line 2109
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2109
  if (tmp___0 != 0) {
#line 2110
    return (0);
  } else {

  }
#line 2117
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2117
  if (tmp___1 == 0) {
#line 2118
    return (0);
  } else {

  }
#line 2122
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2122
  if (tmp___2 > mxb) {
#line 2123
    return (0);
  } else {

  }
#line 2124
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2124
  if (tmp___3 != 0) {
#line 2125
    return (0);
  } else {

  }
#line 2126
  return (1);
}
}
#line 2132 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int one_or_two ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2136
  tmp = get_current();
#line 2136
  wait.flags = 0U;
#line 2136
  wait.private = (void *)tmp;
#line 2136
  wait.func = & autoremove_wake_function;
#line 2136
  wait.task_list.next = & wait.task_list;
#line 2136
  wait.task_list.prev = & wait.task_list;
#line 2146
  spin_lock_irq(& mdev->req_lock);
#line 2147
  goto ldv_41002;
  ldv_41001: 
#line 2148
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2149
  spin_unlock_irq(& mdev->req_lock);
#line 2150
  schedule();
#line 2151
  finish_wait(& mdev->misc_wait, & wait);
#line 2152
  spin_lock_irq(& mdev->req_lock);
  ldv_41002: 
#line 2147
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2147
  if (tmp___0 == 0) {
#line 2148
    goto ldv_41001;
  } else {

  }
#line 2154
  atomic_add(one_or_two, & mdev->ap_bio_cnt);
#line 2155
  spin_unlock_irq(& mdev->req_lock);
#line 2156
  return;
}
}
#line 2158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2160
  tmp = drbd_get_max_buffers(mdev);
#line 2160
  mxb = tmp;
#line 2161
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2161
  ap_bio = tmp___0;
#line 2163
  if (ap_bio < 0) {
#line 2163
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2163
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2163
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2163);
  } else {

  }
#line 2167
  if (ap_bio < mxb) {
#line 2168
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2169
  if (ap_bio == 0) {
#line 2169
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2169
    if (tmp___4 != 0) {
#line 2170
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2170
      if (tmp___3 == 0) {
#line 2171
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2172
  return;
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 65
  q = bdev_get_queue(mdev->this_bdev);
#line 67
  spin_lock_irq(q->queue_lock);
#line 72
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 72
  if (tmp == 0) {
#line 73
    blk_plug_device(q);
#line 74
    del_timer(& q->unplug_timer);
  } else {

  }
#line 77
  spin_unlock_irq(q->queue_lock);
#line 78
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_41120: ;
#line 207
    goto ldv_41120;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_41125: ;
#line 216
    goto ldv_41125;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  unsigned long __ptr ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  unsigned long __ptr___1 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 68
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 70
  rcu_read_lock();
#line 70
  switch (4UL) {
  case 1UL: 
#line 70
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 70
  goto ldv_41194;
  case 2UL: 
#line 70
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 70
  goto ldv_41194;
  case 4UL: 
#line 70
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 70
  goto ldv_41194;
  case 8UL: 
#line 70
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 70
  goto ldv_41194;
  default: 
#line 70
  __bad_percpu_size();
  }
  ldv_41194: 
#line 70
  cpu = pfo_ret__;
#line 71
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 71
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 71
  if ((mdev->vdisk)->part0.partno != 0) {
#line 71
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 71
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 71
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 72
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 72
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 72
  if ((mdev->vdisk)->part0.partno != 0) {
#line 72
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 72
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 72
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 73
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 74
  rcu_read_unlock();
#line 75
  return;
}
}
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  unsigned long __ptr ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 80
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 81
  duration = (unsigned long )jiffies - req->start_time;
#line 83
  rcu_read_lock();
#line 83
  switch (4UL) {
  case 1UL: 
#line 83
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 83
  goto ldv_41219;
  case 2UL: 
#line 83
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 83
  goto ldv_41219;
  case 4UL: 
#line 83
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 83
  goto ldv_41219;
  case 8UL: 
#line 83
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 83
  goto ldv_41219;
  default: 
#line 83
  __bad_percpu_size();
  }
  ldv_41219: 
#line 83
  cpu = pfo_ret__;
#line 84
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 84
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 84
  if ((mdev->vdisk)->part0.partno != 0) {
#line 84
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 84
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 84
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 85
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 86
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 87
  rcu_read_unlock();
#line 88
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 92
  s = req->rq_state;
#line 96
  if ((int )rw == 1) {
#line 103
    list_del(& req->tl_requests);
#line 108
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 109
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             109U);
    } else {

    }
#line 111
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 112
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         112U);
    } else {

    }
#line 124
    if ((s & 7UL) != 0UL) {
#line 125
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 125
      if (tmp___2 != 0) {
#line 126
        drbd_al_complete_io(mdev, req->sector);
#line 127
        put_ldev(mdev);
      } else {
#line 128
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 128
        if (tmp___1 != 0) {
#line 129
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 147
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 149
    if ((unsigned long )((void *)req->w.list.next) != 1048832UL) {
#line 149
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 149
      if (tmp___7 == 0) {
#line 153
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 154
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 154
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 154
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 156
    req->w.cb = & w_io_error;
#line 157
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 160
    drbd_req_free(req);
  }
#line 161
  return;
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 173
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 173
  if (tmp != 0) {
#line 174
    return;
  } else {

  }
#line 176
  b = mdev->newest_tle;
#line 177
  b->w.cb = & w_send_barrier;
#line 182
  inc_ap_pending(mdev);
#line 183
  drbd_queue_work(& mdev->data.work, & b->w);
#line 184
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 185
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 190
  s = req->rq_state;
#line 198
  if ((int )mdev->state.ldv_32691.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 200
    queue_barrier(mdev);
  } else {

  }
#line 205
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 206
    sector = req->sector;
#line 207
    size = (int const   )req->size;
#line 213
    slot = tl_hash_slot___0(mdev, sector);
#line 214
    n = slot->first;
#line 214
    goto ldv_41258;
    ldv_41257: 
#line 215
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 215
    if (tmp___1 != 0) {
#line 216
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 216
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 216
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 214
    n = n->next;
    ldv_41258: ;
#line 214
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 214
      __builtin_prefetch((void const   *)n->next);
#line 214
      if (1 != 0) {
#line 214
        __mptr = (struct hlist_node  const  *)n;
#line 214
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 214
        if (1 != 0) {
#line 215
          goto ldv_41257;
        } else {
#line 217
          goto ldv_41259;
        }
      } else {
#line 217
        goto ldv_41259;
      }
    } else {

    }
    ldv_41259: 
#line 237
    slot = ee_hash_slot___0(mdev, req->sector);
#line 238
    n = slot->first;
#line 238
    goto ldv_41266;
    ldv_41265: 
#line 239
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 239
    if (tmp___2 != 0) {
#line 240
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 241
      goto ldv_41264;
    } else {

    }
#line 238
    n = n->next;
    ldv_41266: ;
#line 238
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 238
      __builtin_prefetch((void const   *)n->next);
#line 238
      if (1 != 0) {
#line 238
        __mptr___0 = (struct hlist_node  const  *)n;
#line 238
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 238
        if (1 != 0) {
#line 239
          goto ldv_41265;
        } else {
#line 241
          goto ldv_41264;
        }
      } else {
#line 241
        goto ldv_41264;
      }
    } else {

    }
    ldv_41264: ;
  } else {

  }
#line 244
  return;
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 251
  bio_endio(m->bio, m->error);
#line 252
  dec_ap_bio(mdev);
#line 253
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 263
  s = req->rq_state;
#line 264
  mdev = req->mdev;
#line 266
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 277
  if ((s & 16UL) != 0UL) {
#line 278
    return;
  } else {

  }
#line 279
  if ((s & 8UL) != 0UL) {
#line 280
    return;
  } else {

  }
#line 281
  if ((int )s & 1) {
#line 282
    return;
  } else {

  }
#line 284
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 306
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 307
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 307
    error = (int )tmp;
#line 311
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 311
    if (tmp___2 == 0) {
#line 312
      hlist_del(& req->colision);
    } else
#line 314
    if ((s & 504UL) != 0UL) {
#line 314
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 314
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 314
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             314);
    } else {

    }
#line 317
    if (rw == 1) {
#line 318
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 321
    _drbd_end_io_acct(mdev, req);
#line 323
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 324
    m->bio = req->master_bio;
#line 325
    req->master_bio = 0;
  } else {

  }
#line 328
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 333
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 334
  return;
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 364
  mdev = req->mdev;
#line 365
  sector = req->sector;
#line 366
  size = (int const   )req->size;
#line 372
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 372
  if (tmp___1 == 0) {
#line 372
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 372
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 372
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           372);
  } else {

  }
#line 374
  tmp___2 = get_net_conf(mdev);
#line 374
  if (tmp___2 == 0) {
#line 375
    return (0);
  } else {

  }
#line 378
  _b = mdev->tl_hash_s == 0U;
#line 378
  if (_b != 0) {
#line 378
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           378);
  } else {

  }
#line 378
  if (_b != 0) {
#line 379
    goto out_no_conflict;
  } else {

  }
#line 380
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 380
  if (tmp___5 != 0L) {
#line 380
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (380), "i" (12UL));
    ldv_41294: ;
#line 380
    goto ldv_41294;
  } else {

  }
#line 383
  slot = tl_hash_slot___0(mdev, sector);
#line 384
  n = slot->first;
#line 384
  goto ldv_41301;
  ldv_41300: 
#line 385
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 385
  if (tmp___10 != 0) {
#line 386
    tmp___6 = get_current();
#line 386
    tmp___7 = get_current();
#line 386
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 392
    goto out_conflict;
  } else {

  }
#line 384
  n = n->next;
  ldv_41301: ;
#line 384
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 384
    __builtin_prefetch((void const   *)n->next);
#line 384
    if (1 != 0) {
#line 384
      __mptr = (struct hlist_node  const  *)n;
#line 384
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 384
      if (1 != 0) {
#line 385
        goto ldv_41300;
      } else {
#line 387
        goto ldv_41302;
      }
    } else {
#line 387
      goto ldv_41302;
    }
  } else {

  }
  ldv_41302: ;
#line 396
  if (mdev->ee_hash_s != 0U) {
#line 398
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 398
    if (tmp___11 != 0L) {
#line 398
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (398), "i" (12UL));
      ldv_41303: ;
#line 398
      goto ldv_41303;
    } else {

    }
#line 401
    slot = ee_hash_slot___0(mdev, sector);
#line 402
    n = slot->first;
#line 402
    goto ldv_41309;
    ldv_41308: 
#line 403
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 403
    if (tmp___16 != 0) {
#line 404
      tmp___12 = get_current();
#line 404
      tmp___13 = get_current();
#line 404
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 410
      goto out_conflict;
    } else {

    }
#line 402
    n = n->next;
    ldv_41309: ;
#line 402
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 402
      __builtin_prefetch((void const   *)n->next);
#line 402
      if (1 != 0) {
#line 402
        __mptr___0 = (struct hlist_node  const  *)n;
#line 402
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 402
        if (1 != 0) {
#line 403
          goto ldv_41308;
        } else {
#line 405
          goto ldv_41310;
        }
      } else {
#line 405
        goto ldv_41310;
      }
    } else {

    }
    ldv_41310: ;
  } else {

  }
  out_no_conflict: 
#line 419
  put_net_conf(mdev);
#line 420
  return (0);
  out_conflict: 
#line 423
  put_net_conf(mdev);
#line 424
  return (1);
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 442
  mdev = req->mdev;
#line 443
  m->bio = 0;
#line 445
  switch ((unsigned int )what) {
  default: 
#line 447
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
         447);
#line 448
  goto ldv_41318;
  case 1U: ;
#line 459
  if ((req->rq_state & 504UL) != 0UL) {
#line 459
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 459
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 459
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           459);
  } else {

  }
#line 460
  req->rq_state = req->rq_state | 8UL;
#line 461
  inc_ap_pending(mdev);
#line 462
  goto ldv_41318;
  case 2U: ;
#line 466
  if ((req->rq_state & 7UL) != 0UL) {
#line 466
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 466
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 466
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           466);
  } else {

  }
#line 467
  req->rq_state = req->rq_state | 1UL;
#line 468
  goto ldv_41318;
  case 19U: ;
#line 471
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 472
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 474
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 476
  req->rq_state = req->rq_state | 6UL;
#line 477
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 479
  _req_may_be_done(req, m);
#line 480
  put_ldev(mdev);
#line 481
  goto ldv_41318;
  case 18U: 
#line 484
  req->rq_state = req->rq_state | 2UL;
#line 485
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 487
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 490
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 491
  _req_may_be_done(req, m);
#line 492
  put_ldev(mdev);
#line 493
  goto ldv_41318;
  case 17U: 
#line 497
  req->rq_state = req->rq_state | 2UL;
#line 498
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 499
  _req_may_be_done(req, m);
#line 500
  put_ldev(mdev);
#line 501
  goto ldv_41318;
  case 16U: 
#line 504
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         504U);
#line 506
  req->rq_state = req->rq_state | 2UL;
#line 507
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 509
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 509
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 509
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 512
  if ((req->rq_state & 504UL) != 0UL) {
#line 512
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 512
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 512
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           512);
  } else {

  }
#line 513
  req->rq_state = req->rq_state | 8UL;
#line 514
  inc_ap_pending(mdev);
#line 516
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 517
  put_ldev(mdev);
  case 4U: 
#line 537
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 537
  hlist_add_head(& req->colision, tmp___11);
#line 539
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 541
  if ((req->rq_state & 8UL) == 0UL) {
#line 541
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 541
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 541
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           541);
  } else {

  }
#line 542
  req->rq_state = req->rq_state | 16UL;
#line 543
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 546
  drbd_queue_work(& mdev->data.work, & req->w);
#line 547
  goto ldv_41318;
  case 3U: 
#line 553
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 553
  hlist_add_head(& req->colision, tmp___14);
#line 573
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 577
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 577
  if (tmp___17 != 0) {
#line 577
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           577);
  } else {

  }
#line 579
  req->epoch = (mdev->newest_tle)->br_number;
#line 580
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 584
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 587
  if ((req->rq_state & 8UL) == 0UL) {
#line 587
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 587
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 587
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           587);
  } else {

  }
#line 588
  req->rq_state = req->rq_state | 16UL;
#line 589
  req->w.cb = & w_send_dblock;
#line 590
  drbd_queue_work(& mdev->data.work, & req->w);
#line 593
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 594
    queue_barrier(mdev);
  } else {

  }
#line 596
  goto ldv_41318;
  case 5U: ;
  case 6U: 
#line 603
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 606
  _req_may_be_done(req, m);
#line 607
  goto ldv_41318;
  case 7U: ;
#line 611
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 615
    if ((req->rq_state & 8UL) != 0UL) {
#line 616
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 616
      if (tmp___20 != 0) {
#line 616
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 616
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 616
      if (tmp___24 < 0) {
#line 616
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 616
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 616
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 616
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 616, tmp___21);
      } else {

      }
#line 617
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 618
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 624
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 625
  req->rq_state = req->rq_state | 32UL;
#line 631
  _req_may_be_done(req, m);
#line 632
  goto ldv_41318;
  case 8U: ;
#line 637
  if ((req->rq_state & 8UL) != 0UL) {
#line 638
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 638
    if (tmp___25 != 0) {
#line 638
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 638
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 638
    if (tmp___29 < 0) {
#line 638
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 638
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 638, tmp___26);
    } else {

    }
  } else {

  }
#line 639
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 640
  req->rq_state = req->rq_state | 64UL;
#line 643
  if ((req->rq_state & 16UL) == 0UL) {
#line 644
    _req_may_be_done(req, m);
  } else {

  }
#line 645
  goto ldv_41318;
  case 11U: 
#line 648
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 653
  if ((unsigned int )what == 12U) {
#line 654
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 657
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 675
  req->rq_state = req->rq_state | 128UL;
#line 676
  if ((req->rq_state & 8UL) == 0UL) {
#line 676
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 676
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 676
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           676);
  } else {

  }
#line 677
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 677
  if (tmp___34 != 0) {
#line 677
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 677
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 677
  if (tmp___38 < 0) {
#line 677
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 677
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 677, tmp___35);
  } else {

  }
#line 678
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 679
  _req_may_be_done(req, m);
#line 680
  goto ldv_41318;
  case 13U: ;
#line 684
  if ((req->rq_state & 8UL) != 0UL) {
#line 685
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 685
    if (tmp___39 != 0) {
#line 685
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 685
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
    if (tmp___43 < 0) {
#line 685
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 685, tmp___40);
    } else {

    }
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 688
  req->rq_state = req->rq_state | 64UL;
#line 689
  _req_may_be_done(req, m);
#line 691
  goto ldv_41318;
  case 14U: ;
#line 694
  if ((req->rq_state & 8UL) != 0UL) {
#line 698
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 698
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 698
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 699
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 701
  if ((req->rq_state & 32UL) == 0UL) {
#line 701
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 701
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 701
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           701);
  } else {

  }
#line 702
  req->rq_state = req->rq_state | 64UL;
#line 703
  _req_may_be_done(req, m);
#line 704
  goto ldv_41318;
  case 15U: ;
#line 707
  if ((req->rq_state & 8UL) == 0UL) {
#line 707
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           707);
  } else {

  }
#line 708
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 708
  if (tmp___50 != 0) {
#line 708
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 708
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 708
  if (tmp___54 < 0) {
#line 708
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 708
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 708
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 708
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 708, tmp___51);
  } else {

  }
#line 709
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 710
  req->rq_state = req->rq_state | 192UL;
#line 711
  _req_may_be_done(req, m);
#line 712
  goto ldv_41318;
  }
  ldv_41318: ;
#line 714
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 728
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 729
    return (1);
  } else {

  }
#line 730
  if ((int )mdev->state.ldv_32691.disk > 4) {
#line 731
    return (0);
  } else {

  }
#line 732
  if ((int )mdev->state.ldv_32691.disk <= 3) {
#line 733
    return (0);
  } else {

  }
#line 735
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 736
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 738
  if (sector >= nr_sectors) {
#line 738
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 738
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 738
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           738);
  } else {

  }
#line 739
  if (esector >= nr_sectors) {
#line 739
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           739);
  } else {

  }
#line 741
  sbnr = sector >> 3;
#line 742
  ebnr = esector >> 3;
#line 744
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 744
  return (tmp___3 == 0);
}
}
#line 747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 749
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 750
  size = (int const   )bio->bi_size;
#line 751
  sector = bio->bi_sector;
#line 752
  b = 0;
#line 755
  err = -5;
#line 758
  req = drbd_req_new(mdev, bio);
#line 759
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 760
    dec_ap_bio(mdev);
#line 763
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 764
    bio_endio(bio, -12);
#line 765
    return (0);
  } else {

  }
#line 768
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 769
  if (local == 0) {
#line 770
    bio_put(req->private_bio);
#line 771
    req->private_bio = 0;
  } else {

  }
#line 773
  if (rw == 1) {
#line 774
    remote = 1;
  } else {
#line 777
    if (local != 0) {
#line 778
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 778
      if (tmp___1 == 0) {
#line 784
        local = 0;
#line 785
        bio_put(req->private_bio);
#line 786
        req->private_bio = 0;
#line 787
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 790
    remote = local == 0 && (int )mdev->state.ldv_32691.pdsk > 7;
  }
#line 801
  if ((rw == 2 && (int )mdev->state.ldv_32691.disk > 3) && local == 0) {
#line 802
    err = -11;
#line 803
    goto fail_and_free_req;
  } else {

  }
#line 811
  if (rw == 1 && local != 0) {
#line 812
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 814
  remote = remote != 0 && (*((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_32691.conn > 9));
#line 818
  if (local == 0 && remote == 0) {
#line 819
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 819
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 819
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 820
    goto fail_free_complete;
  } else {

  }
#line 829
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 829
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 829
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 833
      tmp___4 = kmalloc___2(56UL, 16U);
#line 833
      b = (struct drbd_tl_epoch *)tmp___4;
#line 834
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 835
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 836
        err = -12;
#line 837
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 842
  spin_lock_irq(& mdev->req_lock);
#line 844
  if (remote != 0) {
#line 845
    remote = *((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_32691.conn > 9);
#line 848
    if (remote == 0) {
#line 849
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 849
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 849
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 850
    if (local == 0 && remote == 0) {
#line 851
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 851
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 851
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 852
      spin_unlock_irq(& mdev->req_lock);
#line 853
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 857
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 858
    mdev->unused_spare_tle = b;
#line 859
    b = 0;
  } else {

  }
#line 861
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 861
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 861
    if (tmp___12 != 0) {
#line 866
      spin_unlock_irq(& mdev->req_lock);
#line 867
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 872
  _drbd_start_io_acct(mdev, req, bio);
#line 884
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 884
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 884
    if (tmp___16 != 0) {
#line 886
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 887
      mdev->unused_spare_tle = 0;
    } else {
#line 884
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 889
  if (remote != 0 && rw == 1) {
#line 889
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 889
    if (tmp___15 != 0) {
#line 889
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             890);
    } else {

    }
  } else {

  }
#line 908
  if (remote != 0) {
#line 909
    _req_mod(req, to_be_send);
  } else {

  }
#line 910
  if (local != 0) {
#line 911
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 916
  if (rw == 1) {
#line 916
    tmp___22 = _req_conflicts(req);
#line 916
    if (tmp___22 != 0) {
#line 923
      if (local != 0) {
#line 924
        bio_put(req->private_bio);
#line 925
        req->private_bio = 0;
#line 926
        drbd_al_complete_io(mdev, req->sector);
#line 927
        put_ldev(mdev);
#line 928
        local = 0;
      } else {

      }
#line 930
      if (remote != 0) {
#line 931
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 931
        if (tmp___17 != 0) {
#line 931
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 931
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 931
        if (tmp___21 < 0) {
#line 931
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 931
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 931, tmp___18);
        } else {

        }
      } else {

      }
#line 932
      _drbd_end_io_acct(mdev, req);
#line 934
      bio_endio(req->master_bio, 0);
#line 935
      req->master_bio = 0;
#line 936
      dec_ap_bio(mdev);
#line 937
      drbd_req_free(req);
#line 938
      remote = 0;
    } else {

    }
  } else {

  }
#line 943
  if (remote != 0) {
#line 948
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 952
  spin_unlock_irq(& mdev->req_lock);
#line 953
  kfree((void const   *)b);
#line 955
  if (local != 0) {
#line 956
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 958
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 958
    if (tmp___23 != 0) {
#line 961
      bio_endio(req->private_bio, -5);
    } else {
#line 963
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 968
  drbd_plug_device(mdev);
#line 970
  return (0);
  fail_free_complete: ;
#line 973
  if (rw == 1 && local != 0) {
#line 974
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 976
  if (local != 0) {
#line 977
    bio_put(req->private_bio);
#line 978
    req->private_bio = 0;
#line 979
    put_ldev(mdev);
  } else {

  }
#line 981
  bio_endio(bio, err);
#line 982
  drbd_req_free(req);
#line 983
  dec_ap_bio(mdev);
#line 984
  kfree((void const   *)b);
#line 986
  return (0);
}
}
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 997
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 999
    return (1);
  } else {

  }
#line 1001
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1003
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1003
    if (tmp___3 != 0) {
#line 1004
      tmp = get_current();
#line 1004
      tmp___0 = get_current();
#line 1004
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1004
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1004
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1010
    return (1);
  } else {

  }
#line 1022
  if ((int )mdev->state.ldv_32691.disk <= 7 && (int )mdev->state.ldv_32691.pdsk <= 7) {
#line 1023
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1023
    if (tmp___6 != 0) {
#line 1024
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1024
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1024
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 1025
    return (1);
  } else {

  }
#line 1028
  return (0);
}
}
#line 1031 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;

  {
#line 1034
  mdev = (struct drbd_conf *)q->queuedata;
#line 1036
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1036
  if (tmp != 0) {
#line 1037
    bio_endio(bio, -1);
#line 1038
    return (0);
  } else {

  }
#line 1049
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1049
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1049
  if (tmp___1 != 0L) {
#line 1049
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1049
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1049
    if (tmp___3 != 0L) {
#line 1051
      bio_endio(bio, -95);
#line 1052
      return (0);
    } else {

    }
  } else {

  }
#line 1058
  if (bio->bi_size == 0U) {
#line 1058
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1058
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1058);
  } else {

  }
#line 1059
  if ((bio->bi_size & 511U) != 0U) {
#line 1059
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1059);
  } else {

  }
#line 1060
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1060
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1060
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1060
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1060);
  } else {

  }
#line 1064
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1065
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1067
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1067
  if (tmp___11 != 0L) {
#line 1068
    inc_ap_bio(mdev, 1);
#line 1069
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1069
    return (tmp___10);
  } else {

  }
#line 1074
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1076
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1076
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1076
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1080
    bio_endio(bio, -22);
  } else {
#line 1092
    sect = bio->bi_sector;
#line 1093
    sps = 64;
#line 1094
    mask = sps + -1;
#line 1095
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1096
    bp = bio_split(bio, (int )first_sectors);
#line 1107
    inc_ap_bio(mdev, 2);
#line 1109
    if (s_enr + 1U != e_enr) {
#line 1109
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1109
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1109
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             1109);
    } else {

    }
#line 1111
    drbd_make_request_common(mdev, & bp->bio1);
#line 1112
    drbd_make_request_common(mdev, & bp->bio2);
#line 1113
    bio_pair_release(bp);
  }
#line 1115
  return (0);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1133
  mdev = (struct drbd_conf *)q->queuedata;
#line 1134
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1136
  bio_size = bvm->bi_size;
#line 1139
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1141
  if (limit < 0) {
#line 1142
    limit = 0;
  } else {

  }
#line 1143
  if (bio_size == 0U) {
#line 1144
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1145
      limit = (int )bvec->bv_len;
    } else
#line 1146
    if (limit != 0) {
#line 1146
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1146
      if (tmp != 0) {
#line 1147
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1149
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1150
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1151
          _min1 = limit;
#line 1151
          _min2 = backing_limit;
#line 1151
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1153
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1155
  return (limit);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_55(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1163
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1165
  mutex_lock(ldv_func_arg1);
#line 1166
  return;
}
}
#line 1168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1173
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1175
  mutex_unlock(ldv_func_arg1);
#line 1176
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1183
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1185
  mutex_unlock(ldv_func_arg1);
#line 1186
  return;
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 122
__inline static int ldv_mutex_is_locked_64(struct mutex *lock ) ;
#line 155
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_61(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 26
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10328: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10328;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___3(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc___3(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 309 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 311
  page = compound_head(page);
#line 312
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 312
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 312
  if (tmp___0 != 0L) {
#line 312
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (312), "i" (12UL));
    ldv_15323: ;
#line 312
    goto ldv_15323;
  } else {

  }
#line 313
  atomic_inc(& page->_count);
#line 314
  return;
}
}
#line 1066 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1068
  retval = 512;
#line 1070
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1071
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1073
  return ((unsigned short )retval);
}
}
#line 1076 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1078
  tmp = bdev_get_queue(bdev);
#line 1078
  tmp___0 = queue_logical_block_size(tmp);
#line 1078
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1507 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1516
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1517
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1518
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1526
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40840;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32691.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32691.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40840;
  }
  ldv_40840: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1664
  if (error != 0) {
#line 1666
    tmp = spinlock_check(& mdev->req_lock);
#line 1666
    flags = _raw_spin_lock_irqsave(tmp);
#line 1667
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1668
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 108
  md_io.mdev = mdev;
#line 109
  init_completion(& md_io.event);
#line 110
  md_io.error = 0;
#line 112
  if (rw & 1) {
#line 112
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 112
    if (tmp == 0) {
#line 113
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 114
  rw = rw | 192;
  retry: 
#line 117
  bio = bio_alloc(16U, 1);
#line 118
  bio->bi_bdev = bdev->md_bdev;
#line 119
  bio->bi_sector = sector;
#line 120
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 120
  ok = tmp___0 == size;
#line 121
  if (ok == 0) {
#line 122
    goto out;
  } else {

  }
#line 123
  bio->bi_private = (void *)(& md_io);
#line 124
  bio->bi_end_io = & drbd_md_io_complete;
#line 125
  bio->bi_rw = (unsigned long )rw;
#line 127
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 127
  if (tmp___1 != 0) {
#line 128
    bio_endio(bio, -5);
  } else {
#line 130
    submit_bio(rw, bio);
  }
#line 131
  wait_for_completion(& md_io.event);
#line 132
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 137
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 137
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 137
  if (tmp___5 != 0L) {
#line 137
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 137
    if (tmp___6 != 0L) {
#line 139
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 140
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 141
      rw = rw & -33;
#line 142
      bio_put(bio);
#line 143
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 146
  bio_put(bio);
#line 147
  return (ok);
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 154
  offset = 0;
#line 155
  iop = mdev->md_io_page;
#line 157
  tmp___1 = ldv_mutex_is_locked_64(& mdev->md_io_mutex);
#line 157
  if (tmp___1 == 0) {
#line 157
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 157
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 157
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           157);
  } else {

  }
#line 159
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 159
  if (tmp___2 != 0L) {
#line 159
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (159), "i" (12UL));
    ldv_41166: ;
#line 159
    goto ldv_41166;
  } else {

  }
#line 161
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 161
  logical_block_size = (int )tmp___3;
#line 162
  if (logical_block_size == 0) {
#line 163
    logical_block_size = 512;
  } else {

  }
#line 166
  if (logical_block_size != 512) {
#line 167
    mask = logical_block_size / 512 + -1;
#line 168
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 168
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 168
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 168
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             168);
    } else {

    }
#line 169
    if ((mask + 1) * 512 != logical_block_size) {
#line 169
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 169
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 169
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             169);
    } else {

    }
#line 170
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 171
    sector = (sector_t )(~ mask) & sector;
#line 172
    iop = mdev->md_io_tmpp;
#line 174
    if (rw & 1) {
#line 177
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 177
      p = tmp___8;
#line 178
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 178
      hp = tmp___9;
#line 180
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 183
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 183
      if (tmp___12 != 0L) {
#line 184
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 187
        return (0);
      } else {

      }
#line 190
      __len = 512UL;
#line 190
      if (__len > 63UL) {
#line 190
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 190
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 194
  tmp___17 = drbd_md_first_sector(bdev);
#line 194
  if (tmp___17 > sector) {
#line 196
    tmp___13 = get_current();
#line 196
    tmp___14 = get_current();
#line 196
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 196
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 196
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 194
    tmp___18 = drbd_md_last_sector(bdev);
#line 194
    if (tmp___18 < sector) {
#line 196
      tmp___13 = get_current();
#line 196
      tmp___14 = get_current();
#line 196
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 196
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 196
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 200
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 201
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 201
  if (tmp___21 != 0L) {
#line 202
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 202
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 202
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 204
    return (0);
  } else {

  }
#line 207
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 208
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 208
    p___0 = tmp___22;
#line 209
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 209
    hp___0 = tmp___23;
#line 211
    __len___0 = 512UL;
#line 211
    if (__len___0 > 63UL) {
#line 211
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 211
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 214
  return (ok);
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 221
  al_flags = 0UL;
#line 223
  spin_lock_irq(& mdev->al_lock);
#line 224
  tmp = lc_find(mdev->resync, enr / 4U);
#line 225
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 225
  if (tmp___1 != 0L) {
#line 226
    __mptr = (struct lc_element  const  *)tmp;
#line 226
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 227
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 227
    if (tmp___0 != 0) {
#line 228
      spin_unlock_irq(& mdev->al_lock);
#line 229
      return (0);
    } else {

    }
  } else {

  }
#line 232
  al_ext = lc_get(mdev->act_log, enr);
#line 233
  al_flags = (mdev->act_log)->flags;
#line 234
  spin_unlock_irq(& mdev->al_lock);
#line 245
  return (al_ext);
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 250
  enr = (unsigned int )(sector >> 13);
#line 254
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 254
  if (tmp___1 <= 0) {
#line 254
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 254
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 254
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           254);
  } else {

  }
#line 256
  al_ext = _al_get(mdev, enr);
#line 256
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 256
    goto ldv_41195;
  } else {

  }
#line 256
  tmp___2 = get_current();
#line 256
  __wait.flags = 0U;
#line 256
  __wait.private = (void *)tmp___2;
#line 256
  __wait.func = & autoremove_wake_function;
#line 256
  __wait.task_list.next = & __wait.task_list;
#line 256
  __wait.task_list.prev = & __wait.task_list;
  ldv_41198: 
#line 256
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 256
  al_ext = _al_get(mdev, enr);
#line 256
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 256
    goto ldv_41197;
  } else {

  }
#line 256
  schedule();
#line 256
  goto ldv_41198;
  ldv_41197: 
#line 256
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41195: ;
#line 258
  if (al_ext->lc_number != enr) {
#line 265
    init_completion(& al_work.event);
#line 266
    al_work.al_ext = al_ext;
#line 267
    al_work.enr = enr;
#line 268
    al_work.old_enr = al_ext->lc_number;
#line 269
    al_work.w.cb = & w_al_write_transaction;
#line 270
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 271
    wait_for_completion(& al_work.event);
#line 273
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 275
    spin_lock_irq(& mdev->al_lock);
#line 276
    lc_changed(mdev->act_log, al_ext);
#line 277
    spin_unlock_irq(& mdev->al_lock);
#line 278
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 280
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 284
  enr = (unsigned int )(sector >> 13);
#line 288
  tmp = spinlock_check(& mdev->al_lock);
#line 288
  flags = _raw_spin_lock_irqsave(tmp);
#line 290
  extent = lc_find(mdev->act_log, enr);
#line 292
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 293
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 294
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___1, tmp___0,
           enr);
#line 295
    return;
  } else {

  }
#line 298
  tmp___2 = lc_put(mdev->act_log, extent);
#line 298
  if (tmp___2 == 0U) {
#line 299
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 301
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 302
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 307
  __mptr = (struct drbd_work  const  *)w;
#line 307
  aw = (struct update_al_work *)__mptr;
#line 308
  updated = aw->al_ext;
#line 309
  new_enr = aw->enr;
#line 310
  evicted = aw->old_enr;
#line 315
  xor_sum = 0U;
#line 317
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 317
  if (tmp___1 == 0) {
#line 318
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 319
    complete(& ((struct update_al_work *)w)->event);
#line 320
    return (1);
  } else {

  }
#line 326
  if ((int )mdev->state.ldv_32691.conn <= 9 && evicted != 4294967295U) {
#line 327
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 329
  ldv_mutex_lock_65(& mdev->md_io_mutex);
#line 330
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 330
  buffer = (struct al_transaction *)tmp___2;
#line 332
  buffer->magic = 1728214147U;
#line 333
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 333
  buffer->tr_number = tmp___3;
#line 335
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 335
  n = (int )tmp___4;
#line 337
  tmp___5 = __fswab32((__u32 )n);
#line 337
  buffer->updates[0].pos = tmp___5;
#line 338
  tmp___6 = __fswab32(new_enr);
#line 338
  buffer->updates[0].extent = tmp___6;
#line 340
  xor_sum = xor_sum ^ new_enr;
#line 342
  __min1 = 61;
#line 342
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 342
  mx = __min1 < __min2 ? __min1 : __min2;
#line 344
  i = 0;
#line 344
  goto ldv_41232;
  ldv_41231: 
#line 345
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 346
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 346
  extent_nr = tmp___7->lc_number;
#line 347
  tmp___8 = __fswab32(idx);
#line 347
  buffer->updates[i + 1].pos = tmp___8;
#line 348
  tmp___9 = __fswab32(extent_nr);
#line 348
  buffer->updates[i + 1].extent = tmp___9;
#line 349
  xor_sum = xor_sum ^ extent_nr;
#line 344
  i = i + 1;
  ldv_41232: ;
#line 344
  if (i < mx) {
#line 345
    goto ldv_41231;
  } else {

  }

#line 351
  goto ldv_41235;
  ldv_41234: 
#line 352
  buffer->updates[i + 1].pos = 4294967295U;
#line 353
  buffer->updates[i + 1].extent = 4294967295U;
#line 354
  xor_sum = ~ xor_sum;
#line 351
  i = i + 1;
  ldv_41235: ;
#line 351
  if (i <= 60) {
#line 352
    goto ldv_41234;
  } else {

  }
#line 356
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 357
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 358
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 360
  tmp___10 = __fswab32(xor_sum);
#line 360
  buffer->xor_sum = tmp___10;
#line 362
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 365
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 365
  if (tmp___11 == 0) {
#line 366
    drbd_chk_io_error____1(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 368
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 368
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 370
    mdev->al_tr_pos = 0;
  } else {

  }
#line 372
  if (mdev->al_tr_pos > 63) {
#line 372
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 372
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 372
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           372);
  } else {

  }
#line 373
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 375
  ldv_mutex_unlock_66(& mdev->md_io_mutex);
#line 377
  complete(& ((struct update_al_work *)w)->event);
#line 378
  put_ldev(mdev);
#line 380
  return (1);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 399
  xor_sum = 0U;
#line 401
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 405
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 405
  if (tmp == 0) {
#line 406
    return (-1);
  } else {

  }
#line 408
  tmp___0 = __fswab32(b->magic);
#line 408
  rv = tmp___0 == 2205418087U;
#line 410
  i = 0;
#line 410
  goto ldv_41249;
  ldv_41248: 
#line 411
  tmp___1 = __fswab32(b->updates[i].extent);
#line 411
  xor_sum = tmp___1 ^ xor_sum;
#line 410
  i = i + 1;
  ldv_41249: ;
#line 410
  if (i <= 61) {
#line 411
    goto ldv_41248;
  } else {

  }
#line 412
  tmp___2 = __fswab32(b->xor_sum);
#line 412
  rv = (tmp___2 == xor_sum) & rv;
#line 414
  return (rv);
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 430
  active_extents = 0;
#line 431
  transactions = 0;
#line 432
  found_valid = 0;
#line 433
  from = 0;
#line 434
  to = 0;
#line 435
  from_tnr = 0U;
#line 436
  to_tnr = 0U;
#line 439
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 444
  ldv_mutex_lock_67(& mdev->md_io_mutex);
#line 445
  tmp = lowmem_page_address(mdev->md_io_page);
#line 445
  buffer = (struct al_transaction *)tmp;
#line 448
  i = 0;
#line 448
  goto ldv_41269;
  ldv_41268: 
#line 449
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 450
  if (rv == 0) {
#line 451
    goto ldv_41267;
  } else {

  }
#line 452
  if (rv == -1) {
#line 453
    ldv_mutex_unlock_68(& mdev->md_io_mutex);
#line 454
    return (0);
  } else {

  }
#line 456
  tmp___0 = __fswab32(buffer->tr_number);
#line 456
  cnr = tmp___0;
#line 458
  found_valid = found_valid + 1;
#line 458
  if (found_valid == 1) {
#line 459
    from = i;
#line 460
    to = i;
#line 461
    from_tnr = cnr;
#line 462
    to_tnr = cnr;
#line 463
    goto ldv_41267;
  } else {

  }
#line 465
  if ((int )cnr - (int )from_tnr < 0) {
#line 466
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 466
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 466
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 466
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             466);
    } else {

    }
#line 467
    from = i;
#line 468
    from_tnr = cnr;
  } else {

  }
#line 470
  if ((int )cnr - (int )to_tnr > 0) {
#line 471
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 471
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 471
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 471
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             471);
    } else {

    }
#line 472
    to = i;
#line 473
    to_tnr = cnr;
  } else {

  }
  ldv_41267: 
#line 448
  i = i + 1;
  ldv_41269: ;
#line 448
  if (i <= mx) {
#line 449
    goto ldv_41268;
  } else {

  }

#line 477
  if (found_valid == 0) {
#line 478
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 478
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 478
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 479
    ldv_mutex_unlock_69(& mdev->md_io_mutex);
#line 480
    return (1);
  } else {

  }
#line 485
  i = from;
  ldv_41284: 
#line 491
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 492
  _b = rv == 0;
#line 492
  if (_b != 0) {
#line 492
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 492
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 492
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           492);
  } else {

  }
#line 492
  if (_b != 0) {
#line 492
    goto cancel;
  } else {

  }
#line 493
  if (rv == -1) {
#line 494
    ldv_mutex_unlock_70(& mdev->md_io_mutex);
#line 495
    return (0);
  } else {

  }
#line 498
  tmp___9 = __fswab32(buffer->tr_number);
#line 498
  trn = tmp___9;
#line 500
  spin_lock_irq(& mdev->al_lock);
#line 506
  j = 61;
#line 506
  goto ldv_41281;
  ldv_41280: 
#line 507
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 507
  pos = (int )tmp___10;
#line 508
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 508
  extent_nr = tmp___11;
#line 510
  if (extent_nr == 4294967295U) {
#line 511
    goto ldv_41279;
  } else {

  }
#line 513
  lc_set(mdev->act_log, extent_nr, pos);
#line 514
  active_extents = active_extents + 1;
  ldv_41279: 
#line 506
  j = j - 1;
  ldv_41281: ;
#line 506
  if (j >= 0) {
#line 507
    goto ldv_41280;
  } else {

  }
#line 516
  spin_unlock_irq(& mdev->al_lock);
#line 518
  transactions = transactions + 1;
  cancel: ;
#line 521
  if (i == to) {
#line 522
    goto ldv_41283;
  } else {

  }
#line 523
  i = i + 1;
#line 524
  if (i > mx) {
#line 525
    i = 0;
  } else {

  }
#line 526
  goto ldv_41284;
  ldv_41283: 
#line 528
  mdev->al_tr_number = to_tnr + 1U;
#line 529
  mdev->al_tr_pos = to;
#line 530
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 530
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 532
    mdev->al_tr_pos = 0;
  } else {

  }
#line 535
  ldv_mutex_unlock_71(& mdev->md_io_mutex);
#line 537
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 537
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 537
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 540
  return (1);
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 545
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 546
  mdev = wc->mdev;
#line 548
  uptodate = (int )bio->bi_flags & 1;
#line 553
  if (error == 0 && uptodate == 0) {
#line 554
    error = -5;
  } else {

  }
#line 556
  drbd_chk_io_error____1(mdev, error, 1, "atodb_endio");
#line 557
  if (error != 0 && wc->error == 0) {
#line 558
    wc->error = error;
  } else {

  }
#line 560
  tmp = atomic_dec_and_test(& wc->count);
#line 560
  if (tmp != 0) {
#line 561
    complete(& wc->io_done);
  } else {

  }
#line 563
  page = (bio->bi_io_vec)->bv_page;
#line 564
  put_page(page);
#line 565
  bio_put(bio);
#line 566
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 567
  put_ldev(mdev);
#line 568
  return;
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 580
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 582
  page_offset___0 = 4096U;
#line 584
  i = 0;
#line 585
  err = -12;
#line 594
  goto ldv_41308;
  ldv_41307: ;
#line 595
  if (bio->bi_sector == on_disk_sector) {
#line 596
    return (0);
  } else {

  }
#line 597
  i = i + 1;
  ldv_41308: 
#line 594
  bio = *(bios + (unsigned long )i);
#line 594
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 595
    goto ldv_41307;
  } else {

  }
#line 602
  bio = bio_alloc(208U, 1);
#line 603
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 604
    return (-12);
  } else {

  }
#line 606
  if (i > 0) {
#line 607
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 608
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 609
    page = prev_bv->bv_page;
  } else {

  }
#line 611
  if (page_offset___0 == 4096U) {
#line 612
    page = alloc_pages(2U, 0U);
#line 613
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 614
      goto out_bio_put;
    } else {

    }
#line 615
    page_offset___0 = 0U;
  } else {
#line 617
    get_page(page);
  }
#line 620
  offset = (int )(enr << 6);
#line 621
  tmp = kmap(page);
#line 622
  __min1 = 64UL;
#line 622
  tmp___0 = drbd_bm_words(mdev);
#line 622
  __min2 = tmp___0 - (size_t )offset;
#line 622
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 624
  kunmap(page);
#line 626
  bio->bi_private = (void *)wc;
#line 627
  bio->bi_end_io = & atodb_endio;
#line 628
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 629
  bio->bi_sector = on_disk_sector;
#line 631
  tmp___1 = bio_add_page(bio, page, 512U, page_offset___0);
#line 631
  if (tmp___1 != 512) {
#line 632
    goto out_put_page;
  } else {

  }
#line 634
  atomic_inc(& wc->count);
#line 640
  atomic_inc(& mdev->local_cnt);
#line 642
  *(bios + (unsigned long )i) = bio;
#line 644
  return (0);
  out_put_page: 
#line 647
  err = -22;
#line 648
  put_page(page);
  out_bio_put: 
#line 650
  bio_put(bio);
#line 651
  return (err);
}
}
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 668
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 668
  _b = tmp == 0;
#line 668
  if (_b != 0) {
#line 668
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 668
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 668
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           668);
  } else {

  }
#line 668
  if (_b != 0) {
#line 669
    return;
  } else {

  }
#line 671
  tmp___2 = lc_try_lock(mdev->act_log);
#line 671
  if (tmp___2 != 0) {
#line 671
    goto ldv_41327;
  } else {

  }
#line 671
  tmp___3 = get_current();
#line 671
  __wait.flags = 0U;
#line 671
  __wait.private = (void *)tmp___3;
#line 671
  __wait.func = & autoremove_wake_function;
#line 671
  __wait.task_list.next = & __wait.task_list;
#line 671
  __wait.task_list.prev = & __wait.task_list;
  ldv_41330: 
#line 671
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 671
  tmp___4 = lc_try_lock(mdev->act_log);
#line 671
  if (tmp___4 != 0) {
#line 671
    goto ldv_41329;
  } else {

  }
#line 671
  schedule();
#line 671
  goto ldv_41330;
  ldv_41329: 
#line 671
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41327: 
#line 673
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 676
  tmp___5 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 676
  bios = (struct bio **)tmp___5;
#line 677
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 678
    goto submit_one_by_one;
  } else {

  }
#line 680
  atomic_set(& wc.count, 0);
#line 681
  init_completion(& wc.io_done);
#line 682
  wc.mdev = mdev;
#line 683
  wc.error = 0;
#line 685
  i = 0;
#line 685
  goto ldv_41335;
  ldv_41334: 
#line 686
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 686
  enr = tmp___6->lc_number;
#line 687
  if (enr == 4294967295U) {
#line 688
    goto ldv_41332;
  } else {

  }
#line 690
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 690
  if (tmp___7 != 0) {
#line 693
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_41332: 
#line 685
  i = i + 1;
  ldv_41335: ;
#line 685
  if (i < nr_elements) {
#line 686
    goto ldv_41334;
  } else {

  }
#line 697
  lc_unlock(mdev->act_log);
#line 698
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 701
  i = 0;
#line 701
  goto ldv_41339;
  ldv_41338: ;
#line 702
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 703
    goto ldv_41337;
  } else {

  }
#line 704
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 704
  if (tmp___8 != 0) {
#line 705
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 706
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 708
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 701
  i = i + 1;
  ldv_41339: ;
#line 701
  if (i < nr_elements) {
#line 702
    goto ldv_41338;
  } else {

  }
  ldv_41337: 
#line 712
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 712
  drbd_blk_run_queue(tmp___9);
#line 715
  drbd_md_flush(mdev);
#line 723
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 723
  if (tmp___10 != 0) {
#line 724
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 726
  put_ldev(mdev);
#line 728
  kfree((void const   *)bios);
#line 729
  return;
  free_bios_submit_one_by_one: 
#line 733
  i = 0;
#line 733
  goto ldv_41341;
  ldv_41340: 
#line 734
  bio_endio(*(bios + (unsigned long )i), 0);
#line 733
  i = i + 1;
  ldv_41341: ;
#line 733
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 734
    goto ldv_41340;
  } else {

  }
#line 736
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 739
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 741
  i = 0;
#line 741
  goto ldv_41345;
  ldv_41344: 
#line 742
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 742
  enr = tmp___13->lc_number;
#line 743
  if (enr == 4294967295U) {
#line 744
    goto ldv_41343;
  } else {

  }
#line 747
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_41343: 
#line 741
  i = i + 1;
  ldv_41345: ;
#line 741
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 742
    goto ldv_41344;
  } else {

  }
#line 750
  lc_unlock(mdev->act_log);
#line 751
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 752
  put_ldev(mdev);
#line 753
  return;
}
}
#line 759 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 762
  add = 0UL;
#line 766
  tmp = lc_try_lock(mdev->act_log);
#line 766
  if (tmp != 0) {
#line 766
    goto ldv_41354;
  } else {

  }
#line 766
  tmp___0 = get_current();
#line 766
  __wait.flags = 0U;
#line 766
  __wait.private = (void *)tmp___0;
#line 766
  __wait.func = & autoremove_wake_function;
#line 766
  __wait.task_list.next = & __wait.task_list;
#line 766
  __wait.task_list.prev = & __wait.task_list;
  ldv_41357: 
#line 766
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 766
  tmp___1 = lc_try_lock(mdev->act_log);
#line 766
  if (tmp___1 != 0) {
#line 766
    goto ldv_41356;
  } else {

  }
#line 766
  schedule();
#line 766
  goto ldv_41357;
  ldv_41356: 
#line 766
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41354: 
#line 768
  i = 0;
#line 768
  goto ldv_41360;
  ldv_41359: 
#line 769
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 769
  enr = tmp___2->lc_number;
#line 770
  if (enr == 4294967295U) {
#line 771
    goto ldv_41358;
  } else {

  }
#line 772
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 772
  add = tmp___3 + add;
  ldv_41358: 
#line 768
  i = i + 1;
  ldv_41360: ;
#line 768
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 769
    goto ldv_41359;
  } else {

  }
#line 775
  lc_unlock(mdev->act_log);
#line 776
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 778
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 778
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 779
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 786
  spin_lock_irq(& mdev->al_lock);
#line 787
  rv = al_ext->refcnt == 0U;
#line 788
  tmp = __builtin_expect(rv != 0, 1L);
#line 788
  if (tmp != 0L) {
#line 789
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 790
  spin_unlock_irq(& mdev->al_lock);
#line 792
  return (rv);
}
}
#line 804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 809
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 809
  if (tmp___1 == 0) {
#line 809
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 809
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 809
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           809);
  } else {

  }
#line 811
  i = 0;
#line 811
  goto ldv_41378;
  ldv_41377: 
#line 812
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 813
  if (al_ext->lc_number == 4294967295U) {
#line 814
    goto ldv_41372;
  } else {

  }
#line 815
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 815
  if (tmp___2 != 0) {
#line 815
    goto ldv_41373;
  } else {

  }
#line 815
  tmp___3 = get_current();
#line 815
  __wait.flags = 0U;
#line 815
  __wait.private = (void *)tmp___3;
#line 815
  __wait.func = & autoremove_wake_function;
#line 815
  __wait.task_list.next = & __wait.task_list;
#line 815
  __wait.task_list.prev = & __wait.task_list;
  ldv_41376: 
#line 815
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 815
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 815
  if (tmp___4 != 0) {
#line 815
    goto ldv_41375;
  } else {

  }
#line 815
  schedule();
#line 815
  goto ldv_41376;
  ldv_41375: 
#line 815
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41373: ;
  ldv_41372: 
#line 811
  i = i + 1;
  ldv_41378: ;
#line 811
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 812
    goto ldv_41377;
  } else {

  }
#line 818
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 819
  return;
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 823
  __mptr = (struct drbd_work  const  *)w;
#line 823
  udw = (struct update_odbm_work *)__mptr;
#line 825
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 825
  if (tmp___2 == 0) {
#line 826
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 826
    if (tmp___1 != 0) {
#line 827
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 828
    kfree((void const   *)udw);
#line 829
    return (1);
  } else {

  }
#line 832
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 833
  put_ldev(mdev);
#line 835
  kfree((void const   *)udw);
#line 837
  tmp___3 = drbd_bm_total_weight(mdev);
#line 837
  if (tmp___3 <= mdev->rs_failed) {
#line 838
    switch ((int )mdev->state.ldv_32691.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 841
    drbd_resync_finished(mdev);
    default: ;
#line 844
    goto ldv_41394;
    }
    ldv_41394: ;
  } else {

  }
#line 847
  drbd_bcast_sync_progress(mdev);
#line 849
  return (1);
}
}
#line 859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 867
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 867
  if (tmp___1 == 0) {
#line 867
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           867);
  } else {

  }
#line 871
  enr = (unsigned int )(sector >> 15);
#line 873
  e = lc_get(mdev->resync, enr);
#line 874
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 875
    __mptr = (struct lc_element  const  *)e;
#line 875
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 876
    if (ext->lce.lc_number == enr) {
#line 877
      if (success != 0) {
#line 878
        ext->rs_left = ext->rs_left - count;
      } else {
#line 880
        ext->rs_failed = ext->rs_failed + count;
      }
#line 881
      if (ext->rs_left < ext->rs_failed) {
#line 882
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 882
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 882
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 887
        dump_stack();
#line 889
        lc_put(mdev->resync, & ext->lce);
#line 890
        val.i = 0U;
#line 890
        val.ldv_32691.conn = 1U;
#line 890
        mask.i = 0U;
#line 890
        mask.ldv_32691.conn = 31U;
#line 890
        drbd_force_state(mdev, mask, val);
#line 891
        return;
      } else {

      }
    } else {
#line 900
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 900
      rs_left = tmp___4;
#line 901
      if (ext->flags != 0UL) {
#line 902
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 902
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 902
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 906
        ext->flags = 0UL;
      } else {

      }
#line 908
      if (ext->rs_failed != 0) {
#line 909
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 912
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 914
      ext->rs_left = rs_left;
#line 915
      ext->rs_failed = success == 0 ? count : 0;
#line 916
      lc_changed(mdev->resync, & ext->lce);
    }
#line 918
    lc_put(mdev->resync, & ext->lce);
#line 921
    if (ext->rs_left == ext->rs_failed) {
#line 922
      ext->rs_failed = 0;
#line 924
      tmp___9 = kmalloc___3(32UL, 32U);
#line 924
      udw = (struct update_odbm_work *)tmp___9;
#line 925
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 926
        udw->enr = ext->lce.lc_number;
#line 927
        udw->w.cb = & w_update_odbm;
#line 928
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 930
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 930
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 930
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 931
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 935
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 935
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 935
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 936
  return;
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 954
  count = 0UL;
#line 956
  wake_up = 0;
#line 959
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 960
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 962
    return;
  } else {

  }
#line 964
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 965
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 967
  _b = sector >= nr_sectors;
#line 967
  if (_b != 0) {
#line 967
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 967
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 967
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           967);
  } else {

  }
#line 967
  if (_b != 0) {
#line 967
    return;
  } else {

  }
#line 968
  _b___0 = esector >= nr_sectors;
#line 968
  if (_b___0 != 0) {
#line 968
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           968);
  } else {

  }
#line 968
  if (_b___0 != 0) {
#line 968
    esector = nr_sectors - 1UL;
  } else {

  }
#line 970
  lbnr = (nr_sectors - 1UL) >> 3;
#line 975
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 975
  if (tmp___5 != 0L) {
#line 976
    return;
  } else {

  }
#line 977
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 977
  if (tmp___6 != 0L) {
#line 978
    ebnr = lbnr;
  } else {
#line 980
    ebnr = (esector - 7UL) >> 3;
  }
#line 981
  sbnr = (sector + 7UL) >> 3;
#line 983
  if (sbnr > ebnr) {
#line 984
    return;
  } else {

  }
#line 990
  tmp___7 = spinlock_check(& mdev->al_lock);
#line 990
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 991
  tmp___8 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 991
  count = (unsigned long )tmp___8;
#line 992
  if (count != 0UL) {
#line 994
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 997
      tmp___9 = drbd_bm_total_weight(mdev);
#line 997
      if ((mdev->rs_mark_left != tmp___9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 902UL) != 320U) {
#line 1000
        mdev->rs_mark_time = jiffies;
#line 1001
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 1004
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1004
    if (tmp___10 != 0) {
#line 1005
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1006
      put_ldev(mdev);
    } else {

    }
#line 1010
    wake_up = 1;
  } else {

  }
#line 1012
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1013
  if (wake_up != 0) {
#line 1014
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1015
  return;
}
}
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  int tmp___7 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1033
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1034
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1036
    return;
  } else {

  }
#line 1039
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1039
  if (tmp___1 == 0) {
#line 1040
    return;
  } else {

  }
#line 1042
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1043
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1045
  _b = sector >= nr_sectors;
#line 1045
  if (_b != 0) {
#line 1045
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1045);
  } else {

  }
#line 1045
  if (_b != 0) {
#line 1046
    goto out;
  } else {

  }
#line 1047
  _b___0 = esector >= nr_sectors;
#line 1047
  if (_b___0 != 0) {
#line 1047
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1047);
  } else {

  }
#line 1047
  if (_b___0 != 0) {
#line 1048
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1050
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1054
  sbnr = sector >> 3;
#line 1055
  ebnr = esector >> 3;
#line 1059
  tmp___6 = spinlock_check(& mdev->al_lock);
#line 1059
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1060
  tmp___7 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1060
  count = (unsigned int )tmp___7;
#line 1062
  enr = (unsigned int )(sector >> 15);
#line 1063
  e = lc_find(mdev->resync, enr);
#line 1064
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1065
    __mptr = (struct lc_element  const  *)e;
#line 1065
    __mptr___0 = (struct lc_element  const  *)e;
#line 1065
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1066
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1069
  put_ldev(mdev);
#line 1070
  return;
}
}
#line 1073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1077
  wakeup = 0;
#line 1080
  spin_lock_irq(& mdev->al_lock);
#line 1081
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1082
    spin_unlock_irq(& mdev->al_lock);
#line 1083
    return (0);
  } else {

  }
#line 1085
  e = lc_get(mdev->resync, enr);
#line 1086
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1086
    __mptr = (struct lc_element  const  *)e;
#line 1086
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1086
    bm_ext = 0;
  }
#line 1087
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1088
    if (bm_ext->lce.lc_number != enr) {
#line 1089
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1090
      bm_ext->rs_failed = 0;
#line 1091
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1092
      wakeup = 1;
    } else {

    }
#line 1094
    if (bm_ext->lce.refcnt == 1U) {
#line 1095
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1096
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1098
  rs_flags = (mdev->resync)->flags;
#line 1099
  spin_unlock_irq(& mdev->al_lock);
#line 1100
  if (wakeup != 0) {
#line 1101
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1103
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1104
    if ((rs_flags & 4UL) != 0UL) {
#line 1105
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1105
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1105
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1107
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1107
    if (tmp___1 != 0L) {
#line 1107
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1107), "i" (12UL));
      ldv_41472: ;
#line 1107
      goto ldv_41472;
    } else {

    }
  } else {

  }
#line 1110
  return (bm_ext);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1116
  rv = 0;
#line 1118
  spin_lock_irq(& mdev->al_lock);
#line 1119
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1119
  if (tmp != 0L) {
#line 1120
    rv = 1;
  } else {
#line 1122
    al_ext = lc_find(mdev->act_log, enr);
#line 1123
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1124
      if (al_ext->refcnt != 0U) {
#line 1125
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1128
  spin_unlock_irq(& mdev->al_lock);
#line 1135
  return (rv);
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1147
  enr = (unsigned int )(sector >> 15);
#line 1151
  __ret = 0;
#line 1151
  bm_ext = _bme_get(mdev, enr);
#line 1151
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1151
    tmp = get_current();
#line 1151
    __wait.flags = 0U;
#line 1151
    __wait.private = (void *)tmp;
#line 1151
    __wait.func = & autoremove_wake_function;
#line 1151
    __wait.task_list.next = & __wait.task_list;
#line 1151
    __wait.task_list.prev = & __wait.task_list;
    ldv_41491: 
#line 1151
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1151
    bm_ext = _bme_get(mdev, enr);
#line 1151
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1151
      goto ldv_41489;
    } else {

    }
#line 1151
    tmp___0 = get_current();
#line 1151
    tmp___1 = signal_pending(tmp___0);
#line 1151
    if (tmp___1 == 0) {
#line 1151
      schedule();
#line 1151
      goto ldv_41490;
    } else {

    }
#line 1151
    __ret = -512;
#line 1151
    goto ldv_41489;
    ldv_41490: ;
#line 1151
    goto ldv_41491;
    ldv_41489: 
#line 1151
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1151
  sig = __ret;
#line 1153
  if (sig != 0) {
#line 1154
    return (0);
  } else {

  }
#line 1156
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1156
  if (tmp___2 != 0) {
#line 1157
    return (1);
  } else {

  }
#line 1159
  i = 0;
#line 1159
  goto ldv_41500;
  ldv_41499: 
#line 1160
  __ret___0 = 0;
#line 1160
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1160
  if (tmp___7 != 0) {
#line 1160
    tmp___3 = get_current();
#line 1160
    __wait___0.flags = 0U;
#line 1160
    __wait___0.private = (void *)tmp___3;
#line 1160
    __wait___0.func = & autoremove_wake_function;
#line 1160
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1160
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_41497: 
#line 1160
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1160
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1160
    if (tmp___4 == 0) {
#line 1160
      goto ldv_41495;
    } else {

    }
#line 1160
    tmp___5 = get_current();
#line 1160
    tmp___6 = signal_pending(tmp___5);
#line 1160
    if (tmp___6 == 0) {
#line 1160
      schedule();
#line 1160
      goto ldv_41496;
    } else {

    }
#line 1160
    __ret___0 = -512;
#line 1160
    goto ldv_41495;
    ldv_41496: ;
#line 1160
    goto ldv_41497;
    ldv_41495: 
#line 1160
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1160
  sig = __ret___0;
#line 1162
  if (sig != 0) {
#line 1163
    spin_lock_irq(& mdev->al_lock);
#line 1164
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1164
    if (tmp___8 == 0U) {
#line 1165
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1166
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1167
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1169
    spin_unlock_irq(& mdev->al_lock);
#line 1170
    return (0);
  } else {

  }
#line 1159
  i = i + 1;
  ldv_41500: ;
#line 1159
  if (i <= 3) {
#line 1160
    goto ldv_41499;
  } else {

  }
#line 1174
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1176
  return (1);
}
}
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1190
  enr = (unsigned int )(sector >> 15);
#line 1191
  al_enr = enr * 4U;
#line 1196
  spin_lock_irq(& mdev->al_lock);
#line 1197
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1211
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1212
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1212
      __mptr = (struct lc_element  const  *)e;
#line 1212
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1212
      bm_ext = 0;
    }
#line 1213
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1214
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1214
      if (tmp___1 != 0) {
#line 1214
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1214
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1214
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1214);
      } else {

      }
#line 1215
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1215
      if (tmp___4 == 0) {
#line 1215
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1215
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1215
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1215);
      } else {

      }
#line 1216
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1217
      mdev->resync_wenr = 4294967295U;
#line 1218
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1218
      if (tmp___5 == 0U) {
#line 1219
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1220
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1222
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1222
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1222
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1226
  e = lc_try_get(mdev->resync, enr);
#line 1227
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1227
    __mptr___0 = (struct lc_element  const  *)e;
#line 1227
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1227
    bm_ext = 0;
  }
#line 1228
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1229
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1229
    if (tmp___8 != 0) {
#line 1230
      goto proceed;
    } else {

    }
#line 1231
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1231
    if (tmp___11 == 0) {
#line 1232
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1238
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1239
      if (bm_ext->lce.refcnt == 0U) {
#line 1239
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1239);
      } else {

      }
    }
#line 1241
    goto check_al;
  } else {
#line 1244
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1245
      goto try_again;
    } else {

    }
#line 1247
    e = lc_get(mdev->resync, enr);
#line 1248
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1248
      __mptr___1 = (struct lc_element  const  *)e;
#line 1248
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1248
      bm_ext = 0;
    }
#line 1249
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1250
      rs_flags = (mdev->resync)->flags;
#line 1251
      if ((rs_flags & 4UL) != 0UL) {
#line 1252
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1252
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1252
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1254
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1254
      if (tmp___14 != 0L) {
#line 1254
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1254), "i" (12UL));
        ldv_41521: ;
#line 1254
        goto ldv_41521;
      } else {

      }
#line 1255
      goto try_again;
    } else {

    }
#line 1257
    if (bm_ext->lce.lc_number != enr) {
#line 1258
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1259
      bm_ext->rs_failed = 0;
#line 1260
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1261
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1262
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1262
      if (tmp___17 != 0) {
#line 1262
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1262
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1262
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1262);
      } else {

      }
    } else {

    }
#line 1264
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1265
    if (bm_ext->lce.refcnt != 1U) {
#line 1265
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1265
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1265
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1265);
    } else {

    }
#line 1266
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1267
    goto check_al;
  }
  check_al: 
#line 1270
  i = 0;
#line 1270
  goto ldv_41523;
  ldv_41522: 
#line 1271
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1271
  if (tmp___20 != 0L) {
#line 1272
    goto try_again;
  } else {

  }
#line 1273
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1273
  if (tmp___21 != 0) {
#line 1274
    goto try_again;
  } else {

  }
#line 1270
  i = i + 1;
  ldv_41523: ;
#line 1270
  if (i <= 3) {
#line 1271
    goto ldv_41522;
  } else {

  }
#line 1276
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1278
  mdev->resync_wenr = 4294967295U;
#line 1279
  spin_unlock_irq(& mdev->al_lock);
#line 1280
  return (0);
  try_again: ;
#line 1283
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1284
    mdev->resync_wenr = enr;
  } else {

  }
#line 1285
  spin_unlock_irq(& mdev->al_lock);
#line 1286
  return (-11);
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;

  {
#line 1291
  enr = (unsigned int )(sector >> 15);
#line 1296
  tmp = spinlock_check(& mdev->al_lock);
#line 1296
  flags = _raw_spin_lock_irqsave(tmp);
#line 1297
  e = lc_find(mdev->resync, enr);
#line 1298
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1298
    __mptr = (struct lc_element  const  *)e;
#line 1298
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1298
    bm_ext = 0;
  }
#line 1299
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1300
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1301
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1301
    if (tmp___2 != 0) {
#line 1302
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___1,
             tmp___0);
    } else {

    }
#line 1303
    return;
  } else {

  }
#line 1306
  if (bm_ext->lce.refcnt == 0U) {
#line 1307
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1308
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1308
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1308
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___4, tmp___3, (unsigned long long )sector, enr);
#line 1311
    return;
  } else {

  }
#line 1314
  tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1314
  if (tmp___5 == 0U) {
#line 1315
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1316
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1317
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1318
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1321
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1322
  return;
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1330
  spin_lock_irq(& mdev->al_lock);
#line 1332
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1332
  if (tmp != 0) {
#line 1333
    lc_reset(mdev->resync);
#line 1334
    put_ldev(mdev);
  } else {

  }
#line 1336
  mdev->resync_locked = 0U;
#line 1337
  mdev->resync_wenr = 4294967295U;
#line 1338
  spin_unlock_irq(& mdev->al_lock);
#line 1339
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1340
  return;
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1355
  spin_lock_irq(& mdev->al_lock);
#line 1357
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1357
  if (tmp___17 != 0) {
#line 1359
    i = 0;
#line 1359
    goto ldv_41552;
    ldv_41551: 
#line 1360
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1361
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1361
      __mptr = (struct lc_element  const  *)e;
#line 1361
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1361
      bm_ext = 0;
    }
#line 1362
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1363
      goto ldv_41550;
    } else {

    }
#line 1364
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1365
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1365
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1365
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1368
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1368
      if (tmp___3 != 0) {
#line 1368
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1368
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1368
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1368);
      } else {

      }
#line 1369
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1369
      if (tmp___6 == 0) {
#line 1369
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1369);
      } else {

      }
#line 1370
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1371
      mdev->resync_wenr = 4294967295U;
#line 1372
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1374
    if (bm_ext->lce.refcnt != 0U) {
#line 1375
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1375
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1375
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1377
      put_ldev(mdev);
#line 1378
      spin_unlock_irq(& mdev->al_lock);
#line 1379
      return (-11);
    } else {

    }
#line 1381
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1381
    if (tmp___11 != 0) {
#line 1381
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1381
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1381
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1381);
    } else {

    }
#line 1382
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1382
    if (tmp___14 != 0) {
#line 1382
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1382);
    } else {

    }
#line 1383
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_41550: 
#line 1359
    i = i + 1;
    ldv_41552: ;
#line 1359
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1360
      goto ldv_41551;
    } else {

    }

#line 1385
    if ((mdev->resync)->used != 0U) {
#line 1385
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1385
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1385
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1385);
    } else {

    }
#line 1386
    put_ldev(mdev);
  } else {

  }
#line 1388
  spin_unlock_irq(& mdev->al_lock);
#line 1390
  return (0);
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1405
  wake_up = 0;
#line 1407
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1408
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1408
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1408
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1410
    return;
  } else {

  }
#line 1412
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1413
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1415
  _b = sector >= nr_sectors;
#line 1415
  if (_b != 0) {
#line 1415
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1415);
  } else {

  }
#line 1415
  if (_b != 0) {
#line 1415
    return;
  } else {

  }
#line 1416
  _b___0 = esector >= nr_sectors;
#line 1416
  if (_b___0 != 0) {
#line 1416
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1416
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1416
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1416);
  } else {

  }
#line 1416
  if (_b___0 != 0) {
#line 1416
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1418
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1423
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1423
  if (tmp___5 != 0L) {
#line 1424
    return;
  } else {

  }
#line 1425
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1425
  if (tmp___6 != 0L) {
#line 1426
    ebnr = lbnr;
  } else {
#line 1428
    ebnr = (esector - 7UL) >> 3;
  }
#line 1429
  sbnr = (sector + 7UL) >> 3;
#line 1431
  if (sbnr > ebnr) {
#line 1432
    return;
  } else {

  }
#line 1438
  spin_lock_irq(& mdev->al_lock);
#line 1439
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1439
  count = (unsigned long )tmp___7;
#line 1440
  if (count != 0UL) {
#line 1441
    mdev->rs_failed = mdev->rs_failed + count;
#line 1443
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1443
    if (tmp___8 != 0) {
#line 1444
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1445
      put_ldev(mdev);
    } else {

    }
#line 1450
    wake_up = 1;
  } else {

  }
#line 1452
  spin_unlock_irq(& mdev->al_lock);
#line 1453
  if (wake_up != 0) {
#line 1454
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1455
  return;
}
}
#line 1457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_61(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1462
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1464
  mutex_lock(ldv_func_arg1);
#line 1465
  return;
}
}
#line 1467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1472
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1474
  mutex_unlock(ldv_func_arg1);
#line 1475
  return;
}
}
#line 1477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1482
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1484
  mutex_unlock(ldv_func_arg1);
#line 1485
  return;
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_64(struct mutex *lock ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1492
  tmp = mutex_is_locked(lock);
#line 1492
  ldv_func_res = tmp;
#line 1494
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1494
  return (tmp___0);
#line 1496
  return (ldv_func_res);
}
}
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1504
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1506
  mutex_lock(ldv_func_arg1);
#line 1507
  return;
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1514
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1516
  mutex_unlock(ldv_func_arg1);
#line 1517
  return;
}
}
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1524
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1526
  mutex_lock(ldv_func_arg1);
#line 1527
  return;
}
}
#line 1529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1534
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1536
  mutex_unlock(ldv_func_arg1);
#line 1537
  return;
}
}
#line 1539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1544
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1546
  mutex_unlock(ldv_func_arg1);
#line 1547
  return;
}
}
#line 1549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1554
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1556
  mutex_unlock(ldv_func_arg1);
#line 1557
  return;
}
}
#line 1559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1564
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1566
  mutex_unlock(ldv_func_arg1);
#line 1567
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 167 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 170
  if (n != -1) {
#line 171
    cpumask_check((unsigned int )n);
  } else {

  }
#line 172
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 172
  return ((unsigned int )tmp);
}
}
#line 240 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 242
  tmp = cpumask_check(cpu);
#line 242
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 243
  return;
}
}
#line 293 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 295
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 296
  return;
}
}
#line 432 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 434
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 434
  return ((unsigned int )tmp);
}
}
#line 598
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 600
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static long atomic64_read(atomic64_t const   *v ) 
{ 


  {
#line 203
  return ((long )v->counter);
}
}
#line 27 "include/asm-generic/atomic-long.h"
__inline static long atomic_long_read(atomic_long_t *l ) 
{ 
  atomic64_t *v ;
  long tmp ;

  {
#line 29
  v = l;
#line 31
  tmp = atomic64_read((atomic64_t const   *)v);
#line 31
  return (tmp);
}
}
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 155
void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_83(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_86(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_98(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 63
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 67
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 220
  switch (8UL) {
  case 1UL: 
#line 220
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5826;
  case 2UL: 
#line 220
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5826;
  case 4UL: 
#line 220
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5826;
  case 8UL: 
#line 220
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& per_cpu__kernel_stack));
#line 220
  goto ldv_5826;
  default: 
#line 220
  __bad_percpu_size();
  }
  ldv_5826: 
#line 220
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 222
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 96 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 99
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10828: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10828;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___4(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc___4(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
__inline static void local_inc(local_t *l ) 
{ 


  {
#line 21
  __asm__  volatile   (" incq %0": "+m" (l->a.counter));
#line 23
  return;
}
}
#line 81 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 81 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip , int refcnt ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 76
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 76
  if (tmp != 0L) {
#line 76
    rcu_read_lock_sched_notrace();
#line 76
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 76
    it_func = _________p1;
#line 76
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11512: 
#line 76
      (*((void (*)(struct module * , unsigned long  , int  ))*it_func))(mod, ip, refcnt);
#line 76
      it_func = it_func + 1;
#line 76
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 77
        goto ldv_11512;
      } else {

      }

    } else {

    }
#line 76
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 78
  return;
}
}
#line 388 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 390
  return ((unsigned int )mod->state != 2U);
}
}
#line 457 "include/linux/module.h"
__inline static local_t *__module_ref_addr(struct module *mod , int cpu ) 
{ 


  {
#line 460
  return ((local_t *)(mod->refptr + __per_cpu_offset[cpu]));
}
}
#line 479 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  unsigned int cpu ;
  int pfo_ret__ ;
  local_t *tmp ;
  local_t *tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
#line 481
  ret = 1;
#line 483
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 484
    switch (4UL) {
    case 1UL: 
#line 484
    __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11797;
    case 2UL: 
#line 484
    __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11797;
    case 4UL: 
#line 484
    __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11797;
    case 8UL: 
#line 484
    __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11797;
    default: 
#line 484
    __bad_percpu_size();
    }
    ldv_11797: 
#line 484
    cpu = (unsigned int )pfo_ret__;
#line 485
    tmp___2 = module_is_live(module);
#line 485
    tmp___3 = __builtin_expect(tmp___2 != 0, 1L);
#line 485
    if (tmp___3 != 0L) {
#line 486
      tmp = __module_ref_addr(module, (int )cpu);
#line 486
      local_inc(tmp);
#line 487
      tmp___0 = __module_ref_addr(module, (int )cpu);
#line 487
      tmp___1 = atomic_long_read(& tmp___0->a);
#line 487
      trace_module_get(module, (unsigned long )((void *)0), (int )tmp___1);
    } else {
#line 491
      ret = 0;
    }
  } else {

  }
#line 494
  return (ret);
}
}
#line 497
extern void module_put(struct module * ) ;
#line 244 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 268
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1938 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1939
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1940
extern struct block_device *bdget(dev_t  ) ;
#line 1944
extern void bdput(struct block_device * ) ;
#line 1979
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 152 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *proc_create(char const   *name , mode_t mode ,
                                                   struct proc_dir_entry *parent ,
                                                   struct file_operations  const  *proc_fops ) 
{ 
  struct proc_dir_entry *tmp ;

  {
#line 155
  tmp = proc_create_data(name, mode, parent, proc_fops, 0);
#line 155
  return (tmp);
}
}
#line 1820 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2038
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 253 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 255
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 256
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 256
    return (tmp);
  } else {

  }
#line 257
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 790 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 926
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 927
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 928
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 933
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 958
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 977
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 163 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 543
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 543
  if (tmp != 0L) {
#line 543
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (543), "i" (12UL));
    ldv_40604: ;
#line 543
    goto ldv_40604;
  } else {

  }
#line 544
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 545
  return;
}
}
#line 554 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 556
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 557
  return;
}
}
#line 566 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 568
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 568
  if (tmp != 0L) {
#line 568
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (568), "i" (12UL));
    ldv_40619: ;
#line 568
    goto ldv_40619;
  } else {

  }
#line 569
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 570
  return;
}
}
#line 1043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1045
  ldv_mutex_lock_83(& mdev->data.mutex);
#line 1048
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1048
  if (tmp != 0L) {
#line 1049
    ldv_mutex_unlock_84(& mdev->data.mutex);
#line 1050
    return (0);
  } else {

  }
#line 1052
  return (1);
}
}
#line 1055 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1057
  ldv_mutex_unlock_85(& mdev->data.mutex);
#line 1058
  return;
}
}
#line 1074
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1083
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1089
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1094
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1100
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1104
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1144
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1146
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1151
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1155
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1158
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1159
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1160
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1161
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1344 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1345 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1348 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1349 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1351 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1358
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1359
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1371
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1372
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1523
void drbd_nl_cleanup(void) ;
#line 1524
int drbd_nl_init(void) ;
#line 1525
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1587 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1589
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp == 0) {
#line 1589
    goto ldv_41585;
  } else {

  }
#line 1589
  tmp___0 = get_current();
#line 1589
  __wait.flags = 0U;
#line 1589
  __wait.private = (void *)tmp___0;
#line 1589
  __wait.func = & autoremove_wake_function;
#line 1589
  __wait.task_list.next = & __wait.task_list;
#line 1589
  __wait.task_list.prev = & __wait.task_list;
  ldv_41588: 
#line 1589
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1589
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp___1 == 0) {
#line 1589
    goto ldv_41587;
  } else {

  }
#line 1589
  schedule();
#line 1589
  goto ldv_41588;
  ldv_41587: 
#line 1589
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_41585: ;
#line 1592
  return;
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_41611;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32691.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32691.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_41611;
  }
  ldv_41611: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____2(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1664
  if (error != 0) {
#line 1666
    tmp = spinlock_check(& mdev->req_lock);
#line 1666
    flags = _raw_spin_lock_irqsave(tmp);
#line 1667
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1668
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_41652;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_41652;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41652: ;
#line 1746
  return (s);
}
}
#line 1754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1757
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1759
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1765
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1766
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1766
    if (tmp___1 != 0) {
#line 1767
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1767
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1767
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1768
      dump_stack();
    } else {

    }
#line 1770
    return (0UL);
  } else {

  }
#line 1772
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1772
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1775
  return (0UL);
  }
}
}
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1846
  _drbd_thread_stop(thi, 0, 0);
#line 1847
  return;
}
}
#line 1849 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1851
  _drbd_thread_stop(thi, 1, 0);
#line 1852
  return;
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2046
  switch ((unsigned int )s.ldv_32691.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2059
  goto ldv_41770;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2078
  return (0);
  }
  ldv_41770: ;
#line 2081
  switch ((unsigned int )s.ldv_32691.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2088
  goto ldv_41790;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2097
  return (0);
  }
  ldv_41790: ;
#line 2100
  return (1);
}
}
#line 2103 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2105
  tmp = drbd_get_max_buffers(mdev);
#line 2105
  mxb = tmp;
#line 2107
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2108
    return (0);
  } else {

  }
#line 2109
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2109
  if (tmp___0 != 0) {
#line 2110
    return (0);
  } else {

  }
#line 2117
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2117
  if (tmp___1 == 0) {
#line 2118
    return (0);
  } else {

  }
#line 2122
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2122
  if (tmp___2 > mxb) {
#line 2123
    return (0);
  } else {

  }
#line 2124
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2124
  if (tmp___3 != 0) {
#line 2125
    return (0);
  } else {

  }
#line 2126
  return (1);
}
}
#line 2207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2209
  sk = (mdev->data.socket)->sk;
#line 2210
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2211
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2212
  return;
}
}
#line 2214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2221
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_42027;
  ldv_42026: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_42027: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_42026;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 104
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 105
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 106
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 107
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 109
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 110
static void md_sync_timer_fn(unsigned long data ) ;
#line 111
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 156
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 185
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 227
  tmp = kmalloc___4(56UL, 208U);
#line 227
  b = (struct drbd_tl_epoch *)tmp;
#line 228
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 229
    return (0);
  } else {

  }
#line 230
  INIT_LIST_HEAD(& b->requests);
#line 231
  INIT_LIST_HEAD(& b->w.list);
#line 232
  b->next = 0;
#line 233
  b->br_number = 4711U;
#line 234
  b->n_req = 0;
#line 235
  b->w.cb = 0;
#line 237
  mdev->oldest_tle = b;
#line 238
  mdev->newest_tle = b;
#line 239
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 241
  mdev->tl_hash = 0;
#line 242
  mdev->tl_hash_s = 0U;
#line 244
  return (1);
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 249
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 249
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           249);
  } else {

  }
#line 250
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 250
  if (tmp___3 == 0) {
#line 250
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 250
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 250
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           250);
  } else {

  }
#line 251
  kfree((void const   *)mdev->oldest_tle);
#line 252
  mdev->oldest_tle = 0;
#line 253
  kfree((void const   *)mdev->unused_spare_tle);
#line 254
  mdev->unused_spare_tle = 0;
#line 255
  kfree((void const   *)mdev->tl_hash);
#line 256
  mdev->tl_hash = 0;
#line 257
  mdev->tl_hash_s = 0U;
#line 258
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 271
  INIT_LIST_HEAD(& new->requests);
#line 272
  INIT_LIST_HEAD(& new->w.list);
#line 273
  new->w.cb = 0;
#line 274
  new->next = 0;
#line 275
  new->n_req = 0;
#line 277
  newest_before = mdev->newest_tle;
#line 280
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 281
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 282
    (mdev->newest_tle)->next = new;
#line 283
    mdev->newest_tle = new;
  } else {

  }
#line 285
  return;
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 304
  spin_lock_irq(& mdev->req_lock);
#line 306
  b = mdev->oldest_tle;
#line 309
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 310
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 310
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 310
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 312
    goto bail;
  } else {

  }
#line 314
  if (b->br_number != barrier_nr) {
#line 315
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 315
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 315
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 317
    goto bail;
  } else {

  }
#line 319
  if ((unsigned int )b->n_req != set_size) {
#line 320
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 320
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 320
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 322
    goto bail;
  } else {

  }
#line 326
  le = b->requests.next;
#line 326
  tle = le->next;
#line 326
  goto ldv_42249;
  ldv_42248: 
#line 327
  __mptr = (struct list_head  const  *)le;
#line 327
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 328
  _req_mod(r, barrier_acked);
#line 326
  le = tle;
#line 326
  tle = le->next;
  ldv_42249: ;
#line 326
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 327
    goto ldv_42248;
  } else {

  }
#line 343
  list_del_init(& b->requests);
#line 345
  nob = b->next;
#line 346
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 346
  if (tmp___7 != 0) {
#line 347
    _tl_add_barrier(mdev, b);
#line 348
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 349
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 353
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 353
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 353
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 353
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             353);
    } else {

    }
#line 354
    mdev->oldest_tle = nob;
#line 355
    kfree((void const   *)b);
  }
#line 358
  spin_unlock_irq(& mdev->req_lock);
#line 359
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 359
  if (tmp___8 != 0) {
#line 359
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 359
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___12 < 0) {
#line 359
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 359, tmp___9);
  } else {

  }
#line 361
  return;
  bail: 
#line 364
  spin_unlock_irq(& mdev->req_lock);
#line 365
  val.i = 0U;
#line 365
  val.ldv_32691.conn = 6U;
#line 365
  mask.i = 0U;
#line 365
  mask.ldv_32691.conn = 31U;
#line 365
  drbd_force_state(mdev, mask, val);
#line 367
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 382
  tmp___0 = random32();
#line 382
  new_initial_bnr = (int )tmp___0;
#line 384
  spin_lock_irq(& mdev->req_lock);
#line 386
  b = mdev->oldest_tle;
#line 387
  goto ldv_42279;
  ldv_42278: 
#line 388
  le = b->requests.next;
#line 388
  tle = le->next;
#line 388
  goto ldv_42271;
  ldv_42270: 
#line 389
  __mptr = (struct list_head  const  *)le;
#line 389
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 392
  _req_mod(r, connection_lost_while_pending);
#line 388
  le = tle;
#line 388
  tle = le->next;
  ldv_42271: ;
#line 388
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 389
    goto ldv_42270;
  } else {

  }
#line 394
  tmp = b->next;
#line 398
  list_del(& b->requests);
#line 403
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 404
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 404
    if (tmp___1 != 0) {
#line 404
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 404
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
    if (tmp___5 < 0) {
#line 404
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 404
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 404, tmp___2);
    } else {

    }
  } else {

  }
#line 406
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 408
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 408
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 408
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 408
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             408);
    } else {

    }
#line 409
    INIT_LIST_HEAD(& b->requests);
#line 410
    INIT_LIST_HEAD(& b->w.list);
#line 411
    b->w.cb = 0;
#line 412
    b->br_number = (unsigned int )new_initial_bnr;
#line 413
    b->n_req = 0;
#line 415
    mdev->oldest_tle = b;
#line 416
    goto ldv_42277;
  } else {

  }
#line 418
  kfree((void const   *)b);
#line 419
  b = tmp;
  ldv_42279: ;
#line 387
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 388
    goto ldv_42278;
  } else {

  }
  ldv_42277: 
#line 423
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 423
  if (tmp___10 == 0) {
#line 423
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           423);
  } else {

  }
#line 426
  le = mdev->out_of_sequence_requests.next;
#line 426
  tle = le->next;
#line 426
  goto ldv_42283;
  ldv_42282: 
#line 427
  __mptr___0 = (struct list_head  const  *)le;
#line 427
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 430
  _req_mod(r, connection_lost_while_pending);
#line 426
  le = tle;
#line 426
  tle = le->next;
  ldv_42283: ;
#line 426
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 427
    goto ldv_42282;
  } else {

  }
#line 434
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 437
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 448
  return (((((int )os.ldv_32691.conn > 9 && (int )ns.ldv_32691.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_32691.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 464
  tmp = spinlock_check(& mdev->req_lock);
#line 464
  flags = _raw_spin_lock_irqsave(tmp);
#line 465
  os = mdev->state;
#line 466
  ns.i = (os.i & ~ mask.i) | val.i;
#line 467
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 468
  ns = mdev->state;
#line 469
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 471
  return (rv);
}
}
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 483
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 484
  return;
}
}
#line 486
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 487
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 489
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 491
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 501
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 501
  if (tmp != 0) {
#line 502
    return (SS_CW_SUCCESS);
  } else {

  }
#line 504
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 504
  if (tmp___0 != 0) {
#line 505
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 507
  rv = 0;
#line 508
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 508
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 509
  os = mdev->state;
#line 510
  ns.i = (os.i & ~ mask.i) | val.i;
#line 511
  ns = sanitize_state(mdev, os, ns, 0);
#line 513
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 513
  if (tmp___2 == 0) {
#line 514
    rv = 4;
  } else {

  }
#line 515
  if (rv == 0) {
#line 516
    rv = is_valid_state(mdev, ns);
#line 517
    if (rv == 1) {
#line 518
      rv = is_valid_state_transition(mdev, ns, os);
#line 519
      if (rv == 1) {
#line 520
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 523
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 525
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 547
  init_completion(& done);
#line 549
  if (((unsigned int )f & 8U) != 0U) {
#line 550
    ldv_mutex_lock_86(& mdev->state_mutex);
  } else {

  }
#line 552
  tmp = spinlock_check(& mdev->req_lock);
#line 552
  flags = _raw_spin_lock_irqsave(tmp);
#line 553
  os = mdev->state;
#line 554
  ns.i = (os.i & ~ mask.i) | val.i;
#line 555
  ns = sanitize_state(mdev, os, ns, 0);
#line 557
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 557
  if (tmp___5 != 0) {
#line 558
    rv = is_valid_state(mdev, ns);
#line 559
    if (rv == 1) {
#line 560
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 561
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 563
    if (rv <= 0) {
#line 564
      if (((unsigned int )f & 2U) != 0U) {
#line 565
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 566
      goto abort;
    } else {

    }
#line 569
    drbd_state_lock___0(mdev);
#line 570
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 570
    if (tmp___0 == 0) {
#line 571
      drbd_state_unlock(mdev);
#line 572
      rv = -10;
#line 573
      if (((unsigned int )f & 2U) != 0U) {
#line 574
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 575
      goto abort;
    } else {

    }
#line 578
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 578
    rv = (int )tmp___1;
#line 578
    if (rv != 0) {
#line 578
      goto ldv_42351;
    } else {

    }
#line 578
    tmp___2 = get_current();
#line 578
    __wait.flags = 0U;
#line 578
    __wait.private = (void *)tmp___2;
#line 578
    __wait.func = & autoremove_wake_function;
#line 578
    __wait.task_list.next = & __wait.task_list;
#line 578
    __wait.task_list.prev = & __wait.task_list;
    ldv_42354: 
#line 578
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 578
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 578
    rv = (int )tmp___3;
#line 578
    if (rv != 0) {
#line 578
      goto ldv_42353;
    } else {

    }
#line 578
    schedule();
#line 578
    goto ldv_42354;
    ldv_42353: 
#line 578
    finish_wait(& mdev->state_wait, & __wait);
    ldv_42351: ;
#line 581
    if (rv <= 0) {
#line 582
      drbd_state_unlock(mdev);
#line 583
      if (((unsigned int )f & 2U) != 0U) {
#line 584
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 585
      goto abort;
    } else {

    }
#line 587
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 587
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 588
    os = mdev->state;
#line 589
    ns.i = (os.i & ~ mask.i) | val.i;
#line 590
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 591
    drbd_state_unlock(mdev);
  } else {
#line 593
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 596
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 598
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 599
    tmp___8 = get_current();
#line 599
    if ((unsigned long )tmp___8 == (unsigned long )mdev->worker.task) {
#line 599
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 599
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 599
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___7,
             tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             599);
    } else {

    }
#line 600
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 604
  if (((unsigned int )f & 8U) != 0U) {
#line 605
    ldv_mutex_unlock_87(& mdev->state_mutex);
  } else {

  }
#line 607
  return (rv);
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 625
  rv = drbd_req_state(mdev, mask, val, f);
#line 625
  if (rv != -18) {
#line 625
    goto ldv_42365;
  } else {

  }
#line 625
  tmp = get_current();
#line 625
  __wait.flags = 0U;
#line 625
  __wait.private = (void *)tmp;
#line 625
  __wait.func = & autoremove_wake_function;
#line 625
  __wait.task_list.next = & __wait.task_list;
#line 625
  __wait.task_list.prev = & __wait.task_list;
  ldv_42368: 
#line 625
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 625
  rv = drbd_req_state(mdev, mask, val, f);
#line 625
  if (rv != -18) {
#line 625
    goto ldv_42367;
  } else {

  }
#line 625
  schedule();
#line 625
  goto ldv_42368;
  ldv_42367: 
#line 625
  finish_wait(& mdev->state_wait, & __wait);
  ldv_42365: ;
#line 628
  return (rv);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 633
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_32691.pdsk);
#line 633
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32691.disk);
#line 633
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_32691.peer);
#line 633
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_32691.role);
#line 633
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_32691.conn);
#line 633
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 633
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 633
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 634
  return;
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 650
  if (err == -18) {
#line 651
    return;
  } else {

  }
#line 652
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 652
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 653
  print_st(mdev, (char *)" state", os);
#line 654
  print_st(mdev, (char *)"wanted", ns);
#line 655
  return;
}
}
#line 678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 683
  rv = 1;
#line 685
  fp = FP_DONT_CARE;
#line 686
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 686
  if (tmp != 0) {
#line 687
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 688
    put_ldev(mdev);
  } else {

  }
#line 691
  tmp___0 = get_net_conf(mdev);
#line 691
  if (tmp___0 != 0) {
#line 692
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 694
      rv = -1;
    } else {

    }
#line 695
    put_net_conf(mdev);
  } else {

  }
#line 698
  if (rv <= 0) {

  } else
#line 700
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 701
    rv = -12;
  } else
#line 703
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32691.conn <= 9) && (int )ns.ldv_32691.disk <= 7) {
#line 704
    rv = -2;
  } else
#line 706
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_32691.conn <= 9) && (int )ns.ldv_32691.pdsk > 5) {
#line 708
    rv = -7;
  } else
#line 710
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32691.disk <= 4) && (int )ns.ldv_32691.pdsk <= 4) {
#line 711
    rv = -2;
  } else
#line 713
  if ((int )ns.ldv_32691.conn > 10 && (int )ns.ldv_32691.disk <= 3) {
#line 714
    rv = -4;
  } else
#line 716
  if ((int )ns.ldv_32691.conn > 10 && (int )ns.ldv_32691.pdsk <= 3) {
#line 717
    rv = -5;
  } else
#line 719
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 724
    rv = -6;
  } else
#line 726
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 728
    rv = -14;
  } else
#line 730
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 732
    rv = -17;
  } else {

  }
#line 734
  return (rv);
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 746
  rv = 1;
#line 748
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_32691.conn > 10) {
#line 750
    rv = -8;
  } else {

  }
#line 752
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 753
    rv = -9;
  } else {

  }
#line 755
  if ((int )ns.ldv_32691.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 756
    rv = -11;
  } else {

  }
#line 758
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_32691.conn <= 1) {
#line 759
    rv = -13;
  } else {

  }
#line 761
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_32691.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 762
    rv = -16;
  } else {

  }
#line 764
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 765
    rv = -18;
  } else {

  }
#line 767
  if ((int )ns.ldv_32691.conn == (int )os.ldv_32691.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 768
    rv = -18;
  } else {

  }
#line 770
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_32691.conn <= 9) {
#line 771
    rv = -15;
  } else {

  }
#line 773
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_32691.conn != (int )os.ldv_32691.conn) && (int )os.ldv_32691.conn > 10) {
#line 775
    rv = -8;
  } else {

  }
#line 777
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_32691.conn <= 9) {
#line 779
    rv = -15;
  } else {

  }
#line 781
  return (rv);
}
}
#line 794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 799
  fp = FP_DONT_CARE;
#line 800
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 800
  if (tmp != 0) {
#line 801
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 802
    put_ldev(mdev);
  } else {

  }
#line 806
  if (((int )ns.ldv_32691.conn > 2 && (int )ns.ldv_32691.conn <= 7) && (int )os.ldv_32691.conn <= 1) {
#line 808
    ns.ldv_32691.conn = os.ldv_32691.conn;
  } else {

  }
#line 811
  if ((((int )os.ldv_32691.conn > 2 && (int )os.ldv_32691.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 813
    ns.ldv_32691.conn = os.ldv_32691.conn;
  } else {

  }
#line 816
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 817
    ns.ldv_32691.conn = os.ldv_32691.conn;
  } else {

  }
#line 819
  if ((int )ns.ldv_32691.conn <= 9) {
#line 820
    ns.ldv_32691.peer_isp = 0U;
#line 821
    ns.ldv_32691.peer = 0U;
#line 822
    if ((int )ns.ldv_32691.pdsk > 6 || (int )ns.ldv_32691.pdsk <= 3) {
#line 823
      ns.ldv_32691.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 827
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 828
    ns.ldv_32691.aftr_isp = 0U;
  } else {

  }
#line 830
  if ((int )ns.ldv_32691.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 831
    ns.ldv_32691.pdsk = 6U;
  } else {

  }
#line 834
  if (((int )os.ldv_32691.conn > 10 && (int )ns.ldv_32691.conn > 10) && ((int )ns.ldv_32691.disk <= 2 || (int )ns.ldv_32691.pdsk <= 2)) {
#line 836
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 837
      *warn_sync_abort = 1;
    } else {

    }
#line 838
    ns.ldv_32691.conn = 10U;
  } else {

  }
#line 841
  if ((int )ns.ldv_32691.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 844
    switch ((int )ns.ldv_32691.conn) {
    case 14: ;
    case 21: 
#line 847
    ns.ldv_32691.disk = 5U;
#line 848
    goto ldv_42401;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 853
    ns.ldv_32691.disk = 8U;
#line 854
    goto ldv_42401;
    case 17: 
#line 856
    ns.ldv_32691.disk = 4U;
#line 857
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 858
    goto ldv_42401;
    }
    ldv_42401: ;
#line 860
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 861
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 861
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 861
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 864
  if ((int )ns.ldv_32691.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 866
    switch ((int )ns.ldv_32691.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 871
    ns.ldv_32691.pdsk = 8U;
#line 872
    goto ldv_42411;
    case 13: ;
    case 20: 
#line 875
    ns.ldv_32691.pdsk = 5U;
#line 876
    goto ldv_42411;
    case 16: 
#line 878
    ns.ldv_32691.pdsk = 4U;
#line 879
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 879
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 879
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 880
    goto ldv_42411;
    }
    ldv_42411: ;
#line 882
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 883
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 883
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 883
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 887
  if ((int )ns.ldv_32691.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 887
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 887
    if (tmp___10 != 0) {
#line 889
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 890
        ns.ldv_32691.disk = mdev->new_state_tmp.ldv_32691.disk;
#line 891
        ns.ldv_32691.pdsk = mdev->new_state_tmp.ldv_32691.pdsk;
      } else {
#line 893
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 894
        ns.ldv_32691.disk = 0U;
#line 895
        ns.ldv_32691.pdsk = 6U;
      }
#line 897
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 900
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32691.conn <= 9) && (int )ns.ldv_32691.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_32691.conn > 9) || (int )os.ldv_32691.pdsk <= 5)) {
#line 903
    ns.ldv_32691.susp = 1U;
  } else {

  }
#line 905
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 906
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 907
      ns.ldv_32691.conn = 20U;
    } else {

    }
#line 908
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 909
      ns.ldv_32691.conn = 21U;
    } else {

    }
  } else {
#line 911
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 912
      ns.ldv_32691.conn = 16U;
    } else {

    }
#line 913
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 914
      ns.ldv_32691.conn = 17U;
    } else {

    }
  }
#line 917
  return (ns);
}
}
#line 921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 923
  if ((unsigned int )cs == 19U) {
#line 929
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 931
    bit = mdev->ov_start_sector >> 3;
#line 932
    if (mdev->rs_total <= bit) {
#line 933
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 935
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 937
  return;
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 953
  rv = 1;
#line 954
  warn_sync_abort = 0;
#line 957
  os = mdev->state;
#line 959
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 961
  if (ns.i == os.i) {
#line 962
    return (2);
  } else {

  }
#line 964
  if (((unsigned int )flags & 1U) == 0U) {
#line 968
    rv = is_valid_state(mdev, ns);
#line 969
    if (rv <= 0) {
#line 973
      tmp___2 = is_valid_state(mdev, os);
#line 973
      if (tmp___2 == rv) {
#line 974
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 974
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 974
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 974
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 977
        print_st(mdev, (char *)"old", os);
#line 978
        print_st(mdev, (char *)"new", ns);
#line 979
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 982
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 985
  if (rv <= 0) {
#line 986
    if (((unsigned int )flags & 2U) != 0U) {
#line 987
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 988
    return (rv);
  } else {

  }
#line 991
  if (warn_sync_abort != 0) {
#line 992
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 996
  pbp = (char *)(& pb);
#line 997
  *pbp = 0;
#line 998
  if ((int )ns.ldv_32691.role != (int )os.ldv_32691.role) {
#line 998
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_32691.role);
#line 998
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_32691.role);
#line 998
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 998
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 999
  if ((int )ns.ldv_32691.peer != (int )os.ldv_32691.peer) {
#line 999
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_32691.peer);
#line 999
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_32691.peer);
#line 999
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 999
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 1000
  if ((int )ns.ldv_32691.conn != (int )os.ldv_32691.conn) {
#line 1000
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_32691.conn);
#line 1000
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_32691.conn);
#line 1000
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 1000
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 1001
  if ((int )ns.ldv_32691.disk != (int )os.ldv_32691.disk) {
#line 1001
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32691.disk);
#line 1001
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_32691.disk);
#line 1001
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 1001
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 1002
  if ((int )ns.ldv_32691.pdsk != (int )os.ldv_32691.pdsk) {
#line 1002
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32691.pdsk);
#line 1002
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_32691.pdsk);
#line 1002
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 1002
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 1003
  if ((int )ns.ldv_32691.susp != (int )os.ldv_32691.susp) {
#line 1003
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1003
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1004
  if ((int )ns.ldv_32691.aftr_isp != (int )os.ldv_32691.aftr_isp) {
#line 1004
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1004
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1005
  if ((int )ns.ldv_32691.peer_isp != (int )os.ldv_32691.peer_isp) {
#line 1005
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1005
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1006
  if ((int )ns.ldv_32691.user_isp != (int )os.ldv_32691.user_isp) {
#line 1006
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1006
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 1007
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1007
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1007
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 1018
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1018
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1018
    if (tmp___26 == 0) {
#line 1022
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1024
  mdev->state.i = ns.i;
#line 1025
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1026
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1029
  if ((int )os.ldv_32691.conn > 15 && (int )ns.ldv_32691.conn <= 10) {
#line 1030
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1031
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1035
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_32691.conn <= 9) {
#line 1037
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1039
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1039
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1039
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1043
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1045
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1046
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1047
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1048
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1048
      if (tmp___31 == 0) {
#line 1049
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1057
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1059
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1060
    mdev->rs_mark_time = jiffies;
#line 1061
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1062
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1065
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1067
    mdev->ov_position = 0UL;
#line 1068
    tmp___34 = drbd_bm_bits(mdev);
#line 1068
    mdev->rs_mark_left = tmp___34;
#line 1068
    mdev->rs_total = tmp___34;
#line 1070
    if (mdev->agreed_pro_version > 89) {
#line 1071
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_32691.conn);
    } else {
#line 1073
      mdev->ov_start_sector = 0UL;
    }
#line 1074
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1076
    tmp___35 = jiffies;
#line 1076
    mdev->rs_mark_time = tmp___35;
#line 1076
    mdev->rs_start = tmp___35;
#line 1078
    mdev->ov_last_oos_size = 0UL;
#line 1079
    mdev->ov_last_oos_start = 0UL;
#line 1081
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1082
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1084
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1088
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1088
  if (tmp___39 != 0) {
#line 1089
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1093
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1093
    if (tmp___38 != 0) {
#line 1094
      mdf = mdf | 64U;
    } else {

    }
#line 1095
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U || ((int )mdev->state.ldv_32691.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 4U)) {
#line 1097
      mdf = mdf | 2U;
    } else {

    }
#line 1098
    if ((int )mdev->state.ldv_32691.conn > 9) {
#line 1099
      mdf = mdf | 4U;
    } else {

    }
#line 1100
    if ((int )mdev->state.ldv_32691.disk > 4) {
#line 1101
      mdf = mdf | 1U;
    } else {

    }
#line 1102
    if ((int )mdev->state.ldv_32691.disk > 5) {
#line 1103
      mdf = mdf | 16U;
    } else {

    }
#line 1104
    if ((int )mdev->state.ldv_32691.pdsk <= 5 && (int )mdev->state.ldv_32691.pdsk > 3) {
#line 1105
      mdf = mdf | 32U;
    } else {

    }
#line 1106
    if ((mdev->ldev)->md.flags != mdf) {
#line 1107
      (mdev->ldev)->md.flags = mdf;
#line 1108
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1110
    if ((int )os.ldv_32691.disk <= 6 && (int )ns.ldv_32691.disk > 6) {
#line 1111
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1112
    put_ldev(mdev);
  } else {

  }
#line 1116
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1118
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1121
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1122
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1125
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1126
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1129
  if (((int )os.ldv_32691.conn > 7 && (int )ns.ldv_32691.conn <= 7) && (int )ns.ldv_32691.conn > 2) {
#line 1131
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1133
  tmp___40 = kmalloc___4(48UL, 32U);
#line 1133
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1134
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1135
    ascw->os = os;
#line 1136
    ascw->ns = ns;
#line 1137
    ascw->flags = flags;
#line 1138
    ascw->w.cb = & w_after_state_ch;
#line 1139
    ascw->done = done;
#line 1140
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1142
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1142
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1142
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1145
  return (rv);
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1151
  __mptr = (struct drbd_work  const  *)w;
#line 1151
  ascw = (struct after_state_chg_work *)__mptr;
#line 1152
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1153
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1154
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1154
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1154
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1154
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1154);
    } else {

    }
#line 1155
    complete(ascw->done);
  } else {

  }
#line 1157
  kfree((void const   *)ascw);
#line 1159
  return (1);
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1164
  if (rv != 0) {
#line 1165
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1165
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1165
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1166
    val.i = 0U;
#line 1166
    val.ldv_32691.conn = 10U;
#line 1166
    mask.i = 0U;
#line 1166
    mask.ldv_32691.conn = 31U;
#line 1166
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1167
    return;
  } else {

  }
#line 1170
  switch ((int )mdev->state.ldv_32691.conn) {
  case 12: 
#line 1172
  val___0.i = 0U;
#line 1172
  val___0.ldv_32691.conn = 15U;
#line 1172
  mask___0.i = 0U;
#line 1172
  mask___0.ldv_32691.conn = 31U;
#line 1172
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1173
  goto ldv_42454;
  case 11: 
#line 1175
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1176
  goto ldv_42454;
  }
  ldv_42454: ;
#line 1179
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1192
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1193
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1194
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1195
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1198
  fp = FP_DONT_CARE;
#line 1199
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1199
  if (tmp != 0) {
#line 1200
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1201
    put_ldev(mdev);
  } else {

  }
#line 1205
  drbd_bcast_state(mdev, ns);
#line 1207
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_32691.disk > 7) || (int )os.ldv_32691.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32691.disk <= 7) && (int )ns.ldv_32691.pdsk <= 7)) {
#line 1209
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1214
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1217
    if (((int )os.ldv_32691.pdsk > 5 && (int )ns.ldv_32691.pdsk <= 5) || ((int )os.ldv_32691.conn <= 9 && (int )ns.ldv_32691.conn > 9)) {
#line 1219
      tl_clear(mdev);
#line 1220
      spin_lock_irq(& mdev->req_lock);
#line 1221
      __ns.i = mdev->state.i;
#line 1221
      __ns.ldv_32691.susp = 0U;
#line 1221
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1222
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1226
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_32691.pdsk > 0) {
#line 1227
    drbd_send_uuids(mdev);
#line 1228
    drbd_send_state(mdev);
  } else {

  }
#line 1230
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1231
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1234
  if ((((int )os.ldv_32691.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_32691.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1240
    kfree((void const   *)mdev->p_uuid);
#line 1241
    mdev->p_uuid = 0;
#line 1242
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1242
    if (tmp___0 != 0) {
#line 1243
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_32691.disk > 7) {
#line 1245
        drbd_uuid_new_current(mdev);
#line 1246
        drbd_send_uuids(mdev);
      } else {

      }
#line 1248
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1252
  if ((int )ns.ldv_32691.pdsk <= 3) {
#line 1252
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1252
    if (tmp___1 != 0) {
#line 1253
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1254
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1257
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1258
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1259
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1263
  if (((int )ns.ldv_32691.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1265
    kfree((void const   *)mdev->p_uuid);
#line 1266
    mdev->p_uuid = 0;
#line 1267
    drbd_send_sizes(mdev, 0);
#line 1268
    drbd_send_uuids(mdev);
#line 1269
    drbd_send_state(mdev);
  } else {

  }
#line 1273
  if ((int )ns.ldv_32691.conn > 9 && ((int )os.ldv_32691.aftr_isp != (int )ns.ldv_32691.aftr_isp || (int )os.ldv_32691.user_isp != (int )ns.ldv_32691.user_isp)) {
#line 1276
    drbd_send_state(mdev);
  } else {

  }
#line 1279
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1281
    suspend_other_sg(mdev);
  } else {

  }
#line 1285
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_32691.conn > 9) {
#line 1286
    drbd_send_state(mdev);
  } else {

  }
#line 1289
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1291
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1294
  if ((((int )os.ldv_32691.conn <= 9 && (int )ns.ldv_32691.conn <= 9) && (int )os.ldv_32691.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1296
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1298
  if ((int )os.ldv_32691.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1301
    eh = EP_PASS_ON;
#line 1302
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1302
    if (tmp___2 != 0) {
#line 1303
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1304
      put_ldev(mdev);
    } else {

    }
#line 1307
    drbd_rs_cancel_all(mdev);
#line 1311
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1311
    if (tmp___3 == 0) {
#line 1311
      goto ldv_42466;
    } else {

    }
#line 1311
    tmp___4 = get_current();
#line 1311
    __wait.flags = 0U;
#line 1311
    __wait.private = (void *)tmp___4;
#line 1311
    __wait.func = & autoremove_wake_function;
#line 1311
    __wait.task_list.next = & __wait.task_list;
#line 1311
    __wait.task_list.prev = & __wait.task_list;
    ldv_42469: 
#line 1311
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1311
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1311
    if (tmp___5 == 0) {
#line 1311
      goto ldv_42468;
    } else {

    }
#line 1311
    schedule();
#line 1311
    goto ldv_42469;
    ldv_42468: 
#line 1311
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_42466: 
#line 1312
    mdev->rs_total = 0UL;
#line 1313
    mdev->rs_failed = 0UL;
#line 1314
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1316
    spin_lock_irq(& mdev->req_lock);
#line 1317
    __ns___0.i = mdev->state.i;
#line 1317
    __ns___0.ldv_32691.disk = 0U;
#line 1317
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1318
    spin_unlock_irq(& mdev->req_lock);
#line 1320
    if ((unsigned int )eh == 1U) {
#line 1321
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1324
  if ((int )os.ldv_32691.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1326
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1327
      tmp___10 = drbd_send_state(mdev);
#line 1327
      if (tmp___10 != 0) {
#line 1328
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___7, tmp___6);
      } else {
#line 1330
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1330
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___9, tmp___8);
      }
    } else {

    }
#line 1333
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1333
    if (tmp___11 == 0) {
#line 1333
      goto ldv_42472;
    } else {

    }
#line 1333
    tmp___12 = get_current();
#line 1333
    __wait___0.flags = 0U;
#line 1333
    __wait___0.private = (void *)tmp___12;
#line 1333
    __wait___0.func = & autoremove_wake_function;
#line 1333
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1333
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42475: 
#line 1333
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1333
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1333
    if (tmp___13 == 0) {
#line 1333
      goto ldv_42474;
    } else {

    }
#line 1333
    schedule();
#line 1333
    goto ldv_42475;
    ldv_42474: 
#line 1333
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_42472: 
#line 1334
    lc_destroy(mdev->resync);
#line 1335
    mdev->resync = 0;
#line 1336
    lc_destroy(mdev->act_log);
#line 1337
    mdev->act_log = 0;
#line 1338
    drbd_free_bc(mdev->ldev);
#line 1338
    mdev->ldev = 0;
#line 1342
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1343
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1347
  if ((int )ns.ldv_32691.disk > 3 && (int )ns.ldv_32691.pdsk > 3) {
#line 1347
    tmp___14 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1347
    if (tmp___14 != 0) {
#line 1349
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1350
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1354
  if ((((int )os.ldv_32691.conn > 10 && (int )ns.ldv_32691.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1357
    resume_next_sg(mdev);
  } else {

  }
#line 1360
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1361
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1365
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1368
    if ((int )os.ldv_32691.aftr_isp != (int )ns.ldv_32691.aftr_isp) {
#line 1369
      resume_next_sg(mdev);
    } else {

    }
#line 1371
    tmp___15 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1371
    if (tmp___15 != 0) {
#line 1372
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1375
  drbd_md_sync(mdev);
#line 1376
  return;
}
}
#line 1379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1381
  thi = (struct drbd_thread *)arg;
#line 1382
  mdev = thi->mdev;
  restart: 
#line 1387
  retval = (*(thi->function))(thi);
#line 1389
  tmp = spinlock_check(& thi->t_lock);
#line 1389
  flags = _raw_spin_lock_irqsave(tmp);
#line 1401
  if ((unsigned int )thi->t_state == 3U) {
#line 1402
    tmp___0 = get_current();
#line 1402
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
    printk("<6>%s %s: Restarting %s\n", tmp___2, tmp___1, (char *)(& tmp___0->comm));
#line 1403
    thi->t_state = Running;
#line 1404
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1405
    goto restart;
  } else {

  }
#line 1408
  thi->task = 0;
#line 1409
  thi->t_state = None;
#line 1410
  __asm__  volatile   ("mfence": : : "memory");
#line 1411
  complete(& thi->stop);
#line 1412
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1414
  tmp___3 = get_current();
#line 1414
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1414
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1414
  printk("<6>%s %s: Terminating %s\n", tmp___5, tmp___4, (char *)(& tmp___3->comm));
#line 1417
  module_put(& __this_module);
#line 1418
  return (retval);
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1424
  spinlock_check(& thi->t_lock);
#line 1424
  __raw_spin_lock_init(& thi->t_lock.ldv_5557.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1425
  thi->task = 0;
#line 1426
  thi->t_state = None;
#line 1427
  thi->function = func;
#line 1428
  thi->mdev = mdev;
#line 1429
  return;
}
}
#line 1431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct task_struct *tmp___9 ;
  unsigned int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  long tmp___13 ;
  raw_spinlock_t *tmp___14 ;
  struct task_struct *tmp___15 ;
  struct task_struct *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;

  {
#line 1433
  mdev = thi->mdev;
#line 1437
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1444
  tmp = spinlock_check(& thi->t_lock);
#line 1444
  flags = _raw_spin_lock_irqsave(tmp);
#line 1446
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1448
  tmp___0 = get_current();
#line 1448
  tmp___1 = get_current();
#line 1448
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1448
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1448
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___3, tmp___2, me, (char *)(& tmp___1->comm),
         tmp___0->pid);
#line 1452
  tmp___6 = try_module_get(& __this_module);
#line 1452
  if (tmp___6 == 0) {
#line 1453
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1453
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1453
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___5,
           tmp___4);
#line 1454
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1455
    return (0);
  } else {

  }
#line 1458
  init_completion(& thi->stop);
#line 1459
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1459
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1459
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1459
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1459);
  } else {

  }
#line 1460
  thi->reset_cpu_mask = 1;
#line 1461
  thi->t_state = Running;
#line 1462
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1463
  tmp___9 = get_current();
#line 1463
  flush_signals(tmp___9);
#line 1465
  tmp___10 = mdev_to_minor(mdev);
#line 1465
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___10, me);
#line 1468
  tmp___13 = IS_ERR((void const   *)nt);
#line 1468
  if (tmp___13 != 0L) {
#line 1469
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___12, tmp___11);
#line 1471
    module_put(& __this_module);
#line 1472
    return (0);
  } else {

  }
#line 1474
  tmp___14 = spinlock_check(& thi->t_lock);
#line 1474
  flags = _raw_spin_lock_irqsave(tmp___14);
#line 1475
  thi->task = nt;
#line 1476
  thi->t_state = Running;
#line 1477
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1478
  wake_up_process(nt);
#line 1479
  goto ldv_42508;
  case 2U: 
#line 1481
  thi->t_state = Restarting;
#line 1482
  tmp___15 = get_current();
#line 1482
  tmp___16 = get_current();
#line 1482
  tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1482
  tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1482
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___18, tmp___17, me,
         (char *)(& tmp___16->comm), tmp___15->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1488
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1489
  goto ldv_42508;
  }
  ldv_42508: ;
#line 1492
  return (1);
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1500
  ns = restart != 0 ? Restarting : Exiting;
#line 1503
  tmp = spinlock_check(& thi->t_lock);
#line 1503
  flags = _raw_spin_lock_irqsave(tmp);
#line 1505
  if ((unsigned int )thi->t_state == 0U) {
#line 1506
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1507
    if (restart != 0) {
#line 1508
      drbd_thread_start(thi);
    } else {

    }
#line 1509
    return;
  } else {

  }
#line 1512
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1513
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1514
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1515
      return;
    } else {

    }
#line 1518
    thi->t_state = ns;
#line 1519
    __asm__  volatile   ("mfence": : : "memory");
#line 1520
    init_completion(& thi->stop);
#line 1521
    tmp___0 = get_current();
#line 1521
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1522
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1526
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1528
  if (wait != 0) {
#line 1529
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1530
  return;
}
}
#line 1540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1545
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1545
  if (tmp != 0U) {
#line 1546
    return;
  } else {

  }
#line 1548
  tmp___0 = mdev_to_minor(mdev);
#line 1548
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1548
  ord = (int )(tmp___0 % tmp___1);
#line 1549
  cpu = -1;
#line 1549
  goto ldv_42529;
  ldv_42528: 
#line 1550
  tmp___2 = ord;
#line 1550
  ord = ord - 1;
#line 1550
  if (tmp___2 == 0) {
#line 1551
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1552
    return;
  } else {

  }
  ldv_42529: 
#line 1549
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1549
  cpu = (int )tmp___3;
#line 1549
  if (cpu < nr_cpu_ids) {
#line 1550
    goto ldv_42528;
  } else {

  }
#line 1556
  cpumask_setall(mdev->cpu_mask);
#line 1557
  return;
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1568
  tmp = get_current();
#line 1568
  p = tmp;
#line 1569
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1574
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1574
  if (_b != 0) {
#line 1574
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1574
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1574
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1574);
  } else {

  }
#line 1574
  if (_b != 0) {
#line 1575
    return;
  } else {

  }
#line 1576
  if (thi->reset_cpu_mask == 0) {
#line 1577
    return;
  } else {

  }
#line 1578
  thi->reset_cpu_mask = 0;
#line 1579
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1580
  return;
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1590
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1590
  if (_b != 0) {
#line 1590
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1590
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1590
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1590);
  } else {

  }
#line 1590
  if (_b != 0) {
#line 1590
    return (0);
  } else {

  }
#line 1591
  _b___0 = size == 0UL;
#line 1591
  if (_b___0 != 0) {
#line 1591
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1591
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1591
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1591);
  } else {

  }
#line 1591
  if (_b___0 != 0) {
#line 1591
    return (0);
  } else {

  }
#line 1593
  h->magic = 1728214147U;
#line 1594
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1594
  h->command = tmp___3;
#line 1595
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1595
  h->length = tmp___4;
#line 1597
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1599
  ok = (size_t )sent == size;
#line 1600
  if (ok == 0) {
#line 1601
    tmp___5 = cmdname(cmd);
#line 1601
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1601
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1601
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1603
  return (ok);
}
}
#line 1609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1612
  ok = 0;
#line 1615
  if (use_data_socket != 0) {
#line 1616
    ldv_mutex_lock_88(& mdev->data.mutex);
#line 1617
    sock = mdev->data.socket;
  } else {
#line 1619
    ldv_mutex_lock_89(& mdev->meta.mutex);
#line 1620
    sock = mdev->meta.socket;
  }
#line 1625
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1625
  if (tmp != 0L) {
#line 1626
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1628
  if (use_data_socket != 0) {
#line 1629
    ldv_mutex_unlock_90(& mdev->data.mutex);
  } else {
#line 1631
    ldv_mutex_unlock_91(& mdev->meta.mutex);
  }
#line 1632
  return (ok);
}
}
#line 1635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1641
  h.magic = 1728214147U;
#line 1642
  tmp = __fswab16((int )((__u16 )cmd));
#line 1642
  h.command = tmp;
#line 1643
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1643
  h.length = tmp___0;
#line 1645
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1645
  if (tmp___1 == 0) {
#line 1646
    return (0);
  } else {

  }
#line 1648
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1648
  ok = tmp___2 == 8;
#line 1650
  if (ok != 0) {
#line 1650
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1650
    if ((size_t )tmp___3 == size) {
#line 1650
      tmp___4 = 1;
    } else {
#line 1650
      tmp___4 = 0;
    }
  } else {
#line 1650
    tmp___4 = 0;
  }
#line 1650
  ok = tmp___4;
#line 1653
  drbd_put_data_sock___0(mdev);
#line 1655
  return (ok);
}
}
#line 1658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1663
  apv = mdev->agreed_pro_version;
#line 1665
  if (apv > 87) {
#line 1665
    if (apv == 88) {
#line 1665
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1665
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1665
      tmp___0 = 140;
    }
#line 1665
    size = tmp___0;
  } else {
#line 1665
    size = 12;
  }
#line 1673
  ldv_mutex_lock_92(& mdev->data.mutex);
#line 1674
  sock = mdev->data.socket;
#line 1676
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1676
  if (tmp___2 != 0L) {
#line 1677
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1679
    p = & mdev->data.sbuf.rs_param_89;
#line 1682
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1684
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1684
    p->rate = tmp___1;
#line 1686
    if (apv > 87) {
#line 1687
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1688
    if (apv > 88) {
#line 1689
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1691
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1693
    rv = 0;
  }
#line 1695
  ldv_mutex_unlock_93(& mdev->data.mutex);
#line 1697
  return (rv);
}
}
#line 1700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1705
  size = 32;
#line 1707
  if (mdev->agreed_pro_version > 86) {
#line 1708
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1708
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1712
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1712
  p = (struct p_protocol *)tmp___0;
#line 1713
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1714
    return (0);
  } else {

  }
#line 1716
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1716
  p->protocol = tmp___1;
#line 1717
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1717
  p->after_sb_0p = tmp___2;
#line 1718
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1718
  p->after_sb_1p = tmp___3;
#line 1719
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1719
  p->after_sb_2p = tmp___4;
#line 1720
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->want_lose);
#line 1720
  p->want_lose = tmp___5;
#line 1721
  tmp___6 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1721
  p->two_primaries = tmp___6;
#line 1723
  if (mdev->agreed_pro_version > 86) {
#line 1724
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1726
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1728
  kfree((void const   *)p);
#line 1729
  return (rv);
}
}
#line 1732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1737
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1737
  if (tmp == 0) {
#line 1738
    return (1);
  } else {

  }
#line 1740
  i = 0;
#line 1740
  goto ldv_42594;
  ldv_42593: ;
#line 1741
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1741
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1741
    p.uuid[i] = tmp___0;
  } else {
#line 1741
    p.uuid[i] = 0ULL;
  }
#line 1740
  i = i + 1;
  ldv_42594: ;
#line 1740
  if (i <= 3) {
#line 1741
    goto ldv_42593;
  } else {

  }
#line 1743
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1744
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1744
  p.uuid[4] = tmp___1;
#line 1745
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1746
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1746
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1747
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1801UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1748
  tmp___3 = __fswab64(uuid_flags);
#line 1748
  p.uuid[5] = tmp___3;
#line 1750
  put_ldev(mdev);
#line 1752
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1752
  return (tmp___4);
}
}
#line 1756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1758
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1758
  return (tmp);
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1763
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1763
  return (tmp);
}
}
#line 1767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1771
  tmp = __fswab64(val);
#line 1771
  p.uuid = tmp;
#line 1773
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1773
  return (tmp___0);
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  sector_t tmp___6 ;
  __u64 tmp___7 ;
  __u64 tmp___8 ;
  unsigned int tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;

  {
#line 1784
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1784
  if (tmp___3 != 0) {
#line 1785
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1785
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1785
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1785
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1785);
    } else {

    }
#line 1786
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1787
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1788
    q_order_type = drbd_queue_order_type(mdev);
#line 1789
    tmp___1 = drbd_queue_order_type(mdev);
#line 1789
    tmp___2 = __fswab32((__u32 )tmp___1);
#line 1789
    p.queue_order_type = tmp___2;
#line 1790
    put_ldev(mdev);
  } else {
#line 1792
    d_size = 0UL;
#line 1793
    u_size = 0UL;
#line 1794
    q_order_type = 0;
  }
#line 1797
  tmp___4 = __fswab64((__u64 )d_size);
#line 1797
  p.d_size = tmp___4;
#line 1798
  tmp___5 = __fswab64((__u64 )u_size);
#line 1798
  p.u_size = tmp___5;
#line 1799
  if (trigger_reply == 0) {
#line 1799
    tmp___6 = drbd_get_capacity(mdev->this_bdev);
#line 1799
    tmp___7 = (__u64 )tmp___6;
  } else {
#line 1799
    tmp___7 = 0ULL;
  }
#line 1799
  tmp___8 = __fswab64(tmp___7);
#line 1799
  p.c_size = tmp___8;
#line 1800
  tmp___9 = queue_max_segment_size(mdev->rq_queue);
#line 1800
  tmp___10 = __fswab32(tmp___9);
#line 1800
  p.max_segment_size = tmp___10;
#line 1801
  tmp___11 = __fswab32((__u32 )q_order_type);
#line 1801
  p.queue_order_type = tmp___11;
#line 1803
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1805
  return (ok);
}
}
#line 1812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1816
  ok = 0;
#line 1820
  drbd_state_lock___0(mdev);
#line 1822
  ldv_mutex_lock_94(& mdev->data.mutex);
#line 1824
  tmp = __fswab32(mdev->state.i);
#line 1824
  p.state = tmp;
#line 1825
  sock = mdev->data.socket;
#line 1827
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1827
  if (tmp___0 != 0L) {
#line 1828
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1832
  ldv_mutex_unlock_95(& mdev->data.mutex);
#line 1834
  drbd_state_unlock(mdev);
#line 1835
  return (ok);
}
}
#line 1838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1843
  tmp = __fswab32(mask.i);
#line 1843
  p.mask = tmp;
#line 1844
  tmp___0 = __fswab32(val.i);
#line 1844
  p.val = tmp___0;
#line 1846
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1846
  return (tmp___1);
}
}
#line 1850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1854
  tmp = __fswab32((__u32 )retcode);
#line 1854
  p.retcode = tmp;
#line 1856
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1856
  return (tmp___0);
}
}
#line 1860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1873
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1875
    return (0);
  } else {

  }
#line 1877
  if (c->bit_offset >= c->bm_bits) {
#line 1878
    return (0);
  } else {

  }
#line 1881
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1882
  memset((void *)(& p->code), 0, 4087UL);
#line 1884
  plain_bits = 0UL;
#line 1889
  toggle = 2U;
  ldv_42647: ;
#line 1894
  if (toggle == 0U) {
#line 1894
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1894
    tmp = tmp___0;
  } else {
#line 1894
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1894
    tmp = tmp___1;
  }
#line 1896
  if (tmp == 0xffffffffffffffffUL) {
#line 1897
    tmp = c->bm_bits;
  } else {

  }
#line 1898
  rl = tmp - c->bit_offset;
#line 1900
  if (toggle == 2U) {
#line 1901
    if (rl == 0UL) {
#line 1904
      DCBP_set_start(p, 1);
#line 1906
      toggle = toggle == 0U;
#line 1907
      goto ldv_42645;
    } else {

    }
#line 1909
    DCBP_set_start(p, 0);
  } else {

  }
#line 1914
  if (rl == 0UL) {
#line 1915
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1915
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1915
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1917
    return (-1);
  } else {

  }
#line 1920
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1921
  if (bits == -105) {
#line 1922
    goto ldv_42646;
  } else {

  }
#line 1923
  if (bits <= 0) {
#line 1924
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1924
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1924
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1925
    return (0);
  } else {

  }
#line 1928
  toggle = toggle == 0U;
#line 1929
  plain_bits = plain_bits + rl;
#line 1930
  c->bit_offset = tmp;
  ldv_42645: ;
#line 1931
  if (c->bit_offset < c->bm_bits) {
#line 1932
    goto ldv_42647;
  } else {

  }
  ldv_42646: 
#line 1933
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1935
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1938
    c->bit_offset = c->bit_offset - plain_bits;
#line 1939
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1940
    c->bit_offset = c->word_offset * 64UL;
#line 1941
    return (0);
  } else {

  }
#line 1946
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1949
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1951
  return ((int )len);
}
}
#line 1955 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_27483 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1958
  p = (struct p_compressed_bm *)h;
#line 1963
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1965
  if (len < 0) {
#line 1966
    return (FAILED);
  } else {

  }
#line 1968
  if (len != 0) {
#line 1969
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1970
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 1973
    c->packets[0] = c->packets[0] + 1U;
#line 1974
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 1976
    if (c->bit_offset >= c->bm_bits) {
#line 1977
      len = 0;
    } else {

    }
  } else {
#line 1981
    __min1 = 511UL;
#line 1981
    __min2 = c->bm_words - c->word_offset;
#line 1981
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1982
    len = (int )((unsigned int )num_words * 8U);
#line 1983
    if (len != 0) {
#line 1984
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 1985
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 1987
    c->word_offset = c->word_offset + num_words;
#line 1988
    c->bit_offset = c->word_offset * 64UL;
#line 1990
    c->packets[1] = c->packets[1] + 1U;
#line 1991
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 1993
    if (c->bit_offset > c->bm_bits) {
#line 1994
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1996
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 1998
  if (ok == 2) {
#line 1999
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2000
  return ((enum ldv_27483 )ok);
}
}
#line 2004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_27483 tmp___13 ;

  {
#line 2010
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2010
  if (_b != 0) {
#line 2010
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2010
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2010
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2010);
  } else {

  }
#line 2010
  if (_b != 0) {
#line 2010
    return (0);
  } else {

  }
#line 2014
  tmp___1 = __get_free_pages(16U, 0U);
#line 2014
  p = (struct p_header *)tmp___1;
#line 2015
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2016
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2016
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2016
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 2017
    return (0);
  } else {

  }
#line 2020
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2020
  if (tmp___10 != 0) {
#line 2021
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 2021
    if (tmp___9 != 0) {
#line 2022
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2023
      drbd_bm_set_all(mdev);
#line 2024
      tmp___8 = drbd_bm_write(mdev);
#line 2024
      if (tmp___8 != 0) {
#line 2028
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2028
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2028
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2030
        drbd_md_clear_flag(mdev, 8);
#line 2031
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2034
    put_ldev(mdev);
  } else {

  }
#line 2037
  tmp___11 = drbd_bm_bits(mdev);
#line 2037
  tmp___12 = drbd_bm_words(mdev);
#line 2037
  __constr_expr_0.bm_bits = tmp___11;
#line 2037
  __constr_expr_0.bm_words = tmp___12;
#line 2037
  __constr_expr_0.bit_offset = 0UL;
#line 2037
  __constr_expr_0.word_offset = 0UL;
#line 2037
  __constr_expr_0.packets[0] = 0U;
#line 2037
  __constr_expr_0.packets[1] = 0U;
#line 2037
  __constr_expr_0.bytes[0] = 0U;
#line 2037
  __constr_expr_0.bytes[1] = 0U;
#line 2037
  c = __constr_expr_0;
  ldv_42674: 
#line 2043
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2043
  ret = (int )tmp___13;
#line 2044
  if (ret == 0) {
#line 2045
    goto ldv_42674;
  } else {

  }
#line 2046
  free_pages((unsigned long )p, 0U);
#line 2047
  return (ret == 2);
}
}
#line 2050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2054
  tmp = drbd_get_data_sock___0(mdev);
#line 2054
  if (tmp == 0) {
#line 2055
    return (-1);
  } else {

  }
#line 2056
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2056
  err = tmp___0 == 0;
#line 2057
  drbd_put_data_sock___0(mdev);
#line 2058
  return (err);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2066
  p.barrier = barrier_nr;
#line 2067
  tmp = __fswab32(set_size);
#line 2067
  p.set_size = tmp;
#line 2069
  if ((int )mdev->state.ldv_32691.conn <= 9) {
#line 2070
    return (0);
  } else {

  }
#line 2071
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2073
  return (ok);
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2092
  p.sector = sector;
#line 2093
  p.block_id = block_id;
#line 2094
  p.blksize = blksize;
#line 2095
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2095
  tmp___0 = __fswab32((__u32 )tmp);
#line 2095
  p.seq_num = tmp___0;
#line 2097
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_32691.conn <= 9) {
#line 2098
    return (0);
  } else {

  }
#line 2099
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2101
  return (ok);
}
}
#line 2104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2107
  header_size = 24;
#line 2109
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2111
  tmp = __fswab32((__u32 )data_size);
#line 2111
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2111
  return (tmp___0);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2118
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2118
  return (tmp);
}
}
#line 2127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2130
  tmp = __fswab32(e->size);
#line 2130
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2130
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2130
  return (tmp___1);
}
}
#line 2138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2141
  tmp = __fswab64(block_id);
#line 2141
  tmp___0 = __fswab32((__u32 )blksize);
#line 2141
  tmp___1 = __fswab64((__u64 )sector);
#line 2141
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2141
  return (tmp___2);
}
}
#line 2147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2153
  tmp = __fswab64((__u64 )sector);
#line 2153
  p.sector = tmp;
#line 2154
  p.block_id = block_id;
#line 2155
  tmp___0 = __fswab32((__u32 )size);
#line 2155
  p.blksize = tmp___0;
#line 2157
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2159
  return (ok);
}
}
#line 2162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2170
  tmp = __fswab64((__u64 )sector);
#line 2170
  p.sector = tmp;
#line 2171
  p.block_id = 1728263026ULL;
#line 2172
  tmp___0 = __fswab32((__u32 )size);
#line 2172
  p.blksize = tmp___0;
#line 2174
  p.head.magic = 1728214147U;
#line 2175
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2175
  p.head.command = tmp___1;
#line 2176
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2176
  p.head.length = tmp___2;
#line 2178
  ldv_mutex_lock_96(& mdev->data.mutex);
#line 2180
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2180
  ok = tmp___3 == 32;
#line 2181
  if (ok != 0) {
#line 2181
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2181
    if (tmp___4 == digest_size) {
#line 2181
      tmp___5 = 1;
    } else {
#line 2181
      tmp___5 = 0;
    }
  } else {
#line 2181
    tmp___5 = 0;
  }
#line 2181
  ok = tmp___5;
#line 2183
  ldv_mutex_unlock_97(& mdev->data.mutex);
#line 2185
  return (ok);
}
}
#line 2188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2193
  tmp = __fswab64((__u64 )sector);
#line 2193
  p.sector = tmp;
#line 2194
  p.block_id = 1728261953ULL;
#line 2195
  tmp___0 = __fswab32((__u32 )size);
#line 2195
  p.blksize = tmp___0;
#line 2197
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2199
  return (ok);
}
}
#line 2206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2211
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2211
    tmp___0 = 1;
  } else {
#line 2211
    tmp = get_t_state(& mdev->asender);
#line 2211
    if ((unsigned int )tmp != 1U) {
#line 2211
      tmp___0 = 1;
    } else
#line 2211
    if ((int )mdev->state.ldv_32691.conn <= 9) {
#line 2211
      tmp___0 = 1;
    } else {
#line 2211
      tmp___0 = 0;
    }
  }
#line 2211
  drop_it = tmp___0;
#line 2216
  if (drop_it != 0) {
#line 2217
    return (1);
  } else {

  }
#line 2219
  mdev->ko_count = mdev->ko_count - 1U;
#line 2219
  drop_it = mdev->ko_count == 0U;
#line 2220
  if (drop_it == 0) {
#line 2221
    tmp___1 = get_current();
#line 2221
    tmp___2 = get_current();
#line 2221
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2221
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2221
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2223
    request_ping(mdev);
  } else {

  }
#line 2226
  return (drop_it);
}
}
#line 2250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2253
  tmp = kmap(page);
#line 2253
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2253
  sent = tmp___0;
#line 2254
  kunmap(page);
#line 2255
  if ((size_t )sent == size) {
#line 2256
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2257
  return ((size_t )sent == size);
}
}
#line 2260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2263
  tmp = current_thread_info___1();
#line 2263
  oldfs = tmp->addr_limit;
#line 2265
  len = (int )size;
#line 2273
  if (disable_sendpage != 0) {
#line 2274
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2274
    return (tmp___0);
  } else {
#line 2273
    tmp___1 = page_count(page);
#line 2273
    if (tmp___1 <= 0) {
#line 2274
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2274
      return (tmp___0);
    } else {
#line 2273
      tmp___2 = PageSlab(page);
#line 2273
      if (tmp___2 != 0) {
#line 2274
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2274
        return (tmp___0);
      } else {

      }
    }
  }
#line 2276
  drbd_update_congested(mdev);
#line 2277
  tmp___3 = current_thread_info___1();
#line 2277
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2277
  tmp___3->addr_limit = __constr_expr_0;
  ldv_42772: 
#line 2279
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2279
  sent = (int )tmp___4;
#line 2282
  if (sent == -11) {
#line 2283
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2283
    if (tmp___5 != 0) {
#line 2285
      goto ldv_42769;
    } else {
#line 2287
      goto ldv_42770;
    }
  } else {

  }
#line 2289
  if (sent <= 0) {
#line 2290
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2290
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2290
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2292
    goto ldv_42769;
  } else {

  }
#line 2294
  len = len - sent;
#line 2295
  offset = offset + sent;
  ldv_42770: ;
#line 2296
  if (len > 0) {
#line 2297
    goto ldv_42772;
  } else {

  }
  ldv_42769: 
#line 2297
  tmp___8 = current_thread_info___1();
#line 2297
  tmp___8->addr_limit = oldfs;
#line 2298
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2300
  ok = len == 0;
#line 2301
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2301
  if (tmp___9 != 0L) {
#line 2302
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2303
  return (ok);
}
}
#line 2306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2310
  bvec = bio->bi_io_vec;
#line 2310
  i = 0;
#line 2310
  goto ldv_42780;
  ldv_42779: 
#line 2311
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2311
  if (tmp == 0) {
#line 2313
    return (0);
  } else {

  }
#line 2310
  bvec = bvec + 1;
#line 2310
  i = i + 1;
  ldv_42780: ;
#line 2310
  if ((int )bio->bi_vcnt > i) {
#line 2311
    goto ldv_42779;
  } else {

  }

#line 2315
  return (1);
}
}
#line 2318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2322
  bvec = bio->bi_io_vec;
#line 2322
  i = 0;
#line 2322
  goto ldv_42789;
  ldv_42788: 
#line 2323
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2323
  if (tmp == 0) {
#line 2325
    return (0);
  } else {

  }
#line 2322
  bvec = bvec + 1;
#line 2322
  i = i + 1;
  ldv_42789: ;
#line 2322
  if ((int )bio->bi_vcnt > i) {
#line 2323
    goto ldv_42788;
  } else {

  }

#line 2328
  return (1);
}
}
#line 2334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2336
  ok = 1;
#line 2338
  dp_flags = 0U;
#line 2342
  tmp = drbd_get_data_sock___0(mdev);
#line 2342
  if (tmp == 0) {
#line 2343
    return (0);
  } else {

  }
#line 2345
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2345
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2345
    dgs = (int )tmp___0;
  } else {
#line 2345
    dgs = 0;
  }
#line 2348
  p.head.magic = 1728214147U;
#line 2349
  p.head.command = 0U;
#line 2350
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2350
  p.head.length = tmp___1;
#line 2353
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2353
  p.sector = tmp___2;
#line 2354
  p.block_id = (u64 )req;
#line 2355
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2355
  req->seq_num = tmp___3;
#line 2355
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2355
  p.seq_num = tmp___4;
#line 2357
  dp_flags = 0U;
#line 2362
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2362
  if ((int )tmp___7) {
#line 2363
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2363
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2363
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2366
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2366
  if ((int )tmp___8) {
#line 2367
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2370
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2370
  if ((int )tmp___9) {
#line 2371
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2372
  if ((int )mdev->state.ldv_32691.conn > 15 && (int )mdev->state.ldv_32691.conn <= 21) {
#line 2374
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2376
  tmp___10 = __fswab32(dp_flags);
#line 2376
  p.dp_flags = tmp___10;
#line 2377
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2378
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2378
  ok = tmp___11 == 32;
#line 2380
  if (ok != 0 && dgs != 0) {
#line 2381
    dgb = mdev->int_dig_out;
#line 2382
    drbd_csum(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2383
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2385
  if (ok != 0) {
#line 2386
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2387
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2389
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2392
  drbd_put_data_sock___0(mdev);
#line 2393
  return (ok);
}
}
#line 2400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2408
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2408
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2408
    dgs = (int )tmp;
  } else {
#line 2408
    dgs = 0;
  }
#line 2411
  p.head.magic = 1728214147U;
#line 2412
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2412
  p.head.command = tmp___0;
#line 2413
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2413
  p.head.length = tmp___1;
#line 2416
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2416
  p.sector = tmp___2;
#line 2417
  p.block_id = e->block_id;
#line 2424
  tmp___3 = drbd_get_data_sock___0(mdev);
#line 2424
  if (tmp___3 == 0) {
#line 2425
    return (0);
  } else {

  }
#line 2427
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2427
  ok = tmp___4 == 32;
#line 2429
  if (ok != 0 && dgs != 0) {
#line 2430
    dgb = mdev->int_dig_out;
#line 2431
    drbd_csum(mdev, mdev->integrity_w_tfm, e->private_bio, dgb);
#line 2432
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2434
  if (ok != 0) {
#line 2435
    ok = _drbd_send_zc_bio(mdev, e->private_bio);
  } else {

  }
#line 2437
  drbd_put_data_sock___0(mdev);
#line 2438
  return (ok);
}
}
#line 2457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2462
  sent = 0;
#line 2464
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2465
    return (-1000);
  } else {

  }
#line 2469
  iov.iov_base = buf;
#line 2470
  iov.iov_len = size;
#line 2472
  msg.msg_name = 0;
#line 2473
  msg.msg_namelen = 0;
#line 2474
  msg.msg_control = 0;
#line 2475
  msg.msg_controllen = 0UL;
#line 2476
  msg.msg_flags = msg_flags | 16384U;
#line 2478
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2479
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2480
    drbd_update_congested(mdev);
  } else {

  }
  ldv_42822: 
#line 2492
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2493
  if (rv == -11) {
#line 2494
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2494
    if (tmp != 0) {
#line 2495
      goto ldv_42820;
    } else {
#line 2497
      goto ldv_42821;
    }
  } else {

  }
#line 2499
  if (rv == 0) {
#line 2499
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2499);
  } else {

  }
#line 2500
  if (rv == -4) {
#line 2501
    tmp___2 = get_current();
#line 2501
    flush_signals(tmp___2);
#line 2502
    rv = 0;
  } else {

  }
#line 2504
  if (rv < 0) {
#line 2505
    goto ldv_42820;
  } else {

  }
#line 2506
  sent = sent + rv;
#line 2507
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2508
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_42821: ;
#line 2509
  if ((size_t )sent < size) {
#line 2510
    goto ldv_42822;
  } else {

  }
  ldv_42820: ;
#line 2511
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2512
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2514
  if (rv <= 0) {
#line 2515
    if (rv != -11) {
#line 2516
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2516
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2516
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2519
      val.i = 0U;
#line 2519
      val.ldv_32691.conn = 4U;
#line 2519
      mask.i = 0U;
#line 2519
      mask.ldv_32691.conn = 31U;
#line 2519
      drbd_force_state(mdev, mask, val);
    } else {
#line 2521
      val___0.i = 0U;
#line 2521
      val___0.ldv_32691.conn = 3U;
#line 2521
      mask___0.i = 0U;
#line 2521
      mask___0.ldv_32691.conn = 31U;
#line 2521
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2524
  return (sent);
}
}
#line 2527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2529
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2531
  rv = 0;
#line 2533
  tmp = spinlock_check(& mdev->req_lock);
#line 2533
  flags = _raw_spin_lock_irqsave(tmp);
#line 2537
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2538
    if ((mode & 2U) != 0U) {
#line 2539
      rv = -30;
    } else
#line 2540
    if (allow_oos == 0) {
#line 2541
      rv = -124;
    } else {

    }
  } else {

  }
#line 2544
  if (rv == 0) {
#line 2545
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2546
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2548
  return (rv);
}
}
#line 2551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2553
  mdev = (struct drbd_conf *)gd->private_data;
#line 2554
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2555
  return (0);
}
}
#line 2558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2560
  mdev = (struct drbd_conf *)q->queuedata;
#line 2563
  spin_lock_irq(q->queue_lock);
#line 2564
  blk_remove_plug(q);
#line 2565
  spin_unlock_irq(q->queue_lock);
#line 2568
  spin_lock_irq(& mdev->req_lock);
#line 2569
  if ((int )mdev->state.ldv_32691.pdsk > 3 && (int )mdev->state.ldv_32691.conn > 9) {
#line 2570
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2570
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2570
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2570
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             2570);
    } else {

    }
#line 2571
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2571
    if (tmp___2 != 0) {
#line 2576
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2576
      if (tmp___1 != 0) {
#line 2577
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2581
  spin_unlock_irq(& mdev->req_lock);
#line 2583
  if ((int )mdev->state.ldv_32691.disk > 3) {
#line 2584
    drbd_kick_lo(mdev);
  } else {

  }
#line 2585
  return;
}
}
#line 2587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2589
  mdev->sync_conf.after = -1;
#line 2590
  mdev->sync_conf.rate = 250;
#line 2591
  mdev->sync_conf.al_extents = 127;
#line 2592
  __constr_expr_0.ldv_32691.role = 2U;
#line 2592
  __constr_expr_0.ldv_32691.peer = 0U;
#line 2592
  __constr_expr_0.ldv_32691.conn = 0U;
#line 2592
  __constr_expr_0.ldv_32691.disk = 0U;
#line 2592
  __constr_expr_0.ldv_32691.pdsk = 6U;
#line 2592
  __constr_expr_0.ldv_32691.susp = 0U;
#line 2592
  __constr_expr_0.ldv_32691.aftr_isp = (unsigned char)0;
#line 2592
  __constr_expr_0.ldv_32691.peer_isp = (unsigned char)0;
#line 2592
  __constr_expr_0.ldv_32691.user_isp = (unsigned char)0;
#line 2592
  __constr_expr_0.ldv_32691._pad = (unsigned short)0;
#line 2592
  mdev->state = __constr_expr_0;
#line 2593
  return;
}
}
#line 2602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2607
  drbd_set_defaults(mdev);
#line 2612
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2614
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2615
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2616
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2617
  atomic_set(& mdev->unacked_cnt, 0);
#line 2618
  atomic_set(& mdev->local_cnt, 0);
#line 2619
  atomic_set(& mdev->net_cnt, 0);
#line 2620
  atomic_set(& mdev->packet_seq, 0);
#line 2621
  atomic_set(& mdev->pp_in_use, 0);
#line 2623
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2624
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2625
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2626
  sema_init(& mdev->data.work.s, 0);
#line 2627
  sema_init(& mdev->meta.work.s, 0);
#line 2628
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2630
  spinlock_check(& mdev->data.work.q_lock);
#line 2630
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5557.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2631
  spinlock_check(& mdev->meta.work.q_lock);
#line 2631
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5557.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2633
  spinlock_check(& mdev->al_lock);
#line 2633
  __raw_spin_lock_init(& mdev->al_lock.ldv_5557.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2634
  spinlock_check(& mdev->req_lock);
#line 2634
  __raw_spin_lock_init(& mdev->req_lock.ldv_5557.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2635
  spinlock_check(& mdev->peer_seq_lock);
#line 2635
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5557.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2636
  spinlock_check(& mdev->epoch_lock);
#line 2636
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5557.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2638
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2639
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2640
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2641
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2642
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2643
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2644
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2645
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2646
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2647
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2648
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2649
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2650
  mdev->resync_work.cb = & w_resync_inactive;
#line 2651
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2652
  mdev->md_sync_work.cb = & w_md_sync;
#line 2653
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2654
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2655
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2656
  mdev->resync_timer.function = & resync_timer_fn;
#line 2657
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2658
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2659
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2661
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2662
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2663
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2664
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2665
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2667
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2668
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2669
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2671
  mdev->agreed_pro_version = 91;
#line 2672
  mdev->write_ordering = WO_bio_barrier;
#line 2673
  mdev->resync_wenr = 4294967295U;
#line 2674
  return;
}
}
#line 2676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2678
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2679
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2679
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2679
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2683
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2683
  if (tmp___4 != 0) {
#line 2684
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2684
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2684
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2684
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2685
  tmp___15 = 0UL;
#line 2685
  mdev->rs_mark_time = tmp___15;
#line 2685
  tmp___14 = tmp___15;
#line 2685
  mdev->rs_mark_left = tmp___14;
#line 2685
  tmp___13 = tmp___14;
#line 2685
  mdev->rs_failed = tmp___13;
#line 2685
  tmp___12 = tmp___13;
#line 2685
  mdev->rs_total = tmp___12;
#line 2685
  tmp___11 = tmp___12;
#line 2685
  mdev->rs_start = tmp___11;
#line 2685
  tmp___10 = tmp___11;
#line 2685
  mdev->p_size = tmp___10;
#line 2685
  tmp___9 = (unsigned int )tmp___10;
#line 2685
  mdev->writ_cnt = tmp___9;
#line 2685
  tmp___8 = tmp___9;
#line 2685
  mdev->send_cnt = tmp___8;
#line 2685
  tmp___7 = tmp___8;
#line 2685
  mdev->recv_cnt = tmp___7;
#line 2685
  tmp___6 = tmp___7;
#line 2685
  mdev->read_cnt = tmp___6;
#line 2685
  tmp___5 = tmp___6;
#line 2685
  mdev->bm_writ_cnt = tmp___5;
#line 2685
  mdev->al_writ_cnt = tmp___5;
#line 2697
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2697
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2697
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2697
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2697);
  } else {

  }
#line 2699
  drbd_set_my_capacity(mdev, 0UL);
#line 2700
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2702
    drbd_bm_resize(mdev, 0UL);
#line 2703
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2706
  drbd_free_resources(mdev);
#line 2712
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2712
  if (tmp___20 == 0) {
#line 2712
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2712
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2712
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2712);
  } else {

  }
#line 2713
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2713
  if (tmp___23 == 0) {
#line 2713
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2713
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2713
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2713);
  } else {

  }
#line 2714
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2714
  if (tmp___26 == 0) {
#line 2714
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2714
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2714
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2714);
  } else {

  }
#line 2715
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2715
  if (tmp___29 == 0) {
#line 2715
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2715
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2715
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2715);
  } else {

  }
#line 2716
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2716
  if (tmp___32 == 0) {
#line 2716
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2716
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2716
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2716);
  } else {

  }
#line 2717
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2717
  if (tmp___35 == 0) {
#line 2717
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2717
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2717
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2717);
  } else {

  }
#line 2718
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2718
  if (tmp___38 == 0) {
#line 2718
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2718
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2718
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2718);
  } else {

  }
#line 2719
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2719
  if (tmp___41 == 0) {
#line 2719
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2719
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2719
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2719);
  } else {

  }
#line 2720
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2720
  if (tmp___44 == 0) {
#line 2720
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2720
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2720
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2720);
  } else {

  }
#line 2721
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2721
  if (tmp___47 == 0) {
#line 2721
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2721
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2721
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2721);
  } else {

  }
#line 2722
  return;
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2730
  goto ldv_42882;
  ldv_42881: 
#line 2731
  page = drbd_pp_pool;
#line 2732
  drbd_pp_pool = (struct page *)page->ldv_12290.ldv_12287.private;
#line 2733
  __free_pages(page, 0U);
#line 2734
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_42882: ;
#line 2730
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2731
    goto ldv_42881;
  } else {

  }

#line 2739
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2740
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2741
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2742
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2743
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2744
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2745
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2746
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2747
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2748
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2749
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2750
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2752
  drbd_ee_mempool = 0;
#line 2753
  drbd_request_mempool = 0;
#line 2754
  drbd_ee_cache = 0;
#line 2755
  drbd_request_cache = 0;
#line 2756
  drbd_bm_ext_cache = 0;
#line 2757
  drbd_al_ext_cache = 0;
#line 2759
  return;
}
}
#line 2762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2765
  number = (int const   )(minor_count * 8U);
#line 2769
  drbd_request_mempool = 0;
#line 2770
  drbd_ee_cache = 0;
#line 2771
  drbd_request_cache = 0;
#line 2772
  drbd_bm_ext_cache = 0;
#line 2773
  drbd_al_ext_cache = 0;
#line 2774
  drbd_pp_pool = 0;
#line 2777
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2779
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2780
    goto Enomem;
  } else {

  }
#line 2782
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2784
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2785
    goto Enomem;
  } else {

  }
#line 2787
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2789
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2790
    goto Enomem;
  } else {

  }
#line 2792
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2794
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2795
    goto Enomem;
  } else {

  }
#line 2798
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2800
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2801
    goto Enomem;
  } else {

  }
#line 2803
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2805
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2806
    goto Enomem;
  } else {

  }
#line 2809
  spinlock_check(& drbd_pp_lock);
#line 2809
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5557.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2811
  i = 0;
#line 2811
  goto ldv_42893;
  ldv_42892: 
#line 2812
  page = alloc_pages(131282U, 0U);
#line 2813
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2814
    goto Enomem;
  } else {

  }
#line 2815
  page->ldv_12290.ldv_12287.private = (unsigned long )drbd_pp_pool;
#line 2816
  drbd_pp_pool = page;
#line 2811
  i = i + 1;
  ldv_42893: ;
#line 2811
  if (i < number) {
#line 2812
    goto ldv_42892;
  } else {

  }
#line 2818
  drbd_pp_vacant = number;
#line 2820
  return (0);
  Enomem: 
#line 2823
  drbd_destroy_mempools();
#line 2824
  return (-12);
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2834
  return (0);
}
}
#line 2837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2845
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2846
  if (rr != 0) {
#line 2847
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2849
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2850
  if (rr != 0) {
#line 2851
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 2853
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2854
  if (rr != 0) {
#line 2855
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2855
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2855
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 2857
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2858
  if (rr != 0) {
#line 2859
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2859
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2859
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 2861
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2862
  if (rr != 0) {
#line 2863
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2863
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2863
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 2864
  return;
}
}
#line 2868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 2870
  tmp = minor_to_mdev(minor);
#line 2870
  mdev = tmp;
#line 2872
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2873
    return;
  } else {

  }
#line 2876
  if (mdev->open_cnt != 0) {
#line 2877
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2877
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2877
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2878);
  } else {

  }
#line 2880
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2880
  _b = tmp___4 == 0;
#line 2880
  if (_b != 0) {
#line 2880
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2880);
  } else {

  }
#line 2880
  if (_b != 0) {
#line 2882
    lp = mdev->data.work.q.next;
#line 2882
    goto ldv_42914;
    ldv_42913: 
#line 2883
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2883
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2883
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 2882
    lp = lp->next;
    ldv_42914: 
#line 2882
    __builtin_prefetch((void const   *)lp->next);
#line 2882
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2883
      goto ldv_42913;
    } else {

    }

  } else {

  }
#line 2888
  del_gendisk(mdev->vdisk);
#line 2893
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2894
    bdput(mdev->this_bdev);
  } else {

  }
#line 2896
  drbd_free_resources(mdev);
#line 2898
  drbd_release_ee_lists(mdev);
#line 2901
  kfree((void const   *)mdev->ee_hash);
#line 2907
  lc_destroy(mdev->act_log);
#line 2908
  lc_destroy(mdev->resync);
#line 2910
  kfree((void const   *)mdev->p_uuid);
#line 2913
  kfree((void const   *)mdev->int_dig_out);
#line 2914
  kfree((void const   *)mdev->int_dig_in);
#line 2915
  kfree((void const   *)mdev->int_dig_vv);
#line 2920
  drbd_free_mdev(mdev);
#line 2921
  return;
}
}
#line 2923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2927
  unregister_reboot_notifier(& drbd_notifier);
#line 2929
  drbd_nl_cleanup();
#line 2931
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 2932
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2933
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 2934
    i = minor_count;
#line 2935
    goto ldv_42921;
    ldv_42920: 
#line 2936
    drbd_delete_device(i);
    ldv_42921: 
#line 2935
    tmp = i;
#line 2935
    i = i - 1U;
#line 2935
    if (tmp != 0U) {
#line 2936
      goto ldv_42920;
    } else {

    }
#line 2937
    drbd_destroy_mempools();
  } else {

  }
#line 2940
  kfree((void const   *)minor_table);
#line 2942
  unregister_blkdev(147U, "drbd");
#line 2944
  printk("<6>drbd: module cleanup done.\n");
#line 2945
  return;
}
}
#line 2954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2956
  mdev = (struct drbd_conf *)congested_data;
#line 2958
  reason = 45;
#line 2959
  r = 0;
#line 2961
  tmp = __inc_ap_bio_cond___0(mdev);
#line 2961
  if (tmp == 0) {
#line 2963
    r = bdi_bits;
#line 2964
    reason = 100;
#line 2965
    goto out;
  } else {

  }
#line 2968
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2968
  if (tmp___0 != 0) {
#line 2969
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2970
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 2971
    put_ldev(mdev);
#line 2972
    if (r != 0) {
#line 2973
      reason = 98;
    } else {

    }
  } else {

  }
#line 2976
  if ((bdi_bits & 4) != 0) {
#line 2976
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 2976
    if (tmp___1 != 0) {
#line 2977
      r = r | 4;
#line 2978
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 2982
  mdev->congestion_reason = reason;
#line 2983
  return (r);
}
}
#line 2986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 2993
  tmp = kzalloc___1(3952UL, 208U);
#line 2993
  mdev = (struct drbd_conf *)tmp;
#line 2994
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2995
    return (0);
  } else {

  }
#line 2996
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 2996
  if (tmp___0) {
#line 2996
    tmp___1 = 0;
  } else {
#line 2996
    tmp___1 = 1;
  }
#line 2996
  if (tmp___1) {
#line 2997
    goto out_no_cpumask;
  } else {

  }
#line 2999
  mdev->minor = minor;
#line 3001
  drbd_init_set_defaults(mdev);
#line 3003
  q = blk_alloc_queue(208U);
#line 3004
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3005
    goto out_no_q;
  } else {

  }
#line 3006
  mdev->rq_queue = q;
#line 3007
  q->queuedata = (void *)mdev;
#line 3008
  blk_queue_max_segment_size(q, 32768U);
#line 3010
  disk = alloc_disk(1);
#line 3011
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3012
    goto out_no_disk;
  } else {

  }
#line 3013
  mdev->vdisk = disk;
#line 3015
  set_disk_ro(disk, 1);
#line 3017
  disk->queue = q;
#line 3018
  disk->major = 147;
#line 3019
  disk->first_minor = (int )minor;
#line 3020
  disk->fops = & drbd_ops;
#line 3021
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3022
  disk->private_data = (void *)mdev;
#line 3024
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3026
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3028
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3029
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3031
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3032
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3033
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3034
  q->queue_lock = & mdev->req_lock;
#line 3036
  q->unplug_fn = & drbd_unplug_fn;
#line 3038
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3039
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3040
    goto out_no_io_page;
  } else {

  }
#line 3042
  tmp___2 = drbd_bm_init(mdev);
#line 3042
  if (tmp___2 != 0) {
#line 3043
    goto out_no_bitmap;
  } else {

  }
#line 3045
  tmp___3 = tl_init(mdev);
#line 3045
  if (tmp___3 == 0) {
#line 3046
    goto out_no_tl;
  } else {

  }
#line 3048
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3048
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3049
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3050
    goto out_no_app_reads;
  } else {

  }
#line 3052
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3052
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3053
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3054
    goto out_no_epoch;
  } else {

  }
#line 3056
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3057
  mdev->epochs = 1U;
#line 3059
  return (mdev);
  out_no_epoch: 
#line 3064
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3066
  tl_cleanup(mdev);
  out_no_tl: 
#line 3068
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3070
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3072
  put_disk(disk);
  out_no_disk: 
#line 3074
  blk_cleanup_queue(q);
  out_no_q: 
#line 3076
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3078
  kfree((void const   *)mdev);
#line 3079
  return (0);
}
}
#line 3084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3086
  kfree((void const   *)mdev->current_epoch);
#line 3087
  kfree((void const   *)mdev->app_reads_hash);
#line 3088
  tl_cleanup(mdev);
#line 3089
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3090
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3091
  __free_pages(mdev->md_io_page, 0U);
#line 3092
  put_disk(mdev->vdisk);
#line 3093
  blk_cleanup_queue(mdev->rq_queue);
#line 3094
  free_cpumask_var(mdev->cpu_mask);
#line 3095
  kfree((void const   *)mdev);
#line 3096
  return;
}
}
#line 3099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3110
  if (minor_count == 0U || minor_count > 255U) {
#line 3111
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3114
    return (-22);
  } else {

  }
#line 3120
  err = drbd_nl_init();
#line 3121
  if (err != 0) {
#line 3122
    return (err);
  } else {

  }
#line 3124
  err = register_blkdev(147U, "drbd");
#line 3125
  if (err != 0) {
#line 3126
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3129
    return (err);
  } else {

  }
#line 3132
  register_reboot_notifier(& drbd_notifier);
#line 3137
  err = -12;
#line 3139
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3141
  drbd_proc = 0;
#line 3142
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3142
  minor_table = (struct drbd_conf **)tmp;
#line 3144
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3145
    goto Enomem;
  } else {

  }
#line 3147
  err = drbd_create_mempools();
#line 3148
  if (err != 0) {
#line 3149
    goto Enomem;
  } else {

  }
#line 3151
  drbd_proc = proc_create("drbd", 33060U, 0, & drbd_proc_fops);
#line 3152
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3153
    printk("<3>drbd: unable to register proc file\n");
#line 3154
    goto Enomem;
  } else {

  }
#line 3157
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3159
  printk("<6>drbd: initialized. Version: 8.3.6 (api:%d/proto:%d-%d)\n", 88, 86, 91);
#line 3162
  tmp___0 = drbd_buildtag();
#line 3162
  printk("<6>drbd: %s\n", tmp___0);
#line 3163
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3165
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3167
  return (0);
  Enomem: 
#line 3170
  drbd_cleanup();
#line 3171
  if (err == -12) {
#line 3173
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3175
    printk("<3>drbd: initialization failure\n");
  }
#line 3176
  return (err);
}
}
#line 3179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3181
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3182
    return;
  } else {

  }
#line 3184
  bd_release(ldev->backing_bdev);
#line 3185
  bd_release(ldev->md_bdev);
#line 3187
  fput(ldev->lo_file);
#line 3188
  fput(ldev->md_file);
#line 3190
  kfree((void const   *)ldev);
#line 3191
  return;
}
}
#line 3193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3195
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3196
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3197
    sock_release(mdev->data.socket);
#line 3198
    mdev->data.socket = 0;
  } else {

  }
#line 3200
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3201
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3202
    sock_release(mdev->meta.socket);
#line 3203
    mdev->meta.socket = 0;
  } else {

  }
#line 3205
  return;
}
}
#line 3208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3210
  crypto_free_hash(mdev->csums_tfm);
#line 3211
  mdev->csums_tfm = 0;
#line 3212
  crypto_free_hash(mdev->verify_tfm);
#line 3213
  mdev->verify_tfm = 0;
#line 3214
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3215
  mdev->cram_hmac_tfm = 0;
#line 3216
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3217
  mdev->integrity_w_tfm = 0;
#line 3218
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3219
  mdev->integrity_r_tfm = 0;
#line 3221
  drbd_free_sock(mdev);
#line 3223
  drbd_free_bc(mdev->ldev);
#line 3223
  mdev->ldev = 0;
#line 3224
  return;
}
}
#line 3251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3257
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3257
  if (tmp == 0) {
#line 3258
    return;
  } else {

  }
#line 3259
  del_timer(& mdev->md_sync_timer);
#line 3263
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3263
  if (tmp___0 == 0) {
#line 3264
    return;
  } else {

  }
#line 3266
  ldv_mutex_lock_98(& mdev->md_io_mutex);
#line 3267
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3267
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3268
  memset((void *)buffer, 0, 512UL);
#line 3270
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3270
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3270
  buffer->la_size = tmp___3;
#line 3271
  i = 0;
#line 3271
  goto ldv_42985;
  ldv_42984: 
#line 3272
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3272
  buffer->uuid[i] = tmp___4;
#line 3271
  i = i + 1;
  ldv_42985: ;
#line 3271
  if (i <= 3) {
#line 3272
    goto ldv_42984;
  } else {

  }
#line 3273
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3273
  buffer->flags = tmp___5;
#line 3274
  buffer->magic = 1795323011U;
#line 3276
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3276
  buffer->md_size_sect = tmp___6;
#line 3277
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3277
  buffer->al_offset = tmp___7;
#line 3278
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3278
  buffer->al_nr_extents = tmp___8;
#line 3279
  buffer->bm_bytes_per_bit = 1048576U;
#line 3280
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3280
  buffer->device_uuid = tmp___9;
#line 3282
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3282
  buffer->bm_offset = tmp___10;
#line 3284
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3284
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3284
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3284
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3284
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3284);
  } else {

  }
#line 3285
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3287
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3287
  if (tmp___16 != 0) {
#line 3288
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3291
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3291
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3291
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3293
    drbd_chk_io_error____2(mdev, 1, 1, "drbd_md_sync");
  }
#line 3298
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3298
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3300
  ldv_mutex_unlock_99(& mdev->md_io_mutex);
#line 3301
  put_ldev(mdev);
#line 3302
  return;
}
}
#line 3312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3315
  rv = 101;
#line 3317
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3317
  if (tmp == 0) {
#line 3318
    return (118);
  } else {

  }
#line 3320
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 3321
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3321
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3323
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3323
  if (tmp___3 == 0) {
#line 3326
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3326
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3326
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3327
    rv = 118;
#line 3328
    goto err;
  } else {

  }
#line 3331
  tmp___6 = __fswab32(buffer->magic);
#line 3331
  if (tmp___6 != 2205418091U) {
#line 3332
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3332
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3332
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3333
    rv = 119;
#line 3334
    goto err;
  } else {

  }
#line 3336
  tmp___10 = __fswab32(buffer->al_offset);
#line 3336
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3337
    tmp___7 = __fswab32(buffer->al_offset);
#line 3337
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3339
    rv = 119;
#line 3340
    goto err;
  } else {

  }
#line 3342
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3342
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3343
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3343
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3343
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3343
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3345
    rv = 119;
#line 3346
    goto err;
  } else {

  }
#line 3348
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3348
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3349
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3349
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3349
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3349
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3351
    rv = 119;
#line 3352
    goto err;
  } else {

  }
#line 3355
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3355
  if (tmp___22 != 4096U) {
#line 3356
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3356
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3356
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3356
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3358
    rv = 119;
#line 3359
    goto err;
  } else {

  }
#line 3362
  tmp___23 = __fswab64(buffer->la_size);
#line 3362
  bdev->md.la_size_sect = tmp___23;
#line 3363
  i = 0;
#line 3363
  goto ldv_42997;
  ldv_42996: 
#line 3364
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3364
  bdev->md.uuid[i] = tmp___24;
#line 3363
  i = i + 1;
  ldv_42997: ;
#line 3363
  if (i <= 3) {
#line 3364
    goto ldv_42996;
  } else {

  }
#line 3365
  tmp___25 = __fswab32(buffer->flags);
#line 3365
  bdev->md.flags = tmp___25;
#line 3366
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3366
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3367
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3367
  bdev->md.device_uuid = tmp___27;
#line 3369
  if (mdev->sync_conf.al_extents <= 6) {
#line 3370
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3373
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 3374
  put_ldev(mdev);
#line 3376
  return (rv);
}
}
#line 3387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3389
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3390
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3391
  return;
}
}
#line 3394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3398
  i = 2;
#line 3398
  goto ldv_43007;
  ldv_43006: 
#line 3399
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3398
  i = i + 1;
  ldv_43007: ;
#line 3398
  if (i <= 2) {
#line 3399
    goto ldv_43006;
  } else {

  }

#line 3403
  return;
}
}
#line 3402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3404
  if (idx == 0) {
#line 3405
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3406
      val = val | 1ULL;
    } else {
#line 3408
      val = val & 0xfffffffffffffffeULL;
    }
#line 3410
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3413
  (mdev->ldev)->md.uuid[idx] = val;
#line 3414
  drbd_md_mark_dirty(mdev);
#line 3415
  return;
}
}
#line 3418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3420
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3421
    drbd_uuid_move_history(mdev);
#line 3422
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3424
  _drbd_uuid_set(mdev, idx, val);
#line 3425
  return;
}
}
#line 3434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3438
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3438
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3438
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3439
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3439
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3439
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3439
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3439);
  } else {

  }
#line 3440
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3442
  get_random_bytes((void *)(& val), 8);
#line 3443
  _drbd_uuid_set(mdev, 0, val);
#line 3444
  return;
}
}
#line 3446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3448
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3449
    return;
  } else {

  }
#line 3451
  if (val == 0ULL) {
#line 3452
    drbd_uuid_move_history(mdev);
#line 3453
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3454
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3456
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3457
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3457
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3457
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3459
    (mdev->ldev)->md.uuid[1] = val;
#line 3460
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3463
  drbd_md_mark_dirty(mdev);
#line 3464
  return;
}
}
#line 3472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3474
  rv = -5;
#line 3476
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3476
  if (tmp != 0) {
#line 3477
    drbd_md_set_flag(mdev, 8);
#line 3478
    drbd_md_sync(mdev);
#line 3479
    drbd_bm_set_all(mdev);
#line 3481
    rv = drbd_bm_write(mdev);
#line 3483
    if (rv == 0) {
#line 3484
      drbd_md_clear_flag(mdev, 8);
#line 3485
      drbd_md_sync(mdev);
    } else {

    }
#line 3488
    put_ldev(mdev);
  } else {

  }
#line 3491
  return (rv);
}
}
#line 3500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3502
  rv = -5;
#line 3504
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3504
  if (tmp != 0) {
#line 3505
    drbd_bm_clear_all(mdev);
#line 3506
    rv = drbd_bm_write(mdev);
#line 3507
    put_ldev(mdev);
  } else {

  }
#line 3510
  return (rv);
}
}
#line 3513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3515
  __mptr = (struct drbd_work  const  *)w;
#line 3515
  work = (struct bm_io_work *)__mptr;
#line 3518
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3518
  if (tmp___1 != 0) {
#line 3518
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3518
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3518
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3518);
  } else {

  }
#line 3520
  drbd_bm_lock(mdev, work->why);
#line 3521
  rv = (*(work->io_fn))(mdev);
#line 3522
  drbd_bm_unlock(mdev);
#line 3524
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3525
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3527
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3528
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3530
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3531
  work->why = 0;
#line 3533
  return (1);
}
}
#line 3548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3553
  tmp___1 = get_current();
#line 3553
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3553
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3553
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3553
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3553);
  } else {

  }
#line 3555
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3555
  if (tmp___4 != 0) {
#line 3555
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3555
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3555
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3555);
  } else {

  }
#line 3556
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3556
  if (tmp___7 != 0) {
#line 3556
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3556
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3556
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3556);
  } else {

  }
#line 3557
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3557
  if (tmp___10 == 0) {
#line 3557
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3557
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3557
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3557);
  } else {

  }
#line 3558
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3559
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3562
  mdev->bm_io_work.io_fn = io_fn;
#line 3563
  mdev->bm_io_work.done = done;
#line 3564
  mdev->bm_io_work.why = why;
#line 3566
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3567
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3567
  if (tmp___16 == 0) {
#line 3568
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3568
    if (tmp___15 != 0) {
#line 3569
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3570
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3572
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3572
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3572
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3573
  return;
}
}
#line 3585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3589
  tmp___1 = get_current();
#line 3589
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3589
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3589);
  } else {

  }
#line 3591
  drbd_suspend_io(mdev);
#line 3593
  drbd_bm_lock(mdev, why);
#line 3594
  rv = (*io_fn)(mdev);
#line 3595
  drbd_bm_unlock(mdev);
#line 3597
  drbd_resume_io(mdev);
#line 3599
  return (rv);
}
}
#line 3602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3604
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3605
    drbd_md_mark_dirty(mdev);
#line 3606
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3608
  return;
}
}
#line 3610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3612
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3613
    drbd_md_mark_dirty(mdev);
#line 3614
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3616
  return;
}
}
#line 3617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3619
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3624
  mdev = (struct drbd_conf *)data;
#line 3626
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3627
  return;
}
}
#line 3629 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3631
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3631
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3631
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3632
  drbd_md_sync(mdev);
#line 3634
  return (1);
}
}
#line 3654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3658
  tmp = rsp->count;
#line 3658
  rsp->count = rsp->count - 1UL;
#line 3658
  if (tmp == 0UL) {
#line 3659
    get_random_bytes((void *)(& refresh), 8);
#line 3660
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3661
    rsp->count = 10000UL;
  } else {

  }
#line 3663
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3664
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3664
  return ((unsigned long )tmp___0);
}
}
#line 3668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[9U] ;

  {
#line 3669
  _faults[0] = (char *)"Meta-data write";
#line 3669
  _faults[1] = (char *)"Meta-data read";
#line 3669
  _faults[2] = (char *)"Resync write";
#line 3669
  _faults[3] = (char *)"Resync read";
#line 3669
  _faults[4] = (char *)"Data write";
#line 3669
  _faults[5] = (char *)"Data read";
#line 3669
  _faults[6] = (char *)"Data read ahead";
#line 3669
  _faults[7] = (char *)"BM allocation";
#line 3669
  _faults[8] = (char *)"EE allocation";
#line 3681
  return (type <= 8U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3685 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3687
  rrs.state = 0UL;
#line 3687
  rrs.count = 0UL;
#line 3689
  if (fault_devs == 0) {
#line 3689
    goto _L;
  } else {
#line 3689
    tmp = mdev_to_minor(mdev);
#line 3689
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3689
      tmp___0 = _drbd_fault_random(& rrs);
#line 3689
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3689
        tmp___1 = 1;
      } else {
#line 3689
        tmp___1 = 0;
      }
    } else {
#line 3689
      tmp___1 = 0;
    }
  }
#line 3689
  ret = (unsigned int )tmp___1;
#line 3694
  if (ret != 0U) {
#line 3695
    fault_count = fault_count + 1;
#line 3697
    tmp___5 = __printk_ratelimit("_drbd_insert_fault");
#line 3697
    if (tmp___5 != 0) {
#line 3698
      tmp___2 = _drbd_fault_str(type);
#line 3698
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3698
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3698
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3702
  return (ret);
}
}
#line 3706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3711
  buildtag[0] = '\000';
#line 3711
  tmp = 1U;
#line 3711
  while (1) {
#line 3711
    if (tmp >= 38U) {
#line 3711
      break;
    } else {

    }
#line 3711
    buildtag[tmp] = (char)0;
#line 3711
    tmp = tmp + 1U;
  }
#line 3713
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3715
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3716
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3719
      buildtag[0] = 98;
    }
  } else {

  }
#line 3722
  return ((char const   *)(& buildtag));
}
}
#line 3770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_60_p1 ;
  int res_drbd_open_60 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_61_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_68_p1 ;
  void *var_drbd_notify_sys_68_p2 ;
  unsigned long var_md_sync_timer_fn_93_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3994
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3946
  LDV_IN_INTERRUPT = 1;
#line 3955
  ldv_initialize();
#line 3982
  ldv_handler_precall();
#line 3983
  tmp = drbd_init();
#line 3983
  if (tmp != 0) {
#line 3984
    goto ldv_final;
  } else {

  }
#line 4001
  goto ldv_43168;
  ldv_43167: 
#line 4005
  tmp___0 = nondet_int();
#line 4005
  switch (tmp___0) {
  case 0: ;
#line 4010
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4036
    ldv_handler_precall();
#line 4037
    res_drbd_open_60 = drbd_open(var_group1, var_drbd_open_60_p1);
#line 4038
    ldv_check_return_value(res_drbd_open_60);
#line 4039
    if (res_drbd_open_60 != 0) {
#line 4040
      goto ldv_module_exit;
    } else {

    }
#line 4053
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4059
  goto ldv_43162;
  case 1: ;
#line 4063
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4089
    ldv_handler_precall();
#line 4090
    drbd_release(var_group2, var_drbd_release_61_p1);
#line 4103
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4109
  goto ldv_43162;
  case 2: 
#line 4139
  ldv_handler_precall();
#line 4140
  drbd_notify_sys(var_group3, var_drbd_notify_sys_68_p1, var_drbd_notify_sys_68_p2);
#line 4159
  goto ldv_43162;
  case 3: 
#line 4192
  ldv_handler_precall();
#line 4193
  md_sync_timer_fn(var_md_sync_timer_fn_93_p0);
#line 4209
  goto ldv_43162;
  default: ;
#line 4210
  goto ldv_43162;
  }
  ldv_43162: ;
  ldv_43168: 
#line 4001
  tmp___1 = nondet_int();
#line 4001
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4003
    goto ldv_43167;
  } else {

  }

  ldv_module_exit: 
#line 4243
  ldv_handler_precall();
#line 4244
  drbd_cleanup();
  ldv_final: 
#line 4259
  ldv_check_final_state();
#line 4262
  return;
}
}
#line 4266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4271
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4273
  mutex_lock(ldv_func_arg1);
#line 4274
  return;
}
}
#line 4276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4281
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4283
  mutex_unlock(ldv_func_arg1);
#line 4284
  return;
}
}
#line 4286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4291
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4293
  mutex_unlock(ldv_func_arg1);
#line 4294
  return;
}
}
#line 4296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4301
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4303
  mutex_lock(ldv_func_arg1);
#line 4304
  return;
}
}
#line 4306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4311
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4313
  mutex_unlock(ldv_func_arg1);
#line 4314
  return;
}
}
#line 4316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4321
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4323
  mutex_lock(ldv_func_arg1);
#line 4324
  return;
}
}
#line 4326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4331
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4333
  mutex_lock(ldv_func_arg1);
#line 4334
  return;
}
}
#line 4336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4341
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4343
  mutex_unlock(ldv_func_arg1);
#line 4344
  return;
}
}
#line 4346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4351
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4353
  mutex_unlock(ldv_func_arg1);
#line 4354
  return;
}
}
#line 4356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4361
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4363
  mutex_lock(ldv_func_arg1);
#line 4364
  return;
}
}
#line 4366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4371
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4373
  mutex_unlock(ldv_func_arg1);
#line 4374
  return;
}
}
#line 4376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4381
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4383
  mutex_lock(ldv_func_arg1);
#line 4384
  return;
}
}
#line 4386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4391
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4393
  mutex_unlock(ldv_func_arg1);
#line 4394
  return;
}
}
#line 4396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4401
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4403
  mutex_lock(ldv_func_arg1);
#line 4404
  return;
}
}
#line 4406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4411
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4413
  mutex_unlock(ldv_func_arg1);
#line 4414
  return;
}
}
#line 4416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4421
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4423
  mutex_lock(ldv_func_arg1);
#line 4424
  return;
}
}
#line 4426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4431
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4433
  mutex_unlock(ldv_func_arg1);
#line 4434
  return;
}
}
#line 4436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4441
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4443
  mutex_lock(ldv_func_arg1);
#line 4444
  return;
}
}
#line 4446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4451
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4453
  mutex_unlock(ldv_func_arg1);
#line 4454
  return;
}
}
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 90
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 102
  {      0,      "Multiple primaries not allowed by config",      "Refusing to be Primary without at least one UpToDate disk",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 126
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 131
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 136
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 141
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 184 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 379 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 382
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 382
  return (tmp != 0);
}
}
#line 468 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 471
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 472
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_122(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) ;
#line 50 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 68
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 78
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 80
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 81
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 82
    return (-12);
  } else {

  }
#line 83
  tmp = call_usermodehelper_exec(info, wait);
#line 83
  return (tmp);
}
}
#line 202 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 81
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10780: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10780;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large___5(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc___5(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 81 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ,
                                          int refcnt ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 76
  tmp = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 76
  if (tmp != 0L) {
#line 76
    rcu_read_lock_sched_notrace();
#line 76
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 76
    it_func = _________p1;
#line 76
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11464: 
#line 76
      (*((void (*)(struct module * , unsigned long  , int  ))*it_func))(mod, ip, refcnt);
#line 76
      it_func = it_func + 1;
#line 76
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 77
        goto ldv_11464;
      } else {

      }

    } else {

    }
#line 76
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 78
  return;
}
}
#line 479 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  unsigned int cpu ;
  int pfo_ret__ ;
  local_t *tmp ;
  local_t *tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
#line 481
  ret = 1;
#line 483
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 484
    switch (4UL) {
    case 1UL: 
#line 484
    __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11749;
    case 2UL: 
#line 484
    __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11749;
    case 4UL: 
#line 484
    __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11749;
    case 8UL: 
#line 484
    __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (per_cpu__cpu_number));
#line 484
    goto ldv_11749;
    default: 
#line 484
    __bad_percpu_size();
    }
    ldv_11749: 
#line 484
    cpu = (unsigned int )pfo_ret__;
#line 485
    tmp___2 = module_is_live(module);
#line 485
    tmp___3 = __builtin_expect(tmp___2 != 0, 1L);
#line 485
    if (tmp___3 != 0L) {
#line 486
      tmp = __module_ref_addr(module, (int )cpu);
#line 486
      local_inc(tmp);
#line 487
      tmp___0 = __module_ref_addr(module, (int )cpu);
#line 487
      tmp___1 = atomic_long_read(& tmp___0->a);
#line 487
      trace_module_get___0(module, (unsigned long )((void *)0), (int )tmp___1);
    } else {
#line 491
      ret = 0;
    }
  } else {

  }
#line 494
  return (ret);
}
}
#line 1912 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1978
extern int bd_claim(struct block_device * , void * ) ;
#line 169 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 170
extern void cn_del_callback(struct cb_id * ) ;
#line 171
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 929 "include/linux/blkdev.h"
extern void blk_queue_max_sectors(struct request_queue * , unsigned int  ) ;
#line 931
extern void blk_queue_max_phys_segments(struct request_queue * , unsigned short  ) ;
#line 932
extern void blk_queue_max_hw_segments(struct request_queue * , unsigned short  ) ;
#line 936
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 945
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 956
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1041 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1043
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_40909;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_40909;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_40909: ;
#line 1746
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[68U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"overwrite_peer", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 73
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 74
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_41473;
  ldv_41472: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->overwrite_peer = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_41470;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_41470: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_41473: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_41472;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_41534;
  ldv_41533: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_41502;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_41502;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_41502;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_41502;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_41502;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_41502;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_41502;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_41502;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_41502;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_41502;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_41502;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_41502;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_41502: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_41534: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_41533;
  } else {

  }

#line 20
  return (1);
}
}
#line 66
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 66 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_41636;
  ldv_41635: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_41572;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_41572;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_41572;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_41572;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_41572;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_41572;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_41572;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_41572;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_41572;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_41572;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_41572;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_41572;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_41572;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_41572;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_41572;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_41572;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_41572;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_41572;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_41572;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_41572;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_41572;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_41572: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_41636: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_41635;
  } else {

  }

#line 38
  return (1);
}
}
#line 72
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 72 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 70
  goto ldv_41668;
  ldv_41667: 
#line 70
  tmp = tags;
#line 70
  tags = tags + 1;
#line 70
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 70
  dlen = (int )tmp___0;
#line 70
  switch (tag & 8191) {
  case 29: 
#line 70
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 70
  goto ldv_41665;
  default: ;
#line 70
  if ((tag & 8192) != 0) {
#line 70
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 70
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 70
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 70
    return (0);
  } else {

  }
  }
  ldv_41665: 
#line 70
  tags = tags + (unsigned long )dlen;
  ldv_41668: 
#line 70
  tmp___3 = tags;
#line 70
  tags = tags + 1;
#line 70
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 70
  tag = (int )tmp___4;
#line 70
  if (tag != 0) {
#line 71
    goto ldv_41667;
  } else {

  }

#line 70
  return (1);
}
}
#line 82
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 82 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned short *tmp___12 ;
  u16 tmp___13 ;

  {
#line 74
  goto ldv_41718;
  ldv_41717: 
#line 74
  tmp = tags;
#line 74
  tags = tags + 1;
#line 74
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 74
  dlen = (int )tmp___0;
#line 74
  switch (tag & 8191) {
  case 30: 
#line 74
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->rate = (int )tmp___1;
#line 74
  goto ldv_41682;
  case 31: 
#line 74
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->after = (int )tmp___2;
#line 74
  goto ldv_41682;
  case 32: 
#line 74
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->al_extents = (int )tmp___3;
#line 74
  goto ldv_41682;
  case 52: ;
#line 74
  if (dlen > 64) {
#line 74
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___5,
           tmp___4, (char *)"verify_alg", dlen, 64U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->verify_alg_len = dlen;
#line 74
  __min1 = (size_t )dlen;
#line 74
  __min2 = 64UL;
#line 74
  __len = __min1 < __min2 ? __min1 : __min2;
#line 74
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 74
  goto ldv_41682;
  case 51: ;
#line 74
  if (dlen > 32) {
#line 74
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___7,
           tmp___6, (char *)"cpu_mask", dlen, 32U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->cpu_mask_len = dlen;
#line 74
  __min1___0 = (size_t )dlen;
#line 74
  __min2___0 = 32UL;
#line 74
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 74
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 74
  goto ldv_41682;
  case 64: ;
#line 74
  if (dlen > 64) {
#line 74
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"csums_alg", dlen, 64U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->csums_alg_len = dlen;
#line 74
  __min1___1 = (size_t )dlen;
#line 74
  __min2___1 = 64UL;
#line 74
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 74
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 74
  goto ldv_41682;
  case 65: 
#line 74
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 74
  goto ldv_41682;
  default: ;
#line 74
  if ((tag & 8192) != 0) {
#line 74
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: Unknown tag: %d\n", tmp___11, tmp___10, tag & 8191);
#line 74
    return (0);
  } else {

  }
  }
  ldv_41682: 
#line 74
  tags = tags + (unsigned long )dlen;
  ldv_41718: 
#line 74
  tmp___12 = tags;
#line 74
  tags = tags + 1;
#line 74
  tmp___13 = get_unaligned_le16((void const   *)tmp___12);
#line 74
  tag = (int )tmp___13;
#line 74
  if (tag != 0) {
#line 75
    goto ldv_41717;
  } else {

  }

#line 74
  return (1);
}
}
#line 126
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 126 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 124
  goto ldv_42017;
  ldv_42016: 
#line 124
  tmp = tags;
#line 124
  tags = tags + 1;
#line 124
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 124
  dlen = (int )tmp___0;
#line 124
  switch (tag & 8191) {
  case 66: 
#line 124
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 124
  goto ldv_42014;
  default: ;
#line 124
  if ((tag & 8192) != 0) {
#line 124
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 124
    return (0);
  } else {

  }
  }
  ldv_42014: 
#line 124
  tags = tags + (unsigned long )dlen;
  ldv_42017: 
#line 124
  tmp___3 = tags;
#line 124
  tags = tags + 1;
#line 124
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 124
  tag = (int )tmp___4;
#line 124
  if (tag != 0) {
#line 125
    goto ldv_42016;
  } else {

  }

#line 124
  return (1);
}
}
#line 130
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 130 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 128
  goto ldv_42034;
  ldv_42033: 
#line 128
  tmp = tags;
#line 128
  tags = tags + 1;
#line 128
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 128
  dlen = (int )tmp___0;
#line 128
  switch (tag & 8191) {
  case 63: 
#line 128
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 128
  goto ldv_42031;
  default: ;
#line 128
  if ((tag & 8192) != 0) {
#line 128
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 128
    return (0);
  } else {

  }
  }
  ldv_42031: 
#line 128
  tags = tags + (unsigned long )dlen;
  ldv_42034: 
#line 128
  tmp___3 = tags;
#line 128
  tags = tags + 1;
#line 128
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 128
  tag = (int )tmp___4;
#line 128
  if (tag != 0) {
#line 129
    goto ldv_42033;
  } else {

  }

#line 128
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_42079;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_42079;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_42079;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_42079;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42079;
  }
  ldv_42079: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_42086;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_42086;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_42086;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_42086;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42086;
  }
  ldv_42086: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_42093;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_42093;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42093;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42093;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42093;
  }
  ldv_42093: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_42100;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_42100;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_42100;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_42100;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42100;
  }
  ldv_42100: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_42107;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_42107;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42107;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42107;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42107;
  }
  ldv_42107: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_42117;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_42117;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_42117;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_42117;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42117;
  }
  ldv_42117: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_42124;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_42124;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42124;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42124;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42124;
  }
  ldv_42124: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_42134;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_42134;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_42134;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_42134;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42134;
  }
  ldv_42134: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_42141;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_42141;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_42141;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_42141;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42141;
  }
  ldv_42141: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_42148;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_42148;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42148;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42148;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42148;
  }
  ldv_42148: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_42155;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_42155;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_42155;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_42155;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42155;
  }
  ldv_42155: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_42162;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_42162;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_42162;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_42162;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42162;
  }
  ldv_42162: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_42169;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_42169;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42169;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42169;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42169;
  }
  ldv_42169: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_42176;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_42176;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_42176;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_42176;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42176;
  }
  ldv_42176: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_42183;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_42183;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_42183;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_42183;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42183;
  }
  ldv_42183: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_42190;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_42190;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42190;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42190;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42190;
  }
  ldv_42190: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_42197;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_42197;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_42197;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_42197;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42197;
  }
  ldv_42197: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_42204;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_42204;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_42204;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_42204;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42204;
  }
  ldv_42204: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_42211;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_42211;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_42211;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_42211;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42211;
  }
  ldv_42211: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_42218;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_42218;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_42218;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_42218;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42218;
  }
  ldv_42218: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_42225;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_42225;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_42225;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_42225;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42225;
  }
  ldv_42225: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_42232;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_42232;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_42232;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_42232;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42232;
  }
  ldv_42232: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_42239;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_42239;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_42239;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_42239;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42239;
  }
  ldv_42239: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_42246;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_42246;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_42246;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_42246;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42246;
  }
  ldv_42246: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_42253;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_42253;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_42253;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_42253;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42253;
  }
  ldv_42253: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_42260;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_42260;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_42260;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_42260;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42260;
  }
  ldv_42260: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_42267;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_42267;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_42267;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_42267;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42267;
  }
  ldv_42267: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_42274;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_42274;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_42274;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_42274;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42274;
  }
  ldv_42274: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_42281;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_42281;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_42281;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_42281;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42281;
  }
  ldv_42281: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 66
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 66 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_42306;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_42306;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_42306;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_42306;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42306;
  }
  ldv_42306: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_42313;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_42313;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_42313;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_42313;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42313;
  }
  ldv_42313: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_42323;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_42323;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_42323;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_42323;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42323;
  }
  ldv_42323: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_42330;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_42330;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_42330;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_42330;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42330;
  }
  ldv_42330: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_42340;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_42340;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_42340;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_42340;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42340;
  }
  ldv_42340: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_42347;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_42347;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_42347;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_42347;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42347;
  }
  ldv_42347: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_42357;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_42357;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_42357;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_42357;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42357;
  }
  ldv_42357: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_42364;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_42364;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_42364;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_42364;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42364;
  }
  ldv_42364: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_42374;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_42374;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_42374;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_42374;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42374;
  }
  ldv_42374: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_42381;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_42381;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_42381;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_42381;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42381;
  }
  ldv_42381: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_42391;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_42391;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_42391;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_42391;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42391;
  }
  ldv_42391: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_42398;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_42398;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_42398;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_42398;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42398;
  }
  ldv_42398: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_42405;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_42405;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_42405;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_42405;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42405;
  }
  ldv_42405: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_42412;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_42412;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_42412;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_42412;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42412;
  }
  ldv_42412: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_42419;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_42419;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_42419;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_42419;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42419;
  }
  ldv_42419: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_42426;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_42426;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_42426;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_42426;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42426;
  }
  ldv_42426: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_42433;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_42433;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_42433;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_42433;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42433;
  }
  ldv_42433: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_42440;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_42440;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_42440;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_42440;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42440;
  }
  ldv_42440: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_42447;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_42447;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_42447;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_42447;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42447;
  }
  ldv_42447: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_42454;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_42454;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_42454;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_42454;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42454;
  }
  ldv_42454: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_42461;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_42461;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_42461;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_42461;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42461;
  }
  ldv_42461: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_42468;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_42468;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_42468;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_42468;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42468;
  }
  ldv_42468: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_42475;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_42475;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_42475;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_42475;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42475;
  }
  ldv_42475: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_42482;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_42482;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_42482;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_42482;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42482;
  }
  ldv_42482: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_42489;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_42489;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_42489;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_42489;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42489;
  }
  ldv_42489: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_42496;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_42496;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_42496;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_42496;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42496;
  }
  ldv_42496: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_42503;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_42503;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_42503;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_42503;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42503;
  }
  ldv_42503: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_42510;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_42510;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_42510;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_42510;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42510;
  }
  ldv_42510: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_42517;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_42517;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_42517;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_42517;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42517;
  }
  ldv_42517: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_42524;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_42524;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_42524;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_42524;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42524;
  }
  ldv_42524: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_42531;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_42531;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_42531;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_42531;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42531;
  }
  ldv_42531: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_42538;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_42538;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_42538;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_42538;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42538;
  }
  ldv_42538: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_42545;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_42545;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_42545;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_42545;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42545;
  }
  ldv_42545: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_42552;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_42552;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_42552;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_42552;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42552;
  }
  ldv_42552: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_42559;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_42559;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_42559;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_42559;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42559;
  }
  ldv_42559: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_42566;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_42566;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_42566;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_42566;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42566;
  }
  ldv_42566: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_42573;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_42573;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_42573;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_42573;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42573;
  }
  ldv_42573: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_42580;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_42580;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_42580;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_42580;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42580;
  }
  ldv_42580: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_42587;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_42587;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_42587;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_42587;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42587;
  }
  ldv_42587: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_42594;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_42594;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_42594;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_42594;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42594;
  }
  ldv_42594: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_42601;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_42601;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_42601;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_42601;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42601;
  }
  ldv_42601: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_42608;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_42608;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_42608;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_42608;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42608;
  }
  ldv_42608: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_42615;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_42615;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_42615;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_42615;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42615;
  }
  ldv_42615: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_42622;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_42622;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_42622;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_42622;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42622;
  }
  ldv_42622: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_42629;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_42629;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_42629;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_42629;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42629;
  }
  ldv_42629: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_42636;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_42636;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_42636;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_42636;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42636;
  }
  ldv_42636: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_42643;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_42643;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_42643;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_42643;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42643;
  }
  ldv_42643: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_42650;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_42650;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_42650;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_42650;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42650;
  }
  ldv_42650: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_42657;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_42657;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_42657;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_42657;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42657;
  }
  ldv_42657: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_42664;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_42664;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_42664;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_42664;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42664;
  }
  ldv_42664: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_42671;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_42671;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_42671;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_42671;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42671;
  }
  ldv_42671: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_42678;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_42678;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_42678;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_42678;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42678;
  }
  ldv_42678: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_42685;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_42685;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_42685;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_42685;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42685;
  }
  ldv_42685: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_42692;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_42692;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_42692;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_42692;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42692;
  }
  ldv_42692: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_42699;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_42699;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_42699;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_42699;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42699;
  }
  ldv_42699: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_42706;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_42706;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_42706;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_42706;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42706;
  }
  ldv_42706: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_42713;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_42713;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_42713;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_42713;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42713;
  }
  ldv_42713: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_42720;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_42720;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_42720;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_42720;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42720;
  }
  ldv_42720: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_42727;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_42727;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_42727;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_42727;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42727;
  }
  ldv_42727: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_42734;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_42734;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_42734;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_42734;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42734;
  }
  ldv_42734: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_42741;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_42741;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_42741;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_42741;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42741;
  }
  ldv_42741: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_42748;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_42748;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_42748;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_42748;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42748;
  }
  ldv_42748: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_42755;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_42755;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_42755;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_42755;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42755;
  }
  ldv_42755: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_42762;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_42762;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_42762;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_42762;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42762;
  }
  ldv_42762: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_42769;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_42769;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_42769;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_42769;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42769;
  }
  ldv_42769: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_42776;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_42776;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_42776;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_42776;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42776;
  }
  ldv_42776: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_42783;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_42783;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_42783;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_42783;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42783;
  }
  ldv_42783: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 82
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 82 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 74
  tmp = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p = (void *)tmp;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p) = 30U;
#line 74
  goto ldv_42838;
  case 2UL: 
#line 74
  put_unaligned_le16(30, __gu_p);
#line 74
  goto ldv_42838;
  case 4UL: 
#line 74
  put_unaligned_le32(30U, __gu_p);
#line 74
  goto ldv_42838;
  case 8UL: 
#line 74
  put_unaligned_le64(30ULL, __gu_p);
#line 74
  goto ldv_42838;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42838;
  }
  ldv_42838: 
#line 74
  tmp___0 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___0 = (void *)tmp___0;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___0) = 4U;
#line 74
  goto ldv_42845;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___0);
#line 74
  goto ldv_42845;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___0);
#line 74
  goto ldv_42845;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___0);
#line 74
  goto ldv_42845;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42845;
  }
  ldv_42845: 
#line 74
  __gu_p___1 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 74
  goto ldv_42852;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 74
  goto ldv_42852;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 74
  goto ldv_42852;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 74
  goto ldv_42852;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42852;
  }
  ldv_42852: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___1 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___2 = (void *)tmp___1;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___2) = 31U;
#line 74
  goto ldv_42859;
  case 2UL: 
#line 74
  put_unaligned_le16(31, __gu_p___2);
#line 74
  goto ldv_42859;
  case 4UL: 
#line 74
  put_unaligned_le32(31U, __gu_p___2);
#line 74
  goto ldv_42859;
  case 8UL: 
#line 74
  put_unaligned_le64(31ULL, __gu_p___2);
#line 74
  goto ldv_42859;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42859;
  }
  ldv_42859: 
#line 74
  tmp___2 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___3 = (void *)tmp___2;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___3) = 4U;
#line 74
  goto ldv_42866;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___3);
#line 74
  goto ldv_42866;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___3);
#line 74
  goto ldv_42866;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___3);
#line 74
  goto ldv_42866;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42866;
  }
  ldv_42866: 
#line 74
  __gu_p___4 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 74
  goto ldv_42873;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 74
  goto ldv_42873;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 74
  goto ldv_42873;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 74
  goto ldv_42873;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42873;
  }
  ldv_42873: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___3 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___5 = (void *)tmp___3;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___5) = 32U;
#line 74
  goto ldv_42880;
  case 2UL: 
#line 74
  put_unaligned_le16(32, __gu_p___5);
#line 74
  goto ldv_42880;
  case 4UL: 
#line 74
  put_unaligned_le32(32U, __gu_p___5);
#line 74
  goto ldv_42880;
  case 8UL: 
#line 74
  put_unaligned_le64(32ULL, __gu_p___5);
#line 74
  goto ldv_42880;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42880;
  }
  ldv_42880: 
#line 74
  tmp___4 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___6 = (void *)tmp___4;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___6) = 4U;
#line 74
  goto ldv_42887;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___6);
#line 74
  goto ldv_42887;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___6);
#line 74
  goto ldv_42887;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___6);
#line 74
  goto ldv_42887;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42887;
  }
  ldv_42887: 
#line 74
  __gu_p___7 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 74
  goto ldv_42894;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 74
  goto ldv_42894;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 74
  goto ldv_42894;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 74
  goto ldv_42894;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42894;
  }
  ldv_42894: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___5 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___8 = (void *)tmp___5;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___8) = 52U;
#line 74
  goto ldv_42901;
  case 2UL: 
#line 74
  put_unaligned_le16(49204, __gu_p___8);
#line 74
  goto ldv_42901;
  case 4UL: 
#line 74
  put_unaligned_le32(49204U, __gu_p___8);
#line 74
  goto ldv_42901;
  case 8UL: 
#line 74
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 74
  goto ldv_42901;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42901;
  }
  ldv_42901: 
#line 74
  tmp___6 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___9 = (void *)tmp___6;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 74
  goto ldv_42908;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 74
  goto ldv_42908;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 74
  goto ldv_42908;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 74
  goto ldv_42908;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42908;
  }
  ldv_42908: 
#line 74
  __len = (size_t )arg->verify_alg_len;
#line 74
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 74
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 74
  tmp___7 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___10 = (void *)tmp___7;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___10) = 51U;
#line 74
  goto ldv_42918;
  case 2UL: 
#line 74
  put_unaligned_le16(49203, __gu_p___10);
#line 74
  goto ldv_42918;
  case 4UL: 
#line 74
  put_unaligned_le32(49203U, __gu_p___10);
#line 74
  goto ldv_42918;
  case 8UL: 
#line 74
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 74
  goto ldv_42918;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42918;
  }
  ldv_42918: 
#line 74
  tmp___8 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___11 = (void *)tmp___8;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 74
  goto ldv_42925;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 74
  goto ldv_42925;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 74
  goto ldv_42925;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 74
  goto ldv_42925;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42925;
  }
  ldv_42925: 
#line 74
  __len___0 = (size_t )arg->cpu_mask_len;
#line 74
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 74
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 74
  tmp___9 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___12 = (void *)tmp___9;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___12) = 64U;
#line 74
  goto ldv_42935;
  case 2UL: 
#line 74
  put_unaligned_le16(49216, __gu_p___12);
#line 74
  goto ldv_42935;
  case 4UL: 
#line 74
  put_unaligned_le32(49216U, __gu_p___12);
#line 74
  goto ldv_42935;
  case 8UL: 
#line 74
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 74
  goto ldv_42935;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42935;
  }
  ldv_42935: 
#line 74
  tmp___10 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___13 = (void *)tmp___10;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 74
  goto ldv_42942;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 74
  goto ldv_42942;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 74
  goto ldv_42942;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 74
  goto ldv_42942;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42942;
  }
  ldv_42942: 
#line 74
  __len___1 = (size_t )arg->csums_alg_len;
#line 74
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 74
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 74
  tmp___11 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___14 = (void *)tmp___11;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___14) = 65U;
#line 74
  goto ldv_42952;
  case 2UL: 
#line 74
  put_unaligned_le16(32833, __gu_p___14);
#line 74
  goto ldv_42952;
  case 4UL: 
#line 74
  put_unaligned_le32(32833U, __gu_p___14);
#line 74
  goto ldv_42952;
  case 8UL: 
#line 74
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 74
  goto ldv_42952;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42952;
  }
  ldv_42952: 
#line 74
  tmp___12 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___15 = (void *)tmp___12;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___15) = 1U;
#line 74
  goto ldv_42959;
  case 2UL: 
#line 74
  put_unaligned_le16(1, __gu_p___15);
#line 74
  goto ldv_42959;
  case 4UL: 
#line 74
  put_unaligned_le32(1U, __gu_p___15);
#line 74
  goto ldv_42959;
  case 8UL: 
#line 74
  put_unaligned_le64(1ULL, __gu_p___15);
#line 74
  goto ldv_42959;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42959;
  }
  ldv_42959: 
#line 74
  *((char *)tags) = (char )arg->use_rle;
#line 74
  tags = tags + 1U;
#line 74
  return (tags);
}
}
#line 94
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 94 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 92
  tmp = tags;
#line 92
  tags = tags + 1;
#line 92
  __gu_p = (void *)tmp;
#line 92
  switch (2UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p) = 33U;
#line 92
  goto ldv_43047;
  case 2UL: 
#line 92
  put_unaligned_le16(33, __gu_p);
#line 92
  goto ldv_43047;
  case 4UL: 
#line 92
  put_unaligned_le32(33U, __gu_p);
#line 92
  goto ldv_43047;
  case 8UL: 
#line 92
  put_unaligned_le64(33ULL, __gu_p);
#line 92
  goto ldv_43047;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_43047;
  }
  ldv_43047: 
#line 92
  tmp___0 = tags;
#line 92
  tags = tags + 1;
#line 92
  __gu_p___0 = (void *)tmp___0;
#line 92
  switch (2UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p___0) = 4U;
#line 92
  goto ldv_43054;
  case 2UL: 
#line 92
  put_unaligned_le16(4, __gu_p___0);
#line 92
  goto ldv_43054;
  case 4UL: 
#line 92
  put_unaligned_le32(4U, __gu_p___0);
#line 92
  goto ldv_43054;
  case 8UL: 
#line 92
  put_unaligned_le64(4ULL, __gu_p___0);
#line 92
  goto ldv_43054;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_43054;
  }
  ldv_43054: 
#line 92
  __gu_p___1 = (void *)tags;
#line 92
  switch (4UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 92
  goto ldv_43061;
  case 2UL: 
#line 92
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 92
  goto ldv_43061;
  case 4UL: 
#line 92
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 92
  goto ldv_43061;
  case 8UL: 
#line 92
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 92
  goto ldv_43061;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_43061;
  }
  ldv_43061: 
#line 92
  tags = tags + 4U;
#line 92
  return (tags);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 163
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 167
  envp[0] = (char *)"HOME=/";
#line 167
  envp[1] = (char *)"TERM=linux";
#line 167
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 167
  envp[3] = 0;
#line 167
  envp[4] = 0;
#line 167
  envp[5] = 0;
#line 175
  argv[0] = (char *)(& usermode_helper);
#line 175
  argv[1] = cmd;
#line 175
  argv[2] = (char *)(& mb);
#line 175
  argv[3] = 0;
#line 178
  tmp = mdev_to_minor(mdev);
#line 178
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 180
  tmp___0 = get_net_conf(mdev);
#line 180
  if (tmp___0 != 0) {
#line 181
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 183
    afs = (char *)"ipv6";
#line 184
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 186
    goto ldv_43382;
    case 2: 
#line 188
    afs = (char *)"ipv4";
#line 189
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 191
    goto ldv_43382;
    default: 
#line 193
    afs = (char *)"ssocks";
#line 194
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_43382: 
#line 197
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 198
    envp[3] = (char *)(& af);
#line 199
    envp[4] = (char *)(& ad);
#line 200
    put_net_conf(mdev);
  } else {

  }
#line 203
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 203
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 203
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 205
  drbd_bcast_ev_helper(mdev, cmd);
#line 206
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 207
  if (ret != 0) {
#line 208
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 208
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 208
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 212
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 216
  if (ret < 0) {
#line 217
    ret = 0;
  } else {

  }
#line 219
  return (ret);
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 229
  if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 229
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 229
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 229
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           229);
  } else {

  }
#line 231
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 231
  if (tmp___3 != 0) {
#line 232
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 233
    put_ldev(mdev);
  } else {
#line 235
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 236
    return ((enum drbd_disk_state )mdev->state.ldv_32691.pdsk);
  }
#line 239
  if ((unsigned int )fp == 2U) {
#line 240
    val.i = 0U;
#line 240
    val.ldv_32691.susp = 1U;
#line 240
    mask.i = 0U;
#line 240
    mask.ldv_32691.susp = 1U;
#line 240
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 242
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 244
  switch ((r >> 8) & 255) {
  case 3: 
#line 246
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 247
  nps = D_INCONSISTENT;
#line 248
  goto ldv_43397;
  case 4: 
#line 250
  ex_to_string = (char *)"peer was fenced";
#line 251
  nps = D_OUTDATED;
#line 252
  goto ldv_43397;
  case 5: ;
#line 254
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 256
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 257
    nps = D_OUTDATED;
  } else {
#line 259
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 260
    nps = (enum drbd_disk_state )mdev->state.ldv_32691.pdsk;
  }
#line 262
  goto ldv_43397;
  case 6: 
#line 266
  ex_to_string = (char *)"peer is active";
#line 267
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 267
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 267
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 268
  nps = D_UNKNOWN;
#line 269
  val___0.i = 0U;
#line 269
  val___0.ldv_32691.disk = 5U;
#line 269
  mask___0.i = 0U;
#line 269
  mask___0.ldv_32691.disk = 15U;
#line 269
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 270
  goto ldv_43397;
  case 7: ;
#line 272
  if ((unsigned int )fp != 2U) {
#line 273
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 273
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 273
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 274
  ex_to_string = (char *)"peer was stonithed";
#line 275
  nps = D_OUTDATED;
#line 276
  goto ldv_43397;
  default: 
#line 279
  nps = D_UNKNOWN;
#line 280
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 280
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 280
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 281
  return (nps);
  }
  ldv_43397: 
#line 284
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 284
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 284
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 286
  return (nps);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 292
  max_tries = 4;
#line 293
  r = 0;
#line 294
  try = 0;
#line 295
  forced = 0;
#line 299
  if ((unsigned int )new_role == 1U) {
#line 300
    request_ping(mdev);
  } else {

  }
#line 302
  ldv_mutex_lock_124(& mdev->state_mutex);
#line 304
  mask.i = 0U;
#line 304
  mask.ldv_32691.role = 3U;
#line 305
  val.i = 0U;
#line 305
  val.ldv_32691.role = (unsigned char )new_role;
#line 307
  goto ldv_43419;
  ldv_43422: 
#line 308
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 312
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 313
    val.ldv_32691.pdsk = 0U;
#line 314
    mask.ldv_32691.pdsk = 0U;
#line 315
    goto ldv_43419;
  } else {

  }
#line 318
  if ((r == -2 && force != 0) && ((unsigned int )*((unsigned char *)mdev + 1805UL) == 8U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 10U)) {
#line 321
    mask.ldv_32691.disk = 15U;
#line 322
    val.ldv_32691.disk = 8U;
#line 323
    forced = 1;
#line 324
    goto ldv_43419;
  } else {

  }
#line 327
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1805UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 329
    if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 329
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
             329);
    } else {

    }
#line 330
    nps = drbd_try_outdate_peer(mdev);
#line 332
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 333
      val.ldv_32691.disk = 8U;
#line 334
      mask.ldv_32691.disk = 15U;
    } else {

    }
#line 337
    val.ldv_32691.pdsk = (unsigned char )nps;
#line 338
    mask.ldv_32691.pdsk = 15U;
#line 340
    goto ldv_43419;
  } else {

  }
#line 343
  if (r == 2) {
#line 344
    goto fail;
  } else {

  }
#line 345
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 346
    nps = drbd_try_outdate_peer(mdev);
#line 348
    if (force != 0 && (unsigned int )nps > 5U) {
#line 349
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 349
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 349
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 350
      nps = D_OUTDATED;
    } else {

    }
#line 353
    mask.ldv_32691.pdsk = 15U;
#line 354
    val.ldv_32691.pdsk = (unsigned char )nps;
#line 356
    goto ldv_43419;
  } else {

  }
#line 358
  if (r == -1) {
#line 361
    tmp___3 = get_current();
#line 361
    tmp___3->state = 1L;
#line 362
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 363
    if (try < max_tries) {
#line 364
      try = max_tries + -1;
    } else {

    }
#line 365
    goto ldv_43419;
  } else {

  }
#line 367
  if (r <= 0) {
#line 368
    r = _drbd_request_state(mdev, mask, val, 6);
#line 370
    if (r <= 0) {
#line 371
      goto fail;
    } else {

    }
  } else {

  }
#line 373
  goto ldv_43421;
  ldv_43419: 
#line 307
  tmp___4 = try;
#line 307
  try = try + 1;
#line 307
  if (tmp___4 < max_tries) {
#line 308
    goto ldv_43422;
  } else {

  }
  ldv_43421: ;
#line 376
  if (r <= 0) {
#line 377
    goto fail;
  } else {

  }
#line 379
  if (forced != 0) {
#line 380
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 383
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 383
  if (tmp___7 == 0) {
#line 383
    goto ldv_43423;
  } else {

  }
#line 383
  tmp___8 = get_current();
#line 383
  __wait.flags = 0U;
#line 383
  __wait.private = (void *)tmp___8;
#line 383
  __wait.func = & autoremove_wake_function;
#line 383
  __wait.task_list.next = & __wait.task_list;
#line 383
  __wait.task_list.prev = & __wait.task_list;
  ldv_43426: 
#line 383
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 383
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 383
  if (tmp___9 == 0) {
#line 383
    goto ldv_43425;
  } else {

  }
#line 383
  schedule();
#line 383
  goto ldv_43426;
  ldv_43425: 
#line 383
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43423: ;
#line 385
  if ((unsigned int )new_role == 2U) {
#line 386
    set_disk_ro(mdev->vdisk, 1);
#line 387
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 387
    if (tmp___10 != 0) {
#line 388
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 389
      put_ldev(mdev);
    } else {

    }
  } else {
#line 392
    tmp___11 = get_net_conf(mdev);
#line 392
    if (tmp___11 != 0) {
#line 393
      (mdev->net_conf)->want_lose = 0U;
#line 394
      put_net_conf(mdev);
    } else {

    }
#line 396
    set_disk_ro(mdev->vdisk, 0);
#line 397
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 397
    if (tmp___12 != 0) {
#line 398
      if ((((int )mdev->state.ldv_32691.conn <= 9 || (int )mdev->state.ldv_32691.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 401
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 403
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 404
      put_ldev(mdev);
    } else {

    }
  }
#line 408
  if ((unsigned int )new_role == 2U) {
#line 408
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 408
    if (tmp___13 != 0) {
#line 409
      drbd_al_to_on_disk_bm(mdev);
#line 410
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 413
  if ((int )mdev->state.ldv_32691.conn > 8) {
#line 415
    if (forced != 0) {
#line 416
      drbd_send_uuids(mdev);
    } else {

    }
#line 417
    drbd_send_state(mdev);
  } else {

  }
#line 420
  drbd_md_sync(mdev);
#line 422
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 424
  ldv_mutex_unlock_125(& mdev->state_mutex);
#line 425
  return (r);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 434
  memset((void *)(& primary_args), 0, 4UL);
#line 435
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 435
  if (tmp == 0) {
#line 436
    reply->ret_code = 126;
#line 437
    return (0);
  } else {

  }
#line 440
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.overwrite_peer);
#line 443
  return (0);
}
}
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 449
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 451
  return (0);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 459
  md_size_sect = 0UL;
#line 460
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 463
  bdev->md.md_size_sect = 262144U;
#line 464
  tmp = drbd_md_ss__(mdev, bdev);
#line 464
  bdev->md.md_offset = (u64 )tmp;
#line 465
  bdev->md.al_offset = 8;
#line 466
  bdev->md.bm_offset = 72;
#line 467
  goto ldv_43444;
  case -2: 
#line 470
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 470
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 471
  bdev->md.md_offset = 0ULL;
#line 472
  bdev->md.al_offset = 8;
#line 473
  bdev->md.bm_offset = 72;
#line 474
  goto ldv_43444;
  case -1: ;
  case -3: 
#line 477
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 477
  bdev->md.md_offset = (u64 )tmp___1;
#line 479
  bdev->md.al_offset = -64;
#line 481
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 482
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 483
  md_size_sect = md_size_sect >> 15;
#line 484
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 488
  md_size_sect = md_size_sect + 72UL;
#line 490
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 492
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 493
  goto ldv_43444;
  }
  ldv_43444: ;
#line 496
  return;
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 500
  units[0] = 75;
#line 500
  units[1] = 77;
#line 500
  units[2] = 71;
#line 500
  units[3] = 84;
#line 500
  units[4] = 80;
#line 500
  units[5] = 69;
#line 501
  base = 0;
#line 502
  goto ldv_43455;
  ldv_43454: 
#line 504
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 505
  base = base + 1;
  ldv_43455: ;
#line 502
  if (size > 9999ULL) {
#line 503
    goto ldv_43454;
  } else {

  }
#line 507
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 509
  return (buf);
}
}
#line 525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 527
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 528
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 528
  if (tmp == 0) {
#line 528
    goto ldv_43460;
  } else {

  }
#line 528
  tmp___0 = get_current();
#line 528
  __wait.flags = 0U;
#line 528
  __wait.private = (void *)tmp___0;
#line 528
  __wait.func = & autoremove_wake_function;
#line 528
  __wait.task_list.next = & __wait.task_list;
#line 528
  __wait.task_list.prev = & __wait.task_list;
  ldv_43463: 
#line 528
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 528
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 528
  if (tmp___1 == 0) {
#line 528
    goto ldv_43462;
  } else {

  }
#line 528
  schedule();
#line 528
  goto ldv_43463;
  ldv_43462: 
#line 528
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43460: ;
#line 531
  return;
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 533
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 534
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 535
  return;
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 552
  rv = 0;
#line 563
  drbd_suspend_io(mdev);
#line 566
  tmp = lc_try_lock(mdev->act_log);
#line 566
  if (tmp != 0) {
#line 566
    goto ldv_43478;
  } else {

  }
#line 566
  tmp___0 = get_current();
#line 566
  __wait.flags = 0U;
#line 566
  __wait.private = (void *)tmp___0;
#line 566
  __wait.func = & autoremove_wake_function;
#line 566
  __wait.task_list.next = & __wait.task_list;
#line 566
  __wait.task_list.prev = & __wait.task_list;
  ldv_43481: 
#line 566
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 566
  tmp___1 = lc_try_lock(mdev->act_log);
#line 566
  if (tmp___1 != 0) {
#line 566
    goto ldv_43480;
  } else {

  }
#line 566
  schedule();
#line 566
  goto ldv_43481;
  ldv_43480: 
#line 566
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43478: 
#line 568
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 569
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 570
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 573
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 575
  size = drbd_new_dev_size(mdev, mdev->ldev);
#line 577
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 577
  if (tmp___11 != size) {
#line 577
    goto _L;
  } else {
#line 577
    tmp___12 = drbd_bm_capacity(mdev);
#line 577
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 580
      err = drbd_bm_resize(mdev, size);
#line 581
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 581
      if (tmp___7 != 0L) {
#line 583
        tmp___2 = drbd_bm_capacity(mdev);
#line 583
        size = tmp___2 >> 1;
#line 584
        if (size == 0UL) {
#line 585
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 588
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 588
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 588
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 592
        rv = dev_size_error;
      } else {

      }
#line 595
      drbd_set_my_capacity(mdev, size);
#line 596
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 597
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 597
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 597
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 597
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 600
  if ((int )rv == -1) {
#line 601
    goto out;
  } else {

  }
#line 603
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 605
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 605
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 608
  if (la_size_changed != 0 || md_moved != 0) {
#line 609
    drbd_al_shrink(mdev);
#line 610
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 613
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 613
    rv = (enum determine_dev_size )tmp___16;
#line 614
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 617
  if (size > la_size) {
#line 618
    rv = grew;
  } else {

  }
#line 619
  if (size < la_size) {
#line 620
    rv = shrunk;
  } else {

  }
  out: 
#line 622
  lc_unlock(mdev->act_log);
#line 623
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 624
  drbd_resume_io(mdev);
#line 626
  return (rv);
}
}
#line 630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 632
  p_size = mdev->p_size;
#line 633
  la_size = (sector_t )bdev->md.la_size_sect;
#line 635
  u_size = (sector_t )bdev->dc.disk_size;
#line 636
  size = 0UL;
#line 638
  m_size = drbd_get_max_capacity___1(bdev);
#line 640
  if (p_size != 0UL && m_size != 0UL) {
#line 641
    __min1 = p_size;
#line 641
    __min2 = m_size;
#line 641
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 643
  if (la_size != 0UL) {
#line 644
    size = la_size;
#line 645
    if (m_size != 0UL && m_size < size) {
#line 646
      size = m_size;
    } else {

    }
#line 647
    if (p_size != 0UL && p_size < size) {
#line 648
      size = p_size;
    } else {

    }
  } else {
#line 650
    if (m_size != 0UL) {
#line 651
      size = m_size;
    } else {

    }
#line 652
    if (p_size != 0UL) {
#line 653
      size = p_size;
    } else {

    }
  }
#line 657
  if (size == 0UL) {
#line 658
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
    printk("<3>%s %s: Both nodes diskless!\n", tmp___0, tmp);
  } else {

  }
#line 660
  if (u_size != 0UL) {
#line 661
    if (u_size > size) {
#line 662
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___2, tmp___1,
             u_size >> 1, size >> 1);
    } else {
#line 665
      size = u_size;
    }
  } else {

  }
#line 668
  return (size);
}
}
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 686
  _b = mdev->sync_conf.al_extents <= 6;
#line 686
  if (_b != 0) {
#line 686
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 686
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 686
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           686);
  } else {

  }
#line 686
  if (_b != 0) {
#line 687
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 689
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 691
    return (0);
  } else {

  }
#line 693
  in_use = 0U;
#line 694
  t = mdev->act_log;
#line 695
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 698
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 699
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 700
    return (-12);
  } else {

  }
#line 702
  spin_lock_irq(& mdev->al_lock);
#line 703
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 704
    i = 0;
#line 704
    goto ldv_43508;
    ldv_43507: 
#line 705
    e = lc_element_by_index(t, (unsigned int )i);
#line 706
    if (e->refcnt != 0U) {
#line 707
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 709
    in_use = e->refcnt + in_use;
#line 704
    i = i + 1;
    ldv_43508: ;
#line 704
    if ((unsigned int )i < t->nr_elements) {
#line 705
      goto ldv_43507;
    } else {

    }

  } else {

  }
#line 712
  if (in_use == 0U) {
#line 713
    mdev->act_log = n;
  } else {

  }
#line 714
  spin_unlock_irq(& mdev->al_lock);
#line 715
  if (in_use != 0U) {
#line 716
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 716
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 716
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 717
    lc_destroy(n);
#line 718
    return (-16);
  } else
#line 720
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 721
    lc_destroy(t);
  } else {

  }
#line 723
  drbd_md_mark_dirty(mdev);
#line 724
  return (0);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 729
  q = mdev->rq_queue;
#line 730
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 731
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 733
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) == 0U) {
#line 734
    max_seg_s = 4096U;
  } else {

  }
#line 736
  tmp = queue_max_sectors(b);
#line 736
  tmp___0 = queue_logical_block_size(b);
#line 736
  _min1 = tmp * (unsigned int )tmp___0;
#line 736
  _min2 = max_seg_s;
#line 736
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 738
  blk_queue_max_sectors(q, max_seg_s >> 9);
#line 739
  blk_queue_max_phys_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 740
  blk_queue_max_hw_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 741
  blk_queue_max_segment_size(q, max_seg_s);
#line 742
  blk_queue_logical_block_size(q, 512);
#line 743
  blk_queue_segment_boundary(q, 4095UL);
#line 744
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 746
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 747
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 749
  tmp___3 = queue_max_segment_size(q);
#line 749
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 749
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 749
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 751
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 752
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 752
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 752
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 755
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 757
  return;
}
}
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 767
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 767
  if (tmp == 0) {
#line 767
    goto ldv_43523;
  } else {

  }
#line 767
  tmp___0 = get_current();
#line 767
  __wait.flags = 0U;
#line 767
  __wait.private = (void *)tmp___0;
#line 767
  __wait.func = & autoremove_wake_function;
#line 767
  __wait.task_list.next = & __wait.task_list;
#line 767
  __wait.task_list.prev = & __wait.task_list;
  ldv_43526: 
#line 767
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 767
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 767
  if (tmp___1 == 0) {
#line 767
    goto ldv_43525;
  } else {

  }
#line 767
  schedule();
#line 767
  goto ldv_43526;
  ldv_43525: 
#line 767
  finish_wait(& mdev->state_wait, & __wait);
  ldv_43523: 
#line 768
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 768
  if (tmp___2 == 0) {
#line 768
    goto ldv_43527;
  } else {

  }
#line 768
  tmp___3 = get_current();
#line 768
  __wait___0.flags = 0U;
#line 768
  __wait___0.private = (void *)tmp___3;
#line 768
  __wait___0.func = & autoremove_wake_function;
#line 768
  __wait___0.task_list.next = & __wait___0.task_list;
#line 768
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_43530: 
#line 768
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 768
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 768
  if (tmp___4 == 0) {
#line 768
    goto ldv_43529;
  } else {

  }
#line 768
  schedule();
#line 768
  goto ldv_43530;
  ldv_43529: 
#line 768
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_43527: 
#line 769
  drbd_thread_start(& mdev->worker);
#line 770
  return;
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 777
  spin_lock_irq(& mdev->req_lock);
#line 778
  if (((unsigned int )*((unsigned char *)mdev + 1805UL) == 0U && (unsigned int )*((unsigned short *)mdev + 902UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 781
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 782
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 784
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 785
  spin_unlock_irq(& mdev->req_lock);
#line 786
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 787
  return;
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  sector_t tmp___37 ;
  int tmp___38 ;
  unsigned short tmp___39 ;
  struct page *page ;
  struct page *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 798
  nbc = 0;
#line 800
  resync_lru = 0;
#line 803
  cp_discovered = 0;
#line 806
  drbd_reconfig_start(mdev);
#line 809
  if ((int )mdev->state.ldv_32691.disk > 0) {
#line 810
    retcode = ERR_DISK_CONFIGURED;
#line 811
    goto fail;
  } else {

  }
#line 815
  tmp = kzalloc___2(408UL, 208U);
#line 815
  nbc = (struct drbd_backing_dev *)tmp;
#line 816
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 817
    retcode = ERR_NOMEM;
#line 818
    goto fail;
  } else {

  }
#line 821
  nbc->dc.disk_size = 0ULL;
#line 822
  nbc->dc.on_io_error = 0;
#line 823
  nbc->dc.fencing = 0;
#line 824
  nbc->dc.max_bio_bvecs = 0;
#line 826
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 826
  if (tmp___0 == 0) {
#line 827
    retcode = ERR_MANDATORY_TAG;
#line 828
    goto fail;
  } else {

  }
#line 831
  if (nbc->dc.meta_dev_idx < -3) {
#line 832
    retcode = ERR_MD_IDX_INVALID;
#line 833
    goto fail;
  } else {

  }
#line 836
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 837
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 837
  if (tmp___4 != 0L) {
#line 838
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 838
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 840
    nbc->lo_file = 0;
#line 841
    retcode = ERR_OPEN_DISK;
#line 842
    goto fail;
  } else {

  }
#line 845
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 847
  if (((int )inode->i_mode & 61440) != 24576) {
#line 848
    retcode = ERR_DISK_NOT_BDEV;
#line 849
    goto fail;
  } else {

  }
#line 852
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 853
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 853
  if (tmp___8 != 0L) {
#line 854
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 854
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 856
    nbc->md_file = 0;
#line 857
    retcode = ERR_OPEN_MD_DISK;
#line 858
    goto fail;
  } else {

  }
#line 861
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 863
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 864
    retcode = ERR_MD_NOT_BDEV;
#line 865
    goto fail;
  } else {

  }
#line 868
  nbc->backing_bdev = inode->ldv_21258.i_bdev;
#line 869
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 869
  if (tmp___9 != 0) {
#line 870
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 875
    retcode = ERR_BDCLAIM_DISK;
#line 876
    goto fail;
  } else {

  }
#line 879
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 882
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 883
    retcode = ERR_NOMEM;
#line 884
    goto release_bdev_fail;
  } else {

  }
#line 894
  nbc->md_bdev = inode2->ldv_21258.i_bdev;
#line 895
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 895
  if (tmp___10 != 0) {
#line 897
    retcode = ERR_BDCLAIM_MD_DISK;
#line 898
    goto release_bdev_fail;
  } else {

  }
#line 901
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 904
    retcode = ERR_MD_IDX_INVALID;
#line 905
    goto release_bdev2_fail;
  } else {

  }
#line 909
  drbd_md_set_sector_offsets(mdev, nbc);
#line 911
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 911
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 912
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 912
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 912
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 912
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 915
    retcode = ERR_DISK_TO_SMALL;
#line 916
    goto release_bdev2_fail;
  } else {

  }
#line 919
  if (nbc->dc.meta_dev_idx < 0) {
#line 920
    max_possible_sectors = 34359738368UL;
#line 922
    min_md_device_sectors = 2048UL;
  } else {
#line 924
    max_possible_sectors = 8587575296UL;
#line 925
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 928
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 928
  if (tmp___17 < min_md_device_sectors) {
#line 929
    retcode = ERR_MD_DISK_TO_SMALL;
#line 930
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 930
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 930
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 933
    goto release_bdev2_fail;
  } else {

  }
#line 938
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 938
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 938
  if (tmp___18 < tmp___19) {
#line 940
    retcode = ERR_DISK_TO_SMALL;
#line 941
    goto release_bdev2_fail;
  } else {

  }
#line 944
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 946
  if (nbc->known_size > max_possible_sectors) {
#line 947
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 950
    if (nbc->dc.meta_dev_idx >= 0) {
#line 951
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 951
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 951
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 955
  drbd_suspend_io(mdev);
#line 957
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 957
  if (tmp___24 == 0) {
#line 957
    goto ldv_43555;
  } else {

  }
#line 957
  tmp___25 = get_current();
#line 957
  __wait.flags = 0U;
#line 957
  __wait.private = (void *)tmp___25;
#line 957
  __wait.func = & autoremove_wake_function;
#line 957
  __wait.task_list.next = & __wait.task_list;
#line 957
  __wait.task_list.prev = & __wait.task_list;
  ldv_43558: 
#line 957
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 957
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 957
  if (tmp___26 == 0) {
#line 957
    goto ldv_43557;
  } else {

  }
#line 957
  schedule();
#line 957
  goto ldv_43558;
  ldv_43557: 
#line 957
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43555: 
#line 959
  drbd_flush_workqueue(mdev);
#line 961
  val.i = 0U;
#line 961
  val.ldv_32691.disk = 1U;
#line 961
  mask.i = 0U;
#line 961
  mask.ldv_32691.disk = 15U;
#line 961
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 961
  retcode = (enum drbd_ret_codes )tmp___27;
#line 962
  drbd_resume_io(mdev);
#line 963
  if ((unsigned int )retcode == 0U) {
#line 964
    goto release_bdev2_fail;
  } else {

  }
#line 966
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 966
  if (tmp___28 == 0) {
#line 967
    goto force_diskless;
  } else {

  }
#line 969
  drbd_md_set_sector_offsets(mdev, nbc);
#line 971
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 972
    tmp___29 = drbd_bm_init(mdev);
#line 972
    if (tmp___29 != 0) {
#line 973
      retcode = ERR_NOMEM;
#line 974
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 978
  tmp___30 = drbd_md_read(mdev, nbc);
#line 978
  retcode = (enum drbd_ret_codes )tmp___30;
#line 979
  if ((unsigned int )retcode != 101U) {
#line 980
    goto force_diskless_dec;
  } else {

  }
#line 982
  if (((int )mdev->state.ldv_32691.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 985
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___32,
           tmp___31, mdev->ed_uuid);
#line 987
    retcode = ERR_DATA_NOT_CURRENT;
#line 988
    goto force_diskless_dec;
  } else {

  }
#line 992
  tmp___33 = drbd_check_al_size(mdev);
#line 992
  if (tmp___33 != 0) {
#line 993
    retcode = ERR_NOMEM;
#line 994
    goto force_diskless_dec;
  } else {

  }
#line 998
  tmp___36 = drbd_md_test_flag(nbc, 1);
#line 998
  if (tmp___36 != 0) {
#line 998
    tmp___37 = drbd_new_dev_size(mdev, nbc);
#line 998
    if ((unsigned long long )tmp___37 < nbc->md.la_size_sect) {
#line 1000
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1000
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1000
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___35, tmp___34);
#line 1001
      retcode = ERR_DISK_TO_SMALL;
#line 1002
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1005
  tmp___38 = drbd_al_read_log(mdev, nbc);
#line 1005
  if (tmp___38 == 0) {
#line 1006
    retcode = ERR_IO_MD_DISK;
#line 1007
    goto force_diskless_dec;
  } else {

  }
#line 1011
  tmp___39 = bdev_logical_block_size(nbc->md_bdev);
#line 1011
  logical_block_size = (int )tmp___39;
#line 1012
  if (logical_block_size == 0) {
#line 1013
    logical_block_size = 512;
  } else {

  }
#line 1015
  if (logical_block_size != 512) {
#line 1016
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1017
      tmp___40 = alloc_pages(16U, 0U);
#line 1017
      page = tmp___40;
#line 1018
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1019
        goto force_diskless_dec;
      } else {

      }
#line 1021
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___42,
             tmp___41, logical_block_size, 512);
#line 1023
      tmp___43 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
      tmp___44 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___44,
             tmp___43);
#line 1025
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1031
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1032
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1034
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1040
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1040
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1040
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1040
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1040);
  } else {

  }
#line 1041
  mdev->ldev = nbc;
#line 1042
  mdev->resync = resync_lru;
#line 1043
  nbc = 0;
#line 1044
  resync_lru = 0;
#line 1046
  mdev->write_ordering = WO_bio_barrier;
#line 1047
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1049
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1049
  if (tmp___47 != 0) {
#line 1050
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1052
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1054
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1054
  if (tmp___48 != 0) {
#line 1055
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1056
    cp_discovered = 1;
  } else {

  }
#line 1059
  mdev->send_cnt = 0U;
#line 1060
  mdev->recv_cnt = 0U;
#line 1061
  mdev->read_cnt = 0U;
#line 1062
  mdev->writ_cnt = 0U;
#line 1064
  drbd_setup_queue_param(mdev, 32768U);
#line 1080
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1081
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 1081
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1081
    if (tmp___49 != 0) {
#line 1081
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1081
      if (tmp___50 == 0) {
#line 1084
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1086
  dd = drbd_determin_dev_size(mdev);
#line 1087
  if ((int )dd == -1) {
#line 1088
    retcode = ERR_NOMEM_BITMAP;
#line 1089
    goto force_diskless_dec;
  } else
#line 1090
  if ((int )dd == 2) {
#line 1091
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1093
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1093
  if (tmp___55 != 0) {
#line 1094
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1094
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1094
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1096
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1096
    if (tmp___53 != 0) {
#line 1097
      retcode = ERR_IO_MD_DISK;
#line 1098
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1101
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1101
    if (tmp___54 < 0) {
#line 1102
      retcode = ERR_IO_MD_DISK;
#line 1103
      goto force_diskless_dec;
    } else {

    }
  }
#line 1107
  if (cp_discovered != 0) {
#line 1108
    drbd_al_apply_to_bm(mdev);
#line 1109
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1112
  spin_lock_irq(& mdev->req_lock);
#line 1113
  os = mdev->state;
#line 1114
  ns.i = os.i;
#line 1120
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1120
  if (tmp___57 != 0) {
#line 1121
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1121
    if (tmp___56 != 0) {
#line 1122
      ns.ldv_32691.disk = 7U;
    } else {
#line 1124
      ns.ldv_32691.disk = 5U;
    }
  } else {
#line 1126
    ns.ldv_32691.disk = 4U;
  }
#line 1129
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1129
  if (tmp___58 != 0) {
#line 1130
    ns.ldv_32691.pdsk = 5U;
  } else {

  }
#line 1132
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1134
    ns.ldv_32691.disk = 8U;
  } else {

  }
#line 1143
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U) {
#line 1144
    mdev->new_state_tmp.i = ns.i;
#line 1145
    ns.i = os.i;
#line 1146
    ns.ldv_32691.disk = 3U;
  } else {

  }
#line 1149
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1150
  ns = mdev->state;
#line 1151
  spin_unlock_irq(& mdev->req_lock);
#line 1153
  if (rv <= 0) {
#line 1154
    goto force_diskless_dec;
  } else {

  }
#line 1156
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 1157
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1159
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1161
  drbd_md_mark_dirty(mdev);
#line 1162
  drbd_md_sync(mdev);
#line 1164
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1165
  put_ldev(mdev);
#line 1166
  reply->ret_code = (int )retcode;
#line 1167
  drbd_reconfig_done(mdev);
#line 1168
  return (0);
  force_diskless_dec: 
#line 1171
  put_ldev(mdev);
  force_diskless: 
#line 1173
  val___0.i = 0U;
#line 1173
  val___0.ldv_32691.disk = 0U;
#line 1173
  mask___0.i = 0U;
#line 1173
  mask___0.ldv_32691.disk = 15U;
#line 1173
  drbd_force_state(mdev, mask___0, val___0);
#line 1174
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1176
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1177
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1179
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1180
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1182
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1183
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1184
      fput(nbc->lo_file);
    } else {

    }
#line 1185
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1186
      fput(nbc->md_file);
    } else {

    }
#line 1187
    kfree((void const   *)nbc);
  } else {

  }
#line 1189
  lc_destroy(resync_lru);
#line 1191
  reply->ret_code = (int )retcode;
#line 1192
  drbd_reconfig_done(mdev);
#line 1193
  return (0);
}
}
#line 1196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1199
  val.i = 0U;
#line 1199
  val.ldv_32691.disk = 0U;
#line 1199
  mask.i = 0U;
#line 1199
  mask.ldv_32691.disk = 15U;
#line 1199
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1200
  return (0);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1208
  new_conf = 0;
#line 1209
  tfm = 0;
#line 1210
  integrity_w_tfm = 0;
#line 1211
  integrity_r_tfm = 0;
#line 1212
  new_tl_hash = 0;
#line 1213
  new_ee_hash = 0;
#line 1216
  int_dig_out = 0;
#line 1217
  int_dig_in = 0;
#line 1218
  int_dig_vv = 0;
#line 1221
  drbd_reconfig_start(mdev);
#line 1223
  if ((int )mdev->state.ldv_32691.conn > 0) {
#line 1224
    retcode = ERR_NET_CONFIGURED;
#line 1225
    goto fail;
  } else {

  }
#line 1229
  tmp = kmalloc___5(532UL, 208U);
#line 1229
  new_conf = (struct net_conf *)tmp;
#line 1230
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1231
    retcode = ERR_NOMEM;
#line 1232
    goto fail;
  } else {

  }
#line 1235
  memset((void *)new_conf, 0, 532UL);
#line 1236
  new_conf->timeout = 60;
#line 1237
  new_conf->try_connect_int = 10;
#line 1238
  new_conf->ping_int = 10;
#line 1239
  new_conf->max_epoch_size = 2048;
#line 1240
  new_conf->max_buffers = 2048;
#line 1241
  new_conf->unplug_watermark = 128;
#line 1242
  new_conf->sndbuf_size = 0;
#line 1243
  new_conf->rcvbuf_size = 0;
#line 1244
  new_conf->ko_count = 0;
#line 1245
  new_conf->after_sb_0p = 0;
#line 1246
  new_conf->after_sb_1p = 0;
#line 1247
  new_conf->after_sb_2p = 0;
#line 1248
  new_conf->want_lose = 0U;
#line 1249
  new_conf->two_primaries = 0U;
#line 1250
  new_conf->wire_protocol = 3;
#line 1251
  new_conf->ping_timeo = 5;
#line 1252
  new_conf->rr_conflict = 0;
#line 1254
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1254
  if (tmp___0 == 0) {
#line 1255
    retcode = ERR_MANDATORY_TAG;
#line 1256
    goto fail;
  } else {

  }
#line 1259
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1261
    retcode = ERR_NOT_PROTO_C;
#line 1262
    goto fail;
  } else {

  }
#line 1265
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1266
    retcode = ERR_DISCARD;
#line 1267
    goto fail;
  } else {

  }
#line 1270
  retcode = NO_ERROR;
#line 1272
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1273
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1274
  i = 0;
#line 1274
  goto ldv_43604;
  ldv_43603: 
#line 1275
  odev = minor_to_mdev((unsigned int )i);
#line 1276
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1277
    goto ldv_43602;
  } else {

  }
#line 1278
  tmp___3 = get_net_conf(odev);
#line 1278
  if (tmp___3 != 0) {
#line 1279
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1280
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1280
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1280
      if (tmp___1 == 0) {
#line 1282
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1284
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1285
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1285
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1285
      if (tmp___2 == 0) {
#line 1287
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1289
    put_net_conf(odev);
#line 1290
    if ((unsigned int )retcode != 101U) {
#line 1291
      goto fail;
    } else {

    }
  } else {

  }
  ldv_43602: 
#line 1274
  i = i + 1;
  ldv_43604: ;
#line 1274
  if ((unsigned int )i < minor_count) {
#line 1275
    goto ldv_43603;
  } else {

  }

#line 1295
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1296
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1298
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1299
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1299
    if (tmp___4 != 0L) {
#line 1300
      tfm = 0;
#line 1301
      retcode = ERR_AUTH_ALG;
#line 1302
      goto fail;
    } else {

    }
#line 1305
    tmp___5 = crypto_hash_tfm(tfm);
#line 1305
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1305
    if (tmp___6 == 0) {
#line 1306
      retcode = ERR_AUTH_ALG_ND;
#line 1307
      goto fail;
    } else {

    }
  } else {

  }
#line 1311
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1312
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1313
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1313
    if (tmp___7 != 0L) {
#line 1314
      integrity_w_tfm = 0;
#line 1315
      retcode = ERR_INTEGRITY_ALG;
#line 1316
      goto fail;
    } else {

    }
#line 1319
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1319
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1319
    if (tmp___9 == 0) {
#line 1320
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1321
      goto fail;
    } else {

    }
#line 1324
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1325
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1325
    if (tmp___10 != 0L) {
#line 1326
      integrity_r_tfm = 0;
#line 1327
      retcode = ERR_INTEGRITY_ALG;
#line 1328
      goto fail;
    } else {

    }
  } else {

  }
#line 1332
  ns = new_conf->max_epoch_size / 8;
#line 1333
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1334
    tmp___11 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1334
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1335
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1336
      retcode = ERR_NOMEM;
#line 1337
      goto fail;
    } else {

    }
  } else {

  }
#line 1341
  ns = new_conf->max_buffers / 8;
#line 1342
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1343
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1343
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1344
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1345
      retcode = ERR_NOMEM;
#line 1346
      goto fail;
    } else {

    }
  } else {

  }
#line 1350
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1352
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1353
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1353
    i = (int )tmp___13;
#line 1354
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1355
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1356
      retcode = ERR_NOMEM;
#line 1357
      goto fail;
    } else {

    }
#line 1359
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1360
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1361
      retcode = ERR_NOMEM;
#line 1362
      goto fail;
    } else {

    }
#line 1364
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1365
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1366
      retcode = ERR_NOMEM;
#line 1367
      goto fail;
    } else {

    }
  } else {

  }
#line 1371
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1372
    tmp___14 = drbd_bm_init(mdev);
#line 1372
    if (tmp___14 != 0) {
#line 1373
      retcode = ERR_NOMEM;
#line 1374
      goto fail;
    } else {

    }
  } else {

  }
#line 1378
  spin_lock_irq(& mdev->req_lock);
#line 1379
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1380
    retcode = ERR_NET_CONFIGURED;
#line 1381
    spin_unlock_irq(& mdev->req_lock);
#line 1382
    goto fail;
  } else {

  }
#line 1384
  mdev->net_conf = new_conf;
#line 1386
  mdev->send_cnt = 0U;
#line 1387
  mdev->recv_cnt = 0U;
#line 1389
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1390
    kfree((void const   *)mdev->tl_hash);
#line 1391
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1392
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1395
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1396
    kfree((void const   *)mdev->ee_hash);
#line 1397
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1398
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1401
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1402
  mdev->cram_hmac_tfm = tfm;
#line 1404
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1405
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1407
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1408
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1410
  kfree((void const   *)mdev->int_dig_out);
#line 1411
  kfree((void const   *)mdev->int_dig_in);
#line 1412
  kfree((void const   *)mdev->int_dig_vv);
#line 1413
  mdev->int_dig_out = int_dig_out;
#line 1414
  mdev->int_dig_in = int_dig_in;
#line 1415
  mdev->int_dig_vv = int_dig_vv;
#line 1416
  spin_unlock_irq(& mdev->req_lock);
#line 1418
  val.i = 0U;
#line 1418
  val.ldv_32691.conn = 2U;
#line 1418
  mask.i = 0U;
#line 1418
  mask.ldv_32691.conn = 31U;
#line 1418
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1418
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1420
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1421
  reply->ret_code = (int )retcode;
#line 1422
  drbd_reconfig_done(mdev);
#line 1423
  return (0);
  fail: 
#line 1426
  kfree((void const   *)int_dig_out);
#line 1427
  kfree((void const   *)int_dig_in);
#line 1428
  kfree((void const   *)int_dig_vv);
#line 1429
  crypto_free_hash(tfm);
#line 1430
  crypto_free_hash(integrity_w_tfm);
#line 1431
  crypto_free_hash(integrity_r_tfm);
#line 1432
  kfree((void const   *)new_tl_hash);
#line 1433
  kfree((void const   *)new_ee_hash);
#line 1434
  kfree((void const   *)new_conf);
#line 1436
  reply->ret_code = (int )retcode;
#line 1437
  drbd_reconfig_done(mdev);
#line 1438
  return (0);
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1446
  val.i = 0U;
#line 1446
  val.ldv_32691.conn = 1U;
#line 1446
  mask.i = 0U;
#line 1446
  mask.ldv_32691.conn = 31U;
#line 1446
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1448
  if (retcode == 2) {
#line 1449
    goto done;
  } else
#line 1450
  if (retcode == -9) {
#line 1451
    goto done;
  } else
#line 1452
  if (retcode == -7) {
#line 1455
    val___0.i = 0U;
#line 1455
    val___0.ldv_32691.conn = 1U;
#line 1455
    val___0.ldv_32691.pdsk = 5U;
#line 1454
    mask___0.i = 0U;
#line 1454
    mask___0.ldv_32691.conn = 31U;
#line 1455
    mask___0.ldv_32691.pdsk = 15U;
#line 1455
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1456
  if (retcode == -10) {
#line 1459
    val___1.i = 0U;
#line 1459
    val___1.ldv_32691.conn = 1U;
#line 1459
    val___1.ldv_32691.disk = 5U;
#line 1458
    mask___1.i = 0U;
#line 1458
    mask___1.ldv_32691.conn = 31U;
#line 1459
    mask___1.ldv_32691.disk = 15U;
#line 1459
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1461
    if (retcode == -11 || retcode == -16) {
#line 1462
      val___2.i = 0U;
#line 1462
      val___2.ldv_32691.conn = 1U;
#line 1462
      mask___2.i = 0U;
#line 1462
      mask___2.ldv_32691.conn = 31U;
#line 1462
      drbd_force_state(mdev, mask___2, val___2);
#line 1463
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1467
  if (retcode <= 0) {
#line 1468
    goto fail;
  } else {

  }
#line 1470
  __ret = 0;
#line 1470
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U) {
#line 1470
    tmp = get_current();
#line 1470
    __wait.flags = 0U;
#line 1470
    __wait.private = (void *)tmp;
#line 1470
    __wait.func = & autoremove_wake_function;
#line 1470
    __wait.task_list.next = & __wait.task_list;
#line 1470
    __wait.task_list.prev = & __wait.task_list;
    ldv_43638: 
#line 1470
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1470
    if ((unsigned int )*((unsigned short *)mdev + 902UL) != 16U) {
#line 1470
      goto ldv_43636;
    } else {

    }
#line 1470
    tmp___0 = get_current();
#line 1470
    tmp___1 = signal_pending(tmp___0);
#line 1470
    if (tmp___1 == 0) {
#line 1470
      schedule();
#line 1470
      goto ldv_43637;
    } else {

    }
#line 1470
    __ret = -512;
#line 1470
    goto ldv_43636;
    ldv_43637: ;
#line 1470
    goto ldv_43638;
    ldv_43636: 
#line 1470
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1470
  if (__ret != 0) {
#line 1474
    retcode = 129;
#line 1475
    goto fail;
  } else {

  }
  done: 
#line 1479
  retcode = 101;
  fail: 
#line 1481
  drbd_md_sync(mdev);
#line 1482
  reply->ret_code = retcode;
#line 1483
  return (0);
}
}
#line 1486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1490
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1490
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1490
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1491
  if ((int )mdev->state.ldv_32691.role != (int )mdev->state.ldv_32691.peer) {
#line 1492
    iass = (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U;
  } else {
#line 1494
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1496
  if (iass != 0) {
#line 1497
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1499
    val.i = 0U;
#line 1499
    val.ldv_32691.conn = 15U;
#line 1499
    mask.i = 0U;
#line 1499
    mask.ldv_32691.conn = 31U;
#line 1499
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1501
  return;
}
}
#line 1502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  int ldsc ;
  enum determine_dev_size dd ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1506
  retcode = 101;
#line 1507
  ldsc = 0;
#line 1510
  memset((void *)(& rs), 0, 8UL);
#line 1511
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1511
  if (tmp == 0) {
#line 1512
    retcode = 126;
#line 1513
    goto fail;
  } else {

  }
#line 1516
  if ((int )mdev->state.ldv_32691.conn > 10) {
#line 1517
    retcode = 130;
#line 1518
    goto fail;
  } else {

  }
#line 1521
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1804UL) == 8U) {
#line 1523
    retcode = 131;
#line 1524
    goto fail;
  } else {

  }
#line 1527
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1527
  if (tmp___0 == 0) {
#line 1528
    retcode = 138;
#line 1529
    goto fail;
  } else {

  }
#line 1532
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1532
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1533
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1534
    ldsc = 1;
  } else {

  }
#line 1537
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1538
  dd = drbd_determin_dev_size(mdev);
#line 1539
  drbd_md_sync(mdev);
#line 1540
  put_ldev(mdev);
#line 1541
  if ((int )dd == -1) {
#line 1542
    retcode = 140;
#line 1543
    goto fail;
  } else {

  }
#line 1546
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && ((int )dd != 0 || ldsc != 0)) {
#line 1547
    if ((int )dd == 2) {
#line 1548
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1550
    drbd_send_uuids(mdev);
#line 1551
    drbd_send_sizes(mdev, 1);
  } else {

  }
  fail: 
#line 1555
  reply->ret_code = retcode;
#line 1556
  return (0);
}
}
#line 1559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1562
  retcode = 101;
#line 1566
  verify_tfm = 0;
#line 1567
  csums_tfm = 0;
#line 1571
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1571
  if (tmp) {
#line 1571
    tmp___0 = 0;
  } else {
#line 1571
    tmp___0 = 1;
  }
#line 1571
  if (tmp___0) {
#line 1572
    retcode = 122;
#line 1573
    goto fail;
  } else {

  }
#line 1576
  if ((nlp->flags & 2) != 0) {
#line 1577
    memset((void *)(& sc), 0, 188UL);
#line 1578
    sc.rate = 250;
#line 1579
    sc.after = -1;
#line 1580
    sc.al_extents = 127;
  } else {
#line 1582
    __len = 188UL;
#line 1582
    if (__len > 63UL) {
#line 1582
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1582
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1584
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1584
  if (tmp___1 == 0) {
#line 1585
    retcode = 126;
#line 1586
    goto fail;
  } else {

  }
#line 1590
  rsr = (((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 336U;
#line 1595
  if (rsr != 0) {
#line 1595
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1595
    if (tmp___2 != 0) {
#line 1596
      retcode = 148;
#line 1597
      goto fail;
    } else {

    }
  } else {

  }
#line 1600
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1601
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1602
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1602
    if (tmp___3 != 0L) {
#line 1603
      csums_tfm = 0;
#line 1604
      retcode = 144;
#line 1605
      goto fail;
    } else {

    }
#line 1608
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1608
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1608
    if (tmp___5 == 0) {
#line 1609
      retcode = 145;
#line 1610
      goto fail;
    } else {

    }
  } else {

  }
#line 1615
  ovr = (unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U;
#line 1617
  if (ovr != 0) {
#line 1618
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1618
    if (tmp___6 != 0) {
#line 1619
      retcode = 149;
#line 1620
      goto fail;
    } else {

    }
  } else {

  }
#line 1624
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1625
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1626
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1626
    if (tmp___7 != 0L) {
#line 1627
      verify_tfm = 0;
#line 1628
      retcode = 146;
#line 1629
      goto fail;
    } else {

    }
#line 1632
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1632
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1632
    if (tmp___9 == 0) {
#line 1633
      retcode = 147;
#line 1634
      goto fail;
    } else {

    }
  } else {

  }
#line 1639
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1640
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1642
    if (err != 0) {
#line 1643
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1644
      retcode = 143;
#line 1645
      goto fail;
    } else {

    }
  } else {

  }
#line 1649
  _b = sc.rate <= 0;
#line 1649
  if (_b != 0) {
#line 1649
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1649
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1649
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1649);
  } else {

  }
#line 1649
  if (_b != 0) {
#line 1649
    sc.rate = 1;
  } else {

  }
#line 1650
  _b___0 = sc.al_extents <= 6;
#line 1650
  if (_b___0 != 0) {
#line 1650
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1650
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1650
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1650);
  } else {

  }
#line 1650
  if (_b___0 != 0) {
#line 1650
    sc.al_extents = 127;
  } else {

  }
#line 1652
  if (sc.al_extents > 3843) {
#line 1653
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1653
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1653
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1654
    sc.al_extents = 3843;
  } else {

  }
#line 1661
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1662
  if (retcode != 101) {
#line 1663
    goto fail;
  } else {

  }
#line 1667
  spin_lock(& mdev->peer_seq_lock);
#line 1668
  mdev->sync_conf = sc;
#line 1670
  if (rsr == 0) {
#line 1671
    crypto_free_hash(mdev->csums_tfm);
#line 1672
    mdev->csums_tfm = csums_tfm;
#line 1673
    csums_tfm = 0;
  } else {

  }
#line 1676
  if (ovr == 0) {
#line 1677
    crypto_free_hash(mdev->verify_tfm);
#line 1678
    mdev->verify_tfm = verify_tfm;
#line 1679
    verify_tfm = 0;
  } else {

  }
#line 1681
  spin_unlock(& mdev->peer_seq_lock);
#line 1683
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1683
  if (tmp___21 != 0) {
#line 1684
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1684
    if (tmp___18 != 0) {
#line 1684
      goto ldv_43680;
    } else {

    }
#line 1684
    tmp___19 = get_current();
#line 1684
    __wait.flags = 0U;
#line 1684
    __wait.private = (void *)tmp___19;
#line 1684
    __wait.func = & autoremove_wake_function;
#line 1684
    __wait.task_list.next = & __wait.task_list;
#line 1684
    __wait.task_list.prev = & __wait.task_list;
    ldv_43683: 
#line 1684
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1684
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1684
    if (tmp___20 != 0) {
#line 1684
      goto ldv_43682;
    } else {

    }
#line 1684
    schedule();
#line 1684
    goto ldv_43683;
    ldv_43682: 
#line 1684
    finish_wait(& mdev->al_wait, & __wait);
    ldv_43680: 
#line 1685
    drbd_al_shrink(mdev);
#line 1686
    err = drbd_check_al_size(mdev);
#line 1687
    lc_unlock(mdev->act_log);
#line 1688
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1690
    put_ldev(mdev);
#line 1691
    drbd_md_sync(mdev);
#line 1693
    if (err != 0) {
#line 1694
      retcode = 122;
#line 1695
      goto fail;
    } else {

    }
  } else {

  }
#line 1699
  if ((int )mdev->state.ldv_32691.conn > 9) {
#line 1700
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1702
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1702
  if (tmp___22) {
#line 1702
    tmp___23 = 0;
  } else {
#line 1702
    tmp___23 = 1;
  }
#line 1702
  if (tmp___23) {
#line 1703
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1704
    drbd_calc_cpu_mask(mdev);
#line 1705
    mdev->receiver.reset_cpu_mask = 1;
#line 1706
    mdev->asender.reset_cpu_mask = 1;
#line 1707
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1710
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1712
  free_cpumask_var(new_cpu_mask);
#line 1713
  crypto_free_hash(csums_tfm);
#line 1714
  crypto_free_hash(verify_tfm);
#line 1715
  reply->ret_code = retcode;
#line 1716
  return (0);
}
}
#line 1719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1724
  val.i = 0U;
#line 1724
  val.ldv_32691.conn = 12U;
#line 1724
  mask.i = 0U;
#line 1724
  mask.ldv_32691.conn = 31U;
#line 1724
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1726
  if (retcode <= 0 && retcode != -15) {
#line 1727
    val___0.i = 0U;
#line 1727
    val___0.ldv_32691.conn = 12U;
#line 1727
    mask___0.i = 0U;
#line 1727
    mask___0.ldv_32691.conn = 31U;
#line 1727
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1729
  goto ldv_43706;
  ldv_43705: 
#line 1730
  spin_lock_irq(& mdev->req_lock);
#line 1731
  if ((int )mdev->state.ldv_32691.conn <= 9) {
#line 1732
    __ns.i = mdev->state.i;
#line 1732
    __ns.ldv_32691.disk = 4U;
#line 1732
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1733
  spin_unlock_irq(& mdev->req_lock);
#line 1735
  if (retcode != -15) {
#line 1736
    goto ldv_43700;
  } else {

  }
#line 1738
  val___1.i = 0U;
#line 1738
  val___1.ldv_32691.conn = 12U;
#line 1738
  mask___1.i = 0U;
#line 1738
  mask___1.ldv_32691.conn = 31U;
#line 1738
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_43706: ;
#line 1729
  if (retcode == -15) {
#line 1730
    goto ldv_43705;
  } else {

  }
  ldv_43700: 
#line 1741
  reply->ret_code = retcode;
#line 1742
  return (0);
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1749
  val.i = 0U;
#line 1749
  val.ldv_32691.conn = 11U;
#line 1749
  mask.i = 0U;
#line 1749
  mask.ldv_32691.conn = 31U;
#line 1749
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1751
  return (0);
}
}
#line 1754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1757
  retcode = 101;
#line 1759
  val.i = 0U;
#line 1759
  val.ldv_32691.user_isp = 1U;
#line 1759
  mask.i = 0U;
#line 1759
  mask.ldv_32691.user_isp = 1U;
#line 1759
  tmp = drbd_request_state(mdev, mask, val);
#line 1759
  if (tmp == 2) {
#line 1760
    retcode = 134;
  } else {

  }
#line 1762
  reply->ret_code = retcode;
#line 1763
  return (0);
}
}
#line 1766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1769
  retcode = 101;
#line 1771
  val.i = 0U;
#line 1771
  val.ldv_32691.user_isp = 0U;
#line 1771
  mask.i = 0U;
#line 1771
  mask.ldv_32691.user_isp = 1U;
#line 1771
  tmp = drbd_request_state(mdev, mask, val);
#line 1771
  if (tmp == 2) {
#line 1772
    retcode = 135;
  } else {

  }
#line 1774
  reply->ret_code = retcode;
#line 1775
  return (0);
}
}
#line 1778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1781
  val.i = 0U;
#line 1781
  val.ldv_32691.susp = 1U;
#line 1781
  mask.i = 0U;
#line 1781
  mask.ldv_32691.susp = 1U;
#line 1781
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1783
  return (0);
}
}
#line 1786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1789
  val.i = 0U;
#line 1789
  val.ldv_32691.susp = 0U;
#line 1789
  mask.i = 0U;
#line 1789
  mask.ldv_32691.susp = 1U;
#line 1789
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1790
  return (0);
}
}
#line 1793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1796
  val.i = 0U;
#line 1796
  val.ldv_32691.disk = 5U;
#line 1796
  mask.i = 0U;
#line 1796
  mask.ldv_32691.disk = 15U;
#line 1796
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1797
  return (0);
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1805
  tl = (unsigned short *)(& reply->tag_list);
#line 1807
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1807
  if (tmp != 0) {
#line 1808
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1809
    put_ldev(mdev);
  } else {

  }
#line 1812
  tmp___0 = get_net_conf(mdev);
#line 1812
  if (tmp___0 != 0) {
#line 1813
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1814
    put_net_conf(mdev);
  } else {

  }
#line 1816
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1818
  tmp___1 = tl;
#line 1818
  tl = tl + 1;
#line 1818
  __gu_p = (void *)tmp___1;
#line 1818
  switch (2UL) {
  case 1UL: 
#line 1818
  *((u8 *)__gu_p) = 0U;
#line 1818
  goto ldv_43771;
  case 2UL: 
#line 1818
  put_unaligned_le16(0, __gu_p);
#line 1818
  goto ldv_43771;
  case 4UL: 
#line 1818
  put_unaligned_le32(0U, __gu_p);
#line 1818
  goto ldv_43771;
  case 8UL: 
#line 1818
  put_unaligned_le64(0ULL, __gu_p);
#line 1818
  goto ldv_43771;
  default: 
#line 1818
  __bad_unaligned_access_size();
#line 1818
  goto ldv_43771;
  }
  ldv_43771: ;
#line 1820
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1826
  tl = (unsigned short *)(& reply->tag_list);
#line 1827
  s = mdev->state;
#line 1831
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1834
  if ((int )s.ldv_32691.conn > 15 && (int )s.ldv_32691.conn <= 21) {
#line 1835
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1835
    if (tmp != 0) {
#line 1836
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1837
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1838
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1841
  tmp___0 = tl;
#line 1841
  tl = tl + 1;
#line 1841
  __gu_p = (void *)tmp___0;
#line 1841
  switch (2UL) {
  case 1UL: 
#line 1841
  *((u8 *)__gu_p) = 0U;
#line 1841
  goto ldv_43787;
  case 2UL: 
#line 1841
  put_unaligned_le16(0, __gu_p);
#line 1841
  goto ldv_43787;
  case 4UL: 
#line 1841
  put_unaligned_le32(0U, __gu_p);
#line 1841
  goto ldv_43787;
  case 8UL: 
#line 1841
  put_unaligned_le64(0ULL, __gu_p);
#line 1841
  goto ldv_43787;
  default: 
#line 1841
  __bad_unaligned_access_size();
#line 1841
  goto ldv_43787;
  }
  ldv_43787: ;
#line 1843
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1851
  tl = (unsigned short *)(& reply->tag_list);
#line 1853
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1853
  if (tmp != 0) {
#line 1854
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1855
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1856
    put_ldev(mdev);
  } else {

  }
#line 1858
  tmp___0 = tl;
#line 1858
  tl = tl + 1;
#line 1858
  __gu_p = (void *)tmp___0;
#line 1858
  switch (2UL) {
  case 1UL: 
#line 1858
  *((u8 *)__gu_p) = 0U;
#line 1858
  goto ldv_43800;
  case 2UL: 
#line 1858
  put_unaligned_le16(0, __gu_p);
#line 1858
  goto ldv_43800;
  case 4UL: 
#line 1858
  put_unaligned_le32(0U, __gu_p);
#line 1858
  goto ldv_43800;
  case 8UL: 
#line 1858
  put_unaligned_le64(0ULL, __gu_p);
#line 1858
  goto ldv_43800;
  default: 
#line 1858
  __bad_unaligned_access_size();
#line 1858
  goto ldv_43800;
  }
  ldv_43800: ;
#line 1860
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1869 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1875
  tl = (unsigned short *)(& reply->tag_list);
#line 1877
  if (*((unsigned int *)mdev + 451UL) != 40960U) {
#line 1877
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1877
    rv = tmp != 0;
  } else {
#line 1877
    rv = 2;
  }
#line 1880
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1881
  tmp___0 = tl;
#line 1881
  tl = tl + 1;
#line 1881
  __gu_p = (void *)tmp___0;
#line 1881
  switch (2UL) {
  case 1UL: 
#line 1881
  *((u8 *)__gu_p) = 0U;
#line 1881
  goto ldv_43814;
  case 2UL: 
#line 1881
  put_unaligned_le16(0, __gu_p);
#line 1881
  goto ldv_43814;
  case 4UL: 
#line 1881
  put_unaligned_le32(0U, __gu_p);
#line 1881
  goto ldv_43814;
  case 8UL: 
#line 1881
  put_unaligned_le64(0ULL, __gu_p);
#line 1881
  goto ldv_43814;
  default: 
#line 1881
  __bad_unaligned_access_size();
#line 1881
  goto ldv_43814;
  }
  ldv_43814: ;
#line 1883
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1890
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1893
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1893
  if (tmp == 0) {
#line 1894
    reply->ret_code = 126;
#line 1895
    return (0);
  } else {

  }
#line 1898
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1899
  val.i = 0U;
#line 1899
  val.ldv_32691.conn = 18U;
#line 1899
  mask.i = 0U;
#line 1899
  mask.ldv_32691.conn = 31U;
#line 1899
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1900
  return (0);
}
}
#line 1904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1907
  retcode = 101;
#line 1908
  skip_initial_sync = 0;
#line 1913
  memset((void *)(& args), 0, 4UL);
#line 1914
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1914
  if (tmp == 0) {
#line 1915
    reply->ret_code = 126;
#line 1916
    return (0);
  } else {

  }
#line 1919
  ldv_mutex_lock_126(& mdev->state_mutex);
#line 1921
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1921
  if (tmp___0 == 0) {
#line 1922
    retcode = 138;
#line 1923
    goto out;
  } else {

  }
#line 1927
  if ((((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1929
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1929
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1929
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1930
    skip_initial_sync = 1;
  } else
#line 1931
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1932
    retcode = 151;
#line 1933
    goto out_dec;
  } else {

  }
#line 1936
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1937
  drbd_uuid_new_current(mdev);
#line 1939
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1940
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1941
    if (err != 0) {
#line 1942
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1942
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1942
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1943
      retcode = 118;
    } else {

    }
#line 1945
    if (skip_initial_sync != 0) {
#line 1946
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1947
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1948
      spin_lock_irq(& mdev->req_lock);
#line 1949
      __ns.i = mdev->state.i;
#line 1949
      __ns.ldv_32691.disk = 8U;
#line 1949
      __ns.ldv_32691.pdsk = 8U;
#line 1949
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1951
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1955
  drbd_md_sync(mdev);
  out_dec: 
#line 1957
  put_ldev(mdev);
  out: 
#line 1959
  ldv_mutex_unlock_127(& mdev->state_mutex);
#line 1961
  reply->ret_code = retcode;
#line 1962
  return (0);
}
}
#line 1965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1969
  if (nlp->drbd_minor >= minor_count) {
#line 1970
    return (0);
  } else {

  }
#line 1972
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1974
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1975
    disk = 0;
#line 1976
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1978
    spin_lock_irq(& drbd_pp_lock);
#line 1979
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1980
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1981
      disk = mdev->vdisk;
#line 1982
      mdev = 0;
    } else {

    }
#line 1984
    spin_unlock_irq(& drbd_pp_lock);
#line 1986
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 1989
      add_disk(disk);
    } else {
#line 1991
      drbd_free_mdev(mdev);
    }
#line 1993
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 1996
  return (mdev);
}
}
#line 2006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2006
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1232}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2039
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2045
  reply_size = 34;
#line 2049
  tmp = try_module_get___0(& __this_module);
#line 2049
  if (tmp == 0) {
#line 2050
    printk("<3>drbd: try_module_get() failed!\n");
#line 2051
    return;
  } else {

  }
#line 2054
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2055
    retcode = 152;
#line 2056
    goto fail;
  } else {

  }
#line 2059
  mdev = ensure_mdev(nlp);
#line 2060
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2061
    retcode = 127;
#line 2062
    goto fail;
  } else {

  }
#line 2065
  if (nlp->packet_type > 26) {
#line 2066
    retcode = 137;
#line 2067
    goto fail;
  } else {

  }
#line 2070
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2073
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2074
    retcode = 137;
#line 2075
    goto fail;
  } else {

  }
#line 2078
  reply_size = cm->reply_body_size + reply_size;
#line 2081
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2081
  cn_reply = (struct cn_msg *)tmp___0;
#line 2082
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2083
    retcode = 122;
#line 2084
    goto fail;
  } else {

  }
#line 2086
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2088
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2090
  reply->minor = nlp->drbd_minor;
#line 2091
  reply->ret_code = 101;
#line 2094
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2096
  cn_reply->id = req->id;
#line 2097
  cn_reply->seq = req->seq;
#line 2098
  cn_reply->ack = req->ack + 1U;
#line 2099
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2100
  cn_reply->flags = 0U;
#line 2102
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2103
  if (rr != 0 && rr != -3) {
#line 2104
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2106
  kfree((void const   *)cn_reply);
#line 2107
  module_put(& __this_module);
#line 2108
  return;
  fail: 
#line 2110
  drbd_nl_send_reply(req, retcode);
#line 2111
  module_put(& __this_module);
#line 2112
  return;
}
}
#line 2114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2120
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2121
  len = (int )len < (int )l ? len : l;
#line 2122
  tmp = tl;
#line 2122
  tl = tl + 1;
#line 2122
  __gu_p = (void *)tmp;
#line 2122
  switch (2UL) {
  case 1UL: 
#line 2122
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2122
  goto ldv_43878;
  case 2UL: 
#line 2122
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2122
  goto ldv_43878;
  case 4UL: 
#line 2122
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2122
  goto ldv_43878;
  case 8UL: 
#line 2122
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2122
  goto ldv_43878;
  default: 
#line 2122
  __bad_unaligned_access_size();
#line 2122
  goto ldv_43878;
  }
  ldv_43878: 
#line 2123
  tmp___0 = tl;
#line 2123
  tl = tl + 1;
#line 2123
  __gu_p___0 = (void *)tmp___0;
#line 2123
  switch (2UL) {
  case 1UL: 
#line 2123
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2123
  goto ldv_43885;
  case 2UL: 
#line 2123
  put_unaligned_le16((int )len, __gu_p___0);
#line 2123
  goto ldv_43885;
  case 4UL: 
#line 2123
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2123
  goto ldv_43885;
  case 8UL: 
#line 2123
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2123
  goto ldv_43885;
  default: 
#line 2123
  __bad_unaligned_access_size();
#line 2123
  goto ldv_43885;
  }
  ldv_43885: 
#line 2124
  __len = (size_t )len;
#line 2124
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2125
  tl = tl + (unsigned long )len;
#line 2126
  if (nul_terminated != 0) {
#line 2127
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2128
  return (tl);
}
}
#line 2132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2134
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2134
  return (tmp);
}
}
#line 2138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2140
  tmp = strlen(str);
#line 2140
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2140
  return (tmp___0);
}
}
#line 2144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2146
  tmp = tl;
#line 2146
  tl = tl + 1;
#line 2146
  __gu_p = (void *)tmp;
#line 2146
  switch (2UL) {
  case 1UL: 
#line 2146
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2146
  goto ldv_43911;
  case 2UL: 
#line 2146
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2146
  goto ldv_43911;
  case 4UL: 
#line 2146
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2146
  goto ldv_43911;
  case 8UL: 
#line 2146
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2146
  goto ldv_43911;
  default: 
#line 2146
  __bad_unaligned_access_size();
#line 2146
  goto ldv_43911;
  }
  ldv_43911: ;
#line 2147
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2149
  tmp___0 = tl;
#line 2149
  tl = tl + 1;
#line 2149
  __gu_p___0 = (void *)tmp___0;
#line 2149
  switch (2UL) {
  case 1UL: 
#line 2149
  *((u8 *)__gu_p___0) = 4U;
#line 2149
  goto ldv_43919;
  case 2UL: 
#line 2149
  put_unaligned_le16(4, __gu_p___0);
#line 2149
  goto ldv_43919;
  case 4UL: 
#line 2149
  put_unaligned_le32(4U, __gu_p___0);
#line 2149
  goto ldv_43919;
  case 8UL: 
#line 2149
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2149
  goto ldv_43919;
  default: 
#line 2149
  __bad_unaligned_access_size();
#line 2149
  goto ldv_43919;
  }
  ldv_43919: 
#line 2150
  __gu_p___1 = (void *)tl;
#line 2150
  switch (4UL) {
  case 1UL: 
#line 2150
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2150
  goto ldv_43926;
  case 2UL: 
#line 2150
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2150
  goto ldv_43926;
  case 4UL: 
#line 2150
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2150
  goto ldv_43926;
  case 8UL: 
#line 2150
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2150
  goto ldv_43926;
  default: 
#line 2150
  __bad_unaligned_access_size();
#line 2150
  goto ldv_43926;
  }
  ldv_43926: 
#line 2151
  tl = tl + 4U;
#line 2152
  goto ldv_43931;
  case 16384U: 
#line 2154
  tmp___1 = tl;
#line 2154
  tl = tl + 1;
#line 2154
  __gu_p___2 = (void *)tmp___1;
#line 2154
  switch (2UL) {
  case 1UL: 
#line 2154
  *((u8 *)__gu_p___2) = 8U;
#line 2154
  goto ldv_43935;
  case 2UL: 
#line 2154
  put_unaligned_le16(8, __gu_p___2);
#line 2154
  goto ldv_43935;
  case 4UL: 
#line 2154
  put_unaligned_le32(8U, __gu_p___2);
#line 2154
  goto ldv_43935;
  case 8UL: 
#line 2154
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2154
  goto ldv_43935;
  default: 
#line 2154
  __bad_unaligned_access_size();
#line 2154
  goto ldv_43935;
  }
  ldv_43935: 
#line 2155
  __gu_p___3 = (void *)tl;
#line 2155
  switch (8UL) {
  case 1UL: 
#line 2155
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2155
  goto ldv_43942;
  case 2UL: 
#line 2155
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2155
  goto ldv_43942;
  case 4UL: 
#line 2155
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2155
  goto ldv_43942;
  case 8UL: 
#line 2155
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2155
  goto ldv_43942;
  default: 
#line 2155
  __bad_unaligned_access_size();
#line 2155
  goto ldv_43942;
  }
  ldv_43942: 
#line 2156
  tl = tl + 8U;
#line 2157
  goto ldv_43931;
  default: ;
  }
  ldv_43931: ;
#line 2162
  return (tl);
}
}
#line 2165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2171
  cn_reply = (struct cn_msg *)(& buffer);
#line 2172
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2174
  tl = (unsigned short *)(& reply->tag_list);
#line 2178
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2180
  tmp = tl;
#line 2180
  tl = tl + 1;
#line 2180
  __gu_p = (void *)tmp;
#line 2180
  switch (2UL) {
  case 1UL: 
#line 2180
  *((u8 *)__gu_p) = 0U;
#line 2180
  goto ldv_43958;
  case 2UL: 
#line 2180
  put_unaligned_le16(0, __gu_p);
#line 2180
  goto ldv_43958;
  case 4UL: 
#line 2180
  put_unaligned_le32(0U, __gu_p);
#line 2180
  goto ldv_43958;
  case 8UL: 
#line 2180
  put_unaligned_le64(0ULL, __gu_p);
#line 2180
  goto ldv_43958;
  default: 
#line 2180
  __bad_unaligned_access_size();
#line 2180
  goto ldv_43958;
  }
  ldv_43958: 
#line 2182
  cn_reply->id.idx = 8U;
#line 2183
  cn_reply->id.val = 1U;
#line 2185
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2185
  cn_reply->seq = (__u32 )tmp___0;
#line 2186
  cn_reply->ack = 0U;
#line 2187
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2189
  cn_reply->flags = 0U;
#line 2191
  reply->packet_type = 17;
#line 2192
  reply->minor = mdev_to_minor(mdev);
#line 2193
  reply->ret_code = 101;
#line 2195
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2196
  return;
}
}
#line 2198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2204
  cn_reply = (struct cn_msg *)(& buffer);
#line 2205
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2207
  tl = (unsigned short *)(& reply->tag_list);
#line 2211
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2212
  tmp = tl;
#line 2212
  tl = tl + 1;
#line 2212
  __gu_p = (void *)tmp;
#line 2212
  switch (2UL) {
  case 1UL: 
#line 2212
  *((u8 *)__gu_p) = 0U;
#line 2212
  goto ldv_43973;
  case 2UL: 
#line 2212
  put_unaligned_le16(0, __gu_p);
#line 2212
  goto ldv_43973;
  case 4UL: 
#line 2212
  put_unaligned_le32(0U, __gu_p);
#line 2212
  goto ldv_43973;
  case 8UL: 
#line 2212
  put_unaligned_le64(0ULL, __gu_p);
#line 2212
  goto ldv_43973;
  default: 
#line 2212
  __bad_unaligned_access_size();
#line 2212
  goto ldv_43973;
  }
  ldv_43973: 
#line 2214
  cn_reply->id.idx = 8U;
#line 2215
  cn_reply->id.val = 1U;
#line 2217
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2217
  cn_reply->seq = (__u32 )tmp___0;
#line 2218
  cn_reply->ack = 0U;
#line 2219
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2221
  cn_reply->flags = 0U;
#line 2223
  reply->packet_type = 20;
#line 2224
  reply->minor = mdev_to_minor(mdev);
#line 2225
  reply->ret_code = 101;
#line 2227
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2228
  return;
}
}
#line 2230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct bio_vec *bvec ;
  unsigned short *tl ;
  int i ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___5 ;
  int tmp___6 ;

  {
#line 2241
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2242
    return;
  } else {

  }
#line 2243
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2244
    return;
  } else {

  }
#line 2252
  tmp = kmalloc___5(33026UL, 16U);
#line 2252
  cn_reply = (struct cn_msg *)tmp;
#line 2259
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2260
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2260
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2260
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2262
    return;
  } else {

  }
#line 2265
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2266
  tl = (unsigned short *)(& reply->tag_list);
#line 2268
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2269
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2270
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2271
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2272
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2274
  tmp___2 = tl;
#line 2274
  tl = tl + 1;
#line 2274
  __gu_p = (void *)tmp___2;
#line 2274
  switch (2UL) {
  case 1UL: 
#line 2274
  *((u8 *)__gu_p) = 50U;
#line 2274
  goto ldv_43993;
  case 2UL: 
#line 2274
  put_unaligned_le16(49202, __gu_p);
#line 2274
  goto ldv_43993;
  case 4UL: 
#line 2274
  put_unaligned_le32(49202U, __gu_p);
#line 2274
  goto ldv_43993;
  case 8UL: 
#line 2274
  put_unaligned_le64(49202ULL, __gu_p);
#line 2274
  goto ldv_43993;
  default: 
#line 2274
  __bad_unaligned_access_size();
#line 2274
  goto ldv_43993;
  }
  ldv_43993: 
#line 2275
  tmp___3 = tl;
#line 2275
  tl = tl + 1;
#line 2275
  __gu_p___0 = (void *)tmp___3;
#line 2275
  switch (2UL) {
  case 1UL: 
#line 2275
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2275
  goto ldv_44000;
  case 2UL: 
#line 2275
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2275
  goto ldv_44000;
  case 4UL: 
#line 2275
  put_unaligned_le32(e->size, __gu_p___0);
#line 2275
  goto ldv_44000;
  case 8UL: 
#line 2275
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2275
  goto ldv_44000;
  default: 
#line 2275
  __bad_unaligned_access_size();
#line 2275
  goto ldv_44000;
  }
  ldv_44000: 
#line 2277
  bvec = (e->private_bio)->bi_io_vec;
#line 2277
  i = 0;
#line 2277
  goto ldv_44010;
  ldv_44009: 
#line 2278
  tmp___4 = kmap(bvec->bv_page);
#line 2278
  d = tmp___4;
#line 2279
  __len = (size_t )bvec->bv_len;
#line 2279
  __ret = __builtin_memcpy((void *)tl, (void const   *)d + (unsigned long )bvec->bv_offset,
                           __len);
#line 2280
  kunmap(bvec->bv_page);
#line 2281
  tl = tl + (unsigned long )bvec->bv_len;
#line 2277
  bvec = bvec + 1;
#line 2277
  i = i + 1;
  ldv_44010: ;
#line 2277
  if ((int )(e->private_bio)->bi_vcnt > i) {
#line 2278
    goto ldv_44009;
  } else {

  }
#line 2283
  tmp___5 = tl;
#line 2283
  tl = tl + 1;
#line 2283
  __gu_p___1 = (void *)tmp___5;
#line 2283
  switch (2UL) {
  case 1UL: 
#line 2283
  *((u8 *)__gu_p___1) = 0U;
#line 2283
  goto ldv_44014;
  case 2UL: 
#line 2283
  put_unaligned_le16(0, __gu_p___1);
#line 2283
  goto ldv_44014;
  case 4UL: 
#line 2283
  put_unaligned_le32(0U, __gu_p___1);
#line 2283
  goto ldv_44014;
  case 8UL: 
#line 2283
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2283
  goto ldv_44014;
  default: 
#line 2283
  __bad_unaligned_access_size();
#line 2283
  goto ldv_44014;
  }
  ldv_44014: 
#line 2285
  cn_reply->id.idx = 8U;
#line 2286
  cn_reply->id.val = 1U;
#line 2288
  tmp___6 = atomic_add_return(1, & drbd_nl_seq);
#line 2288
  cn_reply->seq = (__u32 )tmp___6;
#line 2289
  cn_reply->ack = 0U;
#line 2290
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2292
  cn_reply->flags = 0U;
#line 2294
  reply->packet_type = 24;
#line 2295
  reply->minor = mdev_to_minor(mdev);
#line 2296
  reply->ret_code = 101;
#line 2298
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2299
  kfree((void const   *)cn_reply);
#line 2300
  return;
}
}
#line 2302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2308
  cn_reply = (struct cn_msg *)(& buffer);
#line 2309
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2311
  tl = (unsigned short *)(& reply->tag_list);
#line 2316
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2316
  if (tmp == 0) {
#line 2317
    return;
  } else {

  }
#line 2318
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2319
  put_ldev(mdev);
#line 2321
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2322
  tmp___0 = tl;
#line 2322
  tl = tl + 1;
#line 2322
  __gu_p = (void *)tmp___0;
#line 2322
  switch (2UL) {
  case 1UL: 
#line 2322
  *((u8 *)__gu_p) = 0U;
#line 2322
  goto ldv_44030;
  case 2UL: 
#line 2322
  put_unaligned_le16(0, __gu_p);
#line 2322
  goto ldv_44030;
  case 4UL: 
#line 2322
  put_unaligned_le32(0U, __gu_p);
#line 2322
  goto ldv_44030;
  case 8UL: 
#line 2322
  put_unaligned_le64(0ULL, __gu_p);
#line 2322
  goto ldv_44030;
  default: 
#line 2322
  __bad_unaligned_access_size();
#line 2322
  goto ldv_44030;
  }
  ldv_44030: 
#line 2324
  cn_reply->id.idx = 8U;
#line 2325
  cn_reply->id.val = 1U;
#line 2327
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2327
  cn_reply->seq = (__u32 )tmp___1;
#line 2328
  cn_reply->ack = 0U;
#line 2329
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2331
  cn_reply->flags = 0U;
#line 2333
  reply->packet_type = 23;
#line 2334
  reply->minor = mdev_to_minor(mdev);
#line 2335
  reply->ret_code = 101;
#line 2337
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2338
  return;
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2343
  try = 10;
#line 2345
  cn_id_drbd.val = 1U;
  ldv_44042: 
#line 2347
  cn_id_drbd.idx = cn_idx;
#line 2348
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2349
  if (err == 0) {
#line 2350
    goto ldv_44041;
  } else {

  }
#line 2351
  cn_idx = cn_idx + 6977U;
#line 2352
  tmp = try;
#line 2352
  try = try - 1;
#line 2352
  if (tmp != 0) {
#line 2353
    goto ldv_44042;
  } else {

  }
  ldv_44041: ;
#line 2354
  if (err != 0) {
#line 2355
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2356
    return (err);
  } else {

  }
#line 2359
  return (0);
}
}
#line 2362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2366
  cn_id_drbd.idx = cn_idx;
#line 2367
  cn_id_drbd.val = 1U;
#line 2369
  cn_del_callback(& cn_id_drbd);
#line 2370
  return;
}
}
#line 2372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2375
  cn_reply = (struct cn_msg *)(& buffer);
#line 2376
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2380
  cn_reply->id = req->id;
#line 2382
  cn_reply->seq = req->seq;
#line 2383
  cn_reply->ack = req->ack + 1U;
#line 2384
  cn_reply->len = 12U;
#line 2385
  cn_reply->flags = 0U;
#line 2387
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2388
  reply->ret_code = ret_code;
#line 2390
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2391
  if (rr != 0 && rr != -3) {
#line 2392
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2393
  return;
}
}
#line 2395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2400
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2402
  mutex_lock(ldv_func_arg1);
#line 2403
  return;
}
}
#line 2405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_122(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2410
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2412
  mutex_unlock(ldv_func_arg1);
#line 2413
  return;
}
}
#line 2415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2420
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2422
  mutex_unlock(ldv_func_arg1);
#line 2423
  return;
}
}
#line 2425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2430
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2432
  mutex_lock(ldv_func_arg1);
#line 2433
  return;
}
}
#line 2435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2440
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2442
  mutex_unlock(ldv_func_arg1);
#line 2443
  return;
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2450
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2452
  mutex_lock(ldv_func_arg1);
#line 2453
  return;
}
}
#line 2455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2460
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2462
  mutex_unlock(ldv_func_arg1);
#line 2463
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 462
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 469
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 471
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 473
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 474
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 480
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 480
    ldv_error();
  }
#line 482
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 482
    ldv_error();
  }
#line 484
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 484
    ldv_error();
  }
#line 485
  return;
}
}
