/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 6 "include/asm/types.h"
typedef unsigned short umode_t;
#line 13 "include/asm/types.h"
typedef signed char __s8;
#line 14 "include/asm/types.h"
typedef unsigned char __u8;
#line 16 "include/asm/types.h"
typedef short __s16;
#line 17 "include/asm/types.h"
typedef unsigned short __u16;
#line 19 "include/asm/types.h"
typedef int __s32;
#line 20 "include/asm/types.h"
typedef unsigned int __u32;
#line 28 "include/asm/types.h"
typedef long long __s64;
#line 29 "include/asm/types.h"
typedef unsigned long long __u64;
#line 47 "include/asm/types.h"
typedef signed char s8;
#line 48 "include/asm/types.h"
typedef unsigned char u8;
#line 51 "include/asm/types.h"
typedef unsigned short u16;
#line 54 "include/asm/types.h"
typedef unsigned int u32;
#line 56 "include/asm/types.h"
typedef long long s64;
#line 57 "include/asm/types.h"
typedef unsigned long long u64;
#line 62 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 58 "include/asm/alternative.h"
struct module;
#line 74 "include/linux/log2.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 87 "include/linux/kernel.h"
struct completion;
#line 88
struct pt_regs;
#line 176
struct pid;
#line 417
struct task_struct;
#line 418
struct mm_struct;
#line 100 "include/asm/ptrace-abi.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 208 "include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 73 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 74 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 77
struct page;
#line 71 "include/asm/page.h"
struct __anonstruct_pgd_t_6 {
   pgdval_t pgd ;
};
#line 71 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_6 pgd_t;
#line 72 "include/asm/page.h"
struct __anonstruct_pgprot_t_7 {
   pgprotval_t pgprot ;
};
#line 72 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_7 pgprot_t;
#line 135 "include/asm/page.h"
struct __anonstruct_ldv_1869_11 {
   unsigned int a ;
   unsigned int b ;
};
#line 135 "include/asm/page.h"
struct __anonstruct_ldv_1884_12 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 135 "include/asm/page.h"
union __anonunion_ldv_1885_10 {
   struct __anonstruct_ldv_1869_11 ldv_1869 ;
   struct __anonstruct_ldv_1884_12 ldv_1884 ;
};
#line 135 "include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1885_10 ldv_1885 ;
};
#line 88 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_13 {
   unsigned long bits[1U] ;
};
#line 88 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_13 cpumask_t;
#line 442
struct thread_struct;
#line 22 "include/asm-generic/page.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 199 "include/asm/msr.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 288 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 306 "include/asm/processor.h"
struct __anonstruct_ldv_3963_15 {
   u64 rip ;
   u64 rdp ;
};
#line 306 "include/asm/processor.h"
struct __anonstruct_ldv_3969_16 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 306 "include/asm/processor.h"
union __anonunion_ldv_3970_14 {
   struct __anonstruct_ldv_3963_15 ldv_3963 ;
   struct __anonstruct_ldv_3969_16 ldv_3969 ;
};
#line 306 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_3970_14 ldv_3970 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[24U] ;
};
#line 335 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 356 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
#line 370
struct kmem_cache;
#line 374 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
#line 610 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_17 {
   unsigned long seg ;
};
#line 610 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_17 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 418 "include/linux/list.h"
struct hlist_node;
#line 418 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 685 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "include/asm/stat.h"
struct __anonstruct_ldv_4433_19 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "include/asm/stat.h"
struct __anonstruct_futex_20 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "include/asm/stat.h"
struct __anonstruct_nanosleep_21 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114 "include/asm/stat.h"
union __anonunion_ldv_4447_18 {
   struct __anonstruct_ldv_4433_19 ldv_4433 ;
   struct __anonstruct_futex_20 futex ;
   struct __anonstruct_nanosleep_21 nanosleep ;
};
#line 114 "include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_4447_18 ldv_4447 ;
};
#line 45 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 10 "include/asm/spinlock_types.h"
struct __anonstruct_raw_spinlock_t_22 {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_spinlock_t_22 raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_23 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_23 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 54 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 29 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 155 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 188 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_24 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_24 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_25 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_25 rwlock_t;
#line 27 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_26 {
   int counter ;
};
#line 27 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_26 atomic_t;
#line 204 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_27 {
   long counter ;
};
#line 204 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_27 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 157 "include/linux/seqlock.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 213 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 32 "include/linux/kmod.h"
struct key;
#line 33
struct file;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 402
struct kobject;
#line 403 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   int (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 39
struct vm_area_struct;
#line 74 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 118 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 51 "include/linux/kobject.h"
struct kset;
#line 51
struct kobj_type;
#line 51
struct sysfs_dirent;
#line 51 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 192 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void * , char const   *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 88 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[1U] ;
};
#line 88 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 559 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 150
struct rw_semaphore;
#line 152 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 106 "include/linux/pm.h"
struct device;
#line 107 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 115 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 116 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   bool sleeping ;
   struct list_head entry ;
};
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 335
struct tvec_base;
#line 336 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 159 "include/linux/timer.h"
struct hrtimer;
#line 160
enum hrtimer_restart;
#line 167
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 256 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[17U] ;
};
#line 43 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   struct list_head full ;
};
#line 53 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   int order ;
   struct kmem_cache_node local_node ;
   int objects ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 12 "include/asm/local.h"
struct __anonstruct_local_t_86 {
   atomic_long_t a ;
};
#line 12 "include/asm/local.h"
typedef struct __anonstruct_local_t_86 local_t;
#line 155 "include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 67
struct exception_table_entry;
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230 "include/linux/module.h"
struct module_sect_attr {
   struct module_attribute mattr ;
   char *name ;
   unsigned long address ;
};
#line 239 "include/linux/module.h"
struct module_sect_attrs {
   struct attribute_group grp ;
   int nsections ;
   struct module_sect_attr attrs[0U] ;
};
#line 246
struct module_param_attrs;
#line 247
struct module_notes_attrs;
#line 247 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[8U] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 469
struct device_driver;
#line 89 "include/linux/kdev_t.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 247 "include/linux/rcupdate.h"
struct nameidata;
#line 248
struct path;
#line 249
struct vfsmount;
#line 250 "include/linux/rcupdate.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 78 "include/linux/dcache.h"
struct dcookie_struct;
#line 79
struct inode;
#line 79 "include/linux/dcache.h"
union __anonunion_d_u_87 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 79
struct dentry_operations;
#line 79
struct super_block;
#line 79 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_87 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 122 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 367 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 14 "include/linux/path.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 19 "include/linux/namei.h"
union __anonunion_intent_88 {
   struct open_intent open ;
};
#line 19 "include/linux/namei.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
   union __anonunion_intent_88 intent ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 181
struct prio_tree_node;
#line 181 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   int level ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 84 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 494 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 50 "include/linux/semaphore.h"
struct export_operations;
#line 52
struct iovec;
#line 53
struct kiocb;
#line 54
struct pipe_inode_info;
#line 55
struct poll_table_struct;
#line 56
struct kstatfs;
#line 314 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 46 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 114 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 147 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 176 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 197
struct quota_format_type;
#line 198 "include/linux/quota.h"
union __anonunion_u_90 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 198 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   union __anonunion_u_90 u ;
};
#line 241 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 264 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 280 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 296 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 311 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 318 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 355
struct address_space;
#line 356
struct writeback_control;
#line 441 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   struct page *(*get_xip_page)(struct address_space * , sector_t  , int  ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 494
struct backing_dev_info;
#line 495 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 516
struct hd_struct;
#line 516
struct gendisk;
#line 516 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 580
struct inode_operations;
#line 580
struct file_operations;
#line 580
struct file_lock;
#line 580
struct cdev;
#line 580 "include/linux/fs.h"
union __anonunion_ldv_9805_91 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 580
struct dnotify_struct;
#line 580 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_9805_91 ldv_9805 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 746 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 754 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 777 "include/linux/fs.h"
union __anonunion_f_u_92 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 777 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_92 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 894
struct files_struct;
#line 894 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 895 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_insert)(struct file_lock * ) ;
   void (*fl_remove)(struct file_lock * ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 902 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_94 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_93 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_94 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_93 fl_u ;
};
#line 994 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1027
struct file_system_type;
#line 1027
struct super_operations;
#line 1027
struct xattr_handler;
#line 1027
struct mtd_info;
#line 1027 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1207 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1248 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
};
#line 1274
struct seq_file;
#line 1288 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*put_inode)(struct inode * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct vfsmount * , int  ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1476 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1836
struct bio;
#line 6 "include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 23 "include/asm/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "include/asm/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 35 "include/linux/cdev.h"
struct tty_struct;
#line 36
struct tty_driver;
#line 166 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 166 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   int refcount ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   void (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*read_proc)(char * , char ** , off_t  , int  , int * , void * ) ;
   int (*write_proc)(struct file * , char const   * , unsigned long  , void * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct list_head tty_drivers ;
};
#line 245 "include/linux/tty_driver.h"
struct tty_ldisc {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 67 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 76
struct signal_struct;
#line 77 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct tty_driver *driver ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 206 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 228 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 294 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 314 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 395 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 552
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 560
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 47 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 160 "include/linux/rbtree.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 21 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_98 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 21 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_98 mm_context_t;
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_12880_99 {
   atomic_t _mapcount ;
   unsigned int inuse ;
};
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_12885_101 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_12889_100 {
   struct __anonstruct_ldv_12885_101 ldv_12885 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_12893_102 {
   unsigned long index ;
   void *freelist ;
};
#line 25 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12880_99 ldv_12880 ;
   union __anonunion_ldv_12889_100 ldv_12889 ;
   union __anonunion_ldv_12893_102 ldv_12893 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 94 "include/linux/mm_types.h"
struct __anonstruct_vm_set_104 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 94 "include/linux/mm_types.h"
union __anonunion_shared_103 {
   struct __anonstruct_vm_set_104 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 94
struct anon_vma;
#line 94
struct vm_operations_struct;
#line 94
struct mempolicy;
#line 94 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_103 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 157
struct kioctx;
#line 157
struct mem_cgroup;
#line 157 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[38U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   int core_waiters ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct mem_cgroup *mem_cgroup ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 102 "include/linux/ipc.h"
struct sem_undo;
#line 116 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_105 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_105 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 168 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 180 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_107 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_108 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_109 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_110 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_111 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_112 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_106 {
   int _pad[28U] ;
   struct __anonstruct__kill_107 _kill ;
   struct __anonstruct__timer_108 _timer ;
   struct __anonstruct__rt_109 _rt ;
   struct __anonstruct__sigchld_110 _sigchld ;
   struct __anonstruct__sigfault_111 _sigfault ;
   struct __anonstruct__sigpoll_112 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_106 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 291
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 7 "include/linux/securebits.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
   struct path altroot ;
};
#line 80 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_115 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_115 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 73
struct hrtimer_clock_base;
#line 74
struct hrtimer_cpu_base;
#line 80
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 85
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 92 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 138 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 166 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 368 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 34 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/latencytop.h"
struct futex_pi_state;
#line 31
struct robust_list_head;
#line 139 "include/linux/sched.h"
struct cfs_rq;
#line 140
struct task_group;
#line 331
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_116 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_116 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 390 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 416 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 424 "include/linux/sched.h"
union __anonunion_ldv_14078_117 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 424 "include/linux/sched.h"
union __anonunion_ldv_14083_118 {
   pid_t session ;
   pid_t __session ;
};
#line 424
struct taskstats;
#line 424
struct tty_audit_buf;
#line 424 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_14078_117 ldv_14078 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_14083_118 ldv_14083 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 565 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 607
struct reclaim_state;
#line 608 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 631 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 668
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 675 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 735
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 749 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   int first_cpu ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 834
struct io_context;
#line 835 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 875
struct audit_context;
#line 877
struct rq;
#line 878 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*join_domain)(struct rq * ) ;
   void (*leave_domain)(struct rq * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 929 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 934 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1000
struct rt_rq;
#line 1000 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1016
struct linux_binfmt;
#line 1016
struct css_set;
#line 1016
struct compat_robust_list_head;
#line 1016 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct list_head ptrace_children ;
   struct list_head ptrace_list ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   unsigned int rt_priority ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   unsigned char keep_capabilities : 1 ;
   struct user_struct *user ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   unsigned char jit_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   struct held_lock held_locks[48U] ;
   unsigned int lockdep_recursion ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   struct mempolicy *mempolicy ;
   short il_next ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
};
#line 158 "include/linux/ioport.h"
struct klist_node;
#line 159 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 30 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 60 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 11 "include/asm/device.h"
struct driver_private;
#line 12
struct class;
#line 13
struct class_device;
#line 14
struct bus_type;
#line 15
struct bus_type_private;
#line 16 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 54 "include/linux/device.h"
struct device_attribute;
#line 54
struct driver_attribute;
#line 54 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct bus_type_private *p ;
};
#line 120 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct driver_private *p ;
};
#line 147 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 176
struct class_attribute;
#line 176
struct class_device_attribute;
#line 176 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head children ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct class_device_attribute *class_dev_attrs ;
   struct device_attribute *dev_attrs ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct class_device * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
#line 214 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 229 "include/linux/device.h"
struct class_device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class_device * , char * ) ;
   ssize_t (*store)(struct class_device * , char const   * , size_t  ) ;
};
#line 242 "include/linux/device.h"
struct class_device {
   struct list_head node ;
   struct kobject kobj ;
   struct class *class ;
   dev_t devt ;
   struct device *dev ;
   void *class_data ;
   struct class_device *parent ;
   struct attribute_group **groups ;
   void (*release)(struct class_device * ) ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   char class_id[20U] ;
};
#line 333 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
#line 351 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 412 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 421
struct dma_coherent_mem;
#line 421 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 576
struct usb_device;
#line 577
struct usb_driver;
#line 578
struct ep_device;
#line 579 "include/linux/device.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 70 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 84
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 91 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char is_active : 1 ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 183 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 210 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 276 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 288
struct mon_bus;
#line 288 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 327
struct usb_tt;
#line 328 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char discon_suspended : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char auto_pm : 1 ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   unsigned char autoresume_disabled : 1 ;
   unsigned char skip_sys_resume : 1 ;
};
#line 792 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 922 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 934 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
};
#line 1089 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1122
struct urb;
#line 1123 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1139 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 1696
struct usb_serial;
#line 1696 "include/linux/usb.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_struct *tty ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   int open_count ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 111 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 111 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 160 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*shutdown)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct usb_serial_port * , struct file * ) ;
   void (*close)(struct usb_serial_port * , struct file * ) ;
   int (*write)(struct usb_serial_port * , unsigned char const   * , int  ) ;
   int (*write_room)(struct usb_serial_port * ) ;
   int (*ioctl)(struct usb_serial_port * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct usb_serial_port * , int  ) ;
   int (*chars_in_buffer)(struct usb_serial_port * ) ;
   void (*throttle)(struct usb_serial_port * ) ;
   void (*unthrottle)(struct usb_serial_port * ) ;
   int (*tiocmget)(struct usb_serial_port * , struct file * ) ;
   int (*tiocmset)(struct usb_serial_port * , struct file * , unsigned int  , unsigned int  ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
enum spcp8x5_type {
    SPCP825_007_TYPE = 0,
    SPCP825_008_TYPE = 1,
    SPCP825_PHILIP_TYPE = 2,
    SPCP825_INTERMATIC_TYPE = 3,
    SPCP835_TYPE = 4
} ;
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct ringbuf {
   unsigned int buf_size ;
   char *buf_buf ;
   char *buf_get ;
   char *buf_put ;
};
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct spcp8x5_private {
   spinlock_t lock ;
   struct ringbuf *buf ;
   int write_urb_in_use ;
   enum spcp8x5_type type ;
   wait_queue_head_t delta_msr_wait ;
   u8 line_control ;
   u8 line_status ;
   u8 termios_initialized ;
};
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
enum __anonenum_95 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 2 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
void ldv_spin_lock(void) ;
#line 3
void ldv_spin_unlock(void) ;
#line 278 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , void const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 282
  __asm__  volatile   ("bt %2,%3\n\tsbb %0,%0": "=r" (oldbit): "m" (*((int const volatile   *)addr + (unsigned long )(nr >> 5))),
                       "Ir" (nr), "m" (*((int volatile   *)addr)));
#line 288
  return (oldbit);
}
}
#line 182 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 50 "include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 56
extern struct x8664_pda _proxy_pda ;
#line 9 "include/asm/current_64.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *t ;
  struct task_struct *ret__ ;

  {
#line 11
  switch (8UL) {
  case 2UL: 
#line 11
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 11
  goto ldv_3585;
  case 4UL: 
#line 11
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 11
  goto ldv_3585;
  case 8UL: 
#line 11
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 11
  goto ldv_3585;
  default: 
#line 11
  __bad_pda_field();
  }
  ldv_3585: 
#line 11
  t = ret__;
#line 12
  return (t);
}
}
#line 23 "include/asm/cmpxchg_64.h"
__inline static unsigned long __xchg(unsigned long x , void volatile   *ptr , int size ) 
{ 


  {
#line 26
  switch (size) {
  case 1: 
#line 28
  __asm__  volatile   ("xchgb %b0,%1": "=q" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 32
  goto ldv_3600;
  case 2: 
#line 34
  __asm__  volatile   ("xchgw %w0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 38
  goto ldv_3600;
  case 4: 
#line 40
  __asm__  volatile   ("xchgl %k0,%1": "=r" (x): "m" (*((long volatile   *)ptr)),
                       "0" (x): "memory");
#line 44
  goto ldv_3600;
  case 8: 
#line 46
  __asm__  volatile   ("xchgq %0,%1": "=r" (x): "m" (*((long volatile   *)ptr)), "0" (x): "memory");
#line 50
  goto ldv_3600;
  }
  ldv_3600: ;
#line 52
  return (x);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 78
  tmp = variable_test_bit(flag, (void const volatile   *)(& ti->flags));
#line 78
  return (tmp);
}
}
#line 93 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 91 "include/linux/wait.h"
__inline static void init_waitqueue_entry(wait_queue_t *q , struct task_struct *p ) 
{ 


  {
#line 93
  q->flags = 0U;
#line 94
  q->private = (void *)p;
#line 95
  q->func = & default_wake_function;
#line 96
  return;
}
}
#line 120
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 122
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 144
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 433
extern void interruptible_sleep_on(wait_queue_head_t * ) ;
#line 215 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 218
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 95 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 190 "include/linux/workqueue.h"
extern int schedule_work(struct work_struct * ) ;
#line 189 "include/linux/slub_def.h"
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 192
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 196
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 198
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 205 "include/linux/slub_def.h"
__inline static void *ldv_kmalloc_3(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 220
  tmp___2 = __kmalloc(size, flags);
#line 220
  return (tmp___2);
}
}
#line 205
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 273 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
void ldv_check_alloc_flags(gfp_t flags ) ;
#line 271 "include/linux/tty.h"
extern struct ktermios tty_std_termios ;
#line 308
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 309
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 315
extern int tty_termios_hw_change(struct ktermios * , struct ktermios * ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct * , size_t  ) ;
#line 6
extern int tty_insert_flip_string_flags(struct tty_struct * , unsigned char const   * ,
                                        char const   * , size_t  ) ;
#line 11 "include/linux/tty_flip.h"
__inline static int tty_insert_flip_char(struct tty_struct *tty , unsigned char ch ,
                                         char flag ) 
{ 
  struct tty_buffer *tb ;
  int tmp ;
  int tmp___0 ;

  {
#line 14
  tb = tty->buf.tail;
#line 15
  if ((unsigned long )tb != (unsigned long )((struct tty_buffer *)0) && tb->used < tb->size) {
#line 16
    *(tb->flag_buf_ptr + (unsigned long )tb->used) = (unsigned char )flag;
#line 17
    tmp = tb->used;
#line 17
    tb->used = tb->used + 1;
#line 17
    *(tb->char_buf_ptr + (unsigned long )tmp) = (char )ch;
#line 18
    return (1);
  } else {

  }
#line 20
  tmp___0 = tty_insert_flip_string_flags(tty, (unsigned char const   *)(& ch), (char const   *)(& flag),
                                         1UL);
#line 20
  return (tmp___0);
}
}
#line 326 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 1952 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 1954
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 1954
  return (tmp);
}
}
#line 1967 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 1969
  tmp = test_tsk_thread_flag(p, 2);
#line 1969
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 1969
  return ((int )tmp___0);
}
}
#line 499 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev ) 
{ 


  {
#line 501
  return (dev->driver_data);
}
}
#line 504 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 506
  dev->driver_data = data;
#line 507
  return;
}
}
#line 1071 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1073 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1075
  tmp = usb_register_driver(driver, & __this_module, "spcp8x5");
#line 1075
  return (tmp);
}
}
#line 1077
extern void usb_deregister(struct usb_driver * ) ;
#line 1450
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1453
int ldv_usb_submit_urb_10(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1457
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1461
int ldv_usb_submit_urb_12(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1465
int ldv_usb_submit_urb_13(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1469
int ldv_usb_submit_urb_14(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1471
extern int usb_unlink_urb(struct urb * ) ;
#line 1508
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1526
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1641 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1644
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 101 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 103
  tmp = dev_get_drvdata(& port->dev);
#line 103
  return (tmp);
}
}
#line 106 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 109
  dev_set_drvdata(& port->dev, data);
#line 110
  return;
}
}
#line 262
extern int usb_serial_register(struct usb_serial_driver * ) ;
#line 263
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
#line 266
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
#line 268
extern void usb_serial_disconnect(struct usb_interface * ) ;
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int debug  ;
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_device_id id_table[6U]  = {      {3U, 1137U, 2078U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 516U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 561U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 565U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1276U, 513U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static struct ringbuf *alloc_ringbuf(unsigned int size ) 
{ 
  struct ringbuf *pb ;
  void *tmp ;
  void *tmp___0 ;
  char *tmp___1 ;

  {
#line 186
  if (size == 0U) {
#line 187
    return (0);
  } else {

  }
#line 189
  tmp = kmalloc(32UL, 208U);
#line 189
  pb = (struct ringbuf *)tmp;
#line 190
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 191
    return (0);
  } else {

  }
#line 193
  tmp___0 = kmalloc((size_t )size, 208U);
#line 193
  pb->buf_buf = (char *)tmp___0;
#line 194
  if ((unsigned long )pb->buf_buf == (unsigned long )((char *)0)) {
#line 195
    kfree((void const   *)pb);
#line 196
    return (0);
  } else {

  }
#line 199
  pb->buf_size = size;
#line 200
  tmp___1 = pb->buf_buf;
#line 200
  pb->buf_put = tmp___1;
#line 200
  pb->buf_get = tmp___1;
#line 202
  return (pb);
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void free_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 208
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 209
    kfree((void const   *)pb->buf_buf);
#line 210
    kfree((void const   *)pb);
  } else {

  }
#line 212
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void clear_ringbuf(struct ringbuf *pb ) 
{ 


  {
#line 217
  if ((unsigned long )pb != (unsigned long )((struct ringbuf *)0)) {
#line 218
    pb->buf_get = pb->buf_put;
  } else {

  }
#line 219
  return;
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_data(struct ringbuf *pb ) 
{ 


  {
#line 224
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 225
    return (0U);
  } else {

  }
#line 226
  return ((unsigned int )(((long )(pb->buf_put + (unsigned long )pb->buf_size) - (long )pb->buf_get) % (long )pb->buf_size));
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static unsigned int ringbuf_avail_space(struct ringbuf *pb ) 
{ 


  {
#line 232
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 233
    return (0U);
  } else {

  }
#line 234
  return ((unsigned int )((((long )(pb->buf_get + (unsigned long )pb->buf_size) - (long )pb->buf_put) + -1L) % (long )pb->buf_size));
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int put_ringbuf(struct ringbuf *pb , char const   *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 243
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0)) {
#line 244
    return (0U);
  } else {

  }
#line 246
  len = ringbuf_avail_space(pb);
#line 247
  if (count > len) {
#line 248
    count = len;
  } else {

  }
#line 250
  if (count == 0U) {
#line 251
    return (0U);
  } else {

  }
#line 253
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_put);
#line 254
  if (count > len) {
#line 255
    __len = (size_t )len;
#line 255
    __ret = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len);
#line 256
    __len___0 = (size_t )(count - len);
#line 256
    __ret___0 = __builtin_memcpy((void *)pb->buf_buf, (void const   *)buf + (unsigned long )len,
                                 __len___0);
#line 257
    pb->buf_put = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 259
    __len___1 = (size_t )count;
#line 259
    __ret___1 = __builtin_memcpy((void *)pb->buf_put, (void const   *)buf, __len___1);
#line 260
    if (count < len) {
#line 261
      pb->buf_put = pb->buf_put + (unsigned long )count;
    } else {
#line 263
      pb->buf_put = pb->buf_buf;
    }
  }
#line 265
  return (count);
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static unsigned int get_ringbuf(struct ringbuf *pb , char *buf , unsigned int count ) 
{ 
  unsigned int len ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 274
  if ((unsigned long )pb == (unsigned long )((struct ringbuf *)0) || (unsigned long )buf == (unsigned long )((char *)0)) {
#line 275
    return (0U);
  } else {

  }
#line 277
  len = ringbuf_avail_data(pb);
#line 278
  if (count > len) {
#line 279
    count = len;
  } else {

  }
#line 281
  if (count == 0U) {
#line 282
    return (0U);
  } else {

  }
#line 284
  len = (unsigned int )((long )(pb->buf_buf + (unsigned long )pb->buf_size)) - (unsigned int )((long )pb->buf_get);
#line 285
  if (count > len) {
#line 286
    __len = (size_t )len;
#line 286
    __ret = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len);
#line 287
    __len___0 = (size_t )(count - len);
#line 287
    __ret___0 = __builtin_memcpy((void *)buf + (unsigned long )len, (void const   *)pb->buf_buf,
                                 __len___0);
#line 288
    pb->buf_get = pb->buf_buf + ((unsigned long )count - (unsigned long )len);
  } else {
#line 290
    __len___1 = (size_t )count;
#line 290
    __ret___1 = __builtin_memcpy((void *)buf, (void const   *)pb->buf_get, __len___1);
#line 291
    if (count < len) {
#line 292
      pb->buf_get = pb->buf_get + (unsigned long )count;
    } else {
#line 294
      pb->buf_get = pb->buf_buf;
    }
  }
#line 297
  return (count);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_driver spcp8x5_driver  = 
#line 300
     {"spcp8x5", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& id_table),
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                0}, 1U, (unsigned char)0};
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_startup(struct usb_serial *serial ) 
{ 
  struct spcp8x5_private *priv ;
  int i ;
  enum spcp8x5_type type ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  void *tmp___1 ;

  {
#line 327
  type = SPCP825_007_TYPE;
#line 329
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 513U) {
#line 330
    type = SPCP825_007_TYPE;
  } else
#line 331
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 561U) {
#line 332
    type = SPCP835_TYPE;
  } else
#line 333
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 565U) {
#line 334
    type = SPCP825_008_TYPE;
  } else
#line 335
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 516U) {
#line 336
    type = SPCP825_INTERMATIC_TYPE;
  } else
#line 337
  if ((unsigned int )(serial->dev)->descriptor.idProduct == 1137U && (unsigned int )(serial->dev)->descriptor.idVendor == 2078U) {
#line 339
    type = SPCP825_PHILIP_TYPE;
  } else {

  }
#line 342
  i = 0;
#line 342
  goto ldv_17151;
  ldv_17150: 
#line 343
  tmp___0 = kzalloc(152UL, 208U);
#line 343
  priv = (struct spcp8x5_private *)tmp___0;
#line 344
  if ((unsigned long )priv == (unsigned long )((struct spcp8x5_private *)0)) {
#line 345
    goto cleanup;
  } else {

  }
#line 347
  __spin_lock_init(& priv->lock, "&priv->lock", & __key);
#line 348
  priv->buf = alloc_ringbuf(1024U);
#line 349
  if ((unsigned long )priv->buf == (unsigned long )((struct ringbuf *)0)) {
#line 350
    goto cleanup2;
  } else {

  }
#line 352
  init_waitqueue_head(& priv->delta_msr_wait);
#line 353
  priv->type = type;
#line 354
  usb_set_serial_port_data(serial->port[i], (void *)priv);
#line 342
  i = i + 1;
  ldv_17151: ;
#line 342
  if ((int )serial->num_ports > i) {
#line 343
    goto ldv_17150;
  } else {

  }

#line 358
  return (0);
  cleanup2: 
#line 361
  kfree((void const   *)priv);
  cleanup: 
#line 363
  i = i - 1;
#line 363
  goto ldv_17154;
  ldv_17153: 
#line 364
  tmp___1 = usb_get_serial_port_data(serial->port[i]);
#line 364
  priv = (struct spcp8x5_private *)tmp___1;
#line 365
  free_ringbuf(priv->buf);
#line 366
  kfree((void const   *)priv);
#line 367
  usb_set_serial_port_data(serial->port[i], 0);
#line 363
  i = i - 1;
  ldv_17154: ;
#line 363
  if (i >= 0) {
#line 364
    goto ldv_17153;
  } else {

  }

#line 369
  return (-12);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  struct spcp8x5_private *priv ;
  void *tmp ;

  {
#line 378
  i = 0;
#line 378
  goto ldv_17162;
  ldv_17161: 
#line 379
  tmp = usb_get_serial_port_data(serial->port[i]);
#line 379
  priv = (struct spcp8x5_private *)tmp;
#line 380
  if ((unsigned long )priv != (unsigned long )((struct spcp8x5_private *)0)) {
#line 381
    free_ringbuf(priv->buf);
#line 382
    kfree((void const   *)priv);
#line 383
    usb_set_serial_port_data(serial->port[i], 0);
  } else {

  }
#line 378
  i = i + 1;
  ldv_17162: ;
#line 378
  if ((int )serial->num_ports > i) {
#line 379
    goto ldv_17161;
  } else {

  }

#line 383
  return;
}
}
#line 390 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_set_ctrlLine(struct usb_device *dev , u8 value , enum spcp8x5_type type ) 
{ 
  int retval ;
  u8 mcr ;
  unsigned int tmp ;

  {
#line 394
  mcr = 0U;
#line 396
  if ((unsigned int )type == 0U) {
#line 397
    return (-1);
  } else {

  }
#line 399
  mcr = value;
#line 400
  tmp = __create_pipe(dev, 0U);
#line 400
  retval = usb_control_msg(dev, tmp | 2147483648U, 35, 64, (int )mcr, 4, 0, 0, 100);
#line 405
  return (retval);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_get_msr(struct usb_device *dev , u8 *status , enum spcp8x5_type type ) 
{ 
  u8 *status_buffer ;
  int ret ;
  void *tmp ;
  unsigned int tmp___0 ;

  {
#line 418
  if ((unsigned int )type == 0U) {
#line 419
    return (-1);
  } else {

  }
#line 420
  if ((unsigned long )status == (unsigned long )((u8 *)0)) {
#line 421
    return (-22);
  } else {

  }
#line 423
  tmp = kmalloc(1UL, 208U);
#line 423
  status_buffer = (u8 *)tmp;
#line 424
  if ((unsigned long )status_buffer == (unsigned long )((u8 *)0)) {
#line 425
    return (-12);
  } else {

  }
#line 426
  *status_buffer = *status;
#line 428
  tmp___0 = __create_pipe(dev, 0U);
#line 428
  ret = usb_control_msg(dev, tmp___0 | 2147483776U, 34, 192, 0, 6, (void *)status_buffer,
                        1, 100);
#line 436
  *status = *status_buffer;
#line 437
  kfree((void const   *)status_buffer);
#line 439
  return (ret);
}
}
#line 444 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_workMode(struct usb_device *dev , u16 value , u16 index ,
                                 enum spcp8x5_type type ) 
{ 
  int ret ;
  unsigned int tmp ;

  {
#line 451
  if ((unsigned int )type == 0U) {
#line 452
    return;
  } else {

  }
#line 454
  tmp = __create_pipe(dev, 0U);
#line 454
  ret = usb_control_msg(dev, tmp | 2147483648U, 36, 64, (int )value, (int )index,
                        0, 0, 100);
#line 461
  return;
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_close(struct usb_serial_port *port , struct file *filp ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int c_cflag ;
  int bps ;
  long timeout ;
  wait_queue_t wait ;
  int result ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  unsigned int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  speed_t tmp___6 ;
  int _x ;
  int _y ;
  struct task_struct *tmp___7 ;

  {
#line 467
  tmp = usb_get_serial_port_data(port);
#line 467
  priv = (struct spcp8x5_private *)tmp;
#line 475
  if (debug != 0) {
#line 475
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_close", (int )port->number);
  } else {

  }
#line 478
  ldv_spin_lock();
#line 479
  timeout = 7500L;
#line 480
  tmp___0 = get_current();
#line 480
  init_waitqueue_entry(& wait, tmp___0);
#line 481
  add_wait_queue(& (port->tty)->write_wait, & wait);
  ldv_17203: 
#line 483
  tmp___1 = get_current();
#line 483
  __xchg(1UL, (void volatile   *)(& tmp___1->state), 8);
#line 484
  tmp___2 = ringbuf_avail_data(priv->buf);
#line 484
  if (tmp___2 == 0U || timeout == 0L) {
#line 486
    goto ldv_17202;
  } else {
#line 484
    tmp___3 = get_current();
#line 484
    tmp___4 = signal_pending(tmp___3);
#line 484
    if (tmp___4 != 0) {
#line 486
      goto ldv_17202;
    } else {

    }
  }
#line 487
  ldv_spin_unlock();
#line 488
  timeout = schedule_timeout(timeout);
#line 489
  ldv_spin_lock();
#line 490
  goto ldv_17203;
  ldv_17202: 
#line 491
  tmp___5 = get_current();
#line 491
  __xchg(0UL, (void volatile   *)(& tmp___5->state), 8);
#line 492
  remove_wait_queue(& (port->tty)->write_wait, & wait);
#line 495
  clear_ringbuf(priv->buf);
#line 496
  ldv_spin_unlock();
#line 503
  tmp___6 = tty_get_baud_rate(port->tty);
#line 503
  bps = (int )tmp___6;
#line 504
  if (bps > 1200) {
#line 505
    _x = 640000 / bps;
#line 505
    _y = 25;
#line 505
    timeout = (long )(_x > _y ? _x : _y);
  } else {
#line 507
    timeout = 500L;
  }
#line 508
  tmp___7 = get_current();
#line 508
  __xchg(1UL, (void volatile   *)(& tmp___7->state), 8);
#line 509
  schedule_timeout(timeout);
#line 512
  if ((unsigned long )port->tty != (unsigned long )((struct tty_struct *)0)) {
#line 513
    c_cflag = ((port->tty)->termios)->c_cflag;
#line 514
    if ((c_cflag & 1024U) != 0U) {
#line 515
      ldv_spin_lock();
#line 516
      priv->line_control = 0U;
#line 517
      ldv_spin_unlock();
#line 518
      spcp8x5_set_ctrlLine((port->serial)->dev, 0, priv->type);
    } else {

    }
  } else {

  }
#line 523
  if ((unsigned long )port->write_urb != (unsigned long )((struct urb *)0)) {
#line 524
    result = usb_unlink_urb(port->write_urb);
  } else {

  }
#line 529
  result = usb_unlink_urb(port->read_urb);
#line 533
  return;
}
}
#line 536 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_set_termios(struct usb_serial_port *port , struct ktermios *old_termios ) 
{ 
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned short uartdata ;
  unsigned char buf[2U] ;
  int baud ;
  int i ;
  u8 control ;
  int tmp___0 ;
  speed_t tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 539
  serial = port->serial;
#line 540
  tmp = usb_get_serial_port_data(port);
#line 540
  priv = (struct spcp8x5_private *)tmp;
#line 542
  cflag = ((port->tty)->termios)->c_cflag;
#line 543
  old_cflag = old_termios->c_cflag;
#line 545
  buf[0] = 0U;
#line 545
  buf[1] = 0U;
#line 550
  if ((unsigned long )port->tty == (unsigned long )((struct tty_struct *)0) || (unsigned long )(port->tty)->termios == (unsigned long )((struct ktermios *)0)) {
#line 551
    return;
  } else {

  }
#line 554
  ldv_spin_lock();
#line 555
  if ((unsigned int )priv->termios_initialized == 0U) {
#line 556
    *((port->tty)->termios) = tty_std_termios;
#line 557
    ((port->tty)->termios)->c_cflag = 7346U;
#line 559
    priv->termios_initialized = 1U;
  } else {

  }
#line 561
  ldv_spin_unlock();
#line 564
  tmp___0 = tty_termios_hw_change((port->tty)->termios, old_termios);
#line 564
  if (tmp___0 == 0) {
#line 565
    return;
  } else {

  }
#line 568
  ldv_spin_lock();
#line 569
  control = priv->line_control;
#line 570
  if ((old_cflag & 4111U) == 0U) {
#line 571
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
#line 572
    if ((int )old_cflag >= 0) {
#line 573
      priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
    } else {

    }
  } else {

  }
#line 575
  if ((int )priv->line_control != (int )control) {
#line 576
    control = priv->line_control;
#line 577
    ldv_spin_unlock();
#line 578
    spcp8x5_set_ctrlLine(serial->dev, (int )control, priv->type);
  } else {
#line 580
    ldv_spin_unlock();
  }
#line 584
  tmp___1 = tty_get_baud_rate(port->tty);
#line 584
  baud = (int )tmp___1;
#line 585
  switch (baud) {
  case 300: 
#line 586
  buf[0] = 0U;
#line 586
  goto ldv_17224;
  case 600: 
#line 587
  buf[0] = 1U;
#line 587
  goto ldv_17224;
  case 1200: 
#line 588
  buf[0] = 2U;
#line 588
  goto ldv_17224;
  case 2400: 
#line 589
  buf[0] = 3U;
#line 589
  goto ldv_17224;
  case 4800: 
#line 590
  buf[0] = 4U;
#line 590
  goto ldv_17224;
  case 9600: 
#line 591
  buf[0] = 5U;
#line 591
  goto ldv_17224;
  case 19200: 
#line 592
  buf[0] = 7U;
#line 592
  goto ldv_17224;
  case 38400: 
#line 593
  buf[0] = 9U;
#line 593
  goto ldv_17224;
  case 57600: 
#line 594
  buf[0] = 10U;
#line 594
  goto ldv_17224;
  case 115200: 
#line 595
  buf[0] = 11U;
#line 595
  goto ldv_17224;
  case 230400: 
#line 596
  buf[0] = 12U;
#line 596
  goto ldv_17224;
  case 460800: 
#line 597
  buf[0] = 13U;
#line 597
  goto ldv_17224;
  case 921600: 
#line 598
  buf[0] = 14U;
#line 598
  goto ldv_17224;
  case 3000000: 
#line 601
  buf[0] = 17U;
#line 601
  goto ldv_17224;
  case 0: ;
  case 1000000: 
#line 605
  buf[0] = 11U;
#line 605
  goto ldv_17224;
  default: 
#line 607
  printk("<3>spcp8x5: spcp825 driver does not support the baudrate requested, using default of 9600.\n");
  }
  ldv_17224: ;
#line 612
  if ((cflag & 48U) != 0U) {
#line 613
    switch (cflag & 48U) {
    case 0U: 
#line 615
    buf[1] = buf[1];
#line 616
    goto ldv_17242;
    case 16U: 
#line 618
    buf[1] = (unsigned int )buf[1] | 1U;
#line 619
    goto ldv_17242;
    case 32U: 
#line 621
    buf[1] = (unsigned int )buf[1] | 2U;
#line 622
    goto ldv_17242;
    default: ;
    case 48U: 
#line 625
    buf[1] = (unsigned int )buf[1] | 3U;
#line 626
    goto ldv_17242;
    }
    ldv_17242: ;
  } else {

  }
#line 631
  buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 64U) != 0U ? 4 : 0));
#line 635
  if ((cflag & 256U) != 0U) {
#line 636
    buf[1] = (unsigned char )((int )((signed char )buf[1]) | ((cflag & 512U) != 0U ? 16 : 48));
  } else {
#line 639
    buf[1] = buf[1];
  }
#line 641
  uartdata = (unsigned short )((int )((short )buf[0]) | (int )((short )((int )buf[1] << 8)));
#line 643
  tmp___2 = __create_pipe(serial->dev, 0U);
#line 643
  i = usb_control_msg(serial->dev, tmp___2 | 2147483648U, 33, 64, (int )uartdata,
                      0, 0, 0, 100);
#line 646
  if (i < 0) {
#line 647
    printk("<3>spcp8x5: Set UART format %#x failed (error = %d)\n", (int )uartdata,
           i);
  } else {

  }
#line 648
  if (debug != 0) {
#line 648
    printk("<7>%s: 0x21:0x40:0:0  %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           i);
  } else {

  }
#line 650
  if ((int )cflag < 0) {
#line 652
    spcp8x5_set_workMode(serial->dev, 10, 0, priv->type);
  } else {

  }
#line 655
  return;
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_open(struct usb_serial_port *port , struct file *filp ) 
{ 
  struct ktermios tmp_termios ;
  struct usb_serial *serial ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int ret ;
  u8 status ;
  unsigned int tmp___0 ;

  {
#line 663
  serial = port->serial;
#line 664
  tmp = usb_get_serial_port_data(port);
#line 664
  priv = (struct spcp8x5_private *)tmp;
#line 667
  status = 48U;
#line 670
  if (debug != 0) {
#line 670
    printk("<7>%s: %s -  port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open", (int )port->number);
  } else {

  }
#line 672
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 673
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 675
  tmp___0 = __create_pipe(serial->dev, 0U);
#line 675
  ret = usb_control_msg(serial->dev, tmp___0 | 2147483648U, 9, 0, 1, 0, 0, 0, 100);
#line 678
  if (ret != 0) {
#line 679
    return (ret);
  } else {

  }
#line 681
  ldv_spin_lock();
#line 682
  if ((((port->tty)->termios)->c_cflag & 4111U) != 0U) {
#line 683
    priv->line_control = 3U;
  } else {
#line 685
    priv->line_control = 0U;
  }
#line 686
  ldv_spin_unlock();
#line 688
  spcp8x5_set_ctrlLine(serial->dev, (int )priv->line_control, priv->type);
#line 691
  if ((unsigned long )port->tty != (unsigned long )((struct tty_struct *)0)) {
#line 692
    spcp8x5_set_termios(port, & tmp_termios);
  } else {

  }
#line 694
  spcp8x5_get_msr(serial->dev, & status, priv->type);
#line 697
  ldv_spin_lock();
#line 698
  priv->line_status = (unsigned int )status & 240U;
#line 699
  ldv_spin_unlock();
#line 703
  if (debug != 0) {
#line 703
    printk("<7>%s: %s - submitting read urb\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_open");
  } else {

  }
#line 704
  (port->read_urb)->dev = serial->dev;
#line 705
  ret = ldv_usb_submit_urb_10(port->read_urb, 208U);
#line 706
  if (ret != 0) {
#line 707
    spcp8x5_close(port, 0);
#line 708
    return (-71);
  } else {

  }
#line 710
  return (0);
}
}
#line 717 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_read_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  struct tty_struct *tty ;
  unsigned char *data ;
  int i ;
  int result ;
  u8 status ;
  char tty_flag ;

  {
#line 719
  port = (struct usb_serial_port *)urb->context;
#line 720
  tmp = usb_get_serial_port_data(port);
#line 720
  priv = (struct spcp8x5_private *)tmp;
#line 722
  data = (unsigned char *)urb->transfer_buffer;
#line 726
  status = 0U;
#line 733
  if (urb->status != 0) {
#line 734
    if (port->open_count == 0) {
#line 735
      return;
    } else {

    }
#line 736
    if (urb->status == -71) {
#line 739
      urb->status = 0;
#line 740
      urb->dev = (port->serial)->dev;
#line 741
      result = ldv_usb_submit_urb_11(urb, 32U);
#line 746
      return;
    } else {

    }
#line 749
    return;
  } else {

  }
#line 753
  tty_flag = 0;
#line 755
  ldv_spin_lock();
#line 756
  status = priv->line_status;
#line 757
  priv->line_status = (unsigned int )priv->line_status & 139U;
#line 758
  ldv_spin_unlock();
#line 760
  __wake_up(& priv->delta_msr_wait, 1U, 1, 0);
#line 764
  if (((int )status & 4) != 0) {
#line 765
    tty_flag = 1;
  } else
#line 766
  if (((int )status & 32) != 0) {
#line 767
    tty_flag = 3;
  } else
#line 768
  if (((int )status & 16) != 0) {
#line 769
    tty_flag = 2;
  } else {

  }
#line 772
  tty = port->tty;
#line 773
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && urb->actual_length != 0) {
#line 774
    tty_buffer_request_room(tty, (size_t )(urb->actual_length + 1));
#line 776
    if (((int )status & 64) != 0) {
#line 777
      tty_insert_flip_char(tty, 0, 4);
    } else {

    }
#line 778
    i = 0;
#line 778
    goto ldv_17275;
    ldv_17274: 
#line 779
    tty_insert_flip_char(tty, (int )*(data + (unsigned long )i), (int )tty_flag);
#line 778
    i = i + 1;
    ldv_17275: ;
#line 778
    if (urb->actual_length > i) {
#line 779
      goto ldv_17274;
    } else {

    }
#line 780
    tty_flip_buffer_push(tty);
  } else {

  }
#line 784
  if (port->open_count != 0) {
#line 785
    urb->dev = (port->serial)->dev;
#line 786
    result = ldv_usb_submit_urb_12(urb, 32U);
  } else {

  }
#line 792
  return;
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_send(struct usb_serial_port *port ) 
{ 
  int count ;
  int result ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int tmp___1 ;

  {
#line 799
  tmp = usb_get_serial_port_data(port);
#line 799
  priv = (struct spcp8x5_private *)tmp;
#line 802
  ldv_spin_lock();
#line 804
  if (priv->write_urb_in_use != 0) {
#line 806
    ldv_spin_unlock();
#line 807
    return;
  } else {

  }
#line 811
  memset((port->write_urb)->transfer_buffer, 0, (size_t )port->bulk_out_size);
#line 812
  tmp___1 = get_ringbuf(priv->buf, (char *)(port->write_urb)->transfer_buffer, (unsigned int )port->bulk_out_size);
#line 812
  count = (int )tmp___1;
#line 815
  if (count == 0) {
#line 816
    ldv_spin_unlock();
#line 817
    return;
  } else {

  }
#line 821
  priv->write_urb_in_use = 1;
#line 823
  ldv_spin_unlock();
#line 825
  (port->write_urb)->transfer_buffer_length = count;
#line 826
  (port->write_urb)->dev = (port->serial)->dev;
#line 828
  result = ldv_usb_submit_urb_13(port->write_urb, 32U);
#line 829
  if (result != 0) {
#line 832
    priv->write_urb_in_use = 0;
  } else {

  }
#line 837
  schedule_work(& port->work);
#line 838
  return;
}
}
#line 843 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_write_bulk_callback(struct urb *urb ) 
{ 
  struct usb_serial_port *port ;
  struct spcp8x5_private *priv ;
  void *tmp ;
  int result ;

  {
#line 845
  port = (struct usb_serial_port *)urb->context;
#line 846
  tmp = usb_get_serial_port_data(port);
#line 846
  priv = (struct spcp8x5_private *)tmp;
#line 849
  switch (urb->status) {
  case 0: ;
#line 852
  goto ldv_17294;
  case -104: ;
  case -2: ;
  case -108: 
#line 859
  priv->write_urb_in_use = 0;
#line 860
  return;
  default: ;
#line 863
  if (debug != 0) {
#line 863
    printk("<7>%s: %s - Overflow in write\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback");
  } else {

  }
#line 864
  if (debug != 0) {
#line 864
    printk("<7>%s: %s - nonzero write bulk status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_write_bulk_callback", urb->status);
  } else {

  }
#line 866
  (port->write_urb)->transfer_buffer_length = 1;
#line 867
  (port->write_urb)->dev = (port->serial)->dev;
#line 868
  result = ldv_usb_submit_urb_14(port->write_urb, 32U);
#line 869
  if (result != 0) {

  } else {
#line 873
    return;
  }
  }
  ldv_17294: 
#line 876
  priv->write_urb_in_use = 0;
#line 879
  spcp8x5_send(port);
#line 880
  return;
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write(struct usb_serial_port *port , unsigned char const   *buf ,
                         int count ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int tmp___1 ;

  {
#line 886
  tmp = usb_get_serial_port_data(port);
#line 886
  priv = (struct spcp8x5_private *)tmp;
#line 891
  if (count == 0) {
#line 892
    return (count);
  } else {

  }
#line 894
  ldv_spin_lock();
#line 895
  tmp___1 = put_ringbuf(priv->buf, (char const   *)buf, (unsigned int )count);
#line 895
  count = (int )tmp___1;
#line 896
  ldv_spin_unlock();
#line 898
  spcp8x5_send(port);
#line 900
  return (count);
}
}
#line 903 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_wait_modem_info(struct usb_serial_port *port , unsigned int arg ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int prevstatus ;
  unsigned int status ;
  unsigned int changed ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 906
  tmp = usb_get_serial_port_data(port);
#line 906
  priv = (struct spcp8x5_private *)tmp;
#line 912
  ldv_spin_lock();
#line 913
  prevstatus = (unsigned int )priv->line_status;
#line 914
  ldv_spin_unlock();
  ldv_17319: 
#line 918
  interruptible_sleep_on(& priv->delta_msr_wait);
#line 921
  tmp___0 = get_current();
#line 921
  tmp___1 = signal_pending(tmp___0);
#line 921
  if (tmp___1 != 0) {
#line 922
    return (-512);
  } else {

  }
#line 924
  ldv_spin_lock();
#line 925
  status = (unsigned int )priv->line_status;
#line 926
  ldv_spin_unlock();
#line 928
  changed = prevstatus ^ status;
#line 930
  if (((((arg & 128U) != 0U && (changed & 64U) != 0U) || ((arg & 256U) != 0U && (changed & 32U) != 0U)) || ((arg & 64U) != 0U && (changed & 128U) != 0U)) || ((arg & 32U) != 0U && (changed & 16U) != 0U)) {
#line 934
    return (0);
  } else {

  }
#line 936
  prevstatus = status;
#line 937
  goto ldv_17319;
#line 939
  return (0);
}
}
#line 942 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_ioctl(struct usb_serial_port *port , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  int tmp ;

  {
#line 945
  if (debug != 0) {
#line 945
    printk("<7>%s: %s (%d) cmd = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number, cmd);
  } else {

  }
#line 947
  switch (cmd) {
  case 21596U: ;
#line 949
  if (debug != 0) {
#line 949
    printk("<7>%s: %s (%d) TIOCMIWAIT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", (int )port->number);
  } else {

  }
#line 950
  tmp = spcp8x5_wait_modem_info(port, (unsigned int )arg);
#line 950
  return (tmp);
  default: ;
#line 953
  if (debug != 0) {
#line 953
    printk("<7>%s: %s not supported = 0x%04x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared",
           "spcp8x5_ioctl", cmd);
  } else {

  }
#line 954
  goto ldv_17329;
  }
  ldv_17329: ;
#line 957
  return (-515);
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmset(struct usb_serial_port *port , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  u8 control ;
  int tmp___0 ;

  {
#line 963
  tmp = usb_get_serial_port_data(port);
#line 963
  priv = (struct spcp8x5_private *)tmp;
#line 967
  ldv_spin_lock();
#line 968
  if ((set & 4U) != 0U) {
#line 969
    priv->line_control = (u8 )((unsigned int )priv->line_control | 2U);
  } else {

  }
#line 970
  if ((set & 2U) != 0U) {
#line 971
    priv->line_control = (u8 )((unsigned int )priv->line_control | 1U);
  } else {

  }
#line 972
  if ((clear & 4U) != 0U) {
#line 973
    priv->line_control = (unsigned int )priv->line_control & 253U;
  } else {

  }
#line 974
  if ((clear & 2U) != 0U) {
#line 975
    priv->line_control = (unsigned int )priv->line_control & 254U;
  } else {

  }
#line 976
  control = priv->line_control;
#line 977
  ldv_spin_unlock();
#line 979
  tmp___0 = spcp8x5_set_ctrlLine((port->serial)->dev, (int )control, priv->type);
#line 979
  return (tmp___0);
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_tiocmget(struct usb_serial_port *port , struct file *file ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  unsigned int mcr ;
  unsigned int status ;
  unsigned int result ;

  {
#line 984
  tmp = usb_get_serial_port_data(port);
#line 984
  priv = (struct spcp8x5_private *)tmp;
#line 990
  ldv_spin_lock();
#line 991
  mcr = (unsigned int )priv->line_control;
#line 992
  status = (unsigned int )priv->line_status;
#line 993
  ldv_spin_unlock();
#line 995
  result = (unsigned int )(((((((int )mcr & 1 ? 2 : 0) | ((mcr & 2U) != 0U ? 4 : 0)) | ((status & 16U) != 0U ? 32 : 0)) | ((status & 32U) != 0U ? 256 : 0)) | ((status & 64U) != 0U ? 128 : 0)) | ((status & 128U) != 0U ? 64 : 0));
#line 1002
  return ((int )result);
}
}
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_write_room(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  int room ;
  unsigned int tmp___0 ;

  {
#line 1008
  tmp = usb_get_serial_port_data(port);
#line 1008
  priv = (struct spcp8x5_private *)tmp;
#line 1009
  room = 0;
#line 1012
  ldv_spin_lock();
#line 1013
  tmp___0 = ringbuf_avail_space(priv->buf);
#line 1013
  room = (int )tmp___0;
#line 1014
  ldv_spin_unlock();
#line 1016
  return (room);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_chars_in_buffer(struct usb_serial_port *port ) 
{ 
  struct spcp8x5_private *priv ;
  void *tmp ;
  int chars ;
  unsigned int tmp___0 ;

  {
#line 1022
  tmp = usb_get_serial_port_data(port);
#line 1022
  priv = (struct spcp8x5_private *)tmp;
#line 1023
  chars = 0;
#line 1026
  ldv_spin_lock();
#line 1027
  tmp___0 = ringbuf_avail_data(priv->buf);
#line 1027
  chars = (int )tmp___0;
#line 1028
  ldv_spin_unlock();
#line 1030
  return (chars);
}
}
#line 1034 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static struct usb_serial_driver spcp8x5_device  = 
#line 1034
     {0, (struct usb_device_id  const  *)(& id_table), 99, (char)0, 1, 1, 1, {0, 0},
    {"SPCP8x5", 0, & __this_module, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {{{0U}, 0U, 0U, 0,
                                                                  {0, 0, 0, 0}}, {0,
                                                                                  0}},
    0, & spcp8x5_startup, 0, & spcp8x5_shutdown, 0, 0, 0, 0, & spcp8x5_open, & spcp8x5_close,
    & spcp8x5_write, & spcp8x5_write_room, & spcp8x5_ioctl, & spcp8x5_set_termios,
    0, & spcp8x5_chars_in_buffer, 0, 0, & spcp8x5_tiocmget, & spcp8x5_tiocmset, 0,
    0, & spcp8x5_read_bulk_callback, & spcp8x5_write_bulk_callback};
#line 1059 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static int spcp8x5_init(void) 
{ 
  int retval ;

  {
#line 1062
  retval = usb_serial_register(& spcp8x5_device);
#line 1063
  if (retval != 0) {
#line 1064
    goto failed_usb_serial_register;
  } else {

  }
#line 1065
  retval = usb_register(& spcp8x5_driver);
#line 1066
  if (retval != 0) {
#line 1067
    goto failed_usb_register;
  } else {

  }
#line 1068
  printk("<6>spcp8x5: SPCP8x5 USB to serial adaptor driver v0.04\n");
#line 1069
  return (0);
  failed_usb_register: 
#line 1071
  usb_serial_deregister(& spcp8x5_device);
  failed_usb_serial_register: ;
#line 1073
  return (retval);
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
static void spcp8x5_exit(void) 
{ 


  {
#line 1078
  usb_deregister(& spcp8x5_driver);
#line 1079
  usb_serial_deregister(& spcp8x5_device);
#line 1080
  return;
}
}
#line 1108
extern void ldv_check_final_state(void) ;
#line 1111
extern void ldv_check_return_value(int  ) ;
#line 1117
extern void ldv_initialize(void) ;
#line 1120
extern void ldv_handler_precall(void) ;
#line 1123
extern int nondet_int(void) ;
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1129 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct usb_serial_port *var_group1 ;
  struct file *var_group2 ;
  int res_spcp8x5_open_14 ;
  unsigned char const   *var_spcp8x5_write_18_p1 ;
  int var_spcp8x5_write_18_p2 ;
  struct ktermios *var_group3 ;
  unsigned int var_spcp8x5_ioctl_20_p2 ;
  unsigned long var_spcp8x5_ioctl_20_p3 ;
  unsigned int var_spcp8x5_tiocmset_21_p2 ;
  unsigned int var_spcp8x5_tiocmset_21_p3 ;
  struct urb *var_group4 ;
  struct usb_serial *var_group5 ;
  int ldv_s_spcp8x5_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2261
  ldv_s_spcp8x5_device_usb_serial_driver = 0;
#line 2168
  LDV_IN_INTERRUPT = 1;
#line 2177
  ldv_initialize();
#line 2258
  ldv_handler_precall();
#line 2259
  tmp = spcp8x5_init();
#line 2259
  if (tmp != 0) {
#line 2260
    goto ldv_final;
  } else {

  }
#line 2265
  goto ldv_17438;
  ldv_17437: 
#line 2269
  tmp___0 = nondet_int();
#line 2269
  switch (tmp___0) {
  case 0: ;
#line 2274
  if (ldv_s_spcp8x5_device_usb_serial_driver == 0) {
#line 2354
    ldv_handler_precall();
#line 2355
    res_spcp8x5_open_14 = spcp8x5_open(var_group1, var_group2);
#line 2356
    ldv_check_return_value(res_spcp8x5_open_14);
#line 2357
    if (res_spcp8x5_open_14 != 0) {
#line 2358
      goto ldv_module_exit;
    } else {

    }
#line 2359
    ldv_s_spcp8x5_device_usb_serial_driver = ldv_s_spcp8x5_device_usb_serial_driver + 1;
  } else {

  }
#line 2365
  goto ldv_17423;
  case 1: ;
#line 2369
  if (ldv_s_spcp8x5_device_usb_serial_driver == 1) {
#line 2449
    ldv_handler_precall();
#line 2450
    spcp8x5_close(var_group1, var_group2);
#line 2451
    ldv_s_spcp8x5_device_usb_serial_driver = 0;
  } else {

  }
#line 2457
  goto ldv_17423;
  case 2: 
#line 2541
  ldv_handler_precall();
#line 2542
  spcp8x5_write(var_group1, var_spcp8x5_write_18_p1, var_spcp8x5_write_18_p2);
#line 2549
  goto ldv_17423;
  case 3: 
#line 2633
  ldv_handler_precall();
#line 2634
  spcp8x5_set_termios(var_group1, var_group3);
#line 2641
  goto ldv_17423;
  case 4: 
#line 2725
  ldv_handler_precall();
#line 2726
  spcp8x5_ioctl(var_group1, var_group2, var_spcp8x5_ioctl_20_p2, var_spcp8x5_ioctl_20_p3);
#line 2733
  goto ldv_17423;
  case 5: 
#line 2817
  ldv_handler_precall();
#line 2818
  spcp8x5_tiocmget(var_group1, var_group2);
#line 2825
  goto ldv_17423;
  case 6: 
#line 2909
  ldv_handler_precall();
#line 2910
  spcp8x5_tiocmset(var_group1, var_group2, var_spcp8x5_tiocmset_21_p2, var_spcp8x5_tiocmset_21_p3);
#line 2917
  goto ldv_17423;
  case 7: 
#line 3001
  ldv_handler_precall();
#line 3002
  spcp8x5_write_room(var_group1);
#line 3009
  goto ldv_17423;
  case 8: 
#line 3093
  ldv_handler_precall();
#line 3094
  spcp8x5_read_bulk_callback(var_group4);
#line 3101
  goto ldv_17423;
  case 9: 
#line 3185
  ldv_handler_precall();
#line 3186
  spcp8x5_write_bulk_callback(var_group4);
#line 3193
  goto ldv_17423;
  case 10: 
#line 3277
  ldv_handler_precall();
#line 3278
  spcp8x5_chars_in_buffer(var_group1);
#line 3285
  goto ldv_17423;
  case 11: 
#line 3369
  ldv_handler_precall();
#line 3370
  spcp8x5_startup(var_group5);
#line 3377
  goto ldv_17423;
  case 12: 
#line 3461
  ldv_handler_precall();
#line 3462
  spcp8x5_shutdown(var_group5);
#line 3469
  goto ldv_17423;
  default: ;
#line 3470
  goto ldv_17423;
  }
  ldv_17423: ;
  ldv_17438: 
#line 2265
  tmp___1 = nondet_int();
#line 2265
  if (tmp___1 != 0 || ldv_s_spcp8x5_device_usb_serial_driver != 0) {
#line 2267
    goto ldv_17437;
  } else {

  }

  ldv_module_exit: 
#line 3557
  ldv_handler_precall();
#line 3558
  spcp8x5_exit();
  ldv_final: 
#line 3561
  ldv_check_final_state();
#line 3564
  return;
}
}
#line 3579 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 3585
  ldv_check_alloc_flags(ldv_func_arg1);
#line 3587
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 3587
  return (tmp);
}
}
#line 3590 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 3596
  ldv_check_alloc_flags(flags);
#line 3598
  ldv_kmalloc_3(size, flags);
#line 3599
  return ((void *)0);
}
}
#line 3601 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
void *ldv_kmem_cache_alloc_4(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 3607
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3609
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 3610
  return ((void *)0);
}
}
#line 3645 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
void *ldv_kmem_cache_alloc_8(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 3651
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3653
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 3654
  return ((void *)0);
}
}
#line 3656 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 3662
  ldv_check_alloc_flags(flags);
#line 3663
  return ((void *)0);
}
}
#line 3665 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int ldv_usb_submit_urb_10(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 3671
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3673
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 3673
  return (tmp);
}
}
#line 3676 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 3682
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3684
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 3684
  return (tmp);
}
}
#line 3687 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int ldv_usb_submit_urb_12(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 3693
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3695
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 3695
  return (tmp);
}
}
#line 3698 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int ldv_usb_submit_urb_13(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 3704
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3706
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 3706
  return (tmp);
}
}
#line 3709 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/spcp8x5.c.prepared"
int ldv_usb_submit_urb_14(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 3715
  ldv_check_alloc_flags(ldv_func_arg2);
#line 3717
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 3717
  return (tmp);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ( __attribute__((__always_inline__)) ldv_error)(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin  =    LDV_SPIN_UNLOCKED;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
#line 28
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 28
    ldv_error();
  }
#line 29
  return;
}
}
#line 31
extern struct page *ldv_some_page(void) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
#line 37
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 37
    ldv_error();
  }
#line 39
  tmp = ldv_some_page();
#line 39
  return (tmp);
}
}
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_nonatomic(void) 
{ 


  {
#line 46
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
#line 46
    ldv_error();
  }
#line 47
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_lock(void) 
{ 


  {
#line 53
  ldv_spin = LDV_SPIN_LOCKED;
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_unlock(void) 
{ 


  {
#line 60
  ldv_spin = LDV_SPIN_UNLOCKED;
#line 61
  return;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/spcp8x5.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin_trylock(void) 
{ 
  int is_lock ;

  {
#line 69
  is_lock = ldv_undef_int();
#line 71
  if (is_lock) {
#line 74
    return (0);
  } else {
#line 79
    ldv_spin = LDV_SPIN_LOCKED;
#line 81
    return (1);
  }
}
}
