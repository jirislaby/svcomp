/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_suseconds_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 207
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1202_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1202_8 ldv_1202 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 119 "include/linux/kernel.h"
struct completion;
#line 220
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2052_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2067_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2068_14 {
   struct __anonstruct_ldv_2052_15 ldv_2052 ;
   struct __anonstruct_ldv_2067_16 ldv_2067 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2068_14 ldv_2068 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_TYPE_NR = 19
} ;
#line 121
struct thread_struct;
#line 123
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4662_20 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4668_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4669_19 {
   struct __anonstruct_ldv_4662_20 ldv_4662 ;
   struct __anonstruct_ldv_4668_21 ldv_4668 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4678_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4669_19 ldv_4669 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4678_22 ldv_4678 ;
};
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426
struct ds_context;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5158_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5181_25 {
   struct __anonstruct_ldv_5158_26 ldv_5158 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5181_25 ldv_5181 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 46 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 131 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 174 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 543 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5734_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5735_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5734_32 ldv_5734 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5735_31 ldv_5735 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 18 "include/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 268 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 632 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 741 "include/linux/mmzone.h"
struct ctl_table;
#line 172 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 34 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 442
struct kobject;
#line 443 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 101 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 119
struct sysfs_dirent;
#line 176 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10604_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10604_110 ldv_10604 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 502 "include/linux/rcupdate.h"
struct tracepoint;
#line 503 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 230 "include/linux/percpu.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 182
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 188 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 374
struct module_sect_attrs;
#line 374
struct module_notes_attrs;
#line 374
struct ftrace_event_call;
#line 374 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 540
struct device_driver;
#line 74 "include/linux/connector.h"
struct hlist_nulls_node;
#line 74 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 37 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 38 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 52 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 141 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 155 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 122 "include/linux/if_ether.h"
struct prio_tree_node;
#line 122 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 164
struct address_space;
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_11992_123 {
   u16 inuse ;
   u16 objects ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_11993_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_11992_123 ldv_11992 ;
};
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_11998_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12001_124 {
   struct __anonstruct_ldv_11998_125 ldv_11998 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12005_126 {
   unsigned long index ;
   void *freelist ;
};
#line 165 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_11993_122 ldv_11993 ;
   union __anonunion_ldv_12001_124 ldv_12001 ;
   union __anonunion_ldv_12005_126 ldv_12005 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12744 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12744 socket_state;
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct pipe_inode_info;
#line 165
struct inode;
#line 166
struct net;
#line 183
struct fasync_struct;
#line 183
struct sock;
#line 183
struct proto_ops;
#line 183 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 148 "include/linux/net.h"
struct kiocb;
#line 149 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 982 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1024 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1032 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1066 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 300 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 327 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 388 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 397
struct dma_coherent_mem;
#line 397 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 19
struct rlimit;
#line 158 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 175 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 633
struct hrtimer_clock_base;
#line 634
struct hrtimer_cpu_base;
#line 643
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 648 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 442
struct net_device;
#line 443 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 247 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 248
struct sec_path;
#line 248 "include/linux/skbuff.h"
struct __anonstruct_ldv_18413_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18414_131 {
   __wsum csum ;
   struct __anonstruct_ldv_18413_132 ldv_18413 ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18442_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 248 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_dst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_18414_131 ldv_18414 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_18442_133 ldv_18442 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 414
struct dst_entry;
#line 424
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 564
struct dentry;
#line 221 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 305 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 327 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 334 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 340 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 375 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 408 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 418 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 435 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 461 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
};
#line 583
struct prot_inuse;
#line 584 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[77U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 73 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 314 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 314 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 200
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 207
struct pid_namespace;
#line 207 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 418 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 477 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 292 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 306 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 321 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 367 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 567 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 567 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 567 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 570 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619
struct backing_dev_info;
#line 620 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 641
struct hd_struct;
#line 641
struct gendisk;
#line 641 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_22008_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22008_152 ldv_22008 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 879 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 887 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 910 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 910 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1033
struct files_struct;
#line 1033 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1034 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1039 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1138 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1317
struct file_system_type;
#line 1317
struct super_operations;
#line 1317
struct xattr_handler;
#line 1317
struct mtd_info;
#line 1317 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1435 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1473
struct block_device_operations;
#line 1474 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1514 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1557 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2187
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 110 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 129 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 209
struct neighbour;
#line 210
struct neigh_parms;
#line 229 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 261 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 266 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 304 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 510
struct Qdisc;
#line 510 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 532 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 707
struct iw_handler_def;
#line 707
struct iw_public_data;
#line 707
struct net_bridge_port;
#line 707
struct macvlan_port;
#line 707
struct garp_port;
#line 707
struct rtnl_link_ops;
#line 707 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   struct netdev_hw_addr_list uc ;
   int uc_promisc ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
};
#line 1141
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2133 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 135
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_158 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_158 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_160 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_161 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_162 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_164 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_165 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_159 {
   int _pad[28U] ;
   struct __anonstruct__kill_160 _kill ;
   struct __anonstruct__timer_161 _timer ;
   struct __anonstruct__rt_162 _rt ;
   struct __anonstruct__sigchld_163 _sigchld ;
   struct __anonstruct__sigfault_164 _sigfault ;
   struct __anonstruct__sigpoll_165 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_159 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_168 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_168 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 100 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_27691_169 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_170 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_171 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_27691_169 ldv_27691 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_170 type_data ;
   union __anonunion_payload_171 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct bts_context;
#line 268
struct perf_event_context;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 365
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_172 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_172 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 406 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct tty_struct;
#line 516
struct taskstats;
#line 516
struct tty_audit_buf;
#line 516 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 661 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 703
struct reclaim_state;
#line 704 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 722 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 993
struct io_context;
#line 1016
struct rq;
#line 1017 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  , bool  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1074 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1079 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1150
struct rt_rq;
#line 1150 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1167
struct mem_cgroup;
#line 1167 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1508
struct css_set;
#line 1508
struct compat_robust_list_head;
#line 1508
struct ftrace_ret_stack;
#line 1508 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 103
struct request_sock;
#line 3181 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 777 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 348
struct dn_route;
#line 348 "include/net/neighbour.h"
union __anonunion_ldv_32075_177 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 348 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_32075_177 ldv_32075 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_178 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_178 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_32205_179 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32211_180 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32219_181 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_32205_179 ldv_32205 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_32211_180 ldv_32211 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_32219_181 ldv_32219 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_182 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
   int limit ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_182 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 642
struct request_sock_ops;
#line 643
struct timewait_sock_ops;
#line 644
struct inet_hashinfo;
#line 645
struct raw_hashinfo;
#line 646
struct udp_table;
#line 646 "include/net/sock.h"
union __anonunion_h_183 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 646 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_183 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 172 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 185 "include/linux/drbd.h"
struct __anonstruct_ldv_33296_184 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 185 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_33296_184 ldv_33296 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 258 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 267 "include/linux/crypto.h"
union __anonunion_cra_u_185 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 267 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_185 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 319 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 339 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 354 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 363 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 371 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 383 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 390 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 398 "include/linux/crypto.h"
union __anonunion_crt_u_186 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 398 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_186 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 427 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 431 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 435 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 447 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 451 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
   unsigned char sb_pinned : 1 ;
};
#line 78
struct bdi_writeback;
#line 37 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 44 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 60 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 30 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 513 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_36919_194 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_36919_194 ldv_36919 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 264 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 265 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 266 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 267 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 268 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 276 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 278 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 279 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 280 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 281 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 282
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 289 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 295 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 304 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 331 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1244 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1265 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1266 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1267 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1268 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1269 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1310 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   unsigned long long (*set_capacity)(struct gendisk * , unsigned long long  ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 126 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 480 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 49 "include/linux/route.h"
union __anonunion_u_200 {
   struct dst_entry dst ;
};
#line 49
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   union __anonunion_u_200 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 212 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1566 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 597 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 627
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 634 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 655
struct drbd_work;
#line 665 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 669
struct drbd_tl_epoch;
#line 700 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 708 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   u64 block_id ;
};
#line 804
struct drbd_bitmap;
#line 805 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 867 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   int dp_volume ;
   int dp_interval ;
   int throttle_th ;
   int hold_off_th ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 137 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 909 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 916
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct drbd_work delay_probe_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list delay_probe_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   struct list_head delay_probes ;
   int data_delay ;
   unsigned int delay_seq ;
   struct timeval dps_time ;
   unsigned int dp_volume_last ;
   int c_sync_rate ;
};
#line 1111
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 139 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 146
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1226 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 747 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 903 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 180 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 251
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 525
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 546 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe {
   struct p_header head ;
   u32 seq_num ;
   u32 offset ;
};
#line 552 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct delay_probe {
   struct list_head list ;
   unsigned int seq_num ;
   struct timeval time ;
};
#line 733
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1119
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1432
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3311
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_202 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_202 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 144 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 177 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1950 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29488 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 35 "include/linux/kmod.h"
struct subprocess_info;
#line 60
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    AFTER_LAST_ERR_CODE = 154
} ;
#line 300 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 336 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 880 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 124 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 133 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_dp_volume = 71,
    T_dp_interval = 72,
    T_throttle_th = 73,
    T_hold_off_th = 74,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 105 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 1986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 9 "include/asm-generic/bitops/hweight.h"
extern unsigned long hweight64(__u64  ) ;
#line 42 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 44
  tmp = hweight64((__u64 )w);
#line 44
  return (tmp);
}
}
#line 202
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 212
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 137 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 251
extern int printk(char const   *  , ...) ;
#line 254
extern int __printk_ratelimit(char const   * ) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1905: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4329: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4329;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )v->counter);
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 218
  switch (8UL) {
  case 1UL: 
#line 218
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 2UL: 
#line 218
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 4UL: 
#line 218
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  case 8UL: 
#line 218
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5454;
  default: 
#line 218
  __bad_percpu_size();
  }
  ldv_5454: 
#line 218
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 220
  return (ti);
}
}
#line 542 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5735.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5735.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5735.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5735.rlock, flags);
#line 340
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 445
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 126
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 151
extern int mutex_trylock(struct mutex * ) ;
#line 152
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 104 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 152 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 154
  return (1);
}
}
#line 370 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 374
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 28 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13387: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13387;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 146 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[22U] ;
#line 152 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 154
  if (size == 0UL) {
#line 155
    return (0);
  } else {

  }
#line 157
  if (size <= 8UL) {
#line 158
    return (3);
  } else {

  }
#line 160
  if (size > 64UL && size <= 96UL) {
#line 161
    return (1);
  } else {

  }
#line 162
  if (size > 128UL && size <= 192UL) {
#line 163
    return (2);
  } else {

  }
#line 164
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 165
  if (size <= 16UL) {
#line 165
    return (4);
  } else {

  }
#line 166
  if (size <= 32UL) {
#line 166
    return (5);
  } else {

  }
#line 167
  if (size <= 64UL) {
#line 167
    return (6);
  } else {

  }
#line 168
  if (size <= 128UL) {
#line 168
    return (7);
  } else {

  }
#line 169
  if (size <= 256UL) {
#line 169
    return (8);
  } else {

  }
#line 170
  if (size <= 512UL) {
#line 170
    return (9);
  } else {

  }
#line 171
  if (size <= 1024UL) {
#line 171
    return (10);
  } else {

  }
#line 172
  if (size <= 2048UL) {
#line 172
    return (11);
  } else {

  }
#line 173
  if (size <= 4096UL) {
#line 173
    return (12);
  } else {

  }
#line 178
  if (size <= 8192UL) {
#line 178
    return (13);
  } else {

  }
#line 179
  if (size <= 16384UL) {
#line 179
    return (14);
  } else {

  }
#line 180
  if (size <= 32768UL) {
#line 180
    return (15);
  } else {

  }
#line 181
  if (size <= 65536UL) {
#line 181
    return (16);
  } else {

  }
#line 182
  if (size <= 131072UL) {
#line 182
    return (17);
  } else {

  }
#line 183
  if (size <= 262144UL) {
#line 183
    return (18);
  } else {

  }
#line 184
  if (size <= 524288UL) {
#line 184
    return (19);
  } else {

  }
#line 185
  if (size <= 1048576UL) {
#line 185
    return (20);
  } else {

  }
#line 186
  if (size <= 2097152UL) {
#line 186
    return (21);
  } else {

  }
#line 187
  return (-1);
}
}
#line 204 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 206
  tmp = kmalloc_index(size);
#line 206
  index = tmp;
#line 208
  if (index == 0) {
#line 209
    return (0);
  } else {

  }
#line 211
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 215
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 218
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 452 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 454
  tmp = kobject_name(& dev->kobj);
#line 454
  return (tmp);
}
}
#line 626
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 593 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 595
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2189 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2349
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 68 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 70
  pagefault_disable();
#line 71
  tmp = lowmem_page_address(page);
#line 71
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 841 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 843
  return ((bdev->bd_disk)->queue);
}
}
#line 1012
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1138
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1360
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1361
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1362
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1363
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1364
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1365
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1367
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1370
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1372
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1373
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1374
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1375
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1376
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1377
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1379
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1380
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1381
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1382
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1384
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1385
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1386
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1389
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1392
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1395
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1396
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1398
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1413
rwlock_t global_state_lock ;
#line 1430
char *ppsize(char *buf , unsigned long long size ) ;
#line 1449
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1693 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1699
  _raw_read_lock(& global_state_lock);
#line 1700
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1701
  _raw_read_unlock(& global_state_lock);
#line 1703
  return (rv);
}
}
#line 1724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1726
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1728
  if (forcedetach == 0) {
#line 1729
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1729
    if (tmp___1 != 0) {
#line 1730
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1732
    goto ldv_41594;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1737
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1738
    __ns.i = mdev->state.i;
#line 1738
    __ns.ldv_33296.disk = 2U;
#line 1738
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1739
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1742
  goto ldv_41594;
  }
  ldv_41594: ;
#line 1745
  return;
}
}
#line 1755 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1758
  if (error != 0) {
#line 1760
    tmp = spinlock_check(& mdev->req_lock);
#line 1760
    flags = _raw_spin_lock_irqsave(tmp);
#line 1761
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1762
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1764
  return;
}
}
#line 1790 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1792
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1795
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1798
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2060 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 2063
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 2063
  if (tmp != 0) {
#line 2064
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2065
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 2065
  if (tmp___2 < 0) {
#line 2065
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2065
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2065
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2065);
  } else {

  }
#line 2066
  return;
}
}
#line 2069 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2073
  atomic_inc(& mdev->local_cnt);
#line 2074
  io_allowed = (unsigned int )mdev->state.ldv_33296.disk >= (unsigned int )mins;
#line 2075
  if (io_allowed == 0) {
#line 2076
    put_ldev(mdev);
  } else {

  }
#line 2077
  return (io_allowed);
}
}
#line 2318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2320
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2321
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2322
  return;
}
}
#line 2332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2336
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp != 0) {
#line 2337
    return;
  } else {

  }
#line 2339
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2341
  if (r != 0) {
#line 2342
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2343
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2343
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2343
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2345
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 99
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 99
  return (tmp);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 105
  b = mdev->bitmap;
#line 106
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 106
  if (tmp == 0) {
#line 107
    return;
  } else {

  }
#line 108
  tmp___9 = get_current();
#line 108
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 108
    tmp___7 = get_current();
#line 108
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 108
      tmp___5 = get_current();
#line 108
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 108
        tmp___3 = get_current();
#line 108
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 108
        tmp___4 = (char *)"worker";
      }
#line 108
      tmp___6 = tmp___4;
    } else {
#line 108
      tmp___6 = (char *)"asender";
    }
#line 108
    tmp___8 = tmp___6;
  } else {
#line 108
    tmp___8 = (char *)"receiver";
  }
#line 108
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 108
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 108
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 109
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char *tmp___10 ;
  struct task_struct *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 120
  b = mdev->bitmap;
#line 123
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 124
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 125
    return;
  } else {

  }
#line 128
  tmp___1 = mutex_trylock(& b->bm_change);
#line 128
  trylock_failed = tmp___1 == 0;
#line 130
  if (trylock_failed != 0) {
#line 131
    tmp___11 = get_current();
#line 131
    if ((unsigned long )tmp___11 != (unsigned long )mdev->receiver.task) {
#line 131
      tmp___9 = get_current();
#line 131
      if ((unsigned long )tmp___9 != (unsigned long )mdev->asender.task) {
#line 131
        tmp___7 = get_current();
#line 131
        if ((unsigned long )tmp___7 != (unsigned long )mdev->worker.task) {
#line 131
          tmp___5 = get_current();
#line 131
          tmp___6 = (char *)(& tmp___5->comm);
        } else {
#line 131
          tmp___6 = (char *)"worker";
        }
#line 131
        tmp___8 = tmp___6;
      } else {
#line 131
        tmp___8 = (char *)"asender";
      }
#line 131
      tmp___10 = tmp___8;
    } else {
#line 131
      tmp___10 = (char *)"receiver";
    }
#line 131
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___13, tmp___12, tmp___10, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 139
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 141
  tmp___16 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 141
  if (tmp___16 != 0) {
#line 142
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 142
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 142
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___15, tmp___14);
  } else {

  }
#line 144
  b->bm_why = why;
#line 145
  b->bm_task = get_current();
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 150
  b = mdev->bitmap;
#line 151
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 152
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 152
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 152
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 153
    return;
  } else {

  }
#line 156
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 156
  if (tmp___3 == 0) {
#line 157
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 157
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 157
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 159
  b->bm_why = 0;
#line 160
  b->bm_task = 0;
#line 161
  mutex_unlock(& b->bm_change);
#line 162
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 171
  page_nr = offset >> 9;
#line 172
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 172
  if (tmp != 0L) {
#line 172
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (172), "i" (12UL));
    ldv_41871: ;
#line 172
    goto ldv_41871;
  } else {

  }
#line 173
  page = *(b->bm_pages + page_nr);
#line 175
  tmp___0 = kmap_atomic(page, km);
#line 175
  return ((unsigned long *)tmp___0);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 180
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 180
  return (tmp);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 185
  pagefault_enable();
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 190
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 215
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 216
    return;
  } else {

  }
#line 218
  i = 0UL;
#line 218
  goto ldv_41890;
  ldv_41889: ;
#line 219
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 220
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 223
    goto ldv_41888;
  } else {

  }
#line 225
  __free_pages(*(pages + i), 0U);
#line 226
  *(pages + i) = 0;
  ldv_41888: 
#line 218
  i = i + 1UL;
  ldv_41890: ;
#line 218
  if (i < number) {
#line 219
    goto ldv_41889;
  } else {

  }

#line 223
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 232
  if (v != 0) {
#line 233
    vfree((void const   *)ptr);
  } else {
#line 235
    kfree((void const   *)ptr);
  }
#line 236
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 243
  old_pages = b->bm_pages;
#line 245
  vmalloced = 0U;
#line 246
  have = b->bm_number_of_pages;
#line 248
  tmp = __builtin_expect(have == 0UL, 0L);
#line 248
  if (tmp != 0L) {
#line 248
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 248
    if (tmp___0 != 0L) {
#line 248
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (248), "i" (12UL));
      ldv_41907: ;
#line 248
      goto ldv_41907;
    } else {

    }
  } else {

  }
#line 249
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 249
  if (tmp___1 != 0L) {
#line 249
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 249
    if (tmp___2 != 0L) {
#line 249
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (249), "i" (12UL));
      ldv_41908: ;
#line 249
      goto ldv_41908;
    } else {

    }
  } else {

  }
#line 251
  if (have == want) {
#line 252
    return (old_pages);
  } else {

  }
#line 259
  bytes = (unsigned int )want * 8U;
#line 260
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 260
  new_pages = (struct page **)tmp___3;
#line 261
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 262
    tmp___4 = vmalloc((unsigned long )bytes);
#line 262
    new_pages = (struct page **)tmp___4;
#line 263
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 264
      return (0);
    } else {

    }
#line 265
    vmalloced = 1U;
  } else {

  }
#line 268
  memset((void *)new_pages, 0, (size_t )bytes);
#line 269
  if (want >= have) {
#line 270
    i = 0U;
#line 270
    goto ldv_41910;
    ldv_41909: 
#line 271
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 270
    i = i + 1U;
    ldv_41910: ;
#line 270
    if ((unsigned long )i < have) {
#line 271
      goto ldv_41909;
    } else {

    }

#line 272
    goto ldv_41913;
    ldv_41912: 
#line 273
    page = alloc_pages(131282U, 0U);
#line 274
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 275
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 276
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 277
      return (0);
    } else {

    }
#line 279
    *(new_pages + (unsigned long )i) = page;
#line 272
    i = i + 1U;
    ldv_41913: ;
#line 272
    if ((unsigned long )i < want) {
#line 273
      goto ldv_41912;
    } else {

    }

  } else {
#line 282
    i = 0U;
#line 282
    goto ldv_41916;
    ldv_41915: 
#line 283
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 282
    i = i + 1U;
    ldv_41916: ;
#line 282
    if ((unsigned long )i < want) {
#line 283
      goto ldv_41915;
    } else {

    }

  }
#line 289
  if (vmalloced != 0U) {
#line 290
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 292
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 294
  return (new_pages);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 303
  b = mdev->bitmap;
#line 304
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 304
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 304
  if (tmp != 0L) {
#line 304
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       304);
  } else {

  }
#line 304
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 305
  tmp___0 = kzalloc(376UL, 208U);
#line 305
  b = (struct drbd_bitmap *)tmp___0;
#line 306
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 307
    return (-12);
  } else {

  }
#line 308
  spinlock_check(& b->bm_lock);
#line 308
  __raw_spin_lock_init(& b->bm_lock.ldv_5735.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 309
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 310
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 312
  mdev->bitmap = b;
#line 314
  return (0);
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 319
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 319
  if (_b != 0) {
#line 319
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 319
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 319
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           319);
  } else {

  }
#line 319
  if (_b != 0) {
#line 319
    return (0UL);
  } else {

  }
#line 320
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 327
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 327
  if (_b != 0) {
#line 327
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 327
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 327
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           327);
  } else {

  }
#line 327
  if (_b != 0) {
#line 327
    return;
  } else {

  }
#line 328
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 329
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 329
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 330
  kfree((void const   *)mdev->bitmap);
#line 331
  mdev->bitmap = 0;
#line 332
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 341
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 342
  w = b->bm_bits >> 6;
#line 343
  cleared = 0;
#line 346
  p_addr = bm_map_paddr(b, w);
#line 347
  bm = p_addr + (w & 511UL);
#line 348
  if (b->bm_words > w) {
#line 349
    tmp = hweight_long(*bm & ~ mask);
#line 349
    cleared = (int )tmp;
#line 350
    *bm = *bm & mask;
#line 351
    w = w + (size_t )1;
#line 351
    bm = bm + 1;
  } else {

  }
#line 354
  if (b->bm_words > w) {
#line 355
    tmp___0 = hweight_long(*bm);
#line 355
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 356
    *bm = 0UL;
  } else {

  }
#line 358
  bm_unmap(p_addr);
#line 359
  return (cleared);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 364
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 365
  w = b->bm_bits >> 6;
#line 368
  p_addr = bm_map_paddr(b, w);
#line 369
  bm = p_addr + (w & 511UL);
#line 370
  if (b->bm_words > w) {
#line 371
    *bm = *bm | ~ mask;
#line 372
    bm = bm + 1;
#line 372
    w = w + (size_t )1;
  } else {

  }
#line 375
  if (b->bm_words > w) {
#line 376
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 378
  bm_unmap(p_addr);
#line 379
  return;
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 383
  offset = 0UL;
#line 384
  bits = 0UL;
#line 387
  goto ldv_41972;
  ldv_41971: 
#line 388
  __min1 = b->bm_words - offset;
#line 388
  __min2 = 512UL;
#line 388
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 388
  i = do_now;
#line 389
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 390
  bm = p_addr + (offset & 511UL);
#line 391
  goto ldv_41968;
  ldv_41967: 
#line 396
  tmp = bm;
#line 396
  bm = bm + 1;
#line 396
  tmp___0 = hweight_long(*tmp);
#line 396
  bits = tmp___0 + bits;
  ldv_41968: 
#line 391
  tmp___1 = i;
#line 391
  i = i - 1UL;
#line 391
  if (tmp___1 != 0UL) {
#line 392
    goto ldv_41967;
  } else {

  }
#line 398
  __bm_unmap(p_addr, KM_USER0);
#line 399
  offset = offset + do_now;
#line 400
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                400, 0);
#line 400
  _cond_resched();
  ldv_41972: ;
#line 387
  if (b->bm_words > offset) {
#line 388
    goto ldv_41971;
  } else {

  }

#line 403
  return (bits);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 408
  tmp = __bm_count_bits(b, 0);
#line 408
  return (tmp);
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 413
  tmp = __bm_count_bits(b, 1);
#line 413
  return (tmp);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 424
  end = offset + len;
#line 426
  if (b->bm_words < end) {
#line 427
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 428
    return;
  } else {

  }
#line 431
  goto ldv_41995;
  ldv_41994: 
#line 432
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 432
  __min2 = end;
#line 432
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 433
  p_addr = bm_map_paddr(b, offset);
#line 434
  bm = p_addr + (offset & 511UL);
#line 435
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 436
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 438
    goto ldv_41993;
  } else {

  }
#line 440
  memset((void *)bm, c, do_now * 8UL);
#line 441
  bm_unmap(p_addr);
#line 442
  offset = offset + do_now;
  ldv_41995: ;
#line 431
  if (offset < end) {
#line 432
    goto ldv_41994;
  } else {

  }
  ldv_41993: ;
#line 436
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 456
  b = mdev->bitmap;
#line 459
  opages = 0;
#line 460
  err = 0;
#line 463
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 463
  if (_b != 0) {
#line 463
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           463);
  } else {

  }
#line 463
  if (_b != 0) {
#line 463
    return (-12);
  } else {

  }
#line 465
  drbd_bm_lock(mdev, (char *)"resize");
#line 467
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 470
  if (b->bm_dev_capacity == capacity) {
#line 471
    goto out;
  } else {

  }
#line 473
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 475
  if (capacity == 0UL) {
#line 476
    spin_lock_irq(& b->bm_lock);
#line 477
    opages = b->bm_pages;
#line 478
    onpages = b->bm_number_of_pages;
#line 479
    owords = b->bm_words;
#line 480
    b->bm_pages = 0;
#line 481
    tmp___6 = 0UL;
#line 481
    b->bm_dev_capacity = tmp___6;
#line 481
    tmp___5 = tmp___6;
#line 481
    b->bm_words = tmp___5;
#line 481
    tmp___4 = tmp___5;
#line 481
    b->bm_bits = tmp___4;
#line 481
    tmp___3 = tmp___4;
#line 481
    b->bm_set = tmp___3;
#line 481
    b->bm_number_of_pages = tmp___3;
#line 486
    spin_unlock_irq(& b->bm_lock);
#line 487
    bm_free_pages(opages, onpages);
#line 488
    bm_vk_free((void *)opages, opages_vmalloced);
#line 489
    goto out;
  } else {

  }
#line 491
  bits = (capacity + 7UL) >> 3;
#line 498
  words = (bits + 63UL) >> 6;
#line 500
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 500
  if (tmp___9 != 0) {
#line 501
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 501
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 501
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 501
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             501);
    } else {

    }
#line 502
    put_ldev(mdev);
  } else {

  }
#line 506
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 507
  have = b->bm_number_of_pages;
#line 508
  if (want == have) {
#line 509
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 509
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 509
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 509
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             509);
    } else {

    }
#line 510
    npages = b->bm_pages;
  } else {
#line 512
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 512
    if (tmp___12 != 0) {
#line 513
      npages = 0;
    } else {
#line 515
      npages = bm_realloc_pages(b, want);
    }
  }
#line 518
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 519
    err = -12;
#line 520
    goto out;
  } else {

  }
#line 523
  spin_lock_irq(& b->bm_lock);
#line 524
  opages = b->bm_pages;
#line 525
  owords = b->bm_words;
#line 526
  obits = b->bm_bits;
#line 528
  growing = bits > obits;
#line 529
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 530
    bm_set_surplus(b);
  } else {

  }
#line 532
  b->bm_pages = npages;
#line 533
  b->bm_number_of_pages = want;
#line 534
  b->bm_bits = bits;
#line 535
  b->bm_words = words;
#line 536
  b->bm_dev_capacity = capacity;
#line 538
  if (growing != 0) {
#line 539
    if (set_new_bits != 0) {
#line 540
      bm_memset(b, owords, 255, words - owords);
#line 541
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 543
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 547
  if (want < have) {
#line 549
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 552
  p_addr = bm_map_paddr(b, words);
#line 553
  bm = p_addr + (words & 511UL);
#line 554
  *bm = 2205418087UL;
#line 555
  bm_unmap(p_addr);
#line 557
  bm_clear_surplus(b);
#line 559
  spin_unlock_irq(& b->bm_lock);
#line 560
  if ((unsigned long )opages != (unsigned long )npages) {
#line 561
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 562
  if (growing == 0) {
#line 563
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 564
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 567
  drbd_bm_unlock(mdev);
#line 568
  return (err);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 581
  b = mdev->bitmap;
#line 585
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 585
  if (_b != 0) {
#line 585
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           585);
  } else {

  }
#line 585
  if (_b != 0) {
#line 585
    return (0UL);
  } else {

  }
#line 586
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 586
  if (_b___0 != 0) {
#line 586
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           586);
  } else {

  }
#line 586
  if (_b___0 != 0) {
#line 586
    return (0UL);
  } else {

  }
#line 588
  tmp___3 = spinlock_check(& b->bm_lock);
#line 588
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 589
  s = b->bm_set;
#line 590
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 592
  return (s);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 599
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 599
  if (tmp == 0) {
#line 600
    return (0UL);
  } else {

  }
#line 601
  s = _drbd_bm_total_weight(mdev);
#line 602
  put_ldev(mdev);
#line 603
  return (s);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 608
  b = mdev->bitmap;
#line 609
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 609
  if (_b != 0) {
#line 609
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           609);
  } else {

  }
#line 609
  if (_b != 0) {
#line 609
    return (0UL);
  } else {

  }
#line 610
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 610
  if (_b___0 != 0) {
#line 610
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           610);
  } else {

  }
#line 610
  if (_b___0 != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 612
  return (b->bm_words);
}
}
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 617
  b = mdev->bitmap;
#line 618
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 618
  if (_b != 0) {
#line 618
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           618);
  } else {

  }
#line 618
  if (_b != 0) {
#line 618
    return (0UL);
  } else {

  }
#line 620
  return (b->bm_bits);
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 631
  b = mdev->bitmap;
#line 636
  end = offset + number;
#line 638
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 638
  if (_b != 0) {
#line 638
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           638);
  } else {

  }
#line 638
  if (_b != 0) {
#line 638
    return;
  } else {

  }
#line 639
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 639
  if (_b___0 != 0) {
#line 639
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           639);
  } else {

  }
#line 639
  if (_b___0 != 0) {
#line 639
    return;
  } else {

  }
#line 640
  if (number == 0UL) {
#line 641
    return;
  } else {

  }
#line 642
  __ret_warn_on = b->bm_words <= offset;
#line 642
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 642
  if (tmp___3 != 0L) {
#line 642
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       642);
  } else {

  }
#line 642
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 643
  __ret_warn_on___0 = b->bm_words < end;
#line 643
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 643
  if (tmp___4 != 0L) {
#line 643
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       643);
  } else {

  }
#line 643
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 645
  spin_lock_irq(& b->bm_lock);
#line 646
  goto ldv_42083;
  ldv_42082: 
#line 647
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 647
  __min2 = end;
#line 647
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 648
  p_addr = bm_map_paddr(b, offset);
#line 649
  bm = p_addr + (offset & 511UL);
#line 650
  offset = offset + do_now;
#line 651
  goto ldv_42080;
  ldv_42079: 
#line 652
  bits = hweight_long(*bm);
#line 653
  tmp___5 = buffer;
#line 653
  buffer = buffer + 1;
#line 653
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 654
  tmp___6 = bm;
#line 654
  bm = bm + 1;
#line 654
  *tmp___6 = word;
#line 655
  tmp___7 = hweight_long(word);
#line 655
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_42080: 
#line 651
  tmp___8 = do_now;
#line 651
  do_now = do_now - (size_t )1;
#line 651
  if (tmp___8 != 0UL) {
#line 652
    goto ldv_42079;
  } else {

  }
#line 657
  bm_unmap(p_addr);
  ldv_42083: ;
#line 646
  if (offset < end) {
#line 647
    goto ldv_42082;
  } else {

  }

#line 664
  if (b->bm_words == end) {
#line 665
    tmp___9 = bm_clear_surplus(b);
#line 665
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 667
  spin_unlock_irq(& b->bm_lock);
#line 668
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 676
  b = mdev->bitmap;
#line 680
  end = offset + number;
#line 682
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 682
  if (_b != 0) {
#line 682
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 682
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 682
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           682);
  } else {

  }
#line 682
  if (_b != 0) {
#line 682
    return;
  } else {

  }
#line 683
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 683
  if (_b___0 != 0) {
#line 683
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           683);
  } else {

  }
#line 683
  if (_b___0 != 0) {
#line 683
    return;
  } else {

  }
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 689
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 689
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 689
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 694
    goto ldv_42108;
    ldv_42107: 
#line 695
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
    __min2 = end;
#line 695
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
    p_addr = bm_map_paddr(b, offset);
#line 697
    bm = p_addr + (offset & 511UL);
#line 698
    offset = offset + do_now;
#line 699
    goto ldv_42105;
    ldv_42104: 
#line 700
    tmp___5 = buffer;
#line 700
    buffer = buffer + 1;
#line 700
    tmp___6 = bm;
#line 700
    bm = bm + 1;
#line 700
    *tmp___5 = *tmp___6;
    ldv_42105: 
#line 699
    tmp___7 = do_now;
#line 699
    do_now = do_now - (size_t )1;
#line 699
    if (tmp___7 != 0UL) {
#line 700
      goto ldv_42104;
    } else {

    }
#line 701
    bm_unmap(p_addr);
    ldv_42108: ;
#line 694
    if (offset < end) {
#line 695
      goto ldv_42107;
    } else {

    }

  }
#line 704
  spin_unlock_irq(& b->bm_lock);
#line 705
  return;
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 710
  b = mdev->bitmap;
#line 711
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 711
  if (_b != 0) {
#line 711
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 711
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 711
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           711);
  } else {

  }
#line 711
  if (_b != 0) {
#line 711
    return;
  } else {

  }
#line 712
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 712
  if (_b___0 != 0) {
#line 712
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           712);
  } else {

  }
#line 712
  if (_b___0 != 0) {
#line 712
    return;
  } else {

  }
#line 714
  spin_lock_irq(& b->bm_lock);
#line 715
  bm_memset(b, 0UL, 255, b->bm_words);
#line 716
  bm_clear_surplus(b);
#line 717
  b->bm_set = b->bm_bits;
#line 718
  spin_unlock_irq(& b->bm_lock);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 724
  b = mdev->bitmap;
#line 725
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 725
  if (_b != 0) {
#line 725
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 725
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 725
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           725);
  } else {

  }
#line 725
  if (_b != 0) {
#line 725
    return;
  } else {

  }
#line 726
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 726
  if (_b___0 != 0) {
#line 726
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 726
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 726
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           726);
  } else {

  }
#line 726
  if (_b___0 != 0) {
#line 726
    return;
  } else {

  }
#line 728
  spin_lock_irq(& b->bm_lock);
#line 729
  bm_memset(b, 0UL, 0, b->bm_words);
#line 730
  b->bm_set = 0UL;
#line 731
  spin_unlock_irq(& b->bm_lock);
#line 732
  return;
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 736
  b = (struct drbd_bitmap *)bio->bi_private;
#line 737
  uptodate = (int )bio->bi_flags & 1;
#line 744
  if (error == 0 && uptodate == 0) {
#line 745
    error = -5;
  } else {

  }
#line 747
  if (error != 0) {
#line 750
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 752
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 752
  if (tmp != 0) {
#line 753
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 755
  bio_put(bio);
#line 756
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 761
  tmp = bio_alloc(208U, 1);
#line 761
  bio = tmp;
#line 763
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 765
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 769
  __min1 = 4096U;
#line 769
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 769
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 769
  len = __min1 < __min2 ? __min1 : __min2;
#line 772
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 773
  bio->bi_sector = on_disk_sector;
#line 774
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 775
  bio->bi_private = (void *)b;
#line 776
  bio->bi_end_io = & bm_async_io_complete;
#line 778
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 778
  if (tmp___1 != 0) {
#line 779
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 780
    bio_endio(bio, -5);
  } else {
#line 782
    submit_bio(rw, bio);
  }
#line 783
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 824
  b = mdev->bitmap;
#line 829
  err = 0;
#line 831
  tmp = bm_is_locked(b);
#line 831
  __ret_warn_on = tmp == 0;
#line 831
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 831
  if (tmp___0 != 0L) {
#line 831
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       831);
  } else {

  }
#line 831
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 835
  tmp___1 = drbd_bm_words(mdev);
#line 835
  bm_words = (int )tmp___1;
#line 836
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 842
  now = jiffies;
#line 843
  atomic_set(& b->bm_async_io, num_pages);
#line 844
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 847
  i = 0;
#line 847
  goto ldv_42160;
  ldv_42159: 
#line 848
  bm_page_io_async(mdev, b, i, rw);
#line 847
  i = i + 1;
  ldv_42160: ;
#line 847
  if (i < num_pages) {
#line 848
    goto ldv_42159;
  } else {

  }
#line 850
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 850
  drbd_blk_run_queue(tmp___2);
#line 851
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___3 == 0) {
#line 851
    goto ldv_42162;
  } else {

  }
#line 851
  tmp___4 = get_current();
#line 851
  __wait.flags = 0U;
#line 851
  __wait.private = (void *)tmp___4;
#line 851
  __wait.func = & autoremove_wake_function;
#line 851
  __wait.task_list.next = & __wait.task_list;
#line 851
  __wait.task_list.prev = & __wait.task_list;
  ldv_42165: 
#line 851
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 851
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___5 == 0) {
#line 851
    goto ldv_42164;
  } else {

  }
#line 851
  schedule();
#line 851
  goto ldv_42165;
  ldv_42164: 
#line 851
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_42162: 
#line 853
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 853
  if (tmp___8 != 0) {
#line 854
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 855
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 856
    err = -5;
  } else {

  }
#line 859
  now = jiffies;
#line 860
  if (rw == 1) {
#line 864
    drbd_md_flush(mdev);
  } else {
#line 867
    b->bm_set = bm_count_bits_swap_endian(b);
#line 868
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 868
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 868
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 871
  now = b->bm_set;
#line 873
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 873
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 873
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 873
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 876
  return (err);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 885
  tmp = bm_rw(mdev, 0);
#line 885
  return (tmp);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 894
  tmp = bm_rw(mdev, 1);
#line 894
  return (tmp);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 908
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 911
  err = 0;
#line 913
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 914
  tmp = drbd_bm_words(mdev);
#line 914
  bm_words = (int )tmp;
#line 915
  offset = (int )(enr << 6);
#line 916
  _min1 = 64;
#line 916
  _min2 = bm_words - offset;
#line 916
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 917
  if (num_words <= 63) {
#line 918
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 918
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 919
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 919
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 921
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 921
  if (tmp___4 == 0) {
#line 923
    err = -5;
#line 924
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 924
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 924
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 927
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 928
    i = 0;
#line 928
    goto ldv_42188;
    ldv_42187: 
#line 929
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 928
    i = i + 1;
    ldv_42188: ;
#line 928
    if (i <= 3) {
#line 929
      goto ldv_42187;
    } else {

    }

  } else {

  }
#line 931
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 932
  mutex_unlock(& mdev->md_io_mutex);
#line 933
  return (err);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 946
  b = mdev->bitmap;
#line 947
  i = 0xffffffffffffffffUL;
#line 951
  if (b->bm_bits < bm_fo) {
#line 952
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 954
    goto ldv_42204;
    ldv_42203: 
#line 956
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 957
    offset = bit_offset >> 6;
#line 958
    p_addr = __bm_map_paddr(b, offset, km);
#line 960
    if ((int )find_zero_bit != 0) {
#line 961
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 963
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 965
    __bm_unmap(p_addr, km);
#line 966
    if (i <= 32767UL) {
#line 967
      i = bit_offset + i;
#line 968
      if (b->bm_bits <= i) {
#line 969
        goto ldv_42201;
      } else {

      }
#line 970
      goto found;
    } else {

    }
#line 972
    bm_fo = bit_offset + 32768UL;
    ldv_42204: ;
#line 954
    if (b->bm_bits > bm_fo) {
#line 955
      goto ldv_42203;
    } else {

    }
    ldv_42201: 
#line 974
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 977
  return (i);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 983
  b = mdev->bitmap;
#line 984
  i = 0xffffffffffffffffUL;
#line 986
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 986
  if (_b != 0) {
#line 986
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 986
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 986
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           986);
  } else {

  }
#line 986
  if (_b != 0) {
#line 986
    return (i);
  } else {

  }
#line 987
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 987
  if (_b___0 != 0) {
#line 987
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 987
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 987
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           987);
  } else {

  }
#line 987
  if (_b___0 != 0) {
#line 987
    return (i);
  } else {

  }
#line 989
  spin_lock_irq(& b->bm_lock);
#line 990
  tmp___3 = bm_is_locked(b);
#line 990
  if (tmp___3 != 0) {
#line 991
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 993
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 995
  spin_unlock_irq(& b->bm_lock);
#line 996
  return (i);
}
}
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1001
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1001
  return (tmp);
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1017
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1017
  return (tmp);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1023
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1023
  return (tmp);
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1035
  b = mdev->bitmap;
#line 1036
  p_addr = 0;
#line 1038
  last_page_nr = 0xffffffffffffffffUL;
#line 1039
  c = 0;
#line 1041
  if (b->bm_bits <= e) {
#line 1042
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1042
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1042
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1044
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1046
  bitnr = s;
#line 1046
  goto ldv_42244;
  ldv_42243: 
#line 1047
  offset = bitnr >> 6;
#line 1048
  page_nr = offset >> 9;
#line 1049
  if (page_nr != last_page_nr) {
#line 1050
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1051
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1052
    p_addr = __bm_map_paddr(b, offset, km);
#line 1053
    last_page_nr = page_nr;
  } else {

  }
#line 1055
  if (val != 0) {
#line 1056
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1056
    c = (tmp___1 == 0) + c;
  } else {
#line 1058
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1058
    c = c - (tmp___2 != 0);
  }
#line 1046
  bitnr = bitnr + 1UL;
  ldv_42244: ;
#line 1046
  if (bitnr <= e) {
#line 1047
    goto ldv_42243;
  } else {

  }

#line 1060
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1061
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1062
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1063
  return (c);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 1074
  b = mdev->bitmap;
#line 1075
  c = 0;
#line 1077
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1077
  if (_b != 0) {
#line 1077
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1077);
  } else {

  }
#line 1077
  if (_b != 0) {
#line 1077
    return (1);
  } else {

  }
#line 1078
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1078
  if (_b___0 != 0) {
#line 1078
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1078
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1078
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1078);
  } else {

  }
#line 1078
  if (_b___0 != 0) {
#line 1078
    return (0);
  } else {

  }
#line 1080
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1080
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1081
  tmp___4 = bm_is_locked(b);
#line 1081
  if (tmp___4 != 0) {
#line 1082
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1084
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1086
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1087
  return (c);
}
}
#line 1091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1093
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1093
  return (tmp);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1099
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1099
  return (- tmp);
}
}
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1109
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1109
  paddr = (unsigned long *)tmp;
#line 1110
  i = first_word;
#line 1110
  goto ldv_42283;
  ldv_42282: 
#line 1111
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1111
  bits = (int )tmp___0;
#line 1112
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1113
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1110
  i = i + 1;
  ldv_42283: ;
#line 1110
  if (i < last_word) {
#line 1111
    goto ldv_42282;
  } else {

  }
#line 1115
  pagefault_enable();
#line 1116
  return;
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1132
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1133
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1140
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1142
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1143
    return;
  } else {

  }
#line 1149
  if (sl != 0UL) {
#line 1150
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1152
  first_page = (int )(sl >> 15);
#line 1153
  last_page = (int )(el >> 15);
#line 1157
  first_word = (int )(sl >> 6) & 511;
#line 1158
  last_word = 512;
#line 1161
  page_nr = first_page;
#line 1161
  goto ldv_42299;
  ldv_42298: 
#line 1162
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1163
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1163, 0);
#line 1163
  _cond_resched();
#line 1164
  first_word = 0;
#line 1161
  page_nr = page_nr + 1;
  ldv_42299: ;
#line 1161
  if (page_nr < last_page) {
#line 1162
    goto ldv_42298;
  } else {

  }
#line 1168
  last_word = (int )(el >> 6) & 511;
#line 1169
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1176
  if (el <= (unsigned long )e) {
#line 1177
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1178
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long offset ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1190
  b = mdev->bitmap;
#line 1194
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1194
  if (_b != 0) {
#line 1194
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1194
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1194
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1194);
  } else {

  }
#line 1194
  if (_b != 0) {
#line 1194
    return (0);
  } else {

  }
#line 1195
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1195
  if (_b___0 != 0) {
#line 1195
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1195
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1195
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1195);
  } else {

  }
#line 1195
  if (_b___0 != 0) {
#line 1195
    return (0);
  } else {

  }
#line 1197
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1197
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1198
  tmp___4 = bm_is_locked(b);
#line 1198
  if (tmp___4 != 0) {
#line 1199
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1200
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1201
    offset = bitnr >> 6;
#line 1202
    p_addr = bm_map_paddr(b, offset);
#line 1203
    tmp___5 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1203
    i = tmp___5 != 0;
#line 1204
    bm_unmap(p_addr);
  } else
#line 1205
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1206
    i = -1;
  } else {
#line 1208
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1208
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1208
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___7, tmp___6, bitnr, b->bm_bits);
#line 1209
    i = 0;
  }
#line 1212
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1213
  return (i);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int _b___1 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1220
  b = mdev->bitmap;
#line 1221
  p_addr = 0;
#line 1221
  page_nr = 0xffffffffffffffffUL;
#line 1223
  c = 0;
#line 1230
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1230
  if (_b != 0) {
#line 1230
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1230
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1230
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1230);
  } else {

  }
#line 1230
  if (_b != 0) {
#line 1230
    return (1);
  } else {

  }
#line 1231
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1231
  if (_b___0 != 0) {
#line 1231
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1231
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1231
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1231);
  } else {

  }
#line 1231
  if (_b___0 != 0) {
#line 1231
    return (1);
  } else {

  }
#line 1233
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1233
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1234
  tmp___4 = bm_is_locked(b);
#line 1234
  if (tmp___4 != 0) {
#line 1235
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1236
  bitnr = s;
#line 1236
  goto ldv_42341;
  ldv_42340: 
#line 1237
  w = bitnr >> 6;
#line 1238
  if (w >> 9 != page_nr) {
#line 1239
    page_nr = w >> 9;
#line 1240
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1241
      bm_unmap(p_addr);
    } else {

    }
#line 1242
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1244
  _b___1 = b->bm_bits <= bitnr;
#line 1244
  if (_b___1 != 0) {
#line 1244
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1244
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1244
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___9, tmp___8, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1244);
  } else {

  }
#line 1244
  if (_b___1 != 0) {
#line 1245
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1245
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1245
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
  } else {
#line 1247
    tmp___7 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1247
    c = (tmp___7 != 0) + c;
  }
#line 1236
  bitnr = bitnr + 1UL;
  ldv_42341: ;
#line 1236
  if (bitnr <= (unsigned long )e) {
#line 1237
    goto ldv_42340;
  } else {

  }

#line 1250
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1251
    bm_unmap(p_addr);
  } else {

  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (c);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1273
  b = mdev->bitmap;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1278
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1278
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (0);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1279
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1279
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (0);
  } else {

  }
#line 1281
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1282
  tmp___4 = bm_is_locked(b);
#line 1282
  if (tmp___4 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1285
  s = (int )(enr << 6);
#line 1286
  _min1 = (enr + 1UL) << 6;
#line 1286
  _min2 = b->bm_words;
#line 1286
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1287
  count = 0;
#line 1288
  if ((size_t )s < b->bm_words) {
#line 1289
    n = e - s;
#line 1290
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1291
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1292
    goto ldv_42367;
    ldv_42366: 
#line 1293
    tmp___5 = bm;
#line 1293
    bm = bm + 1;
#line 1293
    tmp___6 = hweight_long(*tmp___5);
#line 1293
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
    ldv_42367: 
#line 1292
    tmp___7 = n;
#line 1292
    n = n - 1;
#line 1292
    if (tmp___7 != 0) {
#line 1293
      goto ldv_42366;
    } else {

    }
#line 1294
    bm_unmap(p_addr);
  } else {
#line 1296
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1296
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1296
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___9,
           tmp___8, s);
  }
#line 1298
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1299
  return (count);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1305
  b = mdev->bitmap;
#line 1309
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1309
  if (_b != 0) {
#line 1309
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1309
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1309
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1309);
  } else {

  }
#line 1309
  if (_b != 0) {
#line 1309
    return (0UL);
  } else {

  }
#line 1310
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1310
  if (_b___0 != 0) {
#line 1310
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1310
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1310
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1310);
  } else {

  }
#line 1310
  if (_b___0 != 0) {
#line 1310
    return (0UL);
  } else {

  }
#line 1312
  spin_lock_irq(& b->bm_lock);
#line 1313
  tmp___3 = bm_is_locked(b);
#line 1313
  if (tmp___3 != 0) {
#line 1314
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1315
  weight = b->bm_set;
#line 1317
  s = (int )((unsigned int )al_enr * 16U);
#line 1318
  __min1 = (size_t )(s + 16);
#line 1318
  __min2 = b->bm_words;
#line 1318
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1320
  if ((e + -1) >> 9 != s >> 9) {
#line 1320
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1320
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1320
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1321);
  } else {

  }
#line 1322
  count = 0;
#line 1323
  if ((size_t )s < b->bm_words) {
#line 1324
    do_now = e - s;
#line 1324
    i = do_now;
#line 1325
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1326
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1327
    goto ldv_42391;
    ldv_42390: 
#line 1328
    tmp___6 = hweight_long(*bm);
#line 1328
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1329
    *bm = 0xffffffffffffffffUL;
#line 1330
    bm = bm + 1;
    ldv_42391: 
#line 1327
    tmp___7 = i;
#line 1327
    i = i - 1;
#line 1327
    if (tmp___7 != 0) {
#line 1328
      goto ldv_42390;
    } else {

    }
#line 1332
    bm_unmap(p_addr);
#line 1333
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1334
    if ((size_t )e == b->bm_words) {
#line 1335
      tmp___8 = bm_clear_surplus(b);
#line 1335
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1337
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1337
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1337
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1339
  weight = b->bm_set - weight;
#line 1340
  spin_unlock_irq(& b->bm_lock);
#line 1341
  return (weight);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 280
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 281
char const   *drbd_role_str(enum drbd_role s ) ;
#line 282
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1073 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1077
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1079
  return (mdev);
}
}
#line 1418
int proc_details ;
#line 1551 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1552
struct file_operations  const  drbd_proc_fops ;
#line 2084 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2097
  tmp = drbd_bm_total_weight(mdev);
#line 2097
  *bits_left = tmp - mdev->rs_failed;
#line 2100
  if (*bits_left > mdev->rs_total) {
#line 2106
    __asm__  volatile   ("": : : "memory");
#line 2107
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 2107
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2107
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2107
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2110
    *per_mil_done = 0U;
  } else {
#line 2113
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2116
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2118
  return;
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 48
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 69
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 71
  x = (int )(res / 50U);
#line 72
  y = 20 - x;
#line 73
  seq_printf(seq, "\t[");
#line 74
  i = 1;
#line 74
  goto ldv_41879;
  ldv_41878: 
#line 75
  seq_printf(seq, "=");
#line 74
  i = i + 1;
  ldv_41879: ;
#line 74
  if (i < x) {
#line 75
    goto ldv_41878;
  } else {

  }
#line 76
  seq_printf(seq, ">");
#line 77
  i = 0;
#line 77
  goto ldv_41882;
  ldv_41881: 
#line 78
  seq_printf(seq, ".");
#line 77
  i = i + 1;
  ldv_41882: ;
#line 77
  if (i < y) {
#line 78
    goto ldv_41881;
  } else {

  }
#line 79
  seq_printf(seq, "] ");
#line 81
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 83
  if (mdev->rs_total > 1048576UL) {
#line 84
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 88
    seq_printf(seq, "(%lu/%lu)K", rs_left << 2, mdev->rs_total << 2);
  }
#line 92
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 272U) {
#line 93
    seq_printf(seq, " queue_delay: %d.%d ms\n\t", mdev->data_delay / 1000, (mdev->data_delay % 1000) / 100);
  } else
#line 96
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 256U) {
#line 97
    seq_printf(seq, " delay_probe: %u\n\t", mdev->delay_seq);
  } else {

  }
#line 108
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 110
  if (dt > 20UL) {
#line 113
    seq_printf(seq, "stalled\n");
#line 114
    return;
  } else {

  }
#line 117
  if (dt == 0UL) {
#line 118
    dt = dt + 1UL;
  } else {

  }
#line 119
  db = mdev->rs_mark_left - rs_left;
#line 120
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 122
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 126
  dbdt = db / dt << 2;
#line 127
  if (dbdt > 1000UL) {
#line 128
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 131
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 135
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 136
  if (dt == 0UL) {
#line 137
    dt = 1UL;
  } else {

  }
#line 138
  db = mdev->rs_total - rs_left;
#line 139
  dbdt = db / dt << 2;
#line 140
  if (dbdt > 1000UL) {
#line 141
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 144
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 146
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 272U) {
#line 147
    if (mdev->c_sync_rate > 1000) {
#line 148
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 151
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 154
  seq_printf(seq, " K/sec\n");
#line 155
  return;
}
}
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 159
  __mptr = (struct lc_element  const  *)e;
#line 159
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 161
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 164
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 169
  hole = 0;
#line 173
  write_ordering_chars[0] = 110;
#line 173
  write_ordering_chars[1] = 100;
#line 173
  write_ordering_chars[2] = 102;
#line 173
  write_ordering_chars[3] = 98;
#line 180
  tmp = drbd_buildtag();
#line 180
  seq_printf(seq, "version: 8.3.7 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 93, tmp);
#line 203
  i = 0;
#line 203
  goto ldv_41902;
  ldv_41901: 
#line 204
  mdev = minor_to_mdev((unsigned int )i);
#line 205
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 206
    hole = 1;
#line 207
    goto ldv_41900;
  } else {

  }
#line 209
  if (hole != 0) {
#line 210
    hole = 0;
#line 211
    seq_printf(seq, "\n");
  } else {

  }
#line 214
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 216
  if (((unsigned int )*((unsigned short *)mdev + 982UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1965UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1964UL) == 2U) {
#line 219
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 221
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 221
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 221
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 221
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 221
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 221
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33296.pdsk);
#line 221
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33296.disk);
#line 221
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_33296.peer);
#line 221
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_33296.role);
#line 221
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1966UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1966UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1966UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1966UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 251
    tmp___9 = drbd_bm_total_weight(mdev);
#line 251
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 254
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 256U || (unsigned int )*((unsigned short *)mdev + 982UL) == 272U) {
#line 256
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 258
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 288U || (unsigned int )*((unsigned short *)mdev + 982UL) == 304U) {
#line 259
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 265
  if (proc_details > 0) {
#line 265
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 265
    if (tmp___10 != 0) {
#line 266
      lc_seq_printf_stats(seq, mdev->resync);
#line 267
      lc_seq_printf_stats(seq, mdev->act_log);
#line 268
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 271
  if (proc_details > 1) {
#line 272
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 273
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_41900: 
#line 203
  i = i + 1;
  ldv_41902: ;
#line 203
  if ((unsigned int )i < minor_count) {
#line 204
    goto ldv_41901;
  } else {

  }

#line 279
  return (0);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 284
  tmp = PDE((struct inode  const  *)inode);
#line 284
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 284
  return (tmp___0);
}
}
#line 305
void ldv_check_final_state(void) ;
#line 308
extern void ldv_check_return_value(int  ) ;
#line 314
extern void ldv_initialize(void) ;
#line 317
extern void ldv_handler_precall(void) ;
#line 320
extern int nondet_int(void) ;
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 358
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 348
  LDV_IN_INTERRUPT = 1;
#line 357
  ldv_initialize();
#line 361
  goto ldv_41933;
  ldv_41932: 
#line 365
  tmp = nondet_int();
#line 365
  switch (tmp) {
  case 0: ;
#line 370
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 375
    ldv_handler_precall();
#line 376
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 377
    ldv_check_return_value(res_drbd_proc_open_3);
#line 378
    if (res_drbd_proc_open_3 != 0) {
#line 379
      goto ldv_module_exit;
    } else {

    }
#line 380
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 386
  goto ldv_41930;
  default: ;
#line 387
  goto ldv_41930;
  }
  ldv_41930: ;
  ldv_41933: 
#line 361
  tmp___0 = nondet_int();
#line 361
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 363
    goto ldv_41932;
  } else {

  }

  ldv_module_exit: ;
#line 396
  ldv_check_final_state();
#line 399
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 191 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 271 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 275
  first = list->next;
#line 276
  last = list->prev;
#line 278
  first->prev = prev;
#line 279
  prev->next = first;
#line 281
  last->next = next;
#line 282
  next->prev = last;
#line 283
  return;
}
}
#line 316 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 319
  tmp = list_empty((struct list_head  const  *)list);
#line 319
  if (tmp == 0) {
#line 320
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 321
    INIT_LIST_HEAD(list);
  } else {

  }
#line 323
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 248 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 164 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13261: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13261;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___0(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5735.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5735.ldv_5734.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 43
extern int down_interruptible(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 300 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 302
  tmp = PageTail(page);
#line 302
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 302
  if (tmp___0 != 0L) {
#line 303
    return (page->ldv_12001.first_page);
  } else {

  }
#line 304
  return (page);
}
}
#line 307 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 309
  tmp = compound_head(page);
#line 309
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 309
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17188: ;
#line 63
    goto ldv_17188;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17189: ;
#line 65
    goto ldv_17189;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17190: ;
#line 66
    goto ldv_17190;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 359 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2006
extern void flush_signals(struct task_struct * ) ;
#line 2039
extern void force_sig(int  , struct task_struct * ) ;
#line 994 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 1064 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1066
  return (q->limits.max_segment_size);
}
}
#line 646 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 652
  __asm__  volatile   ("": : : "memory");
#line 653
  return (thi->t_state);
}
}
#line 1082 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1084
  return (mdev->minor);
}
}
#line 1095 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1097
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1100
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1100
  if (tmp != 0L) {
#line 1101
    mutex_unlock(& mdev->data.mutex);
#line 1102
    return (0);
  } else {

  }
#line 1104
  return (1);
}
}
#line 1107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1109
  mutex_unlock(& mdev->data.mutex);
#line 1110
  return;
}
}
#line 1134
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1143
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1145
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1162
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1166
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1171
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1179
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1185
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1187
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1189
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1192
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1194
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1198
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1204
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1207
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1210
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1211
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1214
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1219
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1405
mempool_t *drbd_request_mempool ;
#line 1413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1439
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1442
int drbd_worker(struct drbd_thread *thi ) ;
#line 1443
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1444
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1445
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1446
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1447
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1451
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1455
  if (mdev->ov_last_oos_size != 0UL) {
#line 1456
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1456
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1456
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1460
  mdev->ov_last_oos_size = 0UL;
#line 1461
  return;
}
}
#line 1464
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1465
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1468
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1469
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1470
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1471
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1472
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1473
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1474
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1475
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1477
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1478
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1479
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1480
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1481
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1482
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1483
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1484
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1486
void resync_timer_fn(unsigned long data ) ;
#line 1489
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1492
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1497
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1508 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1512
  if (level == 1) {
#line 1513
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1515
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1517
  return (err);
}
}
#line 1520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1522
  val = 1;
#line 1523
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1525
  return;
}
}
#line 1527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1529
  val = 0;
#line 1530
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1532
  return;
}
}
#line 1548
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1558
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1559
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1561
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1562
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1563
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1564
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1567
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1571
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1647 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1649
  return ((struct page *)page->ldv_12001.ldv_11998.private);
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1672
  page = e->pages;
#line 1673
  goto ldv_42234;
  ldv_42233: 
#line 1674
  tmp = page_count(page);
#line 1674
  if (tmp > 1) {
#line 1675
    return (1);
  } else {

  }
#line 1673
  page = page_chain_next(page);
  ldv_42234: ;
#line 1673
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1673
    tmp___0 = page_chain_next(page);
#line 1673
    __builtin_prefetch((void const   *)tmp___0);
#line 1673
    if (1 != 0) {
#line 1674
      goto ldv_42233;
    } else {
#line 1676
      goto ldv_42235;
    }
  } else {

  }
  ldv_42235: ;
#line 1677
  return (0);
}
}
#line 1681 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1683
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1683
  if (tmp == 0) {
#line 1683
    goto ldv_42239;
  } else {

  }
#line 1683
  tmp___0 = get_current();
#line 1683
  __wait.flags = 0U;
#line 1683
  __wait.private = (void *)tmp___0;
#line 1683
  __wait.func = & autoremove_wake_function;
#line 1683
  __wait.task_list.next = & __wait.task_list;
#line 1683
  __wait.task_list.prev = & __wait.task_list;
  ldv_42242: 
#line 1683
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1683
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1683
  if (tmp___1 == 0) {
#line 1683
    goto ldv_42241;
  } else {

  }
#line 1683
  schedule();
#line 1683
  goto ldv_42242;
  ldv_42241: 
#line 1683
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42239: ;
#line 1686
  return;
}
}
#line 1687 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1689
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1690
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1691
  return;
}
}
#line 1724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1726
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1728
  if (forcedetach == 0) {
#line 1729
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1729
    if (tmp___1 != 0) {
#line 1730
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1732
    goto ldv_42265;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1737
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1738
    __ns.i = mdev->state.i;
#line 1738
    __ns.ldv_33296.disk = 2U;
#line 1738
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1739
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1742
  goto ldv_42265;
  }
  ldv_42265: ;
#line 1745
  return;
}
}
#line 1803 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1806
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1892 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1895
  tmp = spinlock_check(& q->q_lock);
#line 1895
  flags = _raw_spin_lock_irqsave(tmp);
#line 1896
  list_add_tail(& w->list, & q->q);
#line 1897
  up(& q->s);
#line 1899
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1900
  return;
}
}
#line 1902 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1904
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1904
  if (tmp != 0) {
#line 1905
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1906
  return;
}
}
#line 1908 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1910
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1911
  wake_asender(mdev);
#line 1912
  return;
}
}
#line 1914 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1918
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1918
  return (tmp);
}
}
#line 1933 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1935
  _drbd_thread_stop(thi, 0, 1);
#line 1936
  return;
}
}
#line 1993 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1995
  atomic_inc(& mdev->rs_pending_cnt);
#line 1996
  return;
}
}
#line 2324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2326
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2326
  if (tmp___0 != 0) {
#line 2327
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2327
    drbd_blk_run_queue(tmp);
#line 2328
    put_ldev(mdev);
  } else {

  }
#line 2330
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 85
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 86
  md_io->error = error;
#line 88
  complete(& md_io->event);
#line 89
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 96
  flags = 0UL;
#line 97
  mdev = e->mdev;
#line 99
  if (e->block_id == 0ULL) {
#line 99
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 99
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 99
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           99);
  } else {

  }
#line 101
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 101
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 102
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 103
  list_del(& e->w.list);
#line 104
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 104
  if (tmp___2 != 0) {
#line 105
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 106
  tmp___3 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 106
  if (tmp___3 != 0) {
#line 107
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 108
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 110
  drbd_queue_work(& mdev->data.work, & e->w);
#line 111
  put_ldev(mdev);
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 116
  return ((ee_flags & 28) == 20);
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 124
  flags = 0UL;
#line 125
  mdev = e->mdev;
#line 133
  tmp___0 = is_failed_barrier((int )e->flags);
#line 133
  if (tmp___0 != 0) {
#line 134
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 135
    tmp = spinlock_check(& mdev->req_lock);
#line 135
    flags = _raw_spin_lock_irqsave(tmp);
#line 136
    list_del(& e->w.list);
#line 137
    e->flags = e->flags | 8UL;
#line 138
    e->w.cb = & w_e_reissue;
#line 141
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 142
    drbd_queue_work(& mdev->data.work, & e->w);
#line 143
    return;
  } else {

  }
#line 146
  if (e->block_id == 0ULL) {
#line 146
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 146
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 146
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           146);
  } else {

  }
#line 152
  e_sector = e->sector;
#line 153
  do_al_complete_io = (int )e->flags & 1;
#line 154
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 156
  tmp___3 = spinlock_check(& mdev->req_lock);
#line 156
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 157
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 158
  list_del(& e->w.list);
#line 159
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 166
  if (is_syncer_req != 0) {
#line 166
    tmp___4 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 166
    do_wake = tmp___4;
  } else {
#line 166
    tmp___5 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 166
    do_wake = tmp___5;
  }
#line 170
  tmp___6 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 170
  if (tmp___6 != 0) {
#line 171
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 172
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 174
  if (is_syncer_req != 0) {
#line 175
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 177
  if (do_wake != 0) {
#line 178
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 180
  if (do_al_complete_io != 0) {
#line 181
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 183
  wake_asender(mdev);
#line 184
  put_ldev(mdev);
#line 185
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 192
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 193
  mdev = e->mdev;
#line 194
  uptodate = (int )bio->bi_flags & 1;
#line 195
  is_write = (int )bio->bi_rw & 1;
#line 197
  if (error != 0) {
#line 198
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 198
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 198
    printk("<4>%s %s: %s: error=%d s=%llus\n", tmp___0, tmp, is_write != 0 ? (char *)"write" : (char *)"read",
           error, (unsigned long long )e->sector);
  } else {

  }
#line 201
  if (error == 0 && uptodate == 0) {
#line 202
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 202
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 202
    printk("<4>%s %s: %s: setting error to -EIO s=%llus\n", tmp___2, tmp___1, is_write != 0 ? (char *)"write" : (char *)"read",
           (unsigned long long )e->sector);
#line 208
    error = -5;
  } else {

  }
#line 211
  if (error != 0) {
#line 212
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 214
  bio_put(bio);
#line 215
  tmp___3 = atomic_dec_and_test(& e->pending_bios);
#line 215
  if (tmp___3 != 0) {
#line 216
    if (is_write != 0) {
#line 217
      drbd_endio_write_sec_final(e);
    } else {
#line 219
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 220
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  raw_spinlock_t *tmp___5 ;

  {
#line 228
  req = (struct drbd_request *)bio->bi_private;
#line 229
  mdev = req->mdev;
#line 232
  uptodate = (int )bio->bi_flags & 1;
#line 234
  if (error != 0) {
#line 235
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 237
  if (error == 0 && uptodate == 0) {
#line 238
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 238
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 238
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 243
    error = -5;
  } else {

  }
#line 247
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 247
  if (tmp___3 != 0L) {
#line 248
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 2UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 254
    what = completed_ok;
  }
#line 256
  bio_put(req->private_bio);
#line 257
  tmp___4 = ERR_PTR((long )error);
#line 257
  req->private_bio = (struct bio *)tmp___4;
#line 259
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 259
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 260
  __req_mod(req, what, & m);
#line 261
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 263
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 264
    complete_master_bio(mdev, & m);
  } else {

  }
#line 265
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 269
  __mptr = (struct drbd_work  const  *)w;
#line 269
  req = (struct drbd_request *)__mptr;
#line 276
  drbd_req_free(req);
#line 278
  return (1);
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  req = (struct drbd_request *)__mptr;
#line 289
  spin_lock_irq(& mdev->req_lock);
#line 290
  if ((cancel != 0 || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.pdsk <= 4) {
#line 293
    _req_mod(req, send_canceled);
#line 294
    spin_unlock_irq(& mdev->req_lock);
#line 295
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 295
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 295
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 296
    return (1);
  } else {

  }
#line 298
  spin_unlock_irq(& mdev->req_lock);
#line 300
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 300
  return (tmp___1);
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 305
  _b = cancel != 0;
#line 305
  if (_b != 0) {
#line 305
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           305);
  } else {

  }
#line 305
  if (_b != 0) {
#line 305
    return (1);
  } else {

  }
#line 306
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 306
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 306
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 307
  return (1);
}
}
#line 310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 314
  page = e->pages;
#line 318
  desc.tfm = tfm;
#line 319
  desc.flags = 0U;
#line 321
  sg_init_table(& sg, 1U);
#line 322
  crypto_hash_init(& desc);
#line 324
  goto ldv_42727;
  ldv_42726: 
#line 326
  sg_set_page(& sg, page, 4096U, 0U);
#line 327
  crypto_hash_update(& desc, & sg, sg.length);
#line 328
  page = tmp;
  ldv_42727: 
#line 324
  tmp = page_chain_next(page);
#line 324
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 325
    goto ldv_42726;
  } else {

  }
#line 331
  len = e->size & 4095U;
#line 332
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 333
  crypto_hash_update(& desc, & sg, sg.length);
#line 334
  crypto_hash_final(& desc, (u8 *)digest);
#line 335
  return;
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 344
  desc.tfm = tfm;
#line 345
  desc.flags = 0U;
#line 347
  sg_init_table(& sg, 1U);
#line 348
  crypto_hash_init(& desc);
#line 350
  bvec = bio->bi_io_vec;
#line 350
  i = 0;
#line 350
  goto ldv_42740;
  ldv_42739: 
#line 351
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 352
  crypto_hash_update(& desc, & sg, sg.length);
#line 350
  bvec = bvec + 1;
#line 350
  i = i + 1;
  ldv_42740: ;
#line 350
  if ((int )bio->bi_vcnt > i) {
#line 351
    goto ldv_42739;
  } else {

  }
#line 354
  crypto_hash_final(& desc, (u8 *)digest);
#line 355
  return;
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 359
  __mptr = (struct drbd_work  const  *)w;
#line 359
  e = (struct drbd_epoch_entry *)__mptr;
#line 364
  if (e->block_id != 2205466966ULL) {
#line 364
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 364
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 364
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           364);
  } else {

  }
#line 366
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 366
  if (tmp___1 != 0L) {
#line 367
    drbd_free_ee(mdev, e);
#line 368
    return (1);
  } else {

  }
#line 371
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 371
  if (tmp___5 != 0L) {
#line 372
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 372
    digest_size = (int )tmp___2;
#line 373
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 374
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 375
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 377
      inc_rs_pending(mdev);
#line 378
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 384
      kfree((void const   *)digest);
    } else {
#line 386
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 387
      ok = 0;
    }
  } else {
#line 390
    ok = 1;
  }
#line 392
  drbd_free_ee(mdev, e);
#line 394
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 394
  if (tmp___8 != 0L) {
#line 395
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 395
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 395
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 396
  return (ok);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;

  {
#line 405
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 405
  if (tmp == 0) {
#line 406
    return (0);
  } else {

  }
#line 410
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 411
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 412
    goto fail;
  } else {

  }
#line 414
  spin_lock_irq(& mdev->req_lock);
#line 415
  list_add(& e->w.list, & mdev->read_ee);
#line 416
  spin_unlock_irq(& mdev->req_lock);
#line 418
  e->w.cb = & w_e_send_csum;
#line 419
  tmp___0 = drbd_submit_ee(mdev, e, 0U, 3);
#line 419
  if (tmp___0 == 0) {
#line 420
    return (1);
  } else {

  }
#line 422
  drbd_free_ee(mdev, e);
  fail: 
#line 424
  put_ldev(mdev);
#line 425
  return (2);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 431
  mdev = (struct drbd_conf *)data;
#line 434
  tmp = spinlock_check(& mdev->req_lock);
#line 434
  flags = _raw_spin_lock_irqsave(tmp);
#line 436
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 436
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 436
  if (tmp___1 != 0L) {
#line 437
    queue = 1;
#line 438
    if ((unsigned int )*((unsigned short *)mdev + 982UL) == 288U) {
#line 439
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 441
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 443
    queue = 0;
#line 444
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 447
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 450
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 450
  if (tmp___2 != 0 && queue != 0) {
#line 451
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 452
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int calc_resync_rate(struct drbd_conf *mdev ) 
{ 
  int d ;
  int td ;
  int hd ;
  int cr ;

  {
#line 456
  d = mdev->data_delay / 1000;
#line 457
  td = mdev->sync_conf.throttle_th * 100;
#line 458
  hd = mdev->sync_conf.hold_off_th * 100;
#line 459
  cr = mdev->sync_conf.rate;
#line 461
  return (d > td ? (d < hd ? ((td - d) * cr) / (hd - td) + cr : 0) : cr);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  unsigned int tmp___0 ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 471
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 471
  capacity = tmp;
#line 472
  tmp___0 = queue_max_segment_size(mdev->rq_queue);
#line 472
  max_segment_size = (int )tmp___0;
#line 476
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 476
  if (tmp___1 != 0L) {
#line 477
    return (1);
  } else {

  }
#line 479
  tmp___4 = __builtin_expect((int )mdev->state.ldv_33296.conn <= 9, 0L);
#line 479
  if (tmp___4 != 0L) {
#line 480
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 480
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 480
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___3,
           tmp___2);
#line 481
    return (0);
  } else {

  }
#line 484
  if ((unsigned int )*((unsigned short *)mdev + 982UL) != 272U) {
#line 485
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 485
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___7, tmp___6, tmp___5);
  } else {

  }
#line 488
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 488
  if (tmp___10 == 0) {
#line 493
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 493
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 493
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___9, tmp___8);
#line 494
    mdev->resync_work.cb = & w_resync_inactive;
#line 495
    return (1);
  } else {

  }
#line 498
  mdev->c_sync_rate = calc_resync_rate(mdev);
#line 499
  number = (mdev->c_sync_rate * 25) / 1000;
#line 500
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 502
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 503
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 504
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 506
    mx = 1;
  }
#line 507
  mutex_unlock(& mdev->data.mutex);
#line 510
  if (number > mx) {
#line 511
    mx = number;
  } else {

  }
#line 514
  if (pe + number > mx) {
#line 515
    number = mx - pe;
  } else {

  }
#line 518
  i = 0;
#line 518
  goto ldv_42804;
  ldv_42803: 
#line 520
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 521
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 522
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 523
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 525
    queued = 1;
#line 526
    sndbuf = 0;
  }
#line 528
  mutex_unlock(& mdev->data.mutex);
#line 529
  if (sndbuf / 2 < queued) {
#line 530
    goto requeue;
  } else {

  }
  next_sector: 
#line 533
  size = 4096;
#line 534
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 536
  if (bit == 0xffffffffffffffffUL) {
#line 537
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 538
    mdev->resync_work.cb = & w_resync_inactive;
#line 539
    put_ldev(mdev);
#line 540
    return (1);
  } else {

  }
#line 543
  sector = bit << 3;
#line 545
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 545
  if (tmp___11 != 0) {
#line 546
    mdev->bm_resync_fo = bit;
#line 547
    goto requeue;
  } else {

  }
#line 549
  mdev->bm_resync_fo = bit + 1UL;
#line 551
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 551
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 551
  if (tmp___13 != 0L) {
#line 552
    drbd_rs_complete_io(mdev, sector);
#line 553
    goto next_sector;
  } else {

  }
#line 569
  align = 1;
  ldv_42796: ;
#line 571
  if (size + 4096 > max_segment_size) {
#line 572
    goto ldv_42795;
  } else {

  }
#line 575
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 576
    goto ldv_42795;
  } else {

  }
#line 579
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 580
    goto ldv_42795;
  } else {

  }
#line 586
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 586
  if (tmp___14 != 1) {
#line 587
    goto ldv_42795;
  } else {

  }
#line 588
  bit = bit + 1UL;
#line 589
  size = size + 4096;
#line 590
  if (4096 << align <= size) {
#line 591
    align = align + 1;
  } else {

  }
#line 592
  i = i + 1;
#line 593
  goto ldv_42796;
  ldv_42795: ;
#line 596
  if (size > 4096) {
#line 597
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 601
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 602
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 603
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 604
    tmp___15 = read_for_csum(mdev, sector, size);
#line 604
    switch (tmp___15) {
    case 0: 
#line 606
    put_ldev(mdev);
#line 607
    return (0);
    case 2: 
#line 609
    drbd_rs_complete_io(mdev, sector);
#line 610
    mdev->bm_resync_fo = sector >> 3;
#line 611
    goto requeue;
    }
  } else {
#line 615
    inc_rs_pending(mdev);
#line 616
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 616
    if (tmp___22 == 0) {
#line 618
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 619
      atomic_dec(& mdev->rs_pending_cnt);
#line 619
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 619
      if (tmp___21 < 0) {
#line 619
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 619
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 619
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 619
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 619, tmp___18);
      } else {

      }
#line 620
      put_ldev(mdev);
#line 621
      return (0);
    } else {

    }
  }
#line 518
  i = i + 1;
  ldv_42804: ;
#line 518
  if (i < number) {
#line 519
    goto ldv_42803;
  } else {

  }
#line 626
  tmp___23 = drbd_bm_bits(mdev);
#line 626
  if (mdev->bm_resync_fo >= tmp___23) {
#line 633
    mdev->resync_work.cb = & w_resync_inactive;
#line 634
    put_ldev(mdev);
#line 635
    return (1);
  } else {

  }
  requeue: 
#line 639
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 640
  put_ldev(mdev);
#line 641
  return (1);
}
}
#line 644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 648
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 648
  capacity = tmp;
#line 650
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 650
  if (tmp___0 != 0L) {
#line 651
    return (1);
  } else {

  }
#line 653
  tmp___3 = __builtin_expect((int )mdev->state.ldv_33296.conn <= 9, 0L);
#line 653
  if (tmp___3 != 0L) {
#line 654
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 655
    return (0);
  } else {

  }
#line 658
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 659
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 659
  if (tmp___4 > number) {
#line 660
    goto requeue;
  } else {

  }
#line 662
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 662
  number = number - tmp___5;
#line 664
  sector = mdev->ov_position;
#line 665
  i = 0;
#line 665
  goto ldv_42822;
  ldv_42821: ;
#line 666
  if (sector >= capacity) {
#line 667
    mdev->resync_work.cb = & w_resync_inactive;
#line 668
    return (1);
  } else {

  }
#line 671
  size = 4096;
#line 673
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 673
  if (tmp___6 != 0) {
#line 674
    mdev->ov_position = sector;
#line 675
    goto requeue;
  } else {

  }
#line 678
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 679
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 681
  inc_rs_pending(mdev);
#line 682
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 682
  if (tmp___11 == 0) {
#line 683
    atomic_dec(& mdev->rs_pending_cnt);
#line 683
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 683
    if (tmp___10 < 0) {
#line 683
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 683
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 683, tmp___7);
    } else {

    }
#line 684
    return (0);
  } else {

  }
#line 686
  sector = sector + 8UL;
#line 665
  i = i + 1;
  ldv_42822: ;
#line 665
  if (i < number) {
#line 666
    goto ldv_42821;
  } else {

  }
#line 688
  mdev->ov_position = sector;
  requeue: 
#line 691
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 692
  return (1);
}
}
#line 696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 698
  kfree((void const   *)w);
#line 699
  ov_oos_print(mdev);
#line 700
  drbd_resync_finished(mdev);
#line 702
  return (1);
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 707
  kfree((void const   *)w);
#line 709
  drbd_resync_finished(mdev);
#line 711
  return (1);
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 720
  khelper_cmd = 0;
#line 725
  tmp___3 = drbd_rs_del_all(mdev);
#line 725
  if (tmp___3 != 0) {
#line 731
    drbd_kick_lo(mdev);
#line 732
    tmp = get_current();
#line 732
    tmp->state = 1L;
#line 733
    schedule_timeout(25L);
#line 734
    tmp___0 = kmalloc___0(24UL, 32U);
#line 734
    w = (struct drbd_work *)tmp___0;
#line 735
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 736
      w->cb = & w_resync_finished;
#line 737
      drbd_queue_work(& mdev->data.work, w);
#line 738
      return (1);
    } else {

    }
#line 740
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 740
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 740
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 743
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 744
  if (dt == 0UL) {
#line 745
    dt = 1UL;
  } else {

  }
#line 746
  db = mdev->rs_total;
#line 747
  dbdt = db / dt << 2;
#line 748
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 750
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 750
  if (tmp___4 == 0) {
#line 751
    goto out;
  } else {

  }
#line 753
  spin_lock_irq(& mdev->req_lock);
#line 754
  os = mdev->state;
#line 758
  if ((int )os.ldv_33296.conn <= 10) {
#line 759
    goto out_unlock;
  } else {

  }
#line 761
  ns = os;
#line 762
  ns.ldv_33296.conn = 10U;
#line 764
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 769
  n_oos = drbd_bm_total_weight(mdev);
#line 771
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 772
    if (n_oos != 0UL) {
#line 773
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 773
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 773
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 775
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 778
      if (mdev->rs_failed != n_oos) {
#line 778
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               778);
      } else {

      }
#line 780
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 781
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 783
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 784
        s = mdev->rs_same_csum;
#line 785
        t = mdev->rs_total;
#line 786
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 789
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 789
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 789
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 798
  if (mdev->rs_failed != 0UL) {
#line 799
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 799
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 799
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 801
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 802
      ns.ldv_33296.disk = 4U;
#line 803
      ns.ldv_33296.pdsk = 8U;
    } else {
#line 805
      ns.ldv_33296.disk = 8U;
#line 806
      ns.ldv_33296.pdsk = 4U;
    }
  } else {
#line 809
    ns.ldv_33296.disk = 8U;
#line 810
    ns.ldv_33296.pdsk = 8U;
#line 812
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 813
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 815
        i = 1;
#line 815
        goto ldv_42852;
        ldv_42851: 
#line 816
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 815
        i = i + 1;
        ldv_42852: ;
#line 815
        if (i <= 3) {
#line 816
          goto ldv_42851;
        } else {

        }
#line 817
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 818
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 820
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 820
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 820
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 824
    drbd_uuid_set_bm(mdev, 0ULL);
#line 826
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 830
      i___0 = 0;
#line 830
      goto ldv_42856;
      ldv_42855: 
#line 831
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 830
      i___0 = i___0 + 1;
      ldv_42856: ;
#line 830
      if (i___0 <= 3) {
#line 831
        goto ldv_42855;
      } else {

      }

    } else {

    }
  }
#line 835
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 837
  spin_unlock_irq(& mdev->req_lock);
#line 838
  put_ldev(mdev);
  out: 
#line 840
  mdev->rs_total = 0UL;
#line 841
  mdev->rs_failed = 0UL;
#line 842
  mdev->rs_paused = 0UL;
#line 843
  mdev->ov_start_sector = 0UL;
#line 845
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 845
  if (tmp___19 != 0) {
#line 846
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 847
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 850
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 851
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 853
  return (1);
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 859
  tmp = drbd_ee_has_active_page(e);
#line 859
  if (tmp != 0) {
#line 861
    spin_lock_irq(& mdev->req_lock);
#line 862
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 863
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 865
    drbd_free_ee(mdev, e);
  }
#line 866
  return;
}
}
#line 874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 876
  __mptr = (struct drbd_work  const  *)w;
#line 876
  e = (struct drbd_epoch_entry *)__mptr;
#line 879
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 879
  if (tmp___3 != 0L) {
#line 880
    drbd_free_ee(mdev, e);
#line 881
    atomic_dec(& mdev->unacked_cnt);
#line 881
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 881
    if (tmp___2 < 0) {
#line 881
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 881
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 881
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             881, tmp);
    } else {

    }
#line 882
    return (1);
  } else {

  }
#line 885
  tmp___7 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 885
  if (tmp___7 != 0L) {
#line 886
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 888
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 888
    if (tmp___6 != 0) {
#line 889
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 892
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 895
  atomic_dec(& mdev->unacked_cnt);
#line 895
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 895
  if (tmp___11 < 0) {
#line 895
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 895
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           895, tmp___8);
  } else {

  }
#line 897
  move_to_net_ee_or_free(mdev, e);
#line 899
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 899
  if (tmp___14 != 0L) {
#line 900
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 900
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 900
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 901
  return (ok);
}
}
#line 910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 912
  __mptr = (struct drbd_work  const  *)w;
#line 912
  e = (struct drbd_epoch_entry *)__mptr;
#line 915
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 915
  if (tmp___3 != 0L) {
#line 916
    drbd_free_ee(mdev, e);
#line 917
    atomic_dec(& mdev->unacked_cnt);
#line 917
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 917
    if (tmp___2 < 0) {
#line 917
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 917
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             917, tmp);
    } else {

    }
#line 918
    return (1);
  } else {

  }
#line 921
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 921
  if (tmp___4 != 0) {
#line 922
    drbd_rs_complete_io(mdev, e->sector);
#line 923
    put_ldev(mdev);
  } else {

  }
#line 926
  tmp___12 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 926
  if (tmp___12 != 0L) {
#line 927
    tmp___8 = __builtin_expect((int )mdev->state.ldv_33296.pdsk > 3, 1L);
#line 927
    if (tmp___8 != 0L) {
#line 928
      inc_rs_pending(mdev);
#line 929
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 931
      tmp___7 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 931
      if (tmp___7 != 0) {
#line 932
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 932
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 932
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 934
      ok = 1;
    }
  } else {
#line 937
    tmp___11 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 937
    if (tmp___11 != 0) {
#line 938
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 938
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 938
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 941
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 944
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 947
  atomic_dec(& mdev->unacked_cnt);
#line 947
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 947
  if (tmp___16 < 0) {
#line 947
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 947
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           947, tmp___13);
  } else {

  }
#line 949
  move_to_net_ee_or_free(mdev, e);
#line 951
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 951
  if (tmp___19 != 0L) {
#line 952
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 953
  return (ok);
}
}
#line 956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 958
  __mptr = (struct drbd_work  const  *)w;
#line 958
  e = (struct drbd_epoch_entry *)__mptr;
#line 961
  digest = 0;
#line 962
  eq = 0;
#line 964
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 964
  if (tmp___3 != 0L) {
#line 965
    drbd_free_ee(mdev, e);
#line 966
    atomic_dec(& mdev->unacked_cnt);
#line 966
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 966
    if (tmp___2 < 0) {
#line 966
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 966
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 966
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 966
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             966, tmp);
    } else {

    }
#line 967
    return (1);
  } else {

  }
#line 970
  drbd_rs_complete_io(mdev, e->sector);
#line 972
  di = (struct digest_info *)e->block_id;
#line 974
  tmp___11 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 974
  if (tmp___11 != 0L) {
#line 978
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 979
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 979
      digest_size = (int )tmp___4;
#line 980
      if (di->digest_size != digest_size) {
#line 980
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 980
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               980);
      } else {

      }
#line 981
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 983
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 984
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 985
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 985
      eq = tmp___7 == 0;
#line 986
      kfree((void const   *)digest);
    } else {

    }
#line 989
    if (eq != 0) {
#line 990
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         990U);
#line 992
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 993
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 995
      inc_rs_pending(mdev);
#line 996
      e->block_id = 0xffffffffffffffffULL;
#line 997
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1000
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1001
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1001
    if (tmp___10 != 0) {
#line 1002
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1002
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1005
  atomic_dec(& mdev->unacked_cnt);
#line 1005
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
  if (tmp___15 < 0) {
#line 1005
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1005
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1005
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           1005, tmp___12);
  } else {

  }
#line 1007
  kfree((void const   *)di);
#line 1009
  move_to_net_ee_or_free(mdev, e);
#line 1011
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 1011
  if (tmp___18 != 0L) {
#line 1012
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 1013
  return (ok);
}
}
#line 1016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 1018
  __mptr = (struct drbd_work  const  *)w;
#line 1018
  e = (struct drbd_epoch_entry *)__mptr;
#line 1021
  ok = 1;
#line 1023
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1023
  if (tmp != 0L) {
#line 1024
    goto out;
  } else {

  }
#line 1026
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1026
  if (tmp___0 != 0L) {
#line 1027
    goto out;
  } else {

  }
#line 1029
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1029
  digest_size = (int )tmp___1;
#line 1031
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1032
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1033
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1034
    inc_rs_pending(mdev);
#line 1035
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1037
    if (ok == 0) {
#line 1038
      atomic_dec(& mdev->rs_pending_cnt);
#line 1038
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1038
      if (tmp___5 < 0) {
#line 1038
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1038
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1038
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1038
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 1038, tmp___2);
      } else {

      }
    } else {

    }
#line 1039
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1043
  drbd_free_ee(mdev, e);
#line 1045
  atomic_dec(& mdev->unacked_cnt);
#line 1045
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1045
  if (tmp___9 < 0) {
#line 1045
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1045
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1045
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1045, tmp___6);
  } else {

  }
#line 1047
  return (ok);
}
}
#line 1050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1052
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1053
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1055
    mdev->ov_last_oos_start = sector;
#line 1056
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1058
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1058U);
#line 1059
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1060
  return;
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1064
  __mptr = (struct drbd_work  const  *)w;
#line 1064
  e = (struct drbd_epoch_entry *)__mptr;
#line 1068
  eq = 0;
#line 1070
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1070
  if (tmp___3 != 0L) {
#line 1071
    drbd_free_ee(mdev, e);
#line 1072
    atomic_dec(& mdev->unacked_cnt);
#line 1072
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1072
    if (tmp___2 < 0) {
#line 1072
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1072
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1072
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1072
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1072, tmp);
    } else {

    }
#line 1073
    return (1);
  } else {

  }
#line 1078
  drbd_rs_complete_io(mdev, e->sector);
#line 1080
  di = (struct digest_info *)e->block_id;
#line 1082
  tmp___11 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1082
  if (tmp___11 != 0L) {
#line 1083
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1083
    digest_size = (int )tmp___4;
#line 1084
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1085
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1086
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1088
      if (di->digest_size != digest_size) {
#line 1088
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1088
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1088
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               1088);
      } else {

      }
#line 1089
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1089
      eq = tmp___7 == 0;
#line 1090
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1093
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1094
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1094
    if (tmp___10 != 0) {
#line 1095
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1095
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1095
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1098
  atomic_dec(& mdev->unacked_cnt);
#line 1098
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1098
  if (tmp___15 < 0) {
#line 1098
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1098
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1098
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1098
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1098, tmp___12);
  } else {

  }
#line 1100
  kfree((void const   *)di);
#line 1102
  if (eq == 0) {
#line 1103
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1105
    ov_oos_print(mdev);
  }
#line 1107
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1110
  drbd_free_ee(mdev, e);
#line 1112
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1112
  if (mdev->ov_left == 0UL) {
#line 1113
    ov_oos_print(mdev);
#line 1114
    drbd_resync_finished(mdev);
  } else {

  }
#line 1117
  return (ok);
}
}
#line 1120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1122
  __mptr = (struct drbd_work  const  *)w;
#line 1122
  b = (struct drbd_wq_barrier *)__mptr;
#line 1123
  complete(& b->done);
#line 1124
  return (1);
}
}
#line 1127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1129
  __mptr = (struct drbd_work  const  *)w;
#line 1129
  b = (struct drbd_tl_epoch *)__mptr;
#line 1130
  p = & mdev->data.sbuf.barrier;
#line 1131
  ok = 1;
#line 1138
  spin_lock_irq(& mdev->req_lock);
#line 1139
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1140
    cancel = 1;
  } else {

  }
#line 1141
  spin_unlock_irq(& mdev->req_lock);
#line 1142
  if (cancel != 0) {
#line 1143
    return (1);
  } else {

  }
#line 1145
  tmp = drbd_get_data_sock(mdev);
#line 1145
  if (tmp == 0) {
#line 1146
    return (0);
  } else {

  }
#line 1147
  p->barrier = b->br_number;
#line 1151
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1153
  drbd_put_data_sock(mdev);
#line 1155
  return (ok);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1160
  if (cancel != 0) {
#line 1161
    return (1);
  } else {

  }
#line 1162
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1162
  return (tmp);
}
}
#line 1171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1173
  __mptr = (struct drbd_work  const  *)w;
#line 1173
  req = (struct drbd_request *)__mptr;
#line 1176
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1176
  if (tmp != 0L) {
#line 1177
    req_mod(req, send_canceled);
#line 1178
    return (1);
  } else {

  }
#line 1181
  ok = drbd_send_dblock(mdev, req);
#line 1182
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1184
  return (ok);
}
}
#line 1193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1195
  __mptr = (struct drbd_work  const  *)w;
#line 1195
  req = (struct drbd_request *)__mptr;
#line 1198
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1198
  if (tmp != 0L) {
#line 1199
    req_mod(req, send_canceled);
#line 1200
    return (1);
  } else {

  }
#line 1203
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1206
  if (ok == 0) {
#line 1209
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1210
      val.i = 0U;
#line 1210
      val.ldv_33296.conn = 5U;
#line 1210
      mask.i = 0U;
#line 1210
      mask.ldv_33296.conn = 31U;
#line 1210
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1212
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1214
  return (ok);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1219
  odev = mdev;
  ldv_43010: ;
#line 1222
  if (odev->sync_conf.after == -1) {
#line 1223
    return (1);
  } else {

  }
#line 1224
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1225
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1225
  if (_b != 0) {
#line 1225
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1225
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1225
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1225);
  } else {

  }
#line 1225
  if (_b != 0) {
#line 1225
    return (1);
  } else {

  }
#line 1226
  if (((((int )odev->state.ldv_33296.conn > 15 && (int )odev->state.ldv_33296.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1966UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1966UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1966UL) != 0U) {
#line 1230
    return (0);
  } else {

  }
#line 1231
  goto ldv_43010;
}
}
#line 1240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1243
  rv = 0;
#line 1245
  i = 0;
#line 1245
  goto ldv_43021;
  ldv_43020: 
#line 1246
  odev = minor_to_mdev((unsigned int )i);
#line 1247
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1248
    goto ldv_43017;
  } else {

  }
#line 1249
  if ((unsigned int )*((unsigned short *)odev + 982UL) == 0U && (unsigned int )*((unsigned char *)odev + 1965UL) == 0U) {
#line 1250
    goto ldv_43017;
  } else {

  }
#line 1251
  tmp___0 = _drbd_may_sync_now(odev);
#line 1251
  if (tmp___0 == 0) {
#line 1252
    __ns.i = odev->state.i;
#line 1252
    __ns.ldv_33296.aftr_isp = 1U;
#line 1252
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1252
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_43017: 
#line 1245
  i = i + 1;
  ldv_43021: ;
#line 1245
  if ((unsigned int )i < minor_count) {
#line 1246
    goto ldv_43020;
  } else {

  }

#line 1256
  return (rv);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1268
  rv = 0;
#line 1270
  i = 0;
#line 1270
  goto ldv_43033;
  ldv_43032: 
#line 1271
  odev = minor_to_mdev((unsigned int )i);
#line 1272
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1273
    goto ldv_43029;
  } else {

  }
#line 1274
  if ((unsigned int )*((unsigned short *)odev + 982UL) == 0U && (unsigned int )*((unsigned char *)odev + 1965UL) == 0U) {
#line 1275
    goto ldv_43029;
  } else {

  }
#line 1276
  if ((unsigned int )*((unsigned char *)odev + 1966UL) != 0U) {
#line 1277
    tmp___0 = _drbd_may_sync_now(odev);
#line 1277
    if (tmp___0 != 0) {
#line 1278
      __ns.i = odev->state.i;
#line 1278
      __ns.ldv_33296.aftr_isp = 0U;
#line 1278
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1278
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_43029: 
#line 1270
  i = i + 1;
  ldv_43033: ;
#line 1270
  if ((unsigned int )i < minor_count) {
#line 1271
    goto ldv_43032;
  } else {

  }

#line 1283
  return (rv);
}
}
#line 1286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1288
  _raw_write_lock_irq(& global_state_lock);
#line 1289
  _drbd_resume_next(mdev);
#line 1290
  _raw_write_unlock_irq(& global_state_lock);
#line 1291
  return;
}
}
#line 1293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1295
  _raw_write_lock_irq(& global_state_lock);
#line 1296
  _drbd_pause_after(mdev);
#line 1297
  _raw_write_unlock_irq(& global_state_lock);
#line 1298
  return;
}
}
#line 1300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1304
  if (o_minor == -1) {
#line 1305
    return (101);
  } else {

  }
#line 1306
  if (o_minor < -1) {
#line 1307
    return (132);
  } else {
#line 1306
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1306
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1307
      return (132);
    } else {

    }
  }
#line 1310
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_43046: ;
#line 1312
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1313
    return (133);
  } else {

  }
#line 1316
  if (odev->sync_conf.after == -1) {
#line 1317
    return (101);
  } else {

  }
#line 1320
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1321
  goto ldv_43046;
}
}
#line 1324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1329
  _raw_write_lock_irq(& global_state_lock);
#line 1330
  retcode = sync_after_error(mdev, na);
#line 1331
  if (retcode == 101) {
#line 1332
    mdev->sync_conf.after = na;
    ldv_43053: 
#line 1334
    changes = _drbd_pause_after(mdev);
#line 1335
    tmp = _drbd_resume_next(mdev);
#line 1335
    changes = tmp | changes;
#line 1336
    if (changes != 0) {
#line 1337
      goto ldv_43053;
    } else {

    }

  } else {

  }
#line 1338
  _raw_write_unlock_irq(& global_state_lock);
#line 1339
  return (retcode);
}
}
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1344
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1345
  request_ping(mdev);
#line 1346
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1346
  if (tmp != 0 || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1346
    goto ldv_43058;
  } else {

  }
#line 1346
  tmp___0 = get_current();
#line 1346
  __wait.flags = 0U;
#line 1346
  __wait.private = (void *)tmp___0;
#line 1346
  __wait.func = & autoremove_wake_function;
#line 1346
  __wait.task_list.next = & __wait.task_list;
#line 1346
  __wait.task_list.prev = & __wait.task_list;
  ldv_43061: 
#line 1346
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1346
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1346
  if (tmp___1 != 0 || (int )mdev->state.ldv_33296.conn <= 9) {
#line 1346
    goto ldv_43060;
  } else {

  }
#line 1346
  schedule();
#line 1346
  goto ldv_43061;
  ldv_43060: 
#line 1346
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43058: ;
#line 1349
  return;
}
}
#line 1358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1363
  if ((int )mdev->state.ldv_33296.conn > 15) {
#line 1364
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1364
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1364
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1365
    return;
  } else {

  }
#line 1369
  drbd_rs_cancel_all(mdev);
#line 1371
  if ((unsigned int )side == 17U) {
#line 1375
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1376
    r = (r >> 8) & 255;
#line 1377
    if (r > 0) {
#line 1378
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1378
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1378
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1380
      val.i = 0U;
#line 1380
      val.ldv_33296.conn = 1U;
#line 1380
      mask.i = 0U;
#line 1380
      mask.ldv_33296.conn = 31U;
#line 1380
      drbd_force_state(mdev, mask, val);
#line 1381
      return;
    } else {

    }
  } else {

  }
#line 1385
  drbd_state_lock(mdev);
#line 1387
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1387
  if (tmp___3 == 0) {
#line 1388
    drbd_state_unlock(mdev);
#line 1389
    return;
  } else {

  }
#line 1392
  if ((unsigned int )side == 17U) {
#line 1393
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1397
    get_random_bytes((void *)(& uuid), 8);
#line 1398
    drbd_uuid_set(mdev, 1, uuid);
#line 1399
    drbd_send_sync_uuid(mdev, uuid);
#line 1401
    if ((unsigned int )*((unsigned char *)mdev + 1965UL) != 16U) {
#line 1401
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1401);
    } else {

    }
  }
#line 1404
  _raw_write_lock_irq(& global_state_lock);
#line 1405
  ns = mdev->state;
#line 1407
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1407
  ns.ldv_33296.aftr_isp = tmp___6 == 0;
#line 1409
  ns.ldv_33296.conn = (unsigned char )side;
#line 1411
  if ((unsigned int )side == 17U) {
#line 1412
    ns.ldv_33296.disk = 4U;
  } else {
#line 1414
    ns.ldv_33296.pdsk = 4U;
  }
#line 1416
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1417
  ns = mdev->state;
#line 1419
  if ((int )ns.ldv_33296.conn <= 9) {
#line 1420
    r = 0;
  } else {

  }
#line 1422
  if (r == 1) {
#line 1423
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1423
    mdev->rs_mark_left = tmp___7;
#line 1423
    mdev->rs_total = tmp___7;
#line 1425
    mdev->rs_failed = 0UL;
#line 1426
    mdev->rs_paused = 0UL;
#line 1427
    tmp___8 = jiffies;
#line 1427
    mdev->rs_mark_time = tmp___8;
#line 1427
    mdev->rs_start = tmp___8;
#line 1429
    mdev->rs_same_csum = 0UL;
#line 1430
    _drbd_pause_after(mdev);
  } else {

  }
#line 1432
  _raw_write_unlock_irq(& global_state_lock);
#line 1433
  put_ldev(mdev);
#line 1435
  if (r == 1) {
#line 1436
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 1436
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1436
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1436
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1441
    if (mdev->rs_total == 0UL) {
#line 1443
      ping_peer(mdev);
#line 1444
      drbd_resync_finished(mdev);
    } else {

    }
#line 1451
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1452
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1454
    drbd_md_sync(mdev);
  } else {

  }
#line 1456
  drbd_state_unlock(mdev);
#line 1457
  return;
}
}
#line 1459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1461
  mdev = thi->mdev;
#line 1462
  w = 0;
#line 1463
  work_list.next = & work_list;
#line 1463
  work_list.prev = & work_list;
#line 1464
  intr = 0;
#line 1466
  tmp = mdev_to_minor(mdev);
#line 1466
  tmp___0 = get_current();
#line 1466
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1468
  goto ldv_43084;
  ldv_43094: 
#line 1469
  drbd_thread_current_set_cpu(mdev);
#line 1471
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1471
  if (tmp___1 != 0) {
#line 1472
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1473
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1474
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1475
    mutex_unlock(& mdev->data.mutex);
#line 1477
    intr = down_interruptible(& mdev->data.work.s);
#line 1479
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1480
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1481
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1482
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1485
  if (intr != 0) {
#line 1486
    if (intr != -4) {
#line 1486
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1486
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1486
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1486);
    } else {

    }
#line 1487
    tmp___4 = get_current();
#line 1487
    flush_signals(tmp___4);
#line 1488
    tmp___5 = get_t_state(thi);
#line 1488
    _b = (unsigned int )tmp___5 == 1U;
#line 1488
    if (_b != 0) {
#line 1488
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1488
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1488
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1488);
    } else {

    }
#line 1488
    if (_b != 0) {
#line 1489
      goto ldv_43084;
    } else {

    }
#line 1490
    goto ldv_43085;
  } else {

  }
#line 1493
  tmp___8 = get_t_state(thi);
#line 1493
  if ((unsigned int )tmp___8 != 1U) {
#line 1494
    goto ldv_43085;
  } else {

  }
#line 1499
  w = 0;
#line 1500
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1501
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1501
  _b___0 = tmp___9 != 0;
#line 1501
  if (_b___0 != 0) {
#line 1501
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1501
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1501
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1501);
  } else {

  }
#line 1501
  if (_b___0 != 0) {
#line 1513
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1514
    goto ldv_43084;
  } else {

  }
#line 1516
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1516
  w = (struct drbd_work *)__mptr;
#line 1517
  list_del_init(& w->list);
#line 1518
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1520
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_33296.conn <= 9);
#line 1520
  if (tmp___12 == 0) {
#line 1522
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1524
      val.i = 0U;
#line 1524
      val.ldv_33296.conn = 5U;
#line 1524
      mask.i = 0U;
#line 1524
      mask.ldv_33296.conn = 31U;
#line 1524
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_43084: 
#line 1468
  tmp___13 = get_t_state(thi);
#line 1468
  if ((unsigned int )tmp___13 == 1U) {
#line 1469
    goto ldv_43094;
  } else {

  }
  ldv_43085: 
#line 1527
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1527
  if (tmp___16 == 0) {
#line 1527
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1527);
  } else {

  }
#line 1528
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1528
  if (tmp___19 == 0) {
#line 1528
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1528
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1528
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1528);
  } else {

  }
#line 1530
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1531
  i = 0;
#line 1532
  goto ldv_43101;
  ldv_43100: 
#line 1533
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1534
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1536
  goto ldv_43098;
  ldv_43097: 
#line 1537
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1537
  w = (struct drbd_work *)__mptr___0;
#line 1538
  list_del_init(& w->list);
#line 1539
  (*(w->cb))(mdev, w, 1);
#line 1540
  i = i + 1;
  ldv_43098: 
#line 1536
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1536
  if (tmp___20 == 0) {
#line 1537
    goto ldv_43097;
  } else {

  }
#line 1543
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_43101: 
#line 1532
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1532
  if (tmp___21 == 0) {
#line 1533
    goto ldv_43100;
  } else {

  }
#line 1545
  sema_init(& mdev->data.work.s, 0);
#line 1551
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1553
  if ((unsigned int )*((unsigned char *)mdev + 1965UL) != 0U || (unsigned int )*((unsigned short *)mdev + 982UL) != 0U) {
#line 1553
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1553
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1553
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1553);
  } else {

  }
#line 1556
  drbd_thread_stop(& mdev->receiver);
#line 1557
  drbd_mdev_cleanup(mdev);
#line 1559
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1559
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1559
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1561
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1562
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1563
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1565
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 348 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 565 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 567
  h->next = 0;
#line 568
  h->pprev = 0;
#line 569
  return;
}
}
#line 571 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 573
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 581 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 583
  next = n->next;
#line 584
  pprev = n->pprev;
#line 585
  *pprev = next;
#line 586
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 587
    next->pprev = pprev;
  } else {

  }
#line 588
  return;
}
}
#line 597 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 599
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 599
  if (tmp == 0) {
#line 600
    __hlist_del(n);
#line 601
    INIT_HLIST_NODE(n);
  } else {

  }
#line 603
  return;
}
}
#line 605 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 607
  first = h->first;
#line 608
  n->next = first;
#line 609
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 610
    first->pprev = & n->next;
  } else {

  }
#line 611
  h->first = n;
#line 612
  n->pprev = & h->first;
#line 613
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5735.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5735.rlock);
#line 325
  return;
}
}
#line 134 "include/linux/time.h"
extern void do_gettimeofday(struct timeval * ) ;
#line 127 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 230 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 231 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 233
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 235
extern void sock_release(struct socket * ) ;
#line 238
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13409: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13409;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___1(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 334 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17178: ;
#line 63
    goto ldv_17178;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17179: ;
#line 65
    goto ldv_17179;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17180: ;
#line 66
    goto ldv_17180;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2286 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2288
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2288
  return (tmp);
}
}
#line 2312 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2314
  tmp = test_tsk_thread_flag(p, 2);
#line 2314
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2314
  return ((int )tmp___0);
}
}
#line 283 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 486 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 489 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 491
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  __might_sleep("include/linux/highmem.h", 60, 0);
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 64 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 66
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 775 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 561 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 563
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 576
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 588
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1132
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1136
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1142
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1152
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1154
void tl_clear(struct drbd_conf *mdev ) ;
#line 1156
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1159
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1160
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1163
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1165
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1174
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1176
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1177
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1181
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1183
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1200
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1202
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1223
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1224
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1225
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1406
mempool_t *drbd_ee_mempool ;
#line 1408
struct page *drbd_pp_pool ;
#line 1409
spinlock_t drbd_pp_lock ;
#line 1410
int drbd_pp_vacant ;
#line 1411
wait_queue_head_t drbd_pp_wait ;
#line 1431
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1433
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1434
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1435
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1436
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1438
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1491
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1498
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1500
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1504
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1536
  val = 1;
#line 1537
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1539
  return;
}
}
#line 1541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1543
  val = 1;
#line 1544
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1546
  return;
}
}
#line 1557
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1560
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1586
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1672
  page = e->pages;
#line 1673
  goto ldv_42511;
  ldv_42510: 
#line 1674
  tmp = page_count(page);
#line 1674
  if (tmp > 1) {
#line 1675
    return (1);
  } else {

  }
#line 1673
  page = page_chain_next(page);
  ldv_42511: ;
#line 1673
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1673
    tmp___0 = page_chain_next(page);
#line 1673
    __builtin_prefetch((void const   *)tmp___0);
#line 1673
    if (1 != 0) {
#line 1674
      goto ldv_42510;
    } else {
#line 1676
      goto ldv_42512;
    }
  } else {

  }
  ldv_42512: ;
#line 1677
  return (0);
}
}
#line 1716 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1720
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1720
  return (tmp);
}
}
#line 1774 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1776
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1779
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1782
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1820
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1824
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1824
  if (tmp___1 != 0UL) {
#line 1824
    __min1 = 34359738368UL;
#line 1824
    tmp___0 = drbd_md_first_sector(bdev);
#line 1824
    __min2 = tmp___0;
#line 1824
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1824
    s = 0UL;
  }
#line 1827
  goto ldv_42583;
  case -2: 
#line 1829
  __min1___0 = 34359738368UL;
#line 1829
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1829
  __min2___0 = tmp___2;
#line 1829
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1832
  __min1___1 = s;
#line 1832
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1832
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1835
  goto ldv_42583;
  default: 
#line 1837
  __min1___2 = 8587575296UL;
#line 1837
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1837
  __min2___2 = tmp___3;
#line 1837
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42583: ;
#line 1840
  return (s);
}
}
#line 1881 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1884
  tmp = spinlock_check(& q->q_lock);
#line 1884
  flags = _raw_spin_lock_irqsave(tmp);
#line 1885
  list_add(& w->list, & q->q);
#line 1886
  up(& q->s);
#line 1888
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1889
  return;
}
}
#line 1921 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1924
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1924
  return (tmp);
}
}
#line 1927 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1930
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1930
  return (tmp);
}
}
#line 2012 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2014
  atomic_inc(& mdev->unacked_cnt);
#line 2015
  return;
}
}
#line 2028 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2030
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2030
  if (tmp != 0) {
#line 2031
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2032
  return;
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2044
  atomic_inc(& mdev->net_cnt);
#line 2045
  have_net_conf = (int )mdev->state.ldv_33296.conn > 1;
#line 2046
  if (have_net_conf == 0) {
#line 2047
    put_net_conf(mdev);
  } else {

  }
#line 2048
  return (have_net_conf);
}
}
#line 2269 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2271
  mdev->ed_uuid = val;
#line 2272
  return;
}
}
#line 2274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2281
  return ((int )a - (int )b);
}
}
#line 2290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2293
  spin_lock(& mdev->peer_seq_lock);
#line 2294
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2294
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2295
  mdev->peer_seq = m;
#line 2296
  spin_unlock(& mdev->peer_seq_lock);
#line 2297
  if (m == new_seq) {
#line 2298
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2299
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_42844: ;
#line 207
    goto ldv_42844;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_42849: ;
#line 216
    goto ldv_42849;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_42867;
  ldv_42866: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_42867: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_42866;
      } else {
#line 240
        goto ldv_42868;
      }
    } else {
#line 240
      goto ldv_42868;
    }
  } else {

  }
  ldv_42868: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_42914: ;
#line 162
  goto ldv_42914;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 73
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 75
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 76
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 81
  spin_lock(& mdev->epoch_lock);
#line 82
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 82
  prev = (struct drbd_epoch *)__mptr;
#line 83
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 84
    prev = 0;
  } else {

  }
#line 85
  spin_unlock(& mdev->epoch_lock);
#line 86
  return (prev);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 105
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 105
  if (tmp___0 != 0L) {
#line 105
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (105), "i" (12UL));
    ldv_43004: ;
#line 105
    goto ldv_43004;
  } else {

  }
#line 106
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 106
  if (tmp___1 != 0L) {
#line 106
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (106), "i" (12UL));
    ldv_43005: ;
#line 106
    goto ldv_43005;
  } else {

  }
#line 108
  page = *head;
#line 109
  goto ldv_43008;
  ldv_43007: 
#line 110
  tmp = page_chain_next(page);
#line 111
  n = n - 1;
#line 111
  if (n == 0) {
#line 112
    goto ldv_43006;
  } else {

  }
#line 113
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 115
    return (0);
  } else {

  }
#line 116
  page = tmp;
  ldv_43008: ;
#line 109
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 110
    goto ldv_43007;
  } else {

  }
  ldv_43006: 
#line 120
  page->ldv_12001.ldv_11998.private = 0UL;
#line 122
  page = *head;
#line 123
  *head = tmp;
#line 124
  return (page);
}
}
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 133
  i = 1;
#line 134
  goto ldv_43016;
  ldv_43015: 
#line 135
  i = i + 1;
#line 135
  page = tmp;
  ldv_43016: 
#line 134
  tmp = page_chain_next(page);
#line 134
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 135
    goto ldv_43015;
  } else {

  }

#line 136
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 137
    *len = i;
  } else {

  }
#line 138
  return (page);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 144
  i = 0;
#line 145
  goto ldv_43025;
  ldv_43024: 
#line 146
  put_page(page);
#line 147
  i = i + 1;
#line 145
  page = tmp;
  ldv_43025: ;
#line 145
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    tmp = page_chain_next(page);
#line 145
    if (1 != 0) {
#line 146
      goto ldv_43024;
    } else {
#line 148
      goto ldv_43026;
    }
  } else {

  }
  ldv_43026: ;
#line 149
  return (i);
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 157
  tmp = page_chain_tail(chain_first, 0);
#line 158
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 158
  if (tmp___0 != 0L) {
#line 158
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (158), "i" (12UL));
    ldv_43033: ;
#line 158
    goto ldv_43033;
  } else {

  }
#line 162
  chain_last->ldv_12001.ldv_11998.private = (unsigned long )*head;
#line 163
  *head = chain_first;
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 168
  page = 0;
#line 169
  tmp = 0;
#line 170
  i = 0;
#line 174
  if (drbd_pp_vacant >= number) {
#line 175
    spin_lock(& drbd_pp_lock);
#line 176
    page = page_chain_del(& drbd_pp_pool, number);
#line 177
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 178
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 179
    spin_unlock(& drbd_pp_lock);
#line 180
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 181
      return (page);
    } else {

    }
  } else {

  }
#line 187
  i = 0;
#line 187
  goto ldv_43043;
  ldv_43042: 
#line 188
  tmp = alloc_pages(514U, 0U);
#line 189
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 190
    goto ldv_43041;
  } else {

  }
#line 191
  tmp->ldv_12001.ldv_11998.private = (unsigned long )page;
#line 192
  page = tmp;
#line 187
  i = i + 1;
  ldv_43043: ;
#line 187
  if (i < number) {
#line 188
    goto ldv_43042;
  } else {

  }
  ldv_43041: ;
#line 195
  if (i == number) {
#line 196
    return (page);
  } else {

  }
#line 201
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 202
    tmp = page_chain_tail(page, 0);
#line 203
    spin_lock(& drbd_pp_lock);
#line 204
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 205
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 206
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 208
  return (0);
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 216
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 216
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 217
    drbd_kick_lo(mdev);
  } else {

  }
#line 218
  return;
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 230
  le = mdev->net_ee.next;
#line 230
  tle = le->next;
#line 230
  goto ldv_43058;
  ldv_43057: 
#line 231
  __mptr = (struct list_head  const  *)le;
#line 231
  e = (struct drbd_epoch_entry *)__mptr;
#line 232
  tmp = drbd_ee_has_active_page___0(e);
#line 232
  if (tmp != 0) {
#line 233
    goto ldv_43056;
  } else {

  }
#line 234
  list_move(le, to_be_freed);
#line 230
  le = tle;
#line 230
  tle = le->next;
  ldv_43058: ;
#line 230
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 231
    goto ldv_43057;
  } else {

  }
  ldv_43056: ;
#line 235
  return;
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 240
  reclaimed.next = & reclaimed;
#line 240
  reclaimed.prev = & reclaimed;
#line 243
  maybe_kick_lo(mdev);
#line 244
  spin_lock_irq(& mdev->req_lock);
#line 245
  reclaim_net_ee(mdev, & reclaimed);
#line 246
  spin_unlock_irq(& mdev->req_lock);
#line 248
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 248
  e = (struct drbd_epoch_entry *)__mptr;
#line 248
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 248
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 248
  goto ldv_43072;
  ldv_43071: 
#line 249
  drbd_free_ee(mdev, e);
#line 248
  e = t;
#line 248
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 248
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43072: ;
#line 248
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 249
    goto ldv_43071;
  } else {

  }

#line 253
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 266
  page = 0;
#line 267
  tmp = get_current();
#line 267
  wait.flags = 0U;
#line 267
  wait.private = (void *)tmp;
#line 267
  wait.func = & autoremove_wake_function;
#line 267
  wait.task_list.next = & wait.task_list;
#line 267
  wait.task_list.prev = & wait.task_list;
#line 271
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 271
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 272
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 274
  goto ldv_43083;
  ldv_43082: 
#line 275
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 277
  drbd_kick_lo_and_reclaim_net(mdev);
#line 279
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 279
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 280
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 281
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 282
      goto ldv_43081;
    } else {

    }
  } else {

  }
#line 285
  if (! retry) {
#line 286
    goto ldv_43081;
  } else {

  }
#line 288
  tmp___4 = get_current();
#line 288
  tmp___5 = signal_pending(tmp___4);
#line 288
  if (tmp___5 != 0) {
#line 289
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 289
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 289
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 290
    goto ldv_43081;
  } else {

  }
#line 293
  schedule();
  ldv_43083: ;
#line 274
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 275
    goto ldv_43082;
  } else {

  }
  ldv_43081: 
#line 295
  finish_wait(& drbd_pp_wait, & wait);
#line 297
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 298
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 299
  return (page);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int i ;
  struct page *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 309
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 310
    i = page_chain_free(page);
  } else {
#line 313
    tmp = page_chain_tail(page, & i);
#line 314
    spin_lock(& drbd_pp_lock);
#line 315
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 316
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 317
    spin_unlock(& drbd_pp_lock);
  }
#line 319
  atomic_sub(i, & mdev->pp_in_use);
#line 320
  i = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 321
  if (i < 0) {
#line 322
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
    printk("<4>%s %s: ASSERTION FAILED: pp_in_use: %d < 0\n", tmp___1, tmp___0, i);
  } else {

  }
#line 323
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 324
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 349
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 351
  tmp = drbd_insert_fault(mdev, 8U);
#line 351
  if (tmp != 0) {
#line 352
    return (0);
  } else {

  }
#line 354
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 354
  e = (struct drbd_epoch_entry *)tmp___0;
#line 355
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 356
    if ((gfp_mask & 512U) == 0U) {
#line 357
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 357
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 357
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 358
    return (0);
  } else {

  }
#line 361
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 362
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 363
    goto fail;
  } else {

  }
#line 365
  INIT_HLIST_NODE(& e->colision);
#line 366
  e->epoch = 0;
#line 367
  e->mdev = mdev;
#line 368
  e->pages = page;
#line 369
  atomic_set(& e->pending_bios, 0);
#line 370
  e->size = data_size;
#line 371
  e->flags = 0UL;
#line 372
  e->sector = sector;
#line 373
  e->sector = sector;
#line 374
  e->block_id = id;
#line 376
  return (e);
  fail: 
#line 379
  mempool_free((void *)e, drbd_ee_mempool);
#line 380
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 385
  drbd_pp_free(mdev, e->pages);
#line 386
  tmp___1 = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 386
  if (tmp___1 != 0) {
#line 386
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    printk("<3>%s %s: ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           386);
  } else {

  }
#line 387
  tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 387
  if (tmp___4 == 0) {
#line 387
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 387
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 387
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___3,
           tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           387);
  } else {

  }
#line 388
  mempool_free((void *)e, drbd_ee_mempool);
#line 389
  return;
}
}
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 393
  work_list.next = & work_list;
#line 393
  work_list.prev = & work_list;
#line 395
  count = 0;
#line 397
  spin_lock_irq(& mdev->req_lock);
#line 398
  list_splice_init(list, & work_list);
#line 399
  spin_unlock_irq(& mdev->req_lock);
#line 401
  __mptr = (struct list_head  const  *)work_list.next;
#line 401
  e = (struct drbd_epoch_entry *)__mptr;
#line 401
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 401
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 401
  goto ldv_43120;
  ldv_43119: 
#line 402
  drbd_free_ee(mdev, e);
#line 403
  count = count + 1;
#line 401
  e = t;
#line 401
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 401
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43120: ;
#line 401
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 402
    goto ldv_43119;
  } else {

  }

#line 405
  return (count);
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 420
  work_list.next = & work_list;
#line 420
  work_list.prev = & work_list;
#line 421
  reclaimed.next = & reclaimed;
#line 421
  reclaimed.prev = & reclaimed;
#line 423
  ok = (int )mdev->state.ldv_33296.conn > 8;
#line 425
  spin_lock_irq(& mdev->req_lock);
#line 426
  reclaim_net_ee(mdev, & reclaimed);
#line 427
  list_splice_init(& mdev->done_ee, & work_list);
#line 428
  spin_unlock_irq(& mdev->req_lock);
#line 430
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 430
  e = (struct drbd_epoch_entry *)__mptr;
#line 430
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 430
  goto ldv_43137;
  ldv_43136: 
#line 431
  drbd_free_ee(mdev, e);
#line 430
  e = t;
#line 430
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 430
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43137: ;
#line 430
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 431
    goto ldv_43136;
  } else {

  }
#line 437
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 437
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 437
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 437
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 437
  goto ldv_43146;
  ldv_43145: 
#line 439
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 439
  ok = tmp != 0 && ok != 0;
#line 440
  drbd_free_ee(mdev, e);
#line 437
  e = t;
#line 437
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 437
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_43146: ;
#line 437
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 438
    goto ldv_43145;
  } else {

  }
#line 442
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 444
  return (ok);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 449
  tmp = get_current();
#line 449
  wait.flags = 0U;
#line 449
  wait.private = (void *)tmp;
#line 449
  wait.func = & autoremove_wake_function;
#line 449
  wait.task_list.next = & wait.task_list;
#line 449
  wait.task_list.prev = & wait.task_list;
#line 453
  goto ldv_43154;
  ldv_43153: 
#line 454
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 455
  spin_unlock_irq(& mdev->req_lock);
#line 456
  drbd_kick_lo(mdev);
#line 457
  schedule();
#line 458
  finish_wait(& mdev->ee_wait, & wait);
#line 459
  spin_lock_irq(& mdev->req_lock);
  ldv_43154: 
#line 453
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 453
  if (tmp___0 == 0) {
#line 454
    goto ldv_43153;
  } else {

  }

#line 458
  return;
}
}
#line 463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 465
  spin_lock_irq(& mdev->req_lock);
#line 466
  _drbd_wait_ee_list_empty(mdev, head);
#line 467
  spin_unlock_irq(& mdev->req_lock);
#line 468
  return;
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 475
  sk = sock->sk;
#line 476
  err = 0;
#line 478
  *what = "listen";
#line 479
  err = (*((sock->ops)->listen))(sock, 5);
#line 480
  if (err < 0) {
#line 481
    goto out;
  } else {

  }
#line 483
  *what = "sock_create_lite";
#line 484
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 486
  if (err < 0) {
#line 487
    goto out;
  } else {

  }
#line 489
  *what = "accept";
#line 490
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 491
  if (err < 0) {
#line 492
    sock_release(*newsock);
#line 493
    *newsock = 0;
#line 494
    goto out;
  } else {

  }
#line 496
  (*newsock)->ops = sock->ops;
  out: ;
#line 499
  return (err);
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 506
  iov.iov_base = buf;
#line 506
  iov.iov_len = size;
#line 510
  msg.msg_name = 0;
#line 510
  msg.msg_namelen = 0;
#line 510
  msg.msg_iov = (struct iovec *)(& iov);
#line 510
  msg.msg_iovlen = 1UL;
#line 510
  msg.msg_control = 0;
#line 510
  msg.msg_controllen = 0UL;
#line 510
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 517
  tmp = current_thread_info();
#line 517
  oldfs = tmp->addr_limit;
#line 518
  tmp___0 = current_thread_info();
#line 518
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 518
  tmp___0->addr_limit = __constr_expr_0;
#line 519
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 520
  tmp___1 = current_thread_info();
#line 520
  tmp___1->addr_limit = oldfs;
#line 522
  return (rv);
}
}
#line 525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 528
  iov.iov_base = buf;
#line 528
  iov.iov_len = size;
#line 532
  msg.msg_name = 0;
#line 532
  msg.msg_namelen = 0;
#line 532
  msg.msg_iov = (struct iovec *)(& iov);
#line 532
  msg.msg_iovlen = 1UL;
#line 532
  msg.msg_control = 0;
#line 532
  msg.msg_controllen = 0UL;
#line 532
  msg.msg_flags = 16640U;
#line 539
  tmp = current_thread_info();
#line 539
  oldfs = tmp->addr_limit;
#line 540
  tmp___0 = current_thread_info();
#line 540
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 540
  tmp___0->addr_limit = __constr_expr_0;
  ldv_43192: 
#line 543
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 544
  if ((size_t )rv == size) {
#line 545
    goto ldv_43191;
  } else {

  }
#line 552
  if (rv < 0) {
#line 553
    if (rv == -104) {
#line 554
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 554
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 554
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 555
    if (rv != -512) {
#line 556
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 556
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 556
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 557
    goto ldv_43191;
  } else
#line 558
  if (rv == 0) {
#line 559
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 559
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 559
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 560
    goto ldv_43191;
  } else {
#line 566
    goto ldv_43191;
  }
#line 568
  goto ldv_43192;
  ldv_43191: 
#line 570
  tmp___7 = current_thread_info();
#line 570
  tmp___7->addr_limit = oldfs;
#line 572
  if ((size_t )rv != size) {
#line 573
    val.i = 0U;
#line 573
    val.ldv_33296.conn = 4U;
#line 573
    mask.i = 0U;
#line 573
    mask.ldv_33296.conn = 31U;
#line 573
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 575
  return (rv);
}
}
#line 578 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 584
  disconnect_on_error = 1;
#line 586
  tmp = get_net_conf(mdev);
#line 586
  if (tmp == 0) {
#line 587
    return (0);
  } else {

  }
#line 589
  what = "sock_create_kern";
#line 590
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 592
  if (err < 0) {
#line 593
    sock = 0;
#line 594
    goto out;
  } else {

  }
#line 597
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 597
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 597
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 607
  __min1 = (mdev->net_conf)->my_addr_len;
#line 607
  __min2 = 28;
#line 607
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 607
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 609
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 610
    src_in6.sin6_port = 0U;
  } else {
#line 612
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 614
  what = "bind before connect";
#line 615
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 618
  if (err < 0) {
#line 619
    goto out;
  } else {

  }
#line 623
  disconnect_on_error = 0;
#line 624
  what = "connect";
#line 625
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 630
  if (err < 0) {
#line 631
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 632
      sock_release(sock);
#line 633
      sock = 0;
    } else {

    }
#line 635
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 642
    disconnect_on_error = 0;
#line 643
    goto ldv_43224;
    default: 
#line 645
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 645
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 645
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_43224: ;
#line 647
    if (disconnect_on_error != 0) {
#line 648
      val.i = 0U;
#line 648
      val.ldv_33296.conn = 1U;
#line 648
      mask.i = 0U;
#line 648
      mask.ldv_33296.conn = 31U;
#line 648
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 650
  put_net_conf(mdev);
#line 651
  return (sock);
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 657
  s_estab = 0;
#line 660
  tmp = get_net_conf(mdev);
#line 660
  if (tmp == 0) {
#line 661
    return (0);
  } else {

  }
#line 663
  what = "sock_create_kern";
#line 664
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 666
  if (err != 0) {
#line 667
    s_listen = 0;
#line 668
    goto out;
  } else {

  }
#line 671
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 672
  tmp___0 = random32();
#line 672
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 674
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 675
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 676
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 678
  what = "bind before listen";
#line 679
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 682
  if (err < 0) {
#line 683
    goto out;
  } else {

  }
#line 685
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 688
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 689
    sock_release(s_listen);
  } else {

  }
#line 690
  if (err < 0) {
#line 691
    if ((err != -11 && err != -4) && err != -512) {
#line 692
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 693
      val.i = 0U;
#line 693
      val.ldv_33296.conn = 1U;
#line 693
      mask.i = 0U;
#line 693
      mask.ldv_33296.conn = 31U;
#line 693
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 696
  put_net_conf(mdev);
#line 698
  return (s_estab);
}
}
#line 701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 704
  h = & mdev->data.sbuf.header;
#line 706
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 706
  return (tmp);
}
}
#line 709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 711
  h = & mdev->data.sbuf.header;
#line 714
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 716
  if (rr == 8 && h->magic == 1728214147U) {
#line 717
    tmp = __fswab16((int )h->command);
#line 717
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 719
  return (65535);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 732
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 733
    return (0);
  } else {

  }
#line 735
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 737
  if (rr > 0 || rr == -11) {
#line 738
    return (1);
  } else {
#line 740
    sock_release(*sock);
#line 741
    *sock = 0;
#line 742
    return (0);
  }
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___31 ;
  int tmp___32 ;

  {
#line 759
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 759
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           759);
  } else {

  }
#line 761
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 761
  if (tmp___3 != 0) {
#line 762
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 762
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 762
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 764
  val.i = 0U;
#line 764
  val.ldv_33296.conn = 8U;
#line 764
  mask.i = 0U;
#line 764
  mask.ldv_33296.conn = 31U;
#line 764
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 764
  if (tmp___4 <= 0) {
#line 765
    return (-2);
  } else {

  }
#line 767
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 769
  sock = 0;
#line 770
  msock = 0;
  ldv_43283: 
#line 773
  try = 0;
  ldv_43275: 
#line 775
  s = drbd_try_connect(mdev);
#line 776
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 777
    goto ldv_43274;
  } else {
#line 776
    try = try + 1;
#line 776
    if (try > 2) {
#line 777
      goto ldv_43274;
    } else {

    }
  }
#line 779
  tmp___5 = get_current();
#line 779
  tmp___5->state = 1L;
#line 780
  schedule_timeout(25L);
#line 781
  goto ldv_43275;
  ldv_43274: ;
#line 783
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 784
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 785
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 786
      sock = s;
#line 787
      s = 0;
    } else
#line 788
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 789
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 790
      msock = s;
#line 791
      s = 0;
    } else {
#line 793
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 793
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 793
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 794
      goto out_release_sockets;
    }
  } else {

  }
#line 798
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 799
    tmp___8 = get_current();
#line 799
    tmp___8->state = 1L;
#line 800
    schedule_timeout(25L);
#line 801
    ok = drbd_socket_okay(mdev, & sock);
#line 802
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 802
    ok = tmp___9 != 0 && ok != 0;
#line 803
    if (ok != 0) {
#line 804
      goto ldv_43277;
    } else {

    }
  } else {

  }
  retry: 
#line 808
  s = drbd_wait_for_connect(mdev);
#line 809
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 810
    tmp___10 = drbd_recv_fp(mdev, s);
#line 810
    try = (int )tmp___10;
#line 811
    drbd_socket_okay(mdev, & sock);
#line 812
    drbd_socket_okay(mdev, & msock);
#line 813
    switch (try) {
    case 65522: ;
#line 815
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 816
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 816
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 816
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 817
      sock_release(sock);
    } else {

    }
#line 819
    sock = s;
#line 820
    goto ldv_43280;
    case 65521: ;
#line 822
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 823
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 823
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 823
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 824
      sock_release(msock);
    } else {

    }
#line 826
    msock = s;
#line 827
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 828
    goto ldv_43280;
    default: 
#line 830
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 830
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 830
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 831
    sock_release(s);
#line 832
    tmp___17 = random32();
#line 832
    if ((int )tmp___17 & 1) {
#line 833
      goto retry;
    } else {

    }
    }
    ldv_43280: ;
  } else {

  }
#line 837
  if ((int )mdev->state.ldv_33296.conn <= 1) {
#line 838
    goto out_release_sockets;
  } else {

  }
#line 839
  tmp___20 = get_current();
#line 839
  tmp___21 = signal_pending(tmp___20);
#line 839
  if (tmp___21 != 0) {
#line 840
    tmp___18 = get_current();
#line 840
    flush_signals(tmp___18);
#line 841
    __asm__  volatile   ("": : : "memory");
#line 842
    tmp___19 = get_t_state(& mdev->receiver);
#line 842
    if ((unsigned int )tmp___19 == 2U) {
#line 843
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 846
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 847
    ok = drbd_socket_okay(mdev, & sock);
#line 848
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 848
    ok = tmp___22 != 0 && ok != 0;
#line 849
    if (ok != 0) {
#line 850
      goto ldv_43277;
    } else {

    }
  } else {

  }
#line 852
  goto ldv_43283;
  ldv_43277: 
#line 854
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 855
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 857
  (sock->sk)->sk_allocation = 16U;
#line 858
  (msock->sk)->sk_allocation = 16U;
#line 860
  (sock->sk)->sk_priority = 4U;
#line 861
  (msock->sk)->sk_priority = 6U;
#line 863
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 864
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 865
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 868
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 869
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 870
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 878
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 878
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 878
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 881
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 882
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 886
  drbd_tcp_nodelay(sock);
#line 887
  drbd_tcp_nodelay(msock);
#line 889
  mdev->data.socket = sock;
#line 890
  mdev->meta.socket = msock;
#line 891
  mdev->last_received = jiffies;
#line 893
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 893
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           893);
  } else {

  }
#line 895
  h = drbd_do_handshake(mdev);
#line 896
  if (h <= 0) {
#line 897
    return (h);
  } else {

  }
#line 899
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 901
    tmp___26 = drbd_do_auth(mdev);
#line 901
    switch (tmp___26) {
    case -1: 
#line 903
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 903
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 903
    printk("<3>%s %s: Authentication of peer failed\n", tmp___28, tmp___27);
#line 904
    return (-1);
    case 0: 
#line 906
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    printk("<3>%s %s: Authentication of peer failed, trying again.\n", tmp___30, tmp___29);
#line 907
    return (0);
    }
  } else {

  }
#line 911
  val___0.i = 0U;
#line 911
  val___0.ldv_33296.conn = 9U;
#line 911
  mask___0.i = 0U;
#line 911
  mask___0.ldv_33296.conn = 31U;
#line 911
  tmp___31 = drbd_request_state(mdev, mask___0, val___0);
#line 911
  if (tmp___31 <= 0) {
#line 912
    return (0);
  } else {

  }
#line 914
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 915
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 917
  atomic_set(& mdev->packet_seq, 0);
#line 918
  mdev->peer_seq = 0U;
#line 920
  drbd_thread_start(& mdev->asender);
#line 922
  tmp___32 = drbd_send_protocol(mdev);
#line 922
  if (tmp___32 == 0) {
#line 923
    return (-1);
  } else {

  }
#line 924
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 925
  drbd_send_sizes(mdev, 0, 0);
#line 926
  drbd_send_uuids(mdev);
#line 927
  drbd_send_state(mdev);
#line 928
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 929
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 931
  return (1);
  out_release_sockets: ;
#line 934
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 935
    sock_release(sock);
  } else {

  }
#line 936
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 937
    sock_release(msock);
  } else {

  }
#line 938
  return (-1);
}
}
#line 941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 945
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 947
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 947
  if (tmp___1 != 0L) {
#line 948
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 948
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 948
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 949
    return (0);
  } else {

  }
#line 951
  tmp___2 = __fswab16((int )h->command);
#line 951
  h->command = tmp___2;
#line 952
  tmp___3 = __fswab16((int )h->length);
#line 952
  h->length = tmp___3;
#line 953
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 953
  if (tmp___7 != 0L) {
#line 954
    tmp___4 = __fswab32(h->magic);
#line 954
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 954
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 954
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 957
    return (0);
  } else {

  }
#line 959
  mdev->last_received = jiffies;
#line 961
  return (1);
}
}
#line 964 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 968
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 968
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 968
    if (tmp___1 != 0) {
#line 969
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 971
      if (rv != 0) {
#line 972
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 972
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 972
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 976
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 978
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 981
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 981
  return (tmp___2);
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 986
  fw = (struct flush_work *)w;
#line 987
  epoch = fw->epoch;
#line 989
  kfree((void const   *)w);
#line 991
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 991
  if (tmp == 0) {
#line 992
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 994
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_33296.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 997
  return (1);
}
}
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 1012
  schedule_flush = 0;
#line 1013
  rv = FE_STILL_LIVE;
#line 1015
  spin_lock(& mdev->epoch_lock);
  ldv_43329: 
#line 1017
  next_epoch = 0;
#line 1018
  finish = 0;
#line 1020
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1022
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1024
  atomic_dec(& epoch->active);
#line 1025
  goto ldv_43318;
  case 1U: 
#line 1027
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1031
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1031
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1034
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1035
  goto ldv_43318;
  case 2U: 
#line 1037
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1038
  goto ldv_43318;
  case 3U: ;
#line 1041
  goto ldv_43318;
  }
  ldv_43318: ;
#line 1044
  if (epoch_size != 0) {
#line 1044
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1044
    if (tmp___3 == 0) {
#line 1044
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1044
      if (tmp___4 != 0) {
#line 1044
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1044
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1044
          if (tmp___5 == 0) {
#line 1050
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1050
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1054
              finish = 1;
#line 1055
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1050
            if (epoch_size == 1) {
#line 1050
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1050
              if (tmp___2 != 0) {
#line 1054
                finish = 1;
#line 1055
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1050
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1050
            if (((unsigned int )ev & 32U) != 0U) {
#line 1054
              finish = 1;
#line 1055
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1056
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1056
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1058
                atomic_inc(& epoch->active);
#line 1059
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1062
  if (finish != 0) {
#line 1063
    if (((unsigned int )ev & 32U) == 0U) {
#line 1064
      spin_unlock(& mdev->epoch_lock);
#line 1065
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1066
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1068
    atomic_dec(& mdev->unacked_cnt);
#line 1068
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1068
    if (tmp___9 < 0) {
#line 1068
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1068
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1068, tmp___6);
    } else {

    }
#line 1070
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1071
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1071
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1072
      list_del(& epoch->list);
#line 1073
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1074
      mdev->epochs = mdev->epochs - 1U;
#line 1075
      kfree((void const   *)epoch);
#line 1077
      if ((unsigned int )rv == 0U) {
#line 1078
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1080
      epoch->flags = 0UL;
#line 1081
      atomic_set(& epoch->epoch_size, 0);
#line 1083
      if ((unsigned int )rv == 0U) {
#line 1084
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1088
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1089
    goto ldv_43328;
  } else {

  }
#line 1091
  epoch = next_epoch;
#line 1092
  goto ldv_43329;
  ldv_43328: 
#line 1094
  spin_unlock(& mdev->epoch_lock);
#line 1096
  if (schedule_flush != 0) {
#line 1098
    tmp___10 = kmalloc___1(32UL, 32U);
#line 1098
    fw = (struct flush_work *)tmp___10;
#line 1099
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1100
      fw->w.cb = & w_flush;
#line 1101
      fw->epoch = epoch;
#line 1102
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1104
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1104
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1104
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1105
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1107
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1108
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1112
  return (rv);
}
}
#line 1120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1123
  write_ordering_str[0] = (char *)"none";
#line 1123
  write_ordering_str[1] = (char *)"drain";
#line 1123
  write_ordering_str[2] = (char *)"flush";
#line 1123
  write_ordering_str[3] = (char *)"barrier";
#line 1130
  pwo = mdev->write_ordering;
#line 1131
  _min1 = pwo;
#line 1131
  _min2 = wo;
#line 1131
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1132
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1133
    wo = WO_bdev_flush;
  } else {

  }
#line 1134
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1135
    wo = WO_drain_io;
  } else {

  }
#line 1136
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1137
    wo = WO_none;
  } else {

  }
#line 1138
  mdev->write_ordering = wo;
#line 1139
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1140
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1140
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1140
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1141
  return;
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1153
  bios = 0;
#line 1155
  page = e->pages;
#line 1156
  sector = e->sector;
#line 1157
  ds = e->size;
#line 1158
  n_bios = 0U;
#line 1159
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1166
  bio = bio_alloc(16U, (int )nr_pages);
#line 1167
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1168
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1168
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1168
    printk("<3>%s %s: submit_ee: Allocation of a bio failed\n", tmp___0, tmp);
#line 1169
    goto fail;
  } else {

  }
#line 1172
  bio->bi_sector = sector;
#line 1173
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1176
  bio->bi_rw = (unsigned long )rw;
#line 1177
  bio->bi_private = (void *)e;
#line 1178
  bio->bi_end_io = & drbd_endio_sec;
#line 1180
  bio->bi_next = bios;
#line 1181
  bios = bio;
#line 1182
  n_bios = n_bios + 1U;
#line 1184
  goto ldv_43362;
  ldv_43361: 
#line 1185
  __min1 = ds;
#line 1185
  __min2 = 4096U;
#line 1185
  len = __min1 < __min2 ? __min1 : __min2;
#line 1186
  tmp___2 = bio_add_page(bio, page, len, 0U);
#line 1186
  if (tmp___2 == 0) {
#line 1188
    tmp___1 = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1188
    if (tmp___1 != 0L) {
#line 1188
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1188), "i" (12UL));
      ldv_43360: ;
#line 1188
      goto ldv_43360;
    } else {

    }
#line 1189
    goto next_bio;
  } else {

  }
#line 1191
  ds = ds - len;
#line 1192
  sector = (sector_t )(len >> 9) + sector;
#line 1193
  nr_pages = nr_pages - 1U;
#line 1184
  page = page_chain_next(page);
  ldv_43362: ;
#line 1184
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1184
    tmp___3 = page_chain_next(page);
#line 1184
    __builtin_prefetch((void const   *)tmp___3);
#line 1184
    if (1 != 0) {
#line 1185
      goto ldv_43361;
    } else {
#line 1187
      goto ldv_43363;
    }
  } else {

  }
  ldv_43363: ;
#line 1195
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1195
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1195
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1195
    printk("<3>%s %s: ASSERT( page == NULL ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1195);
  } else {

  }
#line 1196
  if (ds != 0U) {
#line 1196
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1196
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1196
    printk("<3>%s %s: ASSERT( ds == 0 ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1196);
  } else {

  }
#line 1198
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_43364: 
#line 1200
  bio = bios;
#line 1201
  bios = bios->bi_next;
#line 1202
  bio->bi_next = 0;
#line 1205
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1206
    bio->bi_rw = bio->bi_rw & 0xffffffffffffff7fUL;
  } else {

  }
#line 1208
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1212
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1213
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffdfUL;
  } else {

  }
#line 1214
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1215
    goto ldv_43364;
  } else {

  }
#line 1215
  maybe_kick_lo(mdev);
#line 1216
  return (0);
  fail: ;
#line 1219
  goto ldv_43367;
  ldv_43366: 
#line 1220
  bio = bios;
#line 1221
  bios = bios->bi_next;
#line 1222
  bio_put(bio);
  ldv_43367: ;
#line 1219
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1220
    goto ldv_43366;
  } else {

  }

#line 1224
  return (-12);
}
}
#line 1233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;
  int tmp___2 ;

  {
#line 1235
  e = (struct drbd_epoch_entry *)w;
#line 1246
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1246
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1247
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1252
  e->w.cb = & e_end_block;
#line 1253
  tmp___2 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1253
  if (tmp___2 != 0) {
#line 1257
    e->w.cb = & w_e_reissue;
#line 1258
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1260
  return (1);
}
}
#line 1263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  enum finish_epoch tmp___4 ;
  void *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  enum finish_epoch tmp___9 ;
  int tmp___10 ;

  {
#line 1266
  p = (struct p_barrier *)h;
#line 1269
  _b = (unsigned int )h->length != 8U;
#line 1269
  if (_b != 0) {
#line 1269
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1269);
  } else {

  }
#line 1269
  if (_b != 0) {
#line 1269
    return (0);
  } else {

  }
#line 1271
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1272
  _b___0 = (int )h->length != rv;
#line 1272
  if (_b___0 != 0) {
#line 1272
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1272
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1272
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1272);
  } else {

  }
#line 1272
  if (_b___0 != 0) {
#line 1272
    return (0);
  } else {

  }
#line 1274
  inc_unacked(mdev);
#line 1276
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1277
    drbd_kick_lo(mdev);
  } else {

  }
#line 1279
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1280
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1280
  rv = (int )tmp___3;
#line 1287
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1290
  if (rv == 2) {
#line 1291
    return (1);
  } else {

  }
#line 1292
  goto ldv_43390;
  case 2U: ;
  case 1U: ;
#line 1296
  if (rv == 0) {
#line 1297
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1298
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1299
    tmp___4 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1299
    rv = (int )tmp___4;
  } else {

  }
#line 1301
  if (rv == 2) {
#line 1302
    return (1);
  } else {

  }
#line 1307
  goto ldv_43390;
  }
  ldv_43390: 
#line 1312
  tmp___5 = kmalloc___1(40UL, 16U);
#line 1312
  epoch = (struct drbd_epoch *)tmp___5;
#line 1313
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1314
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___7, tmp___6);
#line 1315
    tmp___8 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1315
    issue_flush = tmp___8 == 0;
#line 1316
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1317
    if (issue_flush != 0) {
#line 1318
      tmp___9 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1318
      rv = (int )tmp___9;
#line 1319
      if (rv == 2) {
#line 1320
        return (1);
      } else {

      }
    } else {

    }
#line 1323
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1325
    return (1);
  } else {

  }
#line 1328
  epoch->flags = 0UL;
#line 1329
  atomic_set(& epoch->epoch_size, 0);
#line 1330
  atomic_set(& epoch->active, 0);
#line 1332
  spin_lock(& mdev->epoch_lock);
#line 1333
  tmp___10 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1333
  if (tmp___10 != 0) {
#line 1334
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1335
    mdev->current_epoch = epoch;
#line 1336
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1339
    kfree((void const   *)epoch);
  }
#line 1341
  spin_unlock(& mdev->epoch_lock);
#line 1343
  return (1);
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int _b___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  struct page *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;

  {
#line 1351
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1351
  capacity = tmp;
#line 1355
  dig_in = mdev->int_dig_in;
#line 1356
  dig_vv = mdev->int_dig_vv;
#line 1359
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1359
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1359
    dgs = (int )tmp___0;
  } else {
#line 1359
    dgs = 0;
  }
#line 1362
  if (dgs != 0) {
#line 1363
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1364
    if (rr != dgs) {
#line 1365
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1365
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1365
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___2, tmp___1, rr, dgs);
#line 1367
      return (0);
    } else {

    }
  } else {

  }
#line 1371
  data_size = data_size - dgs;
#line 1373
  _b = (data_size & 511) != 0;
#line 1373
  if (_b != 0) {
#line 1373
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1373
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1373
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1373);
  } else {

  }
#line 1373
  if (_b != 0) {
#line 1373
    return (0);
  } else {

  }
#line 1374
  _b___0 = (unsigned int )data_size > 32768U;
#line 1374
  if (_b___0 != 0) {
#line 1374
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1374
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1374
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1374);
  } else {

  }
#line 1374
  if (_b___0 != 0) {
#line 1374
    return (0);
  } else {

  }
#line 1378
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1379
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1379
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1379
    printk("<3>%s %s: capacity: %llus < sector: %llus + size: %u\n", tmp___8, tmp___7,
           (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1382
    return (0);
  } else {

  }
#line 1388
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1389
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1390
    return (0);
  } else {

  }
#line 1392
  ds = data_size;
#line 1393
  page = e->pages;
#line 1394
  goto ldv_43419;
  ldv_43418: 
#line 1395
  __min1 = ds;
#line 1395
  __min2 = 4096;
#line 1395
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1396
  tmp___9 = kmap(page);
#line 1396
  data = (unsigned long *)tmp___9;
#line 1397
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1398
  tmp___12 = drbd_insert_fault(mdev, 9U);
#line 1398
  if (tmp___12 != 0) {
#line 1399
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1399
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1399
    printk("<3>%s %s: Fault injection: Corrupting data on receive\n", tmp___11, tmp___10);
#line 1400
    *data = ~ *data;
  } else {

  }
#line 1402
  kunmap(page);
#line 1403
  if ((unsigned int )rr != len) {
#line 1404
    drbd_free_ee(mdev, e);
#line 1405
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1405
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1405
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___14,
           tmp___13, rr, len);
#line 1407
    return (0);
  } else {

  }
#line 1409
  ds = ds - rr;
#line 1394
  page = page_chain_next(page);
  ldv_43419: ;
#line 1394
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1394
    tmp___15 = page_chain_next(page);
#line 1394
    __builtin_prefetch((void const   *)tmp___15);
#line 1394
    if (1 != 0) {
#line 1395
      goto ldv_43418;
    } else {
#line 1397
      goto ldv_43420;
    }
  } else {

  }
  ldv_43420: ;
#line 1412
  if (dgs != 0) {
#line 1413
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1414
    tmp___18 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1414
    if (tmp___18 != 0) {
#line 1415
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1415
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___17, tmp___16);
#line 1416
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1418
      drbd_free_ee(mdev, e);
#line 1419
      return (0);
    } else {

    }
  } else {

  }
#line 1422
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1423
  return (e);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1432
  rv = 1;
#line 1435
  if (data_size == 0) {
#line 1436
    return (1);
  } else {

  }
#line 1438
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1440
  data = kmap(page);
#line 1441
  goto ldv_43440;
  ldv_43439: 
#line 1442
  __min1 = data_size;
#line 1442
  __min2 = 4096;
#line 1442
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1443
  __min1___1 = data_size;
#line 1443
  __min2___1 = 4096;
#line 1443
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1444
    rv = 0;
#line 1445
    __min1___0 = data_size;
#line 1445
    __min2___0 = 4096;
#line 1445
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1447
    goto ldv_43438;
  } else {

  }
#line 1449
  data_size = data_size - rr;
  ldv_43440: ;
#line 1441
  if (data_size != 0) {
#line 1442
    goto ldv_43439;
  } else {

  }
  ldv_43438: 
#line 1451
  kunmap(page);
#line 1452
  drbd_pp_free(mdev, page);
#line 1453
  return (rv);
}
}
#line 1456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1462
  dig_in = mdev->int_dig_in;
#line 1463
  dig_vv = mdev->int_dig_vv;
#line 1465
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1465
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1465
    dgs = (int )tmp;
  } else {
#line 1465
    dgs = 0;
  }
#line 1468
  if (dgs != 0) {
#line 1469
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1470
    if (rr != dgs) {
#line 1471
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1471
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1471
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1473
      return (0);
    } else {

    }
  } else {

  }
#line 1477
  data_size = data_size - dgs;
#line 1481
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1483
  bio = req->master_bio;
#line 1484
  if (bio->bi_sector != sector) {
#line 1484
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1484
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1484
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1484);
  } else {

  }
#line 1486
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1486
  i = (int )bio->bi_idx;
#line 1486
  goto ldv_43459;
  ldv_43458: 
#line 1487
  __min1 = data_size;
#line 1487
  __min2 = (int )bvec->bv_len;
#line 1487
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1488
  tmp___4 = kmap(bvec->bv_page);
#line 1488
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1491
  kunmap(bvec->bv_page);
#line 1492
  if (rr != expect) {
#line 1493
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1493
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1493
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1496
    return (0);
  } else {

  }
#line 1498
  data_size = data_size - rr;
#line 1486
  bvec = bvec + 1;
#line 1486
  i = i + 1;
  ldv_43459: ;
#line 1486
  if ((int )bio->bi_vcnt > i) {
#line 1487
    goto ldv_43458;
  } else {

  }

#line 1501
  if (dgs != 0) {
#line 1502
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1503
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1503
    if (tmp___9 != 0) {
#line 1504
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1504
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1504
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1505
      return (0);
    } else {

    }
  } else {

  }
#line 1509
  if (data_size != 0) {
#line 1509
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1509
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1509
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1509);
  } else {

  }
#line 1510
  return (1);
}
}
#line 1515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1517
  e = (struct drbd_epoch_entry *)w;
#line 1518
  sector = e->sector;
#line 1521
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1521
  if (tmp___1 == 0) {
#line 1521
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1521
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1521
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1521);
  } else {

  }
#line 1523
  tmp___2 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1523
  if (tmp___2 != 0L) {
#line 1524
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1524U);
#line 1525
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1528
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1530
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1532
  atomic_dec(& mdev->unacked_cnt);
#line 1532
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1532
  if (tmp___6 < 0) {
#line 1532
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1532
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1532
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1532
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1532, tmp___3);
  } else {

  }
#line 1534
  return (ok);
}
}
#line 1537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1541
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1542
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1543
    goto fail;
  } else {

  }
#line 1545
  atomic_dec(& mdev->rs_pending_cnt);
#line 1545
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1545
  if (tmp___2 < 0) {
#line 1545
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1545
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1545
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1545
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1545, tmp);
  } else {

  }
#line 1547
  inc_unacked(mdev);
#line 1551
  e->w.cb = & e_end_resync_block;
#line 1553
  spin_lock_irq(& mdev->req_lock);
#line 1554
  list_add(& e->w.list, & mdev->sync_ee);
#line 1555
  spin_unlock_irq(& mdev->req_lock);
#line 1557
  tmp___3 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1557
  if (tmp___3 == 0) {
#line 1558
    return (1);
  } else {

  }
#line 1560
  drbd_free_ee(mdev, e);
  fail: 
#line 1562
  put_ldev(mdev);
#line 1563
  return (0);
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1572
  p = (struct p_data *)h;
#line 1574
  header_size = 24U;
#line 1575
  data_size = (unsigned int )h->length - header_size;
#line 1577
  _b = data_size == 0U;
#line 1577
  if (_b != 0) {
#line 1577
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1577);
  } else {

  }
#line 1577
  if (_b != 0) {
#line 1577
    return (0);
  } else {

  }
#line 1579
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1579
  if ((unsigned int )tmp___1 != header_size) {
#line 1580
    return (0);
  } else {

  }
#line 1582
  tmp___2 = __fswab64(p->sector);
#line 1582
  sector = (sector_t )tmp___2;
#line 1584
  spin_lock_irq(& mdev->req_lock);
#line 1585
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1586
  spin_unlock_irq(& mdev->req_lock);
#line 1587
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1587
  if (tmp___5 != 0L) {
#line 1588
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1588
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1588
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1589
    return (0);
  } else {

  }
#line 1595
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1597
  if (ok != 0) {
#line 1598
    req_mod(req, data_received);
  } else {

  }
#line 1603
  return (ok);
}
}
#line 1606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1611
  p = (struct p_data *)h;
#line 1613
  header_size = 24U;
#line 1614
  data_size = (unsigned int )h->length - header_size;
#line 1616
  _b = data_size == 0U;
#line 1616
  if (_b != 0) {
#line 1616
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1616
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1616
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1616);
  } else {

  }
#line 1616
  if (_b != 0) {
#line 1616
    return (0);
  } else {

  }
#line 1618
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1618
  if ((unsigned int )tmp___1 != header_size) {
#line 1619
    return (0);
  } else {

  }
#line 1621
  tmp___2 = __fswab64(p->sector);
#line 1621
  sector = (sector_t )tmp___2;
#line 1622
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1622
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1622);
  } else {

  }
#line 1624
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1624
  if (tmp___8 != 0) {
#line 1628
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1630
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1630
    if (tmp___7 != 0) {
#line 1631
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1633
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1635
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1638
  return (ok);
}
}
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1646
  e = (struct drbd_epoch_entry *)w;
#line 1647
  sector = e->sector;
#line 1649
  ok = 1;
#line 1651
  if ((e->flags & 4UL) != 0UL) {
#line 1652
    epoch = previous_epoch(mdev, e->epoch);
#line 1653
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1654
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1657
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1658
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1658
    if (tmp___0 != 0L) {
#line 1659
      pcmd = ((int )mdev->state.ldv_33296.conn > 15 && (int )mdev->state.ldv_33296.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1663
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1663
      ok = tmp & ok;
#line 1664
      if (pcmd == 23) {
#line 1665
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1665U);
      } else {

      }
    } else {
#line 1667
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1671
    atomic_dec(& mdev->unacked_cnt);
#line 1671
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1671
    if (tmp___4 < 0) {
#line 1671
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1671
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1671
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1671
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1671, tmp___1);
    } else {

    }
  } else {

  }
#line 1675
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1676
    spin_lock_irq(& mdev->req_lock);
#line 1677
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1677
    if (tmp___7 != 0) {
#line 1677
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1677);
    } else {

    }
#line 1678
    hlist_del_init(& e->colision);
#line 1679
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1681
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1681
    if (tmp___10 == 0) {
#line 1681
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1681
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1681
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1681);
    } else {

    }
  }
#line 1684
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1686
  return (ok);
}
}
#line 1689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1691
  e = (struct drbd_epoch_entry *)w;
#line 1692
  ok = 1;
#line 1694
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1694
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1694
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1694
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1694);
  } else {

  }
#line 1695
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1697
  spin_lock_irq(& mdev->req_lock);
#line 1698
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1698
  if (tmp___3 != 0) {
#line 1698
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1698
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1698
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1698);
  } else {

  }
#line 1699
  hlist_del_init(& e->colision);
#line 1700
  spin_unlock_irq(& mdev->req_lock);
#line 1702
  atomic_dec(& mdev->unacked_cnt);
#line 1702
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1702
  if (tmp___7 < 0) {
#line 1702
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1702
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1702
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1702
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1702, tmp___4);
  } else {

  }
#line 1704
  return (ok);
}
}
#line 1728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1730
  tmp = get_current();
#line 1730
  wait.flags = 0U;
#line 1730
  wait.private = (void *)tmp;
#line 1730
  wait.func = & autoremove_wake_function;
#line 1730
  wait.task_list.next = & wait.task_list;
#line 1730
  wait.task_list.prev = & wait.task_list;
#line 1733
  ret = 0;
#line 1734
  spin_lock(& mdev->peer_seq_lock);
  ldv_43543: 
#line 1736
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1737
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1737
  if (tmp___0 <= 0) {
#line 1738
    goto ldv_43542;
  } else {

  }
#line 1739
  tmp___1 = get_current();
#line 1739
  tmp___2 = signal_pending(tmp___1);
#line 1739
  if (tmp___2 != 0) {
#line 1740
    ret = -512;
#line 1741
    goto ldv_43542;
  } else {

  }
#line 1743
  p_seq = mdev->peer_seq;
#line 1744
  spin_unlock(& mdev->peer_seq_lock);
#line 1745
  timeout = schedule_timeout(7500L);
#line 1746
  spin_lock(& mdev->peer_seq_lock);
#line 1747
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1748
    ret = -110;
#line 1749
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1749
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1749
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1750
    goto ldv_43542;
  } else {

  }
#line 1752
  goto ldv_43543;
  ldv_43542: 
#line 1753
  finish_wait(& mdev->seq_wait, & wait);
#line 1754
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1755
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1756
  spin_unlock(& mdev->peer_seq_lock);
#line 1757
  return (ret);
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;
  int tmp___37 ;

  {
#line 1765
  p = (struct p_data *)h;
#line 1767
  rw = 1;
#line 1770
  header_size = 24;
#line 1771
  data_size = (int )h->length - header_size;
#line 1773
  _b = data_size == 0;
#line 1773
  if (_b != 0) {
#line 1773
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1773
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1773
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1773);
  } else {

  }
#line 1773
  if (_b != 0) {
#line 1773
    return (0);
  } else {

  }
#line 1775
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1775
  if (tmp___1 != header_size) {
#line 1776
    return (0);
  } else {

  }
#line 1778
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1778
  if (tmp___7 == 0) {
#line 1779
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1779
    if (tmp___4 != 0) {
#line 1780
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1780
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1780
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1782
    spin_lock(& mdev->peer_seq_lock);
#line 1783
    tmp___5 = __fswab32(p->seq_num);
#line 1783
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1784
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1785
    spin_unlock(& mdev->peer_seq_lock);
#line 1787
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1788
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1789
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1789
    return (tmp___6);
  } else {

  }
#line 1797
  tmp___8 = __fswab64(p->sector);
#line 1797
  sector = (sector_t )tmp___8;
#line 1798
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1799
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1800
    put_ldev(mdev);
#line 1801
    return (0);
  } else {

  }
#line 1804
  e->w.cb = & e_end_block;
#line 1806
  spin_lock(& mdev->epoch_lock);
#line 1807
  e->epoch = mdev->current_epoch;
#line 1808
  atomic_inc(& (e->epoch)->epoch_size);
#line 1809
  atomic_inc(& (e->epoch)->active);
#line 1811
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1811
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1811
    if (tmp___11 == 1) {
#line 1816
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1816
      epoch = (struct drbd_epoch *)__mptr;
#line 1817
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1818
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1819
        rw = rw | 32;
#line 1820
        e->flags = e->flags | 4UL;
      } else {
#line 1822
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1822
        if (tmp___9 > 1) {
#line 1824
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1825
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1826
          rw = rw | 32;
#line 1827
          e->flags = e->flags | 4UL;
        } else {
#line 1822
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1822
          if (tmp___10 == 0) {
#line 1824
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1825
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1826
            rw = rw | 32;
#line 1827
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1831
  spin_unlock(& mdev->epoch_lock);
#line 1833
  tmp___12 = __fswab32(p->dp_flags);
#line 1833
  dp_flags = tmp___12;
#line 1834
  if ((int )dp_flags & 1) {
#line 1835
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1835
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1835
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1838
  if ((dp_flags & 2U) != 0U) {
#line 1839
    rw = rw | 192;
  } else {

  }
#line 1840
  if ((dp_flags & 4U) != 0U) {
#line 1841
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1844
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1845
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1849
    size = (int const   )e->size;
#line 1850
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1850
    discard = tmp___15;
#line 1851
    tmp___16 = get_current();
#line 1851
    wait.flags = 0U;
#line 1851
    wait.private = (void *)tmp___16;
#line 1851
    wait.func = & autoremove_wake_function;
#line 1851
    wait.task_list.next = & wait.task_list;
#line 1851
    wait.task_list.prev = & wait.task_list;
#line 1857
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1857
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1857
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1857
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1857);
    } else {

    }
#line 1858
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1858
    if (tmp___19 != 0L) {
#line 1858
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1858), "i" (12UL));
      ldv_43568: ;
#line 1858
      goto ldv_43568;
    } else {

    }
#line 1859
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1859
    if (tmp___20 != 0L) {
#line 1859
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1859), "i" (12UL));
      ldv_43569: ;
#line 1859
      goto ldv_43569;
    } else {

    }
#line 1895
    tmp___21 = __fswab32(p->seq_num);
#line 1895
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1895
    if (tmp___22 != 0) {
#line 1896
      goto out_interrupted;
    } else {

    }
#line 1898
    spin_lock_irq(& mdev->req_lock);
#line 1900
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1900
    hlist_add_head(& e->colision, tmp___23);
#line 1903
    slot = tl_hash_slot(mdev, sector);
#line 1904
    first = 1;
    ldv_43581: 
#line 1906
    have_unacked = 0;
#line 1907
    have_conflict = 0;
#line 1908
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1910
    n = slot->first;
#line 1910
    goto ldv_43578;
    ldv_43577: 
#line 1911
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1911
    if (tmp___28 != 0) {
#line 1914
      if (first != 0) {
#line 1915
        tmp___24 = get_current();
#line 1915
        tmp___25 = get_current();
#line 1915
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1915
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1915
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1920
      if ((i->rq_state & 8UL) != 0UL) {
#line 1921
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1922
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1910
    n = n->next;
    ldv_43578: ;
#line 1910
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1910
      __builtin_prefetch((void const   *)n->next);
#line 1910
      if (1 != 0) {
#line 1910
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1910
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1910
        if (1 != 0) {
#line 1911
          goto ldv_43577;
        } else {
#line 1913
          goto ldv_43579;
        }
      } else {
#line 1913
        goto ldv_43579;
      }
    } else {

    }
    ldv_43579: ;
#line 1926
    if (have_conflict == 0) {
#line 1927
      goto ldv_43580;
    } else {

    }
#line 1930
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1931
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1931
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1931
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1933
      inc_unacked(mdev);
#line 1934
      e->w.cb = & e_send_discard_ack;
#line 1935
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1937
      spin_unlock_irq(& mdev->req_lock);
#line 1942
      put_ldev(mdev);
#line 1943
      wake_asender(mdev);
#line 1944
      finish_wait(& mdev->misc_wait, & wait);
#line 1945
      return (1);
    } else {

    }
#line 1948
    tmp___31 = get_current();
#line 1948
    tmp___32 = signal_pending(tmp___31);
#line 1948
    if (tmp___32 != 0) {
#line 1949
      hlist_del_init(& e->colision);
#line 1951
      spin_unlock_irq(& mdev->req_lock);
#line 1953
      finish_wait(& mdev->misc_wait, & wait);
#line 1954
      goto out_interrupted;
    } else {

    }
#line 1957
    spin_unlock_irq(& mdev->req_lock);
#line 1958
    if (first != 0) {
#line 1959
      first = 0;
#line 1960
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1960
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1960
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 1962
    if (discard != 0) {
#line 1965
      if (have_unacked != 0) {
#line 1965
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1965
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1965
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               1965);
      } else {

      }
    } else {

    }
#line 1967
    schedule();
#line 1968
    spin_lock_irq(& mdev->req_lock);
#line 1969
    goto ldv_43581;
    ldv_43580: 
#line 1970
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1973
  list_add(& e->w.list, & mdev->active_ee);
#line 1974
  spin_unlock_irq(& mdev->req_lock);
#line 1976
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1978
  inc_unacked(mdev);
#line 1981
  goto ldv_43583;
  case 2: 
#line 1985
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1986
  goto ldv_43583;
  case 1: ;
#line 1989
  goto ldv_43583;
  }
  ldv_43583: ;
#line 1992
  if (*((unsigned int *)mdev + 491UL) == 0U) {
#line 1994
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1994U);
#line 1995
    e->flags = e->flags | 1UL;
#line 1996
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1999
  tmp___37 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1999
  if (tmp___37 == 0) {
#line 2000
    return (1);
  } else {

  }
  out_interrupted: 
#line 2006
  put_ldev(mdev);
#line 2007
  drbd_free_ee(mdev, e);
#line 2008
  return (0);
}
}
#line 2011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  void *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  struct task_struct *tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;
  struct task_struct *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;

  {
#line 2014
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2014
  capacity = tmp;
#line 2016
  di = 0;
#line 2019
  p = (struct p_block_req *)h;
#line 2021
  brps = 24;
#line 2023
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 2023
  if (tmp___0 != brps) {
#line 2024
    return (0);
  } else {

  }
#line 2026
  tmp___1 = __fswab64(p->sector);
#line 2026
  sector = (sector_t )tmp___1;
#line 2027
  tmp___2 = __fswab32(p->blksize);
#line 2027
  size = (int )tmp___2;
#line 2029
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 2030
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2030
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2030
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2031, (unsigned long long )sector, size);
#line 2032
    return (0);
  } else {

  }
#line 2034
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2035
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2035
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2035
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2036, (unsigned long long )sector, size);
#line 2037
    return (0);
  } else {

  }
#line 2040
  tmp___11 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2040
  if (tmp___11 == 0) {
#line 2041
    tmp___9 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2041
    if (tmp___9 != 0) {
#line 2042
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2042
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2042
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 2044
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 2046
    tmp___10 = drbd_drain_block(mdev, (int )h->length - brps);
#line 2046
    return (tmp___10);
  } else {

  }
#line 2052
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2053
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2054
    put_ldev(mdev);
#line 2055
    return (0);
  } else {

  }
#line 2058
  switch ((int )h->command) {
  case 8: 
#line 2060
  e->w.cb = & w_e_end_data_req;
#line 2061
  fault_type = 5U;
#line 2062
  goto ldv_43601;
  case 9: 
#line 2064
  e->w.cb = & w_e_end_rsdata_req;
#line 2065
  fault_type = 3U;
#line 2071
  tmp___16 = drbd_rs_begin_io(mdev, sector);
#line 2071
  if (tmp___16 == 0) {
#line 2074
    tmp___14 = get_current();
#line 2074
    tmp___15 = signal_pending(tmp___14);
#line 2074
    if (tmp___15 == 0) {
#line 2074
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2074
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2074
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___13, tmp___12,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2074);
    } else {

    }
#line 2075
    goto out_free_e;
  } else {

  }
#line 2077
  goto ldv_43601;
  case 31: ;
  case 33: 
#line 2081
  fault_type = 3U;
#line 2082
  digest_size = (int )h->length - brps;
#line 2083
  tmp___17 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2083
  di = (struct digest_info *)tmp___17;
#line 2084
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2085
    goto out_free_e;
  } else {

  }
#line 2087
  di->digest_size = digest_size;
#line 2088
  di->digest = (void *)di + 16U;
#line 2090
  tmp___18 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2090
  if (tmp___18 != digest_size) {
#line 2091
    goto out_free_e;
  } else {

  }
#line 2093
  e->block_id = (unsigned long long )di;
#line 2094
  if ((unsigned int )h->command == 33U) {
#line 2095
    if (mdev->agreed_pro_version <= 88) {
#line 2095
      tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2095
      tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2095
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___20,
             tmp___19, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2095);
    } else {

    }
#line 2096
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2097
  if ((unsigned int )h->command == 31U) {
#line 2098
    e->w.cb = & w_e_end_ov_reply;
#line 2099
    atomic_dec(& mdev->rs_pending_cnt);
#line 2099
    tmp___24 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2099
    if (tmp___24 < 0) {
#line 2099
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2099
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2099
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2099
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
             "receive_DataRequest", 2099, tmp___21);
    } else {

    }
#line 2100
    goto ldv_43601;
  } else {

  }
#line 2103
  tmp___29 = drbd_rs_begin_io(mdev, sector);
#line 2103
  if (tmp___29 == 0) {
#line 2105
    tmp___27 = get_current();
#line 2105
    tmp___28 = signal_pending(tmp___27);
#line 2105
    if (tmp___28 == 0) {
#line 2105
      tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2105
      tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2105
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___26, tmp___25,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2105);
    } else {

    }
#line 2106
    goto out_free_e;
  } else {

  }
#line 2108
  goto ldv_43601;
  case 30: ;
#line 2111
  if ((int )mdev->state.ldv_33296.conn > 9 && (unsigned int )*((unsigned short *)mdev + 982UL) != 304U) {
#line 2113
    tmp___30 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 2113
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2113
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2113
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___32,
           tmp___31, tmp___30);
  } else {

  }
#line 2115
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2117
    mdev->ov_start_sector = sector;
#line 2118
    mdev->ov_position = sector;
#line 2119
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2120
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2120
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2120
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___34, tmp___33, (unsigned long long )sector);
  } else {

  }
#line 2123
  e->w.cb = & w_e_end_ov_req;
#line 2124
  fault_type = 3U;
#line 2130
  tmp___39 = drbd_rs_begin_io(mdev, sector);
#line 2130
  if (tmp___39 == 0) {
#line 2133
    tmp___37 = get_current();
#line 2133
    tmp___38 = signal_pending(tmp___37);
#line 2133
    if (tmp___38 == 0) {
#line 2133
      tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2133
      tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2133
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___36, tmp___35,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2133);
    } else {

    }
#line 2134
    goto out_free_e;
  } else {

  }
#line 2136
  goto ldv_43601;
  default: 
#line 2140
  tmp___40 = cmdname((enum drbd_packets )h->command);
#line 2140
  tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2140
  tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2140
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___42, tmp___41,
         tmp___40);
#line 2142
  fault_type = 10U;
  }
  ldv_43601: 
#line 2145
  spin_lock_irq(& mdev->req_lock);
#line 2146
  list_add(& e->w.list, & mdev->read_ee);
#line 2147
  spin_unlock_irq(& mdev->req_lock);
#line 2149
  inc_unacked(mdev);
#line 2151
  tmp___43 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2151
  if (tmp___43 == 0) {
#line 2152
    return (1);
  } else {

  }
  out_free_e: 
#line 2155
  kfree((void const   *)di);
#line 2156
  put_ldev(mdev);
#line 2157
  drbd_free_ee(mdev, e);
#line 2158
  return (0);
}
}
#line 2161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2163
  rv = -100;
#line 2166
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2167
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2169
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2170
  ch_self = mdev->comm_bm_set;
#line 2172
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2176
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2176
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2176
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2177
  goto ldv_43622;
  case 0: ;
#line 2179
  goto ldv_43622;
  case 1: ;
#line 2181
  if (self == 0 && peer == 1) {
#line 2182
    rv = -1;
#line 2183
    goto ldv_43622;
  } else {

  }
#line 2185
  if (self == 1 && peer == 0) {
#line 2186
    rv = 1;
#line 2187
    goto ldv_43622;
  } else {

  }
  case 2: ;
#line 2191
  if (self == 0 && peer == 1) {
#line 2192
    rv = 1;
#line 2193
    goto ldv_43622;
  } else {

  }
#line 2195
  if (self == 1 && peer == 0) {
#line 2196
    rv = -1;
#line 2197
    goto ldv_43622;
  } else {

  }
#line 2200
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2200
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2200
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2203
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2204
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2204
    rv = tmp___3 != 0 ? -1 : 1;
#line 2206
    goto ldv_43622;
  } else {
#line 2208
    if (ch_peer == 0UL) {
#line 2208
      rv = 1;
#line 2208
      goto ldv_43622;
    } else {

    }
#line 2209
    if (ch_self == 0UL) {
#line 2209
      rv = -1;
#line 2209
      goto ldv_43622;
    } else {

    }
  }
#line 2211
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2212
    goto ldv_43622;
  } else {

  }
  case 4: ;
#line 2214
  if (ch_self < ch_peer) {
#line 2215
    rv = -1;
  } else
#line 2216
  if (ch_self > ch_peer) {
#line 2217
    rv = 1;
  } else {
#line 2220
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2220
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2222
  goto ldv_43622;
  case 5: 
#line 2224
  rv = -1;
#line 2225
  goto ldv_43622;
  case 6: 
#line 2227
  rv = 1;
  }
  ldv_43622: ;
#line 2230
  return (rv);
}
}
#line 2233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2235
  rv = -100;
#line 2237
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2238
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2240
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2246
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2246
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2246
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2247
  goto ldv_43642;
  case 0: ;
#line 2249
  goto ldv_43642;
  case 7: 
#line 2251
  hg = drbd_asb_recover_0p(mdev);
#line 2252
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 2U) {
#line 2253
    rv = hg;
  } else {

  }
#line 2254
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) {
#line 2255
    rv = hg;
  } else {

  }
#line 2256
  goto ldv_43642;
  case 10: 
#line 2258
  rv = drbd_asb_recover_0p(mdev);
#line 2259
  goto ldv_43642;
  case 8: ;
#line 2261
  return ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U ? 1 : -1);
  case 9: 
#line 2263
  hg = drbd_asb_recover_0p(mdev);
#line 2264
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) {
#line 2265
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2269
    val.i = 0U;
#line 2269
    val.ldv_33296.role = 2U;
#line 2269
    mask.i = 0U;
#line 2269
    mask.ldv_33296.role = 3U;
#line 2269
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2270
    if (self != 1) {
#line 2271
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2273
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2273
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2273
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2274
      rv = hg;
    }
  } else {
#line 2277
    rv = hg;
  }
  }
  ldv_43642: ;
#line 2280
  return (rv);
}
}
#line 2283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2285
  rv = -100;
#line 2287
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2288
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2290
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2298
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2298
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2298
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2299
  goto ldv_43666;
  case 10: 
#line 2301
  rv = drbd_asb_recover_0p(mdev);
#line 2302
  goto ldv_43666;
  case 0: ;
#line 2304
  goto ldv_43666;
  case 9: 
#line 2306
  hg = drbd_asb_recover_0p(mdev);
#line 2307
  if (hg == -1) {
#line 2311
    val.i = 0U;
#line 2311
    val.ldv_33296.role = 2U;
#line 2311
    mask.i = 0U;
#line 2311
    mask.ldv_33296.role = 3U;
#line 2311
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2312
    if (self != 1) {
#line 2313
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2315
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2315
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2315
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2316
      rv = hg;
    }
  } else {
#line 2319
    rv = hg;
  }
  }
  ldv_43666: ;
#line 2322
  return (rv);
}
}
#line 2325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2328
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2329
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2329
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2329
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2330
    return;
  } else {

  }
#line 2332
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2332
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2332
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2333
  return;
}
}
#line 2352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2357
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2358
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2360
  *rule_nr = 10;
#line 2361
  if (self == 4ULL && peer == 4ULL) {
#line 2362
    return (0);
  } else {

  }
#line 2364
  *rule_nr = 20;
#line 2365
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2367
    return (-2);
  } else {

  }
#line 2369
  *rule_nr = 30;
#line 2370
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2372
    return (2);
  } else {

  }
#line 2374
  if (self == peer) {
#line 2377
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2379
      if (mdev->agreed_pro_version <= 90) {
#line 2380
        return (-1001);
      } else {

      }
#line 2382
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2384
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2384
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2384
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2385
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2387
        if ((int )mdev->state.ldv_33296.disk > 2) {
#line 2387
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2387
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2387
          tmp___2 = 0ULL;
        }
#line 2387
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2389
        *rule_nr = 34;
      } else {
#line 2391
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2391
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2391
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2392
        *rule_nr = 36;
      }
#line 2395
      return (1);
    } else {

    }
#line 2398
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2400
      if (mdev->agreed_pro_version <= 90) {
#line 2401
        return (-1001);
      } else {

      }
#line 2403
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2405
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2405
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2405
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2407
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2408
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2409
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2411
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2412
        *rule_nr = 35;
      } else {
#line 2414
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2414
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2414
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2415
        *rule_nr = 37;
      }
#line 2418
      return (-1);
    } else {

    }
#line 2422
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2422
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2426
    *rule_nr = 40;
#line 2428
    switch (rct) {
    case 0: ;
#line 2429
    return (0);
    case 1: ;
#line 2430
    return (1);
    case 2: ;
#line 2431
    return (-1);
    case 3: 
#line 2433
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2434
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2438
  *rule_nr = 50;
#line 2439
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2440
  if (self == peer) {
#line 2441
    return (-1);
  } else {

  }
#line 2443
  *rule_nr = 51;
#line 2444
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2445
  if (self == peer) {
#line 2446
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2447
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2448
    if (self == peer) {
#line 2452
      if (mdev->agreed_pro_version <= 90) {
#line 2453
        return (-1001);
      } else {

      }
#line 2455
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2456
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2457
      return (-1);
    } else {

    }
  } else {

  }
#line 2461
  *rule_nr = 60;
#line 2462
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2463
  i = 2;
#line 2463
  goto ldv_43696;
  ldv_43695: 
#line 2464
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2465
  if (self == peer) {
#line 2466
    return (-2);
  } else {

  }
#line 2463
  i = i + 1;
  ldv_43696: ;
#line 2463
  if (i <= 3) {
#line 2464
    goto ldv_43695;
  } else {

  }
#line 2469
  *rule_nr = 70;
#line 2470
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2471
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2472
  if (self == peer) {
#line 2473
    return (1);
  } else {

  }
#line 2475
  *rule_nr = 71;
#line 2476
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2477
  if (self == peer) {
#line 2478
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2479
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2480
    if (self == peer) {
#line 2484
      if (mdev->agreed_pro_version <= 90) {
#line 2485
        return (-1001);
      } else {

      }
#line 2487
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2488
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2490
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2490
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2490
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2492
      if ((int )mdev->state.ldv_33296.disk > 2) {
#line 2492
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2492
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2492
        tmp___13 = 0ULL;
      }
#line 2492
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2495
      return (1);
    } else {

    }
  } else {

  }
#line 2500
  *rule_nr = 80;
#line 2501
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2502
  i = 2;
#line 2502
  goto ldv_43699;
  ldv_43698: 
#line 2503
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2504
  if (self == peer) {
#line 2505
    return (2);
  } else {

  }
#line 2502
  i = i + 1;
  ldv_43699: ;
#line 2502
  if (i <= 3) {
#line 2503
    goto ldv_43698;
  } else {

  }
#line 2508
  *rule_nr = 90;
#line 2509
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2510
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2511
  if (self == peer && self != 0ULL) {
#line 2512
    return (100);
  } else {

  }
#line 2514
  *rule_nr = 100;
#line 2515
  i = 2;
#line 2515
  goto ldv_43705;
  ldv_43704: 
#line 2516
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2517
  j = 2;
#line 2517
  goto ldv_43702;
  ldv_43701: 
#line 2518
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2519
  if (self == peer) {
#line 2520
    return (-100);
  } else {

  }
#line 2517
  j = j + 1;
  ldv_43702: ;
#line 2517
  if (j <= 3) {
#line 2518
    goto ldv_43701;
  } else {

  }
#line 2515
  i = i + 1;
  ldv_43705: ;
#line 2515
  if (i <= 3) {
#line 2516
    goto ldv_43704;
  } else {

  }

#line 2524
  return (-1000);
}
}
#line 2530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  long __x___0 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___1 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___2 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  long __x___3 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  long __x___4 ;
  unsigned long tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  unsigned long tmp___36 ;

  {
#line 2534
  rv = C_MASK;
#line 2537
  mydisk = (enum drbd_disk_state )mdev->state.ldv_33296.disk;
#line 2538
  if ((unsigned int )mydisk == 3U) {
#line 2539
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_33296.disk;
  } else {

  }
#line 2541
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2541
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2541
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2542
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2543
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2546
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2548
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2548
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2548
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2550
  if (hg == -1000) {
#line 2551
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2551
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2551
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2552
    return (C_MASK);
  } else {

  }
#line 2554
  if (hg == -1001) {
#line 2555
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2555
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2555
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2556
    return (C_MASK);
  } else {

  }
#line 2559
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2561
    if (hg == -100) {
#line 2561
      tmp___7 = 1;
    } else {
#line 2561
      __x = (long )hg;
#line 2561
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2561
        tmp___7 = 1;
      } else {
#line 2561
        tmp___7 = 0;
      }
    }
#line 2561
    f = tmp___7;
#line 2562
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2563
    if (f != 0) {
#line 2564
      hg = hg * 2;
    } else {

    }
#line 2565
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2569
  __x___0 = (long )hg;
#line 2569
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2570
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2572
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2573
    pcount = ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2575
    forced = hg == -100;
#line 2577
    switch (pcount) {
    case 0: 
#line 2579
    hg = drbd_asb_recover_0p(mdev);
#line 2580
    goto ldv_43724;
    case 1: 
#line 2582
    hg = drbd_asb_recover_1p(mdev);
#line 2583
    goto ldv_43724;
    case 2: 
#line 2585
    hg = drbd_asb_recover_2p(mdev);
#line 2586
    goto ldv_43724;
    }
    ldv_43724: 
#line 2588
    __x___1 = (long )hg;
#line 2588
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2589
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2589
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2589
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2592
      if (forced != 0) {
#line 2593
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2593
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2593
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2595
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2600
  if (hg == -100) {
#line 2601
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2602
      hg = -1;
    } else {

    }
#line 2603
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2604
      hg = 1;
    } else {

    }
#line 2606
    __x___2 = (long )hg;
#line 2606
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2607
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2607
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2607
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2612
  if (hg == -100) {
#line 2617
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2617
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2617
    printk("<1>%s %s: Split-Brain detected but unresolved, dropping connection!\n",
           tmp___17, tmp___16);
#line 2618
    drbd_khelper(mdev, (char *)"split-brain");
#line 2619
    return (C_MASK);
  } else {

  }
#line 2622
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2623
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2623
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2623
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2624
    return (C_MASK);
  } else {

  }
#line 2627
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) && (int )mdev->state.ldv_33296.disk > 6) {
#line 2629
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2631
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2634
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2634
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2634
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2635
    return (C_MASK);
    case 10: 
#line 2637
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2637
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2637
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2642
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2642
    goto _L;
  } else {
#line 2642
    tmp___29 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2642
    if (tmp___29 != 0) {
      _L: /* CIL Label */ 
#line 2643
      if (hg == 0) {
#line 2644
        tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
        tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
        printk("<6>%s %s: dry-run connect: No resync, would become Connected immediately.\n",
               tmp___25, tmp___24);
      } else {
#line 2646
        __x___3 = (long )hg;
#line 2646
        tmp___26 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2646
        tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2646
        tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2646
        printk("<6>%s %s: dry-run connect: Would become %s, doing a %s resync.", tmp___28,
               tmp___27, tmp___26, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2649
      return (C_MASK);
    } else {

    }
  }
#line 2652
  __x___4 = (long )hg;
#line 2652
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2653
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___31, tmp___30);
#line 2654
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2654
    if (tmp___32 != 0) {
#line 2655
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2658
  if (hg > 0) {
#line 2659
    rv = C_WF_BITMAP_S;
  } else
#line 2660
  if (hg < 0) {
#line 2661
    rv = C_WF_BITMAP_T;
  } else {
#line 2663
    rv = C_CONNECTED;
#line 2664
    tmp___36 = drbd_bm_total_weight(mdev);
#line 2664
    if (tmp___36 != 0UL) {
#line 2665
      tmp___33 = drbd_bm_total_weight(mdev);
#line 2665
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2665
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2665
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___35, tmp___34,
             tmp___33);
    } else {

    }
  }
#line 2670
  return (rv);
}
}
#line 2674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2677
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2679
    return (0);
  } else {

  }
#line 2682
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2684
    return (1);
  } else {

  }
#line 2687
  if ((unsigned int )peer == (unsigned int )self) {
#line 2688
    return (0);
  } else {

  }
#line 2691
  return (1);
}
}
#line 2694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2696
  p = (struct p_protocol *)h;
#line 2700
  p_integrity_alg[0] = '\000';
#line 2700
  tmp = 1U;
#line 2700
  while (1) {
#line 2700
    if (tmp >= 64U) {
#line 2700
      break;
    } else {

    }
#line 2700
    p_integrity_alg[tmp] = (char)0;
#line 2700
    tmp = tmp + 1U;
  }
#line 2702
  header_size = 24;
#line 2703
  data_size = (int )h->length - header_size;
#line 2705
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2705
  if (tmp___0 != header_size) {
#line 2706
    return (0);
  } else {

  }
#line 2708
  tmp___1 = __fswab32(p->protocol);
#line 2708
  p_proto = (int )tmp___1;
#line 2709
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2709
  p_after_sb_0p = (int )tmp___2;
#line 2710
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2710
  p_after_sb_1p = (int )tmp___3;
#line 2711
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2711
  p_after_sb_2p = (int )tmp___4;
#line 2712
  tmp___5 = __fswab32(p->two_primaries);
#line 2712
  p_two_primaries = (int )tmp___5;
#line 2713
  tmp___6 = __fswab32(p->conn_flags);
#line 2713
  cf = (int )tmp___6;
#line 2714
  p_want_lose = cf & 1;
#line 2716
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2718
  if ((cf & 2) != 0) {
#line 2719
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2721
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2722
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2722
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2722
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2723
    goto disconnect;
  } else {

  }
#line 2726
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2726
  if (tmp___11 != 0) {
#line 2727
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2727
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2727
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2728
    goto disconnect;
  } else {

  }
#line 2731
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2731
  if (tmp___14 != 0) {
#line 2732
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2732
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2732
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2733
    goto disconnect;
  } else {

  }
#line 2736
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2736
  if (tmp___17 != 0) {
#line 2737
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2738
    goto disconnect;
  } else {

  }
#line 2741
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2742
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2743
    goto disconnect;
  } else {

  }
#line 2746
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2747
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2747
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2747
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2748
    goto disconnect;
  } else {

  }
#line 2751
  if (mdev->agreed_pro_version > 86) {
#line 2752
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2754
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2754
    if (tmp___22 != data_size) {
#line 2755
      return (0);
    } else {

    }
#line 2757
    p_integrity_alg[63] = 0;
#line 2758
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2758
    if (tmp___25 != 0) {
#line 2759
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2759
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2759
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2760
      goto disconnect;
    } else {

    }
#line 2762
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2762
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2762
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2766
  return (1);
  disconnect: 
#line 2769
  val.i = 0U;
#line 2769
  val.ldv_33296.conn = 1U;
#line 2769
  mask.i = 0U;
#line 2769
  mask.ldv_33296.conn = 31U;
#line 2769
  drbd_force_state(mdev, mask, val);
#line 2770
  return (0);
}
}
#line 2778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2783
  if ((int )((signed char )*alg) == 0) {
#line 2784
    return (0);
  } else {

  }
#line 2786
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2787
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2787
  if (tmp___2 != 0L) {
#line 2788
    tmp = PTR_ERR((void const   *)tfm);
#line 2788
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2788
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2788
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2790
    return (tfm);
  } else {

  }
#line 2792
  tmp___6 = crypto_hash_tfm(tfm);
#line 2792
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2792
  if (tmp___7 == 0) {
#line 2793
    crypto_free_hash(tfm);
#line 2794
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2794
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2794
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2795
    tmp___5 = ERR_PTR(-22L);
#line 2795
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2797
  return (tfm);
}
}
#line 2800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2802
  ok = 1;
#line 2803
  p = (struct p_rs_param_89 *)h;
#line 2805
  verify_tfm = 0;
#line 2806
  csums_tfm = 0;
#line 2807
  apv = mdev->agreed_pro_version;
#line 2809
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2814
  if ((unsigned int )h->length > exp_max_sz) {
#line 2815
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2815
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2815
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2817
    return (0);
  } else {

  }
#line 2820
  if (apv <= 88) {
#line 2821
    header_size = 4U;
#line 2822
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2824
    header_size = 132U;
#line 2825
    data_size = (unsigned int )h->length - header_size;
#line 2826
    if (data_size != 0U) {
#line 2826
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2826
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2826
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2826);
    } else {

    }
  }
#line 2830
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2832
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2832
  if ((unsigned int )tmp___3 != header_size) {
#line 2833
    return (0);
  } else {

  }
#line 2835
  tmp___4 = __fswab32(p->rate);
#line 2835
  mdev->sync_conf.rate = (int )tmp___4;
#line 2837
  if (apv > 87) {
#line 2838
    if (apv == 88) {
#line 2839
      if (data_size > 64U) {
#line 2840
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2840
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2840
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2843
        return (0);
      } else {

      }
#line 2846
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2846
      if ((unsigned int )tmp___7 != data_size) {
#line 2847
        return (0);
      } else {

      }
#line 2851
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2851
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2851
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2851);
      } else {

      }
#line 2852
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2857
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2857
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2857
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2857
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2857);
      } else {

      }
#line 2858
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2858
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2858
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2858
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2858);
      } else {

      }
#line 2859
      p->verify_alg[63] = 0;
#line 2860
      p->csums_alg[63] = 0;
    }
#line 2863
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2863
    if (tmp___17 != 0) {
#line 2864
      if ((unsigned int )*((unsigned short *)mdev + 982UL) == 144U) {
#line 2865
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2867
        goto disconnect;
      } else {

      }
#line 2869
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2871
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2871
      if (tmp___16 != 0L) {
#line 2872
        verify_tfm = 0;
#line 2873
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2877
    if (apv > 88) {
#line 2877
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2877
      if (tmp___21 != 0) {
#line 2878
        if ((unsigned int )*((unsigned short *)mdev + 982UL) == 144U) {
#line 2879
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2879
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2879
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2881
          goto disconnect;
        } else {

        }
#line 2883
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2885
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2885
        if (tmp___20 != 0L) {
#line 2886
          csums_tfm = 0;
#line 2887
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2892
    spin_lock(& mdev->peer_seq_lock);
#line 2894
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2895
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2896
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2896
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2897
      crypto_free_hash(mdev->verify_tfm);
#line 2898
      mdev->verify_tfm = verify_tfm;
#line 2899
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2899
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2899
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2901
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2902
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2903
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2903
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2904
      crypto_free_hash(mdev->csums_tfm);
#line 2905
      mdev->csums_tfm = csums_tfm;
#line 2906
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2908
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2911
  return (ok);
  disconnect: 
#line 2915
  crypto_free_hash(csums_tfm);
#line 2917
  crypto_free_hash(verify_tfm);
#line 2918
  val.i = 0U;
#line 2918
  val.ldv_33296.conn = 1U;
#line 2918
  mask.i = 0U;
#line 2918
  mask.ldv_33296.conn = 31U;
#line 2918
  drbd_force_state(mdev, mask, val);
#line 2919
  return (0);
}
}
#line 2922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2924
  return;
}
}
#line 2929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2933
  if (a == 0UL || b == 0UL) {
#line 2934
    return;
  } else {

  }
#line 2935
  d = a > b ? a - b : b - a;
#line 2936
  if (a >> 3 < d || b >> 3 < d) {
#line 2937
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2937
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2937
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2938
  return;
}
}
#line 2941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  __u16 tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;
  __u32 tmp___18 ;
  unsigned int tmp___19 ;
  __u16 tmp___20 ;
  int tmp___21 ;
  __u64 tmp___22 ;
  sector_t tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;

  {
#line 2943
  p = (struct p_sizes *)h;
#line 2944
  dd = 0;
#line 2947
  ldsc = 0;
#line 2950
  _b = (unsigned int )h->length != 32U;
#line 2950
  if (_b != 0) {
#line 2950
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2950
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2950
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2950);
  } else {

  }
#line 2950
  if (_b != 0) {
#line 2950
    return (0);
  } else {

  }
#line 2951
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2951
  if (tmp___1 != (int )h->length) {
#line 2952
    return (0);
  } else {

  }
#line 2954
  tmp___2 = __fswab64(p->d_size);
#line 2954
  p_size = (sector_t )tmp___2;
#line 2955
  tmp___3 = __fswab64(p->u_size);
#line 2955
  p_usize = (sector_t )tmp___3;
#line 2957
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1965UL) == 0U) {
#line 2958
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2958
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2958
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 2959
    val.i = 0U;
#line 2959
    val.ldv_33296.conn = 1U;
#line 2959
    mask.i = 0U;
#line 2959
    mask.ldv_33296.conn = 31U;
#line 2959
    drbd_force_state(mdev, mask, val);
#line 2960
    return (0);
  } else {

  }
#line 2965
  mdev->p_size = p_size;
#line 2968
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2968
  if (tmp___14 != 0) {
#line 2969
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 2969
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 2971
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2976
    if ((unsigned int )*((unsigned short *)mdev + 982UL) == 144U) {
#line 2977
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2977
        if (p_usize == 0UL) {
#line 2977
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2977
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2977
          _min2 = p_usize;
#line 2977
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2977
        p_usize = tmp___7;
      } else {
#line 2977
        p_usize = p_usize;
      }
    } else {

    }
#line 2980
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2982
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2983
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2984
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2984
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2984
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2990
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2990
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 2990
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_33296.disk > 4) && (int )mdev->state.ldv_33296.conn <= 9) {
#line 2994
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2994
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2994
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 2995
      val___0.i = 0U;
#line 2995
      val___0.ldv_33296.conn = 1U;
#line 2995
      mask___0.i = 0U;
#line 2995
      mask___0.ldv_33296.conn = 31U;
#line 2995
      drbd_force_state(mdev, mask___0, val___0);
#line 2996
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2997
      put_ldev(mdev);
#line 2998
      return (0);
    } else {

    }
#line 3000
    put_ldev(mdev);
  } else {

  }
#line 3004
  tmp___15 = __fswab16((int )p->dds_flags);
#line 3004
  ddsf = (enum dds_flags )tmp___15;
#line 3005
  tmp___16 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3005
  if (tmp___16 != 0) {
#line 3006
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3007
    put_ldev(mdev);
#line 3008
    if ((int )dd == -1) {
#line 3009
      return (0);
    } else {

    }
#line 3010
    drbd_md_sync(mdev);
  } else {
#line 3013
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3016
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3016
  if (tmp___21 != 0) {
#line 3017
    tmp___17 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3017
    if ((mdev->ldev)->known_size != tmp___17) {
#line 3018
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3019
      ldsc = 1;
    } else {

    }
#line 3022
    tmp___18 = __fswab32(p->max_segment_size);
#line 3022
    max_seg_s = tmp___18;
#line 3023
    tmp___19 = queue_max_segment_size(mdev->rq_queue);
#line 3023
    if (tmp___19 != max_seg_s) {
#line 3024
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3026
    tmp___20 = __fswab16((int )p->queue_order_type);
#line 3026
    drbd_setup_order_type(mdev, (int )tmp___20);
#line 3027
    put_ldev(mdev);
  } else {

  }
#line 3030
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 3031
    tmp___22 = __fswab64(p->c_size);
#line 3031
    tmp___23 = drbd_get_capacity(mdev->this_bdev);
#line 3031
    if (tmp___22 != (unsigned long long )tmp___23 || ldsc != 0) {
#line 3035
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3037
    tmp___26 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3037
    if (tmp___26 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 982UL) == 160U)) {
#line 3039
      if ((int )mdev->state.ldv_33296.pdsk > 3 && (int )mdev->state.ldv_33296.disk > 3) {
#line 3041
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3042
          tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3042
          tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3042
          printk("<6>%s %s: Resync of new storage suppressed with --assume-clean\n",
                 tmp___25, tmp___24);
        } else {
#line 3044
          resync_after_online_grow(mdev);
        }
      } else {
#line 3046
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3050
  return (1);
}
}
#line 3053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 3055
  p = (struct p_uuids *)h;
#line 3059
  _b = (unsigned int )h->length != 48U;
#line 3059
  if (_b != 0) {
#line 3059
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3059
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3059
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3059);
  } else {

  }
#line 3059
  if (_b != 0) {
#line 3059
    return (0);
  } else {

  }
#line 3060
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3060
  if (tmp___1 != (int )h->length) {
#line 3061
    return (0);
  } else {

  }
#line 3063
  tmp___2 = kmalloc___1(48UL, 16U);
#line 3063
  p_uuid = (u64 *)tmp___2;
#line 3065
  i = 0;
#line 3065
  goto ldv_43834;
  ldv_43833: 
#line 3066
  tmp___3 = __fswab64(p->uuid[i]);
#line 3066
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 3065
  i = i + 1;
  ldv_43834: ;
#line 3065
  if (i <= 5) {
#line 3066
    goto ldv_43833;
  } else {

  }
#line 3068
  kfree((void const   *)mdev->p_uuid);
#line 3069
  mdev->p_uuid = p_uuid;
#line 3071
  if ((((int )mdev->state.ldv_33296.conn <= 9 && (int )mdev->state.ldv_33296.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3075
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3075
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3075
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 3077
    val.i = 0U;
#line 3077
    val.ldv_33296.conn = 1U;
#line 3077
    mask.i = 0U;
#line 3077
    mask.ldv_33296.conn = 31U;
#line 3077
    drbd_force_state(mdev, mask, val);
#line 3078
    return (0);
  } else {

  }
#line 3081
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3081
  if (tmp___8 != 0) {
#line 3082
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 982UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3087
    if (skip_initial_sync != 0) {
#line 3088
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3088
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3088
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 3089
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3091
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3092
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3093
      __ns.i = mdev->state.i;
#line 3093
      __ns.ldv_33296.disk = 8U;
#line 3093
      __ns.ldv_33296.pdsk = 8U;
#line 3093
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3095
      drbd_md_sync(mdev);
    } else {

    }
#line 3097
    put_ldev(mdev);
  } else {

  }
#line 3104
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3104
  if (tmp___9 == 0) {
#line 3104
    goto ldv_43843;
  } else {

  }
#line 3104
  tmp___10 = get_current();
#line 3104
  __wait.flags = 0U;
#line 3104
  __wait.private = (void *)tmp___10;
#line 3104
  __wait.func = & autoremove_wake_function;
#line 3104
  __wait.task_list.next = & __wait.task_list;
#line 3104
  __wait.task_list.prev = & __wait.task_list;
  ldv_43846: 
#line 3104
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3104
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3104
  if (tmp___11 == 0) {
#line 3104
    goto ldv_43845;
  } else {

  }
#line 3104
  schedule();
#line 3104
  goto ldv_43846;
  ldv_43845: 
#line 3104
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43843: ;
#line 3105
  if ((int )mdev->state.ldv_33296.conn > 9 && (int )mdev->state.ldv_33296.disk <= 3) {
#line 3106
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3108
  return (1);
}
}
#line 3115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3119
  c_tab[0] = 0;
#line 3119
  c_tab[1] = C_TEAR_DOWN;
#line 3119
  c_tab[2] = 0;
#line 3119
  c_tab[3] = 0;
#line 3119
  c_tab[4] = 0;
#line 3119
  c_tab[5] = 0;
#line 3119
  c_tab[6] = 0;
#line 3119
  c_tab[7] = 0;
#line 3119
  c_tab[8] = 0;
#line 3119
  c_tab[9] = 0;
#line 3119
  c_tab[10] = C_CONNECTED;
#line 3119
  c_tab[11] = C_STARTING_SYNC_T;
#line 3119
  c_tab[12] = C_STARTING_SYNC_S;
#line 3119
  c_tab[13] = 0;
#line 3119
  c_tab[14] = 0;
#line 3119
  c_tab[15] = 0;
#line 3119
  c_tab[16] = 0;
#line 3119
  c_tab[17] = 0;
#line 3119
  c_tab[18] = C_VERIFY_T;
#line 3119
  c_tab[19] = 0;
#line 3119
  c_tab[20] = 0;
#line 3119
  c_tab[21] = 0;
#line 3119
  c_tab[22] = 0;
#line 3119
  c_tab[23] = 0;
#line 3119
  c_tab[24] = 0;
#line 3119
  c_tab[25] = 0;
#line 3119
  c_tab[26] = 0;
#line 3119
  c_tab[27] = 0;
#line 3119
  c_tab[28] = 0;
#line 3119
  c_tab[29] = 0;
#line 3119
  c_tab[30] = 0;
#line 3119
  c_tab[31] = C_MASK;
#line 3129
  ms.i = ps.i;
#line 3131
  ms.ldv_33296.conn = (unsigned char )c_tab[(int )ps.ldv_33296.conn];
#line 3132
  ms.ldv_33296.peer = ps.ldv_33296.role;
#line 3133
  ms.ldv_33296.role = ps.ldv_33296.peer;
#line 3134
  ms.ldv_33296.pdsk = ps.ldv_33296.disk;
#line 3135
  ms.ldv_33296.disk = ps.ldv_33296.pdsk;
#line 3136
  ms.ldv_33296.peer_isp = (unsigned char )((int )ps.ldv_33296.aftr_isp | (int )ps.ldv_33296.user_isp);
#line 3138
  return (ms);
}
}
#line 3141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3143
  p = (struct p_req_state *)h;
#line 3147
  _b = (unsigned int )h->length != 8U;
#line 3147
  if (_b != 0) {
#line 3147
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3147
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3147
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3147);
  } else {

  }
#line 3147
  if (_b != 0) {
#line 3147
    return (0);
  } else {

  }
#line 3148
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3148
  if (tmp___1 != (int )h->length) {
#line 3149
    return (0);
  } else {

  }
#line 3151
  tmp___2 = __fswab32(p->mask);
#line 3151
  mask.i = tmp___2;
#line 3152
  tmp___3 = __fswab32(p->val);
#line 3152
  val.i = tmp___3;
#line 3154
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3154
  if (tmp___4 != 0) {
#line 3154
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3154
    if (tmp___5 != 0) {
#line 3156
      drbd_send_sr_reply(mdev, -19);
#line 3157
      return (1);
    } else {

    }
  } else {

  }
#line 3160
  mask = convert_state(mask);
#line 3161
  val = convert_state(val);
#line 3163
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3165
  drbd_send_sr_reply(mdev, rv);
#line 3166
  drbd_md_sync(mdev);
#line 3168
  return (1);
}
}
#line 3171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3173
  p = (struct p_state *)h;
#line 3179
  _b = (unsigned int )h->length != 4U;
#line 3179
  if (_b != 0) {
#line 3179
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3179
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3179
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3179);
  } else {

  }
#line 3179
  if (_b != 0) {
#line 3180
    return (0);
  } else {

  }
#line 3182
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3182
  if (tmp___1 != (int )h->length) {
#line 3183
    return (0);
  } else {

  }
#line 3185
  tmp___2 = __fswab32(p->state);
#line 3185
  peer_state.i = tmp___2;
#line 3187
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_33296.disk;
#line 3188
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3189
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3190
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3190
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3190
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3190
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3193
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3195
  nconn = (enum drbd_conns )mdev->state.ldv_33296.conn;
#line 3195
  oconn = nconn;
#line 3196
  spin_unlock_irq(& mdev->req_lock);
#line 3198
  if ((unsigned int )nconn == 9U) {
#line 3199
    nconn = C_CONNECTED;
  } else {

  }
#line 3201
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_33296.disk > 2) {
#line 3201
    tmp___12 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3201
    if (tmp___12 != 0) {
#line 3206
      cr = (unsigned int )oconn <= 9U;
#line 3209
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1965UL) == 6U)) | cr;
#line 3214
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3214
      cr = tmp___6 | cr;
#line 3217
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_33296.conn > 10 && (int )peer_state.ldv_33296.conn <= 14)) | cr;
#line 3221
      if (cr != 0) {
#line 3222
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_33296.role,
                                    real_peer_disk);
      } else {

      }
#line 3224
      put_ldev(mdev);
#line 3225
      if ((unsigned int )nconn == 31U) {
#line 3226
        nconn = C_CONNECTED;
#line 3227
        if ((unsigned int )*((unsigned char *)mdev + 1965UL) == 6U) {
#line 3228
          val.i = 0U;
#line 3228
          val.ldv_33296.disk = 0U;
#line 3228
          mask.i = 0U;
#line 3228
          mask.ldv_33296.disk = 15U;
#line 3228
          drbd_force_state(mdev, mask, val);
        } else
#line 3229
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3230
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3230
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3230
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3231
          peer_state.ldv_33296.disk = 0U;
#line 3232
          real_peer_disk = D_DISKLESS;
        } else {
#line 3234
          tmp___9 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3234
          if (tmp___9 != 0) {
#line 3235
            return (0);
          } else {

          }
#line 3236
          if ((unsigned int )oconn != 9U) {
#line 3236
            tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3236
            tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3236
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___11,
                   tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3236);
          } else {

          }
#line 3237
          val___0.i = 0U;
#line 3237
          val___0.ldv_33296.conn = 1U;
#line 3237
          mask___0.i = 0U;
#line 3237
          mask___0.ldv_33296.conn = 31U;
#line 3237
          drbd_force_state(mdev, mask___0, val___0);
#line 3238
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3243
  spin_lock_irq(& mdev->req_lock);
#line 3244
  if ((unsigned int )mdev->state.ldv_33296.conn != (unsigned int )oconn) {
#line 3245
    goto retry;
  } else {

  }
#line 3246
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3247
  ns.i = mdev->state.i;
#line 3248
  ns.ldv_33296.conn = (unsigned char )nconn;
#line 3249
  ns.ldv_33296.peer = peer_state.ldv_33296.role;
#line 3250
  ns.ldv_33296.pdsk = (unsigned char )real_peer_disk;
#line 3251
  ns.ldv_33296.peer_isp = (unsigned char )((int )peer_state.ldv_33296.aftr_isp | (int )peer_state.ldv_33296.user_isp);
#line 3252
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3253
    ns.ldv_33296.disk = mdev->new_state_tmp.ldv_33296.disk;
  } else {

  }
#line 3255
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3256
  ns = mdev->state;
#line 3257
  spin_unlock_irq(& mdev->req_lock);
#line 3259
  if (rv <= 0) {
#line 3260
    val___1.i = 0U;
#line 3260
    val___1.ldv_33296.conn = 1U;
#line 3260
    mask___1.i = 0U;
#line 3260
    mask___1.ldv_33296.conn = 31U;
#line 3260
    drbd_force_state(mdev, mask___1, val___1);
#line 3261
    return (0);
  } else {

  }
#line 3264
  if ((unsigned int )oconn > 9U) {
#line 3265
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_33296.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3270
      drbd_send_uuids(mdev);
#line 3271
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3275
  (mdev->net_conf)->want_lose = 0U;
#line 3277
  drbd_md_sync(mdev);
#line 3279
  return (1);
}
}
#line 3282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3284
  p = (struct p_rs_uuid *)h;
#line 3286
  if (((unsigned int )*((unsigned short *)mdev + 982UL) == 240U || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.disk <= 2) {
#line 3286
    goto ldv_43896;
  } else {

  }
#line 3286
  tmp = get_current();
#line 3286
  __wait.flags = 0U;
#line 3286
  __wait.private = (void *)tmp;
#line 3286
  __wait.func = & autoremove_wake_function;
#line 3286
  __wait.task_list.next = & __wait.task_list;
#line 3286
  __wait.task_list.prev = & __wait.task_list;
  ldv_43899: 
#line 3286
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3286
  if (((unsigned int )*((unsigned short *)mdev + 982UL) == 240U || (int )mdev->state.ldv_33296.conn <= 9) || (int )mdev->state.ldv_33296.disk <= 2) {
#line 3286
    goto ldv_43898;
  } else {

  }
#line 3286
  schedule();
#line 3286
  goto ldv_43899;
  ldv_43898: 
#line 3286
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43896: 
#line 3293
  _b = (unsigned int )h->length != 8U;
#line 3293
  if (_b != 0) {
#line 3293
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3293
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3293
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3293);
  } else {

  }
#line 3293
  if (_b != 0) {
#line 3293
    return (0);
  } else {

  }
#line 3294
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3294
  if (tmp___2 != (int )h->length) {
#line 3295
    return (0);
  } else {

  }
#line 3299
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3299
  if (tmp___6 != 0) {
#line 3300
    tmp___3 = __fswab64(p->uuid);
#line 3300
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3301
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3303
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3305
    put_ldev(mdev);
  } else {
#line 3307
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3307
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3307
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3309
  return (1);
}
}
#line 3315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3318
  __min1 = 511UL;
#line 3318
  __min2 = c->bm_words - c->word_offset;
#line 3318
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3319
  want = num_words * 8U;
#line 3321
  if ((unsigned int )h->length != want) {
#line 3322
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3322
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3322
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3323
    return (FAILED);
  } else {

  }
#line 3325
  if (want == 0U) {
#line 3326
    return (DONE);
  } else {

  }
#line 3327
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3327
  if ((unsigned int )tmp___1 != want) {
#line 3328
    return (FAILED);
  } else {

  }
#line 3330
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3332
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3333
  c->bit_offset = c->word_offset * 64UL;
#line 3334
  if (c->bit_offset > c->bm_bits) {
#line 3335
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3337
  return (OK);
}
}
#line 3341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3349
  s = c->bit_offset;
#line 3351
  len = (int )((unsigned int )p->head.length - 1U);
#line 3352
  tmp___0 = DCBP_get_start(p);
#line 3352
  toggle = tmp___0;
#line 3356
  tmp___1 = DCBP_get_pad_bits(p);
#line 3356
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3358
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3359
  if (bits < 0) {
#line 3360
    return (FAILED);
  } else {

  }
#line 3362
  have = bits;
#line 3362
  goto ldv_43935;
  ldv_43934: 
#line 3363
  bits = vli_decode_bits(& rl, look_ahead);
#line 3364
  if (bits <= 0) {
#line 3365
    return (FAILED);
  } else {

  }
#line 3367
  if (toggle != 0) {
#line 3368
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3369
    if (c->bm_bits <= e) {
#line 3370
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3370
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3370
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3371
      return (FAILED);
    } else {

    }
#line 3373
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3376
  if (have < bits) {
#line 3377
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3377
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3377
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3381
    return (FAILED);
  } else {

  }
#line 3383
  look_ahead = look_ahead >> bits;
#line 3384
  have = have - bits;
#line 3386
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3387
  if (bits < 0) {
#line 3388
    return (FAILED);
  } else {

  }
#line 3389
  look_ahead = (tmp << have) | look_ahead;
#line 3390
  have = have + bits;
#line 3362
  s = (unsigned long )((unsigned long long )s + rl);
#line 3362
  toggle = toggle == 0;
  ldv_43935: ;
#line 3362
  if (have > 0) {
#line 3363
    goto ldv_43934;
  } else {

  }
#line 3393
  c->bit_offset = s;
#line 3394
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3396
  return (c->bm_bits == s);
}
}
#line 3400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3404
  tmp___0 = DCBP_get_code(p);
#line 3404
  if ((unsigned int )tmp___0 == 2U) {
#line 3405
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3405
    return (tmp);
  } else {

  }
#line 3411
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3411
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3411
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3412
  val.i = 0U;
#line 3412
  val.ldv_33296.conn = 6U;
#line 3412
  mask.i = 0U;
#line 3412
  mask.ldv_33296.conn = 31U;
#line 3412
  drbd_force_state(mdev, mask, val);
#line 3413
  return (FAILED);
}
}
#line 3416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3420
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3423
  total = c->bytes[0] + c->bytes[1];
#line 3427
  if (total == 0U) {
#line 3428
    return;
  } else {

  }
#line 3431
  if (total >= plain) {
#line 3432
    return;
  } else {

  }
#line 3435
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3438
  if (r > 1000U) {
#line 3439
    r = 1000U;
  } else {

  }
#line 3441
  r = 1000U - r;
#line 3442
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3442
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3442
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3443
  return;
}
}
#line 3458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3463
  ok = 0;
#line 3465
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3465
  if (tmp == 0) {
#line 3465
    goto ldv_43962;
  } else {

  }
#line 3465
  tmp___0 = get_current();
#line 3465
  __wait.flags = 0U;
#line 3465
  __wait.private = (void *)tmp___0;
#line 3465
  __wait.func = & autoremove_wake_function;
#line 3465
  __wait.task_list.next = & __wait.task_list;
#line 3465
  __wait.task_list.prev = & __wait.task_list;
  ldv_43965: 
#line 3465
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3465
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3465
  if (tmp___1 == 0) {
#line 3465
    goto ldv_43964;
  } else {

  }
#line 3465
  schedule();
#line 3465
  goto ldv_43965;
  ldv_43964: 
#line 3465
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43962: 
#line 3467
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3471
  tmp___2 = __get_free_pages(16U, 0U);
#line 3471
  buffer = (void *)tmp___2;
#line 3472
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3473
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3473
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3473
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3474
    goto out;
  } else {

  }
#line 3477
  tmp___5 = drbd_bm_bits(mdev);
#line 3477
  tmp___6 = drbd_bm_words(mdev);
#line 3477
  __constr_expr_0.bm_bits = tmp___5;
#line 3477
  __constr_expr_0.bm_words = tmp___6;
#line 3477
  __constr_expr_0.bit_offset = 0UL;
#line 3477
  __constr_expr_0.word_offset = 0UL;
#line 3477
  __constr_expr_0.packets[0] = 0U;
#line 3477
  __constr_expr_0.packets[1] = 0U;
#line 3477
  __constr_expr_0.bytes[0] = 0U;
#line 3477
  __constr_expr_0.bytes[1] = 0U;
#line 3477
  c = __constr_expr_0;
  ldv_43974: ;
#line 3483
  if ((unsigned int )h->command == 4U) {
#line 3484
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3485
  if ((unsigned int )h->command == 36U) {
#line 3490
    if ((unsigned int )h->length > 4088U) {
#line 3491
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3491
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3491
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3492
      goto out;
    } else {

    }
#line 3495
    p = (struct p_compressed_bm *)buffer;
#line 3496
    __len = 8UL;
#line 3496
    if (__len > 63UL) {
#line 3496
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3496
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3497
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3497
    if (tmp___9 != (int )h->length) {
#line 3498
      goto out;
    } else {

    }
#line 3499
    if ((unsigned int )p->head.length <= 1U) {
#line 3500
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3500
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3500
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3501
      return (2);
    } else {

    }
#line 3503
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3505
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3505
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3505
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3506
    goto out;
  }
#line 3509
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3510
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3512
  if ((unsigned int )ret != 0U) {
#line 3513
    goto ldv_43973;
  } else {

  }
#line 3515
  tmp___14 = drbd_recv_header(mdev, h);
#line 3515
  if (tmp___14 == 0) {
#line 3516
    goto out;
  } else {

  }
#line 3517
  if ((unsigned int )ret == 0U) {
#line 3518
    goto ldv_43974;
  } else {

  }
  ldv_43973: ;
#line 3518
  if ((unsigned int )ret == 2U) {
#line 3519
    goto out;
  } else {

  }
#line 3521
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3523
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 224U) {
#line 3524
    tmp___15 = drbd_send_bitmap(mdev);
#line 3524
    ok = tmp___15 == 0;
#line 3525
    if (ok == 0) {
#line 3526
      goto out;
    } else {

    }
#line 3528
    val.i = 0U;
#line 3528
    val.ldv_33296.conn = 15U;
#line 3528
    mask.i = 0U;
#line 3528
    mask.ldv_33296.conn = 31U;
#line 3528
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3529
    if (ok != 1) {
#line 3529
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3529
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3529
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             3529);
    } else {

    }
  } else
#line 3530
  if ((unsigned int )*((unsigned short *)mdev + 982UL) != 208U) {
#line 3533
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 3533
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3533
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3533
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3537
  ok = 1;
  out: 
#line 3539
  drbd_bm_unlock(mdev);
#line 3540
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 982UL) == 208U) {
#line 3541
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3542
  free_pages((unsigned long )buffer, 0U);
#line 3543
  return (ok);
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3552
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3552
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3552
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3555
  size = (int )h->length;
#line 3556
  goto ldv_43995;
  ldv_43994: 
#line 3557
  __min1 = size;
#line 3557
  __min2 = 128;
#line 3557
  want = __min1 < __min2 ? __min1 : __min2;
#line 3558
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3559
  _b = r <= 0;
#line 3559
  if (_b != 0) {
#line 3559
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3559);
  } else {

  }
#line 3559
  if (_b != 0) {
#line 3559
    goto ldv_43993;
  } else {

  }
#line 3560
  size = size - r;
  ldv_43995: ;
#line 3556
  if (size > 0) {
#line 3557
    goto ldv_43994;
  } else {

  }
  ldv_43993: ;
#line 3562
  return (size == 0);
}
}
#line 3565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3567
  if ((int )mdev->state.ldv_33296.disk > 3) {
#line 3568
    drbd_kick_lo(mdev);
  } else {

  }
#line 3572
  drbd_tcp_quickack(mdev->data.socket);
#line 3574
  return (1);
}
}
#line 3577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void timeval_sub_us(struct timeval *tv , unsigned int us ) 
{ 


  {
#line 3579
  tv->tv_sec = tv->tv_sec - (__kernel_time_t )(us / 1000000U);
#line 3580
  us = us % 1000000U;
#line 3581
  if (tv->tv_usec > (__kernel_suseconds_t )us) {
#line 3582
    tv->tv_usec = tv->tv_usec + 1000000L;
#line 3583
    tv->tv_sec = tv->tv_sec - (__kernel_time_t )1;
  } else {

  }
#line 3585
  tv->tv_usec = tv->tv_usec - (__kernel_suseconds_t )us;
#line 3586
  return;
}
}
#line 3588 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void got_delay_probe(struct drbd_conf *mdev , int from , struct p_delay_probe *p ) 
{ 
  struct delay_probe *dp ;
  struct list_head *le ;
  struct timeval now ;
  int seq_num ;
  int offset ;
  int data_delay ;
  __u32 tmp ;
  __u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 3597
  tmp = __fswab32(p->seq_num);
#line 3597
  seq_num = (int )tmp;
#line 3598
  tmp___0 = __fswab32(p->offset);
#line 3598
  offset = (int )tmp___0;
#line 3600
  spin_lock(& mdev->peer_seq_lock);
#line 3601
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->delay_probes));
#line 3601
  if (tmp___3 == 0) {
#line 3602
    if (from == 1) {
#line 3603
      le = mdev->delay_probes.next;
    } else {
#line 3605
      le = mdev->delay_probes.prev;
    }
#line 3607
    __mptr = (struct list_head  const  *)le;
#line 3607
    dp = (struct delay_probe *)__mptr;
#line 3609
    if (dp->seq_num == (unsigned int )seq_num) {
#line 3610
      list_del(le);
#line 3611
      spin_unlock(& mdev->peer_seq_lock);
#line 3612
      do_gettimeofday(& now);
#line 3613
      timeval_sub_us(& now, (unsigned int )offset);
#line 3614
      data_delay = (int )(((unsigned int )now.tv_usec - (unsigned int )dp->time.tv_usec) + (unsigned int )(now.tv_sec - dp->time.tv_sec) * 1000000U);
#line 3618
      if (data_delay > 0) {
#line 3619
        mdev->data_delay = data_delay;
      } else {

      }
#line 3621
      kfree((void const   *)dp);
#line 3622
      return;
    } else {

    }
#line 3625
    if (dp->seq_num > (unsigned int )seq_num) {
#line 3626
      spin_unlock(& mdev->peer_seq_lock);
#line 3627
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3627
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3627
      printk("<4>%s %s: Previous allocation failure of struct delay_probe?\n", tmp___2,
             tmp___1);
#line 3628
      return;
    } else {

    }
  } else {

  }
#line 3631
  spin_unlock(& mdev->peer_seq_lock);
#line 3633
  tmp___4 = kmalloc___1(40UL, 16U);
#line 3633
  dp = (struct delay_probe *)tmp___4;
#line 3634
  if ((unsigned long )dp == (unsigned long )((struct delay_probe *)0)) {
#line 3635
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3635
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3635
    printk("<4>%s %s: Failed to allocate a struct delay_probe, do not worry.\n", tmp___6,
           tmp___5);
#line 3636
    return;
  } else {

  }
#line 3639
  dp->seq_num = (unsigned int )seq_num;
#line 3640
  do_gettimeofday(& dp->time);
#line 3641
  timeval_sub_us(& dp->time, (unsigned int )offset);
#line 3643
  spin_lock(& mdev->peer_seq_lock);
#line 3644
  if (from == 1) {
#line 3645
    list_add(& dp->list, & mdev->delay_probes);
  } else {
#line 3647
    list_add_tail(& dp->list, & mdev->delay_probes);
  }
#line 3648
  spin_unlock(& mdev->peer_seq_lock);
#line 3649
  return;
}
}
#line 3651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_delay_probe(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_delay_probe *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3653
  p = (struct p_delay_probe *)h;
#line 3655
  _b = (unsigned int )h->length != 8U;
#line 3655
  if (_b != 0) {
#line 3655
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3655
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3655
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_delay_probe", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3655);
  } else {

  }
#line 3655
  if (_b != 0) {
#line 3655
    return (0);
  } else {

  }
#line 3656
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3656
  if (tmp___1 != (int )h->length) {
#line 3657
    return (0);
  } else {

  }
#line 3659
  got_delay_probe(mdev, 1, p);
#line 3660
  return (1);
}
}
#line 3665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[41U]  = 
#line 3665
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0,      0,      & receive_delay_probe, 
        0};
#line 3692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3693 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3698
  header = & mdev->data.rbuf.header;
#line 3700
  goto ldv_44050;
  ldv_44049: 
#line 3701
  drbd_thread_current_set_cpu(mdev);
#line 3702
  tmp = drbd_recv_header(mdev, header);
#line 3702
  if (tmp == 0) {
#line 3703
    val.i = 0U;
#line 3703
    val.ldv_33296.conn = 6U;
#line 3703
    mask.i = 0U;
#line 3703
    mask.ldv_33296.conn = 31U;
#line 3703
    drbd_force_state(mdev, mask, val);
#line 3704
    goto ldv_44040;
  } else {

  }
#line 3707
  if ((unsigned int )header->command <= 39U) {
#line 3708
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3709
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3711
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3712
  if ((unsigned int )header->command > 257U) {
#line 3713
    handler = & receive_skip;
  } else {
#line 3715
    handler = 0;
  }
#line 3717
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3717
  if (tmp___2 != 0L) {
#line 3718
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3718
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3718
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3720
    val___0.i = 0U;
#line 3720
    val___0.ldv_33296.conn = 6U;
#line 3720
    mask___0.i = 0U;
#line 3720
    mask___0.ldv_33296.conn = 31U;
#line 3720
    drbd_force_state(mdev, mask___0, val___0);
#line 3721
    goto ldv_44040;
  } else {

  }
#line 3723
  tmp___6 = (*handler)(mdev, header);
#line 3723
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3723
  if (tmp___7 != 0L) {
#line 3724
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3724
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3724
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3724
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3726
    val___1.i = 0U;
#line 3726
    val___1.ldv_33296.conn = 6U;
#line 3726
    mask___1.i = 0U;
#line 3726
    mask___1.ldv_33296.conn = 31U;
#line 3726
    drbd_force_state(mdev, mask___1, val___1);
#line 3727
    goto ldv_44040;
  } else {

  }
  ldv_44050: 
#line 3700
  tmp___8 = get_t_state(& mdev->receiver);
#line 3700
  if ((unsigned int )tmp___8 == 1U) {
#line 3701
    goto ldv_44049;
  } else {

  }
  ldv_44040: ;
#line 3705
  return;
}
}
#line 3732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3743
  spin_lock_irq(& mdev->req_lock);
#line 3744
  i = 0;
#line 3744
  goto ldv_44067;
  ldv_44066: 
#line 3745
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3746
  pos = slot->first;
#line 3746
  goto ldv_44064;
  ldv_44063: 
#line 3752
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3752
  if (tmp___2 == 0) {
#line 3752
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3752
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3752);
  } else {

  }
#line 3755
  _req_mod(req, connection_lost_while_pending);
#line 3746
  pos = tmp;
  ldv_44064: ;
#line 3746
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3746
    tmp = pos->next;
#line 3746
    if (1 != 0) {
#line 3746
      __mptr = (struct hlist_node  const  *)pos;
#line 3746
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3746
      if (1 != 0) {
#line 3747
        goto ldv_44063;
      } else {
#line 3749
        goto ldv_44065;
      }
    } else {
#line 3749
      goto ldv_44065;
    }
  } else {

  }
  ldv_44065: 
#line 3744
  i = i + 1;
  ldv_44067: ;
#line 3744
  if (i <= 14) {
#line 3745
    goto ldv_44066;
  } else {

  }
#line 3758
  i = 0;
#line 3758
  goto ldv_44070;
  ldv_44069: 
#line 3759
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3759
  if (tmp___5 == 0) {
#line 3760
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3760
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3760
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3758
  i = i + 1;
  ldv_44070: ;
#line 3758
  if (i <= 14) {
#line 3759
    goto ldv_44069;
  } else {

  }
#line 3763
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3764
  spin_unlock_irq(& mdev->req_lock);
#line 3765
  return;
}
}
#line 3767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3771
  barr.w.cb = & w_prev_work_done;
#line 3772
  init_completion(& barr.done);
#line 3773
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3774
  wait_for_completion(& barr.done);
#line 3775
  return;
}
}
#line 3777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___6 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;

  {
#line 3781
  rv = 0;
#line 3784
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 0U) {
#line 3785
    return;
  } else {

  }
#line 3786
  if ((int )mdev->state.ldv_33296.conn > 7) {
#line 3787
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33296.conn);
#line 3787
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3787
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3787
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3791
  drbd_thread_stop(& mdev->asender);
#line 3792
  drbd_free_sock(mdev);
#line 3794
  spin_lock_irq(& mdev->req_lock);
#line 3795
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3796
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3797
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3798
  spin_unlock_irq(& mdev->req_lock);
#line 3810
  drbd_rs_cancel_all(mdev);
#line 3811
  mdev->rs_total = 0UL;
#line 3812
  mdev->rs_failed = 0UL;
#line 3813
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3814
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3817
  del_timer_sync(& mdev->resync_timer);
#line 3818
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3819
  resync_timer_fn((unsigned long )mdev);
#line 3824
  drbd_flush_workqueue(mdev);
#line 3828
  drbd_process_done_ee(mdev);
#line 3830
  kfree((void const   *)mdev->p_uuid);
#line 3831
  mdev->p_uuid = 0;
#line 3833
  if ((unsigned int )*((unsigned char *)mdev + 1966UL) == 0U) {
#line 3834
    tl_clear(mdev);
  } else {

  }
#line 3836
  drbd_fail_pending_reads(mdev);
#line 3838
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3838
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3838
  printk("<6>%s %s: Connection closed\n", tmp___3, tmp___2);
#line 3840
  drbd_md_sync(mdev);
#line 3842
  fp = FP_DONT_CARE;
#line 3843
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3843
  if (tmp___4 != 0) {
#line 3844
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3845
    put_ldev(mdev);
  } else {

  }
#line 3848
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) {
#line 3849
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_33296.pdsk > 5) {
#line 3850
      tmp___5 = drbd_try_outdate_peer(mdev);
#line 3850
      nps = tmp___5;
#line 3851
      val.i = 0U;
#line 3851
      val.ldv_33296.pdsk = (unsigned char )nps;
#line 3851
      mask.i = 0U;
#line 3851
      mask.ldv_33296.pdsk = 15U;
#line 3851
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3855
  spin_lock_irq(& mdev->req_lock);
#line 3856
  os = mdev->state;
#line 3857
  if ((int )os.ldv_33296.conn > 1) {
#line 3859
    ns = os;
#line 3860
    ns.ldv_33296.conn = 2U;
#line 3861
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3863
  spin_unlock_irq(& mdev->req_lock);
#line 3865
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3867
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3867
    if (tmp___6 == 0) {
#line 3867
      goto ldv_44090;
    } else {

    }
#line 3867
    tmp___7 = get_current();
#line 3867
    __wait.flags = 0U;
#line 3867
    __wait.private = (void *)tmp___7;
#line 3867
    __wait.func = & autoremove_wake_function;
#line 3867
    __wait.task_list.next = & __wait.task_list;
#line 3867
    __wait.task_list.prev = & __wait.task_list;
    ldv_44093: 
#line 3867
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3867
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3867
    if (tmp___8 == 0) {
#line 3867
      goto ldv_44092;
    } else {

    }
#line 3867
    schedule();
#line 3867
    goto ldv_44093;
    ldv_44092: 
#line 3867
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_44090: 
#line 3871
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3871
    if (tmp___9 == 0) {
#line 3871
      goto ldv_44094;
    } else {

    }
#line 3871
    tmp___10 = get_current();
#line 3871
    __wait___0.flags = 0U;
#line 3871
    __wait___0.private = (void *)tmp___10;
#line 3871
    __wait___0.func = & autoremove_wake_function;
#line 3871
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3871
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44097: 
#line 3871
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3871
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3871
    if (tmp___11 == 0) {
#line 3871
      goto ldv_44096;
    } else {

    }
#line 3871
    schedule();
#line 3871
    goto ldv_44097;
    ldv_44096: 
#line 3871
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_44094: 
#line 3873
    spin_lock_irq(& mdev->req_lock);
#line 3875
    h = mdev->ee_hash;
#line 3875
    goto ldv_44099;
    ldv_44098: ;
#line 3876
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3877
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3877
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3877
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___13,
             tmp___12, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3875
    h = h + 1;
    ldv_44099: ;
#line 3875
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3876
      goto ldv_44098;
    } else {

    }
#line 3879
    kfree((void const   *)mdev->ee_hash);
#line 3880
    mdev->ee_hash = 0;
#line 3881
    mdev->ee_hash_s = 0U;
#line 3884
    h = mdev->tl_hash;
#line 3884
    goto ldv_44102;
    ldv_44101: ;
#line 3885
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3886
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3886
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3886
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___15,
             tmp___14, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3884
    h = h + 1;
    ldv_44102: ;
#line 3884
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3885
      goto ldv_44101;
    } else {

    }
#line 3888
    kfree((void const   *)mdev->tl_hash);
#line 3889
    mdev->tl_hash = 0;
#line 3890
    mdev->tl_hash_s = 0U;
#line 3891
    spin_unlock_irq(& mdev->req_lock);
#line 3893
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3894
    mdev->cram_hmac_tfm = 0;
#line 3896
    kfree((void const   *)mdev->net_conf);
#line 3897
    mdev->net_conf = 0;
#line 3898
    val___0.i = 0U;
#line 3898
    val___0.ldv_33296.conn = 0U;
#line 3898
    mask___0.i = 0U;
#line 3898
    mask___0.ldv_33296.conn = 31U;
#line 3898
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3908
  tmp___16 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3908
  i = (unsigned int )tmp___16;
#line 3909
  if (i != 0U) {
#line 3910
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3910
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3910
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___18, tmp___17,
           i);
  } else {

  }
#line 3911
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3911
  i = (unsigned int )tmp___19;
#line 3912
  if (i != 0U) {
#line 3913
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3913
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3913
    printk("<6>%s %s: pp_in_use = %d, expected 0\n", tmp___21, tmp___20, i);
  } else {

  }
#line 3915
  tmp___24 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3915
  if (tmp___24 == 0) {
#line 3915
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3915
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3915
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___23,
           tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3915);
  } else {

  }
#line 3916
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3916
  if (tmp___27 == 0) {
#line 3916
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3916
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3916
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3916);
  } else {

  }
#line 3917
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3917
  if (tmp___30 == 0) {
#line 3917
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3917
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3917
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3917);
  } else {

  }
#line 3918
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3918
  if (tmp___33 == 0) {
#line 3918
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3918
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3918
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3918);
  } else {

  }
#line 3921
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3922
  tmp___36 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3922
  if (tmp___36 == 0) {
#line 3922
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3922
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3922
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3922);
  } else {

  }
#line 3923
  return;
}
}
#line 3934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3937
  p = & mdev->data.sbuf.handshake;
#line 3940
  tmp___1 = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3940
  if (tmp___1 != 0) {
#line 3941
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3941
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3941
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 3942
    return (0);
  } else {

  }
#line 3945
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3946
    mutex_unlock(& mdev->data.mutex);
#line 3947
    return (0);
  } else {

  }
#line 3950
  memset((void *)p, 0, 80UL);
#line 3951
  p->protocol_min = 1442840576U;
#line 3952
  p->protocol_max = 1560281088U;
#line 3953
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3955
  mutex_unlock(& mdev->data.mutex);
#line 3956
  return (ok);
}
}
#line 3966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 3969
  p = & mdev->data.rbuf.handshake;
#line 3970
  expect = 72;
#line 3974
  rv = drbd_send_handshake(mdev);
#line 3975
  if (rv == 0) {
#line 3976
    return (0);
  } else {

  }
#line 3978
  rv = drbd_recv_header(mdev, & p->head);
#line 3979
  if (rv == 0) {
#line 3980
    return (0);
  } else {

  }
#line 3982
  if ((unsigned int )p->head.command != 65534U) {
#line 3983
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3983
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3983
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3983
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 3985
    return (-1);
  } else {

  }
#line 3988
  if ((int )p->head.length != expect) {
#line 3989
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 3991
    return (-1);
  } else {

  }
#line 3994
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3996
  if (rv != expect) {
#line 3997
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3997
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3997
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 3998
    return (0);
  } else {

  }
#line 4001
  tmp___6 = __fswab32(p->protocol_min);
#line 4001
  p->protocol_min = tmp___6;
#line 4002
  tmp___7 = __fswab32(p->protocol_max);
#line 4002
  p->protocol_max = tmp___7;
#line 4003
  if (p->protocol_max == 0U) {
#line 4004
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4006
  if (p->protocol_min > 93U || p->protocol_max <= 85U) {
#line 4008
    goto incompat;
  } else {

  }
#line 4010
  __min1 = 93;
#line 4010
  __min2 = (int )p->protocol_max;
#line 4010
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4012
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4012
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4012
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 4015
  return (1);
  incompat: 
#line 4018
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 93, p->protocol_min, p->protocol_max);
#line 4022
  return (-1);
}
}
#line 4041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 4045
  response = 0;
#line 4046
  right_response = 0;
#line 4047
  peers_ch = 0;
#line 4049
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4049
  key_len = (unsigned int )tmp;
#line 4054
  desc.tfm = mdev->cram_hmac_tfm;
#line 4055
  desc.flags = 0U;
#line 4057
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4059
  if (rv != 0) {
#line 4060
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4060
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4060
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 4061
    rv = -1;
#line 4062
    goto fail;
  } else {

  }
#line 4065
  get_random_bytes((void *)(& my_challenge), 64);
#line 4067
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4068
  if (rv == 0) {
#line 4069
    goto fail;
  } else {

  }
#line 4071
  rv = drbd_recv_header(mdev, & p);
#line 4072
  if (rv == 0) {
#line 4073
    goto fail;
  } else {

  }
#line 4075
  if ((unsigned int )p.command != 16U) {
#line 4076
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 4076
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4076
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4076
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 4078
    rv = 0;
#line 4079
    goto fail;
  } else {

  }
#line 4082
  if ((unsigned int )p.length > 128U) {
#line 4083
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4083
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4083
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 4084
    rv = -1;
#line 4085
    goto fail;
  } else {

  }
#line 4088
  tmp___7 = kmalloc___1((size_t )p.length, 16U);
#line 4088
  peers_ch = (char *)tmp___7;
#line 4089
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4090
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4090
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4090
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 4091
    rv = -1;
#line 4092
    goto fail;
  } else {

  }
#line 4095
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 4097
  if ((int )p.length != rv) {
#line 4098
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4098
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4098
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 4099
    rv = 0;
#line 4100
    goto fail;
  } else {

  }
#line 4103
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4104
  tmp___12 = kmalloc___1((size_t )resp_size, 16U);
#line 4104
  response = (char *)tmp___12;
#line 4105
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4106
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4106
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4106
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 4107
    rv = -1;
#line 4108
    goto fail;
  } else {

  }
#line 4111
  sg_init_table(& sg, 1U);
#line 4112
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 4114
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4115
  if (rv != 0) {
#line 4116
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4116
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4116
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 4117
    rv = -1;
#line 4118
    goto fail;
  } else {

  }
#line 4121
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4122
  if (rv == 0) {
#line 4123
    goto fail;
  } else {

  }
#line 4125
  rv = drbd_recv_header(mdev, & p);
#line 4126
  if (rv == 0) {
#line 4127
    goto fail;
  } else {

  }
#line 4129
  if ((unsigned int )p.command != 17U) {
#line 4130
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 4130
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4130
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4130
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 4132
    rv = 0;
#line 4133
    goto fail;
  } else {

  }
#line 4136
  if ((unsigned int )p.length != resp_size) {
#line 4137
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4137
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4137
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 4138
    rv = 0;
#line 4139
    goto fail;
  } else {

  }
#line 4142
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4144
  if ((unsigned int )rv != resp_size) {
#line 4145
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4145
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4145
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 4146
    rv = 0;
#line 4147
    goto fail;
  } else {

  }
#line 4150
  tmp___24 = kmalloc___1((size_t )resp_size, 16U);
#line 4150
  right_response = (char *)tmp___24;
#line 4151
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4152
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4152
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4152
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 4153
    rv = -1;
#line 4154
    goto fail;
  } else {

  }
#line 4157
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4159
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4160
  if (rv != 0) {
#line 4161
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4161
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4161
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 4162
    rv = -1;
#line 4163
    goto fail;
  } else {

  }
#line 4166
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4166
  rv = tmp___29 == 0;
#line 4168
  if (rv != 0) {
#line 4169
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4169
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4169
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4172
    rv = -1;
  }
  fail: 
#line 4175
  kfree((void const   *)peers_ch);
#line 4176
  kfree((void const   *)response);
#line 4177
  kfree((void const   *)right_response);
#line 4179
  return (rv);
}
}
#line 4183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 4185
  mdev = thi->mdev;
#line 4186
  tmp = mdev_to_minor(mdev);
#line 4186
  minor = tmp;
#line 4189
  tmp___0 = get_current();
#line 4189
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4191
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4191
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4191
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_44147: 
#line 4194
  h = drbd_connect(mdev);
#line 4195
  if (h == 0) {
#line 4196
    drbd_disconnect(mdev);
#line 4197
    tmp___3 = get_current();
#line 4197
    tmp___3->state = 1L;
#line 4198
    schedule_timeout(250L);
  } else {

  }
#line 4200
  if (h == -1) {
#line 4201
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4201
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4201
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4202
    val.i = 0U;
#line 4202
    val.ldv_33296.conn = 1U;
#line 4202
    mask.i = 0U;
#line 4202
    mask.ldv_33296.conn = 31U;
#line 4202
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4204
  if (h == 0) {
#line 4205
    goto ldv_44147;
  } else {

  }

#line 4206
  if (h > 0) {
#line 4207
    tmp___6 = get_net_conf(mdev);
#line 4207
    if (tmp___6 != 0) {
#line 4208
      drbdd(mdev);
#line 4209
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4213
  drbd_disconnect(mdev);
#line 4215
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4215
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4215
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4216
  return (0);
}
}
#line 4221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4223
  p = (struct p_req_state_reply *)h;
#line 4225
  tmp = __fswab32(p->retcode);
#line 4225
  retcode = (int )tmp;
#line 4227
  if (retcode > 0) {
#line 4228
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4230
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4231
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4231
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4231
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4231
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4234
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4236
  return (1);
}
}
#line 4239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4241
  tmp = drbd_send_ping_ack(mdev);
#line 4241
  return (tmp);
}
}
#line 4245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4248
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4249
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4249
  if (tmp == 0) {
#line 4250
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4252
  return (1);
}
}
#line 4255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4257
  p = (struct p_block_ack *)h;
#line 4258
  tmp = __fswab64(p->sector);
#line 4258
  sector = (sector_t )tmp;
#line 4259
  tmp___0 = __fswab32(p->blksize);
#line 4259
  blksize = (int )tmp___0;
#line 4261
  if (mdev->agreed_pro_version <= 88) {
#line 4261
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4261
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4261
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4261);
  } else {

  }
#line 4263
  tmp___3 = __fswab32(p->seq_num);
#line 4263
  update_peer_seq(mdev, tmp___3);
#line 4265
  drbd_rs_complete_io(mdev, sector);
#line 4266
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4266U);
#line 4268
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4269
  atomic_dec(& mdev->rs_pending_cnt);
#line 4269
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4269
  if (tmp___7 < 0) {
#line 4269
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4269
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4269
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4269
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4269, tmp___4);
  } else {

  }
#line 4271
  return (1);
}
}
#line 4276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4279
  tmp = tl_hash_slot(mdev, sector);
#line 4279
  slot = tmp;
#line 4283
  n = slot->first;
#line 4283
  goto ldv_44188;
  ldv_44187: ;
#line 4284
  if ((unsigned long )req == (unsigned long )id) {
#line 4285
    if (req->sector != sector) {
#line 4286
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4286
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4286
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4290
      goto ldv_44186;
    } else {

    }
#line 4292
    return (req);
  } else {

  }
#line 4283
  n = n->next;
  ldv_44188: ;
#line 4283
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4283
    __builtin_prefetch((void const   *)n->next);
#line 4283
    if (1 != 0) {
#line 4283
      __mptr = (struct hlist_node  const  *)n;
#line 4283
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4283
      if (1 != 0) {
#line 4284
        goto ldv_44187;
      } else {
#line 4286
        goto ldv_44186;
      }
    } else {
#line 4286
      goto ldv_44186;
    }
  } else {

  }
  ldv_44186: 
#line 4295
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4295
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4295
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4297
  return (0);
}
}
#line 4303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4310
  spin_lock_irq(& mdev->req_lock);
#line 4311
  req = (*validator)(mdev, id, sector);
#line 4312
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4312
  if (tmp___1 != 0L) {
#line 4313
    spin_unlock_irq(& mdev->req_lock);
#line 4314
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4314
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4314
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4315
    return (0);
  } else {

  }
#line 4317
  __req_mod(req, what, & m);
#line 4318
  spin_unlock_irq(& mdev->req_lock);
#line 4320
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4321
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4322
  return (1);
}
}
#line 4325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4327
  p = (struct p_block_ack *)h;
#line 4328
  tmp = __fswab64(p->sector);
#line 4328
  sector = (sector_t )tmp;
#line 4329
  tmp___0 = __fswab32(p->blksize);
#line 4329
  blksize = (int )tmp___0;
#line 4332
  tmp___1 = __fswab32(p->seq_num);
#line 4332
  update_peer_seq(mdev, tmp___1);
#line 4334
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4335
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4335U);
#line 4336
    atomic_dec(& mdev->rs_pending_cnt);
#line 4336
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4336
    if (tmp___5 < 0) {
#line 4336
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4336
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4336
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4336
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4336, tmp___2);
    } else {

    }
#line 4337
    return (1);
  } else {

  }
#line 4339
  tmp___6 = __fswab16((int )h->command);
#line 4339
  switch ((int )tmp___6) {
  case 23: ;
#line 4341
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4341
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4341
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4341
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4341);
  } else {

  }
#line 4342
  what = write_acked_by_peer_and_sis;
#line 4343
  goto ldv_44216;
  case 22: ;
#line 4345
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4345
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4345
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4345
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4345);
  } else {

  }
#line 4346
  what = write_acked_by_peer;
#line 4347
  goto ldv_44216;
  case 21: ;
#line 4349
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4349
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4349
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4349
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4349);
  } else {

  }
#line 4350
  what = recv_acked_by_peer;
#line 4351
  goto ldv_44216;
  case 24: ;
#line 4353
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4353
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4353
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4353
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4353);
  } else {

  }
#line 4354
  what = conflict_discarded_by_peer;
#line 4355
  goto ldv_44216;
  default: 
#line 4357
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4357
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4357
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
         4357);
#line 4358
  return (0);
  }
  ldv_44216: 
#line 4361
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4361
  return (tmp___17);
}
}
#line 4365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4367
  p = (struct p_block_ack *)h;
#line 4368
  tmp = __fswab64(p->sector);
#line 4368
  sector = (sector_t )tmp;
#line 4370
  tmp___2 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4370
  if (tmp___2 != 0) {
#line 4371
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4371
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4371
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4373
  tmp___3 = __fswab32(p->seq_num);
#line 4373
  update_peer_seq(mdev, tmp___3);
#line 4375
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4376
    tmp___4 = __fswab32(p->blksize);
#line 4376
    size = (int )tmp___4;
#line 4377
    atomic_dec(& mdev->rs_pending_cnt);
#line 4377
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4377
    if (tmp___8 < 0) {
#line 4377
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4377
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4377
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4377
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4377, tmp___5);
    } else {

    }
#line 4378
    drbd_rs_failed_io(mdev, sector, size);
#line 4379
    return (1);
  } else {

  }
#line 4381
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4381
  return (tmp___9);
}
}
#line 4385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4387
  p = (struct p_block_ack *)h;
#line 4388
  tmp = __fswab64(p->sector);
#line 4388
  sector = (sector_t )tmp;
#line 4390
  tmp___0 = __fswab32(p->seq_num);
#line 4390
  update_peer_seq(mdev, tmp___0);
#line 4391
  tmp___1 = __fswab32(p->blksize);
#line 4391
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4391
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4391
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4394
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4394
  return (tmp___4);
}
}
#line 4398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 4402
  p = (struct p_block_ack *)h;
#line 4404
  tmp = __fswab64(p->sector);
#line 4404
  sector = (sector_t )tmp;
#line 4405
  tmp___0 = __fswab32(p->blksize);
#line 4405
  size = (int )tmp___0;
#line 4407
  tmp___1 = __fswab32(p->seq_num);
#line 4407
  update_peer_seq(mdev, tmp___1);
#line 4409
  atomic_dec(& mdev->rs_pending_cnt);
#line 4409
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4409
  if (tmp___5 < 0) {
#line 4409
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4409
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4409
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4409
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3, "got_NegRSDReply",
           4409, tmp___2);
  } else {

  }
#line 4411
  tmp___6 = _get_ldev_if_state(mdev, D_FAILED);
#line 4411
  if (tmp___6 != 0) {
#line 4412
    drbd_rs_complete_io(mdev, sector);
#line 4413
    drbd_rs_failed_io(mdev, sector, size);
#line 4414
    put_ldev(mdev);
  } else {

  }
#line 4417
  return (1);
}
}
#line 4420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4422
  p = (struct p_barrier_ack *)h;
#line 4424
  tmp = __fswab32(p->set_size);
#line 4424
  tl_release(mdev, p->barrier, tmp);
#line 4426
  return (1);
}
}
#line 4429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4431
  p = (struct p_block_ack *)h;
#line 4436
  tmp = __fswab64(p->sector);
#line 4436
  sector = (sector_t )tmp;
#line 4437
  tmp___0 = __fswab32(p->blksize);
#line 4437
  size = (int )tmp___0;
#line 4439
  tmp___1 = __fswab32(p->seq_num);
#line 4439
  update_peer_seq(mdev, tmp___1);
#line 4441
  tmp___2 = __fswab64(p->block_id);
#line 4441
  if (tmp___2 == 4712ULL) {
#line 4442
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4444
    ov_oos_print(mdev);
  }
#line 4446
  drbd_rs_complete_io(mdev, sector);
#line 4447
  atomic_dec(& mdev->rs_pending_cnt);
#line 4447
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4447
  if (tmp___6 < 0) {
#line 4447
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4447
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4447
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4447
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4447, tmp___3);
  } else {

  }
#line 4449
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4449
  if (mdev->ov_left == 0UL) {
#line 4450
    tmp___7 = kmalloc___1(24UL, 16U);
#line 4450
    w = (struct drbd_work *)tmp___7;
#line 4451
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4452
      w->cb = & w_ov_finished;
#line 4453
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4455
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4455
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4455
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4456
      ov_oos_print(mdev);
#line 4457
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4460
  return (1);
}
}
#line 4463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_delay_probe_m(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_delay_probe *p ;

  {
#line 4465
  p = (struct p_delay_probe *)h;
#line 4467
  got_delay_probe(mdev, 0, p);
#line 4468
  return (1);
}
}
#line 4476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4478
  asender_tbl[0].pkt_size = 0UL;
#line 4478
  asender_tbl[0].process = 0;
#line 4478
  asender_tbl[1].pkt_size = 0UL;
#line 4478
  asender_tbl[1].process = 0;
#line 4478
  asender_tbl[2].pkt_size = 0UL;
#line 4478
  asender_tbl[2].process = 0;
#line 4478
  asender_tbl[3].pkt_size = 0UL;
#line 4478
  asender_tbl[3].process = 0;
#line 4478
  asender_tbl[4].pkt_size = 0UL;
#line 4478
  asender_tbl[4].process = 0;
#line 4478
  asender_tbl[5].pkt_size = 0UL;
#line 4478
  asender_tbl[5].process = 0;
#line 4478
  asender_tbl[6].pkt_size = 0UL;
#line 4478
  asender_tbl[6].process = 0;
#line 4478
  asender_tbl[7].pkt_size = 0UL;
#line 4478
  asender_tbl[7].process = 0;
#line 4478
  asender_tbl[8].pkt_size = 0UL;
#line 4478
  asender_tbl[8].process = 0;
#line 4478
  asender_tbl[9].pkt_size = 0UL;
#line 4478
  asender_tbl[9].process = 0;
#line 4478
  asender_tbl[10].pkt_size = 0UL;
#line 4478
  asender_tbl[10].process = 0;
#line 4478
  asender_tbl[11].pkt_size = 0UL;
#line 4478
  asender_tbl[11].process = 0;
#line 4478
  asender_tbl[12].pkt_size = 0UL;
#line 4478
  asender_tbl[12].process = 0;
#line 4478
  asender_tbl[13].pkt_size = 0UL;
#line 4478
  asender_tbl[13].process = 0;
#line 4478
  asender_tbl[14].pkt_size = 0UL;
#line 4478
  asender_tbl[14].process = 0;
#line 4478
  asender_tbl[15].pkt_size = 0UL;
#line 4478
  asender_tbl[15].process = 0;
#line 4478
  asender_tbl[16].pkt_size = 0UL;
#line 4478
  asender_tbl[16].process = 0;
#line 4478
  asender_tbl[17].pkt_size = 0UL;
#line 4478
  asender_tbl[17].process = 0;
#line 4478
  asender_tbl[18].pkt_size = 0UL;
#line 4478
  asender_tbl[18].process = 0;
#line 4478
  asender_tbl[19].pkt_size = 8UL;
#line 4478
  asender_tbl[19].process = & got_Ping;
#line 4478
  asender_tbl[20].pkt_size = 8UL;
#line 4478
  asender_tbl[20].process = & got_PingAck;
#line 4478
  asender_tbl[21].pkt_size = 32UL;
#line 4478
  asender_tbl[21].process = & got_BlockAck;
#line 4478
  asender_tbl[22].pkt_size = 32UL;
#line 4478
  asender_tbl[22].process = & got_BlockAck;
#line 4478
  asender_tbl[23].pkt_size = 32UL;
#line 4478
  asender_tbl[23].process = & got_BlockAck;
#line 4478
  asender_tbl[24].pkt_size = 32UL;
#line 4478
  asender_tbl[24].process = & got_BlockAck;
#line 4478
  asender_tbl[25].pkt_size = 32UL;
#line 4478
  asender_tbl[25].process = & got_NegAck;
#line 4478
  asender_tbl[26].pkt_size = 32UL;
#line 4478
  asender_tbl[26].process = & got_NegDReply;
#line 4478
  asender_tbl[27].pkt_size = 32UL;
#line 4478
  asender_tbl[27].process = & got_NegRSDReply;
#line 4478
  asender_tbl[28].pkt_size = 16UL;
#line 4478
  asender_tbl[28].process = & got_BarrierAck;
#line 4478
  asender_tbl[29].pkt_size = 12UL;
#line 4478
  asender_tbl[29].process = & got_RqSReply;
#line 4478
  asender_tbl[30].pkt_size = 0UL;
#line 4478
  asender_tbl[30].process = 0;
#line 4478
  asender_tbl[31].pkt_size = 0UL;
#line 4478
  asender_tbl[31].process = 0;
#line 4478
  asender_tbl[32].pkt_size = 32UL;
#line 4478
  asender_tbl[32].process = & got_OVResult;
#line 4478
  asender_tbl[33].pkt_size = 0UL;
#line 4478
  asender_tbl[33].process = 0;
#line 4478
  asender_tbl[34].pkt_size = 32UL;
#line 4478
  asender_tbl[34].process = & got_IsInSync;
#line 4478
  asender_tbl[35].pkt_size = 0UL;
#line 4478
  asender_tbl[35].process = 0;
#line 4478
  asender_tbl[36].pkt_size = 0UL;
#line 4478
  asender_tbl[36].process = 0;
#line 4478
  asender_tbl[37].pkt_size = 0UL;
#line 4478
  asender_tbl[37].process = 0;
#line 4478
  asender_tbl[38].pkt_size = 0UL;
#line 4478
  asender_tbl[38].process = 0;
#line 4478
  asender_tbl[39].pkt_size = 16UL;
#line 4478
  asender_tbl[39].process = & got_delay_probe_m;
#line 4478
  asender_tbl[40].pkt_size = 0UL;
#line 4478
  asender_tbl[40].process = 0;
#line 4498
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4499
    return (0);
  } else {

  }
#line 4500
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4505
  mdev = thi->mdev;
#line 4506
  h = & mdev->meta.rbuf.header;
#line 4507
  cmd = 0;
#line 4510
  buf = (void *)h;
#line 4511
  received = 0;
#line 4512
  expect = 8;
#line 4515
  tmp = mdev_to_minor(mdev);
#line 4515
  tmp___0 = get_current();
#line 4515
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4517
  tmp___1 = get_current();
#line 4517
  tmp___1->policy = 2U;
#line 4518
  tmp___2 = get_current();
#line 4518
  tmp___2->rt_priority = 2U;
#line 4520
  goto ldv_44299;
  ldv_44303: 
#line 4521
  drbd_thread_current_set_cpu(mdev);
#line 4522
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4522
  if (tmp___6 != 0) {
#line 4523
    tmp___3 = drbd_send_ping(mdev);
#line 4523
    _b = tmp___3 == 0;
#line 4523
    if (_b != 0) {
#line 4523
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4523
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4523
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4523);
    } else {

    }
#line 4523
    if (_b != 0) {
#line 4523
      goto reconnect;
    } else {

    }
#line 4524
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4530
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4530
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4530
    if (tmp___7 > 3) {
#line 4532
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_44298: 
#line 4534
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4535
  tmp___8 = get_current();
#line 4535
  flush_signals(tmp___8);
#line 4536
  tmp___11 = drbd_process_done_ee(mdev);
#line 4536
  if (tmp___11 == 0) {
#line 4537
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4537
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4537
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4538
    goto reconnect;
  } else {

  }
#line 4541
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4542
  spin_lock_irq(& mdev->req_lock);
#line 4543
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4544
  spin_unlock_irq(& mdev->req_lock);
#line 4548
  if (empty != 0) {
#line 4549
    goto ldv_44297;
  } else {

  }
#line 4550
  goto ldv_44298;
  ldv_44297: ;
#line 4552
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4553
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4556
  tmp___12 = get_current();
#line 4556
  tmp___13 = signal_pending(tmp___12);
#line 4556
  if (tmp___13 != 0) {
#line 4557
    goto ldv_44299;
  } else {

  }
#line 4559
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4561
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4563
  tmp___14 = get_current();
#line 4563
  flush_signals(tmp___14);
#line 4575
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4575
  if (tmp___21 != 0L) {
#line 4576
    received = received + rv;
#line 4577
    buf = buf + (unsigned long )rv;
  } else
#line 4578
  if (rv == 0) {
#line 4579
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4579
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4579
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4580
    goto reconnect;
  } else
#line 4581
  if (rv == -11) {
#line 4582
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4584
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4584
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4584
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4585
      goto reconnect;
    } else {

    }
#line 4587
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4588
    goto ldv_44299;
  } else
#line 4589
  if (rv == -4) {
#line 4590
    goto ldv_44299;
  } else {
#line 4592
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4592
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4592
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4593
    goto reconnect;
  }
#line 4596
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4597
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4597
    if (tmp___25 != 0L) {
#line 4598
      tmp___22 = __fswab32(h->magic);
#line 4598
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4598
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4598
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4601
      goto reconnect;
    } else {

    }
#line 4603
    tmp___26 = __fswab16((int )h->command);
#line 4603
    cmd = get_asender_cmd((int )tmp___26);
#line 4604
    tmp___27 = __fswab16((int )h->length);
#line 4604
    len = (int )tmp___27;
#line 4605
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4605
    if (tmp___31 != 0L) {
#line 4606
      tmp___28 = __fswab32(h->magic);
#line 4606
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4606
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4606
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4609
      goto disconnect;
    } else {

    }
#line 4611
    expect = (int )cmd->pkt_size;
#line 4612
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4612
    if (_b___0 != 0) {
#line 4612
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4612
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4612
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4612);
    } else {

    }
#line 4612
    if (_b___0 != 0) {
#line 4613
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4615
  if (received == expect) {
#line 4616
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4616
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4616
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4616
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4616);
    } else {

    }
#line 4617
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4617
    if (tmp___36 == 0) {
#line 4618
      goto reconnect;
    } else {

    }
#line 4620
    buf = (void *)h;
#line 4621
    received = 0;
#line 4622
    expect = 8;
#line 4623
    cmd = 0;
  } else {

  }
  ldv_44299: 
#line 4520
  tmp___37 = get_t_state(thi);
#line 4520
  if ((unsigned int )tmp___37 == 1U) {
#line 4521
    goto ldv_44303;
  } else {

  }

#line 4627
  if (0) {
    reconnect: 
#line 4629
    val.i = 0U;
#line 4629
    val.ldv_33296.conn = 5U;
#line 4629
    mask.i = 0U;
#line 4629
    mask.ldv_33296.conn = 31U;
#line 4629
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4631
  if (0) {
    disconnect: 
#line 4633
    val___0.i = 0U;
#line 4633
    val___0.ldv_33296.conn = 1U;
#line 4633
    mask___0.i = 0U;
#line 4633
    mask___0.ldv_33296.conn = 31U;
#line 4633
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4635
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4637
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 4637
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4637
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4637
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4637);
  } else {

  }
#line 4638
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4638
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4638
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4640
  return (0);
}
}
#line 4680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4692
  LDV_IN_INTERRUPT = 1;
#line 4701
  ldv_initialize();
#line 4703
  goto ldv_44332;
  ldv_44331: 
#line 4706
  tmp = nondet_int();
#line 4706
  switch (tmp) {
  default: ;
#line 4708
  goto ldv_44330;
  }
  ldv_44330: ;
  ldv_44332: 
#line 4703
  tmp___0 = nondet_int();
#line 4703
  if (tmp___0 != 0) {
#line 4704
    goto ldv_44331;
  } else {

  }


#line 4717
  ldv_check_final_state();
#line 4720
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 590 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 592
  __hlist_del(n);
#line 593
  n->next = 0xdead000000100100UL;
#line 594
  n->pprev = 0xdead000000200200UL;
#line 595
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 299 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 303
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 163 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 88 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 294 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 296
  rcu_read_lock_sched_notrace();
#line 298
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 300
  return;
}
}
#line 316 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 318
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 320
  rcu_read_lock_sched_notrace();
#line 321
  return;
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11582: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_11582;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___2(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 354
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 793 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1155
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1421
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1423
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1970 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1972
  atomic_inc(& mdev->ap_pending_cnt);
#line 1973
  return;
}
}
#line 2124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2126
  mxb = 1000000;
#line 2127
  tmp = get_net_conf(mdev);
#line 2127
  if (tmp != 0) {
#line 2128
    mxb = (mdev->net_conf)->max_buffers;
#line 2129
    put_net_conf(mdev);
  } else {

  }
#line 2131
  return (mxb);
}
}
#line 2134 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2140
  switch ((unsigned int )s.ldv_33296.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2153
  goto ldv_41753;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2172
  return (0);
  }
  ldv_41753: ;
#line 2175
  switch ((unsigned int )s.ldv_33296.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2182
  goto ldv_41773;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2191
  return (0);
  }
  ldv_41773: ;
#line 2194
  return (1);
}
}
#line 2197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2199
  tmp = drbd_get_max_buffers(mdev);
#line 2199
  mxb = tmp;
#line 2201
  if ((unsigned int )*((unsigned char *)mdev + 1966UL) != 0U) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___0 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2211
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2211
  if (tmp___1 == 0) {
#line 2212
    return (0);
  } else {

  }
#line 2216
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2216
  if (tmp___2 > mxb) {
#line 2217
    return (0);
  } else {

  }
#line 2218
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2218
  if (tmp___3 != 0) {
#line 2219
    return (0);
  } else {

  }
#line 2220
  return (1);
}
}
#line 2226 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int one_or_two ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2230
  tmp = get_current();
#line 2230
  wait.flags = 0U;
#line 2230
  wait.private = (void *)tmp;
#line 2230
  wait.func = & autoremove_wake_function;
#line 2230
  wait.task_list.next = & wait.task_list;
#line 2230
  wait.task_list.prev = & wait.task_list;
#line 2240
  spin_lock_irq(& mdev->req_lock);
#line 2241
  goto ldv_41789;
  ldv_41788: 
#line 2242
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2243
  spin_unlock_irq(& mdev->req_lock);
#line 2244
  schedule();
#line 2245
  finish_wait(& mdev->misc_wait, & wait);
#line 2246
  spin_lock_irq(& mdev->req_lock);
  ldv_41789: 
#line 2241
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2241
  if (tmp___0 == 0) {
#line 2242
    goto ldv_41788;
  } else {

  }
#line 2248
  atomic_add(one_or_two, & mdev->ap_bio_cnt);
#line 2249
  spin_unlock_irq(& mdev->req_lock);
#line 2250
  return;
}
}
#line 2252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2254
  tmp = drbd_get_max_buffers(mdev);
#line 2254
  mxb = tmp;
#line 2255
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2255
  ap_bio = tmp___0;
#line 2257
  if (ap_bio < 0) {
#line 2257
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2257
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2257
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2257);
  } else {

  }
#line 2261
  if (ap_bio < mxb) {
#line 2262
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2263
  if (ap_bio == 0) {
#line 2263
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2263
    if (tmp___4 != 0) {
#line 2264
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2264
      if (tmp___3 == 0) {
#line 2265
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2266
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_41896: ;
#line 207
    goto ldv_41896;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_41901: ;
#line 216
    goto ldv_41901;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41970;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41970;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41970;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_41970;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_41970: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_42003;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_42003;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_42003;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_42003;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_42003: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 68
  s = req->rq_state;
#line 72
  if ((int )rw == 1) {
#line 79
    list_del(& req->tl_requests);
#line 84
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 85
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             85U);
    } else {

    }
#line 87
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 88
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         88U);
    } else {

    }
#line 100
    if ((s & 7UL) != 0UL) {
#line 101
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 101
      if (tmp___2 != 0) {
#line 102
        drbd_al_complete_io(mdev, req->sector);
#line 103
        put_ldev(mdev);
      } else {
#line 104
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 104
        if (tmp___1 != 0) {
#line 105
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 123
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 125
    if ((unsigned long )((void *)req->w.list.next) != 0xdead000000100100UL) {
#line 125
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 125
      if (tmp___7 == 0) {
#line 129
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 130
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 132
    req->w.cb = & w_io_error;
#line 133
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 136
    drbd_req_free(req);
  }
#line 137
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 149
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 149
  if (tmp != 0) {
#line 150
    return;
  } else {

  }
#line 152
  b = mdev->newest_tle;
#line 153
  b->w.cb = & w_send_barrier;
#line 158
  inc_ap_pending(mdev);
#line 159
  drbd_queue_work(& mdev->data.work, & b->w);
#line 160
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 161
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 166
  s = req->rq_state;
#line 174
  if ((int )mdev->state.ldv_33296.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 176
    queue_barrier(mdev);
  } else {

  }
#line 181
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 182
    sector = req->sector;
#line 183
    size = (int const   )req->size;
#line 189
    slot = tl_hash_slot___0(mdev, sector);
#line 190
    n = slot->first;
#line 190
    goto ldv_42046;
    ldv_42045: 
#line 191
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 191
    if (tmp___1 != 0) {
#line 192
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 190
    n = n->next;
    ldv_42046: ;
#line 190
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 190
      __builtin_prefetch((void const   *)n->next);
#line 190
      if (1 != 0) {
#line 190
        __mptr = (struct hlist_node  const  *)n;
#line 190
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 190
        if (1 != 0) {
#line 191
          goto ldv_42045;
        } else {
#line 193
          goto ldv_42047;
        }
      } else {
#line 193
        goto ldv_42047;
      }
    } else {

    }
    ldv_42047: 
#line 213
    slot = ee_hash_slot___0(mdev, req->sector);
#line 214
    n = slot->first;
#line 214
    goto ldv_42054;
    ldv_42053: 
#line 215
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 215
    if (tmp___2 != 0) {
#line 216
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 217
      goto ldv_42052;
    } else {

    }
#line 214
    n = n->next;
    ldv_42054: ;
#line 214
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 214
      __builtin_prefetch((void const   *)n->next);
#line 214
      if (1 != 0) {
#line 214
        __mptr___0 = (struct hlist_node  const  *)n;
#line 214
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 214
        if (1 != 0) {
#line 215
          goto ldv_42053;
        } else {
#line 217
          goto ldv_42052;
        }
      } else {
#line 217
        goto ldv_42052;
      }
    } else {

    }
    ldv_42052: ;
  } else {

  }
#line 220
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 227
  bio_endio(m->bio, m->error);
#line 228
  dec_ap_bio(mdev);
#line 229
  return;
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 239
  s = req->rq_state;
#line 240
  mdev = req->mdev;
#line 242
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 253
  if ((s & 16UL) != 0UL) {
#line 254
    return;
  } else {

  }
#line 255
  if ((s & 8UL) != 0UL) {
#line 256
    return;
  } else {

  }
#line 257
  if ((int )s & 1) {
#line 258
    return;
  } else {

  }
#line 260
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 282
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 283
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 283
    error = (int )tmp;
#line 287
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 287
    if (tmp___2 == 0) {
#line 288
      hlist_del(& req->colision);
    } else
#line 290
    if ((s & 504UL) != 0UL) {
#line 290
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             290);
    } else {

    }
#line 293
    if (rw == 1) {
#line 294
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 297
    _drbd_end_io_acct(mdev, req);
#line 299
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 300
    m->bio = req->master_bio;
#line 301
    req->master_bio = 0;
  } else {

  }
#line 304
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 309
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 310
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 340
  mdev = req->mdev;
#line 341
  sector = req->sector;
#line 342
  size = (int const   )req->size;
#line 348
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 348
  if (tmp___1 == 0) {
#line 348
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           348);
  } else {

  }
#line 350
  tmp___2 = get_net_conf(mdev);
#line 350
  if (tmp___2 == 0) {
#line 351
    return (0);
  } else {

  }
#line 354
  _b = mdev->tl_hash_s == 0U;
#line 354
  if (_b != 0) {
#line 354
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           354);
  } else {

  }
#line 354
  if (_b != 0) {
#line 355
    goto out_no_conflict;
  } else {

  }
#line 356
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 356
  if (tmp___5 != 0L) {
#line 356
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (356), "i" (12UL));
    ldv_42082: ;
#line 356
    goto ldv_42082;
  } else {

  }
#line 359
  slot = tl_hash_slot___0(mdev, sector);
#line 360
  n = slot->first;
#line 360
  goto ldv_42089;
  ldv_42088: 
#line 361
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 361
  if (tmp___10 != 0) {
#line 362
    tmp___6 = get_current();
#line 362
    tmp___7 = get_current();
#line 362
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 368
    goto out_conflict;
  } else {

  }
#line 360
  n = n->next;
  ldv_42089: ;
#line 360
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 360
    __builtin_prefetch((void const   *)n->next);
#line 360
    if (1 != 0) {
#line 360
      __mptr = (struct hlist_node  const  *)n;
#line 360
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 360
      if (1 != 0) {
#line 361
        goto ldv_42088;
      } else {
#line 363
        goto ldv_42090;
      }
    } else {
#line 363
      goto ldv_42090;
    }
  } else {

  }
  ldv_42090: ;
#line 372
  if (mdev->ee_hash_s != 0U) {
#line 374
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 374
    if (tmp___11 != 0L) {
#line 374
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (374), "i" (12UL));
      ldv_42091: ;
#line 374
      goto ldv_42091;
    } else {

    }
#line 377
    slot = ee_hash_slot___0(mdev, sector);
#line 378
    n = slot->first;
#line 378
    goto ldv_42097;
    ldv_42096: 
#line 379
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 379
    if (tmp___16 != 0) {
#line 380
      tmp___12 = get_current();
#line 380
      tmp___13 = get_current();
#line 380
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 386
      goto out_conflict;
    } else {

    }
#line 378
    n = n->next;
    ldv_42097: ;
#line 378
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 378
      __builtin_prefetch((void const   *)n->next);
#line 378
      if (1 != 0) {
#line 378
        __mptr___0 = (struct hlist_node  const  *)n;
#line 378
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 378
        if (1 != 0) {
#line 379
          goto ldv_42096;
        } else {
#line 381
          goto ldv_42098;
        }
      } else {
#line 381
        goto ldv_42098;
      }
    } else {

    }
    ldv_42098: ;
  } else {

  }
  out_no_conflict: 
#line 395
  put_net_conf(mdev);
#line 396
  return (0);
  out_conflict: 
#line 399
  put_net_conf(mdev);
#line 400
  return (1);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 418
  mdev = req->mdev;
#line 419
  m->bio = 0;
#line 421
  switch ((unsigned int )what) {
  default: 
#line 423
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
         423);
#line 424
  goto ldv_42106;
  case 1U: ;
#line 435
  if ((req->rq_state & 504UL) != 0UL) {
#line 435
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           435);
  } else {

  }
#line 436
  req->rq_state = req->rq_state | 8UL;
#line 437
  inc_ap_pending(mdev);
#line 438
  goto ldv_42106;
  case 2U: ;
#line 442
  if ((req->rq_state & 7UL) != 0UL) {
#line 442
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           442);
  } else {

  }
#line 443
  req->rq_state = req->rq_state | 1UL;
#line 444
  goto ldv_42106;
  case 19U: ;
#line 447
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 448
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 450
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 452
  req->rq_state = req->rq_state | 6UL;
#line 453
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 455
  _req_may_be_done(req, m);
#line 456
  put_ldev(mdev);
#line 457
  goto ldv_42106;
  case 18U: 
#line 460
  req->rq_state = req->rq_state | 2UL;
#line 461
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 463
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 466
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 467
  _req_may_be_done(req, m);
#line 468
  put_ldev(mdev);
#line 469
  goto ldv_42106;
  case 17U: 
#line 473
  req->rq_state = req->rq_state | 2UL;
#line 474
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 475
  _req_may_be_done(req, m);
#line 476
  put_ldev(mdev);
#line 477
  goto ldv_42106;
  case 16U: 
#line 480
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         480U);
#line 482
  req->rq_state = req->rq_state | 2UL;
#line 483
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 485
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 488
  if ((req->rq_state & 504UL) != 0UL) {
#line 488
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           488);
  } else {

  }
#line 489
  req->rq_state = req->rq_state | 8UL;
#line 490
  inc_ap_pending(mdev);
#line 492
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 493
  put_ldev(mdev);
  case 4U: 
#line 513
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 513
  hlist_add_head(& req->colision, tmp___11);
#line 515
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 517
  if ((req->rq_state & 8UL) == 0UL) {
#line 517
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           517);
  } else {

  }
#line 518
  req->rq_state = req->rq_state | 16UL;
#line 519
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 522
  drbd_queue_work(& mdev->data.work, & req->w);
#line 523
  goto ldv_42106;
  case 3U: 
#line 529
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 529
  hlist_add_head(& req->colision, tmp___14);
#line 549
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 553
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 553
  if (tmp___17 != 0) {
#line 553
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           553);
  } else {

  }
#line 555
  req->epoch = (mdev->newest_tle)->br_number;
#line 556
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 560
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 563
  if ((req->rq_state & 8UL) == 0UL) {
#line 563
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 563
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 563
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           563);
  } else {

  }
#line 564
  req->rq_state = req->rq_state | 16UL;
#line 565
  req->w.cb = & w_send_dblock;
#line 566
  drbd_queue_work(& mdev->data.work, & req->w);
#line 569
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 570
    queue_barrier(mdev);
  } else {

  }
#line 572
  goto ldv_42106;
  case 5U: ;
  case 6U: 
#line 579
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 582
  _req_may_be_done(req, m);
#line 583
  goto ldv_42106;
  case 7U: ;
#line 587
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 591
    if ((req->rq_state & 8UL) != 0UL) {
#line 592
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 592
      if (tmp___20 != 0) {
#line 592
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 592
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 592
      if (tmp___24 < 0) {
#line 592
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 592
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 592
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 592
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 592, tmp___21);
      } else {

      }
#line 593
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 594
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 600
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 601
  req->rq_state = req->rq_state | 32UL;
#line 607
  _req_may_be_done(req, m);
#line 608
  goto ldv_42106;
  case 8U: ;
#line 613
  if ((req->rq_state & 8UL) != 0UL) {
#line 614
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 614
    if (tmp___25 != 0) {
#line 614
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 614
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
    if (tmp___29 < 0) {
#line 614
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 614
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 614
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 614, tmp___26);
    } else {

    }
  } else {

  }
#line 615
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 616
  req->rq_state = req->rq_state | 64UL;
#line 619
  if ((req->rq_state & 16UL) == 0UL) {
#line 620
    _req_may_be_done(req, m);
  } else {

  }
#line 621
  goto ldv_42106;
  case 11U: 
#line 624
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 629
  if ((unsigned int )what == 12U) {
#line 630
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 633
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 651
  req->rq_state = req->rq_state | 128UL;
#line 652
  if ((req->rq_state & 8UL) == 0UL) {
#line 652
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 652
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           652);
  } else {

  }
#line 653
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 653
  if (tmp___34 != 0) {
#line 653
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 653
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 653
  if (tmp___38 < 0) {
#line 653
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 653
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 653, tmp___35);
  } else {

  }
#line 654
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 655
  _req_may_be_done(req, m);
#line 656
  goto ldv_42106;
  case 13U: ;
#line 660
  if ((req->rq_state & 8UL) != 0UL) {
#line 661
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 661
    if (tmp___39 != 0) {
#line 661
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 661
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 661
    if (tmp___43 < 0) {
#line 661
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 661
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 661
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 661
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 661, tmp___40);
    } else {

    }
  } else {

  }
#line 662
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 664
  req->rq_state = req->rq_state | 64UL;
#line 665
  _req_may_be_done(req, m);
#line 667
  goto ldv_42106;
  case 14U: ;
#line 670
  if ((req->rq_state & 8UL) != 0UL) {
#line 674
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 675
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 677
  if ((req->rq_state & 32UL) == 0UL) {
#line 677
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 677
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           677);
  } else {

  }
#line 678
  req->rq_state = req->rq_state | 64UL;
#line 679
  _req_may_be_done(req, m);
#line 680
  goto ldv_42106;
  case 15U: ;
#line 683
  if ((req->rq_state & 8UL) == 0UL) {
#line 683
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           683);
  } else {

  }
#line 684
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 684
  if (tmp___50 != 0) {
#line 684
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 684
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 684
  if (tmp___54 < 0) {
#line 684
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 684
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 684, tmp___51);
  } else {

  }
#line 685
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 686
  req->rq_state = req->rq_state | 192UL;
#line 687
  _req_may_be_done(req, m);
#line 688
  goto ldv_42106;
  }
  ldv_42106: ;
#line 690
  return;
}
}
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 704
  if ((unsigned int )*((unsigned char *)mdev + 1965UL) == 16U) {
#line 705
    return (1);
  } else {

  }
#line 706
  if ((int )mdev->state.ldv_33296.disk > 4) {
#line 707
    return (0);
  } else {

  }
#line 708
  if ((int )mdev->state.ldv_33296.disk <= 3) {
#line 709
    return (0);
  } else {

  }
#line 711
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 712
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 714
  if (sector >= nr_sectors) {
#line 714
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           714);
  } else {

  }
#line 715
  if (esector >= nr_sectors) {
#line 715
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           715);
  } else {

  }
#line 717
  sbnr = sector >> 3;
#line 718
  ebnr = esector >> 3;
#line 720
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 720
  return (tmp___3 == 0);
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 725
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 726
  size = (int const   )bio->bi_size;
#line 727
  sector = bio->bi_sector;
#line 728
  b = 0;
#line 731
  err = -5;
#line 734
  req = drbd_req_new(mdev, bio);
#line 735
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 736
    dec_ap_bio(mdev);
#line 739
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 739
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 740
    bio_endio(bio, -12);
#line 741
    return (0);
  } else {

  }
#line 744
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 745
  if (local == 0) {
#line 746
    bio_put(req->private_bio);
#line 747
    req->private_bio = 0;
  } else {

  }
#line 749
  if (rw == 1) {
#line 750
    remote = 1;
  } else {
#line 753
    if (local != 0) {
#line 754
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 754
      if (tmp___1 == 0) {
#line 760
        local = 0;
#line 761
        bio_put(req->private_bio);
#line 762
        req->private_bio = 0;
#line 763
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 766
    remote = local == 0 && (int )mdev->state.ldv_33296.pdsk > 7;
  }
#line 777
  if ((rw == 2 && (int )mdev->state.ldv_33296.disk > 3) && local == 0) {
#line 778
    err = -11;
#line 779
    goto fail_and_free_req;
  } else {

  }
#line 787
  if (rw == 1 && local != 0) {
#line 788
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 790
  remote = remote != 0 && (*((unsigned int *)mdev + 491UL) == 65536U || (*((unsigned int *)mdev + 491UL) == 32768U && (int )mdev->state.ldv_33296.conn > 9));
#line 794
  if (local == 0 && remote == 0) {
#line 795
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 796
    goto fail_free_complete;
  } else {

  }
#line 805
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 805
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 805
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 809
      tmp___4 = kmalloc___2(56UL, 16U);
#line 809
      b = (struct drbd_tl_epoch *)tmp___4;
#line 810
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 811
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 811
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 812
        err = -12;
#line 813
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 818
  spin_lock_irq(& mdev->req_lock);
#line 820
  if (remote != 0) {
#line 821
    remote = *((unsigned int *)mdev + 491UL) == 65536U || (*((unsigned int *)mdev + 491UL) == 32768U && (int )mdev->state.ldv_33296.conn > 9);
#line 824
    if (remote == 0) {
#line 825
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 825
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 825
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 826
    if (local == 0 && remote == 0) {
#line 827
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 828
      spin_unlock_irq(& mdev->req_lock);
#line 829
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 833
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 834
    mdev->unused_spare_tle = b;
#line 835
    b = 0;
  } else {

  }
#line 837
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 837
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 837
    if (tmp___12 != 0) {
#line 842
      spin_unlock_irq(& mdev->req_lock);
#line 843
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 848
  _drbd_start_io_acct(mdev, req, bio);
#line 860
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 860
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 860
    if (tmp___16 != 0) {
#line 862
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 863
      mdev->unused_spare_tle = 0;
    } else {
#line 860
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 865
  if (remote != 0 && rw == 1) {
#line 865
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 865
    if (tmp___15 != 0) {
#line 865
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             866);
    } else {

    }
  } else {

  }
#line 884
  if (remote != 0) {
#line 885
    _req_mod(req, to_be_send);
  } else {

  }
#line 886
  if (local != 0) {
#line 887
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 892
  if (rw == 1) {
#line 892
    tmp___22 = _req_conflicts(req);
#line 892
    if (tmp___22 != 0) {
#line 899
      if (local != 0) {
#line 900
        bio_put(req->private_bio);
#line 901
        req->private_bio = 0;
#line 902
        drbd_al_complete_io(mdev, req->sector);
#line 903
        put_ldev(mdev);
#line 904
        local = 0;
      } else {

      }
#line 906
      if (remote != 0) {
#line 907
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 907
        if (tmp___17 != 0) {
#line 907
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 907
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 907
        if (tmp___21 < 0) {
#line 907
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 907
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 907, tmp___18);
        } else {

        }
      } else {

      }
#line 908
      _drbd_end_io_acct(mdev, req);
#line 910
      bio_endio(req->master_bio, 0);
#line 911
      req->master_bio = 0;
#line 912
      dec_ap_bio(mdev);
#line 913
      drbd_req_free(req);
#line 914
      remote = 0;
    } else {

    }
  } else {

  }
#line 919
  if (remote != 0) {
#line 924
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 928
  spin_unlock_irq(& mdev->req_lock);
#line 929
  kfree((void const   *)b);
#line 931
  if (local != 0) {
#line 932
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 934
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 934
    if (tmp___23 != 0) {
#line 937
      bio_endio(req->private_bio, -5);
    } else {
#line 939
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 944
  drbd_plug_device(mdev);
#line 946
  return (0);
  fail_free_complete: ;
#line 949
  if (rw == 1 && local != 0) {
#line 950
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 952
  if (local != 0) {
#line 953
    bio_put(req->private_bio);
#line 954
    req->private_bio = 0;
#line 955
    put_ldev(mdev);
  } else {

  }
#line 957
  bio_endio(bio, err);
#line 958
  drbd_req_free(req);
#line 959
  dec_ap_bio(mdev);
#line 960
  kfree((void const   *)b);
#line 962
  return (0);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 972
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 974
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 974
    if (tmp___3 != 0) {
#line 975
      tmp = get_current();
#line 975
      tmp___0 = get_current();
#line 975
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 975
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 975
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 981
    return (1);
  } else {

  }
#line 993
  if ((int )mdev->state.ldv_33296.disk <= 7 && (int )mdev->state.ldv_33296.pdsk <= 7) {
#line 994
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 994
    if (tmp___6 != 0) {
#line 995
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 996
    return (1);
  } else {

  }
#line 999
  return (0);
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;

  {
#line 1005
  mdev = (struct drbd_conf *)q->queuedata;
#line 1007
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1007
  if (tmp != 0) {
#line 1008
    bio_endio(bio, -1);
#line 1009
    return (0);
  } else {

  }
#line 1020
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1020
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1020
  if (tmp___1 != 0L) {
#line 1020
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1020
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1020
    if (tmp___3 != 0L) {
#line 1022
      bio_endio(bio, -95);
#line 1023
      return (0);
    } else {

    }
  } else {

  }
#line 1029
  if (bio->bi_size == 0U) {
#line 1029
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1029);
  } else {

  }
#line 1030
  if ((bio->bi_size & 511U) != 0U) {
#line 1030
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1030);
  } else {

  }
#line 1031
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1031
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1031);
  } else {

  }
#line 1035
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1036
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1038
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1038
  if (tmp___11 != 0L) {
#line 1039
    inc_ap_bio(mdev, 1);
#line 1040
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1040
    return (tmp___10);
  } else {

  }
#line 1045
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1047
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1051
    bio_endio(bio, -22);
  } else {
#line 1063
    sect = bio->bi_sector;
#line 1064
    sps = 64;
#line 1065
    mask = sps + -1;
#line 1066
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1067
    bp = bio_split(bio, (int )first_sectors);
#line 1078
    inc_ap_bio(mdev, 2);
#line 1080
    if (s_enr + 1U != e_enr) {
#line 1080
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1080
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1080
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             1080);
    } else {

    }
#line 1082
    drbd_make_request_common(mdev, & bp->bio1);
#line 1083
    drbd_make_request_common(mdev, & bp->bio2);
#line 1084
    bio_pair_release(bp);
  }
#line 1086
  return (0);
}
}
#line 1102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1104
  mdev = (struct drbd_conf *)q->queuedata;
#line 1105
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1107
  bio_size = bvm->bi_size;
#line 1110
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1112
  if (limit < 0) {
#line 1113
    limit = 0;
  } else {

  }
#line 1114
  if (bio_size == 0U) {
#line 1115
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1116
      limit = (int )bvec->bv_len;
    } else
#line 1117
    if (limit != 0) {
#line 1117
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1117
      if (tmp != 0) {
#line 1118
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1120
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1121
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1122
          _min1 = limit;
#line 1122
          _min2 = backing_limit;
#line 1122
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1124
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1126
  return (limit);
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___2(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 312 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 314
  page = compound_head(page);
#line 315
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 315
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 315
  if (tmp___0 != 0L) {
#line 315
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (315), "i" (12UL));
    ldv_15635: ;
#line 315
    goto ldv_15635;
  } else {

  }
#line 316
  atomic_inc(& page->_count);
#line 317
  return;
}
}
#line 1069 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1071
  retval = 512;
#line 1073
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1074
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1076
  return ((unsigned short )retval);
}
}
#line 1079 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1081
  tmp = bdev_get_queue(bdev);
#line 1081
  tmp___0 = queue_logical_block_size(tmp);
#line 1081
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1566 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1575
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1576
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1577
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1585
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 192;
  retry: 
#line 93
  bio = bio_alloc(16U, 1);
#line 94
  bio->bi_bdev = bdev->md_bdev;
#line 95
  bio->bi_sector = sector;
#line 96
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 96
  ok = tmp___0 == size;
#line 97
  if (ok == 0) {
#line 98
    goto out;
  } else {

  }
#line 99
  bio->bi_private = (void *)(& md_io);
#line 100
  bio->bi_end_io = & drbd_md_io_complete;
#line 101
  bio->bi_rw = (unsigned long )rw;
#line 103
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 103
  if (tmp___1 != 0) {
#line 104
    bio_endio(bio, -5);
  } else {
#line 106
    submit_bio(rw, bio);
  }
#line 107
  wait_for_completion(& md_io.event);
#line 108
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 113
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 113
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 113
  if (tmp___5 != 0L) {
#line 113
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 113
    if (tmp___6 != 0L) {
#line 115
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 116
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 117
      rw = rw & -33;
#line 118
      bio_put(bio);
#line 119
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 122
  bio_put(bio);
#line 123
  return (ok);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 130
  offset = 0;
#line 131
  iop = mdev->md_io_page;
#line 133
  tmp___1 = mutex_is_locked(& mdev->md_io_mutex);
#line 133
  if (tmp___1 == 0) {
#line 133
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           133);
  } else {

  }
#line 135
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 135
  if (tmp___2 != 0L) {
#line 135
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (135), "i" (12UL));
    ldv_41909: ;
#line 135
    goto ldv_41909;
  } else {

  }
#line 137
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 137
  logical_block_size = (int )tmp___3;
#line 138
  if (logical_block_size == 0) {
#line 139
    logical_block_size = 512;
  } else {

  }
#line 142
  if (logical_block_size != 512) {
#line 143
    mask = logical_block_size / 512 + -1;
#line 144
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 144
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             144);
    } else {

    }
#line 145
    if ((mask + 1) * 512 != logical_block_size) {
#line 145
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             145);
    } else {

    }
#line 146
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 147
    sector = (sector_t )(~ mask) & sector;
#line 148
    iop = mdev->md_io_tmpp;
#line 150
    if (rw & 1) {
#line 153
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 153
      p = tmp___8;
#line 154
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 154
      hp = tmp___9;
#line 156
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 159
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 159
      if (tmp___12 != 0L) {
#line 160
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 163
        return (0);
      } else {

      }
#line 166
      __len = 512UL;
#line 166
      if (__len > 63UL) {
#line 166
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 166
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 170
  tmp___17 = drbd_md_first_sector(bdev);
#line 170
  if (tmp___17 > sector) {
#line 172
    tmp___13 = get_current();
#line 172
    tmp___14 = get_current();
#line 172
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 170
    tmp___18 = drbd_md_last_sector(bdev);
#line 170
    if (tmp___18 < sector) {
#line 172
      tmp___13 = get_current();
#line 172
      tmp___14 = get_current();
#line 172
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 176
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 177
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 177
  if (tmp___21 != 0L) {
#line 178
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 180
    return (0);
  } else {

  }
#line 183
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 184
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 184
    p___0 = tmp___22;
#line 185
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 185
    hp___0 = tmp___23;
#line 187
    __len___0 = 512UL;
#line 187
    if (__len___0 > 63UL) {
#line 187
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 187
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 190
  return (ok);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 197
  al_flags = 0UL;
#line 199
  spin_lock_irq(& mdev->al_lock);
#line 200
  tmp = lc_find(mdev->resync, enr / 4U);
#line 201
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 201
  if (tmp___1 != 0L) {
#line 202
    __mptr = (struct lc_element  const  *)tmp;
#line 202
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 203
    if (tmp___0 != 0) {
#line 204
      spin_unlock_irq(& mdev->al_lock);
#line 205
      return (0);
    } else {

    }
  } else {

  }
#line 208
  al_ext = lc_get(mdev->act_log, enr);
#line 209
  al_flags = (mdev->act_log)->flags;
#line 210
  spin_unlock_irq(& mdev->al_lock);
#line 221
  return (al_ext);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 226
  enr = (unsigned int )(sector >> 13);
#line 230
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 230
  if (tmp___1 <= 0) {
#line 230
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           230);
  } else {

  }
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_41938;
  } else {

  }
#line 232
  tmp___2 = get_current();
#line 232
  __wait.flags = 0U;
#line 232
  __wait.private = (void *)tmp___2;
#line 232
  __wait.func = & autoremove_wake_function;
#line 232
  __wait.task_list.next = & __wait.task_list;
#line 232
  __wait.task_list.prev = & __wait.task_list;
  ldv_41941: 
#line 232
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_41940;
  } else {

  }
#line 232
  schedule();
#line 232
  goto ldv_41941;
  ldv_41940: 
#line 232
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41938: ;
#line 234
  if (al_ext->lc_number != enr) {
#line 241
    init_completion(& al_work.event);
#line 242
    al_work.al_ext = al_ext;
#line 243
    al_work.enr = enr;
#line 244
    al_work.old_enr = al_ext->lc_number;
#line 245
    al_work.w.cb = & w_al_write_transaction;
#line 246
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 247
    wait_for_completion(& al_work.event);
#line 249
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 251
    spin_lock_irq(& mdev->al_lock);
#line 252
    lc_changed(mdev->act_log, al_ext);
#line 253
    spin_unlock_irq(& mdev->al_lock);
#line 254
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 256
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 260
  enr = (unsigned int )(sector >> 13);
#line 264
  tmp = spinlock_check(& mdev->al_lock);
#line 264
  flags = _raw_spin_lock_irqsave(tmp);
#line 266
  extent = lc_find(mdev->act_log, enr);
#line 268
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 269
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___1, tmp___0,
           enr);
#line 271
    return;
  } else {

  }
#line 274
  tmp___2 = lc_put(mdev->act_log, extent);
#line 274
  if (tmp___2 == 0U) {
#line 275
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 277
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  aw = (struct update_al_work *)__mptr;
#line 284
  updated = aw->al_ext;
#line 285
  new_enr = aw->enr;
#line 286
  evicted = aw->old_enr;
#line 291
  xor_sum = 0U;
#line 293
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 293
  if (tmp___1 == 0) {
#line 294
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 295
    complete(& ((struct update_al_work *)w)->event);
#line 296
    return (1);
  } else {

  }
#line 302
  if ((int )mdev->state.ldv_33296.conn <= 9 && evicted != 4294967295U) {
#line 303
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 305
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 306
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 306
  buffer = (struct al_transaction *)tmp___2;
#line 308
  buffer->magic = 1728214147U;
#line 309
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 309
  buffer->tr_number = tmp___3;
#line 311
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 311
  n = (int )tmp___4;
#line 313
  tmp___5 = __fswab32((__u32 )n);
#line 313
  buffer->updates[0].pos = tmp___5;
#line 314
  tmp___6 = __fswab32(new_enr);
#line 314
  buffer->updates[0].extent = tmp___6;
#line 316
  xor_sum = xor_sum ^ new_enr;
#line 318
  __min1 = 61;
#line 318
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 318
  mx = __min1 < __min2 ? __min1 : __min2;
#line 320
  i = 0;
#line 320
  goto ldv_41975;
  ldv_41974: 
#line 321
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 322
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 322
  extent_nr = tmp___7->lc_number;
#line 323
  tmp___8 = __fswab32(idx);
#line 323
  buffer->updates[i + 1].pos = tmp___8;
#line 324
  tmp___9 = __fswab32(extent_nr);
#line 324
  buffer->updates[i + 1].extent = tmp___9;
#line 325
  xor_sum = xor_sum ^ extent_nr;
#line 320
  i = i + 1;
  ldv_41975: ;
#line 320
  if (i < mx) {
#line 321
    goto ldv_41974;
  } else {

  }

#line 327
  goto ldv_41978;
  ldv_41977: 
#line 328
  buffer->updates[i + 1].pos = 4294967295U;
#line 329
  buffer->updates[i + 1].extent = 4294967295U;
#line 330
  xor_sum = ~ xor_sum;
#line 327
  i = i + 1;
  ldv_41978: ;
#line 327
  if (i <= 60) {
#line 328
    goto ldv_41977;
  } else {

  }
#line 332
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 333
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 334
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 336
  tmp___10 = __fswab32(xor_sum);
#line 336
  buffer->xor_sum = tmp___10;
#line 338
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 341
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 341
  if (tmp___11 == 0) {
#line 342
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 344
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 344
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 346
    mdev->al_tr_pos = 0;
  } else {

  }
#line 348
  if (mdev->al_tr_pos > 63) {
#line 348
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           348);
  } else {

  }
#line 349
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 351
  mutex_unlock(& mdev->md_io_mutex);
#line 353
  complete(& ((struct update_al_work *)w)->event);
#line 354
  put_ldev(mdev);
#line 356
  return (1);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 375
  xor_sum = 0U;
#line 377
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 381
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 381
  if (tmp == 0) {
#line 382
    return (-1);
  } else {

  }
#line 384
  tmp___0 = __fswab32(b->magic);
#line 384
  rv = tmp___0 == 2205418087U;
#line 386
  i = 0;
#line 386
  goto ldv_41992;
  ldv_41991: 
#line 387
  tmp___1 = __fswab32(b->updates[i].extent);
#line 387
  xor_sum = tmp___1 ^ xor_sum;
#line 386
  i = i + 1;
  ldv_41992: ;
#line 386
  if (i <= 61) {
#line 387
    goto ldv_41991;
  } else {

  }
#line 388
  tmp___2 = __fswab32(b->xor_sum);
#line 388
  rv = (tmp___2 == xor_sum) & rv;
#line 390
  return (rv);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 406
  active_extents = 0;
#line 407
  transactions = 0;
#line 408
  found_valid = 0;
#line 409
  from = 0;
#line 410
  to = 0;
#line 411
  from_tnr = 0U;
#line 412
  to_tnr = 0U;
#line 415
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 420
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 421
  tmp = lowmem_page_address(mdev->md_io_page);
#line 421
  buffer = (struct al_transaction *)tmp;
#line 424
  i = 0;
#line 424
  goto ldv_42012;
  ldv_42011: 
#line 425
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 426
  if (rv == 0) {
#line 427
    goto ldv_42010;
  } else {

  }
#line 428
  if (rv == -1) {
#line 429
    mutex_unlock(& mdev->md_io_mutex);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___0 = __fswab32(buffer->tr_number);
#line 432
  cnr = tmp___0;
#line 434
  found_valid = found_valid + 1;
#line 434
  if (found_valid == 1) {
#line 435
    from = i;
#line 436
    to = i;
#line 437
    from_tnr = cnr;
#line 438
    to_tnr = cnr;
#line 439
    goto ldv_42010;
  } else {

  }
#line 441
  if ((int )cnr - (int )from_tnr < 0) {
#line 442
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 442
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             442);
    } else {

    }
#line 443
    from = i;
#line 444
    from_tnr = cnr;
  } else {

  }
#line 446
  if ((int )cnr - (int )to_tnr > 0) {
#line 447
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 447
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             447);
    } else {

    }
#line 448
    to = i;
#line 449
    to_tnr = cnr;
  } else {

  }
  ldv_42010: 
#line 424
  i = i + 1;
  ldv_42012: ;
#line 424
  if (i <= mx) {
#line 425
    goto ldv_42011;
  } else {

  }

#line 453
  if (found_valid == 0) {
#line 454
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 455
    mutex_unlock(& mdev->md_io_mutex);
#line 456
    return (1);
  } else {

  }
#line 461
  i = from;
  ldv_42027: 
#line 467
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 468
  _b = rv == 0;
#line 468
  if (_b != 0) {
#line 468
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           468);
  } else {

  }
#line 468
  if (_b != 0) {
#line 468
    goto cancel;
  } else {

  }
#line 469
  if (rv == -1) {
#line 470
    mutex_unlock(& mdev->md_io_mutex);
#line 471
    return (0);
  } else {

  }
#line 474
  tmp___9 = __fswab32(buffer->tr_number);
#line 474
  trn = tmp___9;
#line 476
  spin_lock_irq(& mdev->al_lock);
#line 482
  j = 61;
#line 482
  goto ldv_42024;
  ldv_42023: 
#line 483
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 483
  pos = (int )tmp___10;
#line 484
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 484
  extent_nr = tmp___11;
#line 486
  if (extent_nr == 4294967295U) {
#line 487
    goto ldv_42022;
  } else {

  }
#line 489
  lc_set(mdev->act_log, extent_nr, pos);
#line 490
  active_extents = active_extents + 1;
  ldv_42022: 
#line 482
  j = j - 1;
  ldv_42024: ;
#line 482
  if (j >= 0) {
#line 483
    goto ldv_42023;
  } else {

  }
#line 492
  spin_unlock_irq(& mdev->al_lock);
#line 494
  transactions = transactions + 1;
  cancel: ;
#line 497
  if (i == to) {
#line 498
    goto ldv_42026;
  } else {

  }
#line 499
  i = i + 1;
#line 500
  if (i > mx) {
#line 501
    i = 0;
  } else {

  }
#line 502
  goto ldv_42027;
  ldv_42026: 
#line 504
  mdev->al_tr_number = to_tnr + 1U;
#line 505
  mdev->al_tr_pos = to;
#line 506
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 506
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 508
    mdev->al_tr_pos = 0;
  } else {

  }
#line 511
  mutex_unlock(& mdev->md_io_mutex);
#line 513
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 516
  return (1);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 521
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 522
  mdev = wc->mdev;
#line 524
  uptodate = (int )bio->bi_flags & 1;
#line 529
  if (error == 0 && uptodate == 0) {
#line 530
    error = -5;
  } else {

  }
#line 532
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 533
  if (error != 0 && wc->error == 0) {
#line 534
    wc->error = error;
  } else {

  }
#line 536
  tmp = atomic_dec_and_test(& wc->count);
#line 536
  if (tmp != 0) {
#line 537
    complete(& wc->io_done);
  } else {

  }
#line 539
  page = (bio->bi_io_vec)->bv_page;
#line 540
  put_page(page);
#line 541
  bio_put(bio);
#line 542
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 543
  put_ldev(mdev);
#line 544
  return;
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct bio_vec  const  *prev_bv ;
  void *tmp___1 ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
#line 559
  page_offset___0 = 4096U;
#line 561
  i = 0;
#line 562
  err = -12;
#line 566
  enr = enr & 4294967288U;
#line 567
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 570
  if ((on_disk_sector & 7UL) != 0UL) {
#line 570
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 570
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 570
    printk("<3>%s %s: ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           570);
  } else {

  }
#line 579
  goto ldv_42051;
  ldv_42050: ;
#line 580
  if (bio->bi_sector == on_disk_sector) {
#line 581
    return (0);
  } else {

  }
#line 582
  i = i + 1;
  ldv_42051: 
#line 579
  bio = *(bios + (unsigned long )i);
#line 579
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 580
    goto ldv_42050;
  } else {

  }
#line 587
  bio = bio_alloc(208U, 1);
#line 588
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 589
    return (-12);
  } else {

  }
#line 591
  if (i > 0) {
#line 592
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 593
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 594
    page = prev_bv->bv_page;
  } else {

  }
#line 596
  if (page_offset___0 == 4096U) {
#line 597
    page = alloc_pages(2U, 0U);
#line 598
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 599
      goto out_bio_put;
    } else {

    }
#line 600
    page_offset___0 = 0U;
  } else {
#line 602
    get_page(page);
  }
#line 605
  offset = (int )(enr << 6);
#line 606
  tmp___1 = kmap(page);
#line 607
  __min1 = 512UL;
#line 607
  tmp___2 = drbd_bm_words(mdev);
#line 607
  __min2 = tmp___2 - (size_t )offset;
#line 607
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp___1 + (unsigned long )page_offset___0);
#line 609
  kunmap(page);
#line 611
  bio->bi_private = (void *)wc;
#line 612
  bio->bi_end_io = & atodb_endio;
#line 613
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 614
  bio->bi_sector = on_disk_sector;
#line 616
  tmp___3 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 616
  if (tmp___3 != 4096) {
#line 617
    goto out_put_page;
  } else {

  }
#line 619
  atomic_inc(& wc->count);
#line 625
  atomic_inc(& mdev->local_cnt);
#line 627
  *(bios + (unsigned long )i) = bio;
#line 629
  return (0);
  out_put_page: 
#line 632
  err = -22;
#line 633
  put_page(page);
  out_bio_put: 
#line 635
  bio_put(bio);
#line 636
  return (err);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 653
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 653
  _b = tmp == 0;
#line 653
  if (_b != 0) {
#line 653
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 653
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           653);
  } else {

  }
#line 653
  if (_b != 0) {
#line 654
    return;
  } else {

  }
#line 656
  tmp___2 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___2 != 0) {
#line 656
    goto ldv_42070;
  } else {

  }
#line 656
  tmp___3 = get_current();
#line 656
  __wait.flags = 0U;
#line 656
  __wait.private = (void *)tmp___3;
#line 656
  __wait.func = & autoremove_wake_function;
#line 656
  __wait.task_list.next = & __wait.task_list;
#line 656
  __wait.task_list.prev = & __wait.task_list;
  ldv_42073: 
#line 656
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 656
  tmp___4 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___4 != 0) {
#line 656
    goto ldv_42072;
  } else {

  }
#line 656
  schedule();
#line 656
  goto ldv_42073;
  ldv_42072: 
#line 656
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42070: 
#line 658
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 661
  tmp___5 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 661
  bios = (struct bio **)tmp___5;
#line 662
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 663
    goto submit_one_by_one;
  } else {

  }
#line 665
  atomic_set(& wc.count, 0);
#line 666
  init_completion(& wc.io_done);
#line 667
  wc.mdev = mdev;
#line 668
  wc.error = 0;
#line 670
  i = 0;
#line 670
  goto ldv_42078;
  ldv_42077: 
#line 671
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 671
  enr = tmp___6->lc_number;
#line 672
  if (enr == 4294967295U) {
#line 673
    goto ldv_42075;
  } else {

  }
#line 675
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 675
  if (tmp___7 != 0) {
#line 678
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_42075: 
#line 670
  i = i + 1;
  ldv_42078: ;
#line 670
  if (i < nr_elements) {
#line 671
    goto ldv_42077;
  } else {

  }
#line 682
  lc_unlock(mdev->act_log);
#line 683
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 686
  i = 0;
#line 686
  goto ldv_42082;
  ldv_42081: ;
#line 687
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 688
    goto ldv_42080;
  } else {

  }
#line 689
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 689
  if (tmp___8 != 0) {
#line 690
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 691
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 693
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 686
  i = i + 1;
  ldv_42082: ;
#line 686
  if (i < nr_elements) {
#line 687
    goto ldv_42081;
  } else {

  }
  ldv_42080: 
#line 697
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 697
  drbd_blk_run_queue(tmp___9);
#line 700
  drbd_md_flush(mdev);
#line 708
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 708
  if (tmp___10 != 0) {
#line 709
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 711
  put_ldev(mdev);
#line 713
  kfree((void const   *)bios);
#line 714
  return;
  free_bios_submit_one_by_one: 
#line 718
  i = 0;
#line 718
  goto ldv_42084;
  ldv_42083: 
#line 719
  bio_endio(*(bios + (unsigned long )i), 0);
#line 718
  i = i + 1;
  ldv_42084: ;
#line 718
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 719
    goto ldv_42083;
  } else {

  }
#line 721
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 724
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 726
  i = 0;
#line 726
  goto ldv_42088;
  ldv_42087: 
#line 727
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 727
  enr = tmp___13->lc_number;
#line 728
  if (enr == 4294967295U) {
#line 729
    goto ldv_42086;
  } else {

  }
#line 732
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_42086: 
#line 726
  i = i + 1;
  ldv_42088: ;
#line 726
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 727
    goto ldv_42087;
  } else {

  }
#line 735
  lc_unlock(mdev->act_log);
#line 736
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 737
  put_ldev(mdev);
#line 738
  return;
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 747
  add = 0UL;
#line 751
  tmp = lc_try_lock(mdev->act_log);
#line 751
  if (tmp != 0) {
#line 751
    goto ldv_42097;
  } else {

  }
#line 751
  tmp___0 = get_current();
#line 751
  __wait.flags = 0U;
#line 751
  __wait.private = (void *)tmp___0;
#line 751
  __wait.func = & autoremove_wake_function;
#line 751
  __wait.task_list.next = & __wait.task_list;
#line 751
  __wait.task_list.prev = & __wait.task_list;
  ldv_42100: 
#line 751
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 751
  tmp___1 = lc_try_lock(mdev->act_log);
#line 751
  if (tmp___1 != 0) {
#line 751
    goto ldv_42099;
  } else {

  }
#line 751
  schedule();
#line 751
  goto ldv_42100;
  ldv_42099: 
#line 751
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42097: 
#line 753
  i = 0;
#line 753
  goto ldv_42103;
  ldv_42102: 
#line 754
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 754
  enr = tmp___2->lc_number;
#line 755
  if (enr == 4294967295U) {
#line 756
    goto ldv_42101;
  } else {

  }
#line 757
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 757
  add = tmp___3 + add;
  ldv_42101: 
#line 753
  i = i + 1;
  ldv_42103: ;
#line 753
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 754
    goto ldv_42102;
  } else {

  }
#line 760
  lc_unlock(mdev->act_log);
#line 761
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 763
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 763
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 763
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 764
  return;
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 771
  spin_lock_irq(& mdev->al_lock);
#line 772
  rv = al_ext->refcnt == 0U;
#line 773
  tmp = __builtin_expect(rv != 0, 1L);
#line 773
  if (tmp != 0L) {
#line 774
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 775
  spin_unlock_irq(& mdev->al_lock);
#line 777
  return (rv);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 794
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 794
  if (tmp___1 == 0) {
#line 794
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 794
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 794
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           794);
  } else {

  }
#line 796
  i = 0;
#line 796
  goto ldv_42121;
  ldv_42120: 
#line 797
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 798
  if (al_ext->lc_number == 4294967295U) {
#line 799
    goto ldv_42115;
  } else {

  }
#line 800
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___2 != 0) {
#line 800
    goto ldv_42116;
  } else {

  }
#line 800
  tmp___3 = get_current();
#line 800
  __wait.flags = 0U;
#line 800
  __wait.private = (void *)tmp___3;
#line 800
  __wait.func = & autoremove_wake_function;
#line 800
  __wait.task_list.next = & __wait.task_list;
#line 800
  __wait.task_list.prev = & __wait.task_list;
  ldv_42119: 
#line 800
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 800
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___4 != 0) {
#line 800
    goto ldv_42118;
  } else {

  }
#line 800
  schedule();
#line 800
  goto ldv_42119;
  ldv_42118: 
#line 800
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42116: ;
  ldv_42115: 
#line 796
  i = i + 1;
  ldv_42121: ;
#line 796
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 797
    goto ldv_42120;
  } else {

  }
#line 803
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 808
  __mptr = (struct drbd_work  const  *)w;
#line 808
  udw = (struct update_odbm_work *)__mptr;
#line 810
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 810
  if (tmp___2 == 0) {
#line 811
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 811
    if (tmp___1 != 0) {
#line 812
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 813
    kfree((void const   *)udw);
#line 814
    return (1);
  } else {

  }
#line 817
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 818
  put_ldev(mdev);
#line 820
  kfree((void const   *)udw);
#line 822
  tmp___3 = drbd_bm_total_weight(mdev);
#line 822
  if (tmp___3 <= mdev->rs_failed) {
#line 823
    switch ((int )mdev->state.ldv_33296.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 826
    drbd_resync_finished(mdev);
    default: ;
#line 829
    goto ldv_42137;
    }
    ldv_42137: ;
  } else {

  }
#line 832
  drbd_bcast_sync_progress(mdev);
#line 834
  return (1);
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 852
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 852
  if (tmp___1 == 0) {
#line 852
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           852);
  } else {

  }
#line 856
  enr = (unsigned int )(sector >> 15);
#line 858
  e = lc_get(mdev->resync, enr);
#line 859
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 860
    __mptr = (struct lc_element  const  *)e;
#line 860
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 861
    if (ext->lce.lc_number == enr) {
#line 862
      if (success != 0) {
#line 863
        ext->rs_left = ext->rs_left - count;
      } else {
#line 865
        ext->rs_failed = ext->rs_failed + count;
      }
#line 866
      if (ext->rs_left < ext->rs_failed) {
#line 867
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 872
        dump_stack();
#line 874
        lc_put(mdev->resync, & ext->lce);
#line 875
        val.i = 0U;
#line 875
        val.ldv_33296.conn = 1U;
#line 875
        mask.i = 0U;
#line 875
        mask.ldv_33296.conn = 31U;
#line 875
        drbd_force_state(mdev, mask, val);
#line 876
        return;
      } else {

      }
    } else {
#line 885
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 885
      rs_left = tmp___4;
#line 886
      if (ext->flags != 0UL) {
#line 887
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 887
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 887
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 891
        ext->flags = 0UL;
      } else {

      }
#line 893
      if (ext->rs_failed != 0) {
#line 894
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 897
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 899
      ext->rs_left = rs_left;
#line 900
      ext->rs_failed = success == 0 ? count : 0;
#line 901
      lc_changed(mdev->resync, & ext->lce);
    }
#line 903
    lc_put(mdev->resync, & ext->lce);
#line 906
    if (ext->rs_left == ext->rs_failed) {
#line 907
      ext->rs_failed = 0;
#line 909
      tmp___9 = kmalloc___2(32UL, 32U);
#line 909
      udw = (struct update_odbm_work *)tmp___9;
#line 910
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 911
        udw->enr = ext->lce.lc_number;
#line 912
        udw->w.cb = & w_update_odbm;
#line 913
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 915
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 915
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 915
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 916
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 920
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 921
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 939
  count = 0UL;
#line 941
  wake_up = 0;
#line 944
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 945
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 945
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 947
    return;
  } else {

  }
#line 949
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 950
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 952
  _b = sector >= nr_sectors;
#line 952
  if (_b != 0) {
#line 952
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           952);
  } else {

  }
#line 952
  if (_b != 0) {
#line 952
    return;
  } else {

  }
#line 953
  _b___0 = esector >= nr_sectors;
#line 953
  if (_b___0 != 0) {
#line 953
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 953
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 953
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           953);
  } else {

  }
#line 953
  if (_b___0 != 0) {
#line 953
    esector = nr_sectors - 1UL;
  } else {

  }
#line 955
  lbnr = (nr_sectors - 1UL) >> 3;
#line 960
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 960
  if (tmp___5 != 0L) {
#line 961
    return;
  } else {

  }
#line 962
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 962
  if (tmp___6 != 0L) {
#line 963
    ebnr = lbnr;
  } else {
#line 965
    ebnr = (esector - 7UL) >> 3;
  }
#line 966
  sbnr = (sector + 7UL) >> 3;
#line 968
  if (sbnr > ebnr) {
#line 969
    return;
  } else {

  }
#line 975
  tmp___7 = spinlock_check(& mdev->al_lock);
#line 975
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 976
  tmp___8 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 976
  count = (unsigned long )tmp___8;
#line 977
  if (count != 0UL) {
#line 979
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 982
      tmp___9 = drbd_bm_total_weight(mdev);
#line 982
      if ((mdev->rs_mark_left != tmp___9 && (unsigned int )*((unsigned short *)mdev + 982UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 982UL) != 320U) {
#line 985
        mdev->rs_mark_time = jiffies;
#line 986
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 989
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 989
    if (tmp___10 != 0) {
#line 990
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 991
      put_ldev(mdev);
    } else {

    }
#line 995
    wake_up = 1;
  } else {

  }
#line 997
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 998
  if (wake_up != 0) {
#line 999
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1000
  return;
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  int tmp___7 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1018
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1019
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1021
    return;
  } else {

  }
#line 1024
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1024
  if (tmp___1 == 0) {
#line 1025
    return;
  } else {

  }
#line 1027
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1028
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1030
  _b = sector >= nr_sectors;
#line 1030
  if (_b != 0) {
#line 1030
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1030);
  } else {

  }
#line 1030
  if (_b != 0) {
#line 1031
    goto out;
  } else {

  }
#line 1032
  _b___0 = esector >= nr_sectors;
#line 1032
  if (_b___0 != 0) {
#line 1032
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1032);
  } else {

  }
#line 1032
  if (_b___0 != 0) {
#line 1033
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1035
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1039
  sbnr = sector >> 3;
#line 1040
  ebnr = esector >> 3;
#line 1044
  tmp___6 = spinlock_check(& mdev->al_lock);
#line 1044
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1045
  tmp___7 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1045
  count = (unsigned int )tmp___7;
#line 1047
  enr = (unsigned int )(sector >> 15);
#line 1048
  e = lc_find(mdev->resync, enr);
#line 1049
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1050
    __mptr = (struct lc_element  const  *)e;
#line 1050
    __mptr___0 = (struct lc_element  const  *)e;
#line 1050
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1051
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1054
  put_ldev(mdev);
#line 1055
  return;
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1062
  wakeup = 0;
#line 1065
  spin_lock_irq(& mdev->al_lock);
#line 1066
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1067
    spin_unlock_irq(& mdev->al_lock);
#line 1068
    return (0);
  } else {

  }
#line 1070
  e = lc_get(mdev->resync, enr);
#line 1071
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1071
    __mptr = (struct lc_element  const  *)e;
#line 1071
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1071
    bm_ext = 0;
  }
#line 1072
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1073
    if (bm_ext->lce.lc_number != enr) {
#line 1074
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1075
      bm_ext->rs_failed = 0;
#line 1076
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1077
      wakeup = 1;
    } else {

    }
#line 1079
    if (bm_ext->lce.refcnt == 1U) {
#line 1080
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1081
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1083
  rs_flags = (mdev->resync)->flags;
#line 1084
  spin_unlock_irq(& mdev->al_lock);
#line 1085
  if (wakeup != 0) {
#line 1086
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1088
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1089
    if ((rs_flags & 4UL) != 0UL) {
#line 1090
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1090
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1090
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1092
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1092
    if (tmp___1 != 0L) {
#line 1092
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1092), "i" (12UL));
      ldv_42215: ;
#line 1092
      goto ldv_42215;
    } else {

    }
  } else {

  }
#line 1095
  return (bm_ext);
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1101
  rv = 0;
#line 1103
  spin_lock_irq(& mdev->al_lock);
#line 1104
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1104
  if (tmp != 0L) {
#line 1105
    rv = 1;
  } else {
#line 1107
    al_ext = lc_find(mdev->act_log, enr);
#line 1108
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1109
      if (al_ext->refcnt != 0U) {
#line 1110
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1113
  spin_unlock_irq(& mdev->al_lock);
#line 1120
  return (rv);
}
}
#line 1130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1132
  enr = (unsigned int )(sector >> 15);
#line 1136
  __ret = 0;
#line 1136
  bm_ext = _bme_get(mdev, enr);
#line 1136
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1136
    tmp = get_current();
#line 1136
    __wait.flags = 0U;
#line 1136
    __wait.private = (void *)tmp;
#line 1136
    __wait.func = & autoremove_wake_function;
#line 1136
    __wait.task_list.next = & __wait.task_list;
#line 1136
    __wait.task_list.prev = & __wait.task_list;
    ldv_42234: 
#line 1136
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1136
    bm_ext = _bme_get(mdev, enr);
#line 1136
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1136
      goto ldv_42232;
    } else {

    }
#line 1136
    tmp___0 = get_current();
#line 1136
    tmp___1 = signal_pending(tmp___0);
#line 1136
    if (tmp___1 == 0) {
#line 1136
      schedule();
#line 1136
      goto ldv_42233;
    } else {

    }
#line 1136
    __ret = -512;
#line 1136
    goto ldv_42232;
    ldv_42233: ;
#line 1136
    goto ldv_42234;
    ldv_42232: 
#line 1136
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1136
  sig = __ret;
#line 1138
  if (sig != 0) {
#line 1139
    return (0);
  } else {

  }
#line 1141
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1141
  if (tmp___2 != 0) {
#line 1142
    return (1);
  } else {

  }
#line 1144
  i = 0;
#line 1144
  goto ldv_42243;
  ldv_42242: 
#line 1145
  __ret___0 = 0;
#line 1145
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
  if (tmp___7 != 0) {
#line 1145
    tmp___3 = get_current();
#line 1145
    __wait___0.flags = 0U;
#line 1145
    __wait___0.private = (void *)tmp___3;
#line 1145
    __wait___0.func = & autoremove_wake_function;
#line 1145
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1145
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42240: 
#line 1145
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1145
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1145
    if (tmp___4 == 0) {
#line 1145
      goto ldv_42238;
    } else {

    }
#line 1145
    tmp___5 = get_current();
#line 1145
    tmp___6 = signal_pending(tmp___5);
#line 1145
    if (tmp___6 == 0) {
#line 1145
      schedule();
#line 1145
      goto ldv_42239;
    } else {

    }
#line 1145
    __ret___0 = -512;
#line 1145
    goto ldv_42238;
    ldv_42239: ;
#line 1145
    goto ldv_42240;
    ldv_42238: 
#line 1145
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1145
  sig = __ret___0;
#line 1147
  if (sig != 0) {
#line 1148
    spin_lock_irq(& mdev->al_lock);
#line 1149
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1149
    if (tmp___8 == 0U) {
#line 1150
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1151
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1152
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1154
    spin_unlock_irq(& mdev->al_lock);
#line 1155
    return (0);
  } else {

  }
#line 1144
  i = i + 1;
  ldv_42243: ;
#line 1144
  if (i <= 3) {
#line 1145
    goto ldv_42242;
  } else {

  }
#line 1159
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1161
  return (1);
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1175
  enr = (unsigned int )(sector >> 15);
#line 1176
  al_enr = enr * 4U;
#line 1181
  spin_lock_irq(& mdev->al_lock);
#line 1182
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1196
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1197
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1197
      __mptr = (struct lc_element  const  *)e;
#line 1197
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1197
      bm_ext = 0;
    }
#line 1198
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1199
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1199
      if (tmp___1 != 0) {
#line 1199
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1199
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1199
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1199);
      } else {

      }
#line 1200
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1200
      if (tmp___4 == 0) {
#line 1200
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1200);
      } else {

      }
#line 1201
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1202
      mdev->resync_wenr = 4294967295U;
#line 1203
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1203
      if (tmp___5 == 0U) {
#line 1204
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1205
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1207
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1207
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1207
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1211
  e = lc_try_get(mdev->resync, enr);
#line 1212
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1212
    __mptr___0 = (struct lc_element  const  *)e;
#line 1212
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1212
    bm_ext = 0;
  }
#line 1213
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1214
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1214
    if (tmp___8 != 0) {
#line 1215
      goto proceed;
    } else {

    }
#line 1216
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1216
    if (tmp___11 == 0) {
#line 1217
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1223
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1224
      if (bm_ext->lce.refcnt == 0U) {
#line 1224
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1224
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1224);
      } else {

      }
    }
#line 1226
    goto check_al;
  } else {
#line 1229
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1230
      goto try_again;
    } else {

    }
#line 1232
    e = lc_get(mdev->resync, enr);
#line 1233
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1233
      __mptr___1 = (struct lc_element  const  *)e;
#line 1233
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1233
      bm_ext = 0;
    }
#line 1234
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1235
      rs_flags = (mdev->resync)->flags;
#line 1236
      if ((rs_flags & 4UL) != 0UL) {
#line 1237
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1239
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1239
      if (tmp___14 != 0L) {
#line 1239
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1239), "i" (12UL));
        ldv_42264: ;
#line 1239
        goto ldv_42264;
      } else {

      }
#line 1240
      goto try_again;
    } else {

    }
#line 1242
    if (bm_ext->lce.lc_number != enr) {
#line 1243
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1244
      bm_ext->rs_failed = 0;
#line 1245
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1246
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1247
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1247
      if (tmp___17 != 0) {
#line 1247
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1247);
      } else {

      }
    } else {

    }
#line 1249
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1250
    if (bm_ext->lce.refcnt != 1U) {
#line 1250
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1250);
    } else {

    }
#line 1251
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1252
    goto check_al;
  }
  check_al: 
#line 1255
  i = 0;
#line 1255
  goto ldv_42266;
  ldv_42265: 
#line 1256
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1256
  if (tmp___20 != 0L) {
#line 1257
    goto try_again;
  } else {

  }
#line 1258
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1258
  if (tmp___21 != 0) {
#line 1259
    goto try_again;
  } else {

  }
#line 1255
  i = i + 1;
  ldv_42266: ;
#line 1255
  if (i <= 3) {
#line 1256
    goto ldv_42265;
  } else {

  }
#line 1261
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1263
  mdev->resync_wenr = 4294967295U;
#line 1264
  spin_unlock_irq(& mdev->al_lock);
#line 1265
  return (0);
  try_again: ;
#line 1268
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1269
    mdev->resync_wenr = enr;
  } else {

  }
#line 1270
  spin_unlock_irq(& mdev->al_lock);
#line 1271
  return (-11);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;

  {
#line 1276
  enr = (unsigned int )(sector >> 15);
#line 1281
  tmp = spinlock_check(& mdev->al_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  e = lc_find(mdev->resync, enr);
#line 1283
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1283
    __mptr = (struct lc_element  const  *)e;
#line 1283
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1283
    bm_ext = 0;
  }
#line 1284
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1285
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1286
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1286
    if (tmp___2 != 0) {
#line 1287
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___1,
             tmp___0);
    } else {

    }
#line 1288
    return;
  } else {

  }
#line 1291
  if (bm_ext->lce.refcnt == 0U) {
#line 1292
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1293
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1293
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1293
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___4, tmp___3, (unsigned long long )sector, enr);
#line 1296
    return;
  } else {

  }
#line 1299
  tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1299
  if (tmp___5 == 0U) {
#line 1300
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1301
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1302
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1303
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1306
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1307
  return;
}
}
#line 1313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1315
  spin_lock_irq(& mdev->al_lock);
#line 1317
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1317
  if (tmp != 0) {
#line 1318
    lc_reset(mdev->resync);
#line 1319
    put_ldev(mdev);
  } else {

  }
#line 1321
  mdev->resync_locked = 0U;
#line 1322
  mdev->resync_wenr = 4294967295U;
#line 1323
  spin_unlock_irq(& mdev->al_lock);
#line 1324
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1325
  return;
}
}
#line 1334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1340
  spin_lock_irq(& mdev->al_lock);
#line 1342
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1342
  if (tmp___17 != 0) {
#line 1344
    i = 0;
#line 1344
    goto ldv_42295;
    ldv_42294: 
#line 1345
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1346
    __mptr = (struct lc_element  const  *)e;
#line 1346
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1347
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1348
      goto ldv_42293;
    } else {

    }
#line 1349
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1350
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1353
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1353
      if (tmp___3 != 0) {
#line 1353
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1353);
      } else {

      }
#line 1354
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1354
      if (tmp___6 == 0) {
#line 1354
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1354);
      } else {

      }
#line 1355
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1356
      mdev->resync_wenr = 4294967295U;
#line 1357
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1359
    if (bm_ext->lce.refcnt != 0U) {
#line 1360
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1362
      put_ldev(mdev);
#line 1363
      spin_unlock_irq(& mdev->al_lock);
#line 1364
      return (-11);
    } else {

    }
#line 1366
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1366
    if (tmp___11 != 0) {
#line 1366
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1366
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1366
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1366);
    } else {

    }
#line 1367
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1367
    if (tmp___14 != 0) {
#line 1367
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1367);
    } else {

    }
#line 1368
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_42293: 
#line 1344
    i = i + 1;
    ldv_42295: ;
#line 1344
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1345
      goto ldv_42294;
    } else {

    }

#line 1370
    if ((mdev->resync)->used != 0U) {
#line 1370
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1370
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1370
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1370);
    } else {

    }
#line 1371
    put_ldev(mdev);
  } else {

  }
#line 1373
  spin_unlock_irq(& mdev->al_lock);
#line 1375
  return (0);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1390
  wake_up = 0;
#line 1392
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1393
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1395
    return;
  } else {

  }
#line 1397
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1398
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1400
  _b = sector >= nr_sectors;
#line 1400
  if (_b != 0) {
#line 1400
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1400);
  } else {

  }
#line 1400
  if (_b != 0) {
#line 1400
    return;
  } else {

  }
#line 1401
  _b___0 = esector >= nr_sectors;
#line 1401
  if (_b___0 != 0) {
#line 1401
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1401
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1401);
  } else {

  }
#line 1401
  if (_b___0 != 0) {
#line 1401
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1403
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1408
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1408
  if (tmp___5 != 0L) {
#line 1409
    return;
  } else {

  }
#line 1410
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1410
  if (tmp___6 != 0L) {
#line 1411
    ebnr = lbnr;
  } else {
#line 1413
    ebnr = (esector - 7UL) >> 3;
  }
#line 1414
  sbnr = (sector + 7UL) >> 3;
#line 1416
  if (sbnr > ebnr) {
#line 1417
    return;
  } else {

  }
#line 1423
  spin_lock_irq(& mdev->al_lock);
#line 1424
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1424
  count = (unsigned long )tmp___7;
#line 1425
  if (count != 0UL) {
#line 1426
    mdev->rs_failed = mdev->rs_failed + count;
#line 1428
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1428
    if (tmp___8 != 0) {
#line 1429
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1430
      put_ldev(mdev);
    } else {

    }
#line 1435
    wake_up = 1;
  } else {

  }
#line 1437
  spin_unlock_irq(& mdev->al_lock);
#line 1438
  if (wake_up != 0) {
#line 1439
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1440
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 494 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 500
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 504
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 248 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 272
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13274: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13274;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___4(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___4(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1943 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1944
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1945
extern struct block_device *bdget(dev_t  ) ;
#line 1949
extern void bdput(struct block_device * ) ;
#line 1984
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1776 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1994
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 258 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 260
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 261
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 261
    return (tmp);
  } else {

  }
#line 262
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 795 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 930
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 931
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 932
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 935
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 962
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 981
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 567 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 569
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 569
  if (tmp != 0L) {
#line 569
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (569), "i" (12UL));
    ldv_41312: ;
#line 569
    goto ldv_41312;
  } else {

  }
#line 570
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 571
  return;
}
}
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 582
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 583
  return;
}
}
#line 592 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 594
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 594
  if (tmp != 0L) {
#line 594
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (594), "i" (12UL));
    ldv_41327: ;
#line 594
    goto ldv_41327;
  } else {

  }
#line 595
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 596
  return;
}
}
#line 1131
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1140
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1146
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1151
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1157
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1161
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1201
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1203
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1208
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1212
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1215
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1216
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1217
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1218
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1402 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1403 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1405 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1409 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1410 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1411 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1415
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1416
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1418 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1428
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1429
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1582
void drbd_nl_cleanup(void) ;
#line 1583
int drbd_nl_init(void) ;
#line 1584
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1681 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1683
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1683
  if (tmp == 0) {
#line 1683
    goto ldv_42348;
  } else {

  }
#line 1683
  tmp___0 = get_current();
#line 1683
  __wait.flags = 0U;
#line 1683
  __wait.private = (void *)tmp___0;
#line 1683
  __wait.func = & autoremove_wake_function;
#line 1683
  __wait.task_list.next = & __wait.task_list;
#line 1683
  __wait.task_list.prev = & __wait.task_list;
  ldv_42351: 
#line 1683
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1683
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1683
  if (tmp___1 == 0) {
#line 1683
    goto ldv_42350;
  } else {

  }
#line 1683
  schedule();
#line 1683
  goto ldv_42351;
  ldv_42350: 
#line 1683
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42348: ;
#line 1686
  return;
}
}
#line 1724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1726
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1728
  if (forcedetach == 0) {
#line 1729
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1729
    if (tmp___1 != 0) {
#line 1730
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1730
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1732
    goto ldv_42374;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1737
  if ((int )mdev->state.ldv_33296.disk > 2) {
#line 1738
    __ns.i = mdev->state.i;
#line 1738
    __ns.ldv_33296.disk = 2U;
#line 1738
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1739
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1739
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1742
  goto ldv_42374;
  }
  ldv_42374: ;
#line 1745
  return;
}
}
#line 1755 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1758
  if (error != 0) {
#line 1760
    tmp = spinlock_check(& mdev->req_lock);
#line 1760
    flags = _raw_spin_lock_irqsave(tmp);
#line 1761
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1762
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1764
  return;
}
}
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1820
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1824
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1824
  if (tmp___1 != 0UL) {
#line 1824
    __min1 = 34359738368UL;
#line 1824
    tmp___0 = drbd_md_first_sector(bdev);
#line 1824
    __min2 = tmp___0;
#line 1824
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1824
    s = 0UL;
  }
#line 1827
  goto ldv_42415;
  case -2: 
#line 1829
  __min1___0 = 34359738368UL;
#line 1829
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1829
  __min2___0 = tmp___2;
#line 1829
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1832
  __min1___1 = s;
#line 1832
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1832
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1835
  goto ldv_42415;
  default: 
#line 1837
  __min1___2 = 8587575296UL;
#line 1837
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1837
  __min2___2 = tmp___3;
#line 1837
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42415: ;
#line 1840
  return (s);
}
}
#line 1848 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1851
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1853
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1859
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1860
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1860
    if (tmp___1 != 0) {
#line 1861
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1861
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1861
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1862
      dump_stack();
    } else {

    }
#line 1864
    return (0UL);
  } else {

  }
#line 1866
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1866
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1869
  return (0UL);
  }
}
}
#line 1938 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1940
  _drbd_thread_stop(thi, 0, 0);
#line 1941
  return;
}
}
#line 1943 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1945
  _drbd_thread_stop(thi, 1, 0);
#line 1946
  return;
}
}
#line 2134 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2140
  switch ((unsigned int )s.ldv_33296.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2153
  goto ldv_42533;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2172
  return (0);
  }
  ldv_42533: ;
#line 2175
  switch ((unsigned int )s.ldv_33296.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2182
  goto ldv_42553;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2191
  return (0);
  }
  ldv_42553: ;
#line 2194
  return (1);
}
}
#line 2197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2199
  tmp = drbd_get_max_buffers(mdev);
#line 2199
  mxb = tmp;
#line 2201
  if ((unsigned int )*((unsigned char *)mdev + 1966UL) != 0U) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___0 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2211
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2211
  if (tmp___1 == 0) {
#line 2212
    return (0);
  } else {

  }
#line 2216
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2216
  if (tmp___2 > mxb) {
#line 2217
    return (0);
  } else {

  }
#line 2218
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2218
  if (tmp___3 != 0) {
#line 2219
    return (0);
  } else {

  }
#line 2220
  return (1);
}
}
#line 2301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2303
  sk = (mdev->data.socket)->sk;
#line 2304
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2305
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2306
  return;
}
}
#line 2308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2315
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_42779;
  ldv_42778: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_42779: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_42778;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 80
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 81
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 82
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 83
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 85
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 86
static void md_sync_timer_fn(unsigned long data ) ;
#line 87
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 132
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 161
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 203
  tmp = kmalloc___4(56UL, 208U);
#line 203
  b = (struct drbd_tl_epoch *)tmp;
#line 204
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 205
    return (0);
  } else {

  }
#line 206
  INIT_LIST_HEAD(& b->requests);
#line 207
  INIT_LIST_HEAD(& b->w.list);
#line 208
  b->next = 0;
#line 209
  b->br_number = 4711U;
#line 210
  b->n_req = 0;
#line 211
  b->w.cb = 0;
#line 213
  mdev->oldest_tle = b;
#line 214
  mdev->newest_tle = b;
#line 215
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 217
  mdev->tl_hash = 0;
#line 218
  mdev->tl_hash_s = 0U;
#line 220
  return (1);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 225
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 225
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           225);
  } else {

  }
#line 226
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 226
  if (tmp___3 == 0) {
#line 226
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           226);
  } else {

  }
#line 227
  kfree((void const   *)mdev->oldest_tle);
#line 228
  mdev->oldest_tle = 0;
#line 229
  kfree((void const   *)mdev->unused_spare_tle);
#line 230
  mdev->unused_spare_tle = 0;
#line 231
  kfree((void const   *)mdev->tl_hash);
#line 232
  mdev->tl_hash = 0;
#line 233
  mdev->tl_hash_s = 0U;
#line 234
  return;
}
}
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 247
  INIT_LIST_HEAD(& new->requests);
#line 248
  INIT_LIST_HEAD(& new->w.list);
#line 249
  new->w.cb = 0;
#line 250
  new->next = 0;
#line 251
  new->n_req = 0;
#line 253
  newest_before = mdev->newest_tle;
#line 256
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 257
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 258
    (mdev->newest_tle)->next = new;
#line 259
    mdev->newest_tle = new;
  } else {

  }
#line 261
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 280
  spin_lock_irq(& mdev->req_lock);
#line 282
  b = mdev->oldest_tle;
#line 285
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 286
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 286
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 286
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 288
    goto bail;
  } else {

  }
#line 290
  if (b->br_number != barrier_nr) {
#line 291
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 291
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 291
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 293
    goto bail;
  } else {

  }
#line 295
  if ((unsigned int )b->n_req != set_size) {
#line 296
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 298
    goto bail;
  } else {

  }
#line 302
  le = b->requests.next;
#line 302
  tle = le->next;
#line 302
  goto ldv_43001;
  ldv_43000: 
#line 303
  __mptr = (struct list_head  const  *)le;
#line 303
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 304
  _req_mod(r, barrier_acked);
#line 302
  le = tle;
#line 302
  tle = le->next;
  ldv_43001: ;
#line 302
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 303
    goto ldv_43000;
  } else {

  }
#line 319
  list_del_init(& b->requests);
#line 321
  nob = b->next;
#line 322
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 322
  if (tmp___7 != 0) {
#line 323
    _tl_add_barrier(mdev, b);
#line 324
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 325
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 329
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 329
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 329
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             329);
    } else {

    }
#line 330
    mdev->oldest_tle = nob;
#line 331
    kfree((void const   *)b);
  }
#line 334
  spin_unlock_irq(& mdev->req_lock);
#line 335
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 335
  if (tmp___8 != 0) {
#line 335
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 335
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 335
  if (tmp___12 < 0) {
#line 335
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 335
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 335, tmp___9);
  } else {

  }
#line 337
  return;
  bail: 
#line 340
  spin_unlock_irq(& mdev->req_lock);
#line 341
  val.i = 0U;
#line 341
  val.ldv_33296.conn = 6U;
#line 341
  mask.i = 0U;
#line 341
  mask.ldv_33296.conn = 31U;
#line 341
  drbd_force_state(mdev, mask, val);
#line 343
  return;
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 358
  tmp___0 = random32();
#line 358
  new_initial_bnr = (int )tmp___0;
#line 360
  spin_lock_irq(& mdev->req_lock);
#line 362
  b = mdev->oldest_tle;
#line 363
  goto ldv_43031;
  ldv_43030: 
#line 364
  le = b->requests.next;
#line 364
  tle = le->next;
#line 364
  goto ldv_43023;
  ldv_43022: 
#line 365
  __mptr = (struct list_head  const  *)le;
#line 365
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 368
  _req_mod(r, connection_lost_while_pending);
#line 364
  le = tle;
#line 364
  tle = le->next;
  ldv_43023: ;
#line 364
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 365
    goto ldv_43022;
  } else {

  }
#line 370
  tmp = b->next;
#line 374
  list_del(& b->requests);
#line 379
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 380
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 380
    if (tmp___1 != 0) {
#line 380
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 380
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 380
    if (tmp___5 < 0) {
#line 380
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 380
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 380, tmp___2);
    } else {

    }
  } else {

  }
#line 382
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 384
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 384
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 384
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 384
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             384);
    } else {

    }
#line 385
    INIT_LIST_HEAD(& b->requests);
#line 386
    INIT_LIST_HEAD(& b->w.list);
#line 387
    b->w.cb = 0;
#line 388
    b->br_number = (unsigned int )new_initial_bnr;
#line 389
    b->n_req = 0;
#line 391
    mdev->oldest_tle = b;
#line 392
    goto ldv_43029;
  } else {

  }
#line 394
  kfree((void const   *)b);
#line 395
  b = tmp;
  ldv_43031: ;
#line 363
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 364
    goto ldv_43030;
  } else {

  }
  ldv_43029: 
#line 399
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 399
  if (tmp___10 == 0) {
#line 399
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 399
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           399);
  } else {

  }
#line 402
  le = mdev->out_of_sequence_requests.next;
#line 402
  tle = le->next;
#line 402
  goto ldv_43035;
  ldv_43034: 
#line 403
  __mptr___0 = (struct list_head  const  *)le;
#line 403
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 406
  _req_mod(r, connection_lost_while_pending);
#line 402
  le = tle;
#line 402
  tle = le->next;
  ldv_43035: ;
#line 402
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 403
    goto ldv_43034;
  } else {

  }
#line 410
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 412
  spin_unlock_irq(& mdev->req_lock);
#line 413
  return;
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 424
  return (((((int )os.ldv_33296.conn > 9 && (int )ns.ldv_33296.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_33296.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 440
  tmp = spinlock_check(& mdev->req_lock);
#line 440
  flags = _raw_spin_lock_irqsave(tmp);
#line 441
  os = mdev->state;
#line 442
  ns.i = (os.i & ~ mask.i) | val.i;
#line 443
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 444
  ns = mdev->state;
#line 445
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 447
  return (rv);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 459
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 460
  return;
}
}
#line 462
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 463
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 465
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 467
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 477
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 477
  if (tmp != 0) {
#line 478
    return (SS_CW_SUCCESS);
  } else {

  }
#line 480
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 480
  if (tmp___0 != 0) {
#line 481
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 483
  rv = 0;
#line 484
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 484
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 485
  os = mdev->state;
#line 486
  ns.i = (os.i & ~ mask.i) | val.i;
#line 487
  ns = sanitize_state(mdev, os, ns, 0);
#line 489
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 489
  if (tmp___2 == 0) {
#line 490
    rv = 4;
  } else {

  }
#line 491
  if (rv == 0) {
#line 492
    rv = is_valid_state(mdev, ns);
#line 493
    if (rv == 1) {
#line 494
      rv = is_valid_state_transition(mdev, ns, os);
#line 495
      if (rv == 1) {
#line 496
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 499
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 501
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 523
  init_completion(& done);
#line 525
  if (((unsigned int )f & 8U) != 0U) {
#line 526
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 528
  tmp = spinlock_check(& mdev->req_lock);
#line 528
  flags = _raw_spin_lock_irqsave(tmp);
#line 529
  os = mdev->state;
#line 530
  ns.i = (os.i & ~ mask.i) | val.i;
#line 531
  ns = sanitize_state(mdev, os, ns, 0);
#line 533
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 533
  if (tmp___5 != 0) {
#line 534
    rv = is_valid_state(mdev, ns);
#line 535
    if (rv == 1) {
#line 536
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 537
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 539
    if (rv <= 0) {
#line 540
      if (((unsigned int )f & 2U) != 0U) {
#line 541
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 542
      goto abort;
    } else {

    }
#line 545
    drbd_state_lock___0(mdev);
#line 546
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 546
    if (tmp___0 == 0) {
#line 547
      drbd_state_unlock(mdev);
#line 548
      rv = -10;
#line 549
      if (((unsigned int )f & 2U) != 0U) {
#line 550
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 551
      goto abort;
    } else {

    }
#line 554
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 554
    rv = (int )tmp___1;
#line 554
    if (rv != 0) {
#line 554
      goto ldv_43103;
    } else {

    }
#line 554
    tmp___2 = get_current();
#line 554
    __wait.flags = 0U;
#line 554
    __wait.private = (void *)tmp___2;
#line 554
    __wait.func = & autoremove_wake_function;
#line 554
    __wait.task_list.next = & __wait.task_list;
#line 554
    __wait.task_list.prev = & __wait.task_list;
    ldv_43106: 
#line 554
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 554
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 554
    rv = (int )tmp___3;
#line 554
    if (rv != 0) {
#line 554
      goto ldv_43105;
    } else {

    }
#line 554
    schedule();
#line 554
    goto ldv_43106;
    ldv_43105: 
#line 554
    finish_wait(& mdev->state_wait, & __wait);
    ldv_43103: ;
#line 557
    if (rv <= 0) {
#line 558
      drbd_state_unlock(mdev);
#line 559
      if (((unsigned int )f & 2U) != 0U) {
#line 560
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 561
      goto abort;
    } else {

    }
#line 563
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 563
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 564
    os = mdev->state;
#line 565
    ns.i = (os.i & ~ mask.i) | val.i;
#line 566
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 567
    drbd_state_unlock(mdev);
  } else {
#line 569
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 572
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 574
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 575
    tmp___8 = get_current();
#line 575
    if ((unsigned long )tmp___8 == (unsigned long )mdev->worker.task) {
#line 575
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 575
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___7,
             tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             575);
    } else {

    }
#line 576
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 580
  if (((unsigned int )f & 8U) != 0U) {
#line 581
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 583
  return (rv);
}
}
#line 596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 601
  rv = drbd_req_state(mdev, mask, val, f);
#line 601
  if (rv != -18) {
#line 601
    goto ldv_43117;
  } else {

  }
#line 601
  tmp = get_current();
#line 601
  __wait.flags = 0U;
#line 601
  __wait.private = (void *)tmp;
#line 601
  __wait.func = & autoremove_wake_function;
#line 601
  __wait.task_list.next = & __wait.task_list;
#line 601
  __wait.task_list.prev = & __wait.task_list;
  ldv_43120: 
#line 601
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 601
  rv = drbd_req_state(mdev, mask, val, f);
#line 601
  if (rv != -18) {
#line 601
    goto ldv_43119;
  } else {

  }
#line 601
  schedule();
#line 601
  goto ldv_43120;
  ldv_43119: 
#line 601
  finish_wait(& mdev->state_wait, & __wait);
  ldv_43117: ;
#line 604
  return (rv);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 609
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.pdsk);
#line 609
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.disk);
#line 609
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_33296.peer);
#line 609
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_33296.role);
#line 609
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 609
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 610
  return;
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 626
  if (err == -18) {
#line 627
    return;
  } else {

  }
#line 628
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 628
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 628
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 628
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 629
  print_st(mdev, (char *)" state", os);
#line 630
  print_st(mdev, (char *)"wanted", ns);
#line 631
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 659
  rv = 1;
#line 661
  fp = FP_DONT_CARE;
#line 662
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 662
  if (tmp != 0) {
#line 663
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 664
    put_ldev(mdev);
  } else {

  }
#line 667
  tmp___0 = get_net_conf(mdev);
#line 667
  if (tmp___0 != 0) {
#line 668
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 670
      rv = -1;
    } else {

    }
#line 671
    put_net_conf(mdev);
  } else {

  }
#line 674
  if (rv <= 0) {

  } else
#line 676
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 677
    rv = -12;
  } else
#line 679
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.disk <= 7) {
#line 680
    rv = -2;
  } else
#line 682
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.pdsk > 5) {
#line 684
    rv = -7;
  } else
#line 686
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.disk <= 4) && (int )ns.ldv_33296.pdsk <= 4) {
#line 687
    rv = -2;
  } else
#line 689
  if ((int )ns.ldv_33296.conn > 10 && (int )ns.ldv_33296.disk <= 3) {
#line 690
    rv = -4;
  } else
#line 692
  if ((int )ns.ldv_33296.conn > 10 && (int )ns.ldv_33296.pdsk <= 3) {
#line 693
    rv = -5;
  } else
#line 695
  if (((int )ns.ldv_33296.conn > 10 && (int )ns.ldv_33296.disk <= 7) && (int )ns.ldv_33296.pdsk <= 7) {
#line 696
    rv = -2;
  } else
#line 698
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 703
    rv = -6;
  } else
#line 705
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 707
    rv = -14;
  } else
#line 709
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 711
    rv = -17;
  } else {

  }
#line 713
  return (rv);
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 725
  rv = 1;
#line 727
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_33296.conn > 10) {
#line 729
    rv = -8;
  } else {

  }
#line 731
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 732
    rv = -9;
  } else {

  }
#line 734
  if ((int )ns.ldv_33296.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 735
    rv = -11;
  } else {

  }
#line 737
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_33296.conn <= 1) {
#line 738
    rv = -13;
  } else {

  }
#line 740
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_33296.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 741
    rv = -16;
  } else {

  }
#line 743
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 744
    rv = -18;
  } else {

  }
#line 746
  if ((int )ns.ldv_33296.conn == (int )os.ldv_33296.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 747
    rv = -18;
  } else {

  }
#line 749
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_33296.conn <= 9) {
#line 750
    rv = -15;
  } else {

  }
#line 752
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_33296.conn != (int )os.ldv_33296.conn) && (int )os.ldv_33296.conn > 10) {
#line 754
    rv = -8;
  } else {

  }
#line 756
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_33296.conn <= 9) {
#line 758
    rv = -15;
  } else {

  }
#line 760
  return (rv);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 778
  fp = FP_DONT_CARE;
#line 779
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 779
  if (tmp != 0) {
#line 780
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 781
    put_ldev(mdev);
  } else {

  }
#line 785
  if (((int )ns.ldv_33296.conn > 2 && (int )ns.ldv_33296.conn <= 7) && (int )os.ldv_33296.conn <= 1) {
#line 787
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 790
  if ((((int )os.ldv_33296.conn > 2 && (int )os.ldv_33296.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 792
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 795
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 796
    ns.ldv_33296.conn = os.ldv_33296.conn;
  } else {

  }
#line 798
  if ((int )ns.ldv_33296.conn <= 9) {
#line 799
    ns.ldv_33296.peer_isp = 0U;
#line 800
    ns.ldv_33296.peer = 0U;
#line 801
    if ((int )ns.ldv_33296.pdsk > 6 || (int )ns.ldv_33296.pdsk <= 3) {
#line 802
      ns.ldv_33296.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 806
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 807
    ns.ldv_33296.aftr_isp = 0U;
  } else {

  }
#line 809
  if ((int )ns.ldv_33296.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 810
    ns.ldv_33296.pdsk = 6U;
  } else {

  }
#line 813
  if (((int )os.ldv_33296.conn > 10 && (int )ns.ldv_33296.conn > 10) && ((int )ns.ldv_33296.disk <= 2 || (int )ns.ldv_33296.pdsk <= 2)) {
#line 815
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 816
      *warn_sync_abort = 1;
    } else {

    }
#line 817
    ns.ldv_33296.conn = 10U;
  } else {

  }
#line 820
  if ((int )ns.ldv_33296.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 823
    switch ((int )ns.ldv_33296.conn) {
    case 14: ;
    case 21: 
#line 826
    ns.ldv_33296.disk = 5U;
#line 827
    goto ldv_43153;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 832
    ns.ldv_33296.disk = 8U;
#line 833
    goto ldv_43153;
    case 17: 
#line 835
    ns.ldv_33296.disk = 4U;
#line 836
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 837
    goto ldv_43153;
    }
    ldv_43153: ;
#line 839
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 840
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 840
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 840
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 843
  if ((int )ns.ldv_33296.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 845
    switch ((int )ns.ldv_33296.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 850
    ns.ldv_33296.pdsk = 8U;
#line 851
    goto ldv_43163;
    case 13: ;
    case 20: 
#line 857
    ns.ldv_33296.pdsk = (int )os.ldv_33296.pdsk > 0 && (int )os.ldv_33296.pdsk <= 4 ? os.ldv_33296.pdsk : 5U;
#line 860
    goto ldv_43163;
    case 16: 
#line 862
    ns.ldv_33296.pdsk = 4U;
#line 863
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 863
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 863
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 864
    goto ldv_43163;
    }
    ldv_43163: ;
#line 866
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 867
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 871
  if ((int )ns.ldv_33296.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 871
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 871
    if (tmp___10 != 0) {
#line 873
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 874
        ns.ldv_33296.disk = mdev->new_state_tmp.ldv_33296.disk;
#line 875
        ns.ldv_33296.pdsk = mdev->new_state_tmp.ldv_33296.pdsk;
      } else {
#line 877
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 877
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 877
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 878
        ns.ldv_33296.disk = 0U;
#line 879
        ns.ldv_33296.pdsk = 6U;
      }
#line 881
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 884
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.conn <= 9) && (int )ns.ldv_33296.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33296.conn > 9) || (int )os.ldv_33296.pdsk <= 5)) {
#line 887
    ns.ldv_33296.susp = 1U;
  } else {

  }
#line 889
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 890
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 891
      ns.ldv_33296.conn = 20U;
    } else {

    }
#line 892
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 893
      ns.ldv_33296.conn = 21U;
    } else {

    }
  } else {
#line 895
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 896
      ns.ldv_33296.conn = 16U;
    } else {

    }
#line 897
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 898
      ns.ldv_33296.conn = 17U;
    } else {

    }
  }
#line 901
  return (ns);
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 907
  if ((unsigned int )cs == 19U) {
#line 913
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 915
    bit = mdev->ov_start_sector >> 3;
#line 916
    if (mdev->rs_total <= bit) {
#line 917
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 919
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 921
  return;
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 937
  rv = 1;
#line 938
  warn_sync_abort = 0;
#line 941
  os = mdev->state;
#line 943
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 945
  if (ns.i == os.i) {
#line 946
    return (2);
  } else {

  }
#line 948
  if (((unsigned int )flags & 1U) == 0U) {
#line 952
    rv = is_valid_state(mdev, ns);
#line 953
    if (rv <= 0) {
#line 957
      tmp___2 = is_valid_state(mdev, os);
#line 957
      if (tmp___2 == rv) {
#line 958
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 958
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 958
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 958
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 961
        print_st(mdev, (char *)"old", os);
#line 962
        print_st(mdev, (char *)"new", ns);
#line 963
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 966
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 969
  if (rv <= 0) {
#line 970
    if (((unsigned int )flags & 2U) != 0U) {
#line 971
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 972
    return (rv);
  } else {

  }
#line 975
  if (warn_sync_abort != 0) {
#line 976
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 976
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 976
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 980
  pbp = (char *)(& pb);
#line 981
  *pbp = 0;
#line 982
  if ((int )ns.ldv_33296.role != (int )os.ldv_33296.role) {
#line 982
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_33296.role);
#line 982
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_33296.role);
#line 982
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 982
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 983
  if ((int )ns.ldv_33296.peer != (int )os.ldv_33296.peer) {
#line 983
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_33296.peer);
#line 983
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_33296.peer);
#line 983
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 983
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 984
  if ((int )ns.ldv_33296.conn != (int )os.ldv_33296.conn) {
#line 984
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_33296.conn);
#line 984
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_33296.conn);
#line 984
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 984
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 985
  if ((int )ns.ldv_33296.disk != (int )os.ldv_33296.disk) {
#line 985
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.disk);
#line 985
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_33296.disk);
#line 985
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 985
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 986
  if ((int )ns.ldv_33296.pdsk != (int )os.ldv_33296.pdsk) {
#line 986
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33296.pdsk);
#line 986
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_33296.pdsk);
#line 986
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 986
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 987
  if ((int )ns.ldv_33296.susp != (int )os.ldv_33296.susp) {
#line 987
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 987
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 988
  if ((int )ns.ldv_33296.aftr_isp != (int )os.ldv_33296.aftr_isp) {
#line 988
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 988
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 989
  if ((int )ns.ldv_33296.peer_isp != (int )os.ldv_33296.peer_isp) {
#line 989
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 989
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 990
  if ((int )ns.ldv_33296.user_isp != (int )os.ldv_33296.user_isp) {
#line 990
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 990
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 991
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 1002
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1002
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1002
    if (tmp___26 == 0) {
#line 1006
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1008
  mdev->state.i = ns.i;
#line 1009
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1010
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1013
  if ((int )os.ldv_33296.conn > 15 && (int )ns.ldv_33296.conn <= 10) {
#line 1014
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1015
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1019
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_33296.conn <= 9) {
#line 1021
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1023
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1027
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1029
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1030
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1031
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1032
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1032
      if (tmp___31 == 0) {
#line 1033
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1041
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1043
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1043
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1043
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1044
    mdev->rs_mark_time = jiffies;
#line 1045
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1046
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1049
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1051
    mdev->ov_position = 0UL;
#line 1052
    tmp___34 = drbd_bm_bits(mdev);
#line 1052
    mdev->rs_mark_left = tmp___34;
#line 1052
    mdev->rs_total = tmp___34;
#line 1054
    if (mdev->agreed_pro_version > 89) {
#line 1055
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_33296.conn);
    } else {
#line 1057
      mdev->ov_start_sector = 0UL;
    }
#line 1058
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1060
    tmp___35 = jiffies;
#line 1060
    mdev->rs_mark_time = tmp___35;
#line 1060
    mdev->rs_start = tmp___35;
#line 1062
    mdev->ov_last_oos_size = 0UL;
#line 1063
    mdev->ov_last_oos_start = 0UL;
#line 1065
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1066
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1066
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1066
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1068
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1072
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1072
  if (tmp___39 != 0) {
#line 1073
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1077
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1077
    if (tmp___38 != 0) {
#line 1078
      mdf = mdf | 64U;
    } else {

    }
#line 1079
    if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U || ((int )mdev->state.ldv_33296.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 4U)) {
#line 1081
      mdf = mdf | 2U;
    } else {

    }
#line 1082
    if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1083
      mdf = mdf | 4U;
    } else {

    }
#line 1084
    if ((int )mdev->state.ldv_33296.disk > 4) {
#line 1085
      mdf = mdf | 1U;
    } else {

    }
#line 1086
    if ((int )mdev->state.ldv_33296.disk > 5) {
#line 1087
      mdf = mdf | 16U;
    } else {

    }
#line 1088
    if ((int )mdev->state.ldv_33296.pdsk <= 5 && (int )mdev->state.ldv_33296.pdsk > 3) {
#line 1089
      mdf = mdf | 32U;
    } else {

    }
#line 1090
    if ((mdev->ldev)->md.flags != mdf) {
#line 1091
      (mdev->ldev)->md.flags = mdf;
#line 1092
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1094
    if ((int )os.ldv_33296.disk <= 6 && (int )ns.ldv_33296.disk > 6) {
#line 1095
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1096
    put_ldev(mdev);
  } else {

  }
#line 1100
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1102
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1105
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1106
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1109
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1110
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1113
  if (((int )os.ldv_33296.conn > 7 && (int )ns.ldv_33296.conn <= 7) && (int )ns.ldv_33296.conn > 2) {
#line 1115
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1117
  tmp___40 = kmalloc___4(48UL, 32U);
#line 1117
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1118
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1119
    ascw->os = os;
#line 1120
    ascw->ns = ns;
#line 1121
    ascw->flags = flags;
#line 1122
    ascw->w.cb = & w_after_state_ch;
#line 1123
    ascw->done = done;
#line 1124
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1126
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1126
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1126
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1129
  return (rv);
}
}
#line 1132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1135
  __mptr = (struct drbd_work  const  *)w;
#line 1135
  ascw = (struct after_state_chg_work *)__mptr;
#line 1136
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1137
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1138
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1138
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1138
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1138
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1138);
    } else {

    }
#line 1139
    complete(ascw->done);
  } else {

  }
#line 1141
  kfree((void const   *)ascw);
#line 1143
  return (1);
}
}
#line 1146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1148
  if (rv != 0) {
#line 1149
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1149
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1149
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1150
    val.i = 0U;
#line 1150
    val.ldv_33296.conn = 10U;
#line 1150
    mask.i = 0U;
#line 1150
    mask.ldv_33296.conn = 31U;
#line 1150
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1151
    return;
  } else {

  }
#line 1154
  switch ((int )mdev->state.ldv_33296.conn) {
  case 12: 
#line 1156
  val___0.i = 0U;
#line 1156
  val___0.ldv_33296.conn = 15U;
#line 1156
  mask___0.i = 0U;
#line 1156
  mask___0.ldv_33296.conn = 31U;
#line 1156
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1157
  goto ldv_43206;
  case 11: 
#line 1159
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1160
  goto ldv_43206;
  }
  ldv_43206: ;
#line 1163
  return;
}
}
#line 1171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1176
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1177
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1178
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1179
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1182
  fp = FP_DONT_CARE;
#line 1183
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1183
  if (tmp != 0) {
#line 1184
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1185
    put_ldev(mdev);
  } else {

  }
#line 1189
  drbd_bcast_state(mdev, ns);
#line 1191
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33296.disk > 7) || (int )os.ldv_33296.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33296.disk <= 7) && (int )ns.ldv_33296.pdsk <= 7)) {
#line 1193
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1198
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1201
    if (((int )os.ldv_33296.pdsk > 5 && (int )ns.ldv_33296.pdsk <= 5) || ((int )os.ldv_33296.conn <= 9 && (int )ns.ldv_33296.conn > 9)) {
#line 1203
      tl_clear(mdev);
#line 1204
      spin_lock_irq(& mdev->req_lock);
#line 1205
      __ns.i = mdev->state.i;
#line 1205
      __ns.ldv_33296.susp = 0U;
#line 1205
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1206
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1210
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_33296.pdsk > 0) {
#line 1211
    drbd_send_uuids(mdev);
#line 1212
    drbd_send_state(mdev);
  } else {

  }
#line 1214
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1215
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1218
  if ((((int )os.ldv_33296.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_33296.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1224
    kfree((void const   *)mdev->p_uuid);
#line 1225
    mdev->p_uuid = 0;
#line 1226
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1226
    if (tmp___0 != 0) {
#line 1227
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_33296.disk > 7) {
#line 1229
        drbd_uuid_new_current(mdev);
#line 1230
        drbd_send_uuids(mdev);
      } else {

      }
#line 1232
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1236
  if ((int )ns.ldv_33296.pdsk <= 3) {
#line 1236
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1236
    if (tmp___1 != 0) {
#line 1237
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1238
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1241
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1242
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1243
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1247
  if (((int )ns.ldv_33296.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1249
    kfree((void const   *)mdev->p_uuid);
#line 1250
    mdev->p_uuid = 0;
#line 1251
    drbd_send_sizes(mdev, 0, 0);
#line 1252
    drbd_send_uuids(mdev);
#line 1253
    drbd_send_state(mdev);
  } else {

  }
#line 1257
  if ((int )ns.ldv_33296.conn > 9 && ((int )os.ldv_33296.aftr_isp != (int )ns.ldv_33296.aftr_isp || (int )os.ldv_33296.user_isp != (int )ns.ldv_33296.user_isp)) {
#line 1260
    drbd_send_state(mdev);
  } else {

  }
#line 1263
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1265
    suspend_other_sg(mdev);
  } else {

  }
#line 1269
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_33296.conn > 9) {
#line 1270
    drbd_send_state(mdev);
  } else {

  }
#line 1273
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1275
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1278
  if ((((int )os.ldv_33296.conn <= 9 && (int )ns.ldv_33296.conn <= 9) && (int )os.ldv_33296.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1280
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1282
  if ((int )os.ldv_33296.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1285
    eh = EP_PASS_ON;
#line 1286
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1286
    if (tmp___2 != 0) {
#line 1287
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1288
      put_ldev(mdev);
    } else {

    }
#line 1291
    drbd_rs_cancel_all(mdev);
#line 1295
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1295
    if (tmp___3 == 0) {
#line 1295
      goto ldv_43218;
    } else {

    }
#line 1295
    tmp___4 = get_current();
#line 1295
    __wait.flags = 0U;
#line 1295
    __wait.private = (void *)tmp___4;
#line 1295
    __wait.func = & autoremove_wake_function;
#line 1295
    __wait.task_list.next = & __wait.task_list;
#line 1295
    __wait.task_list.prev = & __wait.task_list;
    ldv_43221: 
#line 1295
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1295
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1295
    if (tmp___5 == 0) {
#line 1295
      goto ldv_43220;
    } else {

    }
#line 1295
    schedule();
#line 1295
    goto ldv_43221;
    ldv_43220: 
#line 1295
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43218: 
#line 1296
    mdev->rs_total = 0UL;
#line 1297
    mdev->rs_failed = 0UL;
#line 1298
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1300
    spin_lock_irq(& mdev->req_lock);
#line 1301
    __ns___0.i = mdev->state.i;
#line 1301
    __ns___0.ldv_33296.disk = 0U;
#line 1301
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1302
    spin_unlock_irq(& mdev->req_lock);
#line 1304
    if ((unsigned int )eh == 1U) {
#line 1305
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1308
  if ((int )os.ldv_33296.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1310
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1311
      tmp___10 = drbd_send_state(mdev);
#line 1311
      if (tmp___10 != 0) {
#line 1312
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___7, tmp___6);
      } else {
#line 1314
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___9, tmp___8);
      }
    } else {

    }
#line 1317
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1317
    if (tmp___11 == 0) {
#line 1317
      goto ldv_43224;
    } else {

    }
#line 1317
    tmp___12 = get_current();
#line 1317
    __wait___0.flags = 0U;
#line 1317
    __wait___0.private = (void *)tmp___12;
#line 1317
    __wait___0.func = & autoremove_wake_function;
#line 1317
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1317
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43227: 
#line 1317
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1317
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1317
    if (tmp___13 == 0) {
#line 1317
      goto ldv_43226;
    } else {

    }
#line 1317
    schedule();
#line 1317
    goto ldv_43227;
    ldv_43226: 
#line 1317
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43224: 
#line 1318
    lc_destroy(mdev->resync);
#line 1319
    mdev->resync = 0;
#line 1320
    lc_destroy(mdev->act_log);
#line 1321
    mdev->act_log = 0;
#line 1322
    drbd_free_bc(mdev->ldev);
#line 1322
    mdev->ldev = 0;
#line 1326
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1327
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1331
  if ((int )ns.ldv_33296.disk > 3 && (int )ns.ldv_33296.pdsk > 3) {
#line 1331
    tmp___14 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1331
    if (tmp___14 != 0) {
#line 1333
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1334
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1338
  if ((((int )os.ldv_33296.conn > 10 && (int )ns.ldv_33296.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1341
    resume_next_sg(mdev);
  } else {

  }
#line 1344
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1345
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1349
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1352
    if ((int )os.ldv_33296.aftr_isp != (int )ns.ldv_33296.aftr_isp) {
#line 1353
      resume_next_sg(mdev);
    } else {

    }
#line 1355
    tmp___15 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1355
    if (tmp___15 != 0) {
#line 1356
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1359
  drbd_md_sync(mdev);
#line 1360
  return;
}
}
#line 1363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1365
  thi = (struct drbd_thread *)arg;
#line 1366
  mdev = thi->mdev;
  restart: 
#line 1371
  retval = (*(thi->function))(thi);
#line 1373
  tmp = spinlock_check(& thi->t_lock);
#line 1373
  flags = _raw_spin_lock_irqsave(tmp);
#line 1385
  if ((unsigned int )thi->t_state == 3U) {
#line 1386
    tmp___0 = get_current();
#line 1386
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1386
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1386
    printk("<6>%s %s: Restarting %s\n", tmp___2, tmp___1, (char *)(& tmp___0->comm));
#line 1387
    thi->t_state = Running;
#line 1388
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1389
    goto restart;
  } else {

  }
#line 1392
  thi->task = 0;
#line 1393
  thi->t_state = None;
#line 1394
  __asm__  volatile   ("mfence": : : "memory");
#line 1395
  complete(& thi->stop);
#line 1396
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1398
  tmp___3 = get_current();
#line 1398
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1398
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1398
  printk("<6>%s %s: Terminating %s\n", tmp___5, tmp___4, (char *)(& tmp___3->comm));
#line 1401
  ldv_module_put_1(& __this_module);
#line 1402
  return (retval);
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1408
  spinlock_check(& thi->t_lock);
#line 1408
  __raw_spin_lock_init(& thi->t_lock.ldv_5735.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1409
  thi->task = 0;
#line 1410
  thi->t_state = None;
#line 1411
  thi->function = func;
#line 1412
  thi->mdev = mdev;
#line 1413
  return;
}
}
#line 1415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct task_struct *tmp___9 ;
  unsigned int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  long tmp___13 ;
  raw_spinlock_t *tmp___14 ;
  struct task_struct *tmp___15 ;
  struct task_struct *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;

  {
#line 1417
  mdev = thi->mdev;
#line 1421
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1428
  tmp = spinlock_check(& thi->t_lock);
#line 1428
  flags = _raw_spin_lock_irqsave(tmp);
#line 1430
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1432
  tmp___0 = get_current();
#line 1432
  tmp___1 = get_current();
#line 1432
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___3, tmp___2, me, (char *)(& tmp___1->comm),
         tmp___0->pid);
#line 1436
  tmp___6 = ldv_try_module_get_2(& __this_module);
#line 1436
  if (tmp___6 == 0) {
#line 1437
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1437
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1437
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___5,
           tmp___4);
#line 1438
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1439
    return (0);
  } else {

  }
#line 1442
  init_completion(& thi->stop);
#line 1443
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1443
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1443);
  } else {

  }
#line 1444
  thi->reset_cpu_mask = 1;
#line 1445
  thi->t_state = Running;
#line 1446
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1447
  tmp___9 = get_current();
#line 1447
  flush_signals(tmp___9);
#line 1449
  tmp___10 = mdev_to_minor(mdev);
#line 1449
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___10, me);
#line 1452
  tmp___13 = IS_ERR((void const   *)nt);
#line 1452
  if (tmp___13 != 0L) {
#line 1453
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1453
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1453
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___12, tmp___11);
#line 1455
    ldv_module_put_3(& __this_module);
#line 1456
    return (0);
  } else {

  }
#line 1458
  tmp___14 = spinlock_check(& thi->t_lock);
#line 1458
  flags = _raw_spin_lock_irqsave(tmp___14);
#line 1459
  thi->task = nt;
#line 1460
  thi->t_state = Running;
#line 1461
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1462
  wake_up_process(nt);
#line 1463
  goto ldv_43260;
  case 2U: 
#line 1465
  thi->t_state = Restarting;
#line 1466
  tmp___15 = get_current();
#line 1466
  tmp___16 = get_current();
#line 1466
  tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1466
  tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1466
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___18, tmp___17, me,
         (char *)(& tmp___16->comm), tmp___15->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1472
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1473
  goto ldv_43260;
  }
  ldv_43260: ;
#line 1476
  return (1);
}
}
#line 1480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1484
  ns = restart != 0 ? Restarting : Exiting;
#line 1487
  tmp = spinlock_check(& thi->t_lock);
#line 1487
  flags = _raw_spin_lock_irqsave(tmp);
#line 1489
  if ((unsigned int )thi->t_state == 0U) {
#line 1490
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1491
    if (restart != 0) {
#line 1492
      drbd_thread_start(thi);
    } else {

    }
#line 1493
    return;
  } else {

  }
#line 1496
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1497
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1498
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1499
      return;
    } else {

    }
#line 1502
    thi->t_state = ns;
#line 1503
    __asm__  volatile   ("mfence": : : "memory");
#line 1504
    init_completion(& thi->stop);
#line 1505
    tmp___0 = get_current();
#line 1505
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1506
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1510
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1512
  if (wait != 0) {
#line 1513
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1514
  return;
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1529
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1529
  if (tmp != 0U) {
#line 1530
    return;
  } else {

  }
#line 1532
  tmp___0 = mdev_to_minor(mdev);
#line 1532
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1532
  ord = (int )(tmp___0 % tmp___1);
#line 1533
  cpu = -1;
#line 1533
  goto ldv_43281;
  ldv_43280: 
#line 1534
  tmp___2 = ord;
#line 1534
  ord = ord - 1;
#line 1534
  if (tmp___2 == 0) {
#line 1535
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1536
    return;
  } else {

  }
  ldv_43281: 
#line 1533
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1533
  cpu = (int )tmp___3;
#line 1533
  if (cpu < nr_cpu_ids) {
#line 1534
    goto ldv_43280;
  } else {

  }
#line 1540
  cpumask_setall(mdev->cpu_mask);
#line 1541
  return;
}
}
#line 1550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1552
  tmp = get_current();
#line 1552
  p = tmp;
#line 1553
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1558
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1558
  if (_b != 0) {
#line 1558
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1558
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1558
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1558);
  } else {

  }
#line 1558
  if (_b != 0) {
#line 1559
    return;
  } else {

  }
#line 1560
  if (thi->reset_cpu_mask == 0) {
#line 1561
    return;
  } else {

  }
#line 1562
  thi->reset_cpu_mask = 0;
#line 1563
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1564
  return;
}
}
#line 1568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1574
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1574
  if (_b != 0) {
#line 1574
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1574
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1574
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1574);
  } else {

  }
#line 1574
  if (_b != 0) {
#line 1574
    return (0);
  } else {

  }
#line 1575
  _b___0 = size == 0UL;
#line 1575
  if (_b___0 != 0) {
#line 1575
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1575
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1575
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1575);
  } else {

  }
#line 1575
  if (_b___0 != 0) {
#line 1575
    return (0);
  } else {

  }
#line 1577
  h->magic = 1728214147U;
#line 1578
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1578
  h->command = tmp___3;
#line 1579
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1579
  h->length = tmp___4;
#line 1581
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1583
  ok = (size_t )sent == size;
#line 1584
  if (ok == 0) {
#line 1585
    tmp___5 = cmdname(cmd);
#line 1585
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1585
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1585
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1587
  return (ok);
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1596
  ok = 0;
#line 1599
  if (use_data_socket != 0) {
#line 1600
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1601
    sock = mdev->data.socket;
  } else {
#line 1603
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1604
    sock = mdev->meta.socket;
  }
#line 1609
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1609
  if (tmp != 0L) {
#line 1610
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1612
  if (use_data_socket != 0) {
#line 1613
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1615
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1616
  return (ok);
}
}
#line 1619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1625
  h.magic = 1728214147U;
#line 1626
  tmp = __fswab16((int )((__u16 )cmd));
#line 1626
  h.command = tmp;
#line 1627
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1627
  h.length = tmp___0;
#line 1629
  tmp___1 = drbd_get_data_sock(mdev);
#line 1629
  if (tmp___1 == 0) {
#line 1630
    return (0);
  } else {

  }
#line 1632
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1632
  ok = tmp___2 == 8;
#line 1634
  if (ok != 0) {
#line 1634
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1634
    if ((size_t )tmp___3 == size) {
#line 1634
      tmp___4 = 1;
    } else {
#line 1634
      tmp___4 = 0;
    }
  } else {
#line 1634
    tmp___4 = 0;
  }
#line 1634
  ok = tmp___4;
#line 1637
  drbd_put_data_sock(mdev);
#line 1639
  return (ok);
}
}
#line 1642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1647
  apv = mdev->agreed_pro_version;
#line 1649
  if (apv > 87) {
#line 1649
    if (apv == 88) {
#line 1649
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1649
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1649
      tmp___0 = 140;
    }
#line 1649
    size = tmp___0;
  } else {
#line 1649
    size = 12;
  }
#line 1657
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1658
  sock = mdev->data.socket;
#line 1660
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1660
  if (tmp___2 != 0L) {
#line 1661
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1663
    p = & mdev->data.sbuf.rs_param_89;
#line 1666
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1668
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1668
    p->rate = tmp___1;
#line 1670
    if (apv > 87) {
#line 1671
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1672
    if (apv > 88) {
#line 1673
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1675
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1677
    rv = 0;
  }
#line 1679
  mutex_unlock(& mdev->data.mutex);
#line 1681
  return (rv);
}
}
#line 1684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  __u32 tmp___8 ;

  {
#line 1689
  size = 32;
#line 1691
  if (mdev->agreed_pro_version > 86) {
#line 1692
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1692
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1696
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1696
  p = (struct p_protocol *)tmp___0;
#line 1697
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1698
    return (0);
  } else {

  }
#line 1700
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1700
  p->protocol = tmp___1;
#line 1701
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1701
  p->after_sb_0p = tmp___2;
#line 1702
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1702
  p->after_sb_1p = tmp___3;
#line 1703
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1703
  p->after_sb_2p = tmp___4;
#line 1704
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1704
  p->two_primaries = tmp___5;
#line 1706
  cf = 0;
#line 1707
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1708
    cf = cf | 1;
  } else {

  }
#line 1709
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1710
    if (mdev->agreed_pro_version > 91) {
#line 1711
      cf = cf | 2;
    } else {
#line 1713
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1713
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1713
      printk("<3>%s %s: --dry-run is not supported by peer", tmp___7, tmp___6);
#line 1714
      kfree((void const   *)p);
#line 1715
      return (0);
    }
  } else {

  }
#line 1718
  tmp___8 = __fswab32((__u32 )cf);
#line 1718
  p->conn_flags = tmp___8;
#line 1720
  if (mdev->agreed_pro_version > 86) {
#line 1721
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1723
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1725
  kfree((void const   *)p);
#line 1726
  return (rv);
}
}
#line 1729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1734
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1734
  if (tmp == 0) {
#line 1735
    return (1);
  } else {

  }
#line 1737
  i = 0;
#line 1737
  goto ldv_43347;
  ldv_43346: ;
#line 1738
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1738
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1738
    p.uuid[i] = tmp___0;
  } else {
#line 1738
    p.uuid[i] = 0ULL;
  }
#line 1737
  i = i + 1;
  ldv_43347: ;
#line 1737
  if (i <= 3) {
#line 1738
    goto ldv_43346;
  } else {

  }
#line 1740
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1741
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1741
  p.uuid[4] = tmp___1;
#line 1742
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1743
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1743
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1744
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1961UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1745
  tmp___3 = __fswab64(uuid_flags);
#line 1745
  p.uuid[5] = tmp___3;
#line 1747
  put_ldev(mdev);
#line 1749
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1749
  return (tmp___4);
}
}
#line 1753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1755
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1755
  return (tmp);
}
}
#line 1758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1760
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1760
  return (tmp);
}
}
#line 1764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1768
  tmp = __fswab64(val);
#line 1768
  p.uuid = tmp;
#line 1770
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1770
  return (tmp___0);
}
}
#line 1774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  sector_t tmp___4 ;
  __u64 tmp___5 ;
  __u64 tmp___6 ;
  unsigned int tmp___7 ;
  __u32 tmp___8 ;
  __u16 tmp___9 ;
  __u16 tmp___10 ;

  {
#line 1781
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1781
  if (tmp___1 != 0) {
#line 1782
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1782
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1782
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1782
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1782);
    } else {

    }
#line 1783
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1784
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1785
    q_order_type = drbd_queue_order_type(mdev);
#line 1786
    put_ldev(mdev);
  } else {
#line 1788
    d_size = 0UL;
#line 1789
    u_size = 0UL;
#line 1790
    q_order_type = 0;
  }
#line 1793
  tmp___2 = __fswab64((__u64 )d_size);
#line 1793
  p.d_size = tmp___2;
#line 1794
  tmp___3 = __fswab64((__u64 )u_size);
#line 1794
  p.u_size = tmp___3;
#line 1795
  if (trigger_reply == 0) {
#line 1795
    tmp___4 = drbd_get_capacity(mdev->this_bdev);
#line 1795
    tmp___5 = (__u64 )tmp___4;
  } else {
#line 1795
    tmp___5 = 0ULL;
  }
#line 1795
  tmp___6 = __fswab64(tmp___5);
#line 1795
  p.c_size = tmp___6;
#line 1796
  tmp___7 = queue_max_segment_size(mdev->rq_queue);
#line 1796
  tmp___8 = __fswab32(tmp___7);
#line 1796
  p.max_segment_size = tmp___8;
#line 1797
  tmp___9 = __fswab16((int )((__u16 )q_order_type));
#line 1797
  p.queue_order_type = tmp___9;
#line 1798
  tmp___10 = __fswab16((int )((__u16 )flags));
#line 1798
  p.dds_flags = tmp___10;
#line 1800
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1802
  return (ok);
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1813
  ok = 0;
#line 1817
  drbd_state_lock___0(mdev);
#line 1819
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1821
  tmp = __fswab32(mdev->state.i);
#line 1821
  p.state = tmp;
#line 1822
  sock = mdev->data.socket;
#line 1824
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1824
  if (tmp___0 != 0L) {
#line 1825
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1829
  mutex_unlock(& mdev->data.mutex);
#line 1831
  drbd_state_unlock(mdev);
#line 1832
  return (ok);
}
}
#line 1835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1840
  tmp = __fswab32(mask.i);
#line 1840
  p.mask = tmp;
#line 1841
  tmp___0 = __fswab32(val.i);
#line 1841
  p.val = tmp___0;
#line 1843
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1843
  return (tmp___1);
}
}
#line 1847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1851
  tmp = __fswab32((__u32 )retcode);
#line 1851
  p.retcode = tmp;
#line 1853
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1853
  return (tmp___0);
}
}
#line 1857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1870
  if ((unsigned int )*((unsigned char *)mdev + 216UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1872
    return (0);
  } else {

  }
#line 1874
  if (c->bit_offset >= c->bm_bits) {
#line 1875
    return (0);
  } else {

  }
#line 1878
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1879
  memset((void *)(& p->code), 0, 4087UL);
#line 1881
  plain_bits = 0UL;
#line 1886
  toggle = 2U;
  ldv_43401: ;
#line 1891
  if (toggle == 0U) {
#line 1891
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1891
    tmp = tmp___0;
  } else {
#line 1891
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1891
    tmp = tmp___1;
  }
#line 1893
  if (tmp == 0xffffffffffffffffUL) {
#line 1894
    tmp = c->bm_bits;
  } else {

  }
#line 1895
  rl = tmp - c->bit_offset;
#line 1897
  if (toggle == 2U) {
#line 1898
    if (rl == 0UL) {
#line 1901
      DCBP_set_start(p, 1);
#line 1903
      toggle = toggle == 0U;
#line 1904
      goto ldv_43399;
    } else {

    }
#line 1906
    DCBP_set_start(p, 0);
  } else {

  }
#line 1911
  if (rl == 0UL) {
#line 1912
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1914
    return (-1);
  } else {

  }
#line 1917
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1918
  if (bits == -105) {
#line 1919
    goto ldv_43400;
  } else {

  }
#line 1920
  if (bits <= 0) {
#line 1921
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1921
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1921
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1922
    return (0);
  } else {

  }
#line 1925
  toggle = toggle == 0U;
#line 1926
  plain_bits = plain_bits + rl;
#line 1927
  c->bit_offset = tmp;
  ldv_43399: ;
#line 1928
  if (c->bit_offset < c->bm_bits) {
#line 1929
    goto ldv_43401;
  } else {

  }
  ldv_43400: 
#line 1930
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1932
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1935
    c->bit_offset = c->bit_offset - plain_bits;
#line 1936
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1937
    c->bit_offset = c->word_offset * 64UL;
#line 1938
    return (0);
  } else {

  }
#line 1943
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1946
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1948
  return ((int )len);
}
}
#line 1952 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29488 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1955
  p = (struct p_compressed_bm *)h;
#line 1960
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1962
  if (len < 0) {
#line 1963
    return (FAILED);
  } else {

  }
#line 1965
  if (len != 0) {
#line 1966
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1967
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 1970
    c->packets[0] = c->packets[0] + 1U;
#line 1971
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 1973
    if (c->bit_offset >= c->bm_bits) {
#line 1974
      len = 0;
    } else {

    }
  } else {
#line 1978
    __min1 = 511UL;
#line 1978
    __min2 = c->bm_words - c->word_offset;
#line 1978
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1979
    len = (int )((unsigned int )num_words * 8U);
#line 1980
    if (len != 0) {
#line 1981
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 1982
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 1984
    c->word_offset = c->word_offset + num_words;
#line 1985
    c->bit_offset = c->word_offset * 64UL;
#line 1987
    c->packets[1] = c->packets[1] + 1U;
#line 1988
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 1990
    if (c->bit_offset > c->bm_bits) {
#line 1991
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1993
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 1995
  if (ok == 2) {
#line 1996
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 1997
  return ((enum ldv_29488 )ok);
}
}
#line 2001 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_29488 tmp___13 ;

  {
#line 2007
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2007
  if (_b != 0) {
#line 2007
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2007
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2007
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2007);
  } else {

  }
#line 2007
  if (_b != 0) {
#line 2007
    return (0);
  } else {

  }
#line 2011
  tmp___1 = __get_free_pages(16U, 0U);
#line 2011
  p = (struct p_header *)tmp___1;
#line 2012
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2013
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 2014
    return (0);
  } else {

  }
#line 2017
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2017
  if (tmp___10 != 0) {
#line 2018
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 2018
    if (tmp___9 != 0) {
#line 2019
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2019
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2019
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2020
      drbd_bm_set_all(mdev);
#line 2021
      tmp___8 = drbd_bm_write(mdev);
#line 2021
      if (tmp___8 != 0) {
#line 2025
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2025
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2025
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2027
        drbd_md_clear_flag(mdev, 8);
#line 2028
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2031
    put_ldev(mdev);
  } else {

  }
#line 2034
  tmp___11 = drbd_bm_bits(mdev);
#line 2034
  tmp___12 = drbd_bm_words(mdev);
#line 2034
  __constr_expr_0.bm_bits = tmp___11;
#line 2034
  __constr_expr_0.bm_words = tmp___12;
#line 2034
  __constr_expr_0.bit_offset = 0UL;
#line 2034
  __constr_expr_0.word_offset = 0UL;
#line 2034
  __constr_expr_0.packets[0] = 0U;
#line 2034
  __constr_expr_0.packets[1] = 0U;
#line 2034
  __constr_expr_0.bytes[0] = 0U;
#line 2034
  __constr_expr_0.bytes[1] = 0U;
#line 2034
  c = __constr_expr_0;
  ldv_43428: 
#line 2040
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2040
  ret = (int )tmp___13;
#line 2041
  if (ret == 0) {
#line 2042
    goto ldv_43428;
  } else {

  }
#line 2043
  free_pages((unsigned long )p, 0U);
#line 2044
  return (ret == 2);
}
}
#line 2047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2051
  tmp = drbd_get_data_sock(mdev);
#line 2051
  if (tmp == 0) {
#line 2052
    return (-1);
  } else {

  }
#line 2053
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2053
  err = tmp___0 == 0;
#line 2054
  drbd_put_data_sock(mdev);
#line 2055
  return (err);
}
}
#line 2058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2063
  p.barrier = barrier_nr;
#line 2064
  tmp = __fswab32(set_size);
#line 2064
  p.set_size = tmp;
#line 2066
  if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 2067
    return (0);
  } else {

  }
#line 2068
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2070
  return (ok);
}
}
#line 2081 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2089
  p.sector = sector;
#line 2090
  p.block_id = block_id;
#line 2091
  p.blksize = blksize;
#line 2092
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2092
  tmp___0 = __fswab32((__u32 )tmp);
#line 2092
  p.seq_num = tmp___0;
#line 2094
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_33296.conn <= 9) {
#line 2095
    return (0);
  } else {

  }
#line 2096
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2098
  return (ok);
}
}
#line 2101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2104
  header_size = 24;
#line 2106
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2108
  tmp = __fswab32((__u32 )data_size);
#line 2108
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2108
  return (tmp___0);
}
}
#line 2112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2115
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2115
  return (tmp);
}
}
#line 2124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2127
  tmp = __fswab32(e->size);
#line 2127
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2127
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2127
  return (tmp___1);
}
}
#line 2135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2138
  tmp = __fswab64(block_id);
#line 2138
  tmp___0 = __fswab32((__u32 )blksize);
#line 2138
  tmp___1 = __fswab64((__u64 )sector);
#line 2138
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2138
  return (tmp___2);
}
}
#line 2144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2150
  tmp = __fswab64((__u64 )sector);
#line 2150
  p.sector = tmp;
#line 2151
  p.block_id = block_id;
#line 2152
  tmp___0 = __fswab32((__u32 )size);
#line 2152
  p.blksize = tmp___0;
#line 2154
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2156
  return (ok);
}
}
#line 2159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2167
  tmp = __fswab64((__u64 )sector);
#line 2167
  p.sector = tmp;
#line 2168
  p.block_id = 1728263026ULL;
#line 2169
  tmp___0 = __fswab32((__u32 )size);
#line 2169
  p.blksize = tmp___0;
#line 2171
  p.head.magic = 1728214147U;
#line 2172
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2172
  p.head.command = tmp___1;
#line 2173
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2173
  p.head.length = tmp___2;
#line 2175
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2177
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2177
  ok = tmp___3 == 32;
#line 2178
  if (ok != 0) {
#line 2178
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2178
    if (tmp___4 == digest_size) {
#line 2178
      tmp___5 = 1;
    } else {
#line 2178
      tmp___5 = 0;
    }
  } else {
#line 2178
    tmp___5 = 0;
  }
#line 2178
  ok = tmp___5;
#line 2180
  mutex_unlock(& mdev->data.mutex);
#line 2182
  return (ok);
}
}
#line 2185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2190
  tmp = __fswab64((__u64 )sector);
#line 2190
  p.sector = tmp;
#line 2191
  p.block_id = 1728261953ULL;
#line 2192
  tmp___0 = __fswab32((__u32 )size);
#line 2192
  p.blksize = tmp___0;
#line 2194
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2196
  return (ok);
}
}
#line 2199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_send_delay_probe(struct drbd_conf *mdev , struct drbd_socket *ds ) 
{ 
  struct p_delay_probe dp ;
  int offset ;
  int ok ;
  struct timeval now ;
  __u32 tmp ;
  __u32 tmp___0 ;
  long tmp___1 ;

  {
#line 2202
  ok = 0;
#line 2205
  mutex_lock_nested(& ds->mutex, 0U);
#line 2206
  tmp___1 = __builtin_expect((unsigned long )ds->socket != (unsigned long )((struct socket *)0),
                             1L);
#line 2206
  if (tmp___1 != 0L) {
#line 2207
    do_gettimeofday(& now);
#line 2208
    offset = (int )(((unsigned int )now.tv_usec - (unsigned int )mdev->dps_time.tv_usec) + (unsigned int )(now.tv_sec - mdev->dps_time.tv_sec) * 1000000U);
#line 2210
    tmp = __fswab32(mdev->delay_seq);
#line 2210
    dp.seq_num = tmp;
#line 2211
    tmp___0 = __fswab32((__u32 )offset);
#line 2211
    dp.offset = tmp___0;
#line 2213
    ok = _drbd_send_cmd(mdev, ds->socket, P_DELAY_PROBE, (struct p_header *)(& dp),
                        16UL, 0U);
  } else {

  }
#line 2216
  mutex_unlock(& ds->mutex);
#line 2218
  return (ok);
}
}
#line 2221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_send_delay_probes(struct drbd_conf *mdev ) 
{ 
  int ok ;
  int tmp ;
  int tmp___0 ;

  {
#line 2225
  mdev->delay_seq = mdev->delay_seq + 1U;
#line 2226
  do_gettimeofday(& mdev->dps_time);
#line 2227
  ok = drbd_send_delay_probe(mdev, & mdev->meta);
#line 2228
  if (ok != 0) {
#line 2228
    tmp = drbd_send_delay_probe(mdev, & mdev->data);
#line 2228
    if (tmp != 0) {
#line 2228
      tmp___0 = 1;
    } else {
#line 2228
      tmp___0 = 0;
    }
  } else {
#line 2228
    tmp___0 = 0;
  }
#line 2228
  ok = tmp___0;
#line 2230
  mdev->dp_volume_last = mdev->send_cnt;
#line 2231
  mod_timer(& mdev->delay_probe_timer, (unsigned long )((mdev->sync_conf.dp_interval * 250) / 10) + (unsigned long )jiffies);
#line 2233
  return (ok);
}
}
#line 2240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2245
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2245
    tmp___0 = 1;
  } else {
#line 2245
    tmp = get_t_state(& mdev->asender);
#line 2245
    if ((unsigned int )tmp != 1U) {
#line 2245
      tmp___0 = 1;
    } else
#line 2245
    if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 2245
      tmp___0 = 1;
    } else {
#line 2245
      tmp___0 = 0;
    }
  }
#line 2245
  drop_it = tmp___0;
#line 2250
  if (drop_it != 0) {
#line 2251
    return (1);
  } else {

  }
#line 2253
  mdev->ko_count = mdev->ko_count - 1U;
#line 2253
  drop_it = mdev->ko_count == 0U;
#line 2254
  if (drop_it == 0) {
#line 2255
    tmp___1 = get_current();
#line 2255
    tmp___2 = get_current();
#line 2255
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2255
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2255
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2257
    request_ping(mdev);
  } else {

  }
#line 2260
  return (drop_it);
}
}
#line 2284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2287
  tmp = kmap(page);
#line 2287
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2287
  sent = tmp___0;
#line 2288
  kunmap(page);
#line 2289
  if ((size_t )sent == size) {
#line 2290
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2291
  return ((size_t )sent == size);
}
}
#line 2294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2297
  tmp = current_thread_info();
#line 2297
  oldfs = tmp->addr_limit;
#line 2299
  len = (int )size;
#line 2307
  if (disable_sendpage != 0) {
#line 2308
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2308
    return (tmp___0);
  } else {
#line 2307
    tmp___1 = page_count(page);
#line 2307
    if (tmp___1 <= 0) {
#line 2308
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2308
      return (tmp___0);
    } else {
#line 2307
      tmp___2 = PageSlab(page);
#line 2307
      if (tmp___2 != 0) {
#line 2308
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2308
        return (tmp___0);
      } else {

      }
    }
  }
#line 2310
  drbd_update_congested(mdev);
#line 2311
  tmp___3 = current_thread_info();
#line 2311
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2311
  tmp___3->addr_limit = __constr_expr_0;
  ldv_43538: 
#line 2313
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2313
  sent = (int )tmp___4;
#line 2316
  if (sent == -11) {
#line 2317
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2317
    if (tmp___5 != 0) {
#line 2319
      goto ldv_43535;
    } else {
#line 2321
      goto ldv_43536;
    }
  } else {

  }
#line 2323
  if (sent <= 0) {
#line 2324
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2324
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2324
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2326
    goto ldv_43535;
  } else {

  }
#line 2328
  len = len - sent;
#line 2329
  offset = offset + sent;
  ldv_43536: ;
#line 2330
  if (len > 0) {
#line 2331
    goto ldv_43538;
  } else {

  }
  ldv_43535: 
#line 2331
  tmp___8 = current_thread_info();
#line 2331
  tmp___8->addr_limit = oldfs;
#line 2332
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2334
  ok = len == 0;
#line 2335
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2335
  if (tmp___9 != 0L) {
#line 2336
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2337
  return (ok);
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2344
  bvec = bio->bi_io_vec;
#line 2344
  i = 0;
#line 2344
  goto ldv_43546;
  ldv_43545: 
#line 2345
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2345
  if (tmp == 0) {
#line 2347
    return (0);
  } else {

  }
#line 2344
  bvec = bvec + 1;
#line 2344
  i = i + 1;
  ldv_43546: ;
#line 2344
  if ((int )bio->bi_vcnt > i) {
#line 2345
    goto ldv_43545;
  } else {

  }

#line 2349
  return (1);
}
}
#line 2352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2356
  bvec = bio->bi_io_vec;
#line 2356
  i = 0;
#line 2356
  goto ldv_43555;
  ldv_43554: 
#line 2357
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2357
  if (tmp == 0) {
#line 2359
    return (0);
  } else {

  }
#line 2356
  bvec = bvec + 1;
#line 2356
  i = i + 1;
  ldv_43555: ;
#line 2356
  if ((int )bio->bi_vcnt > i) {
#line 2357
    goto ldv_43554;
  } else {

  }

#line 2362
  return (1);
}
}
#line 2365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 2367
  page = e->pages;
#line 2368
  len = e->size;
#line 2369
  goto ldv_43569;
  ldv_43568: 
#line 2370
  __min1 = len;
#line 2370
  __min2 = 4096U;
#line 2370
  l = __min1 < __min2 ? __min1 : __min2;
#line 2371
  tmp = _drbd_send_page(mdev, page, 0, (size_t )l);
#line 2371
  if (tmp == 0) {
#line 2372
    return (0);
  } else {

  }
#line 2373
  len = len - l;
#line 2369
  page = page_chain_next(page);
  ldv_43569: ;
#line 2369
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2369
    tmp___0 = page_chain_next(page);
#line 2369
    __builtin_prefetch((void const   *)tmp___0);
#line 2369
    if (1 != 0) {
#line 2370
      goto ldv_43568;
    } else {
#line 2372
      goto ldv_43570;
    }
  } else {

  }
  ldv_43570: ;
#line 2375
  return (1);
}
}
#line 2378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void consider_delay_probes(struct drbd_conf *mdev ) 
{ 


  {
#line 2380
  if ((unsigned int )*((unsigned short *)mdev + 982UL) != 256U || mdev->agreed_pro_version <= 92) {
#line 2381
    return;
  } else {

  }
#line 2383
  if (mdev->dp_volume_last + (unsigned int )(mdev->sync_conf.dp_volume * 2) < mdev->send_cnt) {
#line 2384
    drbd_send_delay_probes(mdev);
  } else {

  }
#line 2385
  return;
}
}
#line 2387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_delay_probes(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 2389
  if (cancel == 0 && (unsigned int )*((unsigned short *)mdev + 982UL) == 256U) {
#line 2390
    drbd_send_delay_probes(mdev);
  } else {

  }
#line 2392
  return (1);
}
}
#line 2395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void delay_probe_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 2397
  mdev = (struct drbd_conf *)data;
#line 2399
  tmp = list_empty((struct list_head  const  *)(& mdev->delay_probe_work.list));
#line 2399
  if (tmp != 0) {
#line 2400
    drbd_queue_work(& mdev->data.work, & mdev->delay_probe_work);
  } else {

  }
#line 2401
  return;
}
}
#line 2406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2408
  ok = 1;
#line 2410
  dp_flags = 0U;
#line 2414
  tmp = drbd_get_data_sock(mdev);
#line 2414
  if (tmp == 0) {
#line 2415
    return (0);
  } else {

  }
#line 2417
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2417
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2417
    dgs = (int )tmp___0;
  } else {
#line 2417
    dgs = 0;
  }
#line 2420
  p.head.magic = 1728214147U;
#line 2421
  p.head.command = 0U;
#line 2422
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2422
  p.head.length = tmp___1;
#line 2425
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2425
  p.sector = tmp___2;
#line 2426
  p.block_id = (u64 )req;
#line 2427
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2427
  req->seq_num = tmp___3;
#line 2427
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2427
  p.seq_num = tmp___4;
#line 2429
  dp_flags = 0U;
#line 2434
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2434
  if ((int )tmp___7) {
#line 2435
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2435
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2435
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2438
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2438
  if ((int )tmp___8) {
#line 2439
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2442
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2442
  if ((int )tmp___9) {
#line 2443
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2444
  if ((int )mdev->state.ldv_33296.conn > 15 && (int )mdev->state.ldv_33296.conn <= 21) {
#line 2446
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2448
  tmp___10 = __fswab32(dp_flags);
#line 2448
  p.dp_flags = tmp___10;
#line 2449
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2450
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2450
  ok = tmp___11 == 32;
#line 2452
  if (ok != 0 && dgs != 0) {
#line 2453
    dgb = mdev->int_dig_out;
#line 2454
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2455
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2457
  if (ok != 0) {
#line 2458
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2459
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2461
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2464
  drbd_put_data_sock(mdev);
#line 2466
  if (ok != 0) {
#line 2467
    consider_delay_probes(mdev);
  } else {

  }
#line 2469
  return (ok);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2484
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2484
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2484
    dgs = (int )tmp;
  } else {
#line 2484
    dgs = 0;
  }
#line 2487
  p.head.magic = 1728214147U;
#line 2488
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2488
  p.head.command = tmp___0;
#line 2489
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2489
  p.head.length = tmp___1;
#line 2492
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2492
  p.sector = tmp___2;
#line 2493
  p.block_id = e->block_id;
#line 2500
  tmp___3 = drbd_get_data_sock(mdev);
#line 2500
  if (tmp___3 == 0) {
#line 2501
    return (0);
  } else {

  }
#line 2503
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2503
  ok = tmp___4 == 32;
#line 2505
  if (ok != 0 && dgs != 0) {
#line 2506
    dgb = mdev->int_dig_out;
#line 2507
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2508
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2510
  if (ok != 0) {
#line 2511
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2513
  drbd_put_data_sock(mdev);
#line 2515
  if (ok != 0) {
#line 2516
    consider_delay_probes(mdev);
  } else {

  }
#line 2518
  return (ok);
}
}
#line 2537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2542
  sent = 0;
#line 2544
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2545
    return (-1000);
  } else {

  }
#line 2549
  iov.iov_base = buf;
#line 2550
  iov.iov_len = size;
#line 2552
  msg.msg_name = 0;
#line 2553
  msg.msg_namelen = 0;
#line 2554
  msg.msg_control = 0;
#line 2555
  msg.msg_controllen = 0UL;
#line 2556
  msg.msg_flags = msg_flags | 16384U;
#line 2558
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2559
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2560
    drbd_update_congested(mdev);
  } else {

  }
  ldv_43614: 
#line 2572
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2573
  if (rv == -11) {
#line 2574
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2574
    if (tmp != 0) {
#line 2575
      goto ldv_43612;
    } else {
#line 2577
      goto ldv_43613;
    }
  } else {

  }
#line 2579
  if (rv == 0) {
#line 2579
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2579
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2579
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2579);
  } else {

  }
#line 2580
  if (rv == -4) {
#line 2581
    tmp___2 = get_current();
#line 2581
    flush_signals(tmp___2);
#line 2582
    rv = 0;
  } else {

  }
#line 2584
  if (rv < 0) {
#line 2585
    goto ldv_43612;
  } else {

  }
#line 2586
  sent = sent + rv;
#line 2587
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2588
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_43613: ;
#line 2589
  if ((size_t )sent < size) {
#line 2590
    goto ldv_43614;
  } else {

  }
  ldv_43612: ;
#line 2591
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2592
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2594
  if (rv <= 0) {
#line 2595
    if (rv != -11) {
#line 2596
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2596
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2596
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2599
      val.i = 0U;
#line 2599
      val.ldv_33296.conn = 4U;
#line 2599
      mask.i = 0U;
#line 2599
      mask.ldv_33296.conn = 31U;
#line 2599
      drbd_force_state(mdev, mask, val);
    } else {
#line 2601
      val___0.i = 0U;
#line 2601
      val___0.ldv_33296.conn = 3U;
#line 2601
      mask___0.i = 0U;
#line 2601
      mask___0.ldv_33296.conn = 31U;
#line 2601
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2604
  return (sent);
}
}
#line 2607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2609
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2611
  rv = 0;
#line 2613
  tmp = spinlock_check(& mdev->req_lock);
#line 2613
  flags = _raw_spin_lock_irqsave(tmp);
#line 2617
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) != 1U) {
#line 2618
    if ((mode & 2U) != 0U) {
#line 2619
      rv = -30;
    } else
#line 2620
    if (allow_oos == 0) {
#line 2621
      rv = -124;
    } else {

    }
  } else {

  }
#line 2624
  if (rv == 0) {
#line 2625
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2626
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2628
  return (rv);
}
}
#line 2631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2633
  mdev = (struct drbd_conf *)gd->private_data;
#line 2634
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2635
  return (0);
}
}
#line 2638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2640
  mdev = (struct drbd_conf *)q->queuedata;
#line 2643
  spin_lock_irq(q->queue_lock);
#line 2644
  blk_remove_plug(q);
#line 2645
  spin_unlock_irq(q->queue_lock);
#line 2648
  spin_lock_irq(& mdev->req_lock);
#line 2649
  if ((int )mdev->state.ldv_33296.pdsk > 3 && (int )mdev->state.ldv_33296.conn > 9) {
#line 2650
    if ((unsigned int )*((unsigned char *)mdev + 1964UL) != 1U) {
#line 2650
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2650
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2650
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             2650);
    } else {

    }
#line 2651
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2651
    if (tmp___2 != 0) {
#line 2656
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2656
      if (tmp___1 != 0) {
#line 2657
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2661
  spin_unlock_irq(& mdev->req_lock);
#line 2663
  if ((int )mdev->state.ldv_33296.disk > 3) {
#line 2664
    drbd_kick_lo(mdev);
  } else {

  }
#line 2665
  return;
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2669
  mdev->sync_conf.after = -1;
#line 2670
  mdev->sync_conf.rate = 250;
#line 2671
  mdev->sync_conf.al_extents = 127;
#line 2672
  __constr_expr_0.ldv_33296.role = 2U;
#line 2672
  __constr_expr_0.ldv_33296.peer = 0U;
#line 2672
  __constr_expr_0.ldv_33296.conn = 0U;
#line 2672
  __constr_expr_0.ldv_33296.disk = 0U;
#line 2672
  __constr_expr_0.ldv_33296.pdsk = 6U;
#line 2672
  __constr_expr_0.ldv_33296.susp = 0U;
#line 2672
  __constr_expr_0.ldv_33296.aftr_isp = (unsigned char)0;
#line 2672
  __constr_expr_0.ldv_33296.peer_isp = (unsigned char)0;
#line 2672
  __constr_expr_0.ldv_33296.user_isp = (unsigned char)0;
#line 2672
  __constr_expr_0.ldv_33296._pad = (unsigned short)0;
#line 2672
  mdev->state = __constr_expr_0;
#line 2673
  return;
}
}
#line 2682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2687
  drbd_set_defaults(mdev);
#line 2692
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2694
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2695
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2696
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2697
  atomic_set(& mdev->unacked_cnt, 0);
#line 2698
  atomic_set(& mdev->local_cnt, 0);
#line 2699
  atomic_set(& mdev->net_cnt, 0);
#line 2700
  atomic_set(& mdev->packet_seq, 0);
#line 2701
  atomic_set(& mdev->pp_in_use, 0);
#line 2703
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2704
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2705
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2706
  sema_init(& mdev->data.work.s, 0);
#line 2707
  sema_init(& mdev->meta.work.s, 0);
#line 2708
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2710
  spinlock_check(& mdev->data.work.q_lock);
#line 2710
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5735.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2711
  spinlock_check(& mdev->meta.work.q_lock);
#line 2711
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5735.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2713
  spinlock_check(& mdev->al_lock);
#line 2713
  __raw_spin_lock_init(& mdev->al_lock.ldv_5735.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2714
  spinlock_check(& mdev->req_lock);
#line 2714
  __raw_spin_lock_init(& mdev->req_lock.ldv_5735.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2715
  spinlock_check(& mdev->peer_seq_lock);
#line 2715
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5735.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2716
  spinlock_check(& mdev->epoch_lock);
#line 2716
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5735.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2718
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2719
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2720
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2721
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2722
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2723
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2724
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2725
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2726
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2727
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2728
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2729
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2730
  INIT_LIST_HEAD(& mdev->delay_probes);
#line 2731
  INIT_LIST_HEAD(& mdev->delay_probe_work.list);
#line 2733
  mdev->resync_work.cb = & w_resync_inactive;
#line 2734
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2735
  mdev->md_sync_work.cb = & w_md_sync;
#line 2736
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2737
  mdev->delay_probe_work.cb = & w_delay_probes;
#line 2738
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2739
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2740
  init_timer_key(& mdev->delay_probe_timer, "&mdev->delay_probe_timer", & __key___11);
#line 2741
  mdev->resync_timer.function = & resync_timer_fn;
#line 2742
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2743
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2744
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2745
  mdev->delay_probe_timer.function = & delay_probe_timer_fn;
#line 2746
  mdev->delay_probe_timer.data = (unsigned long )mdev;
#line 2749
  __init_waitqueue_head(& mdev->misc_wait, & __key___12);
#line 2750
  __init_waitqueue_head(& mdev->state_wait, & __key___13);
#line 2751
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2752
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2753
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2755
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2756
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2757
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2759
  mdev->agreed_pro_version = 93;
#line 2760
  mdev->write_ordering = WO_bio_barrier;
#line 2761
  mdev->resync_wenr = 4294967295U;
#line 2762
  return;
}
}
#line 2764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2766
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2767
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2767
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2767
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2771
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2771
  if (tmp___4 != 0) {
#line 2772
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2772
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2772
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2772
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2773
  tmp___15 = 0UL;
#line 2773
  mdev->rs_mark_time = tmp___15;
#line 2773
  tmp___14 = tmp___15;
#line 2773
  mdev->rs_mark_left = tmp___14;
#line 2773
  tmp___13 = tmp___14;
#line 2773
  mdev->rs_failed = tmp___13;
#line 2773
  tmp___12 = tmp___13;
#line 2773
  mdev->rs_total = tmp___12;
#line 2773
  tmp___11 = tmp___12;
#line 2773
  mdev->rs_start = tmp___11;
#line 2773
  tmp___10 = tmp___11;
#line 2773
  mdev->p_size = tmp___10;
#line 2773
  tmp___9 = (unsigned int )tmp___10;
#line 2773
  mdev->writ_cnt = tmp___9;
#line 2773
  tmp___8 = tmp___9;
#line 2773
  mdev->send_cnt = tmp___8;
#line 2773
  tmp___7 = tmp___8;
#line 2773
  mdev->recv_cnt = tmp___7;
#line 2773
  tmp___6 = tmp___7;
#line 2773
  mdev->read_cnt = tmp___6;
#line 2773
  tmp___5 = tmp___6;
#line 2773
  mdev->bm_writ_cnt = tmp___5;
#line 2773
  mdev->al_writ_cnt = tmp___5;
#line 2785
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2785
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2785
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2785
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2785);
  } else {

  }
#line 2787
  drbd_set_my_capacity(mdev, 0UL);
#line 2788
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2790
    drbd_bm_resize(mdev, 0UL, 1);
#line 2791
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2794
  drbd_free_resources(mdev);
#line 2800
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2800
  if (tmp___20 == 0) {
#line 2800
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2800
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2800
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2800);
  } else {

  }
#line 2801
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2801
  if (tmp___23 == 0) {
#line 2801
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2801
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2801
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2801);
  } else {

  }
#line 2802
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2802
  if (tmp___26 == 0) {
#line 2802
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2802
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2802
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2802);
  } else {

  }
#line 2803
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2803
  if (tmp___29 == 0) {
#line 2803
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2803
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2803
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2803);
  } else {

  }
#line 2804
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2804
  if (tmp___32 == 0) {
#line 2804
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2804
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2804
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2804);
  } else {

  }
#line 2805
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2805
  if (tmp___35 == 0) {
#line 2805
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2805
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2805
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2805);
  } else {

  }
#line 2806
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2806
  if (tmp___38 == 0) {
#line 2806
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2806
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2806
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2806);
  } else {

  }
#line 2807
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2807
  if (tmp___41 == 0) {
#line 2807
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2807
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2807
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2807);
  } else {

  }
#line 2808
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2808
  if (tmp___44 == 0) {
#line 2808
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2808
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2808
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2808);
  } else {

  }
#line 2809
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2809
  if (tmp___47 == 0) {
#line 2809
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2809
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2809
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2809);
  } else {

  }
#line 2810
  return;
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2818
  goto ldv_43675;
  ldv_43674: 
#line 2819
  page = drbd_pp_pool;
#line 2820
  drbd_pp_pool = (struct page *)page->ldv_12001.ldv_11998.private;
#line 2821
  __free_pages(page, 0U);
#line 2822
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_43675: ;
#line 2818
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2819
    goto ldv_43674;
  } else {

  }

#line 2827
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2828
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2829
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2830
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2831
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2832
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2833
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2834
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2835
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2836
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2837
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2838
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2840
  drbd_ee_mempool = 0;
#line 2841
  drbd_request_mempool = 0;
#line 2842
  drbd_ee_cache = 0;
#line 2843
  drbd_request_cache = 0;
#line 2844
  drbd_bm_ext_cache = 0;
#line 2845
  drbd_al_ext_cache = 0;
#line 2847
  return;
}
}
#line 2850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2853
  number = (int const   )(minor_count * 8U);
#line 2857
  drbd_request_mempool = 0;
#line 2858
  drbd_ee_cache = 0;
#line 2859
  drbd_request_cache = 0;
#line 2860
  drbd_bm_ext_cache = 0;
#line 2861
  drbd_al_ext_cache = 0;
#line 2862
  drbd_pp_pool = 0;
#line 2865
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2867
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2868
    goto Enomem;
  } else {

  }
#line 2870
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2872
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2873
    goto Enomem;
  } else {

  }
#line 2875
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2877
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2878
    goto Enomem;
  } else {

  }
#line 2880
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2882
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2883
    goto Enomem;
  } else {

  }
#line 2886
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2888
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2889
    goto Enomem;
  } else {

  }
#line 2891
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2893
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2894
    goto Enomem;
  } else {

  }
#line 2897
  spinlock_check(& drbd_pp_lock);
#line 2897
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5735.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2899
  i = 0;
#line 2899
  goto ldv_43686;
  ldv_43685: 
#line 2900
  page = alloc_pages(131282U, 0U);
#line 2901
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2902
    goto Enomem;
  } else {

  }
#line 2903
  page->ldv_12001.ldv_11998.private = (unsigned long )drbd_pp_pool;
#line 2904
  drbd_pp_pool = page;
#line 2899
  i = i + 1;
  ldv_43686: ;
#line 2899
  if (i < number) {
#line 2900
    goto ldv_43685;
  } else {

  }
#line 2906
  drbd_pp_vacant = number;
#line 2908
  return (0);
  Enomem: 
#line 2911
  drbd_destroy_mempools();
#line 2912
  return (-12);
}
}
#line 2915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2922
  return (0);
}
}
#line 2925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2933
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2934
  if (rr != 0) {
#line 2935
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2935
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2935
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2937
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2938
  if (rr != 0) {
#line 2939
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2939
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2939
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 2941
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2942
  if (rr != 0) {
#line 2943
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2943
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2943
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 2945
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2946
  if (rr != 0) {
#line 2947
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2947
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2947
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 2949
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2950
  if (rr != 0) {
#line 2951
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2951
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2951
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 2952
  return;
}
}
#line 2956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 2958
  tmp = minor_to_mdev(minor);
#line 2958
  mdev = tmp;
#line 2960
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2961
    return;
  } else {

  }
#line 2964
  if (mdev->open_cnt != 0) {
#line 2965
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2965
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2965
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2966);
  } else {

  }
#line 2968
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2968
  _b = tmp___4 == 0;
#line 2968
  if (_b != 0) {
#line 2968
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2968
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2968
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2968);
  } else {

  }
#line 2968
  if (_b != 0) {
#line 2970
    lp = mdev->data.work.q.next;
#line 2970
    goto ldv_43707;
    ldv_43706: 
#line 2971
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2971
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2971
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 2970
    lp = lp->next;
    ldv_43707: 
#line 2970
    __builtin_prefetch((void const   *)lp->next);
#line 2970
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2971
      goto ldv_43706;
    } else {

    }

  } else {

  }
#line 2976
  del_gendisk(mdev->vdisk);
#line 2981
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2982
    bdput(mdev->this_bdev);
  } else {

  }
#line 2984
  drbd_free_resources(mdev);
#line 2986
  drbd_release_ee_lists(mdev);
#line 2989
  kfree((void const   *)mdev->ee_hash);
#line 2995
  lc_destroy(mdev->act_log);
#line 2996
  lc_destroy(mdev->resync);
#line 2998
  kfree((void const   *)mdev->p_uuid);
#line 3001
  kfree((void const   *)mdev->int_dig_out);
#line 3002
  kfree((void const   *)mdev->int_dig_in);
#line 3003
  kfree((void const   *)mdev->int_dig_vv);
#line 3008
  drbd_free_mdev(mdev);
#line 3009
  return;
}
}
#line 3011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3015
  unregister_reboot_notifier(& drbd_notifier);
#line 3017
  drbd_nl_cleanup();
#line 3019
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3020
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3021
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3022
    i = minor_count;
#line 3023
    goto ldv_43714;
    ldv_43713: 
#line 3024
    drbd_delete_device(i);
    ldv_43714: 
#line 3023
    tmp = i;
#line 3023
    i = i - 1U;
#line 3023
    if (tmp != 0U) {
#line 3024
      goto ldv_43713;
    } else {

    }
#line 3025
    drbd_destroy_mempools();
  } else {

  }
#line 3028
  kfree((void const   *)minor_table);
#line 3030
  unregister_blkdev(147U, "drbd");
#line 3032
  printk("<6>drbd: module cleanup done.\n");
#line 3033
  return;
}
}
#line 3042 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3044
  mdev = (struct drbd_conf *)congested_data;
#line 3046
  reason = 45;
#line 3047
  r = 0;
#line 3049
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3049
  if (tmp == 0) {
#line 3051
    r = bdi_bits;
#line 3052
    reason = 100;
#line 3053
    goto out;
  } else {

  }
#line 3056
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3056
  if (tmp___0 != 0) {
#line 3057
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3058
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3059
    put_ldev(mdev);
#line 3060
    if (r != 0) {
#line 3061
      reason = 98;
    } else {

    }
  } else {

  }
#line 3064
  if ((bdi_bits & 4) != 0) {
#line 3064
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3064
    if (tmp___1 != 0) {
#line 3065
      r = r | 4;
#line 3066
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3070
  mdev->congestion_reason = reason;
#line 3071
  return (r);
}
}
#line 3074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3081
  tmp = kzalloc___1(4160UL, 208U);
#line 3081
  mdev = (struct drbd_conf *)tmp;
#line 3082
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3083
    return (0);
  } else {

  }
#line 3084
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3084
  if (tmp___0) {
#line 3084
    tmp___1 = 0;
  } else {
#line 3084
    tmp___1 = 1;
  }
#line 3084
  if (tmp___1) {
#line 3085
    goto out_no_cpumask;
  } else {

  }
#line 3087
  mdev->minor = minor;
#line 3089
  drbd_init_set_defaults(mdev);
#line 3091
  q = blk_alloc_queue(208U);
#line 3092
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3093
    goto out_no_q;
  } else {

  }
#line 3094
  mdev->rq_queue = q;
#line 3095
  q->queuedata = (void *)mdev;
#line 3097
  disk = alloc_disk(1);
#line 3098
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3099
    goto out_no_disk;
  } else {

  }
#line 3100
  mdev->vdisk = disk;
#line 3102
  set_disk_ro(disk, 1);
#line 3104
  disk->queue = q;
#line 3105
  disk->major = 147;
#line 3106
  disk->first_minor = (int )minor;
#line 3107
  disk->fops = & drbd_ops;
#line 3108
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3109
  disk->private_data = (void *)mdev;
#line 3111
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3113
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3115
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3116
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3118
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3119
  blk_queue_max_segment_size(q, 32768U);
#line 3120
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3121
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3122
  q->queue_lock = & mdev->req_lock;
#line 3124
  q->unplug_fn = & drbd_unplug_fn;
#line 3126
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3127
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3128
    goto out_no_io_page;
  } else {

  }
#line 3130
  tmp___2 = drbd_bm_init(mdev);
#line 3130
  if (tmp___2 != 0) {
#line 3131
    goto out_no_bitmap;
  } else {

  }
#line 3133
  tmp___3 = tl_init(mdev);
#line 3133
  if (tmp___3 == 0) {
#line 3134
    goto out_no_tl;
  } else {

  }
#line 3136
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3136
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3137
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3138
    goto out_no_app_reads;
  } else {

  }
#line 3140
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3140
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3141
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3142
    goto out_no_epoch;
  } else {

  }
#line 3144
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3145
  mdev->epochs = 1U;
#line 3147
  return (mdev);
  out_no_epoch: 
#line 3152
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3154
  tl_cleanup(mdev);
  out_no_tl: 
#line 3156
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3158
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3160
  put_disk(disk);
  out_no_disk: 
#line 3162
  blk_cleanup_queue(q);
  out_no_q: 
#line 3164
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3166
  kfree((void const   *)mdev);
#line 3167
  return (0);
}
}
#line 3172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3174
  kfree((void const   *)mdev->current_epoch);
#line 3175
  kfree((void const   *)mdev->app_reads_hash);
#line 3176
  tl_cleanup(mdev);
#line 3177
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3178
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3179
  __free_pages(mdev->md_io_page, 0U);
#line 3180
  put_disk(mdev->vdisk);
#line 3181
  blk_cleanup_queue(mdev->rq_queue);
#line 3182
  free_cpumask_var(mdev->cpu_mask);
#line 3183
  kfree((void const   *)mdev);
#line 3184
  return;
}
}
#line 3187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3198
  if (minor_count == 0U || minor_count > 255U) {
#line 3199
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3202
    return (-22);
  } else {

  }
#line 3208
  err = drbd_nl_init();
#line 3209
  if (err != 0) {
#line 3210
    return (err);
  } else {

  }
#line 3212
  err = register_blkdev(147U, "drbd");
#line 3213
  if (err != 0) {
#line 3214
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3217
    return (err);
  } else {

  }
#line 3220
  register_reboot_notifier(& drbd_notifier);
#line 3225
  err = -12;
#line 3227
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3229
  drbd_proc = 0;
#line 3230
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3230
  minor_table = (struct drbd_conf **)tmp;
#line 3232
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3233
    goto Enomem;
  } else {

  }
#line 3235
  err = drbd_create_mempools();
#line 3236
  if (err != 0) {
#line 3237
    goto Enomem;
  } else {

  }
#line 3239
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3240
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3241
    printk("<3>drbd: unable to register proc file\n");
#line 3242
    goto Enomem;
  } else {

  }
#line 3245
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3247
  printk("<6>drbd: initialized. Version: 8.3.7 (api:%d/proto:%d-%d)\n", 88, 86, 93);
#line 3250
  tmp___0 = drbd_buildtag();
#line 3250
  printk("<6>drbd: %s\n", tmp___0);
#line 3251
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3253
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3255
  return (0);
  Enomem: 
#line 3258
  drbd_cleanup();
#line 3259
  if (err == -12) {
#line 3261
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3263
    printk("<3>drbd: initialization failure\n");
  }
#line 3264
  return (err);
}
}
#line 3267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3269
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3270
    return;
  } else {

  }
#line 3272
  bd_release(ldev->backing_bdev);
#line 3273
  bd_release(ldev->md_bdev);
#line 3275
  fput(ldev->lo_file);
#line 3276
  fput(ldev->md_file);
#line 3278
  kfree((void const   *)ldev);
#line 3279
  return;
}
}
#line 3281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3283
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3284
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3285
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3286
    sock_release(mdev->data.socket);
#line 3287
    mdev->data.socket = 0;
#line 3288
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3290
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3291
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3292
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3293
    sock_release(mdev->meta.socket);
#line 3294
    mdev->meta.socket = 0;
#line 3295
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3297
  return;
}
}
#line 3300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3302
  crypto_free_hash(mdev->csums_tfm);
#line 3303
  mdev->csums_tfm = 0;
#line 3304
  crypto_free_hash(mdev->verify_tfm);
#line 3305
  mdev->verify_tfm = 0;
#line 3306
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3307
  mdev->cram_hmac_tfm = 0;
#line 3308
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3309
  mdev->integrity_w_tfm = 0;
#line 3310
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3311
  mdev->integrity_r_tfm = 0;
#line 3313
  drbd_free_sock(mdev);
#line 3315
  drbd_free_bc(mdev->ldev);
#line 3315
  mdev->ldev = 0;
#line 3316
  return;
}
}
#line 3343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3349
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3349
  if (tmp == 0) {
#line 3350
    return;
  } else {

  }
#line 3351
  del_timer(& mdev->md_sync_timer);
#line 3355
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3355
  if (tmp___0 == 0) {
#line 3356
    return;
  } else {

  }
#line 3358
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3359
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3359
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3360
  memset((void *)buffer, 0, 512UL);
#line 3362
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3362
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3362
  buffer->la_size = tmp___3;
#line 3363
  i = 0;
#line 3363
  goto ldv_43778;
  ldv_43777: 
#line 3364
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3364
  buffer->uuid[i] = tmp___4;
#line 3363
  i = i + 1;
  ldv_43778: ;
#line 3363
  if (i <= 3) {
#line 3364
    goto ldv_43777;
  } else {

  }
#line 3365
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3365
  buffer->flags = tmp___5;
#line 3366
  buffer->magic = 1795323011U;
#line 3368
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3368
  buffer->md_size_sect = tmp___6;
#line 3369
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3369
  buffer->al_offset = tmp___7;
#line 3370
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3370
  buffer->al_nr_extents = tmp___8;
#line 3371
  buffer->bm_bytes_per_bit = 1048576U;
#line 3372
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3372
  buffer->device_uuid = tmp___9;
#line 3374
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3374
  buffer->bm_offset = tmp___10;
#line 3376
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3376
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3376
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3376
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3376
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3376);
  } else {

  }
#line 3377
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3379
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3379
  if (tmp___16 != 0) {
#line 3380
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3383
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3383
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3383
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3385
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  }
#line 3390
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3390
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3392
  mutex_unlock(& mdev->md_io_mutex);
#line 3393
  put_ldev(mdev);
#line 3394
  return;
}
}
#line 3404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3407
  rv = 101;
#line 3409
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3409
  if (tmp == 0) {
#line 3410
    return (118);
  } else {

  }
#line 3412
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3413
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3413
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3415
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3415
  if (tmp___3 == 0) {
#line 3418
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3418
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3418
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3419
    rv = 118;
#line 3420
    goto err;
  } else {

  }
#line 3423
  tmp___6 = __fswab32(buffer->magic);
#line 3423
  if (tmp___6 != 2205418091U) {
#line 3424
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3425
    rv = 119;
#line 3426
    goto err;
  } else {

  }
#line 3428
  tmp___10 = __fswab32(buffer->al_offset);
#line 3428
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3429
    tmp___7 = __fswab32(buffer->al_offset);
#line 3429
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3431
    rv = 119;
#line 3432
    goto err;
  } else {

  }
#line 3434
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3434
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3435
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3435
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3435
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3435
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3437
    rv = 119;
#line 3438
    goto err;
  } else {

  }
#line 3440
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3440
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3441
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3441
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3441
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3441
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3443
    rv = 119;
#line 3444
    goto err;
  } else {

  }
#line 3447
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3447
  if (tmp___22 != 4096U) {
#line 3448
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3448
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3448
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3448
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3450
    rv = 119;
#line 3451
    goto err;
  } else {

  }
#line 3454
  tmp___23 = __fswab64(buffer->la_size);
#line 3454
  bdev->md.la_size_sect = tmp___23;
#line 3455
  i = 0;
#line 3455
  goto ldv_43790;
  ldv_43789: 
#line 3456
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3456
  bdev->md.uuid[i] = tmp___24;
#line 3455
  i = i + 1;
  ldv_43790: ;
#line 3455
  if (i <= 3) {
#line 3456
    goto ldv_43789;
  } else {

  }
#line 3457
  tmp___25 = __fswab32(buffer->flags);
#line 3457
  bdev->md.flags = tmp___25;
#line 3458
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3458
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3459
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3459
  bdev->md.device_uuid = tmp___27;
#line 3461
  if (mdev->sync_conf.al_extents <= 6) {
#line 3462
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3465
  mutex_unlock(& mdev->md_io_mutex);
#line 3466
  put_ldev(mdev);
#line 3468
  return (rv);
}
}
#line 3479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3481
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3482
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3483
  return;
}
}
#line 3486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3490
  i = 2;
#line 3490
  goto ldv_43800;
  ldv_43799: 
#line 3491
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3490
  i = i + 1;
  ldv_43800: ;
#line 3490
  if (i <= 2) {
#line 3491
    goto ldv_43799;
  } else {

  }

#line 3495
  return;
}
}
#line 3494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3496
  if (idx == 0) {
#line 3497
    if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) {
#line 3498
      val = val | 1ULL;
    } else {
#line 3500
      val = val & 0xfffffffffffffffeULL;
    }
#line 3502
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3505
  (mdev->ldev)->md.uuid[idx] = val;
#line 3506
  drbd_md_mark_dirty(mdev);
#line 3507
  return;
}
}
#line 3510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3512
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3513
    drbd_uuid_move_history(mdev);
#line 3514
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3516
  _drbd_uuid_set(mdev, idx, val);
#line 3517
  return;
}
}
#line 3526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3530
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3531
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3531
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3531
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3531
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3531);
  } else {

  }
#line 3532
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3534
  get_random_bytes((void *)(& val), 8);
#line 3535
  _drbd_uuid_set(mdev, 0, val);
#line 3536
  return;
}
}
#line 3538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3540
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3541
    return;
  } else {

  }
#line 3543
  if (val == 0ULL) {
#line 3544
    drbd_uuid_move_history(mdev);
#line 3545
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3546
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3548
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3549
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3551
    (mdev->ldev)->md.uuid[1] = val;
#line 3552
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3555
  drbd_md_mark_dirty(mdev);
#line 3556
  return;
}
}
#line 3564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3566
  rv = -5;
#line 3568
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3568
  if (tmp != 0) {
#line 3569
    drbd_md_set_flag(mdev, 8);
#line 3570
    drbd_md_sync(mdev);
#line 3571
    drbd_bm_set_all(mdev);
#line 3573
    rv = drbd_bm_write(mdev);
#line 3575
    if (rv == 0) {
#line 3576
      drbd_md_clear_flag(mdev, 8);
#line 3577
      drbd_md_sync(mdev);
    } else {

    }
#line 3580
    put_ldev(mdev);
  } else {

  }
#line 3583
  return (rv);
}
}
#line 3592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3594
  rv = -5;
#line 3596
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3596
  if (tmp != 0) {
#line 3597
    drbd_bm_clear_all(mdev);
#line 3598
    rv = drbd_bm_write(mdev);
#line 3599
    put_ldev(mdev);
  } else {

  }
#line 3602
  return (rv);
}
}
#line 3605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3607
  __mptr = (struct drbd_work  const  *)w;
#line 3607
  work = (struct bm_io_work *)__mptr;
#line 3610
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3610
  if (tmp___1 != 0) {
#line 3610
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3610
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3610
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3610);
  } else {

  }
#line 3612
  drbd_bm_lock(mdev, work->why);
#line 3613
  rv = (*(work->io_fn))(mdev);
#line 3614
  drbd_bm_unlock(mdev);
#line 3616
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3617
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3619
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3620
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3622
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3623
  work->why = 0;
#line 3625
  return (1);
}
}
#line 3640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3645
  tmp___1 = get_current();
#line 3645
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3645
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3645
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3645
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3645);
  } else {

  }
#line 3647
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3647
  if (tmp___4 != 0) {
#line 3647
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3647
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3647
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3647);
  } else {

  }
#line 3648
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3648
  if (tmp___7 != 0) {
#line 3648
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3648
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3648
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3648);
  } else {

  }
#line 3649
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3649
  if (tmp___10 == 0) {
#line 3649
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3649
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3649
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3649);
  } else {

  }
#line 3650
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3651
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3651
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3651
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3654
  mdev->bm_io_work.io_fn = io_fn;
#line 3655
  mdev->bm_io_work.done = done;
#line 3656
  mdev->bm_io_work.why = why;
#line 3658
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3659
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3659
  if (tmp___16 == 0) {
#line 3660
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3660
    if (tmp___15 != 0) {
#line 3661
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3662
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3664
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3664
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3664
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3665
  return;
}
}
#line 3677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3681
  tmp___1 = get_current();
#line 3681
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3681
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3681
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3681
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3681);
  } else {

  }
#line 3683
  drbd_suspend_io(mdev);
#line 3685
  drbd_bm_lock(mdev, why);
#line 3686
  rv = (*io_fn)(mdev);
#line 3687
  drbd_bm_unlock(mdev);
#line 3689
  drbd_resume_io(mdev);
#line 3691
  return (rv);
}
}
#line 3694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3696
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3697
    drbd_md_mark_dirty(mdev);
#line 3698
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3700
  return;
}
}
#line 3702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3704
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3705
    drbd_md_mark_dirty(mdev);
#line 3706
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3708
  return;
}
}
#line 3709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3711
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3716
  mdev = (struct drbd_conf *)data;
#line 3718
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3719
  return;
}
}
#line 3721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3723
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3724
  drbd_md_sync(mdev);
#line 3726
  return (1);
}
}
#line 3746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3750
  tmp = rsp->count;
#line 3750
  rsp->count = rsp->count - 1UL;
#line 3750
  if (tmp == 0UL) {
#line 3751
    get_random_bytes((void *)(& refresh), 8);
#line 3752
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3753
    rsp->count = 10000UL;
  } else {

  }
#line 3755
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3756
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3756
  return ((unsigned long )tmp___0);
}
}
#line 3760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3761
  _faults[0] = (char *)"Meta-data write";
#line 3761
  _faults[1] = (char *)"Meta-data read";
#line 3761
  _faults[2] = (char *)"Resync write";
#line 3761
  _faults[3] = (char *)"Resync read";
#line 3761
  _faults[4] = (char *)"Data write";
#line 3761
  _faults[5] = (char *)"Data read";
#line 3761
  _faults[6] = (char *)"Data read ahead";
#line 3761
  _faults[7] = (char *)"BM allocation";
#line 3761
  _faults[8] = (char *)"EE allocation";
#line 3761
  _faults[9] = (char *)"receive data corruption";
#line 3774
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3780
  rrs.state = 0UL;
#line 3780
  rrs.count = 0UL;
#line 3782
  if (fault_devs == 0) {
#line 3782
    goto _L;
  } else {
#line 3782
    tmp = mdev_to_minor(mdev);
#line 3782
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3782
      tmp___0 = _drbd_fault_random(& rrs);
#line 3782
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3782
        tmp___1 = 1;
      } else {
#line 3782
        tmp___1 = 0;
      }
    } else {
#line 3782
      tmp___1 = 0;
    }
  }
#line 3782
  ret = (unsigned int )tmp___1;
#line 3787
  if (ret != 0U) {
#line 3788
    fault_count = fault_count + 1;
#line 3790
    tmp___5 = __printk_ratelimit("_drbd_insert_fault");
#line 3790
    if (tmp___5 != 0) {
#line 3791
      tmp___2 = _drbd_fault_str(type);
#line 3791
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3791
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3791
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3795
  return (ret);
}
}
#line 3799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3804
  buildtag[0] = '\000';
#line 3804
  tmp = 1U;
#line 3804
  while (1) {
#line 3804
    if (tmp >= 38U) {
#line 3804
      break;
    } else {

    }
#line 3804
    buildtag[tmp] = (char)0;
#line 3804
    tmp = tmp + 1U;
  }
#line 3806
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3808
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3809
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3812
      buildtag[0] = 98;
    }
  } else {

  }
#line 3815
  return ((char const   *)(& buildtag));
}
}
#line 3863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_66_p1 ;
  int res_drbd_open_66 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_67_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_74_p1 ;
  void *var_drbd_notify_sys_74_p2 ;
  unsigned long var_md_sync_timer_fn_99_p0 ;
  unsigned long var_delay_probe_timer_fn_62_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4124
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4076
  LDV_IN_INTERRUPT = 1;
#line 4085
  ldv_initialize();
#line 4112
  ldv_handler_precall();
#line 4113
  tmp = drbd_init();
#line 4113
  if (tmp != 0) {
#line 4114
    goto ldv_final;
  } else {

  }
#line 4131
  goto ldv_43963;
  ldv_43962: 
#line 4135
  tmp___0 = nondet_int();
#line 4135
  switch (tmp___0) {
  case 0: ;
#line 4140
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4166
    ldv_handler_precall();
#line 4167
    res_drbd_open_66 = drbd_open(var_group1, var_drbd_open_66_p1);
#line 4168
    ldv_check_return_value(res_drbd_open_66);
#line 4169
    if (res_drbd_open_66 != 0) {
#line 4170
      goto ldv_module_exit;
    } else {

    }
#line 4183
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4189
  goto ldv_43956;
  case 1: ;
#line 4193
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4219
    ldv_handler_precall();
#line 4220
    drbd_release(var_group2, var_drbd_release_67_p1);
#line 4233
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4239
  goto ldv_43956;
  case 2: 
#line 4269
  ldv_handler_precall();
#line 4270
  drbd_notify_sys(var_group3, var_drbd_notify_sys_74_p1, var_drbd_notify_sys_74_p2);
#line 4289
  goto ldv_43956;
  case 3: 
#line 4322
  ldv_handler_precall();
#line 4323
  md_sync_timer_fn(var_md_sync_timer_fn_99_p0);
#line 4339
  goto ldv_43956;
  case 4: 
#line 4369
  ldv_handler_precall();
#line 4370
  delay_probe_timer_fn(var_delay_probe_timer_fn_62_p0);
#line 4389
  goto ldv_43956;
  default: ;
#line 4390
  goto ldv_43956;
  }
  ldv_43956: ;
  ldv_43963: 
#line 4131
  tmp___1 = nondet_int();
#line 4131
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4133
    goto ldv_43962;
  } else {

  }

  ldv_module_exit: 
#line 4423
  ldv_handler_precall();
#line 4424
  drbd_cleanup();
  ldv_final: 
#line 4439
  ldv_check_final_state();
#line 4442
  return;
}
}
#line 4446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4451
  ldv_module_put(ldv_func_arg1);
#line 4452
  return;
}
}
#line 4454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4459
  tmp = ldv_try_module_get(module);
#line 4459
  return (tmp);
}
}
#line 4462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4467
  ldv_module_put(ldv_func_arg1);
#line 4468
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 195 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 51 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 69
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 76 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 79
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 81
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 82
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 83
    return (-12);
  } else {

  }
#line 84
  tmp = call_usermodehelper_exec(info, wait);
#line 84
  return (tmp);
}
}
#line 202 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 494 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 500
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 504
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1917 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1983
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 933 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 934
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 938
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 947
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 960
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1049 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1051
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1820
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1824
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1824
  if (tmp___1 != 0UL) {
#line 1824
    __min1 = 34359738368UL;
#line 1824
    tmp___0 = drbd_md_first_sector(bdev);
#line 1824
    __min2 = tmp___0;
#line 1824
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1824
    s = 0UL;
  }
#line 1827
  goto ldv_41693;
  case -2: 
#line 1829
  __min1___0 = 34359738368UL;
#line 1829
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1829
  __min2___0 = tmp___2;
#line 1829
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1832
  __min1___1 = s;
#line 1832
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1832
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1835
  goto ldv_41693;
  default: 
#line 1837
  __min1___2 = 8587575296UL;
#line 1837
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1837
  __min2___2 = tmp___3;
#line 1837
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41693: ;
#line 1840
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[75U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {"dp_volume", 0, 4}, 
        {"dp_interval", 0, 4}, 
        {"throttle_th", 0, 4}, 
        {"hold_off_th", 0, 4}};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 49
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 50
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_42267;
  ldv_42266: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_42264;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_42264: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_42267: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_42266;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_42328;
  ldv_42327: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_42296;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_42296;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_42296;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_42296;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_42296;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_42296;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42296;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42296;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42296;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_42296;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42296;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42296;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_42296: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_42328: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_42327;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_42431;
  ldv_42430: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_42366;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_42366;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_42366;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_42366;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_42366;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_42366;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_42366;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_42366;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_42366;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_42366;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_42366;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_42366;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_42366;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_42366;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_42366;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_42366;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_42366;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_42366;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_42366;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_42366;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42366;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_42366: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_42431: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_42430;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 71
  goto ldv_42465;
  ldv_42464: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_42460;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42460;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42460;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_42460: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_42465: 
#line 71
  tmp___3 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 71
  tag = (int )tmp___4;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_42464;
  } else {

  }

#line 71
  return (1);
}
}
#line 89
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 89 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 77
  goto ldv_42519;
  ldv_42518: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_42479;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_42479;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_42479;
  case 71: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->dp_volume = (int )tmp___4;
#line 77
  goto ldv_42479;
  case 72: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->dp_interval = (int )tmp___5;
#line 77
  goto ldv_42479;
  case 73: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->throttle_th = (int )tmp___6;
#line 77
  goto ldv_42479;
  case 74: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->hold_off_th = (int )tmp___7;
#line 77
  goto ldv_42479;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_42479;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___11,
           tmp___10, (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_42479;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___13,
           tmp___12, (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_42479;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_42479;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: Unknown tag: %d\n", tmp___15, tmp___14, tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_42479: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_42519: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 77
  tag = (int )tmp___17;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_42518;
  } else {

  }

#line 77
  return (1);
}
}
#line 133
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 133 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 131
  goto ldv_42818;
  ldv_42817: 
#line 131
  tmp = tags;
#line 131
  tags = tags + 1;
#line 131
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 131
  dlen = (int )tmp___0;
#line 131
  switch (tag & 8191) {
  case 66: 
#line 131
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 131
  goto ldv_42815;
  default: ;
#line 131
  if ((tag & 8192) != 0) {
#line 131
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 131
    return (0);
  } else {

  }
  }
  ldv_42815: 
#line 131
  tags = tags + (unsigned long )dlen;
  ldv_42818: 
#line 131
  tmp___3 = tags;
#line 131
  tags = tags + 1;
#line 131
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 131
  tag = (int )tmp___4;
#line 131
  if (tag != 0) {
#line 132
    goto ldv_42817;
  } else {

  }

#line 131
  return (1);
}
}
#line 137
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 137 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 135
  goto ldv_42835;
  ldv_42834: 
#line 135
  tmp = tags;
#line 135
  tags = tags + 1;
#line 135
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 135
  dlen = (int )tmp___0;
#line 135
  switch (tag & 8191) {
  case 63: 
#line 135
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 135
  goto ldv_42832;
  default: ;
#line 135
  if ((tag & 8192) != 0) {
#line 135
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 135
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 135
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 135
    return (0);
  } else {

  }
  }
  ldv_42832: 
#line 135
  tags = tags + (unsigned long )dlen;
  ldv_42835: 
#line 135
  tmp___3 = tags;
#line 135
  tags = tags + 1;
#line 135
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 135
  tag = (int )tmp___4;
#line 135
  if (tag != 0) {
#line 136
    goto ldv_42834;
  } else {

  }

#line 135
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_42880;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_42880;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_42880;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_42880;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42880;
  }
  ldv_42880: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_42887;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_42887;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_42887;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_42887;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42887;
  }
  ldv_42887: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_42894;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_42894;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42894;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42894;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42894;
  }
  ldv_42894: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_42901;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_42901;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_42901;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_42901;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42901;
  }
  ldv_42901: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_42908;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_42908;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42908;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42908;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42908;
  }
  ldv_42908: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_42918;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_42918;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_42918;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_42918;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42918;
  }
  ldv_42918: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_42925;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_42925;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42925;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42925;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42925;
  }
  ldv_42925: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_42935;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_42935;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_42935;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_42935;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42935;
  }
  ldv_42935: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_42942;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_42942;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_42942;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_42942;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42942;
  }
  ldv_42942: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_42949;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_42949;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42949;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42949;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42949;
  }
  ldv_42949: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_42956;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_42956;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_42956;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_42956;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42956;
  }
  ldv_42956: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_42963;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_42963;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_42963;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_42963;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42963;
  }
  ldv_42963: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_42970;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_42970;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42970;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42970;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42970;
  }
  ldv_42970: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_42977;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_42977;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_42977;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_42977;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42977;
  }
  ldv_42977: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_42984;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_42984;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_42984;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_42984;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42984;
  }
  ldv_42984: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_42991;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_42991;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42991;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42991;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42991;
  }
  ldv_42991: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_42998;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_42998;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_42998;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_42998;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42998;
  }
  ldv_42998: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_43005;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_43005;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_43005;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_43005;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43005;
  }
  ldv_43005: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_43012;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_43012;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_43012;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_43012;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43012;
  }
  ldv_43012: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_43019;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_43019;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_43019;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_43019;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43019;
  }
  ldv_43019: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_43026;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_43026;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_43026;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_43026;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43026;
  }
  ldv_43026: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_43033;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_43033;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_43033;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_43033;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43033;
  }
  ldv_43033: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_43040;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_43040;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_43040;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_43040;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43040;
  }
  ldv_43040: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_43047;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_43047;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_43047;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_43047;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43047;
  }
  ldv_43047: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_43054;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_43054;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43054;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43054;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43054;
  }
  ldv_43054: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_43061;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_43061;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_43061;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_43061;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43061;
  }
  ldv_43061: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_43068;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_43068;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_43068;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_43068;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43068;
  }
  ldv_43068: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_43075;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_43075;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_43075;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_43075;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43075;
  }
  ldv_43075: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_43082;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_43082;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_43082;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_43082;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43082;
  }
  ldv_43082: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_43107;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_43107;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_43107;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_43107;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43107;
  }
  ldv_43107: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_43114;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_43114;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43114;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43114;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43114;
  }
  ldv_43114: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_43124;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_43124;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_43124;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_43124;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43124;
  }
  ldv_43124: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_43131;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_43131;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43131;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43131;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43131;
  }
  ldv_43131: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_43141;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_43141;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_43141;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_43141;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43141;
  }
  ldv_43141: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_43148;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_43148;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43148;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43148;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43148;
  }
  ldv_43148: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_43158;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_43158;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_43158;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_43158;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43158;
  }
  ldv_43158: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_43165;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_43165;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43165;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43165;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43165;
  }
  ldv_43165: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_43175;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_43175;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_43175;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_43175;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43175;
  }
  ldv_43175: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_43182;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_43182;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43182;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43182;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43182;
  }
  ldv_43182: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_43192;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_43192;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_43192;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_43192;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43192;
  }
  ldv_43192: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_43199;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_43199;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_43199;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_43199;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43199;
  }
  ldv_43199: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_43206;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_43206;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43206;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43206;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43206;
  }
  ldv_43206: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_43213;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_43213;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_43213;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_43213;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43213;
  }
  ldv_43213: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_43220;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_43220;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_43220;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_43220;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43220;
  }
  ldv_43220: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_43227;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_43227;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43227;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43227;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43227;
  }
  ldv_43227: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_43234;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_43234;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_43234;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_43234;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43234;
  }
  ldv_43234: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_43241;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_43241;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_43241;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_43241;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43241;
  }
  ldv_43241: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_43248;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_43248;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43248;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43248;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43248;
  }
  ldv_43248: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_43255;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_43255;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_43255;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_43255;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43255;
  }
  ldv_43255: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_43262;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_43262;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_43262;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_43262;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43262;
  }
  ldv_43262: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_43269;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_43269;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43269;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43269;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43269;
  }
  ldv_43269: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_43276;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_43276;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_43276;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_43276;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43276;
  }
  ldv_43276: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_43283;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_43283;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_43283;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_43283;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43283;
  }
  ldv_43283: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_43290;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_43290;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43290;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43290;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43290;
  }
  ldv_43290: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_43297;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_43297;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_43297;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_43297;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43297;
  }
  ldv_43297: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_43304;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_43304;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_43304;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_43304;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43304;
  }
  ldv_43304: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_43311;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_43311;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43311;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43311;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43311;
  }
  ldv_43311: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_43318;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_43318;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_43318;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_43318;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43318;
  }
  ldv_43318: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_43325;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_43325;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_43325;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_43325;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43325;
  }
  ldv_43325: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_43332;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_43332;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43332;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43332;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43332;
  }
  ldv_43332: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_43339;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_43339;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_43339;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_43339;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43339;
  }
  ldv_43339: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_43346;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_43346;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_43346;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_43346;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43346;
  }
  ldv_43346: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_43353;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_43353;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43353;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43353;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43353;
  }
  ldv_43353: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_43360;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_43360;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_43360;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_43360;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43360;
  }
  ldv_43360: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_43367;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_43367;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_43367;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_43367;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43367;
  }
  ldv_43367: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_43374;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_43374;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43374;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43374;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43374;
  }
  ldv_43374: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_43381;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_43381;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_43381;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_43381;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43381;
  }
  ldv_43381: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_43388;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_43388;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_43388;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_43388;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43388;
  }
  ldv_43388: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_43395;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_43395;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43395;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43395;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43395;
  }
  ldv_43395: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_43402;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_43402;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_43402;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_43402;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43402;
  }
  ldv_43402: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_43409;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_43409;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_43409;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_43409;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43409;
  }
  ldv_43409: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_43416;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_43416;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43416;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43416;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43416;
  }
  ldv_43416: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_43423;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_43423;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_43423;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_43423;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43423;
  }
  ldv_43423: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_43430;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_43430;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_43430;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_43430;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43430;
  }
  ldv_43430: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_43437;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_43437;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43437;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43437;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43437;
  }
  ldv_43437: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_43444;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_43444;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_43444;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_43444;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43444;
  }
  ldv_43444: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_43451;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_43451;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_43451;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_43451;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43451;
  }
  ldv_43451: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_43458;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_43458;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43458;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43458;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43458;
  }
  ldv_43458: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_43465;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_43465;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_43465;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_43465;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43465;
  }
  ldv_43465: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_43472;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_43472;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_43472;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_43472;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43472;
  }
  ldv_43472: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_43479;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_43479;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43479;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43479;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43479;
  }
  ldv_43479: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_43486;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_43486;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_43486;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_43486;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43486;
  }
  ldv_43486: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_43493;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_43493;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_43493;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_43493;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43493;
  }
  ldv_43493: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_43500;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_43500;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43500;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43500;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43500;
  }
  ldv_43500: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_43507;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_43507;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_43507;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_43507;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43507;
  }
  ldv_43507: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_43514;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_43514;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_43514;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_43514;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43514;
  }
  ldv_43514: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_43521;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_43521;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_43521;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_43521;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43521;
  }
  ldv_43521: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_43528;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_43528;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_43528;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_43528;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43528;
  }
  ldv_43528: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_43535;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_43535;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_43535;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_43535;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43535;
  }
  ldv_43535: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_43542;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_43542;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_43542;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_43542;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43542;
  }
  ldv_43542: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_43549;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_43549;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_43549;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_43549;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43549;
  }
  ldv_43549: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_43556;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_43556;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_43556;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_43556;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43556;
  }
  ldv_43556: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_43563;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_43563;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_43563;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_43563;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43563;
  }
  ldv_43563: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_43570;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_43570;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_43570;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_43570;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43570;
  }
  ldv_43570: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_43577;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_43577;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_43577;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_43577;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43577;
  }
  ldv_43577: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_43584;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_43584;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_43584;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_43584;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43584;
  }
  ldv_43584: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_43591;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_43591;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_43591;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_43591;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43591;
  }
  ldv_43591: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_43598;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_43598;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_43598;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_43598;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43598;
  }
  ldv_43598: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 89
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 89 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  void *__gu_p___10 ;
  void *__gu_p___11 ;
  unsigned short *tmp___7 ;
  void *__gu_p___12 ;
  unsigned short *tmp___8 ;
  void *__gu_p___13 ;
  void *__gu_p___14 ;
  unsigned short *tmp___9 ;
  void *__gu_p___15 ;
  unsigned short *tmp___10 ;
  void *__gu_p___16 ;
  void *__gu_p___17 ;
  unsigned short *tmp___11 ;
  void *__gu_p___18 ;
  unsigned short *tmp___12 ;
  void *__gu_p___19 ;
  void *__gu_p___20 ;
  unsigned short *tmp___13 ;
  void *__gu_p___21 ;
  unsigned short *tmp___14 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___22 ;
  unsigned short *tmp___15 ;
  void *__gu_p___23 ;
  unsigned short *tmp___16 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___24 ;
  unsigned short *tmp___17 ;
  void *__gu_p___25 ;
  unsigned short *tmp___18 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___26 ;
  unsigned short *tmp___19 ;
  void *__gu_p___27 ;
  unsigned short *tmp___20 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_43681;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_43681;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_43681;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_43681;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43681;
  }
  ldv_43681: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_43688;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_43688;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_43688;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_43688;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43688;
  }
  ldv_43688: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_43695;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_43695;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_43695;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_43695;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43695;
  }
  ldv_43695: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_43702;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_43702;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_43702;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_43702;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43702;
  }
  ldv_43702: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_43709;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_43709;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_43709;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_43709;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43709;
  }
  ldv_43709: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_43716;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_43716;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_43716;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_43716;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43716;
  }
  ldv_43716: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_43723;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_43723;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_43723;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_43723;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43723;
  }
  ldv_43723: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_43730;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_43730;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_43730;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_43730;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43730;
  }
  ldv_43730: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_43737;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_43737;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_43737;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_43737;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43737;
  }
  ldv_43737: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 71U;
#line 77
  goto ldv_43744;
  case 2UL: 
#line 77
  put_unaligned_le16(71, __gu_p___8);
#line 77
  goto ldv_43744;
  case 4UL: 
#line 77
  put_unaligned_le32(71U, __gu_p___8);
#line 77
  goto ldv_43744;
  case 8UL: 
#line 77
  put_unaligned_le64(71ULL, __gu_p___8);
#line 77
  goto ldv_43744;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43744;
  }
  ldv_43744: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = 4U;
#line 77
  goto ldv_43751;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___9);
#line 77
  goto ldv_43751;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___9);
#line 77
  goto ldv_43751;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___9);
#line 77
  goto ldv_43751;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43751;
  }
  ldv_43751: 
#line 77
  __gu_p___10 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = (unsigned char )arg->dp_volume;
#line 77
  goto ldv_43758;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->dp_volume), __gu_p___10);
#line 77
  goto ldv_43758;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->dp_volume, __gu_p___10);
#line 77
  goto ldv_43758;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->dp_volume, __gu_p___10);
#line 77
  goto ldv_43758;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43758;
  }
  ldv_43758: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = 72U;
#line 77
  goto ldv_43765;
  case 2UL: 
#line 77
  put_unaligned_le16(72, __gu_p___11);
#line 77
  goto ldv_43765;
  case 4UL: 
#line 77
  put_unaligned_le32(72U, __gu_p___11);
#line 77
  goto ldv_43765;
  case 8UL: 
#line 77
  put_unaligned_le64(72ULL, __gu_p___11);
#line 77
  goto ldv_43765;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43765;
  }
  ldv_43765: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 4U;
#line 77
  goto ldv_43772;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___12);
#line 77
  goto ldv_43772;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___12);
#line 77
  goto ldv_43772;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___12);
#line 77
  goto ldv_43772;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43772;
  }
  ldv_43772: 
#line 77
  __gu_p___13 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->dp_interval;
#line 77
  goto ldv_43779;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->dp_interval), __gu_p___13);
#line 77
  goto ldv_43779;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->dp_interval, __gu_p___13);
#line 77
  goto ldv_43779;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->dp_interval, __gu_p___13);
#line 77
  goto ldv_43779;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43779;
  }
  ldv_43779: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 73U;
#line 77
  goto ldv_43786;
  case 2UL: 
#line 77
  put_unaligned_le16(73, __gu_p___14);
#line 77
  goto ldv_43786;
  case 4UL: 
#line 77
  put_unaligned_le32(73U, __gu_p___14);
#line 77
  goto ldv_43786;
  case 8UL: 
#line 77
  put_unaligned_le64(73ULL, __gu_p___14);
#line 77
  goto ldv_43786;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43786;
  }
  ldv_43786: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 4U;
#line 77
  goto ldv_43793;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___15);
#line 77
  goto ldv_43793;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___15);
#line 77
  goto ldv_43793;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___15);
#line 77
  goto ldv_43793;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43793;
  }
  ldv_43793: 
#line 77
  __gu_p___16 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = (unsigned char )arg->throttle_th;
#line 77
  goto ldv_43800;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->throttle_th), __gu_p___16);
#line 77
  goto ldv_43800;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->throttle_th, __gu_p___16);
#line 77
  goto ldv_43800;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->throttle_th, __gu_p___16);
#line 77
  goto ldv_43800;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43800;
  }
  ldv_43800: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 74U;
#line 77
  goto ldv_43807;
  case 2UL: 
#line 77
  put_unaligned_le16(74, __gu_p___17);
#line 77
  goto ldv_43807;
  case 4UL: 
#line 77
  put_unaligned_le32(74U, __gu_p___17);
#line 77
  goto ldv_43807;
  case 8UL: 
#line 77
  put_unaligned_le64(74ULL, __gu_p___17);
#line 77
  goto ldv_43807;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43807;
  }
  ldv_43807: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___18 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = 4U;
#line 77
  goto ldv_43814;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___18);
#line 77
  goto ldv_43814;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___18);
#line 77
  goto ldv_43814;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___18);
#line 77
  goto ldv_43814;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43814;
  }
  ldv_43814: 
#line 77
  __gu_p___19 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = (unsigned char )arg->hold_off_th;
#line 77
  goto ldv_43821;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->hold_off_th), __gu_p___19);
#line 77
  goto ldv_43821;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->hold_off_th, __gu_p___19);
#line 77
  goto ldv_43821;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->hold_off_th, __gu_p___19);
#line 77
  goto ldv_43821;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43821;
  }
  ldv_43821: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 52U;
#line 77
  goto ldv_43828;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___20);
#line 77
  goto ldv_43828;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___20);
#line 77
  goto ldv_43828;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___20);
#line 77
  goto ldv_43828;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43828;
  }
  ldv_43828: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___21 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_43835;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___21);
#line 77
  goto ldv_43835;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___21);
#line 77
  goto ldv_43835;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___21);
#line 77
  goto ldv_43835;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43835;
  }
  ldv_43835: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 51U;
#line 77
  goto ldv_43845;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___22);
#line 77
  goto ldv_43845;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___22);
#line 77
  goto ldv_43845;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___22);
#line 77
  goto ldv_43845;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43845;
  }
  ldv_43845: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_43852;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___23);
#line 77
  goto ldv_43852;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___23);
#line 77
  goto ldv_43852;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___23);
#line 77
  goto ldv_43852;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43852;
  }
  ldv_43852: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___24 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = 64U;
#line 77
  goto ldv_43862;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___24);
#line 77
  goto ldv_43862;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___24);
#line 77
  goto ldv_43862;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___24);
#line 77
  goto ldv_43862;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43862;
  }
  ldv_43862: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_43869;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___25);
#line 77
  goto ldv_43869;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___25);
#line 77
  goto ldv_43869;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___25);
#line 77
  goto ldv_43869;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43869;
  }
  ldv_43869: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 65U;
#line 77
  goto ldv_43879;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___26);
#line 77
  goto ldv_43879;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___26);
#line 77
  goto ldv_43879;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___26);
#line 77
  goto ldv_43879;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43879;
  }
  ldv_43879: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___27 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = 1U;
#line 77
  goto ldv_43886;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___27);
#line 77
  goto ldv_43886;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___27);
#line 77
  goto ldv_43886;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___27);
#line 77
  goto ldv_43886;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_43886;
  }
  ldv_43886: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  return (tags);
}
}
#line 101
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 99
  tmp = tags;
#line 99
  tags = tags + 1;
#line 99
  __gu_p = (void *)tmp;
#line 99
  switch (2UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p) = 33U;
#line 99
  goto ldv_43974;
  case 2UL: 
#line 99
  put_unaligned_le16(33, __gu_p);
#line 99
  goto ldv_43974;
  case 4UL: 
#line 99
  put_unaligned_le32(33U, __gu_p);
#line 99
  goto ldv_43974;
  case 8UL: 
#line 99
  put_unaligned_le64(33ULL, __gu_p);
#line 99
  goto ldv_43974;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_43974;
  }
  ldv_43974: 
#line 99
  tmp___0 = tags;
#line 99
  tags = tags + 1;
#line 99
  __gu_p___0 = (void *)tmp___0;
#line 99
  switch (2UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p___0) = 4U;
#line 99
  goto ldv_43981;
  case 2UL: 
#line 99
  put_unaligned_le16(4, __gu_p___0);
#line 99
  goto ldv_43981;
  case 4UL: 
#line 99
  put_unaligned_le32(4U, __gu_p___0);
#line 99
  goto ldv_43981;
  case 8UL: 
#line 99
  put_unaligned_le64(4ULL, __gu_p___0);
#line 99
  goto ldv_43981;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_43981;
  }
  ldv_43981: 
#line 99
  __gu_p___1 = (void *)tags;
#line 99
  switch (4UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 99
  goto ldv_43988;
  case 2UL: 
#line 99
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 99
  goto ldv_43988;
  case 4UL: 
#line 99
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 99
  goto ldv_43988;
  case 8UL: 
#line 99
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 99
  goto ldv_43988;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_43988;
  }
  ldv_43988: 
#line 99
  tags = tags + 4U;
#line 99
  return (tags);
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 139
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 143
  envp[0] = (char *)"HOME=/";
#line 143
  envp[1] = (char *)"TERM=linux";
#line 143
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 143
  envp[3] = 0;
#line 143
  envp[4] = 0;
#line 143
  envp[5] = 0;
#line 151
  argv[0] = (char *)(& usermode_helper);
#line 151
  argv[1] = cmd;
#line 151
  argv[2] = (char *)(& mb);
#line 151
  argv[3] = 0;
#line 154
  tmp = mdev_to_minor(mdev);
#line 154
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 156
  tmp___0 = get_net_conf(mdev);
#line 156
  if (tmp___0 != 0) {
#line 157
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 159
    afs = (char *)"ipv6";
#line 160
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 162
    goto ldv_44309;
    case 2: 
#line 164
    afs = (char *)"ipv4";
#line 165
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 167
    goto ldv_44309;
    default: 
#line 169
    afs = (char *)"ssocks";
#line 170
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_44309: 
#line 173
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 174
    envp[3] = (char *)(& af);
#line 175
    envp[4] = (char *)(& ad);
#line 176
    put_net_conf(mdev);
  } else {

  }
#line 179
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 181
  drbd_bcast_ev_helper(mdev, cmd);
#line 182
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 183
  if (ret != 0) {
#line 184
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 188
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 192
  if (ret < 0) {
#line 193
    ret = 0;
  } else {

  }
#line 195
  return (ret);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 205
  if (*((unsigned int *)mdev + 491UL) != 49152U) {
#line 205
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           205);
  } else {

  }
#line 207
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 207
  if (tmp___3 != 0) {
#line 208
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 209
    put_ldev(mdev);
  } else {
#line 211
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 212
    return ((enum drbd_disk_state )mdev->state.ldv_33296.pdsk);
  }
#line 215
  if ((unsigned int )fp == 2U) {
#line 216
    val.i = 0U;
#line 216
    val.ldv_33296.susp = 1U;
#line 216
    mask.i = 0U;
#line 216
    mask.ldv_33296.susp = 1U;
#line 216
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 218
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 220
  switch ((r >> 8) & 255) {
  case 3: 
#line 222
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 223
  nps = D_INCONSISTENT;
#line 224
  goto ldv_44324;
  case 4: 
#line 226
  ex_to_string = (char *)"peer was fenced";
#line 227
  nps = D_OUTDATED;
#line 228
  goto ldv_44324;
  case 5: ;
#line 230
  if ((unsigned int )*((unsigned char *)mdev + 1965UL) == 16U) {
#line 232
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 233
    nps = D_OUTDATED;
  } else {
#line 235
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 236
    nps = (enum drbd_disk_state )mdev->state.ldv_33296.pdsk;
  }
#line 238
  goto ldv_44324;
  case 6: 
#line 242
  ex_to_string = (char *)"peer is active";
#line 243
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 244
  nps = D_UNKNOWN;
#line 245
  val___0.i = 0U;
#line 245
  val___0.ldv_33296.disk = 5U;
#line 245
  mask___0.i = 0U;
#line 245
  mask___0.ldv_33296.disk = 15U;
#line 245
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 246
  goto ldv_44324;
  case 7: ;
#line 248
  if ((unsigned int )fp != 2U) {
#line 249
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 250
  ex_to_string = (char *)"peer was stonithed";
#line 251
  nps = D_OUTDATED;
#line 252
  goto ldv_44324;
  default: 
#line 255
  nps = D_UNKNOWN;
#line 256
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 257
  return (nps);
  }
  ldv_44324: 
#line 260
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 262
  return (nps);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 268
  max_tries = 4;
#line 269
  r = 0;
#line 270
  try = 0;
#line 271
  forced = 0;
#line 275
  if ((unsigned int )new_role == 1U) {
#line 276
    request_ping(mdev);
  } else {

  }
#line 278
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 280
  mask.i = 0U;
#line 280
  mask.ldv_33296.role = 3U;
#line 281
  val.i = 0U;
#line 281
  val.ldv_33296.role = (unsigned char )new_role;
#line 283
  goto ldv_44346;
  ldv_44349: 
#line 284
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 288
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 289
    val.ldv_33296.pdsk = 0U;
#line 290
    mask.ldv_33296.pdsk = 0U;
#line 291
    goto ldv_44346;
  } else {

  }
#line 294
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_33296.disk <= 7 && (int )mdev->state.ldv_33296.disk > 3)) {
#line 297
    mask.ldv_33296.disk = 15U;
#line 298
    val.ldv_33296.disk = 8U;
#line 299
    forced = 1;
#line 300
    goto ldv_44346;
  } else {

  }
#line 303
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1965UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 305
    if (*((unsigned int *)mdev + 491UL) != 49152U) {
#line 305
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
             305);
    } else {

    }
#line 306
    nps = drbd_try_outdate_peer(mdev);
#line 308
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 309
      val.ldv_33296.disk = 8U;
#line 310
      mask.ldv_33296.disk = 15U;
    } else {

    }
#line 313
    val.ldv_33296.pdsk = (unsigned char )nps;
#line 314
    mask.ldv_33296.pdsk = 15U;
#line 316
    goto ldv_44346;
  } else {

  }
#line 319
  if (r == 2) {
#line 320
    goto fail;
  } else {

  }
#line 321
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 322
    nps = drbd_try_outdate_peer(mdev);
#line 324
    if (force != 0 && (unsigned int )nps > 5U) {
#line 325
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 326
      nps = D_OUTDATED;
    } else {

    }
#line 329
    mask.ldv_33296.pdsk = 15U;
#line 330
    val.ldv_33296.pdsk = (unsigned char )nps;
#line 332
    goto ldv_44346;
  } else {

  }
#line 334
  if (r == -1) {
#line 337
    tmp___3 = get_current();
#line 337
    tmp___3->state = 1L;
#line 338
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 339
    if (try < max_tries) {
#line 340
      try = max_tries + -1;
    } else {

    }
#line 341
    goto ldv_44346;
  } else {

  }
#line 343
  if (r <= 0) {
#line 344
    r = _drbd_request_state(mdev, mask, val, 6);
#line 346
    if (r <= 0) {
#line 347
      goto fail;
    } else {

    }
  } else {

  }
#line 349
  goto ldv_44348;
  ldv_44346: 
#line 283
  tmp___4 = try;
#line 283
  try = try + 1;
#line 283
  if (tmp___4 < max_tries) {
#line 284
    goto ldv_44349;
  } else {

  }
  ldv_44348: ;
#line 352
  if (r <= 0) {
#line 353
    goto fail;
  } else {

  }
#line 355
  if (forced != 0) {
#line 356
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 359
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___7 == 0) {
#line 359
    goto ldv_44350;
  } else {

  }
#line 359
  tmp___8 = get_current();
#line 359
  __wait.flags = 0U;
#line 359
  __wait.private = (void *)tmp___8;
#line 359
  __wait.func = & autoremove_wake_function;
#line 359
  __wait.task_list.next = & __wait.task_list;
#line 359
  __wait.task_list.prev = & __wait.task_list;
  ldv_44353: 
#line 359
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 359
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___9 == 0) {
#line 359
    goto ldv_44352;
  } else {

  }
#line 359
  schedule();
#line 359
  goto ldv_44353;
  ldv_44352: 
#line 359
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44350: ;
#line 361
  if ((unsigned int )new_role == 2U) {
#line 362
    set_disk_ro(mdev->vdisk, 1);
#line 363
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 363
    if (tmp___10 != 0) {
#line 364
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 365
      put_ldev(mdev);
    } else {

    }
  } else {
#line 368
    tmp___11 = get_net_conf(mdev);
#line 368
    if (tmp___11 != 0) {
#line 369
      (mdev->net_conf)->want_lose = 0U;
#line 370
      put_net_conf(mdev);
    } else {

    }
#line 372
    set_disk_ro(mdev->vdisk, 0);
#line 373
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 373
    if (tmp___12 != 0) {
#line 374
      if ((((int )mdev->state.ldv_33296.conn <= 9 || (int )mdev->state.ldv_33296.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 377
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 379
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 380
      put_ldev(mdev);
    } else {

    }
  }
#line 384
  if ((unsigned int )new_role == 2U) {
#line 384
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 384
    if (tmp___13 != 0) {
#line 385
      drbd_al_to_on_disk_bm(mdev);
#line 386
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 389
  if ((int )mdev->state.ldv_33296.conn > 8) {
#line 391
    if (forced != 0) {
#line 392
      drbd_send_uuids(mdev);
    } else {

    }
#line 393
    drbd_send_state(mdev);
  } else {

  }
#line 396
  drbd_md_sync(mdev);
#line 398
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 400
  mutex_unlock(& mdev->state_mutex);
#line 401
  return (r);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 410
  memset((void *)(& primary_args), 0, 4UL);
#line 411
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 411
  if (tmp == 0) {
#line 412
    reply->ret_code = 126;
#line 413
    return (0);
  } else {

  }
#line 416
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 419
  return (0);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 425
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 427
  return (0);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 435
  md_size_sect = 0UL;
#line 436
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 439
  bdev->md.md_size_sect = 262144U;
#line 440
  tmp = drbd_md_ss__(mdev, bdev);
#line 440
  bdev->md.md_offset = (u64 )tmp;
#line 441
  bdev->md.al_offset = 8;
#line 442
  bdev->md.bm_offset = 72;
#line 443
  goto ldv_44371;
  case -2: 
#line 446
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 446
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 447
  bdev->md.md_offset = 0ULL;
#line 448
  bdev->md.al_offset = 8;
#line 449
  bdev->md.bm_offset = 72;
#line 450
  goto ldv_44371;
  case -1: ;
  case -3: 
#line 453
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 453
  bdev->md.md_offset = (u64 )tmp___1;
#line 455
  bdev->md.al_offset = -64;
#line 457
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 458
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 459
  md_size_sect = md_size_sect >> 15;
#line 460
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 464
  md_size_sect = md_size_sect + 72UL;
#line 466
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 468
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 469
  goto ldv_44371;
  }
  ldv_44371: ;
#line 472
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 476
  units[0] = 75;
#line 476
  units[1] = 77;
#line 476
  units[2] = 71;
#line 476
  units[3] = 84;
#line 476
  units[4] = 80;
#line 476
  units[5] = 69;
#line 477
  base = 0;
#line 478
  goto ldv_44382;
  ldv_44381: 
#line 480
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 481
  base = base + 1;
  ldv_44382: ;
#line 478
  if (size > 9999ULL) {
#line 479
    goto ldv_44381;
  } else {

  }
#line 483
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 485
  return (buf);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 503
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 504
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp == 0) {
#line 504
    goto ldv_44387;
  } else {

  }
#line 504
  tmp___0 = get_current();
#line 504
  __wait.flags = 0U;
#line 504
  __wait.private = (void *)tmp___0;
#line 504
  __wait.func = & autoremove_wake_function;
#line 504
  __wait.task_list.next = & __wait.task_list;
#line 504
  __wait.task_list.prev = & __wait.task_list;
  ldv_44390: 
#line 504
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 504
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp___1 == 0) {
#line 504
    goto ldv_44389;
  } else {

  }
#line 504
  schedule();
#line 504
  goto ldv_44390;
  ldv_44389: 
#line 504
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44387: ;
#line 507
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 509
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 510
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 511
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 528
  rv = 0;
#line 539
  drbd_suspend_io(mdev);
#line 542
  tmp = lc_try_lock(mdev->act_log);
#line 542
  if (tmp != 0) {
#line 542
    goto ldv_44406;
  } else {

  }
#line 542
  tmp___0 = get_current();
#line 542
  __wait.flags = 0U;
#line 542
  __wait.private = (void *)tmp___0;
#line 542
  __wait.func = & autoremove_wake_function;
#line 542
  __wait.task_list.next = & __wait.task_list;
#line 542
  __wait.task_list.prev = & __wait.task_list;
  ldv_44409: 
#line 542
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 542
  tmp___1 = lc_try_lock(mdev->act_log);
#line 542
  if (tmp___1 != 0) {
#line 542
    goto ldv_44408;
  } else {

  }
#line 542
  schedule();
#line 542
  goto ldv_44409;
  ldv_44408: 
#line 542
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44406: 
#line 544
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 545
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 546
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 549
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 551
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 553
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 553
  if (tmp___11 != size) {
#line 553
    goto _L;
  } else {
#line 553
    tmp___12 = drbd_bm_capacity(mdev);
#line 553
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 556
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 557
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 557
      if (tmp___7 != 0L) {
#line 559
        tmp___2 = drbd_bm_capacity(mdev);
#line 559
        size = tmp___2 >> 1;
#line 560
        if (size == 0UL) {
#line 561
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 564
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 568
        rv = dev_size_error;
      } else {

      }
#line 571
      drbd_set_my_capacity(mdev, size);
#line 572
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 573
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 573
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 576
  if ((int )rv == -1) {
#line 577
    goto out;
  } else {

  }
#line 579
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 581
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 581
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 584
  if (la_size_changed != 0 || md_moved != 0) {
#line 585
    drbd_al_shrink(mdev);
#line 586
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 589
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 589
    rv = (enum determine_dev_size )tmp___16;
#line 590
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 593
  if (size > la_size) {
#line 594
    rv = grew;
  } else {

  }
#line 595
  if (size < la_size) {
#line 596
    rv = shrunk;
  } else {

  }
  out: 
#line 598
  lc_unlock(mdev->act_log);
#line 599
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 600
  drbd_resume_io(mdev);
#line 602
  return (rv);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 608
  p_size = mdev->p_size;
#line 609
  la_size = (sector_t )bdev->md.la_size_sect;
#line 611
  u_size = (sector_t )bdev->dc.disk_size;
#line 612
  size = 0UL;
#line 614
  m_size = drbd_get_max_capacity___1(bdev);
#line 616
  if ((int )mdev->state.ldv_33296.conn <= 9 && assume_peer_has_space != 0) {
#line 617
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 617
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 617
    printk("<4>%s %s: Resize while not connected was forced by the user!\n", tmp___0,
           tmp);
#line 618
    p_size = m_size;
  } else {

  }
#line 621
  if (p_size != 0UL && m_size != 0UL) {
#line 622
    __min1 = p_size;
#line 622
    __min2 = m_size;
#line 622
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 624
  if (la_size != 0UL) {
#line 625
    size = la_size;
#line 626
    if (m_size != 0UL && m_size < size) {
#line 627
      size = m_size;
    } else {

    }
#line 628
    if (p_size != 0UL && p_size < size) {
#line 629
      size = p_size;
    } else {

    }
  } else {
#line 631
    if (m_size != 0UL) {
#line 632
      size = m_size;
    } else {

    }
#line 633
    if (p_size != 0UL) {
#line 634
      size = p_size;
    } else {

    }
  }
#line 638
  if (size == 0UL) {
#line 639
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 639
    printk("<3>%s %s: Both nodes diskless!\n", tmp___2, tmp___1);
  } else {

  }
#line 641
  if (u_size != 0UL) {
#line 642
    if (u_size > size) {
#line 643
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___4, tmp___3,
             u_size >> 1, size >> 1);
    } else {
#line 646
      size = u_size;
    }
  } else {

  }
#line 649
  return (size);
}
}
#line 660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 667
  _b = mdev->sync_conf.al_extents <= 6;
#line 667
  if (_b != 0) {
#line 667
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 667
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 667
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           667);
  } else {

  }
#line 667
  if (_b != 0) {
#line 668
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 670
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 672
    return (0);
  } else {

  }
#line 674
  in_use = 0U;
#line 675
  t = mdev->act_log;
#line 676
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 679
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 680
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 680
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 681
    return (-12);
  } else {

  }
#line 683
  spin_lock_irq(& mdev->al_lock);
#line 684
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 685
    i = 0;
#line 685
    goto ldv_44437;
    ldv_44436: 
#line 686
    e = lc_element_by_index(t, (unsigned int )i);
#line 687
    if (e->refcnt != 0U) {
#line 688
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 688
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 688
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 690
    in_use = e->refcnt + in_use;
#line 685
    i = i + 1;
    ldv_44437: ;
#line 685
    if ((unsigned int )i < t->nr_elements) {
#line 686
      goto ldv_44436;
    } else {

    }

  } else {

  }
#line 693
  if (in_use == 0U) {
#line 694
    mdev->act_log = n;
  } else {

  }
#line 695
  spin_unlock_irq(& mdev->al_lock);
#line 696
  if (in_use != 0U) {
#line 697
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 697
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 698
    lc_destroy(n);
#line 699
    return (-16);
  } else
#line 701
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 702
    lc_destroy(t);
  } else {

  }
#line 704
  drbd_md_mark_dirty(mdev);
#line 705
  return (0);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 710
  q = mdev->rq_queue;
#line 711
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 712
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 714
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) == 0U) {
#line 715
    max_seg_s = 4096U;
  } else {

  }
#line 717
  tmp = queue_max_sectors(b);
#line 717
  tmp___0 = queue_logical_block_size(b);
#line 717
  _min1 = tmp * (unsigned int )tmp___0;
#line 717
  _min2 = max_seg_s;
#line 717
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 719
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 720
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 721
  blk_queue_max_segment_size(q, max_seg_s);
#line 722
  blk_queue_logical_block_size(q, 512);
#line 723
  blk_queue_segment_boundary(q, 4095UL);
#line 724
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 726
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 727
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 727
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 729
  tmp___3 = queue_max_segment_size(q);
#line 729
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 731
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 732
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 735
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 737
  return;
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 747
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 747
  if (tmp == 0) {
#line 747
    goto ldv_44452;
  } else {

  }
#line 747
  tmp___0 = get_current();
#line 747
  __wait.flags = 0U;
#line 747
  __wait.private = (void *)tmp___0;
#line 747
  __wait.func = & autoremove_wake_function;
#line 747
  __wait.task_list.next = & __wait.task_list;
#line 747
  __wait.task_list.prev = & __wait.task_list;
  ldv_44455: 
#line 747
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 747
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 747
  if (tmp___1 == 0) {
#line 747
    goto ldv_44454;
  } else {

  }
#line 747
  schedule();
#line 747
  goto ldv_44455;
  ldv_44454: 
#line 747
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44452: 
#line 748
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 748
  if (tmp___2 == 0) {
#line 748
    goto ldv_44456;
  } else {

  }
#line 748
  tmp___3 = get_current();
#line 748
  __wait___0.flags = 0U;
#line 748
  __wait___0.private = (void *)tmp___3;
#line 748
  __wait___0.func = & autoremove_wake_function;
#line 748
  __wait___0.task_list.next = & __wait___0.task_list;
#line 748
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_44459: 
#line 748
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 748
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 748
  if (tmp___4 == 0) {
#line 748
    goto ldv_44458;
  } else {

  }
#line 748
  schedule();
#line 748
  goto ldv_44459;
  ldv_44458: 
#line 748
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_44456: 
#line 749
  drbd_thread_start(& mdev->worker);
#line 750
  return;
}
}
#line 755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 757
  spin_lock_irq(& mdev->req_lock);
#line 758
  if (((unsigned int )*((unsigned char *)mdev + 1965UL) == 0U && (unsigned int )*((unsigned short *)mdev + 982UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1964UL) == 2U) {
#line 761
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 762
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 764
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 765
  spin_unlock_irq(& mdev->req_lock);
#line 766
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 767
  return;
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned short tmp___29 ;
  struct page *page ;
  struct page *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  char const   *tmp___37 ;
  char const   *tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  int tmp___42 ;
  sector_t tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 778
  nbc = 0;
#line 780
  resync_lru = 0;
#line 783
  cp_discovered = 0;
#line 786
  drbd_reconfig_start(mdev);
#line 789
  if ((int )mdev->state.ldv_33296.disk > 0) {
#line 790
    retcode = ERR_DISK_CONFIGURED;
#line 791
    goto fail;
  } else {

  }
#line 795
  tmp = kzalloc___1(408UL, 208U);
#line 795
  nbc = (struct drbd_backing_dev *)tmp;
#line 796
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 797
    retcode = ERR_NOMEM;
#line 798
    goto fail;
  } else {

  }
#line 801
  nbc->dc.disk_size = 0ULL;
#line 802
  nbc->dc.on_io_error = 0;
#line 803
  nbc->dc.fencing = 0;
#line 804
  nbc->dc.max_bio_bvecs = 0;
#line 806
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 806
  if (tmp___0 == 0) {
#line 807
    retcode = ERR_MANDATORY_TAG;
#line 808
    goto fail;
  } else {

  }
#line 811
  if (nbc->dc.meta_dev_idx < -3) {
#line 812
    retcode = ERR_MD_IDX_INVALID;
#line 813
    goto fail;
  } else {

  }
#line 816
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 817
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 817
  if (tmp___4 != 0L) {
#line 818
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 818
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 818
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 820
    nbc->lo_file = 0;
#line 821
    retcode = ERR_OPEN_DISK;
#line 822
    goto fail;
  } else {

  }
#line 825
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 827
  if (((int )inode->i_mode & 61440) != 24576) {
#line 828
    retcode = ERR_DISK_NOT_BDEV;
#line 829
    goto fail;
  } else {

  }
#line 832
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 833
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 833
  if (tmp___8 != 0L) {
#line 834
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 834
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 836
    nbc->md_file = 0;
#line 837
    retcode = ERR_OPEN_MD_DISK;
#line 838
    goto fail;
  } else {

  }
#line 841
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 843
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 844
    retcode = ERR_MD_NOT_BDEV;
#line 845
    goto fail;
  } else {

  }
#line 848
  nbc->backing_bdev = inode->ldv_22008.i_bdev;
#line 849
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 849
  if (tmp___9 != 0) {
#line 850
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 855
    retcode = ERR_BDCLAIM_DISK;
#line 856
    goto fail;
  } else {

  }
#line 859
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 862
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 863
    retcode = ERR_NOMEM;
#line 864
    goto release_bdev_fail;
  } else {

  }
#line 874
  nbc->md_bdev = inode2->ldv_22008.i_bdev;
#line 875
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 875
  if (tmp___10 != 0) {
#line 877
    retcode = ERR_BDCLAIM_MD_DISK;
#line 878
    goto release_bdev_fail;
  } else {

  }
#line 881
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 884
    retcode = ERR_MD_IDX_INVALID;
#line 885
    goto release_bdev2_fail;
  } else {

  }
#line 889
  drbd_md_set_sector_offsets(mdev, nbc);
#line 891
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 891
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 892
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 892
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 895
    retcode = ERR_DISK_TO_SMALL;
#line 896
    goto release_bdev2_fail;
  } else {

  }
#line 899
  if (nbc->dc.meta_dev_idx < 0) {
#line 900
    max_possible_sectors = 34359738368UL;
#line 902
    min_md_device_sectors = 2048UL;
  } else {
#line 904
    max_possible_sectors = 8587575296UL;
#line 905
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 908
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 908
  if (tmp___17 < min_md_device_sectors) {
#line 909
    retcode = ERR_MD_DISK_TO_SMALL;
#line 910
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 910
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 910
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 913
    goto release_bdev2_fail;
  } else {

  }
#line 918
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 918
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 918
  if (tmp___18 < tmp___19) {
#line 920
    retcode = ERR_DISK_TO_SMALL;
#line 921
    goto release_bdev2_fail;
  } else {

  }
#line 924
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 926
  if (nbc->known_size > max_possible_sectors) {
#line 927
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 930
    if (nbc->dc.meta_dev_idx >= 0) {
#line 931
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 931
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 935
  drbd_suspend_io(mdev);
#line 937
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 937
  if (tmp___24 == 0) {
#line 937
    goto ldv_44484;
  } else {

  }
#line 937
  tmp___25 = get_current();
#line 937
  __wait.flags = 0U;
#line 937
  __wait.private = (void *)tmp___25;
#line 937
  __wait.func = & autoremove_wake_function;
#line 937
  __wait.task_list.next = & __wait.task_list;
#line 937
  __wait.task_list.prev = & __wait.task_list;
  ldv_44487: 
#line 937
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 937
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 937
  if (tmp___26 == 0) {
#line 937
    goto ldv_44486;
  } else {

  }
#line 937
  schedule();
#line 937
  goto ldv_44487;
  ldv_44486: 
#line 937
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44484: 
#line 939
  drbd_flush_workqueue(mdev);
#line 941
  val.i = 0U;
#line 941
  val.ldv_33296.disk = 1U;
#line 941
  mask.i = 0U;
#line 941
  mask.ldv_33296.disk = 15U;
#line 941
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 941
  retcode = (enum drbd_ret_codes )tmp___27;
#line 942
  drbd_resume_io(mdev);
#line 943
  if ((unsigned int )retcode == 0U) {
#line 944
    goto release_bdev2_fail;
  } else {

  }
#line 946
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 946
  if (tmp___28 == 0) {
#line 947
    goto force_diskless;
  } else {

  }
#line 949
  drbd_md_set_sector_offsets(mdev, nbc);
#line 952
  tmp___29 = bdev_logical_block_size(nbc->md_bdev);
#line 952
  logical_block_size = (int )tmp___29;
#line 953
  if (logical_block_size == 0) {
#line 954
    logical_block_size = 512;
  } else {

  }
#line 956
  if (logical_block_size != 512) {
#line 957
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 958
      tmp___30 = alloc_pages(16U, 0U);
#line 958
      page = tmp___30;
#line 959
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 960
        goto force_diskless_dec;
      } else {

      }
#line 962
      tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
      tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 962
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___32,
             tmp___31, logical_block_size, 512);
#line 964
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___34,
             tmp___33);
#line 966
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 970
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 971
    tmp___35 = drbd_bm_init(mdev);
#line 971
    if (tmp___35 != 0) {
#line 972
      retcode = ERR_NOMEM;
#line 973
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 977
  tmp___36 = drbd_md_read(mdev, nbc);
#line 977
  retcode = (enum drbd_ret_codes )tmp___36;
#line 978
  if ((unsigned int )retcode != 101U) {
#line 979
    goto force_diskless_dec;
  } else {

  }
#line 981
  if (((int )mdev->state.ldv_33296.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 984
    tmp___37 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    tmp___38 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___38,
           tmp___37, mdev->ed_uuid);
#line 986
    retcode = ERR_DATA_NOT_CURRENT;
#line 987
    goto force_diskless_dec;
  } else {

  }
#line 991
  tmp___39 = drbd_check_al_size(mdev);
#line 991
  if (tmp___39 != 0) {
#line 992
    retcode = ERR_NOMEM;
#line 993
    goto force_diskless_dec;
  } else {

  }
#line 997
  tmp___42 = drbd_md_test_flag(nbc, 1);
#line 997
  if (tmp___42 != 0) {
#line 997
    tmp___43 = drbd_new_dev_size(mdev, nbc, 0);
#line 997
    if ((unsigned long long )tmp___43 < nbc->md.la_size_sect) {
#line 999
      tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___41, tmp___40);
#line 1000
      retcode = ERR_DISK_TO_SMALL;
#line 1001
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1004
  tmp___44 = drbd_al_read_log(mdev, nbc);
#line 1004
  if (tmp___44 == 0) {
#line 1005
    retcode = ERR_IO_MD_DISK;
#line 1006
    goto force_diskless_dec;
  } else {

  }
#line 1011
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1012
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1014
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1020
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1020
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1020
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1020
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1020);
  } else {

  }
#line 1021
  mdev->ldev = nbc;
#line 1022
  mdev->resync = resync_lru;
#line 1023
  nbc = 0;
#line 1024
  resync_lru = 0;
#line 1026
  mdev->write_ordering = WO_bio_barrier;
#line 1027
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1029
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1029
  if (tmp___47 != 0) {
#line 1030
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1032
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1034
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1034
  if (tmp___48 != 0) {
#line 1035
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1036
    cp_discovered = 1;
  } else {

  }
#line 1039
  mdev->send_cnt = 0U;
#line 1040
  mdev->recv_cnt = 0U;
#line 1041
  mdev->read_cnt = 0U;
#line 1042
  mdev->writ_cnt = 0U;
#line 1044
  drbd_setup_queue_param(mdev, 32768U);
#line 1060
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1061
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) != 1U) {
#line 1061
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1061
    if (tmp___49 != 0) {
#line 1061
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1061
      if (tmp___50 == 0) {
#line 1064
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1066
  dd = drbd_determin_dev_size(mdev, 0);
#line 1067
  if ((int )dd == -1) {
#line 1068
    retcode = ERR_NOMEM_BITMAP;
#line 1069
    goto force_diskless_dec;
  } else
#line 1070
  if ((int )dd == 2) {
#line 1071
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1073
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1073
  if (tmp___55 != 0) {
#line 1074
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1074
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1076
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1076
    if (tmp___53 != 0) {
#line 1077
      retcode = ERR_IO_MD_DISK;
#line 1078
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1081
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1081
    if (tmp___54 < 0) {
#line 1082
      retcode = ERR_IO_MD_DISK;
#line 1083
      goto force_diskless_dec;
    } else {

    }
  }
#line 1087
  if (cp_discovered != 0) {
#line 1088
    drbd_al_apply_to_bm(mdev);
#line 1089
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1092
  spin_lock_irq(& mdev->req_lock);
#line 1093
  os = mdev->state;
#line 1094
  ns.i = os.i;
#line 1100
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1100
  if (tmp___57 != 0) {
#line 1101
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1101
    if (tmp___56 != 0) {
#line 1102
      ns.ldv_33296.disk = 7U;
    } else {
#line 1104
      ns.ldv_33296.disk = 5U;
    }
  } else {
#line 1106
    ns.ldv_33296.disk = 4U;
  }
#line 1109
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1109
  if (tmp___58 != 0) {
#line 1110
    ns.ldv_33296.pdsk = 5U;
  } else {

  }
#line 1112
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1114
    ns.ldv_33296.disk = 8U;
  } else {

  }
#line 1123
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 160U) {
#line 1124
    mdev->new_state_tmp.i = ns.i;
#line 1125
    ns.i = os.i;
#line 1126
    ns.ldv_33296.disk = 3U;
  } else {

  }
#line 1129
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1130
  ns = mdev->state;
#line 1131
  spin_unlock_irq(& mdev->req_lock);
#line 1133
  if (rv <= 0) {
#line 1134
    goto force_diskless_dec;
  } else {

  }
#line 1136
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U) {
#line 1137
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1139
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1141
  drbd_md_mark_dirty(mdev);
#line 1142
  drbd_md_sync(mdev);
#line 1144
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1145
  put_ldev(mdev);
#line 1146
  reply->ret_code = (int )retcode;
#line 1147
  drbd_reconfig_done(mdev);
#line 1148
  return (0);
  force_diskless_dec: 
#line 1151
  put_ldev(mdev);
  force_diskless: 
#line 1153
  val___0.i = 0U;
#line 1153
  val___0.ldv_33296.disk = 0U;
#line 1153
  mask___0.i = 0U;
#line 1153
  mask___0.ldv_33296.disk = 15U;
#line 1153
  drbd_force_state(mdev, mask___0, val___0);
#line 1154
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1156
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1157
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1159
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1160
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1162
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1163
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1164
      fput(nbc->lo_file);
    } else {

    }
#line 1165
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1166
      fput(nbc->md_file);
    } else {

    }
#line 1167
    kfree((void const   *)nbc);
  } else {

  }
#line 1169
  lc_destroy(resync_lru);
#line 1171
  reply->ret_code = (int )retcode;
#line 1172
  drbd_reconfig_done(mdev);
#line 1173
  return (0);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1179
  val.i = 0U;
#line 1179
  val.ldv_33296.disk = 0U;
#line 1179
  mask.i = 0U;
#line 1179
  mask.ldv_33296.disk = 15U;
#line 1179
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1180
  return (0);
}
}
#line 1183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1188
  new_conf = 0;
#line 1189
  tfm = 0;
#line 1190
  integrity_w_tfm = 0;
#line 1191
  integrity_r_tfm = 0;
#line 1192
  new_tl_hash = 0;
#line 1193
  new_ee_hash = 0;
#line 1196
  int_dig_out = 0;
#line 1197
  int_dig_in = 0;
#line 1198
  int_dig_vv = 0;
#line 1201
  drbd_reconfig_start(mdev);
#line 1203
  if ((int )mdev->state.ldv_33296.conn > 0) {
#line 1204
    retcode = ERR_NET_CONFIGURED;
#line 1205
    goto fail;
  } else {

  }
#line 1209
  tmp = kmalloc___4(532UL, 208U);
#line 1209
  new_conf = (struct net_conf *)tmp;
#line 1210
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1211
    retcode = ERR_NOMEM;
#line 1212
    goto fail;
  } else {

  }
#line 1215
  memset((void *)new_conf, 0, 532UL);
#line 1216
  new_conf->timeout = 60;
#line 1217
  new_conf->try_connect_int = 10;
#line 1218
  new_conf->ping_int = 10;
#line 1219
  new_conf->max_epoch_size = 2048;
#line 1220
  new_conf->max_buffers = 2048;
#line 1221
  new_conf->unplug_watermark = 128;
#line 1222
  new_conf->sndbuf_size = 0;
#line 1223
  new_conf->rcvbuf_size = 0;
#line 1224
  new_conf->ko_count = 0;
#line 1225
  new_conf->after_sb_0p = 0;
#line 1226
  new_conf->after_sb_1p = 0;
#line 1227
  new_conf->after_sb_2p = 0;
#line 1228
  new_conf->want_lose = 0U;
#line 1229
  new_conf->two_primaries = 0U;
#line 1230
  new_conf->wire_protocol = 3;
#line 1231
  new_conf->ping_timeo = 5;
#line 1232
  new_conf->rr_conflict = 0;
#line 1234
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1234
  if (tmp___0 == 0) {
#line 1235
    retcode = ERR_MANDATORY_TAG;
#line 1236
    goto fail;
  } else {

  }
#line 1239
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1241
    retcode = ERR_NOT_PROTO_C;
#line 1242
    goto fail;
  } else {

  }
#line 1245
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1246
    retcode = ERR_DISCARD;
#line 1247
    goto fail;
  } else {

  }
#line 1250
  retcode = NO_ERROR;
#line 1252
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1253
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1254
  i = 0;
#line 1254
  goto ldv_44533;
  ldv_44532: 
#line 1255
  odev = minor_to_mdev((unsigned int )i);
#line 1256
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1257
    goto ldv_44531;
  } else {

  }
#line 1258
  tmp___3 = get_net_conf(odev);
#line 1258
  if (tmp___3 != 0) {
#line 1259
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1260
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1260
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1260
      if (tmp___1 == 0) {
#line 1262
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1264
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1265
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1265
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1265
      if (tmp___2 == 0) {
#line 1267
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1269
    put_net_conf(odev);
#line 1270
    if ((unsigned int )retcode != 101U) {
#line 1271
      goto fail;
    } else {

    }
  } else {

  }
  ldv_44531: 
#line 1254
  i = i + 1;
  ldv_44533: ;
#line 1254
  if ((unsigned int )i < minor_count) {
#line 1255
    goto ldv_44532;
  } else {

  }

#line 1275
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1276
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1278
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1279
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1279
    if (tmp___4 != 0L) {
#line 1280
      tfm = 0;
#line 1281
      retcode = ERR_AUTH_ALG;
#line 1282
      goto fail;
    } else {

    }
#line 1285
    tmp___5 = crypto_hash_tfm(tfm);
#line 1285
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1285
    if (tmp___6 == 0) {
#line 1286
      retcode = ERR_AUTH_ALG_ND;
#line 1287
      goto fail;
    } else {

    }
  } else {

  }
#line 1291
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1292
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1293
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1293
    if (tmp___7 != 0L) {
#line 1294
      integrity_w_tfm = 0;
#line 1295
      retcode = ERR_INTEGRITY_ALG;
#line 1296
      goto fail;
    } else {

    }
#line 1299
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1299
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1299
    if (tmp___9 == 0) {
#line 1300
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1301
      goto fail;
    } else {

    }
#line 1304
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1305
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1305
    if (tmp___10 != 0L) {
#line 1306
      integrity_r_tfm = 0;
#line 1307
      retcode = ERR_INTEGRITY_ALG;
#line 1308
      goto fail;
    } else {

    }
  } else {

  }
#line 1312
  ns = new_conf->max_epoch_size / 8;
#line 1313
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1314
    tmp___11 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1314
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1315
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1316
      retcode = ERR_NOMEM;
#line 1317
      goto fail;
    } else {

    }
  } else {

  }
#line 1321
  ns = new_conf->max_buffers / 8;
#line 1322
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1323
    tmp___12 = kzalloc___1((unsigned long )ns * 8UL, 208U);
#line 1323
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1324
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1325
      retcode = ERR_NOMEM;
#line 1326
      goto fail;
    } else {

    }
  } else {

  }
#line 1330
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1332
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1333
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1333
    i = (int )tmp___13;
#line 1334
    int_dig_out = kmalloc___4((size_t )i, 208U);
#line 1335
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1336
      retcode = ERR_NOMEM;
#line 1337
      goto fail;
    } else {

    }
#line 1339
    int_dig_in = kmalloc___4((size_t )i, 208U);
#line 1340
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1341
      retcode = ERR_NOMEM;
#line 1342
      goto fail;
    } else {

    }
#line 1344
    int_dig_vv = kmalloc___4((size_t )i, 208U);
#line 1345
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1346
      retcode = ERR_NOMEM;
#line 1347
      goto fail;
    } else {

    }
  } else {

  }
#line 1351
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1352
    tmp___14 = drbd_bm_init(mdev);
#line 1352
    if (tmp___14 != 0) {
#line 1353
      retcode = ERR_NOMEM;
#line 1354
      goto fail;
    } else {

    }
  } else {

  }
#line 1358
  spin_lock_irq(& mdev->req_lock);
#line 1359
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1360
    retcode = ERR_NET_CONFIGURED;
#line 1361
    spin_unlock_irq(& mdev->req_lock);
#line 1362
    goto fail;
  } else {

  }
#line 1364
  mdev->net_conf = new_conf;
#line 1366
  mdev->send_cnt = 0U;
#line 1367
  mdev->recv_cnt = 0U;
#line 1369
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1370
    kfree((void const   *)mdev->tl_hash);
#line 1371
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1372
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1375
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1376
    kfree((void const   *)mdev->ee_hash);
#line 1377
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1378
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1381
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1382
  mdev->cram_hmac_tfm = tfm;
#line 1384
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1385
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1387
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1388
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1390
  kfree((void const   *)mdev->int_dig_out);
#line 1391
  kfree((void const   *)mdev->int_dig_in);
#line 1392
  kfree((void const   *)mdev->int_dig_vv);
#line 1393
  mdev->int_dig_out = int_dig_out;
#line 1394
  mdev->int_dig_in = int_dig_in;
#line 1395
  mdev->int_dig_vv = int_dig_vv;
#line 1396
  spin_unlock_irq(& mdev->req_lock);
#line 1398
  val.i = 0U;
#line 1398
  val.ldv_33296.conn = 2U;
#line 1398
  mask.i = 0U;
#line 1398
  mask.ldv_33296.conn = 31U;
#line 1398
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1398
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1400
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1401
  reply->ret_code = (int )retcode;
#line 1402
  drbd_reconfig_done(mdev);
#line 1403
  return (0);
  fail: 
#line 1406
  kfree((void const   *)int_dig_out);
#line 1407
  kfree((void const   *)int_dig_in);
#line 1408
  kfree((void const   *)int_dig_vv);
#line 1409
  crypto_free_hash(tfm);
#line 1410
  crypto_free_hash(integrity_w_tfm);
#line 1411
  crypto_free_hash(integrity_r_tfm);
#line 1412
  kfree((void const   *)new_tl_hash);
#line 1413
  kfree((void const   *)new_ee_hash);
#line 1414
  kfree((void const   *)new_conf);
#line 1416
  reply->ret_code = (int )retcode;
#line 1417
  drbd_reconfig_done(mdev);
#line 1418
  return (0);
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1426
  val.i = 0U;
#line 1426
  val.ldv_33296.conn = 1U;
#line 1426
  mask.i = 0U;
#line 1426
  mask.ldv_33296.conn = 31U;
#line 1426
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1428
  if (retcode == 2) {
#line 1429
    goto done;
  } else
#line 1430
  if (retcode == -9) {
#line 1431
    goto done;
  } else
#line 1432
  if (retcode == -7) {
#line 1435
    val___0.i = 0U;
#line 1435
    val___0.ldv_33296.conn = 1U;
#line 1435
    val___0.ldv_33296.pdsk = 5U;
#line 1434
    mask___0.i = 0U;
#line 1434
    mask___0.ldv_33296.conn = 31U;
#line 1435
    mask___0.ldv_33296.pdsk = 15U;
#line 1435
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1436
  if (retcode == -10) {
#line 1439
    val___1.i = 0U;
#line 1439
    val___1.ldv_33296.conn = 1U;
#line 1439
    val___1.ldv_33296.disk = 5U;
#line 1438
    mask___1.i = 0U;
#line 1438
    mask___1.ldv_33296.conn = 31U;
#line 1439
    mask___1.ldv_33296.disk = 15U;
#line 1439
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1441
    if (retcode == -11 || retcode == -16) {
#line 1442
      val___2.i = 0U;
#line 1442
      val___2.ldv_33296.conn = 1U;
#line 1442
      mask___2.i = 0U;
#line 1442
      mask___2.ldv_33296.conn = 31U;
#line 1442
      drbd_force_state(mdev, mask___2, val___2);
#line 1443
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1447
  if (retcode <= 0) {
#line 1448
    goto fail;
  } else {

  }
#line 1450
  __ret = 0;
#line 1450
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 16U) {
#line 1450
    tmp = get_current();
#line 1450
    __wait.flags = 0U;
#line 1450
    __wait.private = (void *)tmp;
#line 1450
    __wait.func = & autoremove_wake_function;
#line 1450
    __wait.task_list.next = & __wait.task_list;
#line 1450
    __wait.task_list.prev = & __wait.task_list;
    ldv_44567: 
#line 1450
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1450
    if ((unsigned int )*((unsigned short *)mdev + 982UL) != 16U) {
#line 1450
      goto ldv_44565;
    } else {

    }
#line 1450
    tmp___0 = get_current();
#line 1450
    tmp___1 = signal_pending(tmp___0);
#line 1450
    if (tmp___1 == 0) {
#line 1450
      schedule();
#line 1450
      goto ldv_44566;
    } else {

    }
#line 1450
    __ret = -512;
#line 1450
    goto ldv_44565;
    ldv_44566: ;
#line 1450
    goto ldv_44567;
    ldv_44565: 
#line 1450
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1450
  if (__ret != 0) {
#line 1454
    retcode = 129;
#line 1455
    goto fail;
  } else {

  }
  done: 
#line 1459
  retcode = 101;
  fail: 
#line 1461
  drbd_md_sync(mdev);
#line 1462
  reply->ret_code = retcode;
#line 1463
  return (0);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1470
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1471
  if ((int )mdev->state.ldv_33296.role != (int )mdev->state.ldv_33296.peer) {
#line 1472
    iass = (unsigned int )*((unsigned char *)mdev + 1964UL) == 1U;
  } else {
#line 1474
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1476
  if (iass != 0) {
#line 1477
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1479
    val.i = 0U;
#line 1479
    val.ldv_33296.conn = 15U;
#line 1479
    mask.i = 0U;
#line 1479
    mask.ldv_33296.conn = 31U;
#line 1479
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1481
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1486
  retcode = 101;
#line 1490
  memset((void *)(& rs), 0, 16UL);
#line 1491
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1491
  if (tmp == 0) {
#line 1492
    retcode = 126;
#line 1493
    goto fail;
  } else {

  }
#line 1496
  if ((int )mdev->state.ldv_33296.conn > 10) {
#line 1497
    retcode = 130;
#line 1498
    goto fail;
  } else {

  }
#line 1501
  if ((unsigned int )*((unsigned char *)mdev + 1964UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1964UL) == 8U) {
#line 1503
    retcode = 131;
#line 1504
    goto fail;
  } else {

  }
#line 1507
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1507
  if (tmp___0 == 0) {
#line 1508
    retcode = 138;
#line 1509
    goto fail;
  } else {

  }
#line 1512
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1513
    retcode = 153;
#line 1514
    goto fail;
  } else {

  }
#line 1517
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1517
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1518
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1520
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1521
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1522
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1523
  drbd_md_sync(mdev);
#line 1524
  put_ldev(mdev);
#line 1525
  if ((int )dd == -1) {
#line 1526
    retcode = 140;
#line 1527
    goto fail;
  } else {

  }
#line 1530
  if ((unsigned int )*((unsigned short *)mdev + 982UL) == 160U) {
#line 1531
    if ((int )dd == 2) {
#line 1532
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1534
    drbd_send_uuids(mdev);
#line 1535
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1539
  reply->ret_code = retcode;
#line 1540
  return (0);
}
}
#line 1543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1546
  retcode = 101;
#line 1550
  verify_tfm = 0;
#line 1551
  csums_tfm = 0;
#line 1555
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1555
  if (tmp) {
#line 1555
    tmp___0 = 0;
  } else {
#line 1555
    tmp___0 = 1;
  }
#line 1555
  if (tmp___0) {
#line 1556
    retcode = 122;
#line 1557
    goto fail;
  } else {

  }
#line 1560
  if ((nlp->flags & 2) != 0) {
#line 1561
    memset((void *)(& sc), 0, 204UL);
#line 1562
    sc.rate = 250;
#line 1563
    sc.after = -1;
#line 1564
    sc.al_extents = 127;
#line 1565
    sc.dp_volume = 16384;
#line 1566
    sc.dp_interval = 5;
#line 1567
    sc.throttle_th = 20;
#line 1568
    sc.hold_off_th = 100;
  } else {
#line 1570
    __len = 204UL;
#line 1570
    if (__len > 63UL) {
#line 1570
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1570
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1572
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1572
  if (tmp___1 == 0) {
#line 1573
    retcode = 126;
#line 1574
    goto fail;
  } else {

  }
#line 1578
  rsr = (((unsigned int )*((unsigned short *)mdev + 982UL) == 256U || (unsigned int )*((unsigned short *)mdev + 982UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 982UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 982UL) == 336U;
#line 1583
  if (rsr != 0) {
#line 1583
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1583
    if (tmp___2 != 0) {
#line 1584
      retcode = 148;
#line 1585
      goto fail;
    } else {

    }
  } else {

  }
#line 1588
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1589
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1590
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1590
    if (tmp___3 != 0L) {
#line 1591
      csums_tfm = 0;
#line 1592
      retcode = 144;
#line 1593
      goto fail;
    } else {

    }
#line 1596
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1596
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1596
    if (tmp___5 == 0) {
#line 1597
      retcode = 145;
#line 1598
      goto fail;
    } else {

    }
  } else {

  }
#line 1603
  ovr = (unsigned int )*((unsigned short *)mdev + 982UL) == 288U || (unsigned int )*((unsigned short *)mdev + 982UL) == 304U;
#line 1605
  if (ovr != 0) {
#line 1606
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1606
    if (tmp___6 != 0) {
#line 1607
      retcode = 149;
#line 1608
      goto fail;
    } else {

    }
  } else {

  }
#line 1612
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1613
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1614
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1614
    if (tmp___7 != 0L) {
#line 1615
      verify_tfm = 0;
#line 1616
      retcode = 146;
#line 1617
      goto fail;
    } else {

    }
#line 1620
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1620
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1620
    if (tmp___9 == 0) {
#line 1621
      retcode = 147;
#line 1622
      goto fail;
    } else {

    }
  } else {

  }
#line 1627
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1628
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1630
    if (err != 0) {
#line 1631
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1632
      retcode = 143;
#line 1633
      goto fail;
    } else {

    }
  } else {

  }
#line 1637
  _b = sc.rate <= 0;
#line 1637
  if (_b != 0) {
#line 1637
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1637
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1637
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1637);
  } else {

  }
#line 1637
  if (_b != 0) {
#line 1637
    sc.rate = 1;
  } else {

  }
#line 1638
  _b___0 = sc.al_extents <= 6;
#line 1638
  if (_b___0 != 0) {
#line 1638
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1638
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1638
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1638);
  } else {

  }
#line 1638
  if (_b___0 != 0) {
#line 1638
    sc.al_extents = 127;
  } else {

  }
#line 1640
  if (sc.al_extents > 3843) {
#line 1641
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1641
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1641
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1642
    sc.al_extents = 3843;
  } else {

  }
#line 1649
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1650
  if (retcode != 101) {
#line 1651
    goto fail;
  } else {

  }
#line 1655
  spin_lock(& mdev->peer_seq_lock);
#line 1656
  mdev->sync_conf = sc;
#line 1658
  if (rsr == 0) {
#line 1659
    crypto_free_hash(mdev->csums_tfm);
#line 1660
    mdev->csums_tfm = csums_tfm;
#line 1661
    csums_tfm = 0;
  } else {

  }
#line 1664
  if (ovr == 0) {
#line 1665
    crypto_free_hash(mdev->verify_tfm);
#line 1666
    mdev->verify_tfm = verify_tfm;
#line 1667
    verify_tfm = 0;
  } else {

  }
#line 1669
  spin_unlock(& mdev->peer_seq_lock);
#line 1671
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1671
  if (tmp___21 != 0) {
#line 1672
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1672
    if (tmp___18 != 0) {
#line 1672
      goto ldv_44609;
    } else {

    }
#line 1672
    tmp___19 = get_current();
#line 1672
    __wait.flags = 0U;
#line 1672
    __wait.private = (void *)tmp___19;
#line 1672
    __wait.func = & autoremove_wake_function;
#line 1672
    __wait.task_list.next = & __wait.task_list;
#line 1672
    __wait.task_list.prev = & __wait.task_list;
    ldv_44612: 
#line 1672
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1672
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1672
    if (tmp___20 != 0) {
#line 1672
      goto ldv_44611;
    } else {

    }
#line 1672
    schedule();
#line 1672
    goto ldv_44612;
    ldv_44611: 
#line 1672
    finish_wait(& mdev->al_wait, & __wait);
    ldv_44609: 
#line 1673
    drbd_al_shrink(mdev);
#line 1674
    err = drbd_check_al_size(mdev);
#line 1675
    lc_unlock(mdev->act_log);
#line 1676
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1678
    put_ldev(mdev);
#line 1679
    drbd_md_sync(mdev);
#line 1681
    if (err != 0) {
#line 1682
      retcode = 122;
#line 1683
      goto fail;
    } else {

    }
  } else {

  }
#line 1687
  if ((int )mdev->state.ldv_33296.conn > 9) {
#line 1688
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1690
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1690
  if (tmp___22) {
#line 1690
    tmp___23 = 0;
  } else {
#line 1690
    tmp___23 = 1;
  }
#line 1690
  if (tmp___23) {
#line 1691
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1692
    drbd_calc_cpu_mask(mdev);
#line 1693
    mdev->receiver.reset_cpu_mask = 1;
#line 1694
    mdev->asender.reset_cpu_mask = 1;
#line 1695
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1698
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1700
  free_cpumask_var(new_cpu_mask);
#line 1701
  crypto_free_hash(csums_tfm);
#line 1702
  crypto_free_hash(verify_tfm);
#line 1703
  reply->ret_code = retcode;
#line 1704
  return (0);
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1712
  val.i = 0U;
#line 1712
  val.ldv_33296.conn = 12U;
#line 1712
  mask.i = 0U;
#line 1712
  mask.ldv_33296.conn = 31U;
#line 1712
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1714
  if (retcode <= 0 && retcode != -15) {
#line 1715
    val___0.i = 0U;
#line 1715
    val___0.ldv_33296.conn = 12U;
#line 1715
    mask___0.i = 0U;
#line 1715
    mask___0.ldv_33296.conn = 31U;
#line 1715
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1717
  goto ldv_44635;
  ldv_44634: 
#line 1718
  spin_lock_irq(& mdev->req_lock);
#line 1719
  if ((int )mdev->state.ldv_33296.conn <= 9) {
#line 1720
    __ns.i = mdev->state.i;
#line 1720
    __ns.ldv_33296.disk = 4U;
#line 1720
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1721
  spin_unlock_irq(& mdev->req_lock);
#line 1723
  if (retcode != -15) {
#line 1724
    goto ldv_44629;
  } else {

  }
#line 1726
  val___1.i = 0U;
#line 1726
  val___1.ldv_33296.conn = 12U;
#line 1726
  mask___1.i = 0U;
#line 1726
  mask___1.ldv_33296.conn = 31U;
#line 1726
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_44635: ;
#line 1717
  if (retcode == -15) {
#line 1718
    goto ldv_44634;
  } else {

  }
  ldv_44629: 
#line 1729
  reply->ret_code = retcode;
#line 1730
  return (0);
}
}
#line 1733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1737
  val.i = 0U;
#line 1737
  val.ldv_33296.conn = 11U;
#line 1737
  mask.i = 0U;
#line 1737
  mask.ldv_33296.conn = 31U;
#line 1737
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1739
  return (0);
}
}
#line 1742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1745
  retcode = 101;
#line 1747
  val.i = 0U;
#line 1747
  val.ldv_33296.user_isp = 1U;
#line 1747
  mask.i = 0U;
#line 1747
  mask.ldv_33296.user_isp = 1U;
#line 1747
  tmp = drbd_request_state(mdev, mask, val);
#line 1747
  if (tmp == 2) {
#line 1748
    retcode = 134;
  } else {

  }
#line 1750
  reply->ret_code = retcode;
#line 1751
  return (0);
}
}
#line 1754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1757
  retcode = 101;
#line 1759
  val.i = 0U;
#line 1759
  val.ldv_33296.user_isp = 0U;
#line 1759
  mask.i = 0U;
#line 1759
  mask.ldv_33296.user_isp = 1U;
#line 1759
  tmp = drbd_request_state(mdev, mask, val);
#line 1759
  if (tmp == 2) {
#line 1760
    retcode = 135;
  } else {

  }
#line 1762
  reply->ret_code = retcode;
#line 1763
  return (0);
}
}
#line 1766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1769
  val.i = 0U;
#line 1769
  val.ldv_33296.susp = 1U;
#line 1769
  mask.i = 0U;
#line 1769
  mask.ldv_33296.susp = 1U;
#line 1769
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1771
  return (0);
}
}
#line 1774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1777
  val.i = 0U;
#line 1777
  val.ldv_33296.susp = 0U;
#line 1777
  mask.i = 0U;
#line 1777
  mask.ldv_33296.susp = 1U;
#line 1777
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1778
  return (0);
}
}
#line 1781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1784
  val.i = 0U;
#line 1784
  val.ldv_33296.disk = 5U;
#line 1784
  mask.i = 0U;
#line 1784
  mask.ldv_33296.disk = 15U;
#line 1784
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1785
  return (0);
}
}
#line 1788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1793
  tl = (unsigned short *)(& reply->tag_list);
#line 1795
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1795
  if (tmp != 0) {
#line 1796
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1797
    put_ldev(mdev);
  } else {

  }
#line 1800
  tmp___0 = get_net_conf(mdev);
#line 1800
  if (tmp___0 != 0) {
#line 1801
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1802
    put_net_conf(mdev);
  } else {

  }
#line 1804
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1806
  tmp___1 = tl;
#line 1806
  tl = tl + 1;
#line 1806
  __gu_p = (void *)tmp___1;
#line 1806
  switch (2UL) {
  case 1UL: 
#line 1806
  *((u8 *)__gu_p) = 0U;
#line 1806
  goto ldv_44700;
  case 2UL: 
#line 1806
  put_unaligned_le16(0, __gu_p);
#line 1806
  goto ldv_44700;
  case 4UL: 
#line 1806
  put_unaligned_le32(0U, __gu_p);
#line 1806
  goto ldv_44700;
  case 8UL: 
#line 1806
  put_unaligned_le64(0ULL, __gu_p);
#line 1806
  goto ldv_44700;
  default: 
#line 1806
  __bad_unaligned_access_size();
#line 1806
  goto ldv_44700;
  }
  ldv_44700: ;
#line 1808
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1811 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1814
  tl = (unsigned short *)(& reply->tag_list);
#line 1815
  s = mdev->state;
#line 1819
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1822
  if ((int )s.ldv_33296.conn > 15 && (int )s.ldv_33296.conn <= 21) {
#line 1823
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1823
    if (tmp != 0) {
#line 1824
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1825
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1826
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1829
  tmp___0 = tl;
#line 1829
  tl = tl + 1;
#line 1829
  __gu_p = (void *)tmp___0;
#line 1829
  switch (2UL) {
  case 1UL: 
#line 1829
  *((u8 *)__gu_p) = 0U;
#line 1829
  goto ldv_44716;
  case 2UL: 
#line 1829
  put_unaligned_le16(0, __gu_p);
#line 1829
  goto ldv_44716;
  case 4UL: 
#line 1829
  put_unaligned_le32(0U, __gu_p);
#line 1829
  goto ldv_44716;
  case 8UL: 
#line 1829
  put_unaligned_le64(0ULL, __gu_p);
#line 1829
  goto ldv_44716;
  default: 
#line 1829
  __bad_unaligned_access_size();
#line 1829
  goto ldv_44716;
  }
  ldv_44716: ;
#line 1831
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1839
  tl = (unsigned short *)(& reply->tag_list);
#line 1841
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1841
  if (tmp != 0) {
#line 1842
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1843
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1844
    put_ldev(mdev);
  } else {

  }
#line 1846
  tmp___0 = tl;
#line 1846
  tl = tl + 1;
#line 1846
  __gu_p = (void *)tmp___0;
#line 1846
  switch (2UL) {
  case 1UL: 
#line 1846
  *((u8 *)__gu_p) = 0U;
#line 1846
  goto ldv_44729;
  case 2UL: 
#line 1846
  put_unaligned_le16(0, __gu_p);
#line 1846
  goto ldv_44729;
  case 4UL: 
#line 1846
  put_unaligned_le32(0U, __gu_p);
#line 1846
  goto ldv_44729;
  case 8UL: 
#line 1846
  put_unaligned_le64(0ULL, __gu_p);
#line 1846
  goto ldv_44729;
  default: 
#line 1846
  __bad_unaligned_access_size();
#line 1846
  goto ldv_44729;
  }
  ldv_44729: ;
#line 1848
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1863
  tl = (unsigned short *)(& reply->tag_list);
#line 1865
  if (*((unsigned int *)mdev + 491UL) != 40960U) {
#line 1865
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1865
    rv = tmp != 0;
  } else {
#line 1865
    rv = 2;
  }
#line 1868
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1869
  tmp___0 = tl;
#line 1869
  tl = tl + 1;
#line 1869
  __gu_p = (void *)tmp___0;
#line 1869
  switch (2UL) {
  case 1UL: 
#line 1869
  *((u8 *)__gu_p) = 0U;
#line 1869
  goto ldv_44743;
  case 2UL: 
#line 1869
  put_unaligned_le16(0, __gu_p);
#line 1869
  goto ldv_44743;
  case 4UL: 
#line 1869
  put_unaligned_le32(0U, __gu_p);
#line 1869
  goto ldv_44743;
  case 8UL: 
#line 1869
  put_unaligned_le64(0ULL, __gu_p);
#line 1869
  goto ldv_44743;
  default: 
#line 1869
  __bad_unaligned_access_size();
#line 1869
  goto ldv_44743;
  }
  ldv_44743: ;
#line 1871
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1878
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1881
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1881
  if (tmp == 0) {
#line 1882
    reply->ret_code = 126;
#line 1883
    return (0);
  } else {

  }
#line 1886
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1887
  val.i = 0U;
#line 1887
  val.ldv_33296.conn = 18U;
#line 1887
  mask.i = 0U;
#line 1887
  mask.ldv_33296.conn = 31U;
#line 1887
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1888
  return (0);
}
}
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1895
  retcode = 101;
#line 1896
  skip_initial_sync = 0;
#line 1901
  memset((void *)(& args), 0, 4UL);
#line 1902
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1902
  if (tmp == 0) {
#line 1903
    reply->ret_code = 126;
#line 1904
    return (0);
  } else {

  }
#line 1907
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 1909
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1909
  if (tmp___0 == 0) {
#line 1910
    retcode = 138;
#line 1911
    goto out;
  } else {

  }
#line 1915
  if ((((unsigned int )*((unsigned short *)mdev + 982UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1917
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1917
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1917
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1918
    skip_initial_sync = 1;
  } else
#line 1919
  if ((unsigned int )*((unsigned short *)mdev + 982UL) != 0U) {
#line 1920
    retcode = 151;
#line 1921
    goto out_dec;
  } else {

  }
#line 1924
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1925
  drbd_uuid_new_current(mdev);
#line 1927
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1928
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1929
    if (err != 0) {
#line 1930
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1930
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1930
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1931
      retcode = 118;
    } else {

    }
#line 1933
    if (skip_initial_sync != 0) {
#line 1934
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1935
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1936
      spin_lock_irq(& mdev->req_lock);
#line 1937
      __ns.i = mdev->state.i;
#line 1937
      __ns.ldv_33296.disk = 8U;
#line 1937
      __ns.ldv_33296.pdsk = 8U;
#line 1937
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1939
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1943
  drbd_md_sync(mdev);
  out_dec: 
#line 1945
  put_ldev(mdev);
  out: 
#line 1947
  mutex_unlock(& mdev->state_mutex);
#line 1949
  reply->ret_code = retcode;
#line 1950
  return (0);
}
}
#line 1953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1957
  if (nlp->drbd_minor >= minor_count) {
#line 1958
    return (0);
  } else {

  }
#line 1960
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1962
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1963
    disk = 0;
#line 1964
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1966
    spin_lock_irq(& drbd_pp_lock);
#line 1967
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1968
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1969
      disk = mdev->vdisk;
#line 1970
      mdev = 0;
    } else {

    }
#line 1972
    spin_unlock_irq(& drbd_pp_lock);
#line 1974
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 1977
      add_disk(disk);
    } else {
#line 1979
      drbd_free_mdev(mdev);
    }
#line 1981
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 1984
  return (mdev);
}
}
#line 1994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 1994
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1272}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2027
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2033
  reply_size = 34;
#line 2037
  tmp = ldv_try_module_get_2(& __this_module);
#line 2037
  if (tmp == 0) {
#line 2038
    printk("<3>drbd: try_module_get() failed!\n");
#line 2039
    return;
  } else {

  }
#line 2042
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2043
    retcode = 152;
#line 2044
    goto fail;
  } else {

  }
#line 2047
  mdev = ensure_mdev(nlp);
#line 2048
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2049
    retcode = 127;
#line 2050
    goto fail;
  } else {

  }
#line 2053
  if (nlp->packet_type > 26) {
#line 2054
    retcode = 137;
#line 2055
    goto fail;
  } else {

  }
#line 2058
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2061
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2062
    retcode = 137;
#line 2063
    goto fail;
  } else {

  }
#line 2066
  reply_size = cm->reply_body_size + reply_size;
#line 2069
  tmp___0 = kmalloc___4((size_t )reply_size, 208U);
#line 2069
  cn_reply = (struct cn_msg *)tmp___0;
#line 2070
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2071
    retcode = 122;
#line 2072
    goto fail;
  } else {

  }
#line 2074
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2076
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2078
  reply->minor = nlp->drbd_minor;
#line 2079
  reply->ret_code = 101;
#line 2082
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2084
  cn_reply->id = req->id;
#line 2085
  cn_reply->seq = req->seq;
#line 2086
  cn_reply->ack = req->ack + 1U;
#line 2087
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2088
  cn_reply->flags = 0U;
#line 2090
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2091
  if (rr != 0 && rr != -3) {
#line 2092
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2094
  kfree((void const   *)cn_reply);
#line 2095
  ldv_module_put_5(& __this_module);
#line 2096
  return;
  fail: 
#line 2098
  drbd_nl_send_reply(req, retcode);
#line 2099
  ldv_module_put_6(& __this_module);
#line 2100
  return;
}
}
#line 2102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2108
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2109
  len = (int )len < (int )l ? len : l;
#line 2110
  tmp = tl;
#line 2110
  tl = tl + 1;
#line 2110
  __gu_p = (void *)tmp;
#line 2110
  switch (2UL) {
  case 1UL: 
#line 2110
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2110
  goto ldv_44807;
  case 2UL: 
#line 2110
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2110
  goto ldv_44807;
  case 4UL: 
#line 2110
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2110
  goto ldv_44807;
  case 8UL: 
#line 2110
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2110
  goto ldv_44807;
  default: 
#line 2110
  __bad_unaligned_access_size();
#line 2110
  goto ldv_44807;
  }
  ldv_44807: 
#line 2111
  tmp___0 = tl;
#line 2111
  tl = tl + 1;
#line 2111
  __gu_p___0 = (void *)tmp___0;
#line 2111
  switch (2UL) {
  case 1UL: 
#line 2111
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2111
  goto ldv_44814;
  case 2UL: 
#line 2111
  put_unaligned_le16((int )len, __gu_p___0);
#line 2111
  goto ldv_44814;
  case 4UL: 
#line 2111
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2111
  goto ldv_44814;
  case 8UL: 
#line 2111
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2111
  goto ldv_44814;
  default: 
#line 2111
  __bad_unaligned_access_size();
#line 2111
  goto ldv_44814;
  }
  ldv_44814: 
#line 2112
  __len = (size_t )len;
#line 2112
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2113
  tl = tl + (unsigned long )len;
#line 2114
  if (nul_terminated != 0) {
#line 2115
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2116
  return (tl);
}
}
#line 2120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2122
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2122
  return (tmp);
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2128
  tmp = strlen(str);
#line 2128
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2128
  return (tmp___0);
}
}
#line 2132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2134
  tmp = tl;
#line 2134
  tl = tl + 1;
#line 2134
  __gu_p = (void *)tmp;
#line 2134
  switch (2UL) {
  case 1UL: 
#line 2134
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2134
  goto ldv_44840;
  case 2UL: 
#line 2134
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2134
  goto ldv_44840;
  case 4UL: 
#line 2134
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2134
  goto ldv_44840;
  case 8UL: 
#line 2134
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2134
  goto ldv_44840;
  default: 
#line 2134
  __bad_unaligned_access_size();
#line 2134
  goto ldv_44840;
  }
  ldv_44840: ;
#line 2135
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2137
  tmp___0 = tl;
#line 2137
  tl = tl + 1;
#line 2137
  __gu_p___0 = (void *)tmp___0;
#line 2137
  switch (2UL) {
  case 1UL: 
#line 2137
  *((u8 *)__gu_p___0) = 4U;
#line 2137
  goto ldv_44848;
  case 2UL: 
#line 2137
  put_unaligned_le16(4, __gu_p___0);
#line 2137
  goto ldv_44848;
  case 4UL: 
#line 2137
  put_unaligned_le32(4U, __gu_p___0);
#line 2137
  goto ldv_44848;
  case 8UL: 
#line 2137
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2137
  goto ldv_44848;
  default: 
#line 2137
  __bad_unaligned_access_size();
#line 2137
  goto ldv_44848;
  }
  ldv_44848: 
#line 2138
  __gu_p___1 = (void *)tl;
#line 2138
  switch (4UL) {
  case 1UL: 
#line 2138
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2138
  goto ldv_44855;
  case 2UL: 
#line 2138
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2138
  goto ldv_44855;
  case 4UL: 
#line 2138
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2138
  goto ldv_44855;
  case 8UL: 
#line 2138
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2138
  goto ldv_44855;
  default: 
#line 2138
  __bad_unaligned_access_size();
#line 2138
  goto ldv_44855;
  }
  ldv_44855: 
#line 2139
  tl = tl + 4U;
#line 2140
  goto ldv_44860;
  case 16384U: 
#line 2142
  tmp___1 = tl;
#line 2142
  tl = tl + 1;
#line 2142
  __gu_p___2 = (void *)tmp___1;
#line 2142
  switch (2UL) {
  case 1UL: 
#line 2142
  *((u8 *)__gu_p___2) = 8U;
#line 2142
  goto ldv_44864;
  case 2UL: 
#line 2142
  put_unaligned_le16(8, __gu_p___2);
#line 2142
  goto ldv_44864;
  case 4UL: 
#line 2142
  put_unaligned_le32(8U, __gu_p___2);
#line 2142
  goto ldv_44864;
  case 8UL: 
#line 2142
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2142
  goto ldv_44864;
  default: 
#line 2142
  __bad_unaligned_access_size();
#line 2142
  goto ldv_44864;
  }
  ldv_44864: 
#line 2143
  __gu_p___3 = (void *)tl;
#line 2143
  switch (8UL) {
  case 1UL: 
#line 2143
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2143
  goto ldv_44871;
  case 2UL: 
#line 2143
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2143
  goto ldv_44871;
  case 4UL: 
#line 2143
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2143
  goto ldv_44871;
  case 8UL: 
#line 2143
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2143
  goto ldv_44871;
  default: 
#line 2143
  __bad_unaligned_access_size();
#line 2143
  goto ldv_44871;
  }
  ldv_44871: 
#line 2144
  tl = tl + 8U;
#line 2145
  goto ldv_44860;
  default: ;
  }
  ldv_44860: ;
#line 2150
  return (tl);
}
}
#line 2153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2159
  cn_reply = (struct cn_msg *)(& buffer);
#line 2160
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2162
  tl = (unsigned short *)(& reply->tag_list);
#line 2166
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2168
  tmp = tl;
#line 2168
  tl = tl + 1;
#line 2168
  __gu_p = (void *)tmp;
#line 2168
  switch (2UL) {
  case 1UL: 
#line 2168
  *((u8 *)__gu_p) = 0U;
#line 2168
  goto ldv_44887;
  case 2UL: 
#line 2168
  put_unaligned_le16(0, __gu_p);
#line 2168
  goto ldv_44887;
  case 4UL: 
#line 2168
  put_unaligned_le32(0U, __gu_p);
#line 2168
  goto ldv_44887;
  case 8UL: 
#line 2168
  put_unaligned_le64(0ULL, __gu_p);
#line 2168
  goto ldv_44887;
  default: 
#line 2168
  __bad_unaligned_access_size();
#line 2168
  goto ldv_44887;
  }
  ldv_44887: 
#line 2170
  cn_reply->id.idx = 8U;
#line 2171
  cn_reply->id.val = 1U;
#line 2173
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2173
  cn_reply->seq = (__u32 )tmp___0;
#line 2174
  cn_reply->ack = 0U;
#line 2175
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2177
  cn_reply->flags = 0U;
#line 2179
  reply->packet_type = 17;
#line 2180
  reply->minor = mdev_to_minor(mdev);
#line 2181
  reply->ret_code = 101;
#line 2183
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2184
  return;
}
}
#line 2186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2192
  cn_reply = (struct cn_msg *)(& buffer);
#line 2193
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2195
  tl = (unsigned short *)(& reply->tag_list);
#line 2199
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2200
  tmp = tl;
#line 2200
  tl = tl + 1;
#line 2200
  __gu_p = (void *)tmp;
#line 2200
  switch (2UL) {
  case 1UL: 
#line 2200
  *((u8 *)__gu_p) = 0U;
#line 2200
  goto ldv_44902;
  case 2UL: 
#line 2200
  put_unaligned_le16(0, __gu_p);
#line 2200
  goto ldv_44902;
  case 4UL: 
#line 2200
  put_unaligned_le32(0U, __gu_p);
#line 2200
  goto ldv_44902;
  case 8UL: 
#line 2200
  put_unaligned_le64(0ULL, __gu_p);
#line 2200
  goto ldv_44902;
  default: 
#line 2200
  __bad_unaligned_access_size();
#line 2200
  goto ldv_44902;
  }
  ldv_44902: 
#line 2202
  cn_reply->id.idx = 8U;
#line 2203
  cn_reply->id.val = 1U;
#line 2205
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2205
  cn_reply->seq = (__u32 )tmp___0;
#line 2206
  cn_reply->ack = 0U;
#line 2207
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2209
  cn_reply->flags = 0U;
#line 2211
  reply->packet_type = 20;
#line 2212
  reply->minor = mdev_to_minor(mdev);
#line 2213
  reply->ret_code = 101;
#line 2215
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2216
  return;
}
}
#line 2218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___5 ;
  void *__gu_p___1 ;
  unsigned short *tmp___6 ;
  int tmp___7 ;

  {
#line 2229
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2230
    return;
  } else {

  }
#line 2231
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2232
    return;
  } else {

  }
#line 2240
  tmp = kmalloc___4(33026UL, 16U);
#line 2240
  cn_reply = (struct cn_msg *)tmp;
#line 2247
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2248
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2250
    return;
  } else {

  }
#line 2253
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2254
  tl = (unsigned short *)(& reply->tag_list);
#line 2256
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2257
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2258
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2259
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2260
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2262
  tmp___2 = tl;
#line 2262
  tl = tl + 1;
#line 2262
  __gu_p = (void *)tmp___2;
#line 2262
  switch (2UL) {
  case 1UL: 
#line 2262
  *((u8 *)__gu_p) = 50U;
#line 2262
  goto ldv_44922;
  case 2UL: 
#line 2262
  put_unaligned_le16(49202, __gu_p);
#line 2262
  goto ldv_44922;
  case 4UL: 
#line 2262
  put_unaligned_le32(49202U, __gu_p);
#line 2262
  goto ldv_44922;
  case 8UL: 
#line 2262
  put_unaligned_le64(49202ULL, __gu_p);
#line 2262
  goto ldv_44922;
  default: 
#line 2262
  __bad_unaligned_access_size();
#line 2262
  goto ldv_44922;
  }
  ldv_44922: 
#line 2263
  tmp___3 = tl;
#line 2263
  tl = tl + 1;
#line 2263
  __gu_p___0 = (void *)tmp___3;
#line 2263
  switch (2UL) {
  case 1UL: 
#line 2263
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2263
  goto ldv_44929;
  case 2UL: 
#line 2263
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2263
  goto ldv_44929;
  case 4UL: 
#line 2263
  put_unaligned_le32(e->size, __gu_p___0);
#line 2263
  goto ldv_44929;
  case 8UL: 
#line 2263
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2263
  goto ldv_44929;
  default: 
#line 2263
  __bad_unaligned_access_size();
#line 2263
  goto ldv_44929;
  }
  ldv_44929: 
#line 2265
  len = e->size;
#line 2266
  page = e->pages;
#line 2267
  goto ldv_44944;
  ldv_44943: 
#line 2268
  tmp___4 = kmap_atomic(page, KM_USER0);
#line 2268
  d = tmp___4;
#line 2269
  __min1 = len;
#line 2269
  __min2 = 4096U;
#line 2269
  l = __min1 < __min2 ? __min1 : __min2;
#line 2270
  __len = (size_t )l;
#line 2270
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2271
  pagefault_enable();
#line 2272
  tl = tl + (unsigned long )l;
#line 2273
  len = len - l;
#line 2267
  page = page_chain_next(page);
  ldv_44944: ;
#line 2267
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2267
    tmp___5 = page_chain_next(page);
#line 2267
    __builtin_prefetch((void const   *)tmp___5);
#line 2267
    if (1 != 0) {
#line 2268
      goto ldv_44943;
    } else {
#line 2270
      goto ldv_44945;
    }
  } else {

  }
  ldv_44945: 
#line 2275
  tmp___6 = tl;
#line 2275
  tl = tl + 1;
#line 2275
  __gu_p___1 = (void *)tmp___6;
#line 2275
  switch (2UL) {
  case 1UL: 
#line 2275
  *((u8 *)__gu_p___1) = 0U;
#line 2275
  goto ldv_44948;
  case 2UL: 
#line 2275
  put_unaligned_le16(0, __gu_p___1);
#line 2275
  goto ldv_44948;
  case 4UL: 
#line 2275
  put_unaligned_le32(0U, __gu_p___1);
#line 2275
  goto ldv_44948;
  case 8UL: 
#line 2275
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2275
  goto ldv_44948;
  default: 
#line 2275
  __bad_unaligned_access_size();
#line 2275
  goto ldv_44948;
  }
  ldv_44948: 
#line 2277
  cn_reply->id.idx = 8U;
#line 2278
  cn_reply->id.val = 1U;
#line 2280
  tmp___7 = atomic_add_return(1, & drbd_nl_seq);
#line 2280
  cn_reply->seq = (__u32 )tmp___7;
#line 2281
  cn_reply->ack = 0U;
#line 2282
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2284
  cn_reply->flags = 0U;
#line 2286
  reply->packet_type = 24;
#line 2287
  reply->minor = mdev_to_minor(mdev);
#line 2288
  reply->ret_code = 101;
#line 2290
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2291
  kfree((void const   *)cn_reply);
#line 2292
  return;
}
}
#line 2294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2300
  cn_reply = (struct cn_msg *)(& buffer);
#line 2301
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2303
  tl = (unsigned short *)(& reply->tag_list);
#line 2308
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2308
  if (tmp == 0) {
#line 2309
    return;
  } else {

  }
#line 2310
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2311
  put_ldev(mdev);
#line 2313
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2314
  tmp___0 = tl;
#line 2314
  tl = tl + 1;
#line 2314
  __gu_p = (void *)tmp___0;
#line 2314
  switch (2UL) {
  case 1UL: 
#line 2314
  *((u8 *)__gu_p) = 0U;
#line 2314
  goto ldv_44964;
  case 2UL: 
#line 2314
  put_unaligned_le16(0, __gu_p);
#line 2314
  goto ldv_44964;
  case 4UL: 
#line 2314
  put_unaligned_le32(0U, __gu_p);
#line 2314
  goto ldv_44964;
  case 8UL: 
#line 2314
  put_unaligned_le64(0ULL, __gu_p);
#line 2314
  goto ldv_44964;
  default: 
#line 2314
  __bad_unaligned_access_size();
#line 2314
  goto ldv_44964;
  }
  ldv_44964: 
#line 2316
  cn_reply->id.idx = 8U;
#line 2317
  cn_reply->id.val = 1U;
#line 2319
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2319
  cn_reply->seq = (__u32 )tmp___1;
#line 2320
  cn_reply->ack = 0U;
#line 2321
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2323
  cn_reply->flags = 0U;
#line 2325
  reply->packet_type = 23;
#line 2326
  reply->minor = mdev_to_minor(mdev);
#line 2327
  reply->ret_code = 101;
#line 2329
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2330
  return;
}
}
#line 2332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2335
  try = 10;
#line 2337
  cn_id_drbd.val = 1U;
  ldv_44976: 
#line 2339
  cn_id_drbd.idx = cn_idx;
#line 2340
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2341
  if (err == 0) {
#line 2342
    goto ldv_44975;
  } else {

  }
#line 2343
  cn_idx = cn_idx + 6977U;
#line 2344
  tmp = try;
#line 2344
  try = try - 1;
#line 2344
  if (tmp != 0) {
#line 2345
    goto ldv_44976;
  } else {

  }
  ldv_44975: ;
#line 2346
  if (err != 0) {
#line 2347
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2348
    return (err);
  } else {

  }
#line 2351
  return (0);
}
}
#line 2354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2358
  cn_id_drbd.idx = cn_idx;
#line 2359
  cn_id_drbd.val = 1U;
#line 2361
  cn_del_callback(& cn_id_drbd);
#line 2362
  return;
}
}
#line 2364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2367
  cn_reply = (struct cn_msg *)(& buffer);
#line 2368
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2372
  cn_reply->id = req->id;
#line 2374
  cn_reply->seq = req->seq;
#line 2375
  cn_reply->ack = req->ack + 1U;
#line 2376
  cn_reply->len = 12U;
#line 2377
  cn_reply->flags = 0U;
#line 2379
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2380
  reply->ret_code = ret_code;
#line 2382
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2383
  if (rr != 0 && rr != -3) {
#line 2384
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2385
  return;
}
}
#line 2395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2400
  ldv_module_put(ldv_func_arg1);
#line 2401
  return;
}
}
#line 2403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2408
  ldv_module_put(ldv_func_arg1);
#line 2409
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
