/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 22 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 120 "include/linux/types.h"
typedef __u32 uint32_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 193 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 196 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 201 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 37 "include/linux/dynamic_printk.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "include/linux/kernel.h"
struct completion;
#line 103
struct pt_regs;
#line 191
struct pid;
#line 507
struct task_struct;
#line 508
struct mm_struct;
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
#line 204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2U] ;
   ds_ovfl_callback_t callback[2U] ;
   void *buffer[2U] ;
   unsigned int pages[2U] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 83
struct page;
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgd_t_7 {
   pgdval_t pgd ;
};
#line 56 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgd_t_7 pgd_t;
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_pgprot_t_8 {
   pgprotval_t pgprot ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
typedef struct __anonstruct_pgprot_t_8 pgprot_t;
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_2028_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct __anonstruct_ldv_2043_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
union __anonunion_ldv_2044_11 {
   struct __anonstruct_ldv_2028_12 ldv_2028 ;
   struct __anonstruct_ldv_2043_13 ldv_2043 ;
};
#line 154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_2044_11 ldv_2044 ;
};
#line 289 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[1U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1102
struct thread_struct;
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct raw_spinlock;
#line 220 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4623_15 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4629_16 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4630_14 {
   struct __anonstruct_ldv_4623_15 ldv_4623 ;
   struct __anonstruct_ldv_4629_16 ldv_4629 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4639_17 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4630_14 ldv_4630 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4639_17 ldv_4639 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 386 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_18 {
   unsigned long seg ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_18 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 634 "include/linux/list.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_19 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_19 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 31 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 156 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 192 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_20 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_20 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_21 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_21 rwlock_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic_t_22 {
   int counter ;
};
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_22 atomic_t;
#line 198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_23 {
   long counter ;
};
#line 198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_23 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131
struct thread_info;
#line 131 "include/asm-generic/atomic.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5489_25 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_26 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_27 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_28 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5511_24 {
   struct __anonstruct_ldv_5489_25 ldv_5489 ;
   struct __anonstruct_futex_26 futex ;
   struct __anonstruct_nanosleep_27 nanosleep ;
   struct __anonstruct_poll_28 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5511_24 ldv_5511 ;
};
#line 53 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 219 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_30 {
   unsigned long bits[1U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_30 nodemask_t;
#line 630 "include/linux/mmzone.h"
struct rw_semaphore;
#line 632 "include/linux/mmzone.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 740
struct file;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 155 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 212
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 222 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_78 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_78 mm_context_t;
#line 237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 1081 "include/linux/mmzone.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 404
struct kobject;
#line 405 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 40 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 103 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 109 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 116 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 133 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 215 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 194
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 272 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 86 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 275 "include/linux/rcupdate.h"
struct tracepoint;
#line 276 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_89 {
   atomic_long_t a ;
};
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_89 local_t;
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 226
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 232
struct module_sect_attrs;
#line 232
struct module_notes_attrs;
#line 232 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8U] ;
};
#line 463
struct device_driver;
#line 593
struct file_operations;
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_90 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_90 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 368 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
struct prio_tree_node;
#line 191 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 519 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 36 "include/linux/fiemap.h"
struct export_operations;
#line 38
struct iovec;
#line 39
struct kiocb;
#line 40
struct pipe_inode_info;
#line 41
struct poll_table_struct;
#line 42
struct kstatfs;
#line 328 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 378 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 109 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 142 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 174 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 175 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 199
struct quota_format_type;
#line 200 "include/linux/quota.h"
union __anonunion_u_92 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 200 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_92 u ;
};
#line 245 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 268 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 284 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 300 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 315 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 352
struct address_space;
#line 353
struct writeback_control;
#line 474 "include/linux/fs.h"
union __anonunion_arg_94 {
   char *buf ;
   void *data ;
};
#line 474 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_93 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_94 arg ;
   int error ;
};
#line 474 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_93 read_descriptor_t;
#line 477 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 525
struct backing_dev_info;
#line 526 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 547
struct hd_struct;
#line 547
struct gendisk;
#line 547 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 611
struct inode_operations;
#line 611
struct file_lock;
#line 611
struct cdev;
#line 611 "include/linux/fs.h"
union __anonunion_ldv_11019_95 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 611
struct dnotify_struct;
#line 611 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_11019_95 ldv_11019 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 777 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 785 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 808 "include/linux/fs.h"
union __anonunion_f_u_96 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 808 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_96 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 931
struct files_struct;
#line 931 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 932 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 937 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_98 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_97 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_98 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_97 fl_u ;
};
#line 1039 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1103
struct file_system_type;
#line 1103
struct super_operations;
#line 1103
struct xattr_handler;
#line 1103
struct mtd_info;
#line 1103 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1225 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1269 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1310 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1338
struct seq_file;
#line 1352 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1535 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1914
struct bio;
#line 49 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 51 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 52 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct module *owner ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 446 "include/linux/mod_devicetable.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 25 "include/linux/ioport.h"
struct pci_dev;
#line 178
struct klist_node;
#line 179 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 69
struct dma_mapping_ops;
#line 69 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct driver_private;
#line 15
struct class;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 179
struct class_attribute;
#line 179 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 204
struct device_type;
#line 235 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 267 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 296 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 357 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 366
struct dma_coherent_mem;
#line 366 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 69 "include/linux/io.h"
struct hotplug_slot;
#line 69 "include/linux/io.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 87 "include/linux/pci.h"
typedef int pci_power_t;
#line 101 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 102
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 127 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 137 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 148
struct pcie_link_state;
#line 149
struct pci_vpd;
#line 150
struct pci_driver;
#line 150 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[12U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_ucfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[12U] ;
   struct bin_attribute *res_attr_wc[12U] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 270
struct pci_ops;
#line 270 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16U] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 318 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 353 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 366 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 375 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 403 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   struct pm_ext_ops *pm ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 723 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 805 "include/linux/pci.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_15085_101 {
   u16 inuse ;
   u16 objects ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15086_100 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15085_101 ldv_15085 ;
};
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_15091_103 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15095_102 {
   struct __anonstruct_ldv_15091_103 ldv_15091 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_15099_104 {
   unsigned long index ;
   void *freelist ;
};
#line 28 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_15086_100 ldv_15086 ;
   union __anonunion_ldv_15095_102 ldv_15095 ;
   union __anonunion_ldv_15099_104 ldv_15099 ;
   struct list_head lru ;
};
#line 82 "include/linux/mm_types.h"
struct __anonstruct_vm_set_106 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 82 "include/linux/mm_types.h"
union __anonunion_shared_105 {
   struct __anonstruct_vm_set_106 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 82
struct anon_vma;
#line 82
struct vm_operations_struct;
#line 82
struct mempolicy;
#line 82 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_105 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 160 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 166 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 172
struct kioctx;
#line 172
struct mmu_notifier_mm;
#line 172 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[42U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 259
struct user_struct;
#line 144 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 165 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct page * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/dma-mapping.h"
struct dma_mapping_ops {
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_single)(struct device * , phys_addr_t  , size_t  , int  ) ;
   void (*unmap_single)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , int  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , int  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , int  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , int  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int is_phys ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_107 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_107 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 171 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 183 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_109 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_110 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_111 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_112 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_113 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_114 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_108 {
   int _pad[28U] ;
   struct __anonstruct__kill_109 _kill ;
   struct __anonstruct__timer_110 _timer ;
   struct __anonstruct__rt_111 _rt ;
   struct __anonstruct__sigchld_112 _sigchld ;
   struct __anonstruct__sigfault_113 _sigfault ;
   struct __anonstruct__sigpoll_114 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_108 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_117 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_117 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE_PERCPU = 1,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 2
} ;
#line 92 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   enum hrtimer_cb_mode cb_mode ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 151 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 175 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 488 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 138 "include/linux/sched.h"
struct cfs_rq;
#line 139
struct task_group;
#line 334
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_118 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_118 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 393 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 428 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 436 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 453 "include/linux/sched.h"
struct thread_group_cputime {
   struct task_cputime *totals ;
};
#line 469 "include/linux/sched.h"
union __anonunion_ldv_18676_119 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 469 "include/linux/sched.h"
union __anonunion_ldv_18681_120 {
   pid_t session ;
   pid_t __session ;
};
#line 469
struct tty_struct;
#line 469
struct taskstats;
#line 469
struct tty_audit_buf;
#line 469 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputime cputime ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   union __anonunion_ldv_18676_119 ldv_18676 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_18681_120 ldv_18681 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   struct rlimit rlim[16U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 620 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 666
struct reclaim_state;
#line 667 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 685 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 727
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 734 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 794
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 808 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 878
struct io_context;
#line 879 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 930
struct audit_context;
#line 932
struct rq;
#line 933 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 986 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 991 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1057
struct rt_rq;
#line 1057 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1073
struct linux_binfmt;
#line 1073
struct css_set;
#line 1073
struct compat_robust_list_head;
#line 1073 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
};
#line 41 "include/linux/smp_lock.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 149 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 153 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
enum chipset_type {
    NOT_SUPPORTED = 0,
    SUPPORTED = 1
} ;
#line 160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct agp_version {
   u16 major ;
   u16 minor ;
};
#line 44 "include/linux/agp_backend.h"
struct agp_kern_info {
   struct agp_version version ;
   struct pci_dev *device ;
   enum chipset_type chipset ;
   unsigned long mode ;
   unsigned long aper_base ;
   size_t aper_size ;
   int max_memory ;
   int current_memory ;
   bool cant_use_aperture ;
   unsigned long page_mask ;
   struct vm_operations_struct *vm_ops ;
};
#line 58
struct agp_bridge_data;
#line 108 "include/linux/agp_backend.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
};
#line 19 "include/linux/irqreturn.h"
typedef int irqreturn_t;
#line 63 "include/drm/drm.h"
typedef unsigned int drm_handle_t;
#line 66 "include/drm/drm.h"
typedef unsigned int drm_magic_t;
#line 91 "include/drm/drm.h"
struct drm_tex_region {
   unsigned char next ;
   unsigned char prev ;
   unsigned char in_use ;
   unsigned char padding ;
   unsigned int age ;
};
#line 102 "include/drm/drm.h"
struct drm_hw_lock {
   unsigned int volatile   lock ;
   char padding[60U] ;
};
#line 165
enum drm_map_type {
    _DRM_FRAME_BUFFER = 0,
    _DRM_REGISTERS = 1,
    _DRM_SHM = 2,
    _DRM_AGP = 3,
    _DRM_SCATTER_GATHER = 4,
    _DRM_CONSISTENT = 5
} ;
#line 174
enum drm_map_flags {
    _DRM_RESTRICTED = 1,
    _DRM_READ_ONLY = 2,
    _DRM_LOCKED = 4,
    _DRM_KERNEL = 8,
    _DRM_WRITE_COMBINING = 16,
    _DRM_CONTAINS_LOCK = 32,
    _DRM_REMOVABLE = 64,
    _DRM_DRIVER = 128
} ;
#line 196 "include/drm/drm.h"
struct drm_map {
   unsigned long offset ;
   unsigned long size ;
   enum drm_map_type type ;
   enum drm_map_flags flags ;
   void *handle ;
   int mtrr ;
};
#line 225
enum drm_stat_type {
    _DRM_STAT_LOCK = 0,
    _DRM_STAT_OPENS = 1,
    _DRM_STAT_CLOSES = 2,
    _DRM_STAT_IOCTLS = 3,
    _DRM_STAT_LOCKS = 4,
    _DRM_STAT_UNLOCKS = 5,
    _DRM_STAT_VALUE = 6,
    _DRM_STAT_BYTE = 7,
    _DRM_STAT_COUNT = 8,
    _DRM_STAT_IRQ = 9,
    _DRM_STAT_PRIMARY = 10,
    _DRM_STAT_SECONDARY = 11,
    _DRM_STAT_DMA = 12,
    _DRM_STAT_SPECIAL = 13,
    _DRM_STAT_MISSED = 14
} ;
#line 390
enum drm_ctx_flags {
    _DRM_CONTEXT_PRESERVED = 1,
    _DRM_CONTEXT_2DONLY = 2
} ;
#line 562 "include/drm/drm.h"
struct drm_set_version {
   int drm_di_major ;
   int drm_di_minor ;
   int drm_dd_major ;
   int drm_dd_minor ;
};
#line 600 "include/drm/drm.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 145
struct drm_file;
#line 146
struct drm_device;
#line 44 "include/drm/drm_hashtab.h"
struct drm_open_hash {
   unsigned int size ;
   unsigned int order ;
   unsigned int fill ;
   struct hlist_head *table ;
   int use_vmalloc ;
};
#line 270 "include/drm/drmP.h"
typedef int drm_ioctl_t(struct drm_device * , void * , struct drm_file * );
#line 274 "include/drm/drmP.h"
struct drm_ioctl_desc {
   unsigned int cmd ;
   drm_ioctl_t *func ;
   int flags ;
};
#line 304
enum ldv_18209 {
    DRM_LIST_NONE = 0,
    DRM_LIST_FREE = 1,
    DRM_LIST_WAIT = 2,
    DRM_LIST_PEND = 3,
    DRM_LIST_PRIO = 4,
    DRM_LIST_RECLAIM = 5
} ;
#line 313 "include/drm/drmP.h"
struct drm_buf {
   int idx ;
   int total ;
   int order ;
   int used ;
   unsigned long offset ;
   void *address ;
   unsigned long bus_address ;
   struct drm_buf *next ;
   int volatile   waiting ;
   int volatile   pending ;
   wait_queue_head_t dma_wait ;
   struct drm_file *file_priv ;
   int context ;
   int while_locked ;
   enum ldv_18209 list ;
   int dev_priv_size ;
   void *dev_private ;
};
#line 335 "include/drm/drmP.h"
struct drm_waitlist {
   int count ;
   struct drm_buf **bufs ;
   struct drm_buf **rp ;
   struct drm_buf **wp ;
   struct drm_buf **end ;
   spinlock_t read_lock ;
   spinlock_t write_lock ;
};
#line 346 "include/drm/drmP.h"
struct drm_freelist {
   int initialized ;
   atomic_t count ;
   struct drm_buf *next ;
   wait_queue_head_t waiting ;
   int low_mark ;
   int high_mark ;
   atomic_t wfh ;
   spinlock_t lock ;
};
#line 358 "include/drm/drmP.h"
struct drm_dma_handle {
   dma_addr_t busaddr ;
   void *vaddr ;
   size_t size ;
};
#line 363 "include/drm/drmP.h"
typedef struct drm_dma_handle drm_dma_handle_t;
#line 364 "include/drm/drmP.h"
struct drm_buf_entry {
   int buf_size ;
   int buf_count ;
   struct drm_buf *buflist ;
   int seg_count ;
   int page_order ;
   struct drm_dma_handle **seglist ;
   struct drm_freelist freelist ;
};
#line 378
struct drm_minor;
#line 378 "include/drm/drmP.h"
struct drm_file {
   int authenticated ;
   int master ;
   pid_t pid ;
   uid_t uid ;
   drm_magic_t magic ;
   unsigned long ioctl_count ;
   struct list_head lhead ;
   struct drm_minor *minor ;
   int remove_auth_on_close ;
   unsigned long lock_count ;
   struct idr object_idr ;
   spinlock_t table_lock ;
   struct file *filp ;
   void *driver_priv ;
};
#line 398 "include/drm/drmP.h"
struct drm_queue {
   atomic_t use_count ;
   atomic_t finalization ;
   atomic_t block_count ;
   atomic_t block_read ;
   wait_queue_head_t read_queue ;
   atomic_t block_write ;
   wait_queue_head_t write_queue ;
   atomic_t total_queued ;
   atomic_t total_flushed ;
   atomic_t total_locks ;
   enum drm_ctx_flags flags ;
   struct drm_waitlist waitlist ;
   wait_queue_head_t flush_queue ;
};
#line 415 "include/drm/drmP.h"
struct drm_lock_data {
   struct drm_hw_lock *hw_lock ;
   struct drm_file *file_priv ;
   wait_queue_head_t lock_queue ;
   unsigned long lock_time ;
   spinlock_t spinlock ;
   uint32_t kernel_waiters ;
   uint32_t user_waiters ;
   int idle_has_lock ;
};
#line 430
enum ldv_18227 {
    _DRM_DMA_USE_AGP = 1,
    _DRM_DMA_USE_SG = 2,
    _DRM_DMA_USE_FB = 4,
    _DRM_DMA_USE_PCI_RO = 8
} ;
#line 437 "include/drm/drmP.h"
struct drm_device_dma {
   struct drm_buf_entry bufs[23U] ;
   int buf_count ;
   struct drm_buf **buflist ;
   int seg_count ;
   int page_count ;
   unsigned long *pagelist ;
   unsigned long byte_count ;
   enum ldv_18227 flags ;
};
#line 462 "include/drm/drmP.h"
struct drm_agp_head {
   struct agp_kern_info agp_info ;
   struct list_head memory ;
   unsigned long mode ;
   struct agp_bridge_data *bridge ;
   int enabled ;
   int acquired ;
   unsigned long base ;
   int agp_mtrr ;
   int cant_use_aperture ;
   unsigned long page_mask ;
};
#line 480 "include/drm/drmP.h"
struct drm_sg_mem {
   unsigned long handle ;
   void *virtual ;
   int pages ;
   struct page **pagelist ;
   dma_addr_t *busaddr ;
};
#line 491 "include/drm/drmP.h"
struct drm_sigdata {
   int context ;
   struct drm_hw_lock *lock ;
};
#line 496
struct drm_mm;
#line 511 "include/drm/drmP.h"
struct drm_mm {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
};
#line 528 "include/drm/drmP.h"
typedef struct drm_map drm_local_map_t;
#line 564 "include/drm/drmP.h"
struct drm_gem_object {
   struct kref refcount ;
   struct kref handlecount ;
   struct drm_device *dev ;
   struct file *filp ;
   size_t size ;
   int name ;
   uint32_t read_domains ;
   uint32_t write_domain ;
   uint32_t pending_read_domains ;
   uint32_t pending_write_domain ;
   void *driver_private ;
};
#line 614 "include/drm/drmP.h"
struct drm_driver {
   int (*load)(struct drm_device * , unsigned long  ) ;
   int (*firstopen)(struct drm_device * ) ;
   int (*open)(struct drm_device * , struct drm_file * ) ;
   void (*preclose)(struct drm_device * , struct drm_file * ) ;
   void (*postclose)(struct drm_device * , struct drm_file * ) ;
   void (*lastclose)(struct drm_device * ) ;
   int (*unload)(struct drm_device * ) ;
   int (*suspend)(struct drm_device * , pm_message_t  ) ;
   int (*resume)(struct drm_device * ) ;
   int (*dma_ioctl)(struct drm_device * , void * , struct drm_file * ) ;
   void (*dma_ready)(struct drm_device * ) ;
   int (*dma_quiescent)(struct drm_device * ) ;
   int (*context_ctor)(struct drm_device * , int  ) ;
   int (*context_dtor)(struct drm_device * , int  ) ;
   int (*kernel_context_switch)(struct drm_device * , int  , int  ) ;
   void (*kernel_context_switch_unlock)(struct drm_device * ) ;
   int (*dri_library_name)(struct drm_device * , char * ) ;
   u32 (*get_vblank_counter)(struct drm_device * , int  ) ;
   int (*enable_vblank)(struct drm_device * , int  ) ;
   void (*disable_vblank)(struct drm_device * , int  ) ;
   int (*device_is_agp)(struct drm_device * ) ;
   irqreturn_t (*irq_handler)(int  , void * ) ;
   void (*irq_preinstall)(struct drm_device * ) ;
   int (*irq_postinstall)(struct drm_device * ) ;
   void (*irq_uninstall)(struct drm_device * ) ;
   void (*reclaim_buffers)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_locked)(struct drm_device * , struct drm_file * ) ;
   void (*reclaim_buffers_idlelocked)(struct drm_device * , struct drm_file * ) ;
   unsigned long (*get_map_ofs)(struct drm_map * ) ;
   unsigned long (*get_reg_ofs)(struct drm_device * ) ;
   void (*set_version)(struct drm_device * , struct drm_set_version * ) ;
   int (*proc_init)(struct drm_minor * ) ;
   void (*proc_cleanup)(struct drm_minor * ) ;
   int (*gem_init_object)(struct drm_gem_object * ) ;
   void (*gem_free_object)(struct drm_gem_object * ) ;
   int major ;
   int minor ;
   int patchlevel ;
   char *name ;
   char *desc ;
   char *date ;
   u32 driver_features ;
   int dev_priv_size ;
   struct drm_ioctl_desc *ioctls ;
   int num_ioctls ;
   struct file_operations fops ;
   struct pci_driver pci_driver ;
};
#line 741 "include/drm/drmP.h"
struct drm_minor {
   int index ;
   int type ;
   dev_t device ;
   struct device kdev ;
   struct drm_device *dev ;
   struct proc_dir_entry *dev_root ;
};
#line 756 "include/drm/drmP.h"
struct drm_device {
   char *unique ;
   int unique_len ;
   char *devname ;
   int if_version ;
   int blocked ;
   spinlock_t count_lock ;
   struct mutex struct_mutex ;
   int open_count ;
   atomic_t ioctl_count ;
   atomic_t vma_count ;
   int buf_use ;
   atomic_t buf_alloc ;
   unsigned long counters ;
   enum drm_stat_type types[15U] ;
   atomic_t counts[15U] ;
   struct list_head filelist ;
   struct drm_open_hash magiclist ;
   struct list_head magicfree ;
   struct list_head maplist ;
   int map_count ;
   struct drm_open_hash map_hash ;
   struct list_head ctxlist ;
   int ctx_count ;
   struct mutex ctxlist_mutex ;
   struct idr ctx_idr ;
   struct list_head vmalist ;
   struct drm_lock_data lock ;
   int queue_count ;
   int queue_reserved ;
   int queue_slots ;
   struct drm_queue **queuelist ;
   struct drm_device_dma *dma ;
   int irq_enabled ;
   long volatile   context_flag ;
   long volatile   interrupt_flag ;
   long volatile   dma_flag ;
   struct timer_list timer ;
   wait_queue_head_t context_wait ;
   int last_checked ;
   int last_context ;
   unsigned long last_switch ;
   struct work_struct work ;
   int vblank_disable_allowed ;
   wait_queue_head_t *vbl_queue ;
   atomic_t *_vblank_count ;
   spinlock_t vbl_lock ;
   struct list_head *vbl_sigs ;
   atomic_t vbl_signal_pending ;
   atomic_t *vblank_refcount ;
   u32 *last_vblank ;
   int *vblank_enabled ;
   int *vblank_inmodeset ;
   struct timer_list vblank_disable_timer ;
   u32 max_vblank_count ;
   cycles_t ctx_start ;
   cycles_t lck_start ;
   struct fasync_struct *buf_async ;
   wait_queue_head_t buf_readers ;
   wait_queue_head_t buf_writers ;
   struct drm_agp_head *agp ;
   struct pci_dev *pdev ;
   int pci_vendor ;
   int pci_device ;
   struct drm_sg_mem *sg ;
   int num_crtcs ;
   void *dev_private ;
   struct drm_sigdata sigdata ;
   sigset_t sigmask ;
   struct drm_driver *driver ;
   drm_local_map_t *agp_buffer_map ;
   unsigned int agp_buffer_token ;
   struct drm_minor *primary ;
   spinlock_t drw_lock ;
   struct idr drw_idr ;
   spinlock_t object_name_lock ;
   struct idr object_name_idr ;
   atomic_t object_count ;
   atomic_t object_memory ;
   atomic_t pin_count ;
   atomic_t pin_memory ;
   atomic_t gtt_count ;
   atomic_t gtt_memory ;
   uint32_t gtt_total ;
   uint32_t invalidate_domains ;
   uint32_t flush_domains ;
};
#line 65 "include/drm/i915_drm.h"
struct _drm_i915_sarea {
   struct drm_tex_region texList[256U] ;
   int last_upload ;
   int last_enqueue ;
   int last_dispatch ;
   int ctxOwner ;
   int texAge ;
   int pf_enabled ;
   int pf_active ;
   int pf_current_page ;
   int perf_boxes ;
   int width ;
   int height ;
   drm_handle_t front_handle ;
   int front_offset ;
   int front_size ;
   drm_handle_t back_handle ;
   int back_offset ;
   int back_size ;
   drm_handle_t depth_handle ;
   int depth_offset ;
   int depth_size ;
   drm_handle_t tex_handle ;
   int tex_offset ;
   int tex_size ;
   int log_tex_granularity ;
   int pitch ;
   int rotation ;
   int rotated_offset ;
   int rotated_size ;
   int rotated_pitch ;
   int virtualX ;
   int virtualY ;
   unsigned int front_tiled ;
   unsigned int back_tiled ;
   unsigned int depth_tiled ;
   unsigned int rotated_tiled ;
   unsigned int rotated2_tiled ;
   int pipeA_x ;
   int pipeA_y ;
   int pipeA_w ;
   int pipeA_h ;
   int pipeB_x ;
   int pipeB_y ;
   int pipeB_w ;
   int pipeB_h ;
};
#line 116 "include/drm/i915_drm.h"
typedef struct _drm_i915_sarea drm_i915_sarea_t;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/iomap.h"
struct io_mapping;
#line 127 "include/linux/io-mapping.h"
struct _drm_i915_ring_buffer {
   int tail_mask ;
   unsigned long Size ;
   u8 *virtual_start ;
   int head ;
   int tail ;
   int space ;
   drm_local_map_t map ;
   struct drm_gem_object *ring_obj ;
};
#line 83 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct _drm_i915_ring_buffer drm_i915_ring_buffer_t;
#line 84 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct mem_block {
   struct mem_block *next ;
   struct mem_block *prev ;
   int start ;
   int size ;
   struct drm_file *file_priv ;
};
#line 92
struct opregion_header;
#line 93
struct opregion_acpi;
#line 94
struct opregion_swsci;
#line 95
struct opregion_asle;
#line 96 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct intel_opregion {
   struct opregion_header *header ;
   struct opregion_acpi *acpi ;
   struct opregion_swsci *swsci ;
   struct opregion_asle *asle ;
   int enabled ;
};
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_126 {
   struct drm_mm gtt_space ;
   struct io_mapping *gtt_mapping ;
   struct list_head active_list ;
   struct list_head flushing_list ;
   struct list_head inactive_list ;
   struct list_head request_list ;
   struct delayed_work retire_work ;
   uint32_t next_gem_seqno ;
   uint32_t waiting_gem_seqno ;
   uint32_t irq_gem_seqno ;
   int suspended ;
   int wedged ;
   uint32_t bit_6_swizzle_x ;
   uint32_t bit_6_swizzle_y ;
};
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_private {
   struct drm_device *dev ;
   void *regs ;
   drm_local_map_t *sarea ;
   drm_i915_sarea_t *sarea_priv ;
   drm_i915_ring_buffer_t ring ;
   drm_dma_handle_t *status_page_dmah ;
   void *hw_status_page ;
   dma_addr_t dma_status_page ;
   uint32_t counter ;
   unsigned int status_gfx_addr ;
   drm_local_map_t hws_map ;
   struct drm_gem_object *hws_obj ;
   unsigned int cpp ;
   int back_offset ;
   int front_offset ;
   int current_page ;
   int page_flipping ;
   wait_queue_head_t irq_queue ;
   atomic_t irq_received ;
   spinlock_t user_irq_lock ;
   int user_irq_refcount ;
   u32 irq_mask_reg ;
   u32 pipestat[2U] ;
   int tex_lru_log_granularity ;
   int allow_batchbuffer ;
   struct mem_block *agp_heap ;
   unsigned int sr01 ;
   unsigned int adpa ;
   unsigned int ppcr ;
   unsigned int dvob ;
   unsigned int dvoc ;
   unsigned int lvds ;
   int vblank_pipe ;
   struct intel_opregion opregion ;
   u8 saveLBB ;
   u32 saveDSPACNTR ;
   u32 saveDSPBCNTR ;
   u32 saveDSPARB ;
   u32 saveRENDERSTANDBY ;
   u32 saveHWS ;
   u32 savePIPEACONF ;
   u32 savePIPEBCONF ;
   u32 savePIPEASRC ;
   u32 savePIPEBSRC ;
   u32 saveFPA0 ;
   u32 saveFPA1 ;
   u32 saveDPLL_A ;
   u32 saveDPLL_A_MD ;
   u32 saveHTOTAL_A ;
   u32 saveHBLANK_A ;
   u32 saveHSYNC_A ;
   u32 saveVTOTAL_A ;
   u32 saveVBLANK_A ;
   u32 saveVSYNC_A ;
   u32 saveBCLRPAT_A ;
   u32 savePIPEASTAT ;
   u32 saveDSPASTRIDE ;
   u32 saveDSPASIZE ;
   u32 saveDSPAPOS ;
   u32 saveDSPAADDR ;
   u32 saveDSPASURF ;
   u32 saveDSPATILEOFF ;
   u32 savePFIT_PGM_RATIOS ;
   u32 saveBLC_PWM_CTL ;
   u32 saveBLC_PWM_CTL2 ;
   u32 saveFPB0 ;
   u32 saveFPB1 ;
   u32 saveDPLL_B ;
   u32 saveDPLL_B_MD ;
   u32 saveHTOTAL_B ;
   u32 saveHBLANK_B ;
   u32 saveHSYNC_B ;
   u32 saveVTOTAL_B ;
   u32 saveVBLANK_B ;
   u32 saveVSYNC_B ;
   u32 saveBCLRPAT_B ;
   u32 savePIPEBSTAT ;
   u32 saveDSPBSTRIDE ;
   u32 saveDSPBSIZE ;
   u32 saveDSPBPOS ;
   u32 saveDSPBADDR ;
   u32 saveDSPBSURF ;
   u32 saveDSPBTILEOFF ;
   u32 saveVGA0 ;
   u32 saveVGA1 ;
   u32 saveVGA_PD ;
   u32 saveVGACNTRL ;
   u32 saveADPA ;
   u32 saveLVDS ;
   u32 savePP_ON_DELAYS ;
   u32 savePP_OFF_DELAYS ;
   u32 saveDVOA ;
   u32 saveDVOB ;
   u32 saveDVOC ;
   u32 savePP_ON ;
   u32 savePP_OFF ;
   u32 savePP_CONTROL ;
   u32 savePP_DIVISOR ;
   u32 savePFIT_CONTROL ;
   u32 save_palette_a[256U] ;
   u32 save_palette_b[256U] ;
   u32 saveFBC_CFB_BASE ;
   u32 saveFBC_LL_BASE ;
   u32 saveFBC_CONTROL ;
   u32 saveFBC_CONTROL2 ;
   u32 saveIER ;
   u32 saveIIR ;
   u32 saveIMR ;
   u32 saveCACHE_MODE_0 ;
   u32 saveD_STATE ;
   u32 saveCG_2D_DIS ;
   u32 saveMI_ARB_STATE ;
   u32 saveSWF0[16U] ;
   u32 saveSWF1[16U] ;
   u32 saveSWF2[3U] ;
   u8 saveMSR ;
   u8 saveSR[8U] ;
   u8 saveGR[25U] ;
   u8 saveAR_INDEX ;
   u8 saveAR[21U] ;
   u8 saveDACMASK ;
   u8 saveDACDATA[768U] ;
   u8 saveCR[37U] ;
   struct __anonstruct_mm_126 mm ;
};
#line 123 "include/linux/types.h"
typedef __u64 uint64_t;
#line 21 "include/asm-generic/page.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 220 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100U] ;
};
#line 67 "include/drm/drm.h"
struct drm_clip_rect {
   unsigned short x1 ;
   unsigned short y1 ;
   unsigned short x2 ;
   unsigned short y2 ;
};
#line 1366 "include/drm/drmP.h"
enum ldv_18550 {
    I915_INIT_DMA = 1,
    I915_CLEANUP_DMA = 2,
    I915_RESUME_DMA = 3
} ;
#line 1372 "include/drm/drmP.h"
struct _drm_i915_init {
   enum ldv_18550 func ;
   unsigned int mmio_offset ;
   int sarea_priv_offset ;
   unsigned int ring_start ;
   unsigned int ring_end ;
   unsigned int ring_size ;
   unsigned int front_offset ;
   unsigned int back_offset ;
   unsigned int depth_offset ;
   unsigned int w ;
   unsigned int h ;
   unsigned int pitch ;
   unsigned int pitch_bits ;
   unsigned int back_pitch ;
   unsigned int depth_pitch ;
   unsigned int cpp ;
   unsigned int chipset ;
};
#line 64 "include/drm/i915_drm.h"
typedef struct _drm_i915_init drm_i915_init_t;
#line 117 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 206 "include/drm/i915_drm.h"
typedef struct _drm_i915_batchbuffer drm_i915_batchbuffer_t;
#line 207 "include/drm/i915_drm.h"
struct _drm_i915_cmdbuffer {
   char *buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   struct drm_clip_rect *cliprects ;
};
#line 218 "include/drm/i915_drm.h"
typedef struct _drm_i915_cmdbuffer drm_i915_cmdbuffer_t;
#line 229 "include/drm/i915_drm.h"
struct drm_i915_getparam {
   int param ;
   int *value ;
};
#line 241 "include/drm/i915_drm.h"
typedef struct drm_i915_getparam drm_i915_getparam_t;
#line 242 "include/drm/i915_drm.h"
struct drm_i915_setparam {
   int param ;
   int value ;
};
#line 252 "include/drm/i915_drm.h"
typedef struct drm_i915_setparam drm_i915_setparam_t;
#line 299 "include/drm/i915_drm.h"
struct drm_i915_hws_addr {
   uint64_t addr ;
};
#line 302 "include/drm/i915_drm.h"
typedef struct drm_i915_hws_addr drm_i915_hws_addr_t;
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
typedef struct drm_i915_private drm_i915_private_t;
#line 407 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct __anonstruct_mm_127 {
   uint32_t last_gem_seqno ;
   uint32_t last_gem_throttle_seqno ;
};
#line 407 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_file_private {
   struct __anonstruct_mm_127 mm ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 219 "include/drm/i915_drm.h"
struct drm_i915_irq_emit {
   int *irq_seq ;
};
#line 224 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_emit drm_i915_irq_emit_t;
#line 225 "include/drm/i915_drm.h"
struct drm_i915_irq_wait {
   int irq_seq ;
};
#line 228 "include/drm/i915_drm.h"
typedef struct drm_i915_irq_wait drm_i915_irq_wait_t;
#line 282 "include/drm/i915_drm.h"
struct drm_i915_vblank_pipe {
   int pipe ;
};
#line 290 "include/drm/i915_drm.h"
typedef struct drm_i915_vblank_pipe drm_i915_vblank_pipe_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 253 "include/drm/i915_drm.h"
struct drm_i915_mem_alloc {
   int region ;
   int alignment ;
   int size ;
   int *region_offset ;
};
#line 263 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_alloc drm_i915_mem_alloc_t;
#line 264 "include/drm/i915_drm.h"
struct drm_i915_mem_free {
   int region ;
   int region_offset ;
};
#line 268 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_free drm_i915_mem_free_t;
#line 269 "include/drm/i915_drm.h"
struct drm_i915_mem_init_heap {
   int region ;
   int size ;
   int start ;
};
#line 274 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_init_heap drm_i915_mem_init_heap_t;
#line 275 "include/drm/i915_drm.h"
struct drm_i915_mem_destroy_heap {
   int region ;
};
#line 281 "include/drm/i915_drm.h"
typedef struct drm_i915_mem_destroy_heap drm_i915_mem_destroy_heap_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 122 "include/linux/io-mapping.h"
enum pipe {
    PIPE_A = 0,
    PIPE_B = 1
} ;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 118 "include/linux/types.h"
typedef __u8 uint8_t;
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 59 "include/linux/agp_backend.h"
struct agp_memory {
   struct agp_memory *next ;
   struct agp_memory *prev ;
   struct agp_bridge_data *bridge ;
   unsigned long *memory ;
   size_t page_count ;
   int key ;
   int num_scratch_pages ;
   off_t pg_start ;
   u32 type ;
   u32 physical ;
   bool is_bound ;
   bool is_flushed ;
   bool vmalloc_flag ;
   struct list_head mapped_list ;
};
#line 229 "include/linux/pagemap.h"
typedef int filler_t(void * , struct page * );
#line 496 "include/drm/drmP.h"
struct drm_mm_node {
   struct list_head fl_entry ;
   struct list_head ml_entry ;
   int free ;
   unsigned long start ;
   unsigned long size ;
   struct drm_mm *mm ;
   void *private ;
};
#line 303 "include/drm/i915_drm.h"
struct drm_i915_gem_init {
   uint64_t gtt_start ;
   uint64_t gtt_end ;
};
#line 316 "include/drm/i915_drm.h"
struct drm_i915_gem_create {
   uint64_t size ;
   uint32_t handle ;
   uint32_t pad ;
};
#line 332 "include/drm/i915_drm.h"
struct drm_i915_gem_pread {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 348 "include/drm/i915_drm.h"
struct drm_i915_gem_pwrite {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t data_ptr ;
};
#line 364 "include/drm/i915_drm.h"
struct drm_i915_gem_mmap {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t offset ;
   uint64_t size ;
   uint64_t addr_ptr ;
};
#line 384 "include/drm/i915_drm.h"
struct drm_i915_gem_set_domain {
   uint32_t handle ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 395 "include/drm/i915_drm.h"
struct drm_i915_gem_sw_finish {
   uint32_t handle ;
};
#line 400 "include/drm/i915_drm.h"
struct drm_i915_gem_relocation_entry {
   uint32_t target_handle ;
   uint32_t delta ;
   uint64_t offset ;
   uint64_t presumed_offset ;
   uint32_t read_domains ;
   uint32_t write_domain ;
};
#line 445 "include/drm/i915_drm.h"
struct drm_i915_gem_exec_object {
   uint32_t handle ;
   uint32_t relocation_count ;
   uint64_t relocs_ptr ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 493 "include/drm/i915_drm.h"
struct drm_i915_gem_execbuffer {
   uint64_t buffers_ptr ;
   uint32_t buffer_count ;
   uint32_t batch_start_offset ;
   uint32_t batch_len ;
   uint32_t DR1 ;
   uint32_t DR4 ;
   uint32_t num_cliprects ;
   uint64_t cliprects_ptr ;
};
#line 518 "include/drm/i915_drm.h"
struct drm_i915_gem_pin {
   uint32_t handle ;
   uint32_t pad ;
   uint64_t alignment ;
   uint64_t offset ;
};
#line 536 "include/drm/i915_drm.h"
struct drm_i915_gem_busy {
   uint32_t handle ;
   uint32_t busy ;
};
#line 604 "include/drm/i915_drm.h"
struct drm_i915_gem_get_aperture {
   uint64_t aper_size ;
   uint64_t aper_available_size ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_object {
   struct drm_gem_object *obj ;
   struct drm_mm_node *gtt_space ;
   struct list_head list ;
   int active ;
   int dirty ;
   struct agp_memory *agp_mem ;
   struct page **page_list ;
   uint32_t gtt_offset ;
   int gtt_bound ;
   int pin_count ;
   uint32_t last_rendering_seqno ;
   uint32_t tiling_mode ;
   uint32_t agp_type ;
   uint8_t *page_cpu_valid ;
};
#line 387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_i915_gem_request {
   uint32_t seqno ;
   unsigned long emitted_jiffies ;
   struct list_head list ;
};
#line 82 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
struct drm_proc_list {
   char const   *name ;
   int (*f)(char * , char ** , off_t  , int  , int * , void * ) ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 544 "include/drm/i915_drm.h"
struct drm_i915_gem_set_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t stride ;
   uint32_t swizzle_mode ;
};
#line 587 "include/drm/i915_drm.h"
struct drm_i915_gem_get_tiling {
   uint32_t handle ;
   uint32_t tiling_mode ;
   uint32_t swizzle_mode ;
};
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct opregion_header {
   u8 signature[16U] ;
   u32 size ;
   u32 opregion_ver ;
   u8 bios_ver[32U] ;
   u8 vbios_ver[16U] ;
   u8 driver_ver[16U] ;
   u32 mboxes ;
   u8 reserved[164U] ;
};
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_acpi {
   u32 drdy ;
   u32 csts ;
   u32 cevt ;
   u8 rsvd1[20U] ;
   u32 didl[8U] ;
   u32 cpdl[8U] ;
   u32 cadl[8U] ;
   u32 nadl[8U] ;
   u32 aslp ;
   u32 tidx ;
   u32 chpd ;
   u32 clid ;
   u32 cdck ;
   u32 sxsw ;
   u32 evts ;
   u32 cnot ;
   u32 nrdy ;
   u8 rsvd2[60U] ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_swsci {
   u32 scic ;
   u32 parm ;
   u32 dslp ;
   u8 rsvd[244U] ;
};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
struct opregion_asle {
   u32 ardy ;
   u32 aslc ;
   u32 tche ;
   u32 alsi ;
   u32 bclp ;
   u32 pfit ;
   u32 cblv ;
   u16 bclm[20U] ;
   u32 cpfm ;
   u32 epfm ;
   u8 plut[74U] ;
   u32 pfmb ;
   u8 rsvd[102U] ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 273 "include/drm/drmP.h"
typedef int drm_ioctl_compat_t(struct file * , unsigned int  , unsigned long  );
#line 615 "include/drm/i915_drm.h"
struct _drm_i915_batchbuffer32 {
   int start ;
   int used ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_batchbuffer32 drm_i915_batchbuffer32_t;
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct _drm_i915_cmdbuffer32 {
   u32 buf ;
   int sz ;
   int DR1 ;
   int DR4 ;
   int num_cliprects ;
   u32 cliprects ;
};
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct _drm_i915_cmdbuffer32 drm_i915_cmdbuffer32_t;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_irq_emit32 {
   u32 irq_seq ;
};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_irq_emit32 drm_i915_irq_emit32_t;
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_getparam32 {
   int param ;
   u32 value ;
};
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_getparam32 drm_i915_getparam32_t;
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
struct drm_i915_mem_alloc32 {
   int region ;
   int alignment ;
   int size ;
   u32 region_offset ;
};
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
typedef struct drm_i915_mem_alloc32 drm_i915_mem_alloc32_t;
#line 25 "include/linux/lockdep.h"
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
#line 221 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 86 "include/linux/module.h"
extern struct module __this_module ;
#line 613 "include/linux/pci.h"
extern int pci_enable_device(struct pci_dev * ) ;
#line 625
extern void pci_disable_device(struct pci_dev * ) ;
#line 626
extern void pci_set_master(struct pci_dev * ) ;
#line 657
extern int pci_save_state(struct pci_dev * ) ;
#line 658
extern int pci_restore_state(struct pci_dev * ) ;
#line 659
extern int pci_set_power_state(struct pci_dev * , pci_power_t  ) ;
#line 984 "include/drm/drmP.h"
extern int drm_init(struct drm_driver * ) ;
#line 985
extern void drm_exit(struct drm_driver * ) ;
#line 986
extern int drm_ioctl(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
#line 993
extern int drm_open(struct inode * , struct file * ) ;
#line 995
extern int drm_fasync(int  , struct file * , int  ) ;
#line 996
extern int drm_release(struct inode * , struct file * ) ;
#line 999
extern int drm_mmap(struct file * , struct vm_area_struct * ) ;
#line 1000
extern unsigned long drm_core_get_map_ofs(struct drm_map * ) ;
#line 1001
extern unsigned long drm_core_get_reg_ofs(struct drm_device * ) ;
#line 1002
extern unsigned int drm_poll(struct file * , struct poll_table_struct * ) ;
#line 1133
extern void drm_core_reclaim_buffers(struct drm_device * , struct drm_file * ) ;
#line 415 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
struct drm_ioctl_desc i915_ioctls[36U] ;
#line 416
int i915_max_ioctl ;
#line 420
int i915_driver_load(struct drm_device *dev , unsigned long flags ) ;
#line 421
int i915_driver_unload(struct drm_device *dev ) ;
#line 422
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 423
void i915_driver_lastclose(struct drm_device *dev ) ;
#line 424
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 426
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) ;
#line 428
int i915_driver_device_is_agp(struct drm_device *dev ) ;
#line 429
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) ;
#line 443
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) ;
#line 444
void i915_driver_irq_preinstall(struct drm_device *dev ) ;
#line 445
int i915_driver_irq_postinstall(struct drm_device *dev ) ;
#line 446
void i915_driver_irq_uninstall(struct drm_device *dev ) ;
#line 451
int i915_enable_vblank(struct drm_device *dev , int pipe ) ;
#line 452
void i915_disable_vblank(struct drm_device *dev , int pipe ) ;
#line 453
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) ;
#line 513
int i915_gem_proc_init(struct drm_minor *minor ) ;
#line 514
void i915_gem_proc_cleanup(struct drm_minor *minor ) ;
#line 515
int i915_gem_init_object(struct drm_gem_object *obj ) ;
#line 516
void i915_gem_free_object(struct drm_gem_object *obj ) ;
#line 542
int i915_save_state(struct drm_device *dev ) ;
#line 543
int i915_restore_state(struct drm_device *dev ) ;
#line 551
int intel_opregion_init(struct drm_device *dev ) ;
#line 552
void intel_opregion_free(struct drm_device *dev ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct pci_device_id pciidlist[24U]  = 
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
  {      {32902U, 13687U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9570U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 13698U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9586U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9602U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9610U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 9618U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10098U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10146U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10158U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10610U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10626U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10642U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10658U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10674U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10690U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10706U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10754U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10770U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 10818U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11778U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11794U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {32902U, 11810U, 4294967295U, 4294967295U, 196608U, 16776960U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_suspend(struct drm_device *dev , pm_message_t state ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 59
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 61
  if ((unsigned long )dev == (unsigned long )((struct drm_device *)0) || (unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 62
    printk("<3>dev: %p, dev_priv: %p\n", dev, dev_priv);
#line 63
    printk("<3>DRM not initialized, aborting suspend.\n");
#line 64
    return (-19);
  } else {

  }
#line 67
  if (state.event == 8) {
#line 68
    return (0);
  } else {

  }
#line 70
  pci_save_state(dev->pdev);
#line 72
  i915_save_state(dev);
#line 74
  intel_opregion_free(dev);
#line 76
  if (state.event == 2) {
#line 78
    pci_disable_device(dev->pdev);
#line 79
    pci_set_power_state(dev->pdev, 3);
  } else {

  }
#line 82
  return (0);
}
}
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_resume(struct drm_device *dev ) 
{ 
  int tmp ;

  {
#line 87
  pci_set_power_state(dev->pdev, 0);
#line 88
  pci_restore_state(dev->pdev);
#line 89
  tmp = pci_enable_device(dev->pdev);
#line 89
  if (tmp != 0) {
#line 90
    return (-1);
  } else {

  }
#line 91
  pci_set_master(dev->pdev);
#line 93
  i915_restore_state(dev);
#line 95
  intel_opregion_init(dev);
#line 97
  return (0);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static struct drm_driver driver  = 
#line 100
     {& i915_driver_load, 0, & i915_driver_open, & i915_driver_preclose, & i915_driver_postclose,
    & i915_driver_lastclose, & i915_driver_unload, & i915_suspend, & i915_resume,
    0, 0, 0, 0, 0, 0, 0, 0, & i915_get_vblank_counter, & i915_enable_vblank, & i915_disable_vblank,
    & i915_driver_device_is_agp, & i915_driver_irq_handler, & i915_driver_irq_preinstall,
    & i915_driver_irq_postinstall, & i915_driver_irq_uninstall, & drm_core_reclaim_buffers,
    0, 0, & drm_core_get_map_ofs, & drm_core_get_reg_ofs, 0, & i915_gem_proc_init,
    & i915_gem_proc_cleanup, & i915_gem_init_object, & i915_gem_free_object, 1, 6,
    0, (char *)"i915", (char *)"Intel Graphics", (char *)"20080730", 4291U, 0, (struct drm_ioctl_desc *)(& i915_ioctls),
    0, {& __this_module, 0, 0, 0, 0, 0, 0, & drm_poll, & drm_ioctl, 0, & i915_compat_ioctl,
        & drm_mmap, & drm_open, 0, & drm_release, 0, 0, & drm_fasync, 0, 0, 0, 0,
        0, 0, 0, 0, 0}, {{0, 0}, (char *)"i915", (struct pci_device_id  const  *)(& pciidlist),
                         0, 0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                     0, 0}, {{{0U}, 0U, 0U, 0, {0,
                                                                                0,
                                                                                0,
                                                                                0}},
                                                             {0, 0}}}};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static int i915_init(void) 
{ 
  int tmp ;

  {
#line 159
  driver.num_ioctls = i915_max_ioctl;
#line 160
  tmp = drm_init(& driver);
#line 160
  return (tmp);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
static void i915_exit(void) 
{ 


  {
#line 165
  drm_exit(& driver);
#line 166
  return;
}
}
#line 191
void ldv_check_final_state(void) ;
#line 200
void ldv_initialize(void) ;
#line 203
extern void ldv_handler_precall(void) ;
#line 206
extern int nondet_int(void) ;
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_drv.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct drm_device *var_group1 ;
  pm_message_t var_i915_suspend_0_p1 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 242
  LDV_IN_INTERRUPT = 1;
#line 251
  ldv_initialize();
#line 260
  ldv_handler_precall();
#line 261
  tmp = i915_init();
#line 261
  if (tmp != 0) {
#line 262
    goto ldv_final;
  } else {

  }
#line 266
  goto ldv_23753;
  ldv_23752: 
#line 269
  tmp___0 = nondet_int();
#line 269
  switch (tmp___0) {
  case 0: 
#line 279
  ldv_handler_precall();
#line 280
  i915_suspend(var_group1, var_i915_suspend_0_p1);
#line 291
  goto ldv_23749;
  case 1: 
#line 300
  ldv_handler_precall();
#line 301
  i915_resume(var_group1);
#line 312
  goto ldv_23749;
  default: ;
#line 313
  goto ldv_23749;
  }
  ldv_23749: ;
  ldv_23753: 
#line 266
  tmp___1 = nondet_int();
#line 266
  if (tmp___1 != 0) {
#line 267
    goto ldv_23752;
  } else {

  }

#line 328
  ldv_handler_precall();
#line 329
  i915_exit();
  ldv_final: 
#line 332
  ldv_check_final_state();
#line 335
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 51 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 149 "include/linux/mutex.h"
extern void mutex_unlock(struct mutex * ) ;
#line 152
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 156
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) ;
#line 160
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 164
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_struct_mutex_of_drm_device(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_struct_mutex_of_drm_device(struct mutex *lock ) ;
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (8UL) {
  case 2UL: 
#line 208
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5561;
  case 4UL: 
#line 208
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5561;
  case 8UL: 
#line 208
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5561;
  default: 
#line 208
  __bad_pda_field();
  }
  ldv_5561: 
#line 208
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 209
  return (ti);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 47 "include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int  ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
#line 20
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
#line 29
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
extern void *ioremap_nocache(resource_size_t  , unsigned long  ) ;
#line 181 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void *ioremap(resource_size_t offset , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 183
  tmp = ioremap_nocache(offset, size);
#line 183
  return (tmp);
}
}
#line 186
extern void iounmap(void volatile   * ) ;
#line 778 "include/linux/pci.h"
extern int pci_enable_msi(struct pci_dev * ) ;
#line 780
extern void pci_disable_msi(struct pci_dev * ) ;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_user_generic(void * , void const   * , unsigned int  ) ;
#line 22
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_from_user(void *dst , void const   *src , unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 31
  ret = 0;
#line 33
  tmp = copy_user_generic(dst, src, size);
#line 33
  return ((int )tmp);
#line 34
  switch (size) {
  case 1U: 
#line 35
  __asm__  volatile   ("1:\tmovb %2,%b1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=q" (*((u8 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (1), "0" (ret));
#line 37
  return (ret);
  case 2U: 
#line 38
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (2), "0" (ret));
#line 40
  return (ret);
  case 4U: 
#line 41
  __asm__  volatile   ("1:\tmovl %2,%k1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u32 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (4), "0" (ret));
#line 43
  return (ret);
  case 8U: 
#line 44
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (8), "0" (ret));
#line 46
  return (ret);
  case 10U: 
#line 48
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (10), "0" (ret));
#line 50
  tmp___0 = __builtin_expect(ret != 0, 0L);
#line 50
  if (tmp___0 != 0L) {
#line 51
    return (ret);
  } else {

  }
#line 52
  __asm__  volatile   ("1:\tmovw %2,%w1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u16 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (2), "0" (ret));
#line 55
  return (ret);
  case 16U: 
#line 57
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst)): "m" (*((struct __large_struct *)src)),
                       "i" (16), "0" (ret));
#line 59
  tmp___1 = __builtin_expect(ret != 0, 0L);
#line 59
  if (tmp___1 != 0L) {
#line 60
    return (ret);
  } else {

  }
#line 61
  __asm__  volatile   ("1:\tmovq %2,%1\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (ret),
                       "=r" (*((u64 *)dst + 8U)): "m" (*((struct __large_struct *)src + 8U)),
                       "i" (8), "0" (ret));
#line 64
  return (ret);
  default: 
#line 66
  tmp___2 = copy_user_generic(dst, src, size);
#line 66
  return ((int )tmp___2);
  }
}
}
#line 1124 "include/drm/drmP.h"
extern unsigned long drm_get_resource_start(struct drm_device * , unsigned int  ) ;
#line 1126
extern unsigned long drm_get_resource_len(struct drm_device * , unsigned int  ) ;
#line 1141
extern int drm_irq_uninstall(struct drm_device * ) ;
#line 1146
extern int drm_vblank_init(struct drm_device * , int  ) ;
#line 1196
extern unsigned int drm_debug ;
#line 1203
extern drm_local_map_t *drm_getsarea(struct drm_device * ) ;
#line 1224
extern drm_dma_handle_t *drm_pci_alloc(struct drm_device * , size_t  , size_t  , dma_addr_t  ) ;
#line 1227
extern void drm_pci_free(struct drm_device * , drm_dma_handle_t * ) ;
#line 1312
extern void drm_core_ioremap(struct drm_map * , struct drm_device * ) ;
#line 1314
extern void drm_core_ioremapfree(struct drm_map * , struct drm_device * ) ;
#line 1350 "include/drm/drmP.h"
__inline static void *drm_alloc(size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1352
  tmp = kmalloc(size, 208U);
#line 1352
  return (tmp);
}
}
#line 1356 "include/drm/drmP.h"
__inline static void drm_free(void *pt , size_t size , int area ) 
{ 


  {
#line 1358
  kfree((void const   *)pt);
#line 1359
  return;
}
}
#line 419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_kernel_lost_context(struct drm_device *dev ) ;
#line 431
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) ;
#line 436
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 438
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 447
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 449
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 454
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 466
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 468
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 470
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 472
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 474
void i915_mem_takedown(struct mem_block **heap ) ;
#line 475
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) ;
#line 478
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 480
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 482
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 484
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 486
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 488
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 490
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 492
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 494
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 496
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 498
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 500
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 502
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 504
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 506
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 508
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 510
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) ;
#line 512
void i915_gem_load(struct drm_device *dev ) ;
#line 519
void i915_gem_lastclose(struct drm_device *dev ) ;
#line 631
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) ;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_wait_ring(struct drm_device *dev , int n , char const   *caller ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  u32 acthd_reg ;
  u32 last_acthd ;
  unsigned int tmp ;
  u32 acthd ;
  u32 last_head ;
  unsigned int tmp___0 ;
  int i ;
  unsigned int tmp___1 ;

  {
#line 56
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 57
  ring = & dev_priv->ring;
#line 58
  acthd_reg = ((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810 ? 8308U : 8392U;
#line 59
  tmp = readl((void const volatile   *)dev_priv->regs + (unsigned long )acthd_reg);
#line 59
  last_acthd = tmp;
#line 61
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 61
  last_head = tmp___0 & 2097148U;
#line 64
  i = 0;
#line 64
  goto ldv_23745;
  ldv_23744: 
#line 65
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 65
  ring->head = (int )tmp___1 & 2097148;
#line 66
  acthd = readl((void const volatile   *)dev_priv->regs + (unsigned long )acthd_reg);
#line 67
  ring->space = ring->head + (-8 - ring->tail);
#line 68
  if (ring->space < 0) {
#line 69
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 70
  if (ring->space >= n) {
#line 71
    return (0);
  } else {

  }
#line 73
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 74
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 76
  if ((u32 )ring->head != last_head) {
#line 77
    i = 0;
  } else {

  }
#line 78
  if (acthd != last_acthd) {
#line 79
    i = 0;
  } else {

  }
#line 81
  last_head = (u32 )ring->head;
#line 82
  last_acthd = acthd;
#line 83
  msleep_interruptible(10U);
#line 64
  i = i + 1;
  ldv_23745: ;
#line 64
  if (i <= 99999) {
#line 65
    goto ldv_23744;
  } else {

  }

#line 87
  return (-16);
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_init_phys_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 96
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 98
  dev_priv->status_page_dmah = drm_pci_alloc(dev, 4096UL, 4096UL, 4294967295ULL);
#line 101
  if ((unsigned long )dev_priv->status_page_dmah == (unsigned long )((drm_dma_handle_t *)0)) {
#line 102
    printk("<3>[drm:%s] *ERROR* Can not allocate hardware status page\n", "i915_init_phys_hws");
#line 103
    return (-12);
  } else {

  }
#line 105
  dev_priv->hw_status_page = (dev_priv->status_page_dmah)->vaddr;
#line 106
  dev_priv->dma_status_page = (dev_priv->status_page_dmah)->busaddr;
#line 108
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 110
  writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)dev_priv->regs + 8320U);
#line 111
  if (drm_debug != 0U) {
#line 111
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_init_phys_hws");
  } else {

  }
#line 112
  return (0);
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static void i915_free_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 121
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 122
  if ((unsigned long )dev_priv->status_page_dmah != (unsigned long )((drm_dma_handle_t *)0)) {
#line 123
    drm_pci_free(dev, dev_priv->status_page_dmah);
#line 124
    dev_priv->status_page_dmah = 0;
  } else {

  }
#line 127
  if (dev_priv->status_gfx_addr != 0U) {
#line 128
    dev_priv->status_gfx_addr = 0U;
#line 129
    drm_core_ioremapfree(& dev_priv->hws_map, dev);
  } else {

  }
#line 133
  writel(536866816U, (void volatile   *)dev_priv->regs + 8320U);
#line 134
  return;
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_kernel_lost_context(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_ring_buffer_t *ring ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 138
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 139
  ring = & dev_priv->ring;
#line 141
  tmp = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 141
  ring->head = (int )tmp & 2097148;
#line 142
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 142
  ring->tail = (int )tmp___0 & 2097144;
#line 143
  ring->space = ring->head + (-8 - ring->tail);
#line 144
  if (ring->space < 0) {
#line 145
    ring->space = (int )((unsigned int )ring->space + (unsigned int )ring->Size);
  } else {

  }
#line 147
  if (ring->head == ring->tail && (unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 148
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 1;
  } else {

  }
#line 149
  return;
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_cleanup(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 153
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 158
  if (dev->irq_enabled != 0) {
#line 159
    drm_irq_uninstall(dev);
  } else {

  }
#line 161
  if ((unsigned long )dev_priv->ring.virtual_start != (unsigned long )((u8 *)0)) {
#line 162
    drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 163
    dev_priv->ring.virtual_start = 0;
#line 164
    dev_priv->ring.map.handle = 0;
#line 165
    dev_priv->ring.map.size = 0UL;
  } else {

  }
#line 169
  if ((((dev->pci_device == 10690 || dev->pci_device == 10674) || dev->pci_device == 10706) || dev->pci_device == 10818) || ((dev->pci_device == 11778 || dev->pci_device == 11794) || dev->pci_device == 11810)) {
#line 170
    i915_free_hws(dev);
  } else {

  }
#line 172
  dev_priv->sarea = 0;
#line 173
  dev_priv->sarea_priv = 0;
#line 175
  return (0);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_initialize(struct drm_device *dev , drm_i915_init_t *init ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 180
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 182
  dev_priv->sarea = drm_getsarea(dev);
#line 183
  if ((unsigned long )dev_priv->sarea == (unsigned long )((drm_local_map_t *)0)) {
#line 184
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_initialize");
#line 185
    i915_dma_cleanup(dev);
#line 186
    return (-22);
  } else {

  }
#line 189
  dev_priv->sarea_priv = (drm_i915_sarea_t *)(dev_priv->sarea)->handle + (unsigned long )init->sarea_priv_offset;
#line 192
  if (init->ring_size != 0U) {
#line 193
    if ((unsigned long )dev_priv->ring.ring_obj != (unsigned long )((struct drm_gem_object *)0)) {
#line 194
      i915_dma_cleanup(dev);
#line 195
      printk("<3>[drm:%s] *ERROR* Client tried to initialize ringbuffer in GEM mode\n",
             "i915_initialize");
#line 197
      return (-22);
    } else {

    }
#line 200
    dev_priv->ring.Size = (unsigned long )init->ring_size;
#line 201
    dev_priv->ring.tail_mask = (int )((unsigned int )dev_priv->ring.Size - 1U);
#line 203
    dev_priv->ring.map.offset = (unsigned long )init->ring_start;
#line 204
    dev_priv->ring.map.size = (unsigned long )init->ring_size;
#line 205
    dev_priv->ring.map.type = _DRM_FRAME_BUFFER;
#line 206
    dev_priv->ring.map.flags = 0;
#line 207
    dev_priv->ring.map.mtrr = 0;
#line 209
    drm_core_ioremap(& dev_priv->ring.map, dev);
#line 211
    if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 212
      i915_dma_cleanup(dev);
#line 213
      printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
             "i915_initialize");
#line 215
      return (-12);
    } else {

    }
  } else {

  }
#line 219
  dev_priv->ring.virtual_start = (u8 *)dev_priv->ring.map.handle;
#line 221
  dev_priv->cpp = init->cpp;
#line 222
  dev_priv->back_offset = (int )init->back_offset;
#line 223
  dev_priv->front_offset = (int )init->front_offset;
#line 224
  dev_priv->current_page = 0;
#line 225
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 229
  dev_priv->allow_batchbuffer = 1;
#line 231
  return (0);
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_resume(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 236
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 238
  if (drm_debug != 0U) {
#line 238
    printk("<7>[drm:%s] %s\n", "i915_dma_resume", "i915_dma_resume");
  } else {

  }
#line 240
  if ((unsigned long )dev_priv->sarea == (unsigned long )((drm_local_map_t *)0)) {
#line 241
    printk("<3>[drm:%s] *ERROR* can not find sarea!\n", "i915_dma_resume");
#line 242
    return (-22);
  } else {

  }
#line 245
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 246
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for ring buffer\n",
           "i915_dma_resume");
#line 248
    return (-12);
  } else {

  }
#line 252
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 253
    printk("<3>[drm:%s] *ERROR* Can not find hardware status page\n", "i915_dma_resume");
#line 254
    return (-22);
  } else {

  }
#line 256
  if (drm_debug != 0U) {
#line 256
    printk("<7>[drm:%s] hw status page @ %p\n", "i915_dma_resume", dev_priv->hw_status_page);
  } else {

  }
#line 258
  if (dev_priv->status_gfx_addr != 0U) {
#line 259
    writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
  } else {
#line 261
    writel((unsigned int )dev_priv->dma_status_page, (void volatile   *)dev_priv->regs + 8320U);
  }
#line 262
  if (drm_debug != 0U) {
#line 262
    printk("<7>[drm:%s] Enabled hardware status page\n", "i915_dma_resume");
  } else {

  }
#line 264
  return (0);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dma_init(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_init_t *init ;
  int retcode ;

  {
#line 270
  init = (drm_i915_init_t *)data;
#line 271
  retcode = 0;
#line 273
  switch ((unsigned int )init->func) {
  case 1U: 
#line 275
  retcode = i915_initialize(dev, init);
#line 276
  goto ldv_23784;
  case 2U: 
#line 278
  retcode = i915_dma_cleanup(dev);
#line 279
  goto ldv_23784;
  case 3U: 
#line 281
  retcode = i915_dma_resume(dev);
#line 282
  goto ldv_23784;
  default: 
#line 284
  retcode = -22;
#line 285
  goto ldv_23784;
  }
  ldv_23784: ;
#line 288
  return (retcode);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int do_validate_cmd(int cmd ) 
{ 


  {
#line 302
  switch ((int )((unsigned int )cmd >> 29)) {
  case 0: ;
#line 304
  switch ((cmd >> 23) & 63) {
  case 0: ;
#line 306
  return (1);
  case 4: ;
#line 308
  return (1);
  default: ;
#line 310
  return (0);
  }
#line 312
  goto ldv_23795;
  case 1: ;
#line 314
  return (0);
  case 2: ;
#line 316
  return ((cmd & 255) + 2);
  case 3: ;
#line 318
  if (((cmd >> 24) & 31) <= 24) {
#line 319
    return (1);
  } else {

  }
#line 321
  switch ((cmd >> 24) & 31) {
  case 28: ;
#line 323
  return (1);
  case 29: ;
#line 325
  switch ((cmd >> 16) & 255) {
  case 3: ;
#line 327
  return ((cmd & 31) + 2);
  case 4: ;
#line 329
  return ((cmd & 15) + 2);
  default: ;
#line 331
  return ((cmd & 65535) + 2);
  }
  case 30: ;
#line 334
  if ((cmd & 8388608) != 0) {
#line 335
    return ((cmd & 65535) + 1);
  } else {
#line 337
    return (1);
  }
  case 31: ;
#line 339
  if ((cmd & 8388608) == 0) {
#line 340
    return ((cmd & 131071) + 2);
  } else
#line 341
  if ((cmd & 131072) != 0) {
#line 342
    if ((cmd & 65535) == 0) {
#line 343
      return (0);
    } else {
#line 345
      return (((cmd & 65535) + 1) / 2 + 1);
    }
  } else {
#line 347
    return (2);
  }
  default: ;
#line 349
  return (0);
  }
  default: ;
#line 352
  return (0);
  }
  ldv_23795: ;
#line 355
  return (0);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int validate_cmd(int cmd ) 
{ 
  int ret ;
  int tmp ;

  {
#line 360
  tmp = do_validate_cmd(cmd);
#line 360
  ret = tmp;
#line 364
  return (ret);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_emit_cmds(struct drm_device *dev , int *buffer , int dwords ) 
{ 
  drm_i915_private_t *dev_priv ;
  int i ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int cmd ;
  int sz ;
  int tmp ;
  int tmp___0 ;

  {
#line 369
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 373
  if ((unsigned long )(dwords + 1) * 4UL >= dev_priv->ring.Size - 8UL) {
#line 374
    return (-22);
  } else {

  }
#line 376
  if (dev_priv->ring.space < ((dwords + 1) & -2) * 4) {
#line 376
    i915_wait_ring(dev, ((dwords + 1) & -2) * 4, "i915_emit_cmds");
  } else {

  }
#line 376
  outcount = 0U;
#line 376
  outring = (unsigned int )dev_priv->ring.tail;
#line 376
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 376
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 378
  i = 0;
#line 378
  goto ldv_23830;
  ldv_23829: 
#line 381
  tmp = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                         4U);
#line 381
  if (tmp != 0) {
#line 382
    return (-22);
  } else {

  }
#line 384
  sz = validate_cmd(cmd);
#line 384
  if (sz == 0 || i + sz > dwords) {
#line 385
    return (-22);
  } else {

  }
#line 387
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 387
  outcount = outcount + 1U;
#line 387
  outring = outring + 4U;
#line 387
  outring = outring & ringmask;
#line 389
  goto ldv_23827;
  ldv_23826: 
#line 390
  tmp___0 = __copy_from_user((void *)(& cmd), (void const   *)buffer + (unsigned long )i,
                             4U);
#line 390
  if (tmp___0 != 0) {
#line 392
    return (-22);
  } else {

  }
#line 394
  *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )cmd;
#line 394
  outcount = outcount + 1U;
#line 394
  outring = outring + 4U;
#line 394
  outring = outring & ringmask;
  ldv_23827: 
#line 389
  i = i + 1;
#line 389
  sz = sz - 1;
#line 389
  if (sz != 0) {
#line 390
    goto ldv_23826;
  } else {

  }

  ldv_23830: ;
#line 378
  if (i < dwords) {
#line 379
    goto ldv_23829;
  } else {

  }

#line 398
  if (dwords & 1) {
#line 399
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 399
    outcount = outcount + 1U;
#line 399
    outring = outring + 4U;
#line 399
    outring = outring & ringmask;
  } else {

  }
#line 401
  dev_priv->ring.tail = (int )outring;
#line 401
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 401
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 403
  return (0);
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_emit_box(struct drm_device *dev , struct drm_clip_rect *boxes , int i , int DR1 ,
                  int DR4 ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect box ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int tmp ;

  {
#line 411
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 415
  tmp = __copy_from_user((void *)(& box), (void const   *)boxes + (unsigned long )i,
                         8U);
#line 415
  if (tmp != 0) {
#line 416
    return (-14);
  } else {

  }
#line 419
  if ((((int )box.y2 <= (int )box.y1 || (int )box.x2 <= (int )box.x1) || (unsigned int )box.y2 == 0U) || (unsigned int )box.x2 == 0U) {
#line 420
    printk("<3>[drm:%s] *ERROR* Bad box %d,%d..%d,%d\n", "i915_emit_box", (int )box.x1,
           (int )box.y1, (int )box.x2, (int )box.y2);
#line 422
    return (-22);
  } else {

  }
#line 425
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 426
    if (dev_priv->ring.space <= 15) {
#line 426
      i915_wait_ring(dev, 16, "i915_emit_box");
    } else {

    }
#line 426
    outcount = 0U;
#line 426
    outring = (unsigned int )dev_priv->ring.tail;
#line 426
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 426
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 427
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2030043138U;
#line 427
    outcount = outcount + 1U;
#line 427
    outring = outring + 4U;
#line 427
    outring = outring & ringmask;
#line 428
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 428
    outcount = outcount + 1U;
#line 428
    outring = outring + 4U;
#line 428
    outring = outring & ringmask;
#line 429
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 429
    outcount = outcount + 1U;
#line 429
    outring = outring + 4U;
#line 429
    outring = outring & ringmask;
#line 430
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 430
    outcount = outcount + 1U;
#line 430
    outring = outring + 4U;
#line 430
    outring = outring & ringmask;
#line 431
    dev_priv->ring.tail = (int )outring;
#line 431
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 431
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 433
    if (dev_priv->ring.space <= 23) {
#line 433
      i915_wait_ring(dev, 24, "i915_emit_box");
    } else {

    }
#line 433
    outcount = 0U;
#line 433
    outring = (unsigned int )dev_priv->ring.tail;
#line 433
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 433
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 434
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 2105540611U;
#line 434
    outcount = outcount + 1U;
#line 434
    outring = outring + 4U;
#line 434
    outring = outring & ringmask;
#line 435
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR1;
#line 435
    outcount = outcount + 1U;
#line 435
    outring = outring + 4U;
#line 435
    outring = outring & ringmask;
#line 436
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((int )box.x1 | ((int )box.y1 << 16));
#line 436
    outcount = outcount + 1U;
#line 436
    outring = outring + 4U;
#line 436
    outring = outring & ringmask;
#line 437
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((((int )box.x2 + -1) & 65535) | (((int )box.y2 + -1) << 16));
#line 437
    outcount = outcount + 1U;
#line 437
    outring = outring + 4U;
#line 437
    outring = outring & ringmask;
#line 438
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )DR4;
#line 438
    outcount = outcount + 1U;
#line 438
    outring = outring + 4U;
#line 438
    outring = outring & ringmask;
#line 439
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 439
    outcount = outcount + 1U;
#line 439
    outring = outring + 4U;
#line 439
    outring = outring & ringmask;
#line 440
    dev_priv->ring.tail = (int )outring;
#line 440
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 440
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 443
  return (0);
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static void i915_emit_breadcrumb(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 452
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 455
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 456
  if ((int )dev_priv->counter < 0) {
#line 457
    dev_priv->counter = 0U;
  } else {

  }
#line 458
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 459
    (dev_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
  } else {

  }
#line 461
  if (dev_priv->ring.space <= 15) {
#line 461
    i915_wait_ring(dev, 16, "i915_emit_breadcrumb");
  } else {

  }
#line 461
  outcount = 0U;
#line 461
  outring = (unsigned int )dev_priv->ring.tail;
#line 461
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 461
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 462
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 462
  outcount = outcount + 1U;
#line 462
  outring = outring + 4U;
#line 462
  outring = outring & ringmask;
#line 463
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 463
  outcount = outcount + 1U;
#line 463
  outring = outring + 4U;
#line 463
  outring = outring & ringmask;
#line 464
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 464
  outcount = outcount + 1U;
#line 464
  outring = outring + 4U;
#line 464
  outring = outring & ringmask;
#line 465
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 465
  outcount = outcount + 1U;
#line 465
  outring = outring + 4U;
#line 465
  outring = outring & ringmask;
#line 466
  dev_priv->ring.tail = (int )outring;
#line 466
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 466
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 467
  return;
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_cmdbuffer(struct drm_device *dev , drm_i915_cmdbuffer_t *cmd ) 
{ 
  int nbox ;
  int i ;
  int count ;
  int ret ;

  {
#line 472
  nbox = cmd->num_cliprects;
#line 473
  i = 0;
#line 475
  if ((cmd->sz & 3) != 0) {
#line 476
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_cmdbuffer");
#line 477
    return (-22);
  } else {

  }
#line 480
  i915_kernel_lost_context(dev);
#line 482
  count = nbox != 0 ? nbox : 1;
#line 484
  i = 0;
#line 484
  goto ldv_23865;
  ldv_23864: ;
#line 485
  if (i < nbox) {
#line 486
    ret = i915_emit_box(dev, cmd->cliprects, i, cmd->DR1, cmd->DR4);
#line 488
    if (ret != 0) {
#line 489
      return (ret);
    } else {

    }
  } else {

  }
#line 492
  ret = i915_emit_cmds(dev, (int *)cmd->buf, cmd->sz / 4);
#line 493
  if (ret != 0) {
#line 494
    return (ret);
  } else {

  }
#line 484
  i = i + 1;
  ldv_23865: ;
#line 484
  if (i < count) {
#line 485
    goto ldv_23864;
  } else {

  }
#line 497
  i915_emit_breadcrumb(dev);
#line 498
  return (0);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_batchbuffer(struct drm_device *dev , drm_i915_batchbuffer_t *batch ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 504
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 505
  boxes = batch->cliprects;
#line 506
  nbox = batch->num_cliprects;
#line 507
  i = 0;
#line 510
  if (((batch->start | batch->used) & 7) != 0) {
#line 511
    printk("<3>[drm:%s] *ERROR* alignment", "i915_dispatch_batchbuffer");
#line 512
    return (-22);
  } else {

  }
#line 515
  i915_kernel_lost_context(dev);
#line 517
  count = nbox != 0 ? nbox : 1;
#line 519
  i = 0;
#line 519
  goto ldv_23883;
  ldv_23882: ;
#line 520
  if (i < nbox) {
#line 521
    tmp = i915_emit_box(dev, boxes, i, batch->DR1, batch->DR4);
#line 521
    ret = tmp;
#line 523
    if (ret != 0) {
#line 524
      return (ret);
    } else {

    }
  } else {

  }
#line 527
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 528
    if (dev_priv->ring.space <= 7) {
#line 528
      i915_wait_ring(dev, 8, "i915_dispatch_batchbuffer");
    } else {

    }
#line 528
    outcount = 0U;
#line 528
    outring = (unsigned int )dev_priv->ring.tail;
#line 528
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 528
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 529
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 530
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411042176U;
#line 530
      outcount = outcount + 1U;
#line 530
      outring = outring + 4U;
#line 530
      outring = outring & ringmask;
#line 531
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )batch->start;
#line 531
      outcount = outcount + 1U;
#line 531
      outring = outring + 4U;
#line 531
      outring = outring & ringmask;
    } else {
#line 533
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411041920U;
#line 533
      outcount = outcount + 1U;
#line 533
      outring = outring + 4U;
#line 533
      outring = outring & ringmask;
#line 534
      *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 534
      outcount = outcount + 1U;
#line 534
      outring = outring + 4U;
#line 534
      outring = outring & ringmask;
    }
#line 536
    dev_priv->ring.tail = (int )outring;
#line 536
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 536
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 538
    if (dev_priv->ring.space <= 15) {
#line 538
      i915_wait_ring(dev, 16, "i915_dispatch_batchbuffer");
    } else {

    }
#line 538
    outcount = 0U;
#line 538
    outring = (unsigned int )dev_priv->ring.tail;
#line 538
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 538
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 539
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 402653185U;
#line 539
    outcount = outcount + 1U;
#line 539
    outring = outring + 4U;
#line 539
    outring = outring & ringmask;
#line 540
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )(batch->start | 1);
#line 540
    outcount = outcount + 1U;
#line 540
    outring = outring + 4U;
#line 540
    outring = outring & ringmask;
#line 541
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )((batch->start + batch->used) + -4);
#line 541
    outcount = outcount + 1U;
#line 541
    outring = outring + 4U;
#line 541
    outring = outring & ringmask;
#line 542
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 542
    outcount = outcount + 1U;
#line 542
    outring = outring + 4U;
#line 542
    outring = outring & ringmask;
#line 543
    dev_priv->ring.tail = (int )outring;
#line 543
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 543
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 519
  i = i + 1;
  ldv_23883: ;
#line 519
  if (i < count) {
#line 520
    goto ldv_23882;
  } else {

  }
#line 547
  i915_emit_breadcrumb(dev);
#line 549
  return (0);
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_dispatch_flip(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  uint32_t tmp ;

  {
#line 554
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 557
  if ((unsigned long )dev_priv->sarea_priv == (unsigned long )((drm_i915_sarea_t *)0)) {
#line 558
    return (-22);
  } else {

  }
#line 560
  if (drm_debug != 0U) {
#line 560
    printk("<7>[drm:%s] %s: page=%d pfCurrentPage=%d\n", "i915_dispatch_flip", "i915_dispatch_flip",
           dev_priv->current_page, (dev_priv->sarea_priv)->pf_current_page);
  } else {

  }
#line 565
  i915_kernel_lost_context(dev);
#line 567
  if (dev_priv->ring.space <= 7) {
#line 567
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 567
  outcount = 0U;
#line 567
  outring = (unsigned int )dev_priv->ring.tail;
#line 567
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 567
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 568
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 33554433U;
#line 568
  outcount = outcount + 1U;
#line 568
  outring = outring + 4U;
#line 568
  outring = outring & ringmask;
#line 569
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 569
  outcount = outcount + 1U;
#line 569
  outring = outring + 4U;
#line 569
  outring = outring & ringmask;
#line 570
  dev_priv->ring.tail = (int )outring;
#line 570
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 570
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 572
  if (dev_priv->ring.space <= 23) {
#line 572
    i915_wait_ring(dev, 24, "i915_dispatch_flip");
  } else {

  }
#line 572
  outcount = 0U;
#line 572
  outring = (unsigned int )dev_priv->ring.tail;
#line 572
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 572
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 573
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 171966466U;
#line 573
  outcount = outcount + 1U;
#line 573
  outring = outring + 4U;
#line 573
  outring = outring & ringmask;
#line 574
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 574
  outcount = outcount + 1U;
#line 574
  outring = outring + 4U;
#line 574
  outring = outring & ringmask;
#line 575
  if (dev_priv->current_page == 0) {
#line 576
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->back_offset;
#line 576
    outcount = outcount + 1U;
#line 576
    outring = outring + 4U;
#line 576
    outring = outring & ringmask;
#line 577
    dev_priv->current_page = 1;
  } else {
#line 579
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (unsigned int volatile   )dev_priv->front_offset;
#line 579
    outcount = outcount + 1U;
#line 579
    outring = outring + 4U;
#line 579
    outring = outring & ringmask;
#line 580
    dev_priv->current_page = 0;
  }
#line 582
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 582
  outcount = outcount + 1U;
#line 582
  outring = outring + 4U;
#line 582
  outring = outring & ringmask;
#line 583
  dev_priv->ring.tail = (int )outring;
#line 583
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 583
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 585
  if (dev_priv->ring.space <= 7) {
#line 585
    i915_wait_ring(dev, 8, "i915_dispatch_flip");
  } else {

  }
#line 585
  outcount = 0U;
#line 585
  outring = (unsigned int )dev_priv->ring.tail;
#line 585
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 585
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 586
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 25165828U;
#line 586
  outcount = outcount + 1U;
#line 586
  outring = outring + 4U;
#line 586
  outring = outring & ringmask;
#line 587
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 587
  outcount = outcount + 1U;
#line 587
  outring = outring + 4U;
#line 587
  outring = outring & ringmask;
#line 588
  dev_priv->ring.tail = (int )outring;
#line 588
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 588
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 590
  tmp = dev_priv->counter;
#line 590
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 590
  (dev_priv->sarea_priv)->last_enqueue = (int )tmp;
#line 592
  if (dev_priv->ring.space <= 15) {
#line 592
    i915_wait_ring(dev, 16, "i915_dispatch_flip");
  } else {

  }
#line 592
  outcount = 0U;
#line 592
  outring = (unsigned int )dev_priv->ring.tail;
#line 592
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 592
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 593
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 593
  outcount = outcount + 1U;
#line 593
  outring = outring + 4U;
#line 593
  outring = outring & ringmask;
#line 594
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 594
  outcount = outcount + 1U;
#line 594
  outring = outring + 4U;
#line 594
  outring = outring & ringmask;
#line 595
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 595
  outcount = outcount + 1U;
#line 595
  outring = outring + 4U;
#line 595
  outring = outring & ringmask;
#line 596
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 596
  outcount = outcount + 1U;
#line 596
  outring = outring + 4U;
#line 596
  outring = outring & ringmask;
#line 597
  dev_priv->ring.tail = (int )outring;
#line 597
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 597
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 599
  (dev_priv->sarea_priv)->pf_current_page = dev_priv->current_page;
#line 600
  return (0);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_quiescent(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  int tmp ;

  {
#line 605
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 607
  i915_kernel_lost_context(dev);
#line 608
  tmp = i915_wait_ring(dev, (int )((unsigned int )dev_priv->ring.Size - 8U), "i915_quiescent");
#line 608
  return (tmp);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flush_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 616
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 616
    if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 616
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_flush_ioctl", "i915_flush_ioctl", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
             dev->lock.file_priv, file_priv);
#line 616
      return (-22);
    } else {

    }
  } else {

  }
#line 618
  ldv_mutex_lock_1(& dev->struct_mutex);
#line 619
  ret = i915_quiescent(dev);
#line 620
  ldv_mutex_unlock_2(& dev->struct_mutex);
#line 622
  return (ret);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_batchbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_batchbuffer_t *batch ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 628
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 629
  sarea_priv = dev_priv->sarea_priv;
#line 631
  batch = (drm_i915_batchbuffer_t *)data;
#line 634
  if (dev_priv->allow_batchbuffer == 0) {
#line 635
    printk("<3>[drm:%s] *ERROR* Batchbuffer ioctl disabled\n", "i915_batchbuffer");
#line 636
    return (-22);
  } else {

  }
#line 639
  if (drm_debug != 0U) {
#line 639
    printk("<7>[drm:%s] i915 batchbuffer, start %x used %d cliprects %d\n", "i915_batchbuffer",
           batch->start, batch->used, batch->num_cliprects);
  } else {

  }
#line 642
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 642
    if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 642
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_batchbuffer", "i915_batchbuffer", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
             dev->lock.file_priv, file_priv);
#line 642
      return (-22);
    } else {

    }
  } else {

  }
#line 644
  if (batch->num_cliprects != 0) {
#line 644
    tmp = current_thread_info();
#line 644
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batch->cliprects),
              "g" ((long )((unsigned long )batch->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 644
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 644
    if (tmp___0 == 0L) {
#line 647
      return (-14);
    } else {

    }
  } else {

  }
#line 649
  ldv_mutex_lock_3(& dev->struct_mutex);
#line 650
  ret = i915_dispatch_batchbuffer(dev, batch);
#line 651
  ldv_mutex_unlock_4(& dev->struct_mutex);
#line 653
  if ((unsigned long )sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 654
    sarea_priv->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 655
  return (ret);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_cmdbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_sarea_t *sarea_priv ;
  drm_i915_cmdbuffer_t *cmdbuf ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 661
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 662
  sarea_priv = dev_priv->sarea_priv;
#line 664
  cmdbuf = (drm_i915_cmdbuffer_t *)data;
#line 667
  if (drm_debug != 0U) {
#line 667
    printk("<7>[drm:%s] i915 cmdbuffer, buf %p sz %d cliprects %d\n", "i915_cmdbuffer",
           cmdbuf->buf, cmdbuf->sz, cmdbuf->num_cliprects);
  } else {

  }
#line 670
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 670
    if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 670
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_cmdbuffer", "i915_cmdbuffer", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
             dev->lock.file_priv, file_priv);
#line 670
      return (-22);
    } else {

    }
  } else {

  }
#line 673
  if (cmdbuf->num_cliprects != 0) {
#line 673
    tmp = current_thread_info();
#line 673
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuf->cliprects),
              "g" ((long )((unsigned long )cmdbuf->num_cliprects * 8UL)), "rm" (tmp->addr_limit.seg));
#line 673
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 673
    if (tmp___0 == 0L) {
#line 676
      printk("<3>[drm:%s] *ERROR* Fault accessing cliprects\n", "i915_cmdbuffer");
#line 677
      return (-14);
    } else {

    }
  } else {

  }
#line 680
  ldv_mutex_lock_5(& dev->struct_mutex);
#line 681
  ret = i915_dispatch_cmdbuffer(dev, cmdbuf);
#line 682
  ldv_mutex_unlock_6(& dev->struct_mutex);
#line 683
  if (ret != 0) {
#line 684
    printk("<3>[drm:%s] *ERROR* i915_dispatch_cmdbuffer failed\n", "i915_cmdbuffer");
#line 685
    return (ret);
  } else {

  }
#line 688
  if ((unsigned long )sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 689
    sarea_priv->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 690
  return (0);
}
}
#line 693 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_flip_bufs(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int ret ;

  {
#line 698
  if (drm_debug != 0U) {
#line 698
    printk("<7>[drm:%s] %s\n", "i915_flip_bufs", "i915_flip_bufs");
  } else {

  }
#line 700
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 700
    if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 700
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_flip_bufs", "i915_flip_bufs", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
             dev->lock.file_priv, file_priv);
#line 700
      return (-22);
    } else {

    }
  } else {

  }
#line 702
  ldv_mutex_lock_7(& dev->struct_mutex);
#line 703
  ret = i915_dispatch_flip(dev);
#line 704
  ldv_mutex_unlock_8(& dev->struct_mutex);
#line 706
  return (ret);
}
}
#line 709 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_getparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_getparam_t *param ;
  int value ;
  unsigned long tmp ;

  {
#line 712
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 713
  param = (drm_i915_getparam_t *)data;
#line 716
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 717
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_getparam");
#line 718
    return (-22);
  } else {

  }
#line 721
  switch (param->param) {
  case 1: 
#line 723
  value = (dev->pdev)->irq != 0U;
#line 724
  goto ldv_23949;
  case 2: 
#line 726
  value = dev_priv->allow_batchbuffer != 0;
#line 727
  goto ldv_23949;
  case 3: 
#line 729
  value = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
#line 730
  goto ldv_23949;
  case 4: 
#line 732
  value = dev->pci_device;
#line 733
  goto ldv_23949;
  case 5: 
#line 735
  value = 1;
#line 736
  goto ldv_23949;
  default: 
#line 738
  printk("<3>[drm:%s] *ERROR* Unknown parameter %d\n", "i915_getparam", param->param);
#line 739
  return (-22);
  }
  ldv_23949: 
#line 742
  tmp = copy_to_user((void *)param->value, (void const   *)(& value), 4U);
#line 742
  if (tmp != 0UL) {
#line 743
    printk("<3>[drm:%s] *ERROR* DRM_COPY_TO_USER failed\n", "i915_getparam");
#line 744
    return (-14);
  } else {

  }
#line 747
  return (0);
}
}
#line 750 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_setparam(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_setparam_t *param ;

  {
#line 753
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 754
  param = (drm_i915_setparam_t *)data;
#line 756
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 757
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_setparam");
#line 758
    return (-22);
  } else {

  }
#line 761
  switch (param->param) {
  case 1: ;
#line 763
  goto ldv_23964;
  case 2: 
#line 765
  dev_priv->tex_lru_log_granularity = param->value;
#line 766
  goto ldv_23964;
  case 3: 
#line 768
  dev_priv->allow_batchbuffer = param->value;
#line 769
  goto ldv_23964;
  default: 
#line 771
  printk("<3>[drm:%s] *ERROR* unknown parameter %d\n", "i915_setparam", param->param);
#line 772
  return (-22);
  }
  ldv_23964: ;
#line 775
  return (0);
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
static int i915_set_status_page(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_hws_addr_t *hws ;

  {
#line 781
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 782
  hws = (drm_i915_hws_addr_t *)data;
#line 784
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && ((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 785
    return (-22);
  } else {

  }
#line 787
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 788
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_set_status_page");
#line 789
    return (-22);
  } else {

  }
#line 792
  printk("<7>set status page addr 0x%08x\n", (unsigned int )hws->addr);
#line 794
  dev_priv->status_gfx_addr = (unsigned int )hws->addr & 536866816U;
#line 796
  dev_priv->hws_map.offset = (unsigned long )((unsigned long long )(dev->agp)->base + hws->addr);
#line 797
  dev_priv->hws_map.size = 4096UL;
#line 798
  dev_priv->hws_map.type = _DRM_FRAME_BUFFER;
#line 799
  dev_priv->hws_map.flags = 0;
#line 800
  dev_priv->hws_map.mtrr = 0;
#line 802
  drm_core_ioremap(& dev_priv->hws_map, dev);
#line 803
  if ((unsigned long )dev_priv->hws_map.handle == (unsigned long )((void *)0)) {
#line 804
    i915_dma_cleanup(dev);
#line 805
    dev_priv->status_gfx_addr = 0U;
#line 806
    printk("<3>[drm:%s] *ERROR* can not ioremap virtual address for G33 hw status page\n",
           "i915_set_status_page");
#line 808
    return (-12);
  } else {

  }
#line 810
  dev_priv->hw_status_page = dev_priv->hws_map.handle;
#line 812
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 813
  writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
#line 814
  if (drm_debug != 0U) {
#line 814
    printk("<7>[drm:%s] load hws HWS_PGA with gfx mem 0x%x\n", "i915_set_status_page",
           dev_priv->status_gfx_addr);
  } else {

  }
#line 816
  if (drm_debug != 0U) {
#line 816
    printk("<7>[drm:%s] load hws at %p\n", "i915_set_status_page", dev_priv->hw_status_page);
  } else {

  }
#line 817
  return (0);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_load(struct drm_device *dev , unsigned long flags ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long base ;
  unsigned long size ;
  int ret ;
  int mmio_bar ;
  void *tmp ;
  struct lock_class_key __key ;

  {
#line 822
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 824
  ret = 0;
#line 824
  mmio_bar = (((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706);
#line 827
  dev->counters = dev->counters + 4UL;
#line 828
  dev->types[6] = _DRM_STAT_IRQ;
#line 829
  dev->types[7] = _DRM_STAT_PRIMARY;
#line 830
  dev->types[8] = _DRM_STAT_SECONDARY;
#line 831
  dev->types[9] = _DRM_STAT_DMA;
#line 833
  tmp = drm_alloc(4104UL, 2);
#line 833
  dev_priv = (struct drm_i915_private *)tmp;
#line 834
  if ((unsigned long )dev_priv == (unsigned long )((struct drm_i915_private *)0)) {
#line 835
    return (-12);
  } else {

  }
#line 837
  memset((void *)dev_priv, 0, 4104UL);
#line 839
  dev->dev_private = (void *)dev_priv;
#line 840
  dev_priv->dev = dev;
#line 843
  base = drm_get_resource_start(dev, (unsigned int )mmio_bar);
#line 844
  size = drm_get_resource_len(dev, (unsigned int )mmio_bar);
#line 846
  dev_priv->regs = ioremap((resource_size_t )base, size);
#line 848
  i915_gem_load(dev);
#line 851
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && ((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 852
    ret = i915_init_phys_hws(dev);
#line 853
    if (ret != 0) {
#line 854
      return (ret);
    } else {

    }
  } else {

  }
#line 868
  if (dev->pci_device != 10098 && (dev->pci_device != 10146 && dev->pci_device != 10158)) {
#line 869
    pci_enable_msi(dev->pdev);
  } else {

  }
#line 871
  intel_opregion_init(dev);
#line 873
  __spin_lock_init(& dev_priv->user_irq_lock, "&dev_priv->user_irq_lock", & __key);
#line 875
  ret = drm_vblank_init(dev, 2);
#line 877
  if (ret != 0) {
#line 878
    i915_driver_unload(dev);
#line 879
    return (ret);
  } else {

  }
#line 882
  return (ret);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_unload(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 887
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 889
  if ((unsigned int )*((unsigned char *)dev->pdev + 1808UL) != 0U) {
#line 890
    pci_disable_msi(dev->pdev);
  } else {

  }
#line 892
  i915_free_hws(dev);
#line 894
  if ((unsigned long )dev_priv->regs != (unsigned long )((void *)0)) {
#line 895
    iounmap((void volatile   *)dev_priv->regs);
  } else {

  }
#line 897
  intel_opregion_free(dev);
#line 899
  drm_free(dev->dev_private, 4104UL, 2);
#line 902
  return (0);
}
}
#line 905 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_open(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  void *tmp ;

  {
#line 909
  if (drm_debug != 0U) {
#line 909
    printk("<7>[drm:%s] \n", "i915_driver_open");
  } else {

  }
#line 910
  tmp = drm_alloc(8UL, 10);
#line 910
  i915_file_priv = (struct drm_i915_file_private *)tmp;
#line 913
  if ((unsigned long )i915_file_priv == (unsigned long )((struct drm_i915_file_private *)0)) {
#line 914
    return (-12);
  } else {

  }
#line 916
  file_priv->driver_priv = (void *)i915_file_priv;
#line 918
  i915_file_priv->mm.last_gem_seqno = 0U;
#line 919
  i915_file_priv->mm.last_gem_throttle_seqno = 0U;
#line 921
  return (0);
}
}
#line 924 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_lastclose(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 926
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 928
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 929
    return;
  } else {

  }
#line 931
  i915_gem_lastclose(dev);
#line 933
  if ((unsigned long )dev_priv->agp_heap != (unsigned long )((struct mem_block *)0)) {
#line 934
    i915_mem_takedown(& dev_priv->agp_heap);
  } else {

  }
#line 936
  i915_dma_cleanup(dev);
#line 937
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_preclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 941
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 942
  i915_mem_release(dev, file_priv, dev_priv->agp_heap);
#line 943
  return;
}
}
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void i915_driver_postclose(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;

  {
#line 947
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 949
  drm_free((void *)i915_file_priv, 8UL, 10);
#line 950
  return;
}
}
#line 952 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
struct drm_ioctl_desc i915_ioctls[36U]  = 
#line 952
  {      {0U, & i915_dma_init, 7}, 
        {1U, & i915_flush_ioctl, 1}, 
        {2U, & i915_flip_bufs, 1}, 
        {3U, & i915_batchbuffer, 1}, 
        {4U, & i915_irq_emit, 1}, 
        {5U, & i915_irq_wait, 1}, 
        {6U, & i915_getparam, 1}, 
        {7U, & i915_setparam, 7}, 
        {8U, & i915_mem_alloc, 1}, 
        {9U, & i915_mem_free, 1}, 
        {10U, & i915_mem_init_heap, 7}, 
        {11U, & i915_cmdbuffer, 1}, 
        {12U, & i915_mem_destroy_heap, 7}, 
        {13U, & i915_vblank_pipe_set, 7}, 
        {14U, & i915_vblank_pipe_get, 1}, 
        {15U, & i915_vblank_swap, 1}, 
        {0U, 0, 0}, 
        {17U, & i915_set_status_page, 7}, 
        {0U, 0, 0}, 
        {19U, & i915_gem_init_ioctl, 7}, 
        {20U, & i915_gem_execbuffer, 1}, 
        {21U, & i915_gem_pin_ioctl, 5}, 
        {22U, & i915_gem_unpin_ioctl, 5}, 
        {23U, & i915_gem_busy_ioctl, 1}, 
        {24U, & i915_gem_throttle_ioctl, 1}, 
        {25U, & i915_gem_entervt_ioctl, 7}, 
        {26U, & i915_gem_leavevt_ioctl, 7}, 
        {27U, & i915_gem_create_ioctl, 0}, 
        {28U, & i915_gem_pread_ioctl, 0}, 
        {29U, & i915_gem_pwrite_ioctl, 0}, 
        {30U, & i915_gem_mmap_ioctl, 0}, 
        {31U, & i915_gem_set_domain_ioctl, 0}, 
        {32U, & i915_gem_sw_finish_ioctl, 0}, 
        {33U, & i915_gem_set_tiling, 0}, 
        {34U, & i915_gem_get_tiling, 0}, 
        {35U, & i915_gem_get_aperture_ioctl, 0}};
#line 989 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_max_ioctl  =    36;
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
int i915_driver_device_is_agp(struct drm_device *dev ) 
{ 


  {
#line 1004
  return (1);
}
}
#line 1007 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1012
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1014
  mutex_lock(ldv_func_arg1);
#line 1015
  return;
}
}
#line 1017 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1022
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1024
  mutex_unlock(ldv_func_arg1);
#line 1025
  return;
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1032
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1034
  mutex_lock(ldv_func_arg1);
#line 1035
  return;
}
}
#line 1037 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1042
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1044
  mutex_unlock(ldv_func_arg1);
#line 1045
  return;
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1052
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1054
  mutex_lock(ldv_func_arg1);
#line 1055
  return;
}
}
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1062
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1064
  mutex_unlock(ldv_func_arg1);
#line 1065
  return;
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1072
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1074
  mutex_lock(ldv_func_arg1);
#line 1075
  return;
}
}
#line 1077 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_dma.c.prepared"
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1082
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 1084
  mutex_unlock(ldv_func_arg1);
#line 1085
  return;
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (8UL) {
  case 2UL: 
#line 25
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4232;
  case 4UL: 
#line 25
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4232;
  case 8UL: 
#line 25
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4232;
  default: 
#line 25
  __bad_pda_field();
  }
  ldv_4232: ;
#line 25
  return (ret__);
}
}
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 97
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 100
  return;
}
}
#line 152 "include/linux/mutex.h"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) ;
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 86
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 86
  return (tmp);
}
}
#line 35 "include/linux/spinlock_api_smp.h"
extern unsigned long _spin_lock_irqsave(spinlock_t * ) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t * , unsigned long  ) ;
#line 30 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 80
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 111
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 113
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 135
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 329 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2054 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2056
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2056
  return (tmp);
}
}
#line 2074 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2076
  tmp = test_tsk_thread_flag(p, 2);
#line 2076
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2076
  return ((int )tmp___0);
}
}
#line 1151 "include/drm/drmP.h"
extern void drm_handle_vblank(struct drm_device * , int  ) ;
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
void i915_user_irq_get(struct drm_device *dev ) ;
#line 441
void i915_user_irq_put(struct drm_device *dev ) ;
#line 456
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) ;
#line 459
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 462
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) ;
#line 520
uint32_t i915_get_gem_seqno(struct drm_device *dev ) ;
#line 553
void opregion_asle_intr(struct drm_device *dev ) ;
#line 554
void opregion_enable_asle(struct drm_device *dev ) ;
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_enable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 72
  if ((dev_priv->irq_mask_reg & mask) != 0U) {
#line 73
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg & ~ mask;
#line 74
    writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 75
    readl((void const volatile   *)dev_priv->regs + 8360U);
  } else {

  }
#line 77
  return;
}
}
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static void i915_disable_irq(drm_i915_private_t *dev_priv , u32 mask ) 
{ 


  {
#line 82
  if ((dev_priv->irq_mask_reg & mask) != mask) {
#line 83
    dev_priv->irq_mask_reg = dev_priv->irq_mask_reg | mask;
#line 84
    writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 85
    readl((void const volatile   *)dev_priv->regs + 8360U);
  } else {

  }
#line 87
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
__inline static u32 i915_pipestat(int pipe ) 
{ 


  {
#line 92
  if (pipe == 0) {
#line 93
    return (458788U);
  } else {

  }
#line 94
  if (pipe == 1) {
#line 95
    return (462884U);
  } else {

  }
#line 96
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"),
                       "i" (96), "i" (24UL));
  ldv_23719: ;
#line 96
  goto ldv_23719;
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_enable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 102
  if ((dev_priv->pipestat[pipe] & mask) != mask) {
#line 103
    tmp = i915_pipestat(pipe);
#line 103
    reg = tmp;
#line 105
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] | mask;
#line 107
    writel(dev_priv->pipestat[pipe] | (mask >> 16), (void volatile   *)dev_priv->regs + (unsigned long )reg);
#line 108
    readl((void const volatile   *)dev_priv->regs + (unsigned long )reg);
  } else {

  }
#line 110
  return;
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_disable_pipestat(drm_i915_private_t *dev_priv , int pipe , u32 mask ) 
{ 
  u32 reg ;
  u32 tmp ;

  {
#line 115
  if ((dev_priv->pipestat[pipe] & mask) != 0U) {
#line 116
    tmp = i915_pipestat(pipe);
#line 116
    reg = tmp;
#line 118
    dev_priv->pipestat[pipe] = dev_priv->pipestat[pipe] & ~ mask;
#line 119
    writel(dev_priv->pipestat[pipe], (void volatile   *)dev_priv->regs + (unsigned long )reg);
#line 120
    readl((void const volatile   *)dev_priv->regs + (unsigned long )reg);
  } else {

  }
#line 122
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_pipe_enabled(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long pipeconf ;
  unsigned int tmp ;

  {
#line 136
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 137
  pipeconf = pipe != 0 ? 462856UL : 458760UL;
#line 139
  tmp = readl((void const volatile   *)(dev_priv->regs + pipeconf));
#line 139
  if ((int )tmp < 0) {
#line 140
    return (1);
  } else {

  }
#line 142
  return (0);
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
u32 i915_get_vblank_counter(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long high_frame ;
  unsigned long low_frame ;
  u32 high1 ;
  u32 high2 ;
  u32 low ;
  u32 count ;
  int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 150
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 155
  high_frame = pipe != 0 ? 462912UL : 458816UL;
#line 156
  low_frame = pipe != 0 ? 462916UL : 458820UL;
#line 158
  tmp = i915_pipe_enabled(dev, pipe);
#line 158
  if (tmp == 0) {
#line 159
    printk("<3>[drm:%s] *ERROR* trying to get vblank count for disabled pipe %d\n",
           "i915_get_vblank_counter", pipe);
#line 160
    return (0U);
  } else {

  }
  ldv_23750: 
#line 169
  tmp___0 = readl((void const volatile   *)(dev_priv->regs + high_frame));
#line 169
  high1 = tmp___0 & 65535U;
#line 171
  tmp___1 = readl((void const volatile   *)(dev_priv->regs + low_frame));
#line 171
  low = tmp___1 >> 24;
#line 173
  tmp___2 = readl((void const volatile   *)(dev_priv->regs + high_frame));
#line 173
  high2 = tmp___2 & 65535U;
#line 175
  if (high1 != high2) {
#line 176
    goto ldv_23750;
  } else {

  }
#line 177
  count = (high1 << 8) | low;
#line 179
  return (count);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
irqreturn_t i915_driver_irq_handler(int irq , void *arg ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  u32 iir ;
  u32 new_iir ;
  u32 pipea_stats ;
  u32 pipeb_stats ;
  u32 vblank_status ;
  u32 vblank_enable ;
  int vblank ;
  unsigned long irqflags ;
  int irq_received ;
  int ret ;

  {
#line 184
  dev = (struct drm_device *)arg;
#line 185
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 190
  vblank = 0;
#line 193
  ret = 0;
#line 195
  atomic_inc(& dev_priv->irq_received);
#line 197
  iir = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 199
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 200
    vblank_status = 4U;
#line 201
    vblank_enable = 262144U;
  } else {
#line 203
    vblank_status = 2U;
#line 204
    vblank_enable = 131072U;
  }
  ldv_23775: 
#line 208
  irq_received = iir != 0U;
#line 215
  irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 216
  pipea_stats = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 217
  pipeb_stats = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 221
  if ((pipea_stats & 2147549183U) != 0U) {
#line 222
    writel(pipea_stats, (void volatile   *)dev_priv->regs + 458788U);
#line 223
    irq_received = 1;
  } else {

  }
#line 226
  if ((pipeb_stats & 2147549183U) != 0U) {
#line 227
    writel(pipeb_stats, (void volatile   *)dev_priv->regs + 462884U);
#line 228
    irq_received = 1;
  } else {

  }
#line 230
  _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 232
  if (irq_received == 0) {
#line 233
    goto ldv_23774;
  } else {

  }
#line 235
  ret = 1;
#line 237
  writel(iir, (void volatile   *)dev_priv->regs + 8356U);
#line 238
  new_iir = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 240
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 241
    (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 244
  if ((iir & 2U) != 0U) {
#line 245
    dev_priv->mm.irq_gem_seqno = i915_get_gem_seqno(dev);
#line 246
    __wake_up(& dev_priv->irq_queue, 1U, 1, 0);
  } else {

  }
#line 249
  if ((pipea_stats & vblank_status) != 0U) {
#line 250
    vblank = vblank + 1;
#line 251
    drm_handle_vblank(dev, 0);
  } else {

  }
#line 254
  if ((pipeb_stats & vblank_status) != 0U) {
#line 255
    vblank = vblank + 1;
#line 256
    drm_handle_vblank(dev, 1);
  } else {

  }
#line 259
  if (((unsigned long )pipeb_stats & 64UL) != 0UL || (int )iir & 1) {
#line 261
    opregion_asle_intr(dev);
  } else {

  }
#line 278
  iir = new_iir;
#line 279
  goto ldv_23775;
  ldv_23774: ;
#line 281
  return (ret);
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_emit_irq(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 286
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 289
  i915_kernel_lost_context(dev);
#line 291
  if (drm_debug != 0U) {
#line 291
    printk("<7>[drm:%s] \n", "i915_emit_irq");
  } else {

  }
#line 293
  dev_priv->counter = dev_priv->counter + (uint32_t )1;
#line 294
  if ((int )dev_priv->counter < 0) {
#line 295
    dev_priv->counter = 1U;
  } else {

  }
#line 296
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 297
    (dev_priv->sarea_priv)->last_enqueue = (int )dev_priv->counter;
  } else {

  }
#line 299
  if (dev_priv->ring.space <= 15) {
#line 299
    i915_wait_ring(dev, 16, "i915_emit_irq");
  } else {

  }
#line 299
  outcount = 0U;
#line 299
  outring = (unsigned int )dev_priv->ring.tail;
#line 299
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 299
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 300
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 300
  outcount = outcount + 1U;
#line 300
  outring = outring + 4U;
#line 300
  outring = outring & ringmask;
#line 301
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 132U;
#line 301
  outcount = outcount + 1U;
#line 301
  outring = outring + 4U;
#line 301
  outring = outring & ringmask;
#line 302
  *((unsigned int volatile   *)virt + (unsigned long )outring) = dev_priv->counter;
#line 302
  outcount = outcount + 1U;
#line 302
  outring = outring + 4U;
#line 302
  outring = outring & ringmask;
#line 303
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 16777216U;
#line 303
  outcount = outcount + 1U;
#line 303
  outring = outring + 4U;
#line 303
  outring = outring & ringmask;
#line 304
  dev_priv->ring.tail = (int )outring;
#line 304
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 304
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 306
  return ((int )dev_priv->counter);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_user_irq_get(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 311
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 314
  irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 315
  if (dev->irq_enabled != 0) {
#line 315
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount + 1;
#line 315
    if (dev_priv->user_irq_refcount == 1) {
#line 316
      i915_enable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 317
  _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 318
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_user_irq_put(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;
  long tmp ;
  long tmp___0 ;

  {
#line 322
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 325
  irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 326
  tmp = __builtin_expect(dev->irq_enabled != 0, 0L);
#line 326
  if (tmp != 0L) {
#line 326
    tmp___0 = __builtin_expect(dev_priv->user_irq_refcount <= 0, 0L);
#line 326
    if (tmp___0 != 0L) {
#line 326
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"),
                           "i" (326), "i" (24UL));
      ldv_23804: ;
#line 326
      goto ldv_23804;
    } else {

    }
  } else {

  }
#line 327
  if (dev->irq_enabled != 0) {
#line 327
    dev_priv->user_irq_refcount = dev_priv->user_irq_refcount - 1;
#line 327
    if (dev_priv->user_irq_refcount == 0) {
#line 328
      i915_disable_irq(dev_priv, 2U);
    } else {

    }
  } else {

  }
#line 329
  _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 330
  return;
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
static int i915_wait_irq(struct drm_device *dev , int irq_nr ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  wait_queue_t entry ;
  struct task_struct *tmp ;
  unsigned long end ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;

  {
#line 334
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 335
  ret = 0;
#line 337
  if (drm_debug != 0U) {
#line 337
    printk("<7>[drm:%s] irq_nr=%d breadcrumb=%d\n", "i915_wait_irq", irq_nr, *((u32 volatile   *)dev_priv->hw_status_page + 33UL));
  } else {

  }
#line 340
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL) >= (unsigned int )irq_nr) {
#line 341
    if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 342
      (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
    } else {

    }
#line 345
    return (0);
  } else {

  }
#line 348
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 349
    (dev_priv->sarea_priv)->perf_boxes = (dev_priv->sarea_priv)->perf_boxes | 4;
  } else {

  }
#line 351
  i915_user_irq_get(dev);
#line 352
  tmp = get_current();
#line 352
  entry.flags = 0U;
#line 352
  entry.private = (void *)tmp;
#line 352
  entry.func = & default_wake_function;
#line 352
  entry.task_list.next = 0;
#line 352
  entry.task_list.prev = 0;
#line 352
  end = (unsigned long )jiffies + 750UL;
#line 352
  add_wait_queue(& dev_priv->irq_queue, & entry);
  ldv_23824: 
#line 352
  tmp___0 = get_current();
#line 352
  tmp___0->state = 1L;
#line 352
  if ((unsigned int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL) >= (unsigned int )irq_nr) {
#line 352
    goto ldv_23817;
  } else {

  }
#line 352
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )end >= 0L) {
#line 352
    ret = -16;
#line 352
    goto ldv_23817;
  } else {

  }
#line 352
  schedule_timeout(2L);
#line 352
  tmp___1 = get_current();
#line 352
  tmp___2 = signal_pending(tmp___1);
#line 352
  if (tmp___2 != 0) {
#line 352
    ret = -4;
#line 352
    goto ldv_23817;
  } else {

  }
#line 352
  goto ldv_23824;
  ldv_23817: 
#line 352
  tmp___3 = get_current();
#line 352
  tmp___3->state = 0L;
#line 352
  remove_wait_queue(& dev_priv->irq_queue, & entry);
#line 354
  i915_user_irq_put(dev);
#line 356
  if (ret == -16) {
#line 357
    printk("<3>[drm:%s] *ERROR* EBUSY -- rec: %d emitted: %d\n", "i915_wait_irq",
           *((u32 volatile   *)dev_priv->hw_status_page + 33UL), (int )dev_priv->counter);
  } else {

  }
#line 361
  if ((unsigned long )dev_priv->sarea_priv != (unsigned long )((drm_i915_sarea_t *)0)) {
#line 362
    (dev_priv->sarea_priv)->last_dispatch = (int )*((u32 volatile   *)dev_priv->hw_status_page + 33UL);
  } else {

  }
#line 365
  return (ret);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_emit(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_emit_t *emit ;
  int result ;
  unsigned long tmp ;

  {
#line 373
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 374
  emit = (drm_i915_irq_emit_t *)data;
#line 377
  if ((unsigned long )((drm_i915_private_t *)dev->dev_private)->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 377
    if ((int )(dev->lock.hw_lock)->lock >= 0 || (unsigned long )dev->lock.file_priv != (unsigned long )file_priv) {
#line 377
      printk("<3>[drm:%s] *ERROR* %s called without lock held, held  %d owner %p %p\n",
             "i915_irq_emit", "i915_irq_emit", (unsigned int )(dev->lock.hw_lock)->lock & 2147483648U,
             dev->lock.file_priv, file_priv);
#line 377
      return (-22);
    } else {

    }
  } else {

  }
#line 379
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 380
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_emit");
#line 381
    return (-22);
  } else {

  }
#line 383
  ldv_mutex_lock_17(& dev->struct_mutex);
#line 384
  result = i915_emit_irq(dev);
#line 385
  ldv_mutex_unlock_18(& dev->struct_mutex);
#line 387
  tmp = copy_to_user((void *)emit->irq_seq, (void const   *)(& result), 4U);
#line 387
  if (tmp != 0UL) {
#line 388
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_irq_emit");
#line 389
    return (-14);
  } else {

  }
#line 392
  return (0);
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_irq_wait(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_irq_wait_t *irqwait ;
  int tmp ;

  {
#line 400
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 401
  irqwait = (drm_i915_irq_wait_t *)data;
#line 403
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 404
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_irq_wait");
#line 405
    return (-22);
  } else {

  }
#line 408
  tmp = i915_wait_irq(dev, irqwait->irq_seq);
#line 408
  return (tmp);
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_enable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 416
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 419
  irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 420
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 421
    i915_enable_pipestat(dev_priv, pipe, 262144U);
  } else {
#line 424
    i915_enable_pipestat(dev_priv, pipe, 131072U);
  }
#line 426
  _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 427
  return (0);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_disable_vblank(struct drm_device *dev , int pipe ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned long irqflags ;

  {
#line 435
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 438
  irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 439
  i915_disable_pipestat(dev_priv, pipe, 393216U);
#line 442
  _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
#line 443
  return;
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_set(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 450
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 452
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 453
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_set");
#line 454
    return (-22);
  } else {

  }
#line 457
  return (0);
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_pipe_get(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_vblank_pipe_t *pipe ;

  {
#line 463
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 464
  pipe = (drm_i915_vblank_pipe_t *)data;
#line 466
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 467
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_vblank_pipe_get");
#line 468
    return (-22);
  } else {

  }
#line 471
  pipe->pipe = 3;
#line 473
  return (0);
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_vblank_swap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 


  {
#line 496
  return (-22);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_preinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 503
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 505
  writel(61438U, (void volatile   *)dev_priv->regs + 8344U);
#line 506
  writel(0U, (void volatile   *)dev_priv->regs + 458788U);
#line 507
  writel(0U, (void volatile   *)dev_priv->regs + 462884U);
#line 508
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8360U);
#line 509
  writel(0U, (void volatile   *)dev_priv->regs + 8352U);
#line 510
  readl((void const volatile   *)dev_priv->regs + 8352U);
#line 511
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
int i915_driver_irq_postinstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 515
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 517
  dev_priv->vblank_pipe = 3;
#line 519
  dev->max_vblank_count = 16777215U;
#line 522
  dev_priv->irq_mask_reg = 4294967214U;
#line 524
  dev_priv->pipestat[0] = 0U;
#line 525
  dev_priv->pipestat[1] = 0U;
#line 528
  tmp = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 528
  writel(tmp & 2147549183U, (void volatile   *)dev_priv->regs + 458788U);
#line 529
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 529
  writel(tmp___0 & 2147549183U, (void volatile   *)dev_priv->regs + 462884U);
#line 531
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 531
  writel(tmp___1, (void volatile   *)dev_priv->regs + 8356U);
#line 533
  writel(83U, (void volatile   *)dev_priv->regs + 8352U);
#line 534
  writel(dev_priv->irq_mask_reg, (void volatile   *)dev_priv->regs + 8360U);
#line 535
  readl((void const volatile   *)dev_priv->regs + 8352U);
#line 537
  opregion_enable_asle(dev);
#line 538
  init_waitqueue_head(& dev_priv->irq_queue);
#line 540
  return (0);
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void i915_driver_irq_uninstall(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 545
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 547
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 548
    return;
  } else {

  }
#line 550
  dev_priv->vblank_pipe = 0;
#line 552
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8344U);
#line 553
  writel(0U, (void volatile   *)dev_priv->regs + 458788U);
#line 554
  writel(0U, (void volatile   *)dev_priv->regs + 462884U);
#line 555
  writel(4294967295U, (void volatile   *)dev_priv->regs + 8360U);
#line 556
  writel(0U, (void volatile   *)dev_priv->regs + 8352U);
#line 558
  tmp = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 558
  writel(tmp & 2147549183U, (void volatile   *)dev_priv->regs + 458788U);
#line 559
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 559
  writel(tmp___0 & 2147549183U, (void volatile   *)dev_priv->regs + 462884U);
#line 560
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 560
  writel(tmp___1, (void volatile   *)dev_priv->regs + 8356U);
#line 561
  return;
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 568
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 570
  mutex_lock(ldv_func_arg1);
#line 571
  return;
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_irq.c.prepared"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 578
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 580
  mutex_unlock(ldv_func_arg1);
#line 581
  return;
}
}
#line 61 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void mark_block(struct drm_device *dev , struct mem_block *p , int in_use ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_sarea_t *sarea_priv ;
  struct drm_tex_region *list ;
  unsigned int shift ;
  unsigned int nr ;
  unsigned int start ;
  unsigned int end ;
  unsigned int i ;
  int age ;

  {
#line 63
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 64
  sarea_priv = dev_priv->sarea_priv;
#line 72
  shift = (unsigned int )dev_priv->tex_lru_log_granularity;
#line 73
  nr = 255U;
#line 75
  start = (unsigned int )(p->start >> (int )shift);
#line 76
  end = (unsigned int )(((p->start + p->size) + -1) >> (int )shift);
#line 78
  sarea_priv->texAge = sarea_priv->texAge + 1;
#line 78
  age = sarea_priv->texAge;
#line 79
  list = (struct drm_tex_region *)(& sarea_priv->texList);
#line 84
  i = start;
#line 84
  goto ldv_23715;
  ldv_23714: 
#line 85
  (list + (unsigned long )i)->in_use = (unsigned char )in_use;
#line 86
  (list + (unsigned long )i)->age = (unsigned int )age;
#line 90
  (list + (unsigned long )(list + (unsigned long )i)->next)->prev = (list + (unsigned long )i)->prev;
#line 91
  (list + (unsigned long )(list + (unsigned long )i)->prev)->next = (list + (unsigned long )i)->next;
#line 95
  (list + (unsigned long )i)->prev = (unsigned char )nr;
#line 96
  (list + (unsigned long )i)->next = (list + (unsigned long )nr)->next;
#line 97
  (list + (unsigned long )(list + (unsigned long )nr)->next)->prev = (unsigned char )i;
#line 98
  (list + (unsigned long )nr)->next = (unsigned char )i;
#line 84
  i = i + 1U;
  ldv_23715: ;
#line 84
  if (i <= end) {
#line 85
    goto ldv_23714;
  } else {

  }

#line 89
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *split_block(struct mem_block *p , int start , int size ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *newblock ;
  void *tmp ;
  struct mem_block *newblock___0 ;
  void *tmp___0 ;

  {
#line 110
  if (p->start < start) {
#line 111
    tmp = drm_alloc(32UL, 14);
#line 111
    newblock = (struct mem_block *)tmp;
#line 113
    if ((unsigned long )newblock == (unsigned long )((struct mem_block *)0)) {
#line 114
      goto out;
    } else {

    }
#line 115
    newblock->start = start;
#line 116
    newblock->size = p->size + (p->start - start);
#line 117
    newblock->file_priv = 0;
#line 118
    newblock->next = p->next;
#line 119
    newblock->prev = p;
#line 120
    (p->next)->prev = newblock;
#line 121
    p->next = newblock;
#line 122
    p->size = p->size - newblock->size;
#line 123
    p = newblock;
  } else {

  }
#line 127
  if (p->size > size) {
#line 128
    tmp___0 = drm_alloc(32UL, 14);
#line 128
    newblock___0 = (struct mem_block *)tmp___0;
#line 130
    if ((unsigned long )newblock___0 == (unsigned long )((struct mem_block *)0)) {
#line 131
      goto out;
    } else {

    }
#line 132
    newblock___0->start = start + size;
#line 133
    newblock___0->size = p->size - size;
#line 134
    newblock___0->file_priv = 0;
#line 135
    newblock___0->next = p->next;
#line 136
    newblock___0->prev = p;
#line 137
    (p->next)->prev = newblock___0;
#line 138
    p->next = newblock___0;
#line 139
    p->size = size;
  } else {

  }
  out: 
#line 144
  p->file_priv = file_priv;
#line 145
  return (p);
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *alloc_block(struct mem_block *heap , int size , int align2 ,
                                     struct drm_file *file_priv ) 
{ 
  struct mem_block *p ;
  int mask ;
  int start ;
  struct mem_block *tmp ;

  {
#line 152
  mask = (1 << align2) + -1;
#line 154
  p = heap->next;
#line 154
  goto ldv_23736;
  ldv_23735: 
#line 155
  start = (p->start + mask) & ~ mask;
#line 156
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && start + size <= p->start + p->size) {
#line 157
    tmp = split_block(p, start, size, file_priv);
#line 157
    return (tmp);
  } else {

  }
#line 154
  p = p->next;
  ldv_23736: ;
#line 154
  if ((unsigned long )p != (unsigned long )heap) {
#line 155
    goto ldv_23735;
  } else {

  }

#line 160
  return (0);
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block *find_block(struct mem_block *heap , int start ) 
{ 
  struct mem_block *p ;

  {
#line 167
  p = heap->next;
#line 167
  goto ldv_23744;
  ldv_23743: ;
#line 168
  if (p->start == start) {
#line 169
    return (p);
  } else {

  }
#line 167
  p = p->next;
  ldv_23744: ;
#line 167
  if ((unsigned long )p != (unsigned long )heap) {
#line 168
    goto ldv_23743;
  } else {

  }

#line 171
  return (0);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static void free_block(struct mem_block *p ) 
{ 
  struct mem_block *q ;
  struct mem_block *q___0 ;

  {
#line 176
  p->file_priv = 0;
#line 181
  if ((unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 182
    q = p->next;
#line 183
    p->size = p->size + q->size;
#line 184
    p->next = q->next;
#line 185
    (p->next)->prev = p;
#line 186
    drm_free((void *)q, 32UL, 14);
  } else {

  }
#line 189
  if ((unsigned long )(p->prev)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 190
    q___0 = p->prev;
#line 191
    q___0->size = q___0->size + p->size;
#line 192
    q___0->next = p->next;
#line 193
    (q___0->next)->prev = q___0;
#line 194
    drm_free((void *)p, 32UL, 14);
  } else {

  }
#line 196
  return;
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static int init_heap(struct mem_block **heap , int start , int size ) 
{ 
  struct mem_block *blocks ;
  void *tmp ;
  void *tmp___0 ;
  struct mem_block *tmp___1 ;
  struct mem_block *tmp___2 ;

  {
#line 202
  tmp = drm_alloc(32UL, 14);
#line 202
  blocks = (struct mem_block *)tmp;
#line 204
  if ((unsigned long )blocks == (unsigned long )((struct mem_block *)0)) {
#line 205
    return (-12);
  } else {

  }
#line 207
  tmp___0 = drm_alloc(32UL, 14);
#line 207
  *heap = (struct mem_block *)tmp___0;
#line 208
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 209
    drm_free((void *)blocks, 32UL, 14);
#line 210
    return (-12);
  } else {

  }
#line 213
  blocks->start = start;
#line 214
  blocks->size = size;
#line 215
  blocks->file_priv = 0;
#line 216
  tmp___1 = *heap;
#line 216
  blocks->prev = tmp___1;
#line 216
  blocks->next = tmp___1;
#line 218
  memset((void *)*heap, 0, 32UL);
#line 219
  (*heap)->file_priv = 0xffffffffffffffffUL;
#line 220
  tmp___2 = blocks;
#line 220
  (*heap)->prev = tmp___2;
#line 220
  (*heap)->next = tmp___2;
#line 221
  return (0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_release(struct drm_device *dev , struct drm_file *file_priv , struct mem_block *heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 231
  if ((unsigned long )heap == (unsigned long )((struct mem_block *)0) || (unsigned long )heap->next == (unsigned long )((struct mem_block *)0)) {
#line 232
    return;
  } else {

  }
#line 234
  p = heap->next;
#line 234
  goto ldv_23764;
  ldv_23763: ;
#line 235
  if ((unsigned long )p->file_priv == (unsigned long )file_priv) {
#line 236
    p->file_priv = 0;
#line 237
    mark_block(dev, p, 0);
  } else {

  }
#line 234
  p = p->next;
  ldv_23764: ;
#line 234
  if ((unsigned long )p != (unsigned long )heap) {
#line 235
    goto ldv_23763;
  } else {

  }
#line 244
  p = heap->next;
#line 244
  goto ldv_23771;
  ldv_23770: ;
#line 245
  goto ldv_23768;
  ldv_23767: 
#line 246
  q = p->next;
#line 247
  p->size = p->size + q->size;
#line 248
  p->next = q->next;
#line 249
  (p->next)->prev = p;
#line 250
  drm_free((void *)q, 32UL, 14);
  ldv_23768: ;
#line 245
  if ((unsigned long )p->file_priv == (unsigned long )((struct drm_file *)0) && (unsigned long )(p->next)->file_priv == (unsigned long )((struct drm_file *)0)) {
#line 246
    goto ldv_23767;
  } else {

  }
#line 244
  p = p->next;
  ldv_23771: ;
#line 244
  if ((unsigned long )p != (unsigned long )heap) {
#line 245
    goto ldv_23770;
  } else {

  }

#line 249
  return;
}
}
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
void i915_mem_takedown(struct mem_block **heap ) 
{ 
  struct mem_block *p ;
  struct mem_block *q ;

  {
#line 261
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 262
    return;
  } else {

  }
#line 264
  p = (*heap)->next;
#line 264
  goto ldv_23779;
  ldv_23778: 
#line 265
  q = p;
#line 266
  p = p->next;
#line 267
  drm_free((void *)q, 32UL, 14);
  ldv_23779: ;
#line 264
  if ((unsigned long )*heap != (unsigned long )p) {
#line 265
    goto ldv_23778;
  } else {

  }
#line 270
  drm_free((void *)*heap, 32UL, 14);
#line 271
  *heap = 0;
#line 272
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
static struct mem_block **get_heap(drm_i915_private_t *dev_priv , int region ) 
{ 


  {
#line 276
  switch (region) {
  case 1: ;
#line 278
  return (& dev_priv->agp_heap);
  default: ;
#line 280
  return (0);
  }
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_alloc(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_alloc_t *alloc ;
  struct mem_block *block ;
  struct mem_block **heap ;
  unsigned long tmp ;

  {
#line 289
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 290
  alloc = (drm_i915_mem_alloc_t *)data;
#line 293
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 294
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_alloc");
#line 295
    return (-22);
  } else {

  }
#line 298
  heap = get_heap(dev_priv, alloc->region);
#line 299
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 300
    return (-14);
  } else {

  }
#line 305
  if (alloc->alignment <= 11) {
#line 306
    alloc->alignment = 12;
  } else {

  }
#line 308
  block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
#line 310
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 311
    return (-12);
  } else {

  }
#line 313
  mark_block(dev, block, 1);
#line 315
  tmp = copy_to_user((void *)alloc->region_offset, (void const   *)(& block->start),
                     4U);
#line 315
  if (tmp != 0UL) {
#line 317
    printk("<3>[drm:%s] *ERROR* copy_to_user\n", "i915_mem_alloc");
#line 318
    return (-14);
  } else {

  }
#line 321
  return (0);
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_free(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_free_t *memfree ;
  struct mem_block *block ;
  struct mem_block **heap ;

  {
#line 327
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 328
  memfree = (drm_i915_mem_free_t *)data;
#line 331
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 332
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_free");
#line 333
    return (-22);
  } else {

  }
#line 336
  heap = get_heap(dev_priv, memfree->region);
#line 337
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0) || (unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 338
    return (-14);
  } else {

  }
#line 340
  block = find_block(*heap, memfree->region_offset);
#line 341
  if ((unsigned long )block == (unsigned long )((struct mem_block *)0)) {
#line 342
    return (-14);
  } else {

  }
#line 344
  if ((unsigned long )block->file_priv != (unsigned long )file_priv) {
#line 345
    return (-1);
  } else {

  }
#line 347
  mark_block(dev, block, 0);
#line 348
  free_block(block);
#line 349
  return (0);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_init_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_init_heap_t *initheap ;
  struct mem_block **heap ;
  int tmp ;

  {
#line 355
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 356
  initheap = (drm_i915_mem_init_heap_t *)data;
#line 359
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 360
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_init_heap");
#line 361
    return (-22);
  } else {

  }
#line 364
  heap = get_heap(dev_priv, initheap->region);
#line 365
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 366
    return (-14);
  } else {

  }
#line 368
  if ((unsigned long )*heap != (unsigned long )((struct mem_block *)0)) {
#line 369
    printk("<3>[drm:%s] *ERROR* heap already initialized?", "i915_mem_init_heap");
#line 370
    return (-14);
  } else {

  }
#line 373
  tmp = init_heap(heap, initheap->start, initheap->size);
#line 373
  return (tmp);
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_mem.c.prepared"
int i915_mem_destroy_heap(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  drm_i915_mem_destroy_heap_t *destroyheap ;
  struct mem_block **heap ;

  {
#line 379
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 380
  destroyheap = (drm_i915_mem_destroy_heap_t *)data;
#line 383
  if ((unsigned long )dev_priv == (unsigned long )((drm_i915_private_t *)0)) {
#line 384
    printk("<3>[drm:%s] *ERROR* called with no initialization\n", "i915_mem_destroy_heap");
#line 385
    return (-22);
  } else {

  }
#line 388
  heap = get_heap(dev_priv, destroyheap->region);
#line 389
  if ((unsigned long )heap == (unsigned long )((struct mem_block **)0)) {
#line 390
    printk("<3>[drm:%s] *ERROR* get_heap failed", "i915_mem_destroy_heap");
#line 391
    return (-14);
  } else {

  }
#line 394
  if ((unsigned long )*heap == (unsigned long )((struct mem_block *)0)) {
#line 395
    printk("<3>[drm:%s] *ERROR* heap not initialized?", "i915_mem_destroy_heap");
#line 396
    return (-14);
  } else {

  }
#line 399
  i915_mem_takedown(heap);
#line 400
  return (0);
}
}
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 18
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 18
  return (ret);
}
}
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 26
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 27
  return;
}
}
#line 573 "include/linux/pci.h"
extern int pci_bus_read_config_byte(struct pci_bus * , unsigned int  , int  , u8 * ) ;
#line 579
extern int pci_bus_write_config_byte(struct pci_bus * , unsigned int  , int  , u8  ) ;
#line 586 "include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev *dev , int where , u8 *val ) 
{ 
  int tmp ;

  {
#line 588
  tmp = pci_bus_read_config_byte(dev->bus, dev->devfn, where, val);
#line 588
  return (tmp);
}
}
#line 599 "include/linux/pci.h"
__inline static int pci_write_config_byte(struct pci_dev *dev , int where , u8 val ) 
{ 
  int tmp ;

  {
#line 601
  tmp = pci_bus_write_config_byte(dev->bus, dev->devfn, where, (int )val);
#line 601
  return (tmp);
}
}
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static bool i915_pipe_enabled___0(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 49
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 51
  if ((unsigned int )pipe == 0U) {
#line 52
    tmp = readl((void const volatile   *)dev_priv->regs + 24596U);
#line 52
    return ((tmp & 2147483648U) != 0U);
  } else {
#line 54
    tmp___0 = readl((void const volatile   *)dev_priv->regs + 24600U);
#line 54
    return ((tmp___0 & 2147483648U) != 0U);
  }
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_save_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 59
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 60
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 64
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 64
  if (tmp) {
#line 64
    tmp___0 = 0;
  } else {
#line 64
    tmp___0 = 1;
  }
#line 64
  if (tmp___0) {
#line 65
    return;
  } else {

  }
#line 67
  if ((unsigned int )pipe == 0U) {
#line 68
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 70
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 72
  i = 0;
#line 72
  goto ldv_23714;
  ldv_23713: 
#line 73
  *(array + (unsigned long )i) = readl((void const volatile   *)(dev_priv->regs + ((unsigned long )(i << 2) + reg)));
#line 72
  i = i + 1;
  ldv_23714: ;
#line 72
  if (i <= 255) {
#line 73
    goto ldv_23713;
  } else {

  }

#line 77
  return;
}
}
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_restore_palette(struct drm_device *dev , enum pipe pipe ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned long reg ;
  u32 *array ;
  int i ;
  bool tmp ;
  int tmp___0 ;

  {
#line 78
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 79
  reg = (unsigned int )pipe == 0U ? 40960UL : 43008UL;
#line 83
  tmp = i915_pipe_enabled___0(dev, pipe);
#line 83
  if (tmp) {
#line 83
    tmp___0 = 0;
  } else {
#line 83
    tmp___0 = 1;
  }
#line 83
  if (tmp___0) {
#line 84
    return;
  } else {

  }
#line 86
  if ((unsigned int )pipe == 0U) {
#line 87
    array = (u32 *)(& dev_priv->save_palette_a);
  } else {
#line 89
    array = (u32 *)(& dev_priv->save_palette_b);
  }
#line 91
  i = 0;
#line 91
  goto ldv_23725;
  ldv_23724: 
#line 92
  writel(*(array + (unsigned long )i), (void volatile   *)(dev_priv->regs + ((unsigned long )(i << 2) + reg)));
#line 91
  i = i + 1;
  ldv_23725: ;
#line 91
  if (i <= 255) {
#line 92
    goto ldv_23724;
  } else {

  }

#line 96
  return;
}
}
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static u8 i915_read_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                            u8 reg ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 97
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 99
  writeb((int )reg, (void volatile   *)dev_priv->regs + (unsigned long )index_port);
#line 100
  tmp = readb((void const volatile   *)dev_priv->regs + (unsigned long )data_port);
#line 100
  return (tmp);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static u8 i915_read_ar(struct drm_device *dev , u16 st01 , u8 reg , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;
  unsigned char tmp ;

  {
#line 105
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 107
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 108
  writeb((int )((unsigned char )palette_enable) | (int )reg, (void volatile   *)dev_priv->regs + 960U);
#line 109
  tmp = readb((void const volatile   *)dev_priv->regs + 961U);
#line 109
  return (tmp);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_write_ar(struct drm_device *dev , u16 st01 , u8 reg , u8 val , u16 palette_enable ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 114
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 116
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 117
  writeb((int )((unsigned char )palette_enable) | (int )reg, (void volatile   *)dev_priv->regs + 960U);
#line 118
  writeb((int )val, (void volatile   *)dev_priv->regs + 960U);
#line 119
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_write_indexed(struct drm_device *dev , u16 index_port , u16 data_port ,
                               u8 reg , u8 val ) 
{ 
  struct drm_i915_private *dev_priv ;

  {
#line 123
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 125
  writeb((int )reg, (void volatile   *)dev_priv->regs + (unsigned long )index_port);
#line 126
  writeb((int )val, (void volatile   *)dev_priv->regs + (unsigned long )data_port);
#line 127
  return;
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_save_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;
  u8 tmp ;

  {
#line 131
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 136
  dev_priv->saveDACMASK = readb((void const volatile   *)dev_priv->regs + 966U);
#line 138
  writeb(0, (void volatile   *)dev_priv->regs + 967U);
#line 140
  i = 0;
#line 140
  goto ldv_23766;
  ldv_23765: 
#line 141
  dev_priv->saveDACDATA[i] = readb((void const volatile   *)dev_priv->regs + 969U);
#line 140
  i = i + 1;
  ldv_23766: ;
#line 140
  if (i <= 767) {
#line 141
    goto ldv_23765;
  } else {

  }
#line 144
  dev_priv->saveMSR = readb((void const volatile   *)dev_priv->regs + 972U);
#line 145
  if ((int )dev_priv->saveMSR & 1) {
#line 146
    cr_index = 980U;
#line 147
    cr_data = 981U;
#line 148
    st01 = 986U;
  } else {
#line 150
    cr_index = 948U;
#line 151
    cr_data = 949U;
#line 152
    st01 = 954U;
  }
#line 156
  tmp = i915_read_indexed(dev, (int )cr_index, (int )cr_data, 17);
#line 156
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, 17, (int )tmp & 127);
#line 159
  i = 0;
#line 159
  goto ldv_23769;
  ldv_23768: 
#line 160
  dev_priv->saveCR[i] = i915_read_indexed(dev, (int )cr_index, (int )cr_data, (int )((u8 )i));
#line 159
  i = i + 1;
  ldv_23769: ;
#line 159
  if (i <= 36) {
#line 160
    goto ldv_23768;
  } else {

  }
#line 163
  dev_priv->saveCR[17] = (unsigned int )dev_priv->saveCR[17] & 127U;
#line 166
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 167
  dev_priv->saveAR_INDEX = readb((void const volatile   *)dev_priv->regs + 960U);
#line 168
  i = 0;
#line 168
  goto ldv_23772;
  ldv_23771: 
#line 169
  dev_priv->saveAR[i] = i915_read_ar(dev, (int )st01, (int )((u8 )i), 0);
#line 168
  i = i + 1;
  ldv_23772: ;
#line 168
  if (i <= 20) {
#line 169
    goto ldv_23771;
  } else {

  }
#line 170
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 171
  writeb((int )dev_priv->saveAR_INDEX, (void volatile   *)dev_priv->regs + 960U);
#line 172
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 175
  i = 0;
#line 175
  goto ldv_23775;
  ldv_23774: 
#line 176
  dev_priv->saveGR[i] = i915_read_indexed(dev, 974, 975, (int )((u8 )i));
#line 175
  i = i + 1;
  ldv_23775: ;
#line 175
  if (i <= 8) {
#line 176
    goto ldv_23774;
  } else {

  }
#line 179
  dev_priv->saveGR[16] = i915_read_indexed(dev, 974, 975, 16);
#line 181
  dev_priv->saveGR[17] = i915_read_indexed(dev, 974, 975, 17);
#line 183
  dev_priv->saveGR[24] = i915_read_indexed(dev, 974, 975, 24);
#line 187
  i = 0;
#line 187
  goto ldv_23778;
  ldv_23777: 
#line 188
  dev_priv->saveSR[i] = i915_read_indexed(dev, 964, 965, (int )((u8 )i));
#line 187
  i = i + 1;
  ldv_23778: ;
#line 187
  if (i <= 7) {
#line 188
    goto ldv_23777;
  } else {

  }

#line 192
  return;
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
static void i915_restore_vga(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  u16 cr_index ;
  u16 cr_data ;
  u16 st01 ;

  {
#line 194
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 199
  writeb((int )dev_priv->saveMSR, (void volatile   *)dev_priv->regs + 962U);
#line 200
  if ((int )dev_priv->saveMSR & 1) {
#line 201
    cr_index = 980U;
#line 202
    cr_data = 981U;
#line 203
    st01 = 986U;
  } else {
#line 205
    cr_index = 948U;
#line 206
    cr_data = 949U;
#line 207
    st01 = 954U;
  }
#line 211
  i = 0;
#line 211
  goto ldv_23789;
  ldv_23788: 
#line 212
  i915_write_indexed(dev, 964, 965, (int )((u8 )i), (int )dev_priv->saveSR[i]);
#line 211
  i = i + 1;
  ldv_23789: ;
#line 211
  if (i <= 6) {
#line 212
    goto ldv_23788;
  } else {

  }
#line 217
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, 17, (int )dev_priv->saveCR[17]);
#line 218
  i = 0;
#line 218
  goto ldv_23792;
  ldv_23791: 
#line 219
  i915_write_indexed(dev, (int )cr_index, (int )cr_data, (int )((u8 )i), (int )dev_priv->saveCR[i]);
#line 218
  i = i + 1;
  ldv_23792: ;
#line 218
  if (i <= 36) {
#line 219
    goto ldv_23791;
  } else {

  }
#line 222
  i = 0;
#line 222
  goto ldv_23795;
  ldv_23794: 
#line 223
  i915_write_indexed(dev, 974, 975, (int )((u8 )i), (int )dev_priv->saveGR[i]);
#line 222
  i = i + 1;
  ldv_23795: ;
#line 222
  if (i <= 8) {
#line 223
    goto ldv_23794;
  } else {

  }
#line 226
  i915_write_indexed(dev, 974, 975, 16, (int )dev_priv->saveGR[16]);
#line 228
  i915_write_indexed(dev, 974, 975, 17, (int )dev_priv->saveGR[17]);
#line 230
  i915_write_indexed(dev, 974, 975, 24, (int )dev_priv->saveGR[24]);
#line 234
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 235
  i = 0;
#line 235
  goto ldv_23798;
  ldv_23797: 
#line 236
  i915_write_ar(dev, (int )st01, (int )((u8 )i), (int )dev_priv->saveAR[i], 0);
#line 235
  i = i + 1;
  ldv_23798: ;
#line 235
  if (i <= 20) {
#line 236
    goto ldv_23797;
  } else {

  }
#line 237
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 238
  writeb((int )((unsigned int )dev_priv->saveAR_INDEX | 32U), (void volatile   *)dev_priv->regs + 960U);
#line 239
  readb((void const volatile   *)dev_priv->regs + (unsigned long )st01);
#line 242
  writeb((int )dev_priv->saveDACMASK, (void volatile   *)dev_priv->regs + 966U);
#line 244
  writeb(0, (void volatile   *)dev_priv->regs + 968U);
#line 246
  i = 0;
#line 246
  goto ldv_23801;
  ldv_23800: 
#line 247
  writeb((int )dev_priv->saveDACDATA[i], (void volatile   *)dev_priv->regs + 969U);
#line 246
  i = i + 1;
  ldv_23801: ;
#line 246
  if (i <= 767) {
#line 247
    goto ldv_23800;
  } else {

  }

#line 251
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
int i915_save_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;

  {
#line 253
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 256
  pci_read_config_byte(dev->pdev, 244, & dev_priv->saveLBB);
#line 259
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 260
    dev_priv->saveRENDERSTANDBY = readl((void const volatile   *)dev_priv->regs + 70072U);
  } else {

  }
#line 263
  dev_priv->saveHWS = readl((void const volatile   *)dev_priv->regs + 8320U);
#line 266
  dev_priv->saveDSPARB = readl((void const volatile   *)dev_priv->regs + 458800U);
#line 269
  dev_priv->savePIPEACONF = readl((void const volatile   *)dev_priv->regs + 458760U);
#line 270
  dev_priv->savePIPEASRC = readl((void const volatile   *)dev_priv->regs + 393244U);
#line 271
  dev_priv->saveFPA0 = readl((void const volatile   *)dev_priv->regs + 24640U);
#line 272
  dev_priv->saveFPA1 = readl((void const volatile   *)dev_priv->regs + 24644U);
#line 273
  dev_priv->saveDPLL_A = readl((void const volatile   *)dev_priv->regs + 24596U);
#line 274
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 275
    dev_priv->saveDPLL_A_MD = readl((void const volatile   *)dev_priv->regs + 24604U);
  } else {

  }
#line 276
  dev_priv->saveHTOTAL_A = readl((void const volatile   *)dev_priv->regs + 393216U);
#line 277
  dev_priv->saveHBLANK_A = readl((void const volatile   *)dev_priv->regs + 393220U);
#line 278
  dev_priv->saveHSYNC_A = readl((void const volatile   *)dev_priv->regs + 393224U);
#line 279
  dev_priv->saveVTOTAL_A = readl((void const volatile   *)dev_priv->regs + 393228U);
#line 280
  dev_priv->saveVBLANK_A = readl((void const volatile   *)dev_priv->regs + 393232U);
#line 281
  dev_priv->saveVSYNC_A = readl((void const volatile   *)dev_priv->regs + 393236U);
#line 282
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)dev_priv->regs + 393248U);
#line 284
  dev_priv->saveDSPACNTR = readl((void const volatile   *)dev_priv->regs + 459136U);
#line 285
  dev_priv->saveDSPASTRIDE = readl((void const volatile   *)dev_priv->regs + 459144U);
#line 286
  dev_priv->saveDSPASIZE = readl((void const volatile   *)dev_priv->regs + 459152U);
#line 287
  dev_priv->saveDSPAPOS = readl((void const volatile   *)dev_priv->regs + 459148U);
#line 288
  dev_priv->saveDSPAADDR = readl((void const volatile   *)dev_priv->regs + 459140U);
#line 289
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 290
    dev_priv->saveDSPASURF = readl((void const volatile   *)dev_priv->regs + 459164U);
#line 291
    dev_priv->saveDSPATILEOFF = readl((void const volatile   *)dev_priv->regs + 459172U);
  } else {

  }
#line 293
  i915_save_palette(dev, PIPE_A);
#line 294
  dev_priv->savePIPEASTAT = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 297
  dev_priv->savePIPEBCONF = readl((void const volatile   *)dev_priv->regs + 462856U);
#line 298
  dev_priv->savePIPEBSRC = readl((void const volatile   *)dev_priv->regs + 397340U);
#line 299
  dev_priv->saveFPB0 = readl((void const volatile   *)dev_priv->regs + 24648U);
#line 300
  dev_priv->saveFPB1 = readl((void const volatile   *)dev_priv->regs + 24652U);
#line 301
  dev_priv->saveDPLL_B = readl((void const volatile   *)dev_priv->regs + 24600U);
#line 302
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 303
    dev_priv->saveDPLL_B_MD = readl((void const volatile   *)dev_priv->regs + 24608U);
  } else {

  }
#line 304
  dev_priv->saveHTOTAL_B = readl((void const volatile   *)dev_priv->regs + 397312U);
#line 305
  dev_priv->saveHBLANK_B = readl((void const volatile   *)dev_priv->regs + 397316U);
#line 306
  dev_priv->saveHSYNC_B = readl((void const volatile   *)dev_priv->regs + 397320U);
#line 307
  dev_priv->saveVTOTAL_B = readl((void const volatile   *)dev_priv->regs + 397324U);
#line 308
  dev_priv->saveVBLANK_B = readl((void const volatile   *)dev_priv->regs + 397328U);
#line 309
  dev_priv->saveVSYNC_B = readl((void const volatile   *)dev_priv->regs + 397332U);
#line 310
  dev_priv->saveBCLRPAT_A = readl((void const volatile   *)dev_priv->regs + 393248U);
#line 312
  dev_priv->saveDSPBCNTR = readl((void const volatile   *)dev_priv->regs + 463232U);
#line 313
  dev_priv->saveDSPBSTRIDE = readl((void const volatile   *)dev_priv->regs + 463240U);
#line 314
  dev_priv->saveDSPBSIZE = readl((void const volatile   *)dev_priv->regs + 463248U);
#line 315
  dev_priv->saveDSPBPOS = readl((void const volatile   *)dev_priv->regs + 463244U);
#line 316
  dev_priv->saveDSPBADDR = readl((void const volatile   *)dev_priv->regs + 463236U);
#line 317
  if (dev->pci_device == 10754 || dev->pci_device == 10818) {
#line 318
    dev_priv->saveDSPBSURF = readl((void const volatile   *)dev_priv->regs + 463260U);
#line 319
    dev_priv->saveDSPBTILEOFF = readl((void const volatile   *)dev_priv->regs + 463268U);
  } else {

  }
#line 321
  i915_save_palette(dev, PIPE_B);
#line 322
  dev_priv->savePIPEBSTAT = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 325
  dev_priv->saveADPA = readl((void const volatile   *)dev_priv->regs + 397568U);
#line 328
  dev_priv->savePP_CONTROL = readl((void const volatile   *)dev_priv->regs + 397828U);
#line 329
  dev_priv->savePFIT_PGM_RATIOS = readl((void const volatile   *)dev_priv->regs + 397876U);
#line 330
  dev_priv->saveBLC_PWM_CTL = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 331
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 332
    dev_priv->saveBLC_PWM_CTL2 = readl((void const volatile   *)dev_priv->regs + 397904U);
  } else {

  }
#line 333
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 334
    dev_priv->saveLVDS = readl((void const volatile   *)dev_priv->regs + 397696U);
  } else {

  }
#line 335
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 336
    dev_priv->savePFIT_CONTROL = readl((void const volatile   *)dev_priv->regs + 397872U);
  } else {

  }
#line 337
  dev_priv->savePP_ON_DELAYS = readl((void const volatile   *)dev_priv->regs + 397832U);
#line 338
  dev_priv->savePP_OFF_DELAYS = readl((void const volatile   *)dev_priv->regs + 397836U);
#line 339
  dev_priv->savePP_DIVISOR = readl((void const volatile   *)dev_priv->regs + 397840U);
#line 344
  dev_priv->saveFBC_CFB_BASE = readl((void const volatile   *)dev_priv->regs + 12800U);
#line 345
  dev_priv->saveFBC_LL_BASE = readl((void const volatile   *)dev_priv->regs + 12804U);
#line 346
  dev_priv->saveFBC_CONTROL2 = readl((void const volatile   *)dev_priv->regs + 12820U);
#line 347
  dev_priv->saveFBC_CONTROL = readl((void const volatile   *)dev_priv->regs + 12808U);
#line 350
  dev_priv->saveIIR = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 351
  dev_priv->saveIER = readl((void const volatile   *)dev_priv->regs + 8352U);
#line 352
  dev_priv->saveIMR = readl((void const volatile   *)dev_priv->regs + 8360U);
#line 355
  dev_priv->saveVGA0 = readl((void const volatile   *)dev_priv->regs + 24576U);
#line 356
  dev_priv->saveVGA1 = readl((void const volatile   *)dev_priv->regs + 24580U);
#line 357
  dev_priv->saveVGA_PD = readl((void const volatile   *)dev_priv->regs + 24592U);
#line 358
  dev_priv->saveVGACNTRL = readl((void const volatile   *)dev_priv->regs + 463872U);
#line 361
  dev_priv->saveD_STATE = readl((void const volatile   *)dev_priv->regs + 24836U);
#line 362
  dev_priv->saveCG_2D_DIS = readl((void const volatile   *)dev_priv->regs + 25088U);
#line 365
  dev_priv->saveCACHE_MODE_0 = readl((void const volatile   *)dev_priv->regs + 8480U);
#line 368
  dev_priv->saveMI_ARB_STATE = readl((void const volatile   *)dev_priv->regs + 8420U);
#line 371
  i = 0;
#line 371
  goto ldv_23809;
  ldv_23808: 
#line 372
  dev_priv->saveSWF0[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 463888));
#line 373
  dev_priv->saveSWF1[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 459792));
#line 371
  i = i + 1;
  ldv_23809: ;
#line 371
  if (i <= 15) {
#line 372
    goto ldv_23808;
  } else {

  }
#line 375
  i = 0;
#line 375
  goto ldv_23812;
  ldv_23811: 
#line 376
  dev_priv->saveSWF2[i] = readl((void const volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 467988));
#line 375
  i = i + 1;
  ldv_23812: ;
#line 375
  if (i <= 2) {
#line 376
    goto ldv_23811;
  } else {

  }
#line 378
  i915_save_vga(dev);
#line 380
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_suspend.c.prepared"
int i915_restore_state(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;

  {
#line 385
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 388
  pci_write_config_byte(dev->pdev, 244, (int )dev_priv->saveLBB);
#line 391
  if ((((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) && (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818)) {
#line 392
    writel(dev_priv->saveRENDERSTANDBY, (void volatile   *)dev_priv->regs + 70072U);
  } else {

  }
#line 395
  writel(dev_priv->saveHWS, (void volatile   *)dev_priv->regs + 8320U);
#line 398
  writel(dev_priv->saveDSPARB, (void volatile   *)dev_priv->regs + 458800U);
#line 402
  if ((int )dev_priv->saveDPLL_A < 0) {
#line 403
    writel(dev_priv->saveDPLL_A & 2147483647U, (void volatile   *)dev_priv->regs + 24596U);
#line 405
    __const_udelay(644250UL);
  } else {

  }
#line 407
  writel(dev_priv->saveFPA0, (void volatile   *)dev_priv->regs + 24640U);
#line 408
  writel(dev_priv->saveFPA1, (void volatile   *)dev_priv->regs + 24644U);
#line 410
  writel(dev_priv->saveDPLL_A, (void volatile   *)dev_priv->regs + 24596U);
#line 411
  __const_udelay(644250UL);
#line 412
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 413
    writel(dev_priv->saveDPLL_A_MD, (void volatile   *)dev_priv->regs + 24604U);
  } else {

  }
#line 414
  __const_udelay(644250UL);
#line 417
  writel(dev_priv->saveHTOTAL_A, (void volatile   *)dev_priv->regs + 393216U);
#line 418
  writel(dev_priv->saveHBLANK_A, (void volatile   *)dev_priv->regs + 393220U);
#line 419
  writel(dev_priv->saveHSYNC_A, (void volatile   *)dev_priv->regs + 393224U);
#line 420
  writel(dev_priv->saveVTOTAL_A, (void volatile   *)dev_priv->regs + 393228U);
#line 421
  writel(dev_priv->saveVBLANK_A, (void volatile   *)dev_priv->regs + 393232U);
#line 422
  writel(dev_priv->saveVSYNC_A, (void volatile   *)dev_priv->regs + 393236U);
#line 423
  writel(dev_priv->saveBCLRPAT_A, (void volatile   *)dev_priv->regs + 393248U);
#line 426
  writel(dev_priv->saveDSPASIZE, (void volatile   *)dev_priv->regs + 459152U);
#line 427
  writel(dev_priv->saveDSPAPOS, (void volatile   *)dev_priv->regs + 459148U);
#line 428
  writel(dev_priv->savePIPEASRC, (void volatile   *)dev_priv->regs + 393244U);
#line 429
  writel(dev_priv->saveDSPAADDR, (void volatile   *)dev_priv->regs + 459140U);
#line 430
  writel(dev_priv->saveDSPASTRIDE, (void volatile   *)dev_priv->regs + 459144U);
#line 431
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 432
    writel(dev_priv->saveDSPASURF, (void volatile   *)dev_priv->regs + 459164U);
#line 433
    writel(dev_priv->saveDSPATILEOFF, (void volatile   *)dev_priv->regs + 459172U);
  } else {

  }
#line 436
  writel(dev_priv->savePIPEACONF, (void volatile   *)dev_priv->regs + 458760U);
#line 438
  i915_restore_palette(dev, PIPE_A);
#line 440
  writel(dev_priv->saveDSPACNTR, (void volatile   *)dev_priv->regs + 459136U);
#line 441
  tmp = readl((void const volatile   *)dev_priv->regs + 459140U);
#line 441
  writel(tmp, (void volatile   *)dev_priv->regs + 459140U);
#line 444
  if ((int )dev_priv->saveDPLL_B < 0) {
#line 445
    writel(dev_priv->saveDPLL_B & 2147483647U, (void volatile   *)dev_priv->regs + 24600U);
#line 447
    __const_udelay(644250UL);
  } else {

  }
#line 449
  writel(dev_priv->saveFPB0, (void volatile   *)dev_priv->regs + 24648U);
#line 450
  writel(dev_priv->saveFPB1, (void volatile   *)dev_priv->regs + 24652U);
#line 452
  writel(dev_priv->saveDPLL_B, (void volatile   *)dev_priv->regs + 24600U);
#line 453
  __const_udelay(644250UL);
#line 454
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 455
    writel(dev_priv->saveDPLL_B_MD, (void volatile   *)dev_priv->regs + 24608U);
  } else {

  }
#line 456
  __const_udelay(644250UL);
#line 459
  writel(dev_priv->saveHTOTAL_B, (void volatile   *)dev_priv->regs + 397312U);
#line 460
  writel(dev_priv->saveHBLANK_B, (void volatile   *)dev_priv->regs + 397316U);
#line 461
  writel(dev_priv->saveHSYNC_B, (void volatile   *)dev_priv->regs + 397320U);
#line 462
  writel(dev_priv->saveVTOTAL_B, (void volatile   *)dev_priv->regs + 397324U);
#line 463
  writel(dev_priv->saveVBLANK_B, (void volatile   *)dev_priv->regs + 397328U);
#line 464
  writel(dev_priv->saveVSYNC_B, (void volatile   *)dev_priv->regs + 397332U);
#line 465
  writel(dev_priv->saveBCLRPAT_B, (void volatile   *)dev_priv->regs + 397344U);
#line 468
  writel(dev_priv->saveDSPBSIZE, (void volatile   *)dev_priv->regs + 463248U);
#line 469
  writel(dev_priv->saveDSPBPOS, (void volatile   *)dev_priv->regs + 463244U);
#line 470
  writel(dev_priv->savePIPEBSRC, (void volatile   *)dev_priv->regs + 397340U);
#line 471
  writel(dev_priv->saveDSPBADDR, (void volatile   *)dev_priv->regs + 463236U);
#line 472
  writel(dev_priv->saveDSPBSTRIDE, (void volatile   *)dev_priv->regs + 463240U);
#line 473
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 474
    writel(dev_priv->saveDSPBSURF, (void volatile   *)dev_priv->regs + 463260U);
#line 475
    writel(dev_priv->saveDSPBTILEOFF, (void volatile   *)dev_priv->regs + 463268U);
  } else {

  }
#line 478
  writel(dev_priv->savePIPEBCONF, (void volatile   *)dev_priv->regs + 462856U);
#line 480
  i915_restore_palette(dev, PIPE_B);
#line 482
  writel(dev_priv->saveDSPBCNTR, (void volatile   *)dev_priv->regs + 463232U);
#line 483
  tmp___0 = readl((void const volatile   *)dev_priv->regs + 463236U);
#line 483
  writel(tmp___0, (void volatile   *)dev_priv->regs + 463236U);
#line 486
  writel(dev_priv->saveADPA, (void volatile   *)dev_priv->regs + 397568U);
#line 489
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 490
    writel(dev_priv->saveBLC_PWM_CTL2, (void volatile   *)dev_priv->regs + 397904U);
  } else {

  }
#line 491
  if ((((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) && dev->pci_device != 13687) {
#line 492
    writel(dev_priv->saveLVDS, (void volatile   *)dev_priv->regs + 397696U);
  } else {

  }
#line 493
  if (dev->pci_device != 13687 && dev->pci_device != 9570) {
#line 494
    writel(dev_priv->savePFIT_CONTROL, (void volatile   *)dev_priv->regs + 397872U);
  } else {

  }
#line 496
  writel(dev_priv->savePFIT_PGM_RATIOS, (void volatile   *)dev_priv->regs + 397876U);
#line 497
  writel(dev_priv->saveBLC_PWM_CTL, (void volatile   *)dev_priv->regs + 397908U);
#line 498
  writel(dev_priv->savePP_ON_DELAYS, (void volatile   *)dev_priv->regs + 397832U);
#line 499
  writel(dev_priv->savePP_OFF_DELAYS, (void volatile   *)dev_priv->regs + 397836U);
#line 500
  writel(dev_priv->savePP_DIVISOR, (void volatile   *)dev_priv->regs + 397840U);
#line 501
  writel(dev_priv->savePP_CONTROL, (void volatile   *)dev_priv->regs + 397828U);
#line 506
  writel(dev_priv->saveFBC_CFB_BASE, (void volatile   *)dev_priv->regs + 12800U);
#line 507
  writel(dev_priv->saveFBC_LL_BASE, (void volatile   *)dev_priv->regs + 12804U);
#line 508
  writel(dev_priv->saveFBC_CONTROL2, (void volatile   *)dev_priv->regs + 12820U);
#line 509
  writel(dev_priv->saveFBC_CONTROL, (void volatile   *)dev_priv->regs + 12808U);
#line 512
  writel(dev_priv->saveVGACNTRL, (void volatile   *)dev_priv->regs + 463872U);
#line 513
  writel(dev_priv->saveVGA0, (void volatile   *)dev_priv->regs + 24576U);
#line 514
  writel(dev_priv->saveVGA1, (void volatile   *)dev_priv->regs + 24580U);
#line 515
  writel(dev_priv->saveVGA_PD, (void volatile   *)dev_priv->regs + 24592U);
#line 516
  __const_udelay(644250UL);
#line 519
  writel(dev_priv->saveD_STATE, (void volatile   *)dev_priv->regs + 24836U);
#line 520
  writel(dev_priv->saveCG_2D_DIS, (void volatile   *)dev_priv->regs + 25088U);
#line 523
  writel(dev_priv->saveCACHE_MODE_0 | 4294901760U, (void volatile   *)dev_priv->regs + 8480U);
#line 526
  writel(dev_priv->saveMI_ARB_STATE | 4294901760U, (void volatile   *)dev_priv->regs + 8420U);
#line 528
  i = 0;
#line 528
  goto ldv_23820;
  ldv_23819: 
#line 529
  writel(dev_priv->saveSWF0[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 463888));
#line 530
  writel(dev_priv->saveSWF1[i + 7], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 459792));
#line 528
  i = i + 1;
  ldv_23820: ;
#line 528
  if (i <= 15) {
#line 529
    goto ldv_23819;
  } else {

  }
#line 532
  i = 0;
#line 532
  goto ldv_23823;
  ldv_23822: 
#line 533
  writel(dev_priv->saveSWF2[i], (void volatile   *)dev_priv->regs + (unsigned long )((i << 2) + 467988));
#line 532
  i = i + 1;
  ldv_23823: ;
#line 532
  if (i <= 2) {
#line 533
    goto ldv_23822;
  } else {

  }
#line 535
  i915_restore_vga(dev);
#line 537
  return (0);
}
}
#line 36 "include/asm-generic/bug.h"
extern void warn_on_slowpath(char const   * , int const    ) ;
#line 120 "include/linux/kernel.h"
extern void __might_sleep(char * , int  ) ;
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 162 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 165
  __list_del(list->prev, list->next);
#line 166
  list_add_tail(list, head);
#line 167
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 264 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 51
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 54
  return;
}
}
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 65
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 68
  return;
}
}
#line 108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 110
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
#line 113
  return;
}
}
#line 152 "include/linux/mutex.h"
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) ;
#line 156
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) ;
#line 160
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 164
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 168
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 172
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_32(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_34(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_51(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) ;
#line 236
void ldv_mutex_unlock_54(struct mutex *ldv_func_arg1 ) ;
#line 240
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) ;
#line 244
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) ;
#line 248
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) ;
#line 252
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) ;
#line 256
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) ;
#line 260
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) ;
#line 264
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) ;
#line 268
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 272
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) ;
#line 276
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 280
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 284
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 288
void ldv_mutex_unlock_72(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_21(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_33(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_46(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_48(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_52(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_56(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) ;
#line 66
void ldv_mutex_lock_64(struct mutex *ldv_func_arg1 ) ;
#line 70
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 74
void ldv_mutex_lock_71(struct mutex *ldv_func_arg1 ) ;
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (8UL) {
  case 2UL: 
#line 208
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5737;
  case 4UL: 
#line 208
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5737;
  case 8UL: 
#line 208
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5737;
  default: 
#line 208
  __bad_pda_field();
  }
  ldv_5737: 
#line 208
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 209
  return (ti);
}
}
#line 431 "include/linux/wait.h"
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 433
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 434
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 38 "include/linux/rwsem.h"
extern void down_write(struct rw_semaphore * ) ;
#line 53
extern void up_write(struct rw_semaphore * ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref * ) ;
#line 28
extern int kref_put(struct kref * , void (*)(struct kref * ) ) ;
#line 40 "include/linux/timer.h"
extern void init_timer(struct timer_list * ) ;
#line 196 "include/linux/workqueue.h"
extern int schedule_delayed_work(struct delayed_work * , unsigned long  ) ;
#line 226
extern int cancel_delayed_work_sync(struct delayed_work * ) ;
#line 210 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 212
  if (size != 0UL && 0xffffffffffffffffUL / size < n) {
#line 213
    return (0);
  } else {

  }
#line 214
  tmp = __kmalloc(n * size, flags | 32768U);
#line 214
  return (tmp);
}
}
#line 1347 "include/linux/fs.h"
extern ssize_t vfs_read(struct file * , char * , size_t  , loff_t * ) ;
#line 1348
extern ssize_t vfs_write(struct file * , char const   * , size_t  , loff_t * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
extern void *ioremap_wc(unsigned long  , unsigned long  ) ;
#line 315 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 589 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 591
  return ((void *)((unsigned long )(((long )page + 32985348833280L) / 96L << 12) + 0xffff880000000000UL));
}
}
#line 823
extern int set_page_dirty(struct page * ) ;
#line 1110
extern unsigned long do_mmap_pgoff(struct file * , unsigned long  , unsigned long  ,
                                   unsigned long  , unsigned long  , unsigned long  ) ;
#line 1118 "include/linux/mm.h"
__inline static unsigned long do_mmap(struct file *file , unsigned long addr , unsigned long len ,
                                      unsigned long prot , unsigned long flag , unsigned long offset ) 
{ 
  unsigned long ret ;

  {
#line 1122
  ret = 0xffffffffffffffeaUL;
#line 1123
  if (((len + 4095UL) & 0xfffffffffffff000UL) + offset < offset) {
#line 1124
    goto out;
  } else {

  }
#line 1125
  if ((offset & 4095UL) == 0UL) {
#line 1126
    ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> 12);
  } else {

  }
  out: ;
#line 1128
  return (ret);
}
}
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 182
extern long __copy_user_nocache(void * , void const   * , unsigned int  , int  ) ;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_from_user_inatomic_nocache(void *dst , void const   *src ,
                                                      unsigned int size ) 
{ 
  long tmp ;

  {
#line 196
  tmp = __copy_user_nocache(dst, src, size, 0);
#line 196
  return ((int )tmp);
}
}
#line 39 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 41
  __might_sleep((char *)"include/linux/highmem.h", 41);
#line 42
  tmp = lowmem_page_address(page);
#line 42
  return (tmp);
}
}
#line 260 "include/linux/pagemap.h"
extern struct page *read_cache_page(struct address_space * , unsigned long  , filler_t * ,
                                    void * ) ;
#line 274 "include/linux/pagemap.h"
__inline static struct page *read_mapping_page(struct address_space *mapping , unsigned long index ,
                                               void *data ) 
{ 
  filler_t *filler ;
  struct page *tmp ;

  {
#line 277
  filler = (filler_t *)(mapping->a_ops)->readpage;
#line 278
  tmp = read_cache_page(mapping, index, filler, data);
#line 278
  return (tmp);
}
}
#line 1012 "include/drm/drmP.h"
extern int drm_free_agp(struct agp_memory * , int  ) ;
#line 1014
extern struct agp_memory *drm_agp_bind_pages(struct drm_device * , struct page ** ,
                                             unsigned long  , uint32_t  , uint32_t  ) ;
#line 1019
extern int drm_unbind_agp(struct agp_memory * ) ;
#line 1082
extern void drm_clflush_pages(struct page ** , unsigned long  ) ;
#line 1140
extern int drm_irq_install(struct drm_device * ) ;
#line 1189
extern void drm_agp_chipset_flush(struct drm_device * ) ;
#line 1239
extern struct drm_mm_node *drm_mm_get_block(struct drm_mm_node * , unsigned long  ,
                                            unsigned int  ) ;
#line 1242
extern void drm_mm_put_block(struct drm_mm_node * ) ;
#line 1243
extern struct drm_mm_node *drm_mm_search_free(struct drm_mm  const  * , unsigned long  ,
                                              unsigned int  , int  ) ;
#line 1245
extern int drm_mm_init(struct drm_mm * , unsigned long  , unsigned long  ) ;
#line 1254
extern void drm_gem_object_free(struct kref * ) ;
#line 1255
extern struct drm_gem_object *drm_gem_object_alloc(struct drm_device * , size_t  ) ;
#line 1257
extern void drm_gem_object_handle_free(struct kref * ) ;
#line 1260 "include/drm/drmP.h"
__inline static void drm_gem_object_reference(struct drm_gem_object *obj ) 
{ 


  {
#line 1262
  kref_get(& obj->refcount);
#line 1263
  return;
}
}
#line 1266 "include/drm/drmP.h"
__inline static void drm_gem_object_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1268
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1269
    return;
  } else {

  }
#line 1271
  kref_put(& obj->refcount, & drm_gem_object_free);
#line 1272
  return;
}
}
#line 1274
extern int drm_gem_handle_create(struct drm_file * , struct drm_gem_object * , int * ) ;
#line 1286 "include/drm/drmP.h"
__inline static void drm_gem_object_handle_unreference(struct drm_gem_object *obj ) 
{ 


  {
#line 1288
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1289
    return;
  } else {

  }
#line 1296
  kref_put(& obj->handlecount, & drm_gem_object_handle_free);
#line 1297
  drm_gem_object_unreference(obj);
#line 1298
  return;
}
}
#line 1300
extern struct drm_gem_object *drm_gem_object_lookup(struct drm_device * , struct drm_file * ,
                                                    int  ) ;
#line 1313
extern void drm_core_ioremap_wc(struct drm_map * , struct drm_device * ) ;
#line 1362 "include/drm/drmP.h"
__inline static void *drm_calloc(size_t nmemb , size_t size , int area ) 
{ 
  void *tmp ;

  {
#line 1364
  tmp = kcalloc(nmemb, size, 208U);
#line 1364
  return (tmp);
}
}
#line 88 "include/linux/io-mapping.h"
__inline static struct io_mapping *io_mapping_create_wc(unsigned long base , unsigned long size ) 
{ 
  void *tmp ;

  {
#line 90
  tmp = ioremap_wc(base, size);
#line 90
  return ((struct io_mapping *)tmp);
}
}
#line 94 "include/linux/io-mapping.h"
__inline static void io_mapping_free(struct io_mapping *mapping ) 
{ 


  {
#line 96
  iounmap((void volatile   *)mapping);
#line 97
  return;
}
}
#line 101 "include/linux/io-mapping.h"
__inline static void *io_mapping_map_atomic_wc(struct io_mapping *mapping , unsigned long offset ) 
{ 


  {
#line 103
  return ((void *)mapping + offset);
}
}
#line 107 "include/linux/io-mapping.h"
__inline static void io_mapping_unmap_atomic(void *vaddr ) 
{ 


  {
#line 109
  return;
}
}
#line 517 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/gpu/drm/i915/i915_drv.h"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) ;
#line 518
void i915_gem_object_unpin(struct drm_gem_object *obj ) ;
#line 521
void i915_gem_retire_requests(struct drm_device *dev ) ;
#line 522
void i915_gem_retire_work_handler(struct work_struct *work ) ;
#line 523
void i915_gem_clflush_object(struct drm_gem_object *obj ) ;
#line 526
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) ;
#line 180 "include/linux/swap.h"
extern void mark_page_accessed(struct page * ) ;
#line 52 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) ;
#line 55
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) ;
#line 56
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) ;
#line 57
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) ;
#line 58
static int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) ;
#line 60
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) ;
#line 62
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) ;
#line 65
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) ;
#line 66
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) ;
#line 67
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) ;
#line 68
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) ;
#line 71
static void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) ;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_init_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_init *args ;

  {
#line 77
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 78
  args = (struct drm_i915_gem_init *)data;
#line 80
  ldv_mutex_lock_21(& dev->struct_mutex);
#line 82
  if ((args->gtt_start >= args->gtt_end || (args->gtt_start & 4095ULL) != 0ULL) || (args->gtt_end & 4095ULL) != 0ULL) {
#line 85
    ldv_mutex_unlock_22(& dev->struct_mutex);
#line 86
    return (-22);
  } else {

  }
#line 89
  drm_mm_init(& dev_priv->mm.gtt_space, (unsigned long )args->gtt_start, (unsigned long )(args->gtt_end - args->gtt_start));
#line 92
  dev->gtt_total = (unsigned int )args->gtt_end - (unsigned int )args->gtt_start;
#line 94
  ldv_mutex_unlock_23(& dev->struct_mutex);
#line 96
  return (0);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_get_aperture_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_aperture *args ;

  {
#line 103
  args = (struct drm_i915_gem_get_aperture *)data;
#line 105
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 106
    return (-19);
  } else {

  }
#line 108
  args->aper_size = (uint64_t )dev->gtt_total;
#line 109
  args->aper_available_size = args->aper_size - (uint64_t )dev->pin_memory.counter;
#line 112
  return (0);
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_create_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_create *args ;
  struct drm_gem_object *obj ;
  int handle ;
  int ret ;

  {
#line 123
  args = (struct drm_i915_gem_create *)data;
#line 127
  args->size = ((args->size + 4095ULL) / 4096ULL) * 4096ULL;
#line 130
  obj = drm_gem_object_alloc(dev, (size_t )args->size);
#line 131
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 132
    return (-12);
  } else {

  }
#line 134
  ret = drm_gem_handle_create(file_priv, obj, & handle);
#line 135
  ldv_mutex_lock_24(& dev->struct_mutex);
#line 136
  drm_gem_object_handle_unreference(obj);
#line 137
  ldv_mutex_unlock_25(& dev->struct_mutex);
#line 139
  if (ret != 0) {
#line 140
    return (ret);
  } else {

  }
#line 142
  args->handle = (uint32_t )handle;
#line 144
  return (0);
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pread_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pread *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  ssize_t read ;
  loff_t offset ;
  int ret ;

  {
#line 156
  args = (struct drm_i915_gem_pread *)data;
#line 163
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 164
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 165
    return (-9);
  } else {

  }
#line 166
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 172
  if ((args->offset > (unsigned long long )obj->size || args->size > (unsigned long long )obj->size) || args->offset + args->size > (unsigned long long )obj->size) {
#line 174
    drm_gem_object_unreference(obj);
#line 175
    return (-22);
  } else {

  }
#line 178
  ldv_mutex_lock_26(& dev->struct_mutex);
#line 180
  ret = i915_gem_object_set_cpu_read_domain_range(obj, args->offset, args->size);
#line 182
  if (ret != 0) {
#line 183
    drm_gem_object_unreference(obj);
#line 184
    ldv_mutex_unlock_27(& dev->struct_mutex);
#line 185
    return (ret);
  } else {

  }
#line 188
  offset = (loff_t )args->offset;
#line 190
  read = vfs_read(obj->filp, (char *)args->data_ptr, (size_t )args->size, & offset);
#line 192
  if ((unsigned long long )read != args->size) {
#line 193
    drm_gem_object_unreference(obj);
#line 194
    ldv_mutex_unlock_28(& dev->struct_mutex);
#line 195
    if (read < 0L) {
#line 196
      return ((int )read);
    } else {
#line 198
      return (-22);
    }
  } else {

  }
#line 201
  drm_gem_object_unreference(obj);
#line 202
  ldv_mutex_unlock_29(& dev->struct_mutex);
#line 204
  return (0);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
__inline static int fast_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr_atomic ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 220
  tmp = io_mapping_map_atomic_wc(mapping, (unsigned long )page_base);
#line 220
  vaddr_atomic = (char *)tmp;
#line 221
  tmp___0 = __copy_from_user_inatomic_nocache((void *)vaddr_atomic + (unsigned long )page_offset___0,
                                              (void const   *)user_data, (unsigned int )length);
#line 221
  unwritten = (unsigned long )tmp___0;
#line 223
  io_mapping_unmap_atomic((void *)vaddr_atomic);
#line 224
  if (unwritten != 0UL) {
#line 225
    return (-14);
  } else {

  }
#line 226
  return (0);
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
__inline static int slow_user_write(struct io_mapping *mapping , loff_t page_base ,
                                    int page_offset___0 , char *user_data , int length ) 
{ 
  char *vaddr ;
  unsigned long unwritten ;
  void *tmp ;
  int tmp___0 ;

  {
#line 242
  tmp = io_mapping_map_atomic_wc(mapping, (unsigned long )page_base);
#line 242
  vaddr = (char *)tmp;
#line 243
  if ((unsigned long )vaddr == (unsigned long )((char *)0)) {
#line 244
    return (-14);
  } else {

  }
#line 245
  tmp___0 = __copy_from_user((void *)vaddr + (unsigned long )page_offset___0, (void const   *)user_data,
                             (unsigned int )length);
#line 245
  unwritten = (unsigned long )tmp___0;
#line 247
  io_mapping_unmap_atomic((void *)vaddr);
#line 248
  if (unwritten != 0UL) {
#line 249
    return (-14);
  } else {

  }
#line 250
  return (0);
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_gtt_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                               struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  drm_i915_private_t *dev_priv ;
  ssize_t remain ;
  loff_t offset ;
  loff_t page_base ;
  char *user_data ;
  int page_offset___0 ;
  int page_length ;
  int ret ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;

  {
#line 258
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 259
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 266
  user_data = (char *)args->data_ptr;
#line 267
  remain = (ssize_t )args->size;
#line 268
  tmp = current_thread_info___0();
#line 268
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (user_data),
            "g" (remain), "rm" (tmp->addr_limit.seg));
#line 268
  tmp___0 = __builtin_expect(flag == 0UL, 1L);
#line 268
  if (tmp___0 == 0L) {
#line 269
    return (-14);
  } else {

  }
#line 272
  ldv_mutex_lock_30(& dev->struct_mutex);
#line 273
  ret = i915_gem_object_pin(obj, 0U);
#line 274
  if (ret != 0) {
#line 275
    ldv_mutex_unlock_31(& dev->struct_mutex);
#line 276
    return (ret);
  } else {

  }
#line 278
  ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 279
  if (ret != 0) {
#line 280
    goto fail;
  } else {

  }
#line 282
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 283
  offset = (loff_t )((uint64_t )obj_priv->gtt_offset + args->offset);
#line 284
  obj_priv->dirty = 1;
#line 286
  goto ldv_24416;
  ldv_24415: 
#line 293
  page_base = offset & -4096LL;
#line 294
  page_offset___0 = (int )offset & 4095;
#line 295
  page_length = (int )remain;
#line 296
  if ((unsigned long )((ssize_t )page_offset___0 + remain) > 4096UL) {
#line 297
    page_length = (int )(4096U - (unsigned int )page_offset___0);
  } else {

  }
#line 299
  ret = fast_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0, user_data,
                        page_length);
#line 306
  if (ret != 0) {
#line 307
    ret = slow_user_write(dev_priv->mm.gtt_mapping, page_base, page_offset___0, user_data,
                          page_length);
#line 310
    if (ret != 0) {
#line 311
      goto fail;
    } else {

    }
  } else {

  }
#line 314
  remain = remain - (ssize_t )page_length;
#line 315
  user_data = user_data + (unsigned long )page_length;
#line 316
  offset = (loff_t )page_length + offset;
  ldv_24416: ;
#line 286
  if (remain > 0L) {
#line 287
    goto ldv_24415;
  } else {

  }

  fail: 
#line 320
  i915_gem_object_unpin(obj);
#line 321
  ldv_mutex_unlock_32(& dev->struct_mutex);
#line 323
  return (ret);
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_shmem_pwrite(struct drm_device *dev , struct drm_gem_object *obj ,
                                 struct drm_i915_gem_pwrite *args , struct drm_file *file_priv ) 
{ 
  int ret ;
  loff_t offset ;
  ssize_t written ;

  {
#line 335
  ldv_mutex_lock_33(& dev->struct_mutex);
#line 337
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 338
  if (ret != 0) {
#line 339
    ldv_mutex_unlock_34(& dev->struct_mutex);
#line 340
    return (ret);
  } else {

  }
#line 343
  offset = (loff_t )args->offset;
#line 345
  written = vfs_write(obj->filp, (char const   *)args->data_ptr, (size_t )args->size,
                      & offset);
#line 348
  if ((unsigned long long )written != args->size) {
#line 349
    ldv_mutex_unlock_35(& dev->struct_mutex);
#line 350
    if (written < 0L) {
#line 351
      return ((int )written);
    } else {
#line 353
      return (-22);
    }
  } else {

  }
#line 356
  ldv_mutex_unlock_36(& dev->struct_mutex);
#line 358
  return (0);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pwrite_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pwrite *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 370
  args = (struct drm_i915_gem_pwrite *)data;
#line 373
  ret = 0;
#line 375
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 376
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 377
    return (-9);
  } else {

  }
#line 378
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 384
  if ((args->offset > (unsigned long long )obj->size || args->size > (unsigned long long )obj->size) || args->offset + args->size > (unsigned long long )obj->size) {
#line 386
    drm_gem_object_unreference(obj);
#line 387
    return (-22);
  } else {

  }
#line 396
  if (obj_priv->tiling_mode == 0U && dev->gtt_total != 0U) {
#line 398
    ret = i915_gem_gtt_pwrite(dev, obj, args, file_priv);
  } else {
#line 400
    ret = i915_gem_shmem_pwrite(dev, obj, args, file_priv);
  }
#line 407
  drm_gem_object_unreference(obj);
#line 409
  return (ret);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_set_domain_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_domain *args ;
  struct drm_gem_object *obj ;
  uint32_t read_domains ;
  uint32_t write_domain ;
  int ret ;

  {
#line 420
  args = (struct drm_i915_gem_set_domain *)data;
#line 422
  read_domains = args->read_domains;
#line 423
  write_domain = args->write_domain;
#line 426
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 427
    return (-19);
  } else {

  }
#line 430
  if ((write_domain & 4294967230U) != 0U) {
#line 431
    return (-22);
  } else {

  }
#line 433
  if ((read_domains & 4294967230U) != 0U) {
#line 434
    return (-22);
  } else {

  }
#line 439
  if (write_domain != 0U && read_domains != write_domain) {
#line 440
    return (-22);
  } else {

  }
#line 442
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 443
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 444
    return (-9);
  } else {

  }
#line 446
  ldv_mutex_lock_37(& dev->struct_mutex);
#line 451
  if ((read_domains & 64U) != 0U) {
#line 452
    ret = i915_gem_object_set_to_gtt_domain(obj, write_domain != 0U);
#line 458
    if (ret == -22) {
#line 459
      ret = 0;
    } else {

    }
  } else {
#line 461
    ret = i915_gem_object_set_to_cpu_domain(obj, write_domain != 0U);
  }
#line 464
  drm_gem_object_unreference(obj);
#line 465
  ldv_mutex_unlock_38(& dev->struct_mutex);
#line 466
  return (ret);
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_sw_finish_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_sw_finish *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 476
  args = (struct drm_i915_gem_sw_finish *)data;
#line 479
  ret = 0;
#line 481
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 482
    return (-19);
  } else {

  }
#line 484
  ldv_mutex_lock_39(& dev->struct_mutex);
#line 485
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 486
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 487
    ldv_mutex_unlock_40(& dev->struct_mutex);
#line 488
    return (-9);
  } else {

  }
#line 495
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 498
  if (obj_priv->pin_count != 0) {
#line 499
    i915_gem_object_flush_cpu_write_domain(obj);
  } else {

  }
#line 501
  drm_gem_object_unreference(obj);
#line 502
  ldv_mutex_unlock_41(& dev->struct_mutex);
#line 503
  return (ret);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_mmap_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_mmap *args ;
  struct drm_gem_object *obj ;
  loff_t offset ;
  unsigned long addr ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;

  {
#line 517
  args = (struct drm_i915_gem_mmap *)data;
#line 522
  if (((dev->driver)->driver_features & 4096U) == 0U) {
#line 523
    return (-19);
  } else {

  }
#line 525
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 526
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 527
    return (-9);
  } else {

  }
#line 529
  offset = (loff_t )args->offset;
#line 531
  tmp = get_current();
#line 531
  down_write(& (tmp->mm)->mmap_sem);
#line 532
  addr = do_mmap(obj->filp, 0UL, (unsigned long )args->size, 3UL, 1UL, (unsigned long )args->offset);
#line 535
  tmp___0 = get_current();
#line 535
  up_write(& (tmp___0->mm)->mmap_sem);
#line 536
  ldv_mutex_lock_42(& dev->struct_mutex);
#line 537
  drm_gem_object_unreference(obj);
#line 538
  ldv_mutex_unlock_43(& dev->struct_mutex);
#line 539
  tmp___1 = IS_ERR((void const   *)addr);
#line 539
  if (tmp___1 != 0L) {
#line 540
    return ((int )addr);
  } else {

  }
#line 542
  args->addr_ptr = (unsigned long long )addr;
#line 544
  return (0);
}
}
#line 548 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_free_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;

  {
#line 550
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 551
  page_count___0 = (int )(obj->size / 4096UL);
#line 554
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 555
    return;
  } else {

  }
#line 558
  i = 0;
#line 558
  goto ldv_24471;
  ldv_24470: ;
#line 559
  if ((unsigned long )*(obj_priv->page_list + (unsigned long )i) != (unsigned long )((struct page *)0)) {
#line 560
    if (obj_priv->dirty != 0) {
#line 561
      set_page_dirty(*(obj_priv->page_list + (unsigned long )i));
    } else {

    }
#line 562
    mark_page_accessed(*(obj_priv->page_list + (unsigned long )i));
#line 563
    put_page(*(obj_priv->page_list + (unsigned long )i));
  } else {

  }
#line 558
  i = i + 1;
  ldv_24471: ;
#line 558
  if (i < page_count___0) {
#line 559
    goto ldv_24470;
  } else {

  }
#line 565
  obj_priv->dirty = 0;
#line 567
  drm_free((void *)obj_priv->page_list, (unsigned long )page_count___0 * 8UL, 2);
#line 570
  obj_priv->page_list = 0;
#line 571
  return;
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_active(struct drm_gem_object *obj , uint32_t seqno ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 576
  dev = obj->dev;
#line 577
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 578
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 581
  if (obj_priv->active == 0) {
#line 582
    drm_gem_object_reference(obj);
#line 583
    obj_priv->active = 1;
  } else {

  }
#line 586
  list_move_tail(& obj_priv->list, & dev_priv->mm.active_list);
#line 588
  obj_priv->last_rendering_seqno = seqno;
#line 589
  return;
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_flushing(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;

  {
#line 594
  dev = obj->dev;
#line 595
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 596
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 598
  tmp = __builtin_expect(obj_priv->active == 0, 0L);
#line 598
  if (tmp != 0L) {
#line 598
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (598), "i" (24UL));
    ldv_24486: ;
#line 598
    goto ldv_24486;
  } else {

  }
#line 599
  list_move_tail(& obj_priv->list, & dev_priv->mm.flushing_list);
#line 600
  obj_priv->last_rendering_seqno = 0U;
#line 601
  return;
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_move_to_inactive(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 606
  dev = obj->dev;
#line 607
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 608
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 611
  if (obj_priv->pin_count != 0) {
#line 612
    list_del_init(& obj_priv->list);
  } else {
#line 614
    list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
  }
#line 616
  obj_priv->last_rendering_seqno = 0U;
#line 617
  if (obj_priv->active != 0) {
#line 618
    obj_priv->active = 0;
#line 619
    drm_gem_object_unreference(obj);
  } else {

  }
#line 621
  return;
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static uint32_t i915_add_request(struct drm_device *dev , uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *request ;
  uint32_t seqno ;
  int was_empty ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  void *tmp ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_i915_gem_object *next ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct drm_gem_object *obj ;
  struct list_head  const  *__mptr___1 ;

  {
#line 635
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 641
  tmp = drm_calloc(1UL, 32UL, 2);
#line 641
  request = (struct drm_i915_gem_request *)tmp;
#line 642
  if ((unsigned long )request == (unsigned long )((struct drm_i915_gem_request *)0)) {
#line 643
    return (0U);
  } else {

  }
#line 648
  seqno = dev_priv->mm.next_gem_seqno;
#line 649
  dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
#line 650
  if (dev_priv->mm.next_gem_seqno == 0U) {
#line 651
    dev_priv->mm.next_gem_seqno = dev_priv->mm.next_gem_seqno + (uint32_t )1;
  } else {

  }
#line 653
  if (dev_priv->ring.space <= 15) {
#line 653
    i915_wait_ring(dev, 16, "i915_add_request");
  } else {

  }
#line 653
  outcount = 0U;
#line 653
  outring = (unsigned int )dev_priv->ring.tail;
#line 653
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 653
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 654
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 276824065U;
#line 654
  outcount = outcount + 1U;
#line 654
  outring = outring + 4U;
#line 654
  outring = outring & ringmask;
#line 655
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 128U;
#line 655
  outcount = outcount + 1U;
#line 655
  outring = outring + 4U;
#line 655
  outring = outring & ringmask;
#line 656
  *((unsigned int volatile   *)virt + (unsigned long )outring) = seqno;
#line 656
  outcount = outcount + 1U;
#line 656
  outring = outring + 4U;
#line 656
  outring = outring & ringmask;
#line 658
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 16777216U;
#line 658
  outcount = outcount + 1U;
#line 658
  outring = outring + 4U;
#line 658
  outring = outring & ringmask;
#line 659
  dev_priv->ring.tail = (int )outring;
#line 659
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 659
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 661
  if (drm_debug != 0U) {
#line 661
    printk("<7>[drm:%s] %d\n", "i915_add_request", seqno);
  } else {

  }
#line 663
  request->seqno = seqno;
#line 664
  request->emitted_jiffies = jiffies;
#line 665
  was_empty = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 666
  list_add_tail(& request->list, & dev_priv->mm.request_list);
#line 671
  if (flush_domains != 0U) {
#line 674
    __mptr = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 674
    obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 674
    __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 674
    next = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
#line 674
    goto ldv_24516;
    ldv_24515: 
#line 676
    obj = obj_priv->obj;
#line 678
    if ((obj->write_domain & flush_domains) == obj->write_domain) {
#line 680
      obj->write_domain = 0U;
#line 681
      i915_gem_object_move_to_active(obj, seqno);
    } else {

    }
#line 674
    obj_priv = next;
#line 674
    __mptr___1 = (struct list_head  const  *)next->list.next;
#line 674
    next = (struct drm_i915_gem_object *)__mptr___1 + 0xfffffffffffffff0UL;
    ldv_24516: ;
#line 674
    if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {
#line 675
      goto ldv_24515;
    } else {

    }

  } else {

  }
#line 687
  if (was_empty != 0 && dev_priv->mm.suspended == 0) {
#line 688
    schedule_delayed_work(& dev_priv->mm.retire_work, 250UL);
  } else {

  }
#line 689
  return (seqno);
}
}
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static uint32_t i915_retire_commands(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  uint32_t flush_domains ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 701
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 702
  cmd = 33554436U;
#line 703
  flush_domains = 0U;
#line 707
  if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 708
    flush_domains = flush_domains | 4U;
  } else {

  }
#line 709
  if (dev_priv->ring.space <= 7) {
#line 709
    i915_wait_ring(dev, 8, "i915_retire_commands");
  } else {

  }
#line 709
  outcount = 0U;
#line 709
  outring = (unsigned int )dev_priv->ring.tail;
#line 709
  ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 709
  virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 710
  *((unsigned int volatile   *)virt + (unsigned long )outring) = cmd;
#line 710
  outcount = outcount + 1U;
#line 710
  outring = outring + 4U;
#line 710
  outring = outring & ringmask;
#line 711
  *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 711
  outcount = outcount + 1U;
#line 711
  outring = outring + 4U;
#line 711
  outring = outring & ringmask;
#line 712
  dev_priv->ring.tail = (int )outring;
#line 712
  dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 712
  writel(outring, (void volatile   *)dev_priv->regs + 8240U);
#line 713
  return (flush_domains);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_retire_request(struct drm_device *dev , struct drm_i915_gem_request *request ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 724
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 729
  goto ldv_24539;
  ldv_24538: 
#line 733
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 733
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 736
  obj = obj_priv->obj;
#line 742
  if (obj_priv->last_rendering_seqno != request->seqno) {
#line 743
    return;
  } else {

  }
#line 749
  if (obj->write_domain != 0U) {
#line 750
    i915_gem_object_move_to_flushing(obj);
  } else {
#line 752
    i915_gem_object_move_to_inactive(obj);
  }
  ldv_24539: 
#line 729
  tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 729
  if (tmp == 0) {
#line 730
    goto ldv_24538;
  } else {

  }

#line 734
  return;
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_seqno_passed(uint32_t seq1 , uint32_t seq2 ) 
{ 


  {
#line 762
  return ((int )(seq1 - seq2) >= 0);
}
}
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
uint32_t i915_get_gem_seqno(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;

  {
#line 768
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 770
  return ((uint32_t )*((u32 volatile   *)dev_priv->hw_status_page + 32UL));
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_retire_requests(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  struct drm_i915_gem_request *request ;
  uint32_t retiring_seqno ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 779
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 782
  seqno = i915_get_gem_seqno(dev);
#line 784
  goto ldv_24560;
  ldv_24559: 
#line 788
  __mptr = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 788
  request = (struct drm_i915_gem_request *)__mptr + 0xfffffffffffffff0UL;
#line 791
  retiring_seqno = request->seqno;
#line 793
  tmp = i915_seqno_passed(seqno, retiring_seqno);
#line 793
  if (tmp != 0 || dev_priv->mm.wedged != 0) {
#line 795
    i915_gem_retire_request(dev, request);
#line 797
    list_del(& request->list);
#line 798
    drm_free((void *)request, 32UL, 2);
  } else {
#line 800
    goto ldv_24558;
  }
  ldv_24560: 
#line 784
  tmp___0 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 784
  if (tmp___0 == 0) {
#line 785
    goto ldv_24559;
  } else {

  }
  ldv_24558: ;
#line 789
  return;
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_retire_work_handler(struct work_struct *work ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_device *dev ;
  struct work_struct  const  *__mptr ;
  int tmp ;

  {
#line 810
  __mptr = (struct work_struct  const  *)work;
#line 810
  dev_priv = (drm_i915_private_t *)__mptr + 0xfffffffffffff0a8UL;
#line 812
  dev = dev_priv->dev;
#line 814
  ldv_mutex_lock_44(& dev->struct_mutex);
#line 815
  i915_gem_retire_requests(dev);
#line 816
  if (dev_priv->mm.suspended == 0) {
#line 816
    tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 816
    if (tmp == 0) {
#line 818
      schedule_delayed_work(& dev_priv->mm.retire_work, 250UL);
    } else {

    }
  } else {

  }
#line 819
  ldv_mutex_unlock_45(& dev->struct_mutex);
#line 820
  return;
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_wait_request(struct drm_device *dev , uint32_t seqno ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  long tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  uint32_t tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  uint32_t tmp___5 ;
  int tmp___6 ;
  uint32_t tmp___7 ;
  int tmp___8 ;
  uint32_t tmp___9 ;

  {
#line 829
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 830
  ret = 0;
#line 832
  tmp = __builtin_expect(seqno == 0U, 0L);
#line 832
  if (tmp != 0L) {
#line 832
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (832), "i" (24UL));
    ldv_24574: ;
#line 832
    goto ldv_24574;
  } else {

  }
#line 834
  tmp___7 = i915_get_gem_seqno(dev);
#line 834
  tmp___8 = i915_seqno_passed(tmp___7, seqno);
#line 834
  if (tmp___8 == 0) {
#line 835
    dev_priv->mm.waiting_gem_seqno = seqno;
#line 836
    i915_user_irq_get(dev);
#line 837
    __ret = 0;
#line 837
    tmp___5 = i915_get_gem_seqno(dev);
#line 837
    tmp___6 = i915_seqno_passed(tmp___5, seqno);
#line 837
    if (tmp___6 == 0 && dev_priv->mm.wedged == 0) {
#line 837
      tmp___0 = get_current();
#line 837
      __wait.flags = 0U;
#line 837
      __wait.private = (void *)tmp___0;
#line 837
      __wait.func = & autoremove_wake_function;
#line 837
      __wait.task_list.next = & __wait.task_list;
#line 837
      __wait.task_list.prev = & __wait.task_list;
      ldv_24579: 
#line 837
      prepare_to_wait(& dev_priv->irq_queue, & __wait, 1);
#line 837
      tmp___1 = i915_get_gem_seqno(dev);
#line 837
      tmp___2 = i915_seqno_passed(tmp___1, seqno);
#line 837
      if (tmp___2 != 0 || dev_priv->mm.wedged != 0) {
#line 837
        goto ldv_24577;
      } else {

      }
#line 837
      tmp___3 = get_current();
#line 837
      tmp___4 = signal_pending(tmp___3);
#line 837
      if (tmp___4 == 0) {
#line 837
        schedule();
#line 837
        goto ldv_24578;
      } else {

      }
#line 837
      __ret = -512;
#line 837
      goto ldv_24577;
      ldv_24578: ;
#line 837
      goto ldv_24579;
      ldv_24577: 
#line 837
      finish_wait(& dev_priv->irq_queue, & __wait);
    } else {

    }
#line 837
    ret = __ret;
#line 841
    i915_user_irq_put(dev);
#line 842
    dev_priv->mm.waiting_gem_seqno = 0U;
  } else {

  }
#line 844
  if (dev_priv->mm.wedged != 0) {
#line 845
    ret = -5;
  } else {

  }
#line 847
  if (ret != 0 && ret != -512) {
#line 848
    tmp___9 = i915_get_gem_seqno(dev);
#line 848
    printk("<3>[drm:%s] *ERROR* %s returns %d (awaiting %d at %d)\n", "i915_wait_request",
           "i915_wait_request", ret, seqno, tmp___9);
  } else {

  }
#line 856
  if (ret == 0) {
#line 857
    i915_gem_retire_requests(dev);
  } else {

  }
#line 859
  return (ret);
}
}
#line 863 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_flush(struct drm_device *dev , uint32_t invalidate_domains ,
                           uint32_t flush_domains ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t cmd ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;

  {
#line 867
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 876
  if ((int )flush_domains & 1) {
#line 877
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 879
  if (((invalidate_domains | flush_domains) & 4294967230U) != 0U) {
#line 909
    cmd = 33554436U;
#line 910
    if (((invalidate_domains | flush_domains) & 2U) != 0U) {
#line 912
      cmd = cmd & 4294967291U;
    } else {

    }
#line 913
    if (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) {
#line 918
      if ((invalidate_domains & 4U) != 0U) {
#line 919
        cmd = cmd | 1U;
      } else {

      }
    } else {

    }
#line 921
    if ((invalidate_domains & 16U) != 0U) {
#line 922
      cmd = cmd | 2U;
    } else {

    }
#line 927
    if (dev_priv->ring.space <= 7) {
#line 927
      i915_wait_ring(dev, 8, "i915_gem_flush");
    } else {

    }
#line 927
    outcount = 0U;
#line 927
    outring = (unsigned int )dev_priv->ring.tail;
#line 927
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 927
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 928
    *((unsigned int volatile   *)virt + (unsigned long )outring) = cmd;
#line 928
    outcount = outcount + 1U;
#line 928
    outring = outring + 4U;
#line 928
    outring = outring & ringmask;
#line 929
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 929
    outcount = outcount + 1U;
#line 929
    outring = outring + 4U;
#line 929
    outring = outring & ringmask;
#line 930
    dev_priv->ring.tail = (int )outring;
#line 930
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 930
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {

  }
#line 932
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_wait_rendering(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 941
  dev = obj->dev;
#line 942
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 948
  tmp = __builtin_expect((obj->write_domain & 4294967230U) != 0U, 0L);
#line 948
  if (tmp != 0L) {
#line 948
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (948), "i" (24UL));
    ldv_24600: ;
#line 948
    goto ldv_24600;
  } else {

  }
#line 953
  if (obj_priv->active != 0) {
#line 958
    ret = i915_wait_request(dev, obj_priv->last_rendering_seqno);
#line 959
    if (ret != 0) {
#line 960
      return (ret);
    } else {

    }
  } else {

  }
#line 963
  return (0);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_unbind(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;
  int tmp___0 ;

  {
#line 972
  dev = obj->dev;
#line 973
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 974
  ret = 0;
#line 980
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 981
    return (0);
  } else {

  }
#line 983
  if (obj_priv->pin_count != 0) {
#line 984
    printk("<3>[drm:%s] *ERROR* Attempting to unbind pinned buffer\n", "i915_gem_object_unbind");
#line 985
    return (-22);
  } else {

  }
#line 994
  ret = i915_gem_object_set_to_cpu_domain(obj, 1);
#line 995
  if (ret != 0) {
#line 996
    if (ret != -512) {
#line 997
      printk("<3>[drm:%s] *ERROR* set_domain failed: %d\n", "i915_gem_object_unbind",
             ret);
    } else {

    }
#line 998
    return (ret);
  } else {

  }
#line 1001
  if ((unsigned long )obj_priv->agp_mem != (unsigned long )((struct agp_memory *)0)) {
#line 1002
    drm_unbind_agp(obj_priv->agp_mem);
#line 1003
    drm_free_agp(obj_priv->agp_mem, (int )(obj->size / 4096UL));
#line 1004
    obj_priv->agp_mem = 0;
  } else {

  }
#line 1007
  tmp = __builtin_expect(obj_priv->active != 0, 0L);
#line 1007
  if (tmp != 0L) {
#line 1007
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1007), "i" (24UL));
    ldv_24608: ;
#line 1007
    goto ldv_24608;
  } else {

  }
#line 1009
  i915_gem_object_free_page_list(obj);
#line 1011
  if ((unsigned long )obj_priv->gtt_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1012
    atomic_dec(& dev->gtt_count);
#line 1013
    atomic_sub((int )obj->size, & dev->gtt_memory);
#line 1015
    drm_mm_put_block(obj_priv->gtt_space);
#line 1016
    obj_priv->gtt_space = 0;
  } else {

  }
#line 1020
  tmp___0 = list_empty((struct list_head  const  *)(& obj_priv->list));
#line 1020
  if (tmp___0 == 0) {
#line 1021
    list_del_init(& obj_priv->list);
  } else {

  }
#line 1023
  return (0);
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_something(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct drm_i915_gem_request *request ;
  struct list_head  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1029
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1032
  ret = 0;
  ldv_24628: 
#line 1038
  tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1038
  if (tmp___1 == 0) {
#line 1039
    __mptr = (struct list_head  const  *)dev_priv->mm.inactive_list.next;
#line 1039
    obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 1042
    obj = obj_priv->obj;
#line 1043
    tmp = __builtin_expect(obj_priv->pin_count != 0, 0L);
#line 1043
    if (tmp != 0L) {
#line 1043
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                           "i" (1043), "i" (24UL));
      ldv_24618: ;
#line 1043
      goto ldv_24618;
    } else {

    }
#line 1047
    tmp___0 = __builtin_expect(obj_priv->active != 0, 0L);
#line 1047
    if (tmp___0 != 0L) {
#line 1047
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                           "i" (1047), "i" (24UL));
      ldv_24619: ;
#line 1047
      goto ldv_24619;
    } else {

    }
#line 1050
    ret = i915_gem_object_unbind(obj);
#line 1051
    goto ldv_24620;
  } else {

  }
#line 1058
  tmp___3 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1058
  if (tmp___3 == 0) {
#line 1061
    __mptr___0 = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 1061
    request = (struct drm_i915_gem_request *)__mptr___0 + 0xfffffffffffffff0UL;
#line 1065
    ret = i915_wait_request(dev, request->seqno);
#line 1066
    if (ret != 0) {
#line 1067
      goto ldv_24620;
    } else {

    }
#line 1074
    tmp___2 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1074
    if (tmp___2 == 0) {
#line 1075
      goto ldv_24624;
    } else {

    }
#line 1076
    goto ldv_24620;
  } else {

  }
#line 1084
  tmp___4 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1084
  if (tmp___4 == 0) {
#line 1085
    __mptr___1 = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 1085
    obj_priv = (struct drm_i915_gem_object *)__mptr___1 + 0xfffffffffffffff0UL;
#line 1088
    obj = obj_priv->obj;
#line 1090
    i915_gem_flush(dev, obj->write_domain, obj->write_domain);
#line 1093
    i915_add_request(dev, obj->write_domain);
#line 1095
    obj = 0;
#line 1096
    goto ldv_24624;
  } else {

  }
#line 1099
  tmp___5 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1099
  tmp___6 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 1099
  tmp___7 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1099
  printk("<3>[drm:%s] *ERROR* inactive empty %d request empty %d flushing empty %d\n",
         "i915_gem_evict_something", tmp___7, tmp___6, tmp___5);
#line 1107
  return (-12);
  ldv_24624: ;
#line 1108
  goto ldv_24628;
  ldv_24620: ;
#line 1109
  return (ret);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_everything(struct drm_device *dev ) 
{ 
  int ret ;

  {
  ldv_24634: 
#line 1118
  ret = i915_gem_evict_something(dev);
#line 1119
  if (ret != 0) {
#line 1120
    goto ldv_24633;
  } else {

  }
#line 1121
  goto ldv_24634;
  ldv_24633: ;
#line 1122
  if (ret == -12) {
#line 1123
    return (0);
  } else {

  }
#line 1124
  return (ret);
}
}
#line 1128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_get_page_list(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int page_count___0 ;
  int i ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct page *page ;
  int ret ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 1130
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1137
  if ((unsigned long )obj_priv->page_list != (unsigned long )((struct page **)0)) {
#line 1138
    return (0);
  } else {

  }
#line 1143
  page_count___0 = (int )(obj->size / 4096UL);
#line 1144
  tmp = __builtin_expect((unsigned long )obj_priv->page_list != (unsigned long )((struct page **)0),
                         0L);
#line 1144
  if (tmp != 0L) {
#line 1144
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1144), "i" (24UL));
    ldv_24645: ;
#line 1144
    goto ldv_24645;
  } else {

  }
#line 1145
  tmp___0 = drm_calloc((size_t )page_count___0, 8UL, 2);
#line 1145
  obj_priv->page_list = (struct page **)tmp___0;
#line 1147
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 1148
    printk("<3>[drm:%s] *ERROR* Faled to allocate page list\n", "i915_gem_object_get_page_list");
#line 1149
    return (-12);
  } else {

  }
#line 1152
  inode = ((obj->filp)->f_path.dentry)->d_inode;
#line 1153
  mapping = inode->i_mapping;
#line 1154
  i = 0;
#line 1154
  goto ldv_24648;
  ldv_24647: 
#line 1155
  page = read_mapping_page(mapping, (unsigned long )i, 0);
#line 1156
  tmp___2 = IS_ERR((void const   *)page);
#line 1156
  if (tmp___2 != 0L) {
#line 1157
    tmp___1 = PTR_ERR((void const   *)page);
#line 1157
    ret = (int )tmp___1;
#line 1158
    printk("<3>[drm:%s] *ERROR* read_mapping_page failed: %d\n", "i915_gem_object_get_page_list",
           ret);
#line 1159
    i915_gem_object_free_page_list(obj);
#line 1160
    return (ret);
  } else {

  }
#line 1162
  *(obj_priv->page_list + (unsigned long )i) = page;
#line 1154
  i = i + 1;
  ldv_24648: ;
#line 1154
  if (i < page_count___0) {
#line 1155
    goto ldv_24647;
  } else {

  }

#line 1164
  return (0);
}
}
#line 1171 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_bind_to_gtt(struct drm_gem_object *obj , unsigned int alignment ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  struct drm_mm_node *free_space ;
  int page_count___0 ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 1173
  dev = obj->dev;
#line 1174
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1175
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1179
  if (alignment == 0U) {
#line 1180
    alignment = 4096U;
  } else {

  }
#line 1181
  if (((unsigned long )alignment & 4095UL) != 0UL) {
#line 1182
    printk("<3>[drm:%s] *ERROR* Invalid object alignment requested %u\n", "i915_gem_object_bind_to_gtt",
           alignment);
#line 1183
    return (-22);
  } else {

  }
  search_free: 
#line 1187
  free_space = drm_mm_search_free((struct drm_mm  const  *)(& dev_priv->mm.gtt_space),
                                  obj->size, alignment, 0);
#line 1189
  if ((unsigned long )free_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1190
    obj_priv->gtt_space = drm_mm_get_block(free_space, obj->size, alignment);
#line 1192
    if ((unsigned long )obj_priv->gtt_space != (unsigned long )((struct drm_mm_node *)0)) {
#line 1193
      (obj_priv->gtt_space)->private = (void *)obj;
#line 1194
      obj_priv->gtt_offset = (uint32_t )(obj_priv->gtt_space)->start;
    } else {

    }
  } else {

  }
#line 1197
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1204
    tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 1204
    if (tmp != 0) {
#line 1204
      tmp___0 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 1204
      if (tmp___0 != 0) {
#line 1204
        tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 1204
        if (tmp___1 != 0) {
#line 1207
          printk("<3>[drm:%s] *ERROR* GTT full, but LRU list empty\n", "i915_gem_object_bind_to_gtt");
#line 1208
          return (-12);
        } else {

        }
      } else {

      }
    } else {

    }
#line 1211
    ret = i915_gem_evict_something(dev);
#line 1212
    if (ret != 0) {
#line 1213
      if (ret != -512) {
#line 1214
        printk("<3>[drm:%s] *ERROR* Failed to evict a buffer %d\n", "i915_gem_object_bind_to_gtt",
               ret);
      } else {

      }
#line 1215
      return (ret);
    } else {

    }
#line 1217
    goto search_free;
  } else {

  }
#line 1224
  ret = i915_gem_object_get_page_list(obj);
#line 1225
  if (ret != 0) {
#line 1226
    drm_mm_put_block(obj_priv->gtt_space);
#line 1227
    obj_priv->gtt_space = 0;
#line 1228
    return (ret);
  } else {

  }
#line 1231
  page_count___0 = (int )(obj->size / 4096UL);
#line 1235
  obj_priv->agp_mem = drm_agp_bind_pages(dev, obj_priv->page_list, (unsigned long )page_count___0,
                                         obj_priv->gtt_offset, obj_priv->agp_type);
#line 1240
  if ((unsigned long )obj_priv->agp_mem == (unsigned long )((struct agp_memory *)0)) {
#line 1241
    i915_gem_object_free_page_list(obj);
#line 1242
    drm_mm_put_block(obj_priv->gtt_space);
#line 1243
    obj_priv->gtt_space = 0;
#line 1244
    return (-12);
  } else {

  }
#line 1246
  atomic_inc(& dev->gtt_count);
#line 1247
  atomic_add((int )obj->size, & dev->gtt_memory);
#line 1253
  tmp___2 = __builtin_expect((obj->read_domains & 4294967230U) != 0U, 0L);
#line 1253
  if (tmp___2 != 0L) {
#line 1253
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1253), "i" (24UL));
    ldv_24662: ;
#line 1253
    goto ldv_24662;
  } else {

  }
#line 1254
  tmp___3 = __builtin_expect((obj->write_domain & 4294967230U) != 0U, 0L);
#line 1254
  if (tmp___3 != 0L) {
#line 1254
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1254), "i" (24UL));
    ldv_24663: ;
#line 1254
    goto ldv_24663;
  } else {

  }
#line 1256
  return (0);
}
}
#line 1260 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_clflush_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 1262
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1268
  if ((unsigned long )obj_priv->page_list == (unsigned long )((struct page **)0)) {
#line 1269
    return;
  } else {

  }
#line 1271
  drm_clflush_pages(obj_priv->page_list, obj->size / 4096UL);
#line 1272
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_gpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  uint32_t seqno ;

  {
#line 1278
  dev = obj->dev;
#line 1281
  if ((obj->write_domain & 4294967230U) == 0U) {
#line 1282
    return;
  } else {

  }
#line 1285
  i915_gem_flush(dev, 0U, obj->write_domain);
#line 1286
  seqno = i915_add_request(dev, obj->write_domain);
#line 1287
  obj->write_domain = 0U;
#line 1288
  i915_gem_object_move_to_active(obj, seqno);
#line 1289
  return;
}
}
#line 1293 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_gtt_write_domain(struct drm_gem_object *obj ) 
{ 


  {
#line 1295
  if (obj->write_domain != 64U) {
#line 1296
    return;
  } else {

  }
#line 1302
  obj->write_domain = 0U;
#line 1303
  return;
}
}
#line 1307 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_flush_cpu_write_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;

  {
#line 1309
  dev = obj->dev;
#line 1311
  if (obj->write_domain != 1U) {
#line 1312
    return;
  } else {

  }
#line 1314
  i915_gem_clflush_object(obj);
#line 1315
  drm_agp_chipset_flush(dev);
#line 1316
  obj->write_domain = 0U;
#line 1317
  return;
}
}
#line 1326 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_set_to_gtt_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  long tmp ;

  {
#line 1328
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1332
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1333
    return (-22);
  } else {

  }
#line 1335
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1337
  ret = i915_gem_object_wait_rendering(obj);
#line 1338
  if (ret != 0) {
#line 1339
    return (ret);
  } else {

  }
#line 1344
  if (write != 0) {
#line 1345
    obj->read_domains = obj->read_domains & 64U;
  } else {

  }
#line 1347
  i915_gem_object_flush_cpu_write_domain(obj);
#line 1352
  tmp = __builtin_expect((obj->write_domain & 4294967231U) != 0U, 0L);
#line 1352
  if (tmp != 0L) {
#line 1352
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1352), "i" (24UL));
    ldv_24686: ;
#line 1352
    goto ldv_24686;
  } else {

  }
#line 1353
  obj->read_domains = obj->read_domains | 64U;
#line 1354
  if (write != 0) {
#line 1355
    obj->write_domain = 64U;
#line 1356
    obj_priv->dirty = 1;
  } else {

  }
#line 1359
  return (0);
}
}
#line 1369 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_set_to_cpu_domain(struct drm_gem_object *obj , int write ) 
{ 
  struct drm_device *dev ;
  int ret ;
  long tmp ;

  {
#line 1371
  dev = obj->dev;
#line 1374
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1376
  ret = i915_gem_object_wait_rendering(obj);
#line 1377
  if (ret != 0) {
#line 1378
    return (ret);
  } else {

  }
#line 1380
  i915_gem_object_flush_gtt_write_domain(obj);
#line 1385
  i915_gem_object_set_to_full_cpu_read_domain(obj);
#line 1388
  if ((obj->read_domains & 1U) == 0U) {
#line 1389
    i915_gem_clflush_object(obj);
#line 1390
    drm_agp_chipset_flush(dev);
#line 1392
    obj->read_domains = obj->read_domains | 1U;
  } else {

  }
#line 1398
  tmp = __builtin_expect((obj->write_domain & 4294967294U) != 0U, 0L);
#line 1398
  if (tmp != 0L) {
#line 1398
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1398), "i" (24UL));
    ldv_24693: ;
#line 1398
    goto ldv_24693;
  } else {

  }
#line 1403
  if (write != 0) {
#line 1404
    obj->read_domains = obj->read_domains & 1U;
#line 1405
    obj->write_domain = 1U;
  } else {

  }
#line 1408
  return (0);
}
}
#line 1523 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_gpu_domain(struct drm_gem_object *obj , uint32_t read_domains ,
                                              uint32_t write_domain ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  uint32_t invalidate_domains ;
  uint32_t flush_domains ;
  long tmp ;
  long tmp___0 ;

  {
#line 1527
  dev = obj->dev;
#line 1528
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1529
  invalidate_domains = 0U;
#line 1530
  flush_domains = 0U;
#line 1532
  tmp = __builtin_expect((long )((int )read_domains) & 1L, 0L);
#line 1532
  if (tmp != 0L) {
#line 1532
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1532), "i" (24UL));
    ldv_24703: ;
#line 1532
    goto ldv_24703;
  } else {

  }
#line 1533
  tmp___0 = __builtin_expect(write_domain == 1U, 0L);
#line 1533
  if (tmp___0 != 0L) {
#line 1533
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1533), "i" (24UL));
    ldv_24704: ;
#line 1533
    goto ldv_24704;
  } else {

  }
#line 1545
  if (write_domain == 0U) {
#line 1546
    read_domains = obj->read_domains | read_domains;
  } else {
#line 1548
    obj_priv->dirty = 1;
  }
#line 1556
  if (obj->write_domain != 0U && obj->write_domain != read_domains) {
#line 1557
    flush_domains = obj->write_domain | flush_domains;
#line 1558
    invalidate_domains = (~ obj->write_domain & read_domains) | invalidate_domains;
  } else {

  }
#line 1564
  invalidate_domains = (~ obj->read_domains & read_domains) | invalidate_domains;
#line 1565
  if ((int )(flush_domains | invalidate_domains) & 1) {
#line 1570
    i915_gem_clflush_object(obj);
  } else {

  }
#line 1573
  if ((write_domain | flush_domains) != 0U) {
#line 1574
    obj->write_domain = write_domain;
  } else {

  }
#line 1575
  obj->read_domains = read_domains;
#line 1577
  dev->invalidate_domains = dev->invalidate_domains | invalidate_domains;
#line 1578
  dev->flush_domains = dev->flush_domains | flush_domains;
#line 1579
  return;
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_object_set_to_full_cpu_read_domain(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;

  {
#line 1596
  dev = obj->dev;
#line 1597
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1599
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 1600
    return;
  } else {

  }
#line 1604
  if ((int )obj->read_domains & 1) {
#line 1607
    i = 0;
#line 1607
    goto ldv_24713;
    ldv_24712: ;
#line 1608
    if ((unsigned int )*(obj_priv->page_cpu_valid + (unsigned long )i) != 0U) {
#line 1609
      goto ldv_24711;
    } else {

    }
#line 1610
    drm_clflush_pages(obj_priv->page_list + (unsigned long )i, 1UL);
    ldv_24711: 
#line 1607
    i = i + 1;
    ldv_24713: ;
#line 1607
    if ((unsigned long )i <= (obj->size - 1UL) / 4096UL) {
#line 1608
      goto ldv_24712;
    } else {

    }
#line 1612
    drm_agp_chipset_flush(dev);
  } else {

  }
#line 1618
  drm_free((void *)obj_priv->page_cpu_valid, obj->size / 4096UL, 2);
#line 1620
  obj_priv->page_cpu_valid = 0;
#line 1621
  return;
}
}
#line 1636 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_set_cpu_read_domain_range(struct drm_gem_object *obj ,
                                                     uint64_t offset , uint64_t size ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  long tmp___1 ;

  {
#line 1639
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1642
  if (offset == 0ULL && (unsigned long long )obj->size == size) {
#line 1643
    tmp = i915_gem_object_set_to_cpu_domain(obj, 0);
#line 1643
    return (tmp);
  } else {

  }
#line 1645
  i915_gem_object_flush_gpu_write_domain(obj);
#line 1647
  ret = i915_gem_object_wait_rendering(obj);
#line 1648
  if (ret != 0) {
#line 1649
    return (ret);
  } else {

  }
#line 1650
  i915_gem_object_flush_gtt_write_domain(obj);
#line 1653
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0) && (int )obj->read_domains & 1) {
#line 1655
    return (0);
  } else {

  }
#line 1660
  if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 1661
    tmp___0 = drm_calloc(1UL, obj->size / 4096UL, 2);
#line 1661
    obj_priv->page_cpu_valid = (uint8_t *)tmp___0;
#line 1663
    if ((unsigned long )obj_priv->page_cpu_valid == (unsigned long )((uint8_t *)0)) {
#line 1664
      return (-12);
    } else {

    }
  } else
#line 1665
  if ((obj->read_domains & 1U) == 0U) {
#line 1666
    memset((void *)obj_priv->page_cpu_valid, 0, obj->size / 4096UL);
  } else {

  }
#line 1671
  i = (int )(offset / 4096ULL);
#line 1671
  goto ldv_24725;
  ldv_24724: ;
#line 1673
  if ((unsigned int )*(obj_priv->page_cpu_valid + (unsigned long )i) != 0U) {
#line 1674
    goto ldv_24723;
  } else {

  }
#line 1676
  drm_clflush_pages(obj_priv->page_list + (unsigned long )i, 1UL);
#line 1678
  *(obj_priv->page_cpu_valid + (unsigned long )i) = 1U;
  ldv_24723: 
#line 1672
  i = i + 1;
  ldv_24725: ;
#line 1671
  if ((unsigned long long )i <= ((offset + size) - 1ULL) / 4096ULL) {
#line 1672
    goto ldv_24724;
  } else {

  }
#line 1684
  tmp___1 = __builtin_expect((obj->write_domain & 4294967294U) != 0U, 0L);
#line 1684
  if (tmp___1 != 0L) {
#line 1684
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (1684), "i" (24UL));
    ldv_24727: ;
#line 1684
    goto ldv_24727;
  } else {

  }
#line 1686
  obj->read_domains = obj->read_domains | 1U;
#line 1688
  return (0);
}
}
#line 1695 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_object_pin_and_relocate(struct drm_gem_object *obj , struct drm_file *file_priv ,
                                            struct drm_i915_gem_exec_object *entry ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_relocation_entry reloc ;
  struct drm_i915_gem_relocation_entry *relocs ;
  struct drm_i915_gem_object *obj_priv ;
  int i ;
  int ret ;
  void *reloc_page ;
  struct drm_gem_object *target_obj ;
  struct drm_i915_gem_object *target_obj_priv ;
  uint32_t reloc_val ;
  uint32_t reloc_offset ;
  uint32_t *reloc_entry ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 1699
  dev = obj->dev;
#line 1700
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1703
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 1708
  ret = i915_gem_object_pin(obj, (unsigned int )entry->alignment);
#line 1709
  if (ret != 0) {
#line 1710
    return (ret);
  } else {

  }
#line 1712
  entry->offset = (uint64_t )obj_priv->gtt_offset;
#line 1714
  relocs = (struct drm_i915_gem_relocation_entry *)entry->relocs_ptr;
#line 1719
  i = 0;
#line 1719
  goto ldv_24749;
  ldv_24748: 
#line 1725
  tmp = copy_from_user((void *)(& reloc), (void const   *)relocs + (unsigned long )i,
                       32U);
#line 1725
  ret = (int )tmp;
#line 1726
  if (ret != 0) {
#line 1727
    i915_gem_object_unpin(obj);
#line 1728
    return (ret);
  } else {

  }
#line 1731
  target_obj = drm_gem_object_lookup(obj->dev, file_priv, (int )reloc.target_handle);
#line 1733
  if ((unsigned long )target_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 1734
    i915_gem_object_unpin(obj);
#line 1735
    return (-9);
  } else {

  }
#line 1737
  target_obj_priv = (struct drm_i915_gem_object *)target_obj->driver_private;
#line 1742
  if ((unsigned long )target_obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 1743
    printk("<3>[drm:%s] *ERROR* No GTT space found for object %d\n", "i915_gem_object_pin_and_relocate",
           reloc.target_handle);
#line 1745
    drm_gem_object_unreference(target_obj);
#line 1746
    i915_gem_object_unpin(obj);
#line 1747
    return (-22);
  } else {

  }
#line 1750
  if (reloc.offset > (unsigned long long )(obj->size - 4UL)) {
#line 1751
    printk("<3>[drm:%s] *ERROR* Relocation beyond object bounds: obj %p target %d offset %d size %d.\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           (int )obj->size);
#line 1755
    drm_gem_object_unreference(target_obj);
#line 1756
    i915_gem_object_unpin(obj);
#line 1757
    return (-22);
  } else {

  }
#line 1759
  if ((reloc.offset & 3ULL) != 0ULL) {
#line 1760
    printk("<3>[drm:%s] *ERROR* Relocation not 4-byte aligned: obj %p target %d offset %d.\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset);
#line 1764
    drm_gem_object_unreference(target_obj);
#line 1765
    i915_gem_object_unpin(obj);
#line 1766
    return (-22);
  } else {

  }
#line 1769
  if ((int )reloc.write_domain & 1 || (int )reloc.read_domains & 1) {
#line 1771
    printk("<3>[drm:%s] *ERROR* reloc with read/write CPU domains: obj %p target %d offset %d read %08x write %08x",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           reloc.read_domains, reloc.write_domain);
#line 1778
    return (-22);
  } else {

  }
#line 1781
  if ((reloc.write_domain != 0U && target_obj->pending_write_domain != 0U) && reloc.write_domain != target_obj->pending_write_domain) {
#line 1783
    printk("<3>[drm:%s] *ERROR* Write domain conflict: obj %p target %d offset %d new %08x old %08x\n",
           "i915_gem_object_pin_and_relocate", obj, reloc.target_handle, (int )reloc.offset,
           reloc.write_domain, target_obj->pending_write_domain);
#line 1790
    drm_gem_object_unreference(target_obj);
#line 1791
    i915_gem_object_unpin(obj);
#line 1792
    return (-22);
  } else {

  }
#line 1810
  target_obj->pending_read_domains = target_obj->pending_read_domains | reloc.read_domains;
#line 1811
  target_obj->pending_write_domain = target_obj->pending_write_domain | reloc.write_domain;
#line 1816
  if ((uint64_t )target_obj_priv->gtt_offset == reloc.presumed_offset) {
#line 1817
    drm_gem_object_unreference(target_obj);
#line 1818
    goto ldv_24747;
  } else {

  }
#line 1821
  ret = i915_gem_object_set_to_gtt_domain(obj, 1);
#line 1822
  if (ret != 0) {
#line 1823
    drm_gem_object_unreference(target_obj);
#line 1824
    i915_gem_object_unpin(obj);
#line 1825
    return (-22);
  } else {

  }
#line 1831
  reloc_offset = obj_priv->gtt_offset + (uint32_t )reloc.offset;
#line 1832
  reloc_page = io_mapping_map_atomic_wc(dev_priv->mm.gtt_mapping, (unsigned long )reloc_offset & 0xfffffffffffff000UL);
#line 1835
  reloc_entry = (uint32_t *)(reloc_page + ((unsigned long )reloc_offset & 4095UL));
#line 1837
  reloc_val = target_obj_priv->gtt_offset + reloc.delta;
#line 1844
  writel(reloc_val, (void volatile   *)reloc_entry);
#line 1845
  io_mapping_unmap_atomic(reloc_page);
#line 1850
  reloc.presumed_offset = (uint64_t )target_obj_priv->gtt_offset;
#line 1851
  tmp___0 = copy_to_user((void *)relocs + (unsigned long )i, (void const   *)(& reloc),
                         32U);
#line 1851
  ret = (int )tmp___0;
#line 1852
  if (ret != 0) {
#line 1853
    drm_gem_object_unreference(target_obj);
#line 1854
    i915_gem_object_unpin(obj);
#line 1855
    return (ret);
  } else {

  }
#line 1858
  drm_gem_object_unreference(target_obj);
  ldv_24747: 
#line 1719
  i = i + 1;
  ldv_24749: ;
#line 1719
  if ((uint32_t )i < entry->relocation_count) {
#line 1720
    goto ldv_24748;
  } else {

  }

#line 1865
  return (0);
}
}
#line 1871 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_dispatch_gem_execbuffer(struct drm_device *dev , struct drm_i915_gem_execbuffer *exec ,
                                        uint64_t exec_offset ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_clip_rect *boxes ;
  int nbox ;
  int i ;
  int count ;
  uint32_t exec_start ;
  uint32_t exec_len ;
  unsigned int outring ;
  unsigned int ringmask ;
  unsigned int outcount ;
  char volatile   *virt ;
  int ret ;
  int tmp ;

  {
#line 1875
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1876
  boxes = (struct drm_clip_rect *)exec->cliprects_ptr;
#line 1878
  nbox = (int )exec->num_cliprects;
#line 1879
  i = 0;
#line 1883
  exec_start = (unsigned int )exec_offset + exec->batch_start_offset;
#line 1884
  exec_len = exec->batch_len;
#line 1886
  if (((exec_start | exec_len) & 7U) != 0U) {
#line 1887
    printk("<3>[drm:%s] *ERROR* alignment\n", "i915_dispatch_gem_execbuffer");
#line 1888
    return (-22);
  } else {

  }
#line 1891
  if (exec_start == 0U) {
#line 1892
    return (-22);
  } else {

  }
#line 1894
  count = nbox != 0 ? nbox : 1;
#line 1896
  i = 0;
#line 1896
  goto ldv_24770;
  ldv_24769: ;
#line 1897
  if (i < nbox) {
#line 1898
    tmp = i915_emit_box(dev, boxes, i, (int )exec->DR1, (int )exec->DR4);
#line 1898
    ret = tmp;
#line 1900
    if (ret != 0) {
#line 1901
      return (ret);
    } else {

    }
  } else {

  }
#line 1904
  if (dev->pci_device == 13687 || dev->pci_device == 9570) {
#line 1905
    if (dev_priv->ring.space <= 15) {
#line 1905
      i915_wait_ring(dev, 16, "i915_dispatch_gem_execbuffer");
    } else {

    }
#line 1905
    outcount = 0U;
#line 1905
    outring = (unsigned int )dev_priv->ring.tail;
#line 1905
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 1905
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 1906
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 402653185U;
#line 1906
    outcount = outcount + 1U;
#line 1906
    outring = outring + 4U;
#line 1906
    outring = outring & ringmask;
#line 1907
    *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start | 1U;
#line 1907
    outcount = outcount + 1U;
#line 1907
    outring = outring + 4U;
#line 1907
    outring = outring & ringmask;
#line 1908
    *((unsigned int volatile   *)virt + (unsigned long )outring) = (exec_start + exec_len) - 4U;
#line 1908
    outcount = outcount + 1U;
#line 1908
    outring = outring + 4U;
#line 1908
    outring = outring & ringmask;
#line 1909
    *((unsigned int volatile   *)virt + (unsigned long )outring) = 0U;
#line 1909
    outcount = outcount + 1U;
#line 1909
    outring = outring + 4U;
#line 1909
    outring = outring & ringmask;
#line 1910
    dev_priv->ring.tail = (int )outring;
#line 1910
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 1910
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  } else {
#line 1912
    if (dev_priv->ring.space <= 7) {
#line 1912
      i915_wait_ring(dev, 8, "i915_dispatch_gem_execbuffer");
    } else {

    }
#line 1912
    outcount = 0U;
#line 1912
    outring = (unsigned int )dev_priv->ring.tail;
#line 1912
    ringmask = (unsigned int )dev_priv->ring.tail_mask;
#line 1912
    virt = (char volatile   *)dev_priv->ring.virtual_start;
#line 1913
    if (((((((((dev->pci_device == 10610 || dev->pci_device == 10626) || dev->pci_device == 10642) || dev->pci_device == 10658) || dev->pci_device == 10754) || dev->pci_device == 10770) || dev->pci_device == 10818) || dev->pci_device == 11778) || dev->pci_device == 11794) || dev->pci_device == 11810) {
#line 1914
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411042176U;
#line 1914
      outcount = outcount + 1U;
#line 1914
      outring = outring + 4U;
#line 1914
      outring = outring & ringmask;
#line 1917
      *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start;
#line 1917
      outcount = outcount + 1U;
#line 1917
      outring = outring + 4U;
#line 1917
      outring = outring & ringmask;
    } else {
#line 1919
      *((unsigned int volatile   *)virt + (unsigned long )outring) = 411041920U;
#line 1919
      outcount = outcount + 1U;
#line 1919
      outring = outring + 4U;
#line 1919
      outring = outring & ringmask;
#line 1921
      *((unsigned int volatile   *)virt + (unsigned long )outring) = exec_start | 1U;
#line 1921
      outcount = outcount + 1U;
#line 1921
      outring = outring + 4U;
#line 1921
      outring = outring & ringmask;
    }
#line 1923
    dev_priv->ring.tail = (int )outring;
#line 1923
    dev_priv->ring.space = (int )((unsigned int )dev_priv->ring.space - outcount * 4U);
#line 1923
    writel(outring, (void volatile   *)dev_priv->regs + 8240U);
  }
#line 1896
  i = i + 1;
  ldv_24770: ;
#line 1896
  if (i < count) {
#line 1897
    goto ldv_24769;
  } else {

  }

#line 1928
  return (0);
}
}
#line 1938 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_ring_throttle(struct drm_device *dev , struct drm_file *file_priv ) 
{ 
  struct drm_i915_file_private *i915_file_priv ;
  int ret ;
  uint32_t seqno ;

  {
#line 1940
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 1941
  ret = 0;
#line 1944
  ldv_mutex_lock_46(& dev->struct_mutex);
#line 1945
  seqno = i915_file_priv->mm.last_gem_throttle_seqno;
#line 1946
  i915_file_priv->mm.last_gem_throttle_seqno = i915_file_priv->mm.last_gem_seqno;
#line 1948
  if (seqno != 0U) {
#line 1949
    ret = i915_wait_request(dev, seqno);
  } else {

  }
#line 1950
  ldv_mutex_unlock_47(& dev->struct_mutex);
#line 1951
  return (ret);
}
}
#line 1955 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_execbuffer(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_i915_file_private *i915_file_priv ;
  struct drm_i915_gem_execbuffer *args ;
  struct drm_i915_gem_exec_object *exec_list ;
  struct drm_gem_object **object_list ;
  struct drm_gem_object *batch_obj ;
  int ret ;
  int i ;
  int pinned ;
  uint64_t exec_offset ;
  uint32_t seqno ;
  uint32_t flush_domains ;
  int pin_tries ;
  void *tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  struct drm_gem_object *obj ;
  long tmp___2 ;
  struct drm_gem_object *obj___0 ;
  unsigned long tmp___3 ;

  {
#line 1958
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 1959
  i915_file_priv = (struct drm_i915_file_private *)file_priv->driver_priv;
#line 1960
  args = (struct drm_i915_gem_execbuffer *)data;
#line 1961
  exec_list = 0;
#line 1962
  object_list = 0;
#line 1964
  pinned = 0;
#line 1974
  if (args->buffer_count == 0U) {
#line 1975
    printk("<3>[drm:%s] *ERROR* execbuf with %d buffers\n", "i915_gem_execbuffer",
           args->buffer_count);
#line 1976
    return (-22);
  } else {

  }
#line 1979
  tmp = drm_calloc(32UL, (size_t )args->buffer_count, 2);
#line 1979
  exec_list = (struct drm_i915_gem_exec_object *)tmp;
#line 1981
  tmp___0 = drm_calloc(8UL, (size_t )args->buffer_count, 2);
#line 1981
  object_list = (struct drm_gem_object **)tmp___0;
#line 1983
  if ((unsigned long )exec_list == (unsigned long )((struct drm_i915_gem_exec_object *)0) || (unsigned long )object_list == (unsigned long )((struct drm_gem_object **)0)) {
#line 1984
    printk("<3>[drm:%s] *ERROR* Failed to allocate exec or object list for %d buffers\n",
           "i915_gem_execbuffer", args->buffer_count);
#line 1987
    ret = -12;
#line 1988
    goto pre_mutex_err;
  } else {

  }
#line 1990
  tmp___1 = copy_from_user((void *)exec_list, (void const   *)args->buffers_ptr, args->buffer_count * 32U);
#line 1990
  ret = (int )tmp___1;
#line 1994
  if (ret != 0) {
#line 1995
    printk("<3>[drm:%s] *ERROR* copy %d exec entries failed %d\n", "i915_gem_execbuffer",
           args->buffer_count, ret);
#line 1997
    goto pre_mutex_err;
  } else {

  }
#line 2000
  ldv_mutex_lock_48(& dev->struct_mutex);
#line 2004
  if (dev_priv->mm.wedged != 0) {
#line 2005
    printk("<3>[drm:%s] *ERROR* Execbuf while wedged\n", "i915_gem_execbuffer");
#line 2006
    ldv_mutex_unlock_49(& dev->struct_mutex);
#line 2007
    return (-5);
  } else {

  }
#line 2010
  if (dev_priv->mm.suspended != 0) {
#line 2011
    printk("<3>[drm:%s] *ERROR* Execbuf while VT-switched.\n", "i915_gem_execbuffer");
#line 2012
    ldv_mutex_unlock_50(& dev->struct_mutex);
#line 2013
    return (-16);
  } else {

  }
#line 2017
  i = 0;
#line 2017
  goto ldv_24802;
  ldv_24801: 
#line 2018
  *(object_list + (unsigned long )i) = drm_gem_object_lookup(dev, file_priv, (int )(exec_list + (unsigned long )i)->handle);
#line 2020
  if ((unsigned long )*(object_list + (unsigned long )i) == (unsigned long )((struct drm_gem_object *)0)) {
#line 2021
    printk("<3>[drm:%s] *ERROR* Invalid object handle %d at index %d\n", "i915_gem_execbuffer",
           (exec_list + (unsigned long )i)->handle, i);
#line 2023
    ret = -9;
#line 2024
    goto err;
  } else {

  }
#line 2017
  i = i + 1;
  ldv_24802: ;
#line 2017
  if ((uint32_t )i < args->buffer_count) {
#line 2018
    goto ldv_24801;
  } else {

  }
#line 2029
  pin_tries = 0;
  ldv_24811: 
#line 2030
  ret = 0;
#line 2031
  i = 0;
#line 2031
  goto ldv_24806;
  ldv_24805: 
#line 2032
  (*(object_list + (unsigned long )i))->pending_read_domains = 0U;
#line 2033
  (*(object_list + (unsigned long )i))->pending_write_domain = 0U;
#line 2034
  ret = i915_gem_object_pin_and_relocate(*(object_list + (unsigned long )i), file_priv,
                                         exec_list + (unsigned long )i);
#line 2037
  if (ret != 0) {
#line 2038
    goto ldv_24804;
  } else {

  }
#line 2039
  pinned = i + 1;
#line 2031
  i = i + 1;
  ldv_24806: ;
#line 2031
  if ((uint32_t )i < args->buffer_count) {
#line 2032
    goto ldv_24805;
  } else {

  }
  ldv_24804: ;
#line 2042
  if (ret == 0) {
#line 2043
    goto ldv_24807;
  } else {

  }
#line 2046
  if (ret != -12 || pin_tries > 0) {
#line 2047
    printk("<3>[drm:%s] *ERROR* Failed to pin buffers %d\n", "i915_gem_execbuffer",
           ret);
#line 2048
    goto err;
  } else {

  }
#line 2052
  i = 0;
#line 2052
  goto ldv_24809;
  ldv_24808: 
#line 2053
  i915_gem_object_unpin(*(object_list + (unsigned long )i));
#line 2052
  i = i + 1;
  ldv_24809: ;
#line 2052
  if (i < pinned) {
#line 2053
    goto ldv_24808;
  } else {

  }
#line 2056
  ret = i915_gem_evict_everything(dev);
#line 2057
  if (ret != 0) {
#line 2058
    goto err;
  } else {

  }
#line 2029
  pin_tries = pin_tries + 1;
#line 2059
  goto ldv_24811;
  ldv_24807: 
#line 2062
  batch_obj = *(object_list + (unsigned long )(args->buffer_count - 1U));
#line 2063
  batch_obj->pending_read_domains = 8U;
#line 2064
  batch_obj->pending_write_domain = 0U;
#line 2072
  dev->invalidate_domains = 0U;
#line 2073
  dev->flush_domains = 0U;
#line 2075
  i = 0;
#line 2075
  goto ldv_24814;
  ldv_24813: 
#line 2076
  obj = *(object_list + (unsigned long )i);
#line 2079
  i915_gem_object_set_to_gpu_domain(obj, obj->pending_read_domains, obj->pending_write_domain);
#line 2075
  i = i + 1;
  ldv_24814: ;
#line 2075
  if ((uint32_t )i < args->buffer_count) {
#line 2076
    goto ldv_24813;
  } else {

  }

#line 2086
  if ((dev->invalidate_domains | dev->flush_domains) != 0U) {
#line 2093
    i915_gem_flush(dev, dev->invalidate_domains, dev->flush_domains);
#line 2096
    if (dev->flush_domains != 0U) {
#line 2097
      i915_add_request(dev, dev->flush_domains);
    } else {

    }
  } else {

  }
#line 2109
  exec_offset = (exec_list + (unsigned long )(args->buffer_count - 1U))->offset;
#line 2119
  ret = i915_dispatch_gem_execbuffer(dev, args, exec_offset);
#line 2120
  if (ret != 0) {
#line 2121
    printk("<3>[drm:%s] *ERROR* dispatch failed %d\n", "i915_gem_execbuffer", ret);
#line 2122
    goto err;
  } else {

  }
#line 2129
  flush_domains = i915_retire_commands(dev);
#line 2140
  seqno = i915_add_request(dev, flush_domains);
#line 2141
  tmp___2 = __builtin_expect(seqno == 0U, 0L);
#line 2141
  if (tmp___2 != 0L) {
#line 2141
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2141), "i" (24UL));
    ldv_24816: ;
#line 2141
    goto ldv_24816;
  } else {

  }
#line 2142
  i915_file_priv->mm.last_gem_seqno = seqno;
#line 2143
  i = 0;
#line 2143
  goto ldv_24819;
  ldv_24818: 
#line 2144
  obj___0 = *(object_list + (unsigned long )i);
#line 2146
  i915_gem_object_move_to_active(obj___0, seqno);
#line 2143
  i = i + 1;
  ldv_24819: ;
#line 2143
  if ((uint32_t )i < args->buffer_count) {
#line 2144
    goto ldv_24818;
  } else {

  }
#line 2158
  tmp___3 = copy_to_user((void *)args->buffers_ptr, (void const   *)exec_list, args->buffer_count * 32U);
#line 2158
  ret = (int )tmp___3;
#line 2162
  if (ret != 0) {
#line 2163
    printk("<3>[drm:%s] *ERROR* failed to copy %d exec entries back to user (%d)\n",
           "i915_gem_execbuffer", args->buffer_count, ret);
  } else {

  }
  err: ;
#line 2167
  if ((unsigned long )object_list != (unsigned long )((struct drm_gem_object **)0)) {
#line 2168
    i = 0;
#line 2168
    goto ldv_24822;
    ldv_24821: 
#line 2169
    i915_gem_object_unpin(*(object_list + (unsigned long )i));
#line 2168
    i = i + 1;
    ldv_24822: ;
#line 2168
    if (i < pinned) {
#line 2169
      goto ldv_24821;
    } else {

    }
#line 2171
    i = 0;
#line 2171
    goto ldv_24825;
    ldv_24824: 
#line 2172
    drm_gem_object_unreference(*(object_list + (unsigned long )i));
#line 2171
    i = i + 1;
    ldv_24825: ;
#line 2171
    if ((uint32_t )i < args->buffer_count) {
#line 2172
      goto ldv_24824;
    } else {

    }

  } else {

  }
#line 2174
  ldv_mutex_unlock_51(& dev->struct_mutex);
  pre_mutex_err: 
#line 2177
  drm_free((void *)object_list, (unsigned long )args->buffer_count * 8UL, 2);
#line 2179
  drm_free((void *)exec_list, (unsigned long )args->buffer_count * 32UL, 2);
#line 2182
  return (ret);
}
}
#line 2186 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_object_pin(struct drm_gem_object *obj , uint32_t alignment ) 
{ 
  struct drm_device *dev ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  int tmp ;

  {
#line 2188
  dev = obj->dev;
#line 2189
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2193
  if ((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0)) {
#line 2194
    ret = i915_gem_object_bind_to_gtt(obj, alignment);
#line 2195
    if (ret != 0) {
#line 2196
      printk("<3>[drm:%s] *ERROR* Failure to bind: %d", "i915_gem_object_pin", ret);
#line 2197
      return (ret);
    } else {

    }
  } else {

  }
#line 2200
  obj_priv->pin_count = obj_priv->pin_count + 1;
#line 2205
  if (obj_priv->pin_count == 1) {
#line 2206
    atomic_inc(& dev->pin_count);
#line 2207
    atomic_add((int )obj->size, & dev->pin_memory);
#line 2208
    if (obj_priv->active == 0 && (obj->write_domain & 4294967230U) == 0U) {
#line 2208
      tmp = list_empty((struct list_head  const  *)(& obj_priv->list));
#line 2208
      if (tmp == 0) {
#line 2212
        list_del_init(& obj_priv->list);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2216
  return (0);
}
}
#line 2220 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_object_unpin(struct drm_gem_object *obj ) 
{ 
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  long tmp ;
  long tmp___0 ;

  {
#line 2222
  dev = obj->dev;
#line 2223
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2224
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2227
  obj_priv->pin_count = obj_priv->pin_count - 1;
#line 2228
  tmp = __builtin_expect(obj_priv->pin_count < 0, 0L);
#line 2228
  if (tmp != 0L) {
#line 2228
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2228), "i" (24UL));
    ldv_24841: ;
#line 2228
    goto ldv_24841;
  } else {

  }
#line 2229
  tmp___0 = __builtin_expect((unsigned long )obj_priv->gtt_space == (unsigned long )((struct drm_mm_node *)0),
                             0L);
#line 2229
  if (tmp___0 != 0L) {
#line 2229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2229), "i" (24UL));
    ldv_24842: ;
#line 2229
    goto ldv_24842;
  } else {

  }
#line 2235
  if (obj_priv->pin_count == 0) {
#line 2236
    if (obj_priv->active == 0 && (obj->write_domain & 4294967230U) == 0U) {
#line 2239
      list_move_tail(& obj_priv->list, & dev_priv->mm.inactive_list);
    } else {

    }
#line 2241
    atomic_dec(& dev->pin_count);
#line 2242
    atomic_sub((int )obj->size, & dev->pin_memory);
  } else {

  }
#line 2244
  return;
}
}
#line 2248 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_pin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2251
  args = (struct drm_i915_gem_pin *)data;
#line 2256
  ldv_mutex_lock_52(& dev->struct_mutex);
#line 2258
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2259
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2260
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_pin_ioctl(): %d\n", "i915_gem_pin_ioctl",
           args->handle);
#line 2262
    ldv_mutex_unlock_53(& dev->struct_mutex);
#line 2263
    return (-9);
  } else {

  }
#line 2265
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2267
  ret = i915_gem_object_pin(obj, (uint32_t )args->alignment);
#line 2268
  if (ret != 0) {
#line 2269
    drm_gem_object_unreference(obj);
#line 2270
    ldv_mutex_unlock_54(& dev->struct_mutex);
#line 2271
    return (ret);
  } else {

  }
#line 2277
  i915_gem_object_flush_cpu_write_domain(obj);
#line 2278
  args->offset = (uint64_t )obj_priv->gtt_offset;
#line 2279
  drm_gem_object_unreference(obj);
#line 2280
  ldv_mutex_unlock_55(& dev->struct_mutex);
#line 2282
  return (0);
}
}
#line 2286 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_unpin_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_pin *args ;
  struct drm_gem_object *obj ;

  {
#line 2289
  args = (struct drm_i915_gem_pin *)data;
#line 2292
  ldv_mutex_lock_56(& dev->struct_mutex);
#line 2294
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2295
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2296
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_unpin_ioctl(): %d\n", "i915_gem_unpin_ioctl",
           args->handle);
#line 2298
    ldv_mutex_unlock_57(& dev->struct_mutex);
#line 2299
    return (-9);
  } else {

  }
#line 2302
  i915_gem_object_unpin(obj);
#line 2304
  drm_gem_object_unreference(obj);
#line 2305
  ldv_mutex_unlock_58(& dev->struct_mutex);
#line 2306
  return (0);
}
}
#line 2310 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_busy_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_busy *args ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2313
  args = (struct drm_i915_gem_busy *)data;
#line 2317
  ldv_mutex_lock_59(& dev->struct_mutex);
#line 2318
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 2319
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2320
    printk("<3>[drm:%s] *ERROR* Bad handle in i915_gem_busy_ioctl(): %d\n", "i915_gem_busy_ioctl",
           args->handle);
#line 2322
    ldv_mutex_unlock_60(& dev->struct_mutex);
#line 2323
    return (-9);
  } else {

  }
#line 2326
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2327
  args->busy = (uint32_t )obj_priv->active;
#line 2329
  drm_gem_object_unreference(obj);
#line 2330
  ldv_mutex_unlock_61(& dev->struct_mutex);
#line 2331
  return (0);
}
}
#line 2335 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_throttle_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  int tmp ;

  {
#line 2338
  tmp = i915_gem_ring_throttle(dev, file_priv);
#line 2338
  return (tmp);
}
}
#line 2341 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_init_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;
  void *tmp ;

  {
#line 2345
  tmp = drm_calloc(1UL, 88UL, 2);
#line 2345
  obj_priv = (struct drm_i915_gem_object *)tmp;
#line 2346
  if ((unsigned long )obj_priv == (unsigned long )((struct drm_i915_gem_object *)0)) {
#line 2347
    return (-12);
  } else {

  }
#line 2355
  obj->write_domain = 1U;
#line 2356
  obj->read_domains = 1U;
#line 2358
  obj_priv->agp_type = 65536U;
#line 2360
  obj->driver_private = (void *)obj_priv;
#line 2361
  obj_priv->obj = obj;
#line 2362
  INIT_LIST_HEAD(& obj_priv->list);
#line 2363
  return (0);
}
}
#line 2366 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_free_object(struct drm_gem_object *obj ) 
{ 
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2368
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2370
  goto ldv_24884;
  ldv_24883: 
#line 2371
  i915_gem_object_unpin(obj);
  ldv_24884: ;
#line 2370
  if (obj_priv->pin_count > 0) {
#line 2371
    goto ldv_24883;
  } else {

  }
#line 2373
  i915_gem_object_unbind(obj);
#line 2375
  drm_free((void *)obj_priv->page_cpu_valid, 1UL, 2);
#line 2376
  drm_free(obj->driver_private, 1UL, 2);
#line 2377
  return;
}
}
#line 2381 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_evict_from_list(struct drm_device *dev , struct list_head *head ) 
{ 
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 2387
  goto ldv_24897;
  ldv_24896: 
#line 2388
  __mptr = (struct list_head  const  *)head->next;
#line 2388
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 2391
  obj = obj_priv->obj;
#line 2393
  if (obj_priv->pin_count != 0) {
#line 2394
    printk("<3>[drm:%s] *ERROR* Pinned object in unbind list\n", "i915_gem_evict_from_list");
#line 2395
    ldv_mutex_unlock_62(& dev->struct_mutex);
#line 2396
    return (-22);
  } else {

  }
#line 2399
  ret = i915_gem_object_unbind(obj);
#line 2400
  if (ret != 0) {
#line 2401
    printk("<3>[drm:%s] *ERROR* Error unbinding object in LeaveVT: %d\n", "i915_gem_evict_from_list",
           ret);
#line 2403
    ldv_mutex_unlock_63(& dev->struct_mutex);
#line 2404
    return (ret);
  } else {

  }
  ldv_24897: 
#line 2387
  tmp = list_empty((struct list_head  const  *)head);
#line 2387
  if (tmp == 0) {
#line 2388
    goto ldv_24896;
  } else {

  }

#line 2409
  return (0);
}
}
#line 2413 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_idle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t seqno ;
  uint32_t cur_seqno ;
  uint32_t last_seqno ;
  int stuck ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int __ret_warn_on ;
  int tmp___1 ;
  long tmp___2 ;
  int __ret_warn_on___0 ;
  int tmp___3 ;
  long tmp___4 ;
  int __ret_warn_on___1 ;
  int tmp___5 ;
  long tmp___6 ;
  struct drm_i915_gem_object *obj_priv ;
  struct list_head  const  *__mptr ;
  int tmp___7 ;
  struct drm_i915_gem_object *obj_priv___0 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___8 ;
  int __ret_warn_on___2 ;
  int tmp___9 ;
  long tmp___10 ;

  {
#line 2415
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2419
  ldv_mutex_lock_64(& dev->struct_mutex);
#line 2421
  if (dev_priv->mm.suspended != 0 || (unsigned long )dev_priv->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2422
    ldv_mutex_unlock_65(& dev->struct_mutex);
#line 2423
    return (0);
  } else {

  }
#line 2429
  dev_priv->mm.suspended = 1;
#line 2433
  ldv_mutex_unlock_66(& dev->struct_mutex);
#line 2434
  cancel_delayed_work_sync(& dev_priv->mm.retire_work);
#line 2435
  ldv_mutex_lock_67(& dev->struct_mutex);
#line 2437
  i915_kernel_lost_context(dev);
#line 2441
  i915_gem_flush(dev, 4294967230U, 4294967230U);
#line 2443
  seqno = i915_add_request(dev, 4294967230U);
#line 2446
  if (seqno == 0U) {
#line 2447
    ldv_mutex_unlock_68(& dev->struct_mutex);
#line 2448
    return (-12);
  } else {

  }
#line 2451
  dev_priv->mm.waiting_gem_seqno = seqno;
#line 2452
  last_seqno = 0U;
#line 2453
  stuck = 0;
  ldv_24910: 
#line 2455
  cur_seqno = i915_get_gem_seqno(dev);
#line 2456
  tmp = i915_seqno_passed(cur_seqno, seqno);
#line 2456
  if (tmp != 0) {
#line 2457
    goto ldv_24908;
  } else {

  }
#line 2458
  if (last_seqno == cur_seqno) {
#line 2459
    tmp___0 = stuck;
#line 2459
    stuck = stuck + 1;
#line 2459
    if (tmp___0 > 100) {
#line 2460
      printk("<3>[drm:%s] *ERROR* hardware wedged\n", "i915_gem_idle");
#line 2461
      dev_priv->mm.wedged = 1;
#line 2462
      __wake_up(& dev_priv->irq_queue, 1U, 1, 0);
#line 2463
      goto ldv_24908;
    } else {

    }
  } else {

  }
#line 2466
  msleep(10U);
#line 2467
  last_seqno = cur_seqno;
#line 2468
  goto ldv_24910;
  ldv_24908: 
#line 2469
  dev_priv->mm.waiting_gem_seqno = 0U;
#line 2471
  i915_gem_retire_requests(dev);
#line 2473
  if (dev_priv->mm.wedged == 0) {
#line 2477
    tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 2477
    __ret_warn_on = tmp___1 == 0;
#line 2477
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 2477
    if (tmp___2 != 0L) {
#line 2477
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       2477);
    } else {

    }
#line 2477
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 2478
    tmp___3 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 2478
    __ret_warn_on___0 = tmp___3 == 0;
#line 2478
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 2478
    if (tmp___4 != 0L) {
#line 2478
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       2478);
    } else {

    }
#line 2478
    __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 2482
    tmp___5 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 2482
    __ret_warn_on___1 = tmp___5 == 0;
#line 2482
    tmp___6 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
#line 2482
    if (tmp___6 != 0L) {
#line 2482
      warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                       2482);
    } else {

    }
#line 2482
    __builtin_expect(__ret_warn_on___1 != 0, 0L);
  } else {

  }
#line 2490
  goto ldv_24921;
  ldv_24920: 
#line 2493
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 2493
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 2496
  (obj_priv->obj)->write_domain = (obj_priv->obj)->write_domain & 65U;
#line 2497
  i915_gem_object_move_to_inactive(obj_priv->obj);
  ldv_24921: 
#line 2490
  tmp___7 = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 2490
  if (tmp___7 == 0) {
#line 2491
    goto ldv_24920;
  } else {

  }

#line 2500
  goto ldv_24927;
  ldv_24926: 
#line 2503
  __mptr___0 = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 2503
  obj_priv___0 = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
#line 2506
  (obj_priv___0->obj)->write_domain = (obj_priv___0->obj)->write_domain & 65U;
#line 2507
  i915_gem_object_move_to_inactive(obj_priv___0->obj);
  ldv_24927: 
#line 2500
  tmp___8 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 2500
  if (tmp___8 == 0) {
#line 2501
    goto ldv_24926;
  } else {

  }
#line 2512
  ret = i915_gem_evict_from_list(dev, & dev_priv->mm.inactive_list);
#line 2513
  tmp___9 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 2513
  __ret_warn_on___2 = tmp___9 == 0;
#line 2513
  tmp___10 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 2513
  if (tmp___10 != 0L) {
#line 2513
    warn_on_slowpath("/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared",
                     2513);
  } else {

  }
#line 2513
  __builtin_expect(__ret_warn_on___2 != 0, 0L);
#line 2514
  if (ret != 0) {
#line 2515
    ldv_mutex_unlock_69(& dev->struct_mutex);
#line 2516
    return (ret);
  } else {

  }
#line 2519
  i915_gem_cleanup_ringbuffer(dev);
#line 2520
  ldv_mutex_unlock_70(& dev->struct_mutex);
#line 2522
  return (0);
}
}
#line 2526 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_init_hws(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;

  {
#line 2528
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2536
  if ((((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706) && dev->pci_device != 10818) && ((dev->pci_device != 11778 && dev->pci_device != 11794) && dev->pci_device != 11810)) {
#line 2537
    return (0);
  } else {

  }
#line 2539
  obj = drm_gem_object_alloc(dev, 4096UL);
#line 2540
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2541
    printk("<3>[drm:%s] *ERROR* Failed to allocate status page\n", "i915_gem_init_hws");
#line 2542
    return (-12);
  } else {

  }
#line 2544
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2545
  obj_priv->agp_type = 65537U;
#line 2547
  ret = i915_gem_object_pin(obj, 4096U);
#line 2548
  if (ret != 0) {
#line 2549
    drm_gem_object_unreference(obj);
#line 2550
    return (ret);
  } else {

  }
#line 2553
  dev_priv->status_gfx_addr = obj_priv->gtt_offset;
#line 2555
  dev_priv->hw_status_page = kmap(*(obj_priv->page_list));
#line 2556
  if ((unsigned long )dev_priv->hw_status_page == (unsigned long )((void *)0)) {
#line 2557
    printk("<3>[drm:%s] *ERROR* Failed to map status page.\n", "i915_gem_init_hws");
#line 2558
    memset((void *)(& dev_priv->hws_map), 0, 40UL);
#line 2559
    drm_gem_object_unreference(obj);
#line 2560
    return (-22);
  } else {

  }
#line 2562
  dev_priv->hws_obj = obj;
#line 2563
  memset(dev_priv->hw_status_page, 0, 4096UL);
#line 2564
  writel(dev_priv->status_gfx_addr, (void volatile   *)dev_priv->regs + 8320U);
#line 2565
  readl((void const volatile   *)dev_priv->regs + 8320U);
#line 2566
  if (drm_debug != 0U) {
#line 2566
    printk("<7>[drm:%s] hws offset: 0x%08x\n", "i915_gem_init_hws", dev_priv->status_gfx_addr);
  } else {

  }
#line 2568
  return (0);
}
}
#line 2572 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static int i915_gem_init_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;
  int ret ;
  u32 head ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  unsigned int tmp___10 ;
  unsigned int tmp___11 ;
  unsigned int tmp___12 ;

  {
#line 2574
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2580
  ret = i915_gem_init_hws(dev);
#line 2581
  if (ret != 0) {
#line 2582
    return (ret);
  } else {

  }
#line 2584
  obj = drm_gem_object_alloc(dev, 131072UL);
#line 2585
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2586
    printk("<3>[drm:%s] *ERROR* Failed to allocate ringbuffer\n", "i915_gem_init_ringbuffer");
#line 2587
    return (-12);
  } else {

  }
#line 2589
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2591
  ret = i915_gem_object_pin(obj, 4096U);
#line 2592
  if (ret != 0) {
#line 2593
    drm_gem_object_unreference(obj);
#line 2594
    return (ret);
  } else {

  }
#line 2598
  dev_priv->ring.Size = obj->size;
#line 2599
  dev_priv->ring.tail_mask = (int )((unsigned int )obj->size - 1U);
#line 2601
  dev_priv->ring.map.offset = (dev->agp)->base + (unsigned long )obj_priv->gtt_offset;
#line 2602
  dev_priv->ring.map.size = obj->size;
#line 2603
  dev_priv->ring.map.type = _DRM_FRAME_BUFFER;
#line 2604
  dev_priv->ring.map.flags = 0;
#line 2605
  dev_priv->ring.map.mtrr = 0;
#line 2607
  drm_core_ioremap_wc(& dev_priv->ring.map, dev);
#line 2608
  if ((unsigned long )dev_priv->ring.map.handle == (unsigned long )((void *)0)) {
#line 2609
    printk("<3>[drm:%s] *ERROR* Failed to map ringbuffer.\n", "i915_gem_init_ringbuffer");
#line 2610
    memset((void *)(& dev_priv->ring), 0, 88UL);
#line 2611
    drm_gem_object_unreference(obj);
#line 2612
    return (-22);
  } else {

  }
#line 2614
  dev_priv->ring.ring_obj = obj;
#line 2615
  dev_priv->ring.virtual_start = (u8 *)dev_priv->ring.map.handle;
#line 2618
  writel(0U, (void volatile   *)dev_priv->regs + 8252U);
#line 2619
  writel(0U, (void volatile   *)dev_priv->regs + 8240U);
#line 2620
  writel(0U, (void volatile   *)dev_priv->regs + 8244U);
#line 2623
  writel(obj_priv->gtt_offset, (void volatile   *)dev_priv->regs + 8248U);
#line 2624
  tmp = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 2624
  head = tmp & 2097148U;
#line 2627
  if (head != 0U) {
#line 2628
    tmp___0 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 2628
    tmp___1 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 2628
    tmp___2 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 2628
    tmp___3 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 2628
    printk("<3>[drm:%s] *ERROR* Ring head not reset to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___3, tmp___2, tmp___1, tmp___0);
#line 2634
    writel(0U, (void volatile   *)dev_priv->regs + 8244U);
#line 2636
    tmp___4 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 2636
    tmp___5 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 2636
    tmp___6 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 2636
    tmp___7 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 2636
    printk("<3>[drm:%s] *ERROR* Ring head forced to zero ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___7, tmp___6, tmp___5, tmp___4);
  } else {

  }
#line 2644
  writel((((unsigned int )obj->size - 4096U) & 2093056U) | 1U, (void volatile   *)dev_priv->regs + 8252U);
#line 2649
  tmp___8 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 2649
  head = tmp___8 & 2097148U;
#line 2652
  if (head != 0U) {
#line 2653
    tmp___9 = readl((void const volatile   *)dev_priv->regs + 8248U);
#line 2653
    tmp___10 = readl((void const volatile   *)dev_priv->regs + 8240U);
#line 2653
    tmp___11 = readl((void const volatile   *)dev_priv->regs + 8244U);
#line 2653
    tmp___12 = readl((void const volatile   *)dev_priv->regs + 8252U);
#line 2653
    printk("<3>[drm:%s] *ERROR* Ring initialization failed ctl %08x head %08x tail %08x start %08x\n",
           "i915_gem_init_ringbuffer", tmp___12, tmp___11, tmp___10, tmp___9);
#line 2659
    return (-5);
  } else {

  }
#line 2663
  i915_kernel_lost_context(dev);
#line 2665
  return (0);
}
}
#line 2669 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
static void i915_gem_cleanup_ringbuffer(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 2671
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2673
  if ((unsigned long )dev_priv->ring.ring_obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 2674
    return;
  } else {

  }
#line 2676
  drm_core_ioremapfree(& dev_priv->ring.map, dev);
#line 2678
  i915_gem_object_unpin(dev_priv->ring.ring_obj);
#line 2679
  drm_gem_object_unreference(dev_priv->ring.ring_obj);
#line 2680
  dev_priv->ring.ring_obj = 0;
#line 2681
  memset((void *)(& dev_priv->ring), 0, 88UL);
#line 2683
  if ((unsigned long )dev_priv->hws_obj != (unsigned long )((struct drm_gem_object *)0)) {
#line 2684
    obj = dev_priv->hws_obj;
#line 2685
    obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 2688
    i915_gem_object_unpin(obj);
#line 2689
    drm_gem_object_unreference(obj);
#line 2690
    dev_priv->hws_obj = 0;
#line 2691
    memset((void *)(& dev_priv->hws_map), 0, 40UL);
#line 2692
    dev_priv->hw_status_page = 0;
#line 2695
    writel(536866816U, (void volatile   *)dev_priv->regs + 8320U);
  } else {

  }
#line 2697
  return;
}
}
#line 2700 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_entervt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 2703
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2706
  if (dev_priv->mm.wedged != 0) {
#line 2707
    printk("<3>[drm:%s] *ERROR* Reenabling wedged hardware, good luck\n", "i915_gem_entervt_ioctl");
#line 2708
    dev_priv->mm.wedged = 0;
  } else {

  }
#line 2711
  ret = i915_gem_init_ringbuffer(dev);
#line 2712
  if (ret != 0) {
#line 2713
    return (ret);
  } else {

  }
#line 2715
  dev_priv->mm.gtt_mapping = io_mapping_create_wc((dev->agp)->base, (dev->agp)->agp_info.aper_size * 1048576UL);
#line 2719
  ldv_mutex_lock_71(& dev->struct_mutex);
#line 2720
  tmp = list_empty((struct list_head  const  *)(& dev_priv->mm.active_list));
#line 2720
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 2720
  if (tmp___0 != 0L) {
#line 2720
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2720), "i" (24UL));
    ldv_24962: ;
#line 2720
    goto ldv_24962;
  } else {

  }
#line 2721
  tmp___1 = list_empty((struct list_head  const  *)(& dev_priv->mm.flushing_list));
#line 2721
  tmp___2 = __builtin_expect(tmp___1 == 0, 0L);
#line 2721
  if (tmp___2 != 0L) {
#line 2721
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2721), "i" (24UL));
    ldv_24963: ;
#line 2721
    goto ldv_24963;
  } else {

  }
#line 2722
  tmp___3 = list_empty((struct list_head  const  *)(& dev_priv->mm.inactive_list));
#line 2722
  tmp___4 = __builtin_expect(tmp___3 == 0, 0L);
#line 2722
  if (tmp___4 != 0L) {
#line 2722
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2722), "i" (24UL));
    ldv_24964: ;
#line 2722
    goto ldv_24964;
  } else {

  }
#line 2723
  tmp___5 = list_empty((struct list_head  const  *)(& dev_priv->mm.request_list));
#line 2723
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 2723
  if (tmp___6 != 0L) {
#line 2723
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.quad 1b, %c0\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"),
                         "i" (2723), "i" (24UL));
    ldv_24965: ;
#line 2723
    goto ldv_24965;
  } else {

  }
#line 2724
  dev_priv->mm.suspended = 0;
#line 2725
  ldv_mutex_unlock_72(& dev->struct_mutex);
#line 2727
  drm_irq_install(dev);
#line 2729
  return (0);
}
}
#line 2733 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
int i915_gem_leavevt_ioctl(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  drm_i915_private_t *dev_priv ;
  int ret ;

  {
#line 2736
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2739
  ret = i915_gem_idle(dev);
#line 2740
  drm_irq_uninstall(dev);
#line 2742
  io_mapping_free(dev_priv->mm.gtt_mapping);
#line 2743
  return (ret);
}
}
#line 2747 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_lastclose(struct drm_device *dev ) 
{ 
  int ret ;

  {
#line 2751
  ret = i915_gem_idle(dev);
#line 2752
  if (ret != 0) {
#line 2753
    printk("<3>[drm:%s] *ERROR* failed to idle hardware: %d\n", "i915_gem_lastclose",
           ret);
  } else {

  }
#line 2754
  return;
}
}
#line 2757 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void i915_gem_load(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 2759
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 2761
  INIT_LIST_HEAD(& dev_priv->mm.active_list);
#line 2762
  INIT_LIST_HEAD(& dev_priv->mm.flushing_list);
#line 2763
  INIT_LIST_HEAD(& dev_priv->mm.inactive_list);
#line 2764
  INIT_LIST_HEAD(& dev_priv->mm.request_list);
#line 2765
  __constr_expr_0.counter = 0L;
#line 2765
  dev_priv->mm.retire_work.work.data = __constr_expr_0;
#line 2765
  lockdep_init_map(& dev_priv->mm.retire_work.work.lockdep_map, "&(&dev_priv->mm.retire_work)->work",
                   & __key, 0);
#line 2765
  INIT_LIST_HEAD(& dev_priv->mm.retire_work.work.entry);
#line 2765
  dev_priv->mm.retire_work.work.func = & i915_gem_retire_work_handler;
#line 2765
  init_timer(& dev_priv->mm.retire_work.timer);
#line 2767
  dev_priv->mm.next_gem_seqno = 1U;
#line 2769
  i915_gem_detect_bit_6_swizzle(dev);
#line 2770
  return;
}
}
#line 2772 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_21(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2777
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2779
  mutex_lock(ldv_func_arg1);
#line 2780
  return;
}
}
#line 2782 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_22(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2787
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2789
  mutex_unlock(ldv_func_arg1);
#line 2790
  return;
}
}
#line 2792 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2797
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2799
  mutex_unlock(ldv_func_arg1);
#line 2800
  return;
}
}
#line 2802 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2807
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2809
  mutex_lock(ldv_func_arg1);
#line 2810
  return;
}
}
#line 2812 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2817
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2819
  mutex_unlock(ldv_func_arg1);
#line 2820
  return;
}
}
#line 2822 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2827
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2829
  mutex_lock(ldv_func_arg1);
#line 2830
  return;
}
}
#line 2832 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2837
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2839
  mutex_unlock(ldv_func_arg1);
#line 2840
  return;
}
}
#line 2842 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2847
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2849
  mutex_unlock(ldv_func_arg1);
#line 2850
  return;
}
}
#line 2852 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2857
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2859
  mutex_unlock(ldv_func_arg1);
#line 2860
  return;
}
}
#line 2862 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2867
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2869
  mutex_lock(ldv_func_arg1);
#line 2870
  return;
}
}
#line 2872 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2877
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2879
  mutex_unlock(ldv_func_arg1);
#line 2880
  return;
}
}
#line 2882 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_32(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2887
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2889
  mutex_unlock(ldv_func_arg1);
#line 2890
  return;
}
}
#line 2892 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2897
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2899
  mutex_lock(ldv_func_arg1);
#line 2900
  return;
}
}
#line 2902 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_34(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2907
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2909
  mutex_unlock(ldv_func_arg1);
#line 2910
  return;
}
}
#line 2912 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2917
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2919
  mutex_unlock(ldv_func_arg1);
#line 2920
  return;
}
}
#line 2922 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2927
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2929
  mutex_unlock(ldv_func_arg1);
#line 2930
  return;
}
}
#line 2932 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2937
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2939
  mutex_lock(ldv_func_arg1);
#line 2940
  return;
}
}
#line 2942 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2947
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2949
  mutex_unlock(ldv_func_arg1);
#line 2950
  return;
}
}
#line 2952 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2957
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2959
  mutex_lock(ldv_func_arg1);
#line 2960
  return;
}
}
#line 2962 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2967
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2969
  mutex_unlock(ldv_func_arg1);
#line 2970
  return;
}
}
#line 2972 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2977
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2979
  mutex_unlock(ldv_func_arg1);
#line 2980
  return;
}
}
#line 2982 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2987
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2989
  mutex_lock(ldv_func_arg1);
#line 2990
  return;
}
}
#line 2992 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2997
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 2999
  mutex_unlock(ldv_func_arg1);
#line 3000
  return;
}
}
#line 3002 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3007
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3009
  mutex_lock(ldv_func_arg1);
#line 3010
  return;
}
}
#line 3012 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3017
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3019
  mutex_unlock(ldv_func_arg1);
#line 3020
  return;
}
}
#line 3022 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3027
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3029
  mutex_lock(ldv_func_arg1);
#line 3030
  return;
}
}
#line 3032 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3037
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3039
  mutex_unlock(ldv_func_arg1);
#line 3040
  return;
}
}
#line 3042 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3047
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3049
  mutex_lock(ldv_func_arg1);
#line 3050
  return;
}
}
#line 3052 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3057
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3059
  mutex_unlock(ldv_func_arg1);
#line 3060
  return;
}
}
#line 3062 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3067
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3069
  mutex_unlock(ldv_func_arg1);
#line 3070
  return;
}
}
#line 3072 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_51(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3077
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3079
  mutex_unlock(ldv_func_arg1);
#line 3080
  return;
}
}
#line 3082 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_52(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3087
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3089
  mutex_lock(ldv_func_arg1);
#line 3090
  return;
}
}
#line 3092 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3097
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3099
  mutex_unlock(ldv_func_arg1);
#line 3100
  return;
}
}
#line 3102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_54(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3107
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3109
  mutex_unlock(ldv_func_arg1);
#line 3110
  return;
}
}
#line 3112 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3117
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3119
  mutex_unlock(ldv_func_arg1);
#line 3120
  return;
}
}
#line 3122 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_56(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3127
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3129
  mutex_lock(ldv_func_arg1);
#line 3130
  return;
}
}
#line 3132 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_57(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3137
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3139
  mutex_unlock(ldv_func_arg1);
#line 3140
  return;
}
}
#line 3142 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3147
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3149
  mutex_unlock(ldv_func_arg1);
#line 3150
  return;
}
}
#line 3152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3157
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3159
  mutex_lock(ldv_func_arg1);
#line 3160
  return;
}
}
#line 3162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3167
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3169
  mutex_unlock(ldv_func_arg1);
#line 3170
  return;
}
}
#line 3172 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_61(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3177
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3179
  mutex_unlock(ldv_func_arg1);
#line 3180
  return;
}
}
#line 3182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3187
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3189
  mutex_unlock(ldv_func_arg1);
#line 3190
  return;
}
}
#line 3192 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3197
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3199
  mutex_unlock(ldv_func_arg1);
#line 3200
  return;
}
}
#line 3202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_64(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3207
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3209
  mutex_lock(ldv_func_arg1);
#line 3210
  return;
}
}
#line 3212 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3217
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3219
  mutex_unlock(ldv_func_arg1);
#line 3220
  return;
}
}
#line 3222 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3227
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3229
  mutex_unlock(ldv_func_arg1);
#line 3230
  return;
}
}
#line 3232 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3237
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3239
  mutex_lock(ldv_func_arg1);
#line 3240
  return;
}
}
#line 3242 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3247
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3249
  mutex_unlock(ldv_func_arg1);
#line 3250
  return;
}
}
#line 3252 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3257
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3259
  mutex_unlock(ldv_func_arg1);
#line 3260
  return;
}
}
#line 3262 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3267
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3269
  mutex_unlock(ldv_func_arg1);
#line 3270
  return;
}
}
#line 3272 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_lock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3277
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3279
  mutex_lock(ldv_func_arg1);
#line 3280
  return;
}
}
#line 3282 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem.c.prepared"
void ldv_mutex_unlock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3287
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 3289
  mutex_unlock(ldv_func_arg1);
#line 3290
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 163 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 115 "include/linux/proc_fs.h"
extern struct proc_dir_entry *create_proc_entry(char const   * , mode_t  , struct proc_dir_entry * ) ;
#line 121
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_active_info(char *buf , char **start , off_t offset , int request ,
                                int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 52
  minor = (struct drm_minor *)data;
#line 53
  dev = minor->dev;
#line 54
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 56
  len = 0;
#line 58
  if ((unsigned long )offset > 4016UL) {
#line 59
    *eof = 1;
#line 60
    return (0);
  } else {

  }
#line 63
  *start = buf + (unsigned long )offset;
#line 64
  *eof = 0;
#line 65
  tmp = sprintf(buf + (unsigned long )len, "Active:\n");
#line 65
  len = tmp + len;
#line 65
  if ((unsigned int )len > 4016U) {
#line 65
    *eof = 1;
#line 65
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 66
  __mptr = (struct list_head  const  *)dev_priv->mm.active_list.next;
#line 66
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 66
  goto ldv_23719;
  ldv_23718: 
#line 69
  obj = obj_priv->obj;
#line 70
  if (obj->name != 0) {
#line 71
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 71
    len = tmp___0 + len;
#line 71
    if ((unsigned int )len > 4016U) {
#line 71
      *eof = 1;
#line 71
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 76
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 76
    len = tmp___1 + len;
#line 76
    if ((unsigned int )len > 4016U) {
#line 76
      *eof = 1;
#line 76
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 66
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 66
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_23719: 
#line 66
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 66
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.active_list)) {
#line 67
    goto ldv_23718;
  } else {

  }

#line 82
  if ((off_t )len > (off_t )request + offset) {
#line 83
    return (request);
  } else {

  }
#line 84
  *eof = 1;
#line 85
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_flushing_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 91
  minor = (struct drm_minor *)data;
#line 92
  dev = minor->dev;
#line 93
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 95
  len = 0;
#line 97
  if ((unsigned long )offset > 4016UL) {
#line 98
    *eof = 1;
#line 99
    return (0);
  } else {

  }
#line 102
  *start = buf + (unsigned long )offset;
#line 103
  *eof = 0;
#line 104
  tmp = sprintf(buf + (unsigned long )len, "Flushing:\n");
#line 104
  len = tmp + len;
#line 104
  if ((unsigned int )len > 4016U) {
#line 104
    *eof = 1;
#line 104
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 105
  __mptr = (struct list_head  const  *)dev_priv->mm.flushing_list.next;
#line 105
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 105
  goto ldv_23740;
  ldv_23739: 
#line 108
  obj = obj_priv->obj;
#line 109
  if (obj->name != 0) {
#line 110
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 110
    len = tmp___0 + len;
#line 110
    if ((unsigned int )len > 4016U) {
#line 110
      *eof = 1;
#line 110
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 115
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 115
    len = tmp___1 + len;
#line 115
    if ((unsigned int )len > 4016U) {
#line 115
      *eof = 1;
#line 115
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 105
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 105
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_23740: 
#line 105
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 105
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.flushing_list)) {
#line 106
    goto ldv_23739;
  } else {

  }

#line 120
  if ((off_t )len > (off_t )request + offset) {
#line 121
    return (request);
  } else {

  }
#line 122
  *eof = 1;
#line 123
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_inactive_info(char *buf , char **start , off_t offset , int request ,
                                  int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_object *obj_priv ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  struct drm_gem_object *obj ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 129
  minor = (struct drm_minor *)data;
#line 130
  dev = minor->dev;
#line 131
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 133
  len = 0;
#line 135
  if ((unsigned long )offset > 4016UL) {
#line 136
    *eof = 1;
#line 137
    return (0);
  } else {

  }
#line 140
  *start = buf + (unsigned long )offset;
#line 141
  *eof = 0;
#line 142
  tmp = sprintf(buf + (unsigned long )len, "Inactive:\n");
#line 142
  len = tmp + len;
#line 142
  if ((unsigned int )len > 4016U) {
#line 142
    *eof = 1;
#line 142
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 143
  __mptr = (struct list_head  const  *)dev_priv->mm.inactive_list.next;
#line 143
  obj_priv = (struct drm_i915_gem_object *)__mptr + 0xfffffffffffffff0UL;
#line 143
  goto ldv_23761;
  ldv_23760: 
#line 146
  obj = obj_priv->obj;
#line 147
  if (obj->name != 0) {
#line 148
    tmp___0 = sprintf(buf + (unsigned long )len, "    %p(%d): %08x %08x %d\n", obj,
                      obj->name, obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 148
    len = tmp___0 + len;
#line 148
    if ((unsigned int )len > 4016U) {
#line 148
      *eof = 1;
#line 148
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 153
    tmp___1 = sprintf(buf + (unsigned long )len, "       %p: %08x %08x %d\n", obj,
                      obj->read_domains, obj->write_domain, obj_priv->last_rendering_seqno);
#line 153
    len = tmp___1 + len;
#line 153
    if ((unsigned int )len > 4016U) {
#line 153
      *eof = 1;
#line 153
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 143
  __mptr___0 = (struct list_head  const  *)obj_priv->list.next;
#line 143
  obj_priv = (struct drm_i915_gem_object *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_23761: 
#line 143
  __builtin_prefetch((void const   *)obj_priv->list.next);
#line 143
  if ((unsigned long )(& obj_priv->list) != (unsigned long )(& dev_priv->mm.inactive_list)) {
#line 144
    goto ldv_23760;
  } else {

  }

#line 158
  if ((off_t )len > (off_t )request + offset) {
#line 159
    return (request);
  } else {

  }
#line 160
  *eof = 1;
#line 161
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_request_info(char *buf , char **start , off_t offset , int request ,
                                 int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  struct drm_i915_gem_request *gem_request ;
  int len ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 167
  minor = (struct drm_minor *)data;
#line 168
  dev = minor->dev;
#line 169
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 171
  len = 0;
#line 173
  if ((unsigned long )offset > 4016UL) {
#line 174
    *eof = 1;
#line 175
    return (0);
  } else {

  }
#line 178
  *start = buf + (unsigned long )offset;
#line 179
  *eof = 0;
#line 180
  tmp = sprintf(buf + (unsigned long )len, "Request:\n");
#line 180
  len = tmp + len;
#line 180
  if ((unsigned int )len > 4016U) {
#line 180
    *eof = 1;
#line 180
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 181
  __mptr = (struct list_head  const  *)dev_priv->mm.request_list.next;
#line 181
  gem_request = (struct drm_i915_gem_request *)__mptr + 0xfffffffffffffff0UL;
#line 181
  goto ldv_23781;
  ldv_23780: 
#line 184
  tmp___0 = sprintf(buf + (unsigned long )len, "    %d @ %d\n", gem_request->seqno,
                    (int )((unsigned int )jiffies - (unsigned int )gem_request->emitted_jiffies));
#line 184
  len = tmp___0 + len;
#line 184
  if ((unsigned int )len > 4016U) {
#line 184
    *eof = 1;
#line 184
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 181
  __mptr___0 = (struct list_head  const  *)gem_request->list.next;
#line 181
  gem_request = (struct drm_i915_gem_request *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_23781: 
#line 181
  __builtin_prefetch((void const   *)gem_request->list.next);
#line 181
  if ((unsigned long )(& gem_request->list) != (unsigned long )(& dev_priv->mm.request_list)) {
#line 182
    goto ldv_23780;
  } else {

  }

#line 188
  if ((off_t )len > (off_t )request + offset) {
#line 189
    return (request);
  } else {

  }
#line 190
  *eof = 1;
#line 191
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_gem_seqno_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  uint32_t tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 197
  minor = (struct drm_minor *)data;
#line 198
  dev = minor->dev;
#line 199
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 200
  len = 0;
#line 202
  if ((unsigned long )offset > 4016UL) {
#line 203
    *eof = 1;
#line 204
    return (0);
  } else {

  }
#line 207
  *start = buf + (unsigned long )offset;
#line 208
  *eof = 0;
#line 209
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 210
    tmp = i915_get_gem_seqno(dev);
#line 210
    tmp___0 = sprintf(buf + (unsigned long )len, "Current sequence: %d\n", tmp);
#line 210
    len = tmp___0 + len;
#line 210
    if ((unsigned int )len > 4016U) {
#line 210
      *eof = 1;
#line 210
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 213
    tmp___1 = sprintf(buf + (unsigned long )len, "Current sequence: hws uninitialized\n");
#line 213
    len = tmp___1 + len;
#line 213
    if ((unsigned int )len > 4016U) {
#line 213
      *eof = 1;
#line 213
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 215
  tmp___2 = sprintf(buf + (unsigned long )len, "Waiter sequence:  %d\n", dev_priv->mm.waiting_gem_seqno);
#line 215
  len = tmp___2 + len;
#line 215
  if ((unsigned int )len > 4016U) {
#line 215
    *eof = 1;
#line 215
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 217
  tmp___3 = sprintf(buf + (unsigned long )len, "IRQ sequence:     %d\n", dev_priv->mm.irq_gem_seqno);
#line 217
  len = tmp___3 + len;
#line 217
  if ((unsigned int )len > 4016U) {
#line 217
    *eof = 1;
#line 217
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 218
  if ((off_t )len > (off_t )request + offset) {
#line 219
    return (request);
  } else {

  }
#line 220
  *eof = 1;
#line 221
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static int i915_interrupt_info(char *buf , char **start , off_t offset , int request ,
                               int *eof , void *data ) 
{ 
  struct drm_minor *minor ;
  struct drm_device *dev ;
  drm_i915_private_t *dev_priv ;
  int len ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  int tmp___6 ;
  unsigned int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  uint32_t tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 228
  minor = (struct drm_minor *)data;
#line 229
  dev = minor->dev;
#line 230
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 231
  len = 0;
#line 233
  if ((unsigned long )offset > 4016UL) {
#line 234
    *eof = 1;
#line 235
    return (0);
  } else {

  }
#line 238
  *start = buf + (unsigned long )offset;
#line 239
  *eof = 0;
#line 240
  tmp = readl((void const volatile   *)dev_priv->regs + 8352U);
#line 240
  tmp___0 = sprintf(buf + (unsigned long )len, "Interrupt enable:    %08x\n", tmp);
#line 240
  len = tmp___0 + len;
#line 240
  if ((unsigned int )len > 4016U) {
#line 240
    *eof = 1;
#line 240
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 242
  tmp___1 = readl((void const volatile   *)dev_priv->regs + 8356U);
#line 242
  tmp___2 = sprintf(buf + (unsigned long )len, "Interrupt identity:  %08x\n", tmp___1);
#line 242
  len = tmp___2 + len;
#line 242
  if ((unsigned int )len > 4016U) {
#line 242
    *eof = 1;
#line 242
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 244
  tmp___3 = readl((void const volatile   *)dev_priv->regs + 8360U);
#line 244
  tmp___4 = sprintf(buf + (unsigned long )len, "Interrupt mask:      %08x\n", tmp___3);
#line 244
  len = tmp___4 + len;
#line 244
  if ((unsigned int )len > 4016U) {
#line 244
    *eof = 1;
#line 244
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 246
  tmp___5 = readl((void const volatile   *)dev_priv->regs + 458788U);
#line 246
  tmp___6 = sprintf(buf + (unsigned long )len, "Pipe A stat:         %08x\n", tmp___5);
#line 246
  len = tmp___6 + len;
#line 246
  if ((unsigned int )len > 4016U) {
#line 246
    *eof = 1;
#line 246
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 248
  tmp___7 = readl((void const volatile   *)dev_priv->regs + 462884U);
#line 248
  tmp___8 = sprintf(buf + (unsigned long )len, "Pipe B stat:         %08x\n", tmp___7);
#line 248
  len = tmp___8 + len;
#line 248
  if ((unsigned int )len > 4016U) {
#line 248
    *eof = 1;
#line 248
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 250
  tmp___9 = sprintf(buf + (unsigned long )len, "Interrupts received: %d\n", dev_priv->irq_received.counter);
#line 250
  len = tmp___9 + len;
#line 250
  if ((unsigned int )len > 4016U) {
#line 250
    *eof = 1;
#line 250
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 252
  if ((unsigned long )dev_priv->hw_status_page != (unsigned long )((void *)0)) {
#line 253
    tmp___10 = i915_get_gem_seqno(dev);
#line 253
    tmp___11 = sprintf(buf + (unsigned long )len, "Current sequence:    %d\n", tmp___10);
#line 253
    len = tmp___11 + len;
#line 253
    if ((unsigned int )len > 4016U) {
#line 253
      *eof = 1;
#line 253
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  } else {
#line 256
    tmp___12 = sprintf(buf + (unsigned long )len, "Current sequence:    hws uninitialized\n");
#line 256
    len = tmp___12 + len;
#line 256
    if ((unsigned int )len > 4016U) {
#line 256
      *eof = 1;
#line 256
      return ((int )((unsigned int )len - (unsigned int )offset));
    } else {

    }
  }
#line 258
  tmp___13 = sprintf(buf + (unsigned long )len, "Waiter sequence:     %d\n", dev_priv->mm.waiting_gem_seqno);
#line 258
  len = tmp___13 + len;
#line 258
  if ((unsigned int )len > 4016U) {
#line 258
    *eof = 1;
#line 258
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 260
  tmp___14 = sprintf(buf + (unsigned long )len, "IRQ sequence:        %d\n", dev_priv->mm.irq_gem_seqno);
#line 260
  len = tmp___14 + len;
#line 260
  if ((unsigned int )len > 4016U) {
#line 260
    *eof = 1;
#line 260
    return ((int )((unsigned int )len - (unsigned int )offset));
  } else {

  }
#line 262
  if ((off_t )len > (off_t )request + offset) {
#line 263
    return (request);
  } else {

  }
#line 264
  *eof = 1;
#line 265
  return ((int )((unsigned int )len - (unsigned int )offset));
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
static struct drm_proc_list i915_gem_proc_list[6U]  = {      {"i915_gem_active", & i915_gem_active_info}, 
        {"i915_gem_flushing", & i915_gem_flushing_info}, 
        {"i915_gem_inactive", & i915_gem_inactive_info}, 
        {"i915_gem_request", & i915_gem_request_info}, 
        {"i915_gem_seqno", & i915_gem_seqno_info}, 
        {"i915_gem_interrupt", & i915_interrupt_info}};
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
int i915_gem_proc_init(struct drm_minor *minor ) 
{ 
  struct proc_dir_entry *ent ;
  int i ;
  int j ;

  {
#line 289
  i = 0;
#line 289
  goto ldv_23828;
  ldv_23827: 
#line 290
  ent = create_proc_entry(i915_gem_proc_list[i].name, 33060U, minor->dev_root);
#line 292
  if ((unsigned long )ent == (unsigned long )((struct proc_dir_entry *)0)) {
#line 293
    printk("<3>[drm:%s] *ERROR* Cannot create /proc/dri/.../%s\n", "i915_gem_proc_init",
           i915_gem_proc_list[i].name);
#line 295
    j = 0;
#line 295
    goto ldv_23825;
    ldv_23824: 
#line 296
    remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 295
    j = j + 1;
    ldv_23825: ;
#line 295
    if (j < i) {
#line 296
      goto ldv_23824;
    } else {

    }

#line 298
    return (-1);
  } else {

  }
#line 300
  ent->read_proc = i915_gem_proc_list[i].f;
#line 301
  ent->data = (void *)minor;
#line 289
  i = i + 1;
  ldv_23828: ;
#line 289
  if ((unsigned int )i <= 5U) {
#line 290
    goto ldv_23827;
  } else {

  }

#line 303
  return (0);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_proc.c.prepared"
void i915_gem_proc_cleanup(struct drm_minor *minor ) 
{ 
  int i ;

  {
#line 310
  if ((unsigned long )minor->dev_root == (unsigned long )((struct proc_dir_entry *)0)) {
#line 311
    return;
  } else {

  }
#line 313
  i = 0;
#line 313
  goto ldv_23835;
  ldv_23834: 
#line 314
  remove_proc_entry(i915_gem_proc_list[i].name, minor->dev_root);
#line 313
  i = i + 1;
  ldv_23835: ;
#line 313
  if ((unsigned int )i <= 5U) {
#line 314
    goto ldv_23834;
  } else {

  }

#line 318
  return;
}
}
#line 152 "include/linux/mutex.h"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 156
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile   *addr ) 
{ 
  unsigned short ret ;

  {
#line 19
  __asm__  volatile   ("movw %1,%0": "=r" (ret): "m" (*((unsigned short volatile   *)addr)): "memory");
#line 19
  return (ret);
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void i915_gem_detect_bit_6_swizzle(struct drm_device *dev ) 
{ 
  drm_i915_private_t *dev_priv ;
  uint32_t swizzle_x ;
  uint32_t swizzle_y ;
  uint32_t dcc ;
  unsigned short tmp ;
  unsigned short tmp___0 ;

  {
#line 104
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 105
  swizzle_x = 5U;
#line 106
  swizzle_y = 5U;
#line 108
  if ((((((dev->pci_device != 9602 && dev->pci_device != 9610) && dev->pci_device != 9618) && dev->pci_device != 10098) && (dev->pci_device != 10146 && dev->pci_device != 10158)) && (((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810)) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) {
#line 112
    swizzle_x = 0U;
#line 113
    swizzle_y = 0U;
  } else
#line 114
  if ((((((((((((dev->pci_device != 10610 && dev->pci_device != 10626) && dev->pci_device != 10642) && dev->pci_device != 10658) && dev->pci_device != 10754) && dev->pci_device != 10770) && dev->pci_device != 10818) && dev->pci_device != 11778) && dev->pci_device != 11794) && dev->pci_device != 11810) && ((dev->pci_device != 10690 && dev->pci_device != 10674) && dev->pci_device != 10706)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 125
    dcc = readl((void const volatile   *)dev_priv->regs + 66048U);
#line 126
    switch (dcc & 3U) {
    case 0U: ;
    case 1U: 
#line 129
    swizzle_x = 0U;
#line 130
    swizzle_y = 0U;
#line 131
    goto ldv_23725;
    case 2U: ;
#line 133
    if (((dev->pci_device == 9602 || dev->pci_device == 9610) || dev->pci_device == 9618) || (dcc & 1024U) != 0U) {
#line 135
      swizzle_x = 2U;
#line 136
      swizzle_y = 1U;
    } else
#line 137
    if ((dev->pci_device == 10754 || dev->pci_device == 10818) && (dcc & 512U) == 0U) {
#line 142
      swizzle_x = 4U;
#line 143
      swizzle_y = 3U;
    } else {
#line 146
      swizzle_x = 5U;
#line 147
      swizzle_y = 5U;
    }
#line 149
    goto ldv_23725;
    }
    ldv_23725: ;
#line 151
    if (dcc == 4294967295U) {
#line 152
      printk("<3>[drm:%s] *ERROR* Couldn\'t read from MCHBAR.  Disabling tiling.\n",
             "i915_gem_detect_bit_6_swizzle");
#line 154
      swizzle_x = 5U;
#line 155
      swizzle_y = 5U;
    } else {

    }
  } else {
#line 178
    tmp = readw((void const volatile   *)dev_priv->regs + 66054U);
#line 178
    tmp___0 = readw((void const volatile   *)dev_priv->regs + 67078U);
#line 178
    if ((int )tmp != (int )tmp___0) {
#line 179
      swizzle_x = 0U;
#line 180
      swizzle_y = 0U;
    } else {
#line 182
      swizzle_x = 2U;
#line 183
      swizzle_y = 1U;
    }
  }
#line 187
  dev_priv->mm.bit_6_swizzle_x = swizzle_x;
#line 188
  dev_priv->mm.bit_6_swizzle_y = swizzle_y;
#line 189
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
int i915_gem_set_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_set_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 199
  args = (struct drm_i915_gem_set_tiling *)data;
#line 200
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 204
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 205
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 206
    return (-22);
  } else {

  }
#line 207
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 209
  ldv_mutex_lock_125(& dev->struct_mutex);
#line 211
  if (args->tiling_mode == 0U) {
#line 212
    obj_priv->tiling_mode = 0U;
#line 213
    args->swizzle_mode = 0U;
  } else {
#line 215
    if (args->tiling_mode == 1U) {
#line 216
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
    } else {
#line 218
      args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
    }
#line 220
    if (args->swizzle_mode == 5U) {
#line 221
      args->tiling_mode = 0U;
#line 222
      args->swizzle_mode = 0U;
    } else {

    }
  }
#line 225
  obj_priv->tiling_mode = args->tiling_mode;
#line 227
  ldv_mutex_unlock_126(& dev->struct_mutex);
#line 229
  drm_gem_object_unreference(obj);
#line 231
  return (0);
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
int i915_gem_get_tiling(struct drm_device *dev , void *data , struct drm_file *file_priv ) 
{ 
  struct drm_i915_gem_get_tiling *args ;
  drm_i915_private_t *dev_priv ;
  struct drm_gem_object *obj ;
  struct drm_i915_gem_object *obj_priv ;

  {
#line 241
  args = (struct drm_i915_gem_get_tiling *)data;
#line 242
  dev_priv = (drm_i915_private_t *)dev->dev_private;
#line 246
  obj = drm_gem_object_lookup(dev, file_priv, (int )args->handle);
#line 247
  if ((unsigned long )obj == (unsigned long )((struct drm_gem_object *)0)) {
#line 248
    return (-22);
  } else {

  }
#line 249
  obj_priv = (struct drm_i915_gem_object *)obj->driver_private;
#line 251
  ldv_mutex_lock_127(& dev->struct_mutex);
#line 253
  args->tiling_mode = obj_priv->tiling_mode;
#line 254
  switch (obj_priv->tiling_mode) {
  case (uint32_t )1: 
#line 256
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_x;
#line 257
  goto ldv_23747;
  case (uint32_t )2: 
#line 259
  args->swizzle_mode = dev_priv->mm.bit_6_swizzle_y;
#line 260
  goto ldv_23747;
  case (uint32_t )0: 
#line 262
  args->swizzle_mode = 0U;
#line 263
  goto ldv_23747;
  default: 
#line 265
  printk("<3>[drm:%s] *ERROR* unknown tiling mode\n", "i915_gem_get_tiling");
  }
  ldv_23747: 
#line 268
  ldv_mutex_unlock_128(& dev->struct_mutex);
#line 270
  drm_gem_object_unreference(obj);
#line 272
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 280
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 282
  mutex_lock(ldv_func_arg1);
#line 283
  return;
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 290
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 292
  mutex_unlock(ldv_func_arg1);
#line 293
  return;
}
}
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 300
  ldv_mutex_lock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 302
  mutex_lock(ldv_func_arg1);
#line 303
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_gem_tiling.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 310
  ldv_mutex_unlock_struct_mutex_of_drm_device(ldv_func_arg1);
#line 312
  mutex_unlock(ldv_func_arg1);
#line 313
  return;
}
}
#line 52 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 332 "include/acpi/acpi_bus.h"
extern int register_acpi_notifier(struct notifier_block * ) ;
#line 333
extern int unregister_acpi_notifier(struct notifier_block * ) ;
#line 577 "include/linux/pci.h"
extern int pci_bus_read_config_dword(struct pci_bus * , unsigned int  , int  , u32 * ) ;
#line 583
extern int pci_bus_write_config_dword(struct pci_bus * , unsigned int  , int  , u32  ) ;
#line 594 "include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev *dev , int where , u32 *val ) 
{ 
  int tmp ;

  {
#line 597
  tmp = pci_bus_read_config_dword(dev->bus, dev->devfn, where, val);
#line 597
  return (tmp);
}
}
#line 607 "include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev *dev , int where , u32 val ) 
{ 
  int tmp ;

  {
#line 610
  tmp = pci_bus_write_config_dword(dev->bus, dev->devfn, where, val);
#line 610
  return (tmp);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_backlight(struct drm_device *dev , u32 bclp ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 blc_pwm_ctl ;
  u32 blc_pwm_ctl2 ;

  {
#line 157
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 158
  asle = dev_priv->opregion.asle;
#line 161
  if ((int )bclp >= 0) {
#line 162
    return (8192U);
  } else {

  }
#line 164
  bclp = bclp & 2147483647U;
#line 165
  if (bclp > 255U) {
#line 166
    return (8192U);
  } else {

  }
#line 168
  blc_pwm_ctl = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 169
  blc_pwm_ctl = blc_pwm_ctl & 4294901760U;
#line 170
  blc_pwm_ctl2 = readl((void const volatile   *)dev_priv->regs + 397904U);
#line 172
  if ((blc_pwm_ctl2 & 1073741824U) != 0U) {
#line 173
    pci_write_config_dword(dev->pdev, 244, bclp);
  } else {
#line 175
    writel((bclp * 257U - 1U) | blc_pwm_ctl, (void volatile   *)dev_priv->regs + 397908U);
  }
#line 177
  asle->cblv = (bclp * 100U) / 255U | 2147483648U;
#line 179
  return (0U);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_als_illum(struct drm_device *dev , u32 alsi ) 
{ 


  {
#line 186
  return (0U);
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_pwm_freq(struct drm_device *dev , u32 pfmb ) 
{ 
  struct drm_i915_private *dev_priv ;
  u32 blc_pwm_ctl ;
  unsigned int tmp ;
  u32 pwm ;

  {
#line 191
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 192
  if ((int )pfmb < 0) {
#line 193
    tmp = readl((void const volatile   *)dev_priv->regs + 397908U);
#line 193
    blc_pwm_ctl = tmp;
#line 194
    pwm = pfmb & 2147483136U;
#line 195
    blc_pwm_ctl = blc_pwm_ctl & 65535U;
#line 196
    pwm = pwm >> 9;
  } else {

  }
#line 199
  return (0U);
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static u32 asle_set_pfit(struct drm_device *dev , u32 pfit ) 
{ 


  {
#line 206
  if ((int )pfit >= 0) {
#line 207
    return (32768U);
  } else {

  }
#line 208
  return (0U);
}
}
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void opregion_asle_intr(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  u32 asle_stat ;
  u32 asle_req ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
#line 213
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 214
  asle = dev_priv->opregion.asle;
#line 215
  asle_stat = 0U;
#line 218
  if ((unsigned long )asle == (unsigned long )((struct opregion_asle *)0)) {
#line 219
    return;
  } else {

  }
#line 221
  asle_req = asle->aslc & 15U;
#line 223
  if (asle_req == 0U) {
#line 224
    if (drm_debug != 0U) {
#line 224
      printk("<7>[drm:%s] non asle set request??\n", "opregion_asle_intr");
    } else {

    }
#line 225
    return;
  } else {

  }
#line 228
  if ((int )asle_req & 1) {
#line 229
    tmp = asle_set_als_illum(dev, asle->alsi);
#line 229
    asle_stat = tmp | asle_stat;
  } else {

  }
#line 231
  if ((asle_req & 2U) != 0U) {
#line 232
    tmp___0 = asle_set_backlight(dev, asle->bclp);
#line 232
    asle_stat = tmp___0 | asle_stat;
  } else {

  }
#line 234
  if ((asle_req & 4U) != 0U) {
#line 235
    tmp___1 = asle_set_pfit(dev, asle->pfit);
#line 235
    asle_stat = tmp___1 | asle_stat;
  } else {

  }
#line 237
  if ((asle_req & 8U) != 0U) {
#line 238
    tmp___2 = asle_set_pwm_freq(dev, asle->pfmb);
#line 238
    asle_stat = tmp___2 | asle_stat;
  } else {

  }
#line 240
  asle->aslc = asle_stat;
#line 241
  return;
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void opregion_enable_asle(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct opregion_asle *asle ;
  unsigned long irqflags ;

  {
#line 250
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 251
  asle = dev_priv->opregion.asle;
#line 253
  if ((unsigned long )asle != (unsigned long )((struct opregion_asle *)0)) {
#line 254
    if (((((dev->pci_device == 13687 || dev->pci_device == 13698) || dev->pci_device == 9618) || (dev->pci_device == 10146 || dev->pci_device == 10158)) || dev->pci_device == 10754) || dev->pci_device == 10818) {
#line 257
      irqflags = _spin_lock_irqsave(& dev_priv->user_irq_lock);
#line 258
      i915_enable_pipestat(dev_priv, 1, 4194304U);
#line 260
      _spin_unlock_irqrestore(& dev_priv->user_irq_lock, irqflags);
    } else {

    }
#line 264
    asle->tche = 15U;
#line 266
    asle->ardy = 1U;
  } else {

  }
#line 268
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static struct intel_opregion *system_opregion  ;
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
int intel_opregion_video_event(struct notifier_block *nb , unsigned long val , void *data ) 
{ 
  struct opregion_acpi *acpi ;

  {
#line 288
  if ((unsigned long )system_opregion == (unsigned long )((struct intel_opregion *)0)) {
#line 289
    return (0);
  } else {

  }
#line 291
  acpi = system_opregion->acpi;
#line 292
  acpi->csts = 0U;
#line 294
  return (1);
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
static struct notifier_block intel_opregion_notifier  =    {& intel_opregion_video_event, 0, 0};
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
int intel_opregion_init(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;
  void *base ;
  u32 asls ;
  u32 mboxes ;
  int err ;
  int tmp ;

  {
#line 303
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 304
  opregion = & dev_priv->opregion;
#line 307
  err = 0;
#line 309
  pci_read_config_dword(dev->pdev, 252, & asls);
#line 310
  if (drm_debug != 0U) {
#line 310
    printk("<7>[drm:%s] graphic opregion physical addr: 0x%x\n", "intel_opregion_init",
           asls);
  } else {

  }
#line 311
  if (asls == 0U) {
#line 312
    if (drm_debug != 0U) {
#line 312
      printk("<7>[drm:%s] ACPI OpRegion not supported!\n", "intel_opregion_init");
    } else {

    }
#line 313
    return (-524);
  } else {

  }
#line 316
  base = ioremap((resource_size_t )asls, 8192UL);
#line 317
  if ((unsigned long )base == (unsigned long )((void *)0)) {
#line 318
    return (-12);
  } else {

  }
#line 320
  opregion->header = (struct opregion_header *)base;
#line 321
  tmp = memcmp((void const   *)(& (opregion->header)->signature), (void const   *)"IntelGraphicsMem",
               16UL);
#line 321
  if (tmp != 0) {
#line 322
    if (drm_debug != 0U) {
#line 322
      printk("<7>[drm:%s] opregion signature mismatch\n", "intel_opregion_init");
    } else {

    }
#line 323
    err = -22;
#line 324
    goto err_out;
  } else {

  }
#line 327
  mboxes = (opregion->header)->mboxes;
#line 328
  if ((int )mboxes & 1) {
#line 329
    if (drm_debug != 0U) {
#line 329
      printk("<7>[drm:%s] Public ACPI methods supported\n", "intel_opregion_init");
    } else {

    }
#line 330
    opregion->acpi = (struct opregion_acpi *)base + 256U;
  } else {
#line 332
    if (drm_debug != 0U) {
#line 332
      printk("<7>[drm:%s] Public ACPI methods not supported\n", "intel_opregion_init");
    } else {

    }
#line 333
    err = -524;
#line 334
    goto err_out;
  }
#line 336
  opregion->enabled = 1;
#line 338
  if ((mboxes & 2U) != 0U) {
#line 339
    if (drm_debug != 0U) {
#line 339
      printk("<7>[drm:%s] SWSCI supported\n", "intel_opregion_init");
    } else {

    }
#line 340
    opregion->swsci = (struct opregion_swsci *)base + 512U;
  } else {

  }
#line 342
  if ((mboxes & 4U) != 0U) {
#line 343
    if (drm_debug != 0U) {
#line 343
      printk("<7>[drm:%s] ASLE supported\n", "intel_opregion_init");
    } else {

    }
#line 344
    opregion->asle = (struct opregion_asle *)base + 768U;
  } else {

  }
#line 350
  (opregion->acpi)->csts = 0U;
#line 351
  (opregion->acpi)->drdy = 1U;
#line 353
  system_opregion = opregion;
#line 354
  register_acpi_notifier(& intel_opregion_notifier);
#line 356
  return (0);
  err_out: 
#line 359
  iounmap((void volatile   *)opregion->header);
#line 360
  opregion->header = 0;
#line 361
  return (err);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void intel_opregion_free(struct drm_device *dev ) 
{ 
  struct drm_i915_private *dev_priv ;
  struct intel_opregion *opregion ;

  {
#line 366
  dev_priv = (struct drm_i915_private *)dev->dev_private;
#line 367
  opregion = & dev_priv->opregion;
#line 369
  if (opregion->enabled == 0) {
#line 370
    return;
  } else {

  }
#line 372
  (opregion->acpi)->drdy = 0U;
#line 374
  system_opregion = 0;
#line 375
  unregister_acpi_notifier(& intel_opregion_notifier);
#line 378
  iounmap((void volatile   *)opregion->header);
#line 379
  opregion->header = 0;
#line 380
  opregion->acpi = 0;
#line 381
  opregion->swsci = 0;
#line 382
  opregion->asle = 0;
#line 384
  opregion->enabled = 0;
#line 385
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_opregion.c.prepared"
void ldv_main9_sequence_infinite_withcheck_stateful(void) 
{ 
  struct notifier_block *var_group1 ;
  unsigned long var_intel_opregion_video_event_6_p1 ;
  void *var_intel_opregion_video_event_6_p2 ;
  int tmp ;
  int tmp___0 ;

  {
#line 487
  LDV_IN_INTERRUPT = 1;
#line 496
  ldv_initialize();
#line 500
  goto ldv_27287;
  ldv_27286: 
#line 503
  tmp = nondet_int();
#line 503
  switch (tmp) {
  case 0: 
#line 554
  ldv_handler_precall();
#line 555
  intel_opregion_video_event(var_group1, var_intel_opregion_video_event_6_p1, var_intel_opregion_video_event_6_p2);
#line 562
  goto ldv_27284;
  default: ;
#line 563
  goto ldv_27284;
  }
  ldv_27284: ;
  ldv_27287: 
#line 500
  tmp___0 = nondet_int();
#line 500
  if (tmp___0 != 0) {
#line 501
    goto ldv_27286;
  } else {

  }


#line 572
  ldv_check_final_state();
#line 575
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 208
  switch (8UL) {
  case 2UL: 
#line 208
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5529;
  case 4UL: 
#line 208
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5529;
  case 8UL: 
#line 208
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (16UL), "m" (_proxy_pda.kernelstack));
#line 208
  goto ldv_5529;
  default: 
#line 208
  __bad_pda_field();
  }
  ldv_5529: 
#line 208
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 209
  return (ti);
}
}
#line 207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
__inline static void *compat_alloc_user_space(long len ) 
{ 
  struct pt_regs *regs ;
  struct task_struct *tmp ;

  {
#line 209
  tmp = get_current();
#line 209
  regs = (struct pt_regs *)(tmp->thread.sp0 + 0xffffffffffffffffUL);
#line 210
  return ((void *)(regs->sp - (unsigned long )len));
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 210 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void) ;
#line 988 "include/drm/drmP.h"
extern long drm_compat_ioctl(struct file * , unsigned int  , unsigned long  ) ;
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_batchbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_batchbuffer32_t batchbuffer32 ;
  drm_i915_batchbuffer_t *batchbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 68
  tmp = copy_from_user((void *)(& batchbuffer32), (void const   *)arg, 24U);
#line 68
  if (tmp != 0UL) {
#line 70
    return (-14);
  } else {

  }
#line 72
  tmp___0 = compat_alloc_user_space(32L);
#line 72
  batchbuffer = (drm_i915_batchbuffer_t *)tmp___0;
#line 73
  tmp___1 = current_thread_info___1();
#line 73
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (batchbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 73
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 80
  if (tmp___2 == 0L) {
#line 82
    return (-14);
  } else {
#line 74
    __pu_err = 0L;
#line 74
    switch (4UL) {
    case 1UL: 
#line 74
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 74
    goto ldv_23217;
    case 2UL: 
#line 74
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 74
    goto ldv_23217;
    case 4UL: 
#line 74
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 74
    goto ldv_23217;
    case 8UL: 
#line 74
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (batchbuffer32.start),
                         "m" (*((struct __large_struct *)(& batchbuffer->start))),
                         "i" (-14), "0" (__pu_err));
#line 74
    goto ldv_23217;
    default: 
#line 74
    __put_user_bad();
    }
    ldv_23217: ;
#line 80
    if (__pu_err != 0L) {
#line 82
      return (-14);
    } else {
#line 75
      __pu_err___0 = 0L;
#line 75
      switch (4UL) {
      case 1UL: 
#line 75
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 75
      goto ldv_23225;
      case 2UL: 
#line 75
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 75
      goto ldv_23225;
      case 4UL: 
#line 75
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 75
      goto ldv_23225;
      case 8UL: 
#line 75
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (batchbuffer32.used),
                           "m" (*((struct __large_struct *)(& batchbuffer->used))),
                           "i" (-14), "0" (__pu_err___0));
#line 75
      goto ldv_23225;
      default: 
#line 75
      __put_user_bad();
      }
      ldv_23225: ;
#line 80
      if (__pu_err___0 != 0L) {
#line 82
        return (-14);
      } else {
#line 76
        __pu_err___1 = 0L;
#line 76
        switch (4UL) {
        case 1UL: 
#line 76
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 76
        goto ldv_23233;
        case 2UL: 
#line 76
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 76
        goto ldv_23233;
        case 4UL: 
#line 76
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 76
        goto ldv_23233;
        case 8UL: 
#line 76
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (batchbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& batchbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 76
        goto ldv_23233;
        default: 
#line 76
        __put_user_bad();
        }
        ldv_23233: ;
#line 80
        if (__pu_err___1 != 0L) {
#line 82
          return (-14);
        } else {
#line 77
          __pu_err___2 = 0L;
#line 77
          switch (4UL) {
          case 1UL: 
#line 77
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 77
          goto ldv_23241;
          case 2UL: 
#line 77
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 77
          goto ldv_23241;
          case 4UL: 
#line 77
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 77
          goto ldv_23241;
          case 8UL: 
#line 77
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (batchbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& batchbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 77
          goto ldv_23241;
          default: 
#line 77
          __put_user_bad();
          }
          ldv_23241: ;
#line 80
          if (__pu_err___2 != 0L) {
#line 82
            return (-14);
          } else {
#line 78
            __pu_err___3 = 0L;
#line 78
            switch (4UL) {
            case 1UL: 
#line 78
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 78
            goto ldv_23249;
            case 2UL: 
#line 78
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 78
            goto ldv_23249;
            case 4UL: 
#line 78
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 78
            goto ldv_23249;
            case 8UL: 
#line 78
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (batchbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& batchbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 78
            goto ldv_23249;
            default: 
#line 78
            __put_user_bad();
            }
            ldv_23249: ;
#line 80
            if (__pu_err___3 != 0L) {
#line 82
              return (-14);
            } else {
#line 80
              __pu_err___4 = 0L;
#line 80
              switch (8UL) {
              case 1UL: 
#line 80
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 80
              goto ldv_23257;
              case 2UL: 
#line 80
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 80
              goto ldv_23257;
              case 4UL: 
#line 80
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 80
              goto ldv_23257;
              case 8UL: 
#line 80
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )batchbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& batchbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 80
              goto ldv_23257;
              default: 
#line 80
              __put_user_bad();
              }
              ldv_23257: ;
#line 80
              if (__pu_err___4 != 0L) {
#line 82
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 84
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864643U, (unsigned long )batchbuffer);
#line 84
  return (tmp___3);
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_cmdbuffer(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_cmdbuffer32_t cmdbuffer32 ;
  drm_i915_cmdbuffer_t *cmdbuffer ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  long __pu_err___3 ;
  long __pu_err___4 ;
  int tmp___3 ;

  {
#line 104
  tmp = copy_from_user((void *)(& cmdbuffer32), (void const   *)arg, 24U);
#line 104
  if (tmp != 0UL) {
#line 106
    return (-14);
  } else {

  }
#line 108
  tmp___0 = compat_alloc_user_space(32L);
#line 108
  cmdbuffer = (drm_i915_cmdbuffer_t *)tmp___0;
#line 109
  tmp___1 = current_thread_info___1();
#line 109
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (cmdbuffer),
            "g" (32L), "rm" (tmp___1->addr_limit.seg));
#line 109
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 116
  if (tmp___2 == 0L) {
#line 118
    return (-14);
  } else {
#line 110
    __pu_err = 0L;
#line 110
    switch (8UL) {
    case 1UL: 
#line 110
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 110
    goto ldv_23283;
    case 2UL: 
#line 110
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 110
    goto ldv_23283;
    case 4UL: 
#line 110
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 110
    goto ldv_23283;
    case 8UL: 
#line 110
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((char *)((unsigned long )cmdbuffer32.buf)),
                         "m" (*((struct __large_struct *)(& cmdbuffer->buf))), "i" (-14),
                         "0" (__pu_err));
#line 110
    goto ldv_23283;
    default: 
#line 110
    __put_user_bad();
    }
    ldv_23283: ;
#line 116
    if (__pu_err != 0L) {
#line 118
      return (-14);
    } else {
#line 112
      __pu_err___0 = 0L;
#line 112
      switch (4UL) {
      case 1UL: 
#line 112
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 112
      goto ldv_23291;
      case 2UL: 
#line 112
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 112
      goto ldv_23291;
      case 4UL: 
#line 112
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 112
      goto ldv_23291;
      case 8UL: 
#line 112
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (cmdbuffer32.sz),
                           "m" (*((struct __large_struct *)(& cmdbuffer->sz))), "i" (-14),
                           "0" (__pu_err___0));
#line 112
      goto ldv_23291;
      default: 
#line 112
      __put_user_bad();
      }
      ldv_23291: ;
#line 116
      if (__pu_err___0 != 0L) {
#line 118
        return (-14);
      } else {
#line 113
        __pu_err___1 = 0L;
#line 113
        switch (4UL) {
        case 1UL: 
#line 113
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 113
        goto ldv_23299;
        case 2UL: 
#line 113
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 113
        goto ldv_23299;
        case 4UL: 
#line 113
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 113
        goto ldv_23299;
        case 8UL: 
#line 113
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (cmdbuffer32.DR1),
                             "m" (*((struct __large_struct *)(& cmdbuffer->DR1))),
                             "i" (-14), "0" (__pu_err___1));
#line 113
        goto ldv_23299;
        default: 
#line 113
        __put_user_bad();
        }
        ldv_23299: ;
#line 116
        if (__pu_err___1 != 0L) {
#line 118
          return (-14);
        } else {
#line 114
          __pu_err___2 = 0L;
#line 114
          switch (4UL) {
          case 1UL: 
#line 114
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 114
          goto ldv_23307;
          case 2UL: 
#line 114
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 114
          goto ldv_23307;
          case 4UL: 
#line 114
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 114
          goto ldv_23307;
          case 8UL: 
#line 114
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" (cmdbuffer32.DR4),
                               "m" (*((struct __large_struct *)(& cmdbuffer->DR4))),
                               "i" (-14), "0" (__pu_err___2));
#line 114
          goto ldv_23307;
          default: 
#line 114
          __put_user_bad();
          }
          ldv_23307: ;
#line 116
          if (__pu_err___2 != 0L) {
#line 118
            return (-14);
          } else {
#line 115
            __pu_err___3 = 0L;
#line 115
            switch (4UL) {
            case 1UL: 
#line 115
            __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "iq" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 115
            goto ldv_23315;
            case 2UL: 
#line 115
            __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 115
            goto ldv_23315;
            case 4UL: 
#line 115
            __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "ir" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 115
            goto ldv_23315;
            case 8UL: 
#line 115
            __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___3): "Zr" (cmdbuffer32.num_cliprects),
                                 "m" (*((struct __large_struct *)(& cmdbuffer->num_cliprects))),
                                 "i" (-14), "0" (__pu_err___3));
#line 115
            goto ldv_23315;
            default: 
#line 115
            __put_user_bad();
            }
            ldv_23315: ;
#line 116
            if (__pu_err___3 != 0L) {
#line 118
              return (-14);
            } else {
#line 116
              __pu_err___4 = 0L;
#line 116
              switch (8UL) {
              case 1UL: 
#line 116
              __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "iq" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 116
              goto ldv_23323;
              case 2UL: 
#line 116
              __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 116
              goto ldv_23323;
              case 4UL: 
#line 116
              __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "ir" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 116
              goto ldv_23323;
              case 8UL: 
#line 116
              __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___4): "Zr" ((struct drm_clip_rect *)((unsigned long )cmdbuffer32.cliprects)),
                                   "m" (*((struct __large_struct *)(& cmdbuffer->cliprects))),
                                   "i" (-14), "0" (__pu_err___4));
#line 116
              goto ldv_23323;
              default: 
#line 116
              __put_user_bad();
              }
              ldv_23323: ;
#line 116
              if (__pu_err___4 != 0L) {
#line 118
                return (-14);
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 120
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 1075864651U, (unsigned long )cmdbuffer);
#line 120
  return (tmp___3);
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_irq_emit(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_irq_emit32_t req32 ;
  drm_i915_irq_emit_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  int tmp___3 ;

  {
#line 134
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 4U);
#line 134
  if (tmp != 0UL) {
#line 135
    return (-14);
  } else {

  }
#line 137
  tmp___0 = compat_alloc_user_space(8L);
#line 137
  request = (drm_i915_irq_emit_t *)tmp___0;
#line 138
  tmp___1 = current_thread_info___1();
#line 138
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (8L), "rm" (tmp___1->addr_limit.seg));
#line 138
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 139
  if (tmp___2 == 0L) {
#line 141
    return (-14);
  } else {
#line 139
    __pu_err = 0L;
#line 139
    switch (8UL) {
    case 1UL: 
#line 139
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 139
    goto ldv_23344;
    case 2UL: 
#line 139
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 139
    goto ldv_23344;
    case 4UL: 
#line 139
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 139
    goto ldv_23344;
    case 8UL: 
#line 139
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" ((int *)((unsigned long )req32.irq_seq)),
                         "m" (*((struct __large_struct *)(& request->irq_seq))), "i" (-14),
                         "0" (__pu_err));
#line 139
    goto ldv_23344;
    default: 
#line 139
    __put_user_bad();
    }
    ldv_23344: ;
#line 139
    if (__pu_err != 0L) {
#line 141
      return (-14);
    } else {

    }
  }
#line 143
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3221775428U, (unsigned long )request);
#line 143
  return (tmp___3);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_getparam(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_getparam32_t req32 ;
  drm_i915_getparam_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  int tmp___3 ;

  {
#line 157
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 8U);
#line 157
  if (tmp != 0UL) {
#line 158
    return (-14);
  } else {

  }
#line 160
  tmp___0 = compat_alloc_user_space(16L);
#line 160
  request = (drm_i915_getparam_t *)tmp___0;
#line 161
  tmp___1 = current_thread_info___1();
#line 161
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (16L), "rm" (tmp___1->addr_limit.seg));
#line 161
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 163
  if (tmp___2 == 0L) {
#line 165
    return (-14);
  } else {
#line 162
    __pu_err = 0L;
#line 162
    switch (4UL) {
    case 1UL: 
#line 162
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_23366;
    case 2UL: 
#line 162
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_23366;
    case 4UL: 
#line 162
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_23366;
    case 8UL: 
#line 162
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.param),
                         "m" (*((struct __large_struct *)(& request->param))), "i" (-14),
                         "0" (__pu_err));
#line 162
    goto ldv_23366;
    default: 
#line 162
    __put_user_bad();
    }
    ldv_23366: ;
#line 163
    if (__pu_err != 0L) {
#line 165
      return (-14);
    } else {
#line 163
      __pu_err___0 = 0L;
#line 163
      switch (8UL) {
      case 1UL: 
#line 163
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 163
      goto ldv_23374;
      case 2UL: 
#line 163
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 163
      goto ldv_23374;
      case 4UL: 
#line 163
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 163
      goto ldv_23374;
      case 8UL: 
#line 163
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" ((int *)((unsigned long )req32.value)),
                           "m" (*((struct __large_struct *)(& request->value))), "i" (-14),
                           "0" (__pu_err___0));
#line 163
      goto ldv_23374;
      default: 
#line 163
      __put_user_bad();
      }
      ldv_23374: ;
#line 163
      if (__pu_err___0 != 0L) {
#line 165
        return (-14);
      } else {

      }
    }
  }
#line 167
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222299718U, (unsigned long )request);
#line 167
  return (tmp___3);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
static int compat_i915_alloc(struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  drm_i915_mem_alloc32_t req32 ;
  drm_i915_mem_alloc_t *request ;
  unsigned long tmp ;
  void *tmp___0 ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp___1 ;
  long tmp___2 ;
  long __pu_err ;
  long __pu_err___0 ;
  long __pu_err___1 ;
  long __pu_err___2 ;
  int tmp___3 ;

  {
#line 184
  tmp = copy_from_user((void *)(& req32), (void const   *)arg, 16U);
#line 184
  if (tmp != 0UL) {
#line 185
    return (-14);
  } else {

  }
#line 187
  tmp___0 = compat_alloc_user_space(24L);
#line 187
  request = (drm_i915_mem_alloc_t *)tmp___0;
#line 188
  tmp___1 = current_thread_info___1();
#line 188
  __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (request),
            "g" (24L), "rm" (tmp___1->addr_limit.seg));
#line 188
  tmp___2 = __builtin_expect(flag == 0UL, 1L);
#line 192
  if (tmp___2 == 0L) {
#line 194
    return (-14);
  } else {
#line 189
    __pu_err = 0L;
#line 189
    switch (4UL) {
    case 1UL: 
#line 189
    __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "iq" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 189
    goto ldv_23398;
    case 2UL: 
#line 189
    __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 189
    goto ldv_23398;
    case 4UL: 
#line 189
    __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "ir" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 189
    goto ldv_23398;
    case 8UL: 
#line 189
    __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err): "Zr" (req32.region),
                         "m" (*((struct __large_struct *)(& request->region))), "i" (-14),
                         "0" (__pu_err));
#line 189
    goto ldv_23398;
    default: 
#line 189
    __put_user_bad();
    }
    ldv_23398: ;
#line 192
    if (__pu_err != 0L) {
#line 194
      return (-14);
    } else {
#line 190
      __pu_err___0 = 0L;
#line 190
      switch (4UL) {
      case 1UL: 
#line 190
      __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "iq" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 190
      goto ldv_23406;
      case 2UL: 
#line 190
      __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 190
      goto ldv_23406;
      case 4UL: 
#line 190
      __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "ir" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 190
      goto ldv_23406;
      case 8UL: 
#line 190
      __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___0): "Zr" (req32.alignment),
                           "m" (*((struct __large_struct *)(& request->alignment))),
                           "i" (-14), "0" (__pu_err___0));
#line 190
      goto ldv_23406;
      default: 
#line 190
      __put_user_bad();
      }
      ldv_23406: ;
#line 192
      if (__pu_err___0 != 0L) {
#line 194
        return (-14);
      } else {
#line 191
        __pu_err___1 = 0L;
#line 191
        switch (4UL) {
        case 1UL: 
#line 191
        __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "iq" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 191
        goto ldv_23414;
        case 2UL: 
#line 191
        __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 191
        goto ldv_23414;
        case 4UL: 
#line 191
        __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "ir" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 191
        goto ldv_23414;
        case 8UL: 
#line 191
        __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___1): "Zr" (req32.size),
                             "m" (*((struct __large_struct *)(& request->size))),
                             "i" (-14), "0" (__pu_err___1));
#line 191
        goto ldv_23414;
        default: 
#line 191
        __put_user_bad();
        }
        ldv_23414: ;
#line 192
        if (__pu_err___1 != 0L) {
#line 194
          return (-14);
        } else {
#line 192
          __pu_err___2 = 0L;
#line 192
          switch (8UL) {
          case 1UL: 
#line 192
          __asm__  volatile   ("1:\tmovb %b1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "iq" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 192
          goto ldv_23422;
          case 2UL: 
#line 192
          __asm__  volatile   ("1:\tmovw %w1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 192
          goto ldv_23422;
          case 4UL: 
#line 192
          __asm__  volatile   ("1:\tmovl %k1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "ir" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 192
          goto ldv_23422;
          case 8UL: 
#line 192
          __asm__  volatile   ("1:\tmovq %1,%2\n2:\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .section __ex_table,\"a\"\n .balign 8 \n .quad 1b,3b\n .previous\n": "=r" (__pu_err___2): "Zr" ((int *)((unsigned long )req32.region_offset)),
                               "m" (*((struct __large_struct *)(& request->region_offset))),
                               "i" (-14), "0" (__pu_err___2));
#line 192
          goto ldv_23422;
          default: 
#line 192
          __put_user_bad();
          }
          ldv_23422: ;
#line 192
          if (__pu_err___2 != 0L) {
#line 194
            return (-14);
          } else {

          }
        }
      }
    }
  }
#line 196
  tmp___3 = drm_ioctl((file->f_path.dentry)->d_inode, file, 3222824008U, (unsigned long )request);
#line 196
  return (tmp___3);
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
drm_ioctl_compat_t *i915_compat_ioctls[12U]  = 
#line 200
  {      0,      0,      0,      & compat_i915_batchbuffer, 
        & compat_i915_irq_emit,      0,      & compat_i915_getparam,      0, 
        & compat_i915_alloc,      0,      0,      & compat_i915_cmdbuffer};
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/dscv/ri/32_7a/drivers/gpu/drm/i915/i915_ioc32.c.prepared"
long i915_compat_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  unsigned int nr ;
  drm_ioctl_compat_t *fn ;
  int ret ;
  long tmp ;

  {
#line 219
  nr = cmd & 255U;
#line 220
  fn = 0;
#line 223
  if (nr <= 63U) {
#line 224
    tmp = drm_compat_ioctl(filp, cmd, arg);
#line 224
    return (tmp);
  } else {

  }
#line 226
  if (nr <= 75U) {
#line 227
    fn = i915_compat_ioctls[nr - 64U];
  } else {

  }
#line 229
  lock_kernel();
#line 230
  if ((unsigned long )fn != (unsigned long )((drm_ioctl_compat_t *)0)) {
#line 231
    ret = (*fn)(filp, cmd, arg);
  } else {
#line 233
    ret = drm_ioctl((filp->f_path.dentry)->d_inode, filp, cmd, arg);
  }
#line 234
  unlock_kernel();
#line 236
  return ((long )ret);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_struct_mutex_of_drm_device  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_struct_mutex_of_drm_device = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_struct_mutex_of_drm_device = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_struct_mutex_of_drm_device = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_struct_mutex_of_drm_device = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_struct_mutex_of_drm_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_struct_mutex_of_drm_device = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_struct_mutex_of_drm_device(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_struct_mutex_of_drm_device == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_struct_mutex_of_drm_device = 1;
#line 158
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 165
  ldv_mutex_struct_mutex_of_drm_device = 1;
#line 166
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/gpu/drm/i915/i915.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/21/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 172
  if (ldv_mutex_struct_mutex_of_drm_device == 1) {

  } else {
#line 172
    ldv_error();
  }
#line 173
  return;
}
}
